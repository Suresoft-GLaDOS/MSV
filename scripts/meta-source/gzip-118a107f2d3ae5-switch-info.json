{
	"switch_num":	111,
	"case_num":	[203, 1, 396, 718, 396, 3, 396, 1, 1, 377, 2, 426, 3, 425, 51, 2, 425, 31, 425, 23, 425, 295, 425, 16, 425, 3, 2, 378, 34, 380, 1, 171, 2, 174, 3, 2, 174, 217, 174, 61, 174, 2, 2, 10, 557, 14, 557, 7, 557, 7, 557, 7, 557, 7, 1, 2, 2, 2, 2, 557, 3, 557, 3, 574, 1, 574, 3, 574, 3, 2, 574, 1, 2, 2, 2, 494, 10, 495, 10, 495, 7, 2, 493, 9, 2, 494, 33, 493, 75, 493, 3, 2, 225, 29, 225, 14, 225, 3, 225, 15, 225, 775, 225, 245, 2, 225, 14, 148, 2, 148, 703],
	"switch_cluster":	[[1, 3, 7, 8, 12, 15, 17, 19, 21, 23, 26, 30, 35, 37, 41, 42, 54, 55, 56, 57, 58, 64, 69, 71, 72, 73, 74, 76, 78, 81, 84, 86, 88, 91, 93, 95, 99, 101, 103, 104, 106, 108, 110], [5, 10, 14, 25, 28, 32, 34, 39, 43, 45, 47, 49, 51, 53, 60, 62, 66, 68, 80, 83, 90, 97], [0, 2, 4, 6, 9, 11, 13, 16, 18, 20, 22, 24, 27, 29, 31, 33, 36, 38, 40, 44, 46, 48, 50, 52, 59, 61, 63, 65, 67, 70, 75, 77, 79, 82, 85, 87, 89, 92, 94, 96, 98, 100, 102, 105, 107, 109], []],
	"priority":	[{
			"file":	"bits.c",
			"line":	110,
			"primary_score":	999997,
			"second_score":	11702
		}, {
			"file":	"bits.c",
			"line":	111,
			"primary_score":	999997,
			"second_score":	11701
		}, {
			"file":	"bits.c",
			"line":	112,
			"primary_score":	999997,
			"second_score":	11700
		}, {
			"file":	"bits.c",
			"line":	120,
			"primary_score":	999997,
			"second_score":	11699
		}, {
			"file":	"bits.c",
			"line":	121,
			"primary_score":	999997,
			"second_score":	11698
		}, {
			"file":	"bits.c",
			"line":	142,
			"primary_score":	999997,
			"second_score":	114
		}, {
			"file":	"bits.c",
			"line":	143,
			"primary_score":	999997,
			"second_score":	119
		}, {
			"file":	"bits.c",
			"line":	144,
			"primary_score":	999997,
			"second_score":	118
		}, {
			"file":	"bits.c",
			"line":	145,
			"primary_score":	999997,
			"second_score":	113
		}, {
			"file":	"bits.c",
			"line":	146,
			"primary_score":	999997,
			"second_score":	112
		}, {
			"file":	"bits.c",
			"line":	148,
			"primary_score":	999997,
			"second_score":	119
		}, {
			"file":	"bits.c",
			"line":	149,
			"primary_score":	999997,
			"second_score":	118
		}, {
			"file":	"bits.c",
			"line":	162,
			"primary_score":	999997,
			"second_score":	188
		}, {
			"file":	"bits.c",
			"line":	163,
			"primary_score":	999997,
			"second_score":	187
		}, {
			"file":	"bits.c",
			"line":	164,
			"primary_score":	999997,
			"second_score":	184
		}, {
			"file":	"bits.c",
			"line":	165,
			"primary_score":	999997,
			"second_score":	183
		}, {
			"file":	"bits.c",
			"line":	167,
			"primary_score":	999997,
			"second_score":	182
		}, {
			"file":	"bits.c",
			"line":	175,
			"primary_score":	999997,
			"second_score":	90
		}, {
			"file":	"bits.c",
			"line":	176,
			"primary_score":	999998,
			"second_score":	89
		}, {
			"file":	"bits.c",
			"line":	177,
			"primary_score":	999999,
			"second_score":	89
		}, {
			"file":	"bits.c",
			"line":	178,
			"primary_score":	999999,
			"second_score":	88
		}, {
			"file":	"bits.c",
			"line":	180,
			"primary_score":	999997,
			"second_score":	84
		}, {
			"file":	"bits.c",
			"line":	181,
			"primary_score":	999997,
			"second_score":	83
		}, {
			"file":	"deflate.c",
			"line":	300,
			"primary_score":	999997,
			"second_score":	3503
		}, {
			"file":	"deflate.c",
			"line":	302,
			"primary_score":	999997,
			"second_score":	3502
		}, {
			"file":	"deflate.c",
			"line":	303,
			"primary_score":	999997,
			"second_score":	3501
		}, {
			"file":	"deflate.c",
			"line":	309,
			"primary_score":	999997,
			"second_score":	3500
		}, {
			"file":	"deflate.c",
			"line":	315,
			"primary_score":	999997,
			"second_score":	3499
		}, {
			"file":	"deflate.c",
			"line":	316,
			"primary_score":	999997,
			"second_score":	3498
		}, {
			"file":	"deflate.c",
			"line":	318,
			"primary_score":	999997,
			"second_score":	3497
		}, {
			"file":	"deflate.c",
			"line":	320,
			"primary_score":	999997,
			"second_score":	3496
		}, {
			"file":	"deflate.c",
			"line":	321,
			"primary_score":	999997,
			"second_score":	3495
		}, {
			"file":	"deflate.c",
			"line":	323,
			"primary_score":	999997,
			"second_score":	3494
		}, {
			"file":	"deflate.c",
			"line":	328,
			"primary_score":	999997,
			"second_score":	3493
		}, {
			"file":	"deflate.c",
			"line":	329,
			"primary_score":	999997,
			"second_score":	3492
		}, {
			"file":	"deflate.c",
			"line":	334,
			"primary_score":	999997,
			"second_score":	3491
		}, {
			"file":	"deflate.c",
			"line":	337,
			"primary_score":	999997,
			"second_score":	3469
		}, {
			"file":	"deflate.c",
			"line":	341,
			"primary_score":	999997,
			"second_score":	3468
		}, {
			"file":	"deflate.c",
			"line":	345,
			"primary_score":	999997,
			"second_score":	3467
		}, {
			"file":	"deflate.c",
			"line":	347,
			"primary_score":	999997,
			"second_score":	3451
		}, {
			"file":	"deflate.c",
			"line":	348,
			"primary_score":	999997,
			"second_score":	3450
		}, {
			"file":	"deflate.c",
			"line":	528,
			"primary_score":	999997,
			"second_score":	3466
		}, {
			"file":	"deflate.c",
			"line":	529,
			"primary_score":	999997,
			"second_score":	3465
		}, {
			"file":	"deflate.c",
			"line":	535,
			"primary_score":	999997,
			"second_score":	3464
		}, {
			"file":	"deflate.c",
			"line":	540,
			"primary_score":	999997,
			"second_score":	3463
		}, {
			"file":	"deflate.c",
			"line":	566,
			"primary_score":	999997,
			"second_score":	3462
		}, {
			"file":	"deflate.c",
			"line":	567,
			"primary_score":	999997,
			"second_score":	3461
		}, {
			"file":	"deflate.c",
			"line":	568,
			"primary_score":	999997,
			"second_score":	3453
		}, {
			"file":	"deflate.c",
			"line":	569,
			"primary_score":	999997,
			"second_score":	3452
		}, {
			"file":	"deflate.c",
			"line":	674,
			"primary_score":	999997,
			"second_score":	3438
		}, {
			"file":	"deflate.c",
			"line":	675,
			"primary_score":	999997,
			"second_score":	3437
		}, {
			"file":	"deflate.c",
			"line":	676,
			"primary_score":	999997,
			"second_score":	3436
		}, {
			"file":	"deflate.c",
			"line":	677,
			"primary_score":	999997,
			"second_score":	3435
		}, {
			"file":	"deflate.c",
			"line":	678,
			"primary_score":	999997,
			"second_score":	3434
		}, {
			"file":	"deflate.c",
			"line":	680,
			"primary_score":	999997,
			"second_score":	3433
		}, {
			"file":	"deflate.c",
			"line":	683,
			"primary_score":	999997,
			"second_score":	3432
		}, {
			"file":	"deflate.c",
			"line":	687,
			"primary_score":	999997,
			"second_score":	3401
		}, {
			"file":	"deflate.c",
			"line":	691,
			"primary_score":	999997,
			"second_score":	3400
		}, {
			"file":	"deflate.c",
			"line":	692,
			"primary_score":	999997,
			"second_score":	3399
		}, {
			"file":	"deflate.c",
			"line":	694,
			"primary_score":	999997,
			"second_score":	3398
		}, {
			"file":	"deflate.c",
			"line":	716,
			"primary_score":	999997,
			"second_score":	3397
		}, {
			"file":	"deflate.c",
			"line":	741,
			"primary_score":	999997,
			"second_score":	3396
		}, {
			"file":	"deflate.c",
			"line":	746,
			"primary_score":	999998,
			"second_score":	3395
		}, {
			"file":	"deflate.c",
			"line":	747,
			"primary_score":	999998,
			"second_score":	3394
		}, {
			"file":	"deflate.c",
			"line":	750,
			"primary_score":	999998,
			"second_score":	3386
		}, {
			"file":	"deflate.c",
			"line":	751,
			"primary_score":	999998,
			"second_score":	3385
		}, {
			"file":	"deflate.c",
			"line":	756,
			"primary_score":	999997,
			"second_score":	3425
		}, {
			"file":	"deflate.c",
			"line":	757,
			"primary_score":	999997,
			"second_score":	3424
		}, {
			"file":	"deflate.c",
			"line":	758,
			"primary_score":	999997,
			"second_score":	3423
		}, {
			"file":	"deflate.c",
			"line":	760,
			"primary_score":	999997,
			"second_score":	3384
		}, {
			"file":	"deflate.c",
			"line":	767,
			"primary_score":	999997,
			"second_score":	3383
		}, {
			"file":	"deflate.c",
			"line":	769,
			"primary_score":	999998,
			"second_score":	3381
		}, {
			"file":	"deflate.c",
			"line":	771,
			"primary_score":	999997,
			"second_score":	3373
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	59,
			"primary_score":	999996,
			"second_score":	6
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	60,
			"primary_score":	999996,
			"second_score":	5
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	61,
			"primary_score":	999996,
			"second_score":	4
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	71,
			"primary_score":	999996,
			"second_score":	3
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	78,
			"primary_score":	999996,
			"second_score":	2
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	81,
			"primary_score":	999996,
			"second_score":	25
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	86,
			"primary_score":	999996,
			"second_score":	24
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	93,
			"primary_score":	999996,
			"second_score":	21
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	95,
			"primary_score":	999996,
			"second_score":	15
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	107,
			"primary_score":	999996,
			"second_score":	14
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	109,
			"primary_score":	999996,
			"second_score":	1
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	109,
			"primary_score":	999996,
			"second_score":	13
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	122,
			"primary_score":	999996,
			"second_score":	7
		}, {
			"file":	"gnulib/lib/fd-safer.c",
			"line":	40,
			"primary_score":	999996,
			"second_score":	8620
		}, {
			"file":	"gnulib/lib/fd-safer.c",
			"line":	49,
			"primary_score":	999996,
			"second_score":	8619
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	38,
			"primary_score":	999999,
			"second_score":	325
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	39,
			"primary_score":	999999,
			"second_score":	324
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	40,
			"primary_score":	999999,
			"second_score":	323
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	41,
			"primary_score":	999999,
			"second_score":	322
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	42,
			"primary_score":	999999,
			"second_score":	321
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	44,
			"primary_score":	999999,
			"second_score":	320
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	45,
			"primary_score":	999999,
			"second_score":	319
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	46,
			"primary_score":	999999,
			"second_score":	58
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	47,
			"primary_score":	999999,
			"second_score":	57
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	49,
			"primary_score":	999999,
			"second_score":	56
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	55,
			"primary_score":	999999,
			"second_score":	55
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	66,
			"primary_score":	999999,
			"second_score":	54
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	73,
			"primary_score":	999999,
			"second_score":	53
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	29,
			"primary_score":	999996,
			"second_score":	23
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	31,
			"primary_score":	999996,
			"second_score":	22
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	31,
			"primary_score":	999996,
			"second_score":	8627
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	33,
			"primary_score":	999996,
			"second_score":	8626
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	35,
			"primary_score":	999999,
			"second_score":	8625
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	36,
			"primary_score":	999999,
			"second_score":	8624
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	40,
			"primary_score":	999999,
			"second_score":	8623
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	42,
			"primary_score":	999999,
			"second_score":	8622
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	45,
			"primary_score":	999996,
			"second_score":	8621
		}, {
			"file":	"gnulib/lib/stat-time.h",
			"line":	107,
			"primary_score":	999999,
			"second_score":	64
		}, {
			"file":	"gnulib/lib/stat-time.h",
			"line":	135,
			"primary_score":	999997,
			"second_score":	11760
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	83,
			"primary_score":	999999,
			"second_score":	59
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	103,
			"primary_score":	999999,
			"second_score":	58
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	104,
			"primary_score":	999999,
			"second_score":	57
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	107,
			"primary_score":	999999,
			"second_score":	56
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	110,
			"primary_score":	999999,
			"second_score":	55
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	111,
			"primary_score":	999999,
			"second_score":	54
		}, {
			"file":	"gzip.c",
			"line":	410,
			"primary_score":	999996,
			"second_score":	11848
		}, {
			"file":	"gzip.c",
			"line":	411,
			"primary_score":	999996,
			"second_score":	11847
		}, {
			"file":	"gzip.c",
			"line":	413,
			"primary_score":	999996,
			"second_score":	11846
		}, {
			"file":	"gzip.c",
			"line":	415,
			"primary_score":	999996,
			"second_score":	11845
		}, {
			"file":	"gzip.c",
			"line":	416,
			"primary_score":	999996,
			"second_score":	11840
		}, {
			"file":	"gzip.c",
			"line":	418,
			"primary_score":	999996,
			"second_score":	11839
		}, {
			"file":	"gzip.c",
			"line":	421,
			"primary_score":	999996,
			"second_score":	11838
		}, {
			"file":	"gzip.c",
			"line":	425,
			"primary_score":	999996,
			"second_score":	11837
		}, {
			"file":	"gzip.c",
			"line":	426,
			"primary_score":	999996,
			"second_score":	11828
		}, {
			"file":	"gzip.c",
			"line":	447,
			"primary_score":	999996,
			"second_score":	11827
		}, {
			"file":	"gzip.c",
			"line":	448,
			"primary_score":	999996,
			"second_score":	11826
		}, {
			"file":	"gzip.c",
			"line":	450,
			"primary_score":	999996,
			"second_score":	11825
		}, {
			"file":	"gzip.c",
			"line":	452,
			"primary_score":	999997,
			"second_score":	8843
		}, {
			"file":	"gzip.c",
			"line":	468,
			"primary_score":	999997,
			"second_score":	8842
		}, {
			"file":	"gzip.c",
			"line":	532,
			"primary_score":	999996,
			"second_score":	11824
		}, {
			"file":	"gzip.c",
			"line":	533,
			"primary_score":	999996,
			"second_score":	11822
		}, {
			"file":	"gzip.c",
			"line":	535,
			"primary_score":	999996,
			"second_score":	11820
		}, {
			"file":	"gzip.c",
			"line":	539,
			"primary_score":	999996,
			"second_score":	11819
		}, {
			"file":	"gzip.c",
			"line":	544,
			"primary_score":	999996,
			"second_score":	11818
		}, {
			"file":	"gzip.c",
			"line":	549,
			"primary_score":	999996,
			"second_score":	11817
		}, {
			"file":	"gzip.c",
			"line":	552,
			"primary_score":	999996,
			"second_score":	11816
		}, {
			"file":	"gzip.c",
			"line":	553,
			"primary_score":	999996,
			"second_score":	11815
		}, {
			"file":	"gzip.c",
			"line":	554,
			"primary_score":	999996,
			"second_score":	11814
		}, {
			"file":	"gzip.c",
			"line":	555,
			"primary_score":	999996,
			"second_score":	11813
		}, {
			"file":	"gzip.c",
			"line":	557,
			"primary_score":	999996,
			"second_score":	11812
		}, {
			"file":	"gzip.c",
			"line":	563,
			"primary_score":	999996,
			"second_score":	11811
		}, {
			"file":	"gzip.c",
			"line":	564,
			"primary_score":	999996,
			"second_score":	11810
		}, {
			"file":	"gzip.c",
			"line":	567,
			"primary_score":	999996,
			"second_score":	11775
		}, {
			"file":	"gzip.c",
			"line":	568,
			"primary_score":	999996,
			"second_score":	8791
		}, {
			"file":	"gzip.c",
			"line":	571,
			"primary_score":	999996,
			"second_score":	8790
		}, {
			"file":	"gzip.c",
			"line":	572,
			"primary_score":	999996,
			"second_score":	8789
		}, {
			"file":	"gzip.c",
			"line":	575,
			"primary_score":	999998,
			"second_score":	11774
		}, {
			"file":	"gzip.c",
			"line":	577,
			"primary_score":	999997,
			"second_score":	40
		}, {
			"file":	"gzip.c",
			"line":	580,
			"primary_score":	999997,
			"second_score":	39
		}, {
			"file":	"gzip.c",
			"line":	588,
			"primary_score":	999997,
			"second_score":	593
		}, {
			"file":	"gzip.c",
			"line":	589,
			"primary_score":	999997,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	591,
			"primary_score":	999998,
			"second_score":	592
		}, {
			"file":	"gzip.c",
			"line":	600,
			"primary_score":	1000000,
			"second_score":	591
		}, {
			"file":	"gzip.c",
			"line":	608,
			"primary_score":	999998,
			"second_score":	11773
		}, {
			"file":	"gzip.c",
			"line":	630,
			"primary_score":	999998,
			"second_score":	11772
		}, {
			"file":	"gzip.c",
			"line":	631,
			"primary_score":	999998,
			"second_score":	11771
		}, {
			"file":	"gzip.c",
			"line":	633,
			"primary_score":	999998,
			"second_score":	11770
		}, {
			"file":	"gzip.c",
			"line":	634,
			"primary_score":	999998,
			"second_score":	11769
		}, {
			"file":	"gzip.c",
			"line":	636,
			"primary_score":	999998,
			"second_score":	11768
		}, {
			"file":	"gzip.c",
			"line":	637,
			"primary_score":	999998,
			"second_score":	11767
		}, {
			"file":	"gzip.c",
			"line":	640,
			"primary_score":	999998,
			"second_score":	11766
		}, {
			"file":	"gzip.c",
			"line":	645,
			"primary_score":	999998,
			"second_score":	11764
		}, {
			"file":	"gzip.c",
			"line":	646,
			"primary_score":	999998,
			"second_score":	11763
		}, {
			"file":	"gzip.c",
			"line":	647,
			"primary_score":	999998,
			"second_score":	11762
		}, {
			"file":	"gzip.c",
			"line":	648,
			"primary_score":	999998,
			"second_score":	11761
		}, {
			"file":	"gzip.c",
			"line":	650,
			"primary_score":	999998,
			"second_score":	11759
		}, {
			"file":	"gzip.c",
			"line":	651,
			"primary_score":	999998,
			"second_score":	11755
		}, {
			"file":	"gzip.c",
			"line":	652,
			"primary_score":	999998,
			"second_score":	11754
		}, {
			"file":	"gzip.c",
			"line":	653,
			"primary_score":	999998,
			"second_score":	11753
		}, {
			"file":	"gzip.c",
			"line":	655,
			"primary_score":	999998,
			"second_score":	11752
		}, {
			"file":	"gzip.c",
			"line":	661,
			"primary_score":	999998,
			"second_score":	11751
		}, {
			"file":	"gzip.c",
			"line":	668,
			"primary_score":	999998,
			"second_score":	11750
		}, {
			"file":	"gzip.c",
			"line":	669,
			"primary_score":	999998,
			"second_score":	11749
		}, {
			"file":	"gzip.c",
			"line":	671,
			"primary_score":	999998,
			"second_score":	45
		}, {
			"file":	"gzip.c",
			"line":	672,
			"primary_score":	999998,
			"second_score":	42
		}, {
			"file":	"gzip.c",
			"line":	679,
			"primary_score":	999998,
			"second_score":	41
		}, {
			"file":	"gzip.c",
			"line":	702,
			"primary_score":	999996,
			"second_score":	8788
		}, {
			"file":	"gzip.c",
			"line":	710,
			"primary_score":	999996,
			"second_score":	8781
		}, {
			"file":	"gzip.c",
			"line":	711,
			"primary_score":	999996,
			"second_score":	8754
		}, {
			"file":	"gzip.c",
			"line":	715,
			"primary_score":	999996,
			"second_score":	8753
		}, {
			"file":	"gzip.c",
			"line":	729,
			"primary_score":	999996,
			"second_score":	8752
		}, {
			"file":	"gzip.c",
			"line":	731,
			"primary_score":	999999,
			"second_score":	8751
		}, {
			"file":	"gzip.c",
			"line":	739,
			"primary_score":	999999,
			"second_score":	8750
		}, {
			"file":	"gzip.c",
			"line":	746,
			"primary_score":	999999,
			"second_score":	8749
		}, {
			"file":	"gzip.c",
			"line":	754,
			"primary_score":	999999,
			"second_score":	8748
		}, {
			"file":	"gzip.c",
			"line":	756,
			"primary_score":	999999,
			"second_score":	8747
		}, {
			"file":	"gzip.c",
			"line":	764,
			"primary_score":	999999,
			"second_score":	8746
		}, {
			"file":	"gzip.c",
			"line":	776,
			"primary_score":	999996,
			"second_score":	8745
		}, {
			"file":	"gzip.c",
			"line":	777,
			"primary_score":	999996,
			"second_score":	8744
		}, {
			"file":	"gzip.c",
			"line":	778,
			"primary_score":	999996,
			"second_score":	8743
		}, {
			"file":	"gzip.c",
			"line":	784,
			"primary_score":	999996,
			"second_score":	8742
		}, {
			"file":	"gzip.c",
			"line":	787,
			"primary_score":	999999,
			"second_score":	8741
		}, {
			"file":	"gzip.c",
			"line":	792,
			"primary_score":	999996,
			"second_score":	8698
		}, {
			"file":	"gzip.c",
			"line":	793,
			"primary_score":	999996,
			"second_score":	8694
		}, {
			"file":	"gzip.c",
			"line":	795,
			"primary_score":	999996,
			"second_score":	8693
		}, {
			"file":	"gzip.c",
			"line":	796,
			"primary_score":	999997,
			"second_score":	8692
		}, {
			"file":	"gzip.c",
			"line":	797,
			"primary_score":	999997,
			"second_score":	8638
		}, {
			"file":	"gzip.c",
			"line":	802,
			"primary_score":	999996,
			"second_score":	8637
		}, {
			"file":	"gzip.c",
			"line":	813,
			"primary_score":	999996,
			"second_score":	8636
		}, {
			"file":	"gzip.c",
			"line":	817,
			"primary_score":	999999,
			"second_score":	8635
		}, {
			"file":	"gzip.c",
			"line":	819,
			"primary_score":	999999,
			"second_score":	8612
		}, {
			"file":	"gzip.c",
			"line":	825,
			"primary_score":	999996,
			"second_score":	8611
		}, {
			"file":	"gzip.c",
			"line":	827,
			"primary_score":	999996,
			"second_score":	8609
		}, {
			"file":	"gzip.c",
			"line":	833,
			"primary_score":	999996,
			"second_score":	8608
		}, {
			"file":	"gzip.c",
			"line":	834,
			"primary_score":	999996,
			"second_score":	8607
		}, {
			"file":	"gzip.c",
			"line":	839,
			"primary_score":	999997,
			"second_score":	594
		}, {
			"file":	"gzip.c",
			"line":	842,
			"primary_score":	1000000,
			"second_score":	590
		}, {
			"file":	"gzip.c",
			"line":	843,
			"primary_score":	1000000,
			"second_score":	75
		}, {
			"file":	"gzip.c",
			"line":	847,
			"primary_score":	999997,
			"second_score":	73
		}, {
			"file":	"gzip.c",
			"line":	850,
			"primary_score":	999997,
			"second_score":	72
		}, {
			"file":	"gzip.c",
			"line":	852,
			"primary_score":	999999,
			"second_score":	71
		}, {
			"file":	"gzip.c",
			"line":	853,
			"primary_score":	999999,
			"second_score":	70
		}, {
			"file":	"gzip.c",
			"line":	855,
			"primary_score":	999999,
			"second_score":	69
		}, {
			"file":	"gzip.c",
			"line":	856,
			"primary_score":	999999,
			"second_score":	50
		}, {
			"file":	"gzip.c",
			"line":	859,
			"primary_score":	999999,
			"second_score":	49
		}, {
			"file":	"gzip.c",
			"line":	860,
			"primary_score":	999999,
			"second_score":	48
		}, {
			"file":	"gzip.c",
			"line":	861,
			"primary_score":	999999,
			"second_score":	47
		}, {
			"file":	"gzip.c",
			"line":	862,
			"primary_score":	999999,
			"second_score":	44
		}, {
			"file":	"gzip.c",
			"line":	864,
			"primary_score":	999999,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	875,
			"primary_score":	999997,
			"second_score":	42
		}, {
			"file":	"gzip.c",
			"line":	882,
			"primary_score":	999997,
			"second_score":	41
		}, {
			"file":	"gzip.c",
			"line":	908,
			"primary_score":	999999,
			"second_score":	8634
		}, {
			"file":	"gzip.c",
			"line":	909,
			"primary_score":	999999,
			"second_score":	8633
		}, {
			"file":	"gzip.c",
			"line":	912,
			"primary_score":	999999,
			"second_score":	8632
		}, {
			"file":	"gzip.c",
			"line":	914,
			"primary_score":	999999,
			"second_score":	8631
		}, {
			"file":	"gzip.c",
			"line":	915,
			"primary_score":	999999,
			"second_score":	8630
		}, {
			"file":	"gzip.c",
			"line":	917,
			"primary_score":	999999,
			"second_score":	8629
		}, {
			"file":	"gzip.c",
			"line":	918,
			"primary_score":	999999,
			"second_score":	8628
		}, {
			"file":	"gzip.c",
			"line":	919,
			"primary_score":	999999,
			"second_score":	8618
		}, {
			"file":	"gzip.c",
			"line":	920,
			"primary_score":	999999,
			"second_score":	8617
		}, {
			"file":	"gzip.c",
			"line":	922,
			"primary_score":	999999,
			"second_score":	8616
		}, {
			"file":	"gzip.c",
			"line":	923,
			"primary_score":	999999,
			"second_score":	8615
		}, {
			"file":	"gzip.c",
			"line":	949,
			"primary_score":	999999,
			"second_score":	8614
		}, {
			"file":	"gzip.c",
			"line":	956,
			"primary_score":	999999,
			"second_score":	8613
		}, {
			"file":	"gzip.c",
			"line":	974,
			"primary_score":	999999,
			"second_score":	8737
		}, {
			"file":	"gzip.c",
			"line":	975,
			"primary_score":	999999,
			"second_score":	8736
		}, {
			"file":	"gzip.c",
			"line":	976,
			"primary_score":	999999,
			"second_score":	8735
		}, {
			"file":	"gzip.c",
			"line":	982,
			"primary_score":	999999,
			"second_score":	8734
		}, {
			"file":	"gzip.c",
			"line":	984,
			"primary_score":	999999,
			"second_score":	8733
		}, {
			"file":	"gzip.c",
			"line":	985,
			"primary_score":	999999,
			"second_score":	8732
		}, {
			"file":	"gzip.c",
			"line":	994,
			"primary_score":	999999,
			"second_score":	8725
		}, {
			"file":	"gzip.c",
			"line":	995,
			"primary_score":	999999,
			"second_score":	8724
		}, {
			"file":	"gzip.c",
			"line":	996,
			"primary_score":	999999,
			"second_score":	8723
		}, {
			"file":	"gzip.c",
			"line":	1000,
			"primary_score":	999999,
			"second_score":	8722
		}, {
			"file":	"gzip.c",
			"line":	1001,
			"primary_score":	999999,
			"second_score":	8718
		}, {
			"file":	"gzip.c",
			"line":	1002,
			"primary_score":	999999,
			"second_score":	8717
		}, {
			"file":	"gzip.c",
			"line":	1003,
			"primary_score":	999999,
			"second_score":	8716
		}, {
			"file":	"gzip.c",
			"line":	1004,
			"primary_score":	999999,
			"second_score":	8715
		}, {
			"file":	"gzip.c",
			"line":	1005,
			"primary_score":	1000000,
			"second_score":	8714
		}, {
			"file":	"gzip.c",
			"line":	1006,
			"primary_score":	1000000,
			"second_score":	8712
		}, {
			"file":	"gzip.c",
			"line":	1020,
			"primary_score":	999996,
			"second_score":	8769
		}, {
			"file":	"gzip.c",
			"line":	1023,
			"primary_score":	999996,
			"second_score":	8768
		}, {
			"file":	"gzip.c",
			"line":	1025,
			"primary_score":	999999,
			"second_score":	8767
		}, {
			"file":	"gzip.c",
			"line":	1026,
			"primary_score":	999999,
			"second_score":	8766
		}, {
			"file":	"gzip.c",
			"line":	1041,
			"primary_score":	999996,
			"second_score":	8765
		}, {
			"file":	"gzip.c",
			"line":	1042,
			"primary_score":	999996,
			"second_score":	8759
		}, {
			"file":	"gzip.c",
			"line":	1049,
			"primary_score":	999996,
			"second_score":	8757
		}, {
			"file":	"gzip.c",
			"line":	1065,
			"primary_score":	999996,
			"second_score":	8780
		}, {
			"file":	"gzip.c",
			"line":	1066,
			"primary_score":	999996,
			"second_score":	8779
		}, {
			"file":	"gzip.c",
			"line":	1067,
			"primary_score":	999996,
			"second_score":	8778
		}, {
			"file":	"gzip.c",
			"line":	1068,
			"primary_score":	999996,
			"second_score":	8777
		}, {
			"file":	"gzip.c",
			"line":	1069,
			"primary_score":	999996,
			"second_score":	8776
		}, {
			"file":	"gzip.c",
			"line":	1073,
			"primary_score":	999996,
			"second_score":	8775
		}, {
			"file":	"gzip.c",
			"line":	1074,
			"primary_score":	999996,
			"second_score":	8774
		}, {
			"file":	"gzip.c",
			"line":	1077,
			"primary_score":	999996,
			"second_score":	8773
		}, {
			"file":	"gzip.c",
			"line":	1079,
			"primary_score":	999996,
			"second_score":	8772
		}, {
			"file":	"gzip.c",
			"line":	1082,
			"primary_score":	999996,
			"second_score":	8771
		}, {
			"file":	"gzip.c",
			"line":	1085,
			"primary_score":	999996,
			"second_score":	8770
		}, {
			"file":	"gzip.c",
			"line":	1086,
			"primary_score":	999996,
			"second_score":	8756
		}, {
			"file":	"gzip.c",
			"line":	1087,
			"primary_score":	999996,
			"second_score":	8755
		}, {
			"file":	"gzip.c",
			"line":	1164,
			"primary_score":	999999,
			"second_score":	8740
		}, {
			"file":	"gzip.c",
			"line":	1166,
			"primary_score":	999999,
			"second_score":	8739
		}, {
			"file":	"gzip.c",
			"line":	1168,
			"primary_score":	999999,
			"second_score":	8738
		}, {
			"file":	"gzip.c",
			"line":	1170,
			"primary_score":	999999,
			"second_score":	8711
		}, {
			"file":	"gzip.c",
			"line":	1171,
			"primary_score":	1000000,
			"second_score":	8710
		}, {
			"file":	"gzip.c",
			"line":	1185,
			"primary_score":	1000000,
			"second_score":	8709
		}, {
			"file":	"gzip.c",
			"line":	1186,
			"primary_score":	1000000,
			"second_score":	8705
		}, {
			"file":	"gzip.c",
			"line":	1189,
			"primary_score":	1000000,
			"second_score":	8700
		}, {
			"file":	"gzip.c",
			"line":	1232,
			"primary_score":	999999,
			"second_score":	8699
		}, {
			"file":	"gzip.c",
			"line":	1254,
			"primary_score":	999997,
			"second_score":	589
		}, {
			"file":	"gzip.c",
			"line":	1255,
			"primary_score":	999997,
			"second_score":	588
		}, {
			"file":	"gzip.c",
			"line":	1256,
			"primary_score":	999997,
			"second_score":	587
		}, {
			"file":	"gzip.c",
			"line":	1257,
			"primary_score":	999997,
			"second_score":	586
		}, {
			"file":	"gzip.c",
			"line":	1262,
			"primary_score":	999997,
			"second_score":	585
		}, {
			"file":	"gzip.c",
			"line":	1268,
			"primary_score":	999997,
			"second_score":	584
		}, {
			"file":	"gzip.c",
			"line":	1269,
			"primary_score":	999997,
			"second_score":	583
		}, {
			"file":	"gzip.c",
			"line":	1270,
			"primary_score":	999997,
			"second_score":	8666
		}, {
			"file":	"gzip.c",
			"line":	1272,
			"primary_score":	999997,
			"second_score":	8665
		}, {
			"file":	"gzip.c",
			"line":	1273,
			"primary_score":	999997,
			"second_score":	8664
		}, {
			"file":	"gzip.c",
			"line":	1274,
			"primary_score":	999997,
			"second_score":	8663
		}, {
			"file":	"gzip.c",
			"line":	1275,
			"primary_score":	999997,
			"second_score":	8662
		}, {
			"file":	"gzip.c",
			"line":	1278,
			"primary_score":	999997,
			"second_score":	8661
		}, {
			"file":	"gzip.c",
			"line":	1281,
			"primary_score":	999997,
			"second_score":	8660
		}, {
			"file":	"gzip.c",
			"line":	1282,
			"primary_score":	999997,
			"second_score":	8659
		}, {
			"file":	"gzip.c",
			"line":	1289,
			"primary_score":	999997,
			"second_score":	8658
		}, {
			"file":	"gzip.c",
			"line":	1290,
			"primary_score":	999997,
			"second_score":	8657
		}, {
			"file":	"gzip.c",
			"line":	1292,
			"primary_score":	999997,
			"second_score":	8656
		}, {
			"file":	"gzip.c",
			"line":	1299,
			"primary_score":	999997,
			"second_score":	8655
		}, {
			"file":	"gzip.c",
			"line":	1306,
			"primary_score":	999997,
			"second_score":	8654
		}, {
			"file":	"gzip.c",
			"line":	1313,
			"primary_score":	999997,
			"second_score":	8653
		}, {
			"file":	"gzip.c",
			"line":	1314,
			"primary_score":	999997,
			"second_score":	8652
		}, {
			"file":	"gzip.c",
			"line":	1315,
			"primary_score":	999997,
			"second_score":	8651
		}, {
			"file":	"gzip.c",
			"line":	1316,
			"primary_score":	999997,
			"second_score":	8650
		}, {
			"file":	"gzip.c",
			"line":	1317,
			"primary_score":	999997,
			"second_score":	8649
		}, {
			"file":	"gzip.c",
			"line":	1323,
			"primary_score":	999997,
			"second_score":	8648
		}, {
			"file":	"gzip.c",
			"line":	1324,
			"primary_score":	999997,
			"second_score":	8647
		}, {
			"file":	"gzip.c",
			"line":	1326,
			"primary_score":	999997,
			"second_score":	8646
		}, {
			"file":	"gzip.c",
			"line":	1334,
			"primary_score":	999997,
			"second_score":	8645
		}, {
			"file":	"gzip.c",
			"line":	1345,
			"primary_score":	999997,
			"second_score":	8644
		}, {
			"file":	"gzip.c",
			"line":	1372,
			"primary_score":	999997,
			"second_score":	8643
		}, {
			"file":	"gzip.c",
			"line":	1375,
			"primary_score":	999997,
			"second_score":	8642
		}, {
			"file":	"gzip.c",
			"line":	1376,
			"primary_score":	999997,
			"second_score":	8641
		}, {
			"file":	"gzip.c",
			"line":	1379,
			"primary_score":	1000000,
			"second_score":	100
		}, {
			"file":	"gzip.c",
			"line":	1390,
			"primary_score":	1000000,
			"second_score":	99
		}, {
			"file":	"gzip.c",
			"line":	1394,
			"primary_score":	1000000,
			"second_score":	98
		}, {
			"file":	"gzip.c",
			"line":	1399,
			"primary_score":	1000000,
			"second_score":	97
		}, {
			"file":	"gzip.c",
			"line":	1404,
			"primary_score":	1000000,
			"second_score":	96
		}, {
			"file":	"gzip.c",
			"line":	1410,
			"primary_score":	999997,
			"second_score":	8640
		}, {
			"file":	"gzip.c",
			"line":	1412,
			"primary_score":	1000000,
			"second_score":	94
		}, {
			"file":	"gzip.c",
			"line":	1418,
			"primary_score":	1000000,
			"second_score":	93
		}, {
			"file":	"gzip.c",
			"line":	1420,
			"primary_score":	1000000,
			"second_score":	92
		}, {
			"file":	"gzip.c",
			"line":	1421,
			"primary_score":	1000000,
			"second_score":	91
		}, {
			"file":	"gzip.c",
			"line":	1423,
			"primary_score":	1000000,
			"second_score":	79
		}, {
			"file":	"gzip.c",
			"line":	1425,
			"primary_score":	1000000,
			"second_score":	78
		}, {
			"file":	"gzip.c",
			"line":	1427,
			"primary_score":	1000000,
			"second_score":	77
		}, {
			"file":	"gzip.c",
			"line":	1428,
			"primary_score":	1000000,
			"second_score":	76
		}, {
			"file":	"gzip.c",
			"line":	1647,
			"primary_score":	999999,
			"second_score":	68
		}, {
			"file":	"gzip.c",
			"line":	1648,
			"primary_score":	999999,
			"second_score":	67
		}, {
			"file":	"gzip.c",
			"line":	1651,
			"primary_score":	999999,
			"second_score":	66
		}, {
			"file":	"gzip.c",
			"line":	1652,
			"primary_score":	999999,
			"second_score":	65
		}, {
			"file":	"gzip.c",
			"line":	1653,
			"primary_score":	999999,
			"second_score":	63
		}, {
			"file":	"gzip.c",
			"line":	1655,
			"primary_score":	999999,
			"second_score":	61
		}, {
			"file":	"gzip.c",
			"line":	1665,
			"primary_score":	999999,
			"second_score":	60
		}, {
			"file":	"gzip.c",
			"line":	1679,
			"primary_score":	999999,
			"second_score":	53
		}, {
			"file":	"gzip.c",
			"line":	1687,
			"primary_score":	999999,
			"second_score":	52
		}, {
			"file":	"gzip.c",
			"line":	1691,
			"primary_score":	999999,
			"second_score":	51
		}, {
			"file":	"gzip.c",
			"line":	1783,
			"primary_score":	999996,
			"second_score":	11809
		}, {
			"file":	"gzip.c",
			"line":	1784,
			"primary_score":	999996,
			"second_score":	11808
		}, {
			"file":	"gzip.c",
			"line":	1787,
			"primary_score":	999996,
			"second_score":	11807
		}, {
			"file":	"gzip.c",
			"line":	1789,
			"primary_score":	999996,
			"second_score":	11806
		}, {
			"file":	"gzip.c",
			"line":	1790,
			"primary_score":	999996,
			"second_score":	11805
		}, {
			"file":	"gzip.c",
			"line":	1792,
			"primary_score":	999996,
			"second_score":	11790
		}, {
			"file":	"gzip.c",
			"line":	1793,
			"primary_score":	999996,
			"second_score":	11789
		}, {
			"file":	"gzip.c",
			"line":	1794,
			"primary_score":	999996,
			"second_score":	11791
		}, {
			"file":	"gzip.c",
			"line":	1797,
			"primary_score":	999996,
			"second_score":	11788
		}, {
			"file":	"gzip.c",
			"line":	1798,
			"primary_score":	999996,
			"second_score":	11787
		}, {
			"file":	"gzip.c",
			"line":	1799,
			"primary_score":	999996,
			"second_score":	11786
		}, {
			"file":	"gzip.c",
			"line":	1801,
			"primary_score":	999996,
			"second_score":	11785
		}, {
			"file":	"gzip.c",
			"line":	1804,
			"primary_score":	999996,
			"second_score":	11777
		}, {
			"file":	"gzip.c",
			"line":	1805,
			"primary_score":	999996,
			"second_score":	11783
		}, {
			"file":	"gzip.c",
			"line":	1806,
			"primary_score":	999996,
			"second_score":	11776
		}, {
			"file":	"gzip.c",
			"line":	1826,
			"primary_score":	999996,
			"second_score":	38
		}, {
			"file":	"gzip.c",
			"line":	1828,
			"primary_score":	999996,
			"second_score":	37
		}, {
			"file":	"gzip.c",
			"line":	1829,
			"primary_score":	999996,
			"second_score":	36
		}, {
			"file":	"gzip.c",
			"line":	1830,
			"primary_score":	999996,
			"second_score":	35
		}, {
			"file":	"gzip.c",
			"line":	1831,
			"primary_score":	999996,
			"second_score":	34
		}, {
			"file":	"gzip.c",
			"line":	1832,
			"primary_score":	999996,
			"second_score":	33
		}, {
			"file":	"gzip.c",
			"line":	1833,
			"primary_score":	999996,
			"second_score":	32
		}, {
			"file":	"gzip.c",
			"line":	1834,
			"primary_score":	999996,
			"second_score":	31
		}, {
			"file":	"gzip.c",
			"line":	1835,
			"primary_score":	999996,
			"second_score":	30
		}, {
			"file":	"gzip.c",
			"line":	1836,
			"primary_score":	999996,
			"second_score":	29
		}, {
			"file":	"gzip.c",
			"line":	1837,
			"primary_score":	999996,
			"second_score":	28
		}, {
			"file":	"gzip.c",
			"line":	1839,
			"primary_score":	999996,
			"second_score":	27
		}, {
			"file":	"gzip.c",
			"line":	1844,
			"primary_score":	999996,
			"second_score":	26
		}, {
			"file":	"gzip.c",
			"line":	1853,
			"primary_score":	999999,
			"second_score":	50
		}, {
			"file":	"gzip.c",
			"line":	1854,
			"primary_score":	999999,
			"second_score":	49
		}, {
			"file":	"gzip.c",
			"line":	1856,
			"primary_score":	999999,
			"second_score":	48
		}, {
			"file":	"gzip.c",
			"line":	1857,
			"primary_score":	999999,
			"second_score":	47
		}, {
			"file":	"gzip.c",
			"line":	1858,
			"primary_score":	999999,
			"second_score":	46
		}, {
			"file":	"gzip.c",
			"line":	1860,
			"primary_score":	1000000,
			"second_score":	45
		}, {
			"file":	"gzip.c",
			"line":	1861,
			"primary_score":	1000000,
			"second_score":	44
		}, {
			"file":	"gzip.c",
			"line":	1862,
			"primary_score":	1000000,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	1864,
			"primary_score":	999999,
			"second_score":	40
		}, {
			"file":	"gzip.c",
			"line":	1873,
			"primary_score":	999999,
			"second_score":	51
		}, {
			"file":	"gzip.c",
			"line":	1874,
			"primary_score":	999999,
			"second_score":	39
		}, {
			"file":	"inflate.c",
			"line":	301,
			"primary_score":	999997,
			"second_score":	1614
		}, {
			"file":	"inflate.c",
			"line":	302,
			"primary_score":	999997,
			"second_score":	1613
		}, {
			"file":	"inflate.c",
			"line":	303,
			"primary_score":	999997,
			"second_score":	1612
		}, {
			"file":	"inflate.c",
			"line":	304,
			"primary_score":	999997,
			"second_score":	1611
		}, {
			"file":	"inflate.c",
			"line":	305,
			"primary_score":	999997,
			"second_score":	1610
		}, {
			"file":	"inflate.c",
			"line":	306,
			"primary_score":	999997,
			"second_score":	1609
		}, {
			"file":	"inflate.c",
			"line":	307,
			"primary_score":	999997,
			"second_score":	1608
		}, {
			"file":	"inflate.c",
			"line":	308,
			"primary_score":	999997,
			"second_score":	1607
		}, {
			"file":	"inflate.c",
			"line":	309,
			"primary_score":	999997,
			"second_score":	1606
		}, {
			"file":	"inflate.c",
			"line":	310,
			"primary_score":	999997,
			"second_score":	1605
		}, {
			"file":	"inflate.c",
			"line":	311,
			"primary_score":	999997,
			"second_score":	1604
		}, {
			"file":	"inflate.c",
			"line":	312,
			"primary_score":	999997,
			"second_score":	1603
		}, {
			"file":	"inflate.c",
			"line":	313,
			"primary_score":	999997,
			"second_score":	1602
		}, {
			"file":	"inflate.c",
			"line":	314,
			"primary_score":	999997,
			"second_score":	1601
		}, {
			"file":	"inflate.c",
			"line":	315,
			"primary_score":	999997,
			"second_score":	1600
		}, {
			"file":	"inflate.c",
			"line":	316,
			"primary_score":	999997,
			"second_score":	1599
		}, {
			"file":	"inflate.c",
			"line":	317,
			"primary_score":	999997,
			"second_score":	1598
		}, {
			"file":	"inflate.c",
			"line":	318,
			"primary_score":	999997,
			"second_score":	1597
		}, {
			"file":	"inflate.c",
			"line":	319,
			"primary_score":	999997,
			"second_score":	1596
		}, {
			"file":	"inflate.c",
			"line":	323,
			"primary_score":	999997,
			"second_score":	1595
		}, {
			"file":	"inflate.c",
			"line":	324,
			"primary_score":	999997,
			"second_score":	1594
		}, {
			"file":	"inflate.c",
			"line":	325,
			"primary_score":	999997,
			"second_score":	1592
		}, {
			"file":	"inflate.c",
			"line":	327,
			"primary_score":	999997,
			"second_score":	1504
		}, {
			"file":	"inflate.c",
			"line":	328,
			"primary_score":	999997,
			"second_score":	1503
		}, {
			"file":	"inflate.c",
			"line":	329,
			"primary_score":	999997,
			"second_score":	1502
		}, {
			"file":	"inflate.c",
			"line":	331,
			"primary_score":	999997,
			"second_score":	1501
		}, {
			"file":	"inflate.c",
			"line":	349,
			"primary_score":	999997,
			"second_score":	1500
		}, {
			"file":	"inflate.c",
			"line":	350,
			"primary_score":	999997,
			"second_score":	1499
		}, {
			"file":	"inflate.c",
			"line":	352,
			"primary_score":	999997,
			"second_score":	1498
		}, {
			"file":	"inflate.c",
			"line":	353,
			"primary_score":	999997,
			"second_score":	1497
		}, {
			"file":	"inflate.c",
			"line":	354,
			"primary_score":	999997,
			"second_score":	1496
		}, {
			"file":	"inflate.c",
			"line":	356,
			"primary_score":	999997,
			"second_score":	1495
		}, {
			"file":	"inflate.c",
			"line":	358,
			"primary_score":	999997,
			"second_score":	1494
		}, {
			"file":	"inflate.c",
			"line":	359,
			"primary_score":	999997,
			"second_score":	1493
		}, {
			"file":	"inflate.c",
			"line":	360,
			"primary_score":	999997,
			"second_score":	1492
		}, {
			"file":	"inflate.c",
			"line":	362,
			"primary_score":	999997,
			"second_score":	1491
		}, {
			"file":	"inflate.c",
			"line":	366,
			"primary_score":	999997,
			"second_score":	1490
		}, {
			"file":	"inflate.c",
			"line":	369,
			"primary_score":	999997,
			"second_score":	1489
		}, {
			"file":	"inflate.c",
			"line":	371,
			"primary_score":	999997,
			"second_score":	1488
		}, {
			"file":	"inflate.c",
			"line":	375,
			"primary_score":	999997,
			"second_score":	1487
		}, {
			"file":	"inflate.c",
			"line":	376,
			"primary_score":	999997,
			"second_score":	1486
		}, {
			"file":	"inflate.c",
			"line":	377,
			"primary_score":	999997,
			"second_score":	1484
		}, {
			"file":	"inflate.c",
			"line":	378,
			"primary_score":	999998,
			"second_score":	1480
		}, {
			"file":	"inflate.c",
			"line":	383,
			"primary_score":	999997,
			"second_score":	1479
		}, {
			"file":	"inflate.c",
			"line":	384,
			"primary_score":	999997,
			"second_score":	1477
		}, {
			"file":	"inflate.c",
			"line":	385,
			"primary_score":	999997,
			"second_score":	1418
		}, {
			"file":	"inflate.c",
			"line":	386,
			"primary_score":	999997,
			"second_score":	1417
		}, {
			"file":	"inflate.c",
			"line":	388,
			"primary_score":	999997,
			"second_score":	1416
		}, {
			"file":	"inflate.c",
			"line":	392,
			"primary_score":	999997,
			"second_score":	1415
		}, {
			"file":	"inflate.c",
			"line":	393,
			"primary_score":	999997,
			"second_score":	1414
		}, {
			"file":	"inflate.c",
			"line":	394,
			"primary_score":	999997,
			"second_score":	1413
		}, {
			"file":	"inflate.c",
			"line":	395,
			"primary_score":	999997,
			"second_score":	1412
		}, {
			"file":	"inflate.c",
			"line":	396,
			"primary_score":	999997,
			"second_score":	1411
		}, {
			"file":	"inflate.c",
			"line":	397,
			"primary_score":	999997,
			"second_score":	1410
		}, {
			"file":	"inflate.c",
			"line":	398,
			"primary_score":	999997,
			"second_score":	1409
		}, {
			"file":	"inflate.c",
			"line":	401,
			"primary_score":	999997,
			"second_score":	1408
		}, {
			"file":	"inflate.c",
			"line":	403,
			"primary_score":	999997,
			"second_score":	1407
		}, {
			"file":	"inflate.c",
			"line":	404,
			"primary_score":	999997,
			"second_score":	1406
		}, {
			"file":	"inflate.c",
			"line":	408,
			"primary_score":	999997,
			"second_score":	1055
		}, {
			"file":	"inflate.c",
			"line":	410,
			"primary_score":	999997,
			"second_score":	1404
		}, {
			"file":	"inflate.c",
			"line":	411,
			"primary_score":	999997,
			"second_score":	1403
		}, {
			"file":	"inflate.c",
			"line":	414,
			"primary_score":	999997,
			"second_score":	1402
		}, {
			"file":	"inflate.c",
			"line":	415,
			"primary_score":	999997,
			"second_score":	1401
		}, {
			"file":	"inflate.c",
			"line":	417,
			"primary_score":	999998,
			"second_score":	7032
		}, {
			"file":	"inflate.c",
			"line":	418,
			"primary_score":	999998,
			"second_score":	7031
		}, {
			"file":	"inflate.c",
			"line":	419,
			"primary_score":	999998,
			"second_score":	7030
		}, {
			"file":	"inflate.c",
			"line":	427,
			"primary_score":	999997,
			"second_score":	1400
		}, {
			"file":	"inflate.c",
			"line":	430,
			"primary_score":	999997,
			"second_score":	1399
		}, {
			"file":	"inflate.c",
			"line":	437,
			"primary_score":	999997,
			"second_score":	1398
		}, {
			"file":	"inflate.c",
			"line":	438,
			"primary_score":	999997,
			"second_score":	1397
		}, {
			"file":	"inflate.c",
			"line":	439,
			"primary_score":	999997,
			"second_score":	1396
		}, {
			"file":	"inflate.c",
			"line":	440,
			"primary_score":	999997,
			"second_score":	1395
		}, {
			"file":	"inflate.c",
			"line":	443,
			"primary_score":	999997,
			"second_score":	1394
		}, {
			"file":	"inflate.c",
			"line":	445,
			"primary_score":	999999,
			"second_score":	1673
		}, {
			"file":	"inflate.c",
			"line":	446,
			"primary_score":	999999,
			"second_score":	1672
		}, {
			"file":	"inflate.c",
			"line":	447,
			"primary_score":	999999,
			"second_score":	1671
		}, {
			"file":	"inflate.c",
			"line":	448,
			"primary_score":	999999,
			"second_score":	1670
		}, {
			"file":	"inflate.c",
			"line":	449,
			"primary_score":	999999,
			"second_score":	1669
		}, {
			"file":	"inflate.c",
			"line":	450,
			"primary_score":	999999,
			"second_score":	1668
		}, {
			"file":	"inflate.c",
			"line":	455,
			"primary_score":	999997,
			"second_score":	1054
		}, {
			"file":	"inflate.c",
			"line":	456,
			"primary_score":	999997,
			"second_score":	1053
		}, {
			"file":	"inflate.c",
			"line":	457,
			"primary_score":	999998,
			"second_score":	1052
		}, {
			"file":	"inflate.c",
			"line":	458,
			"primary_score":	999997,
			"second_score":	1072
		}, {
			"file":	"inflate.c",
			"line":	460,
			"primary_score":	999997,
			"second_score":	1628
		}, {
			"file":	"inflate.c",
			"line":	461,
			"primary_score":	999997,
			"second_score":	1627
		}, {
			"file":	"inflate.c",
			"line":	462,
			"primary_score":	999997,
			"second_score":	1626
		}, {
			"file":	"inflate.c",
			"line":	466,
			"primary_score":	999998,
			"second_score":	1071
		}, {
			"file":	"inflate.c",
			"line":	467,
			"primary_score":	999998,
			"second_score":	1070
		}, {
			"file":	"inflate.c",
			"line":	471,
			"primary_score":	999997,
			"second_score":	1051
		}, {
			"file":	"inflate.c",
			"line":	472,
			"primary_score":	999997,
			"second_score":	1050
		}, {
			"file":	"inflate.c",
			"line":	476,
			"primary_score":	999997,
			"second_score":	1049
		}, {
			"file":	"inflate.c",
			"line":	478,
			"primary_score":	999997,
			"second_score":	1048
		}, {
			"file":	"inflate.c",
			"line":	481,
			"primary_score":	999997,
			"second_score":	1047
		}, {
			"file":	"inflate.c",
			"line":	483,
			"primary_score":	999999,
			"second_score":	1620
		}, {
			"file":	"inflate.c",
			"line":	484,
			"primary_score":	999999,
			"second_score":	1619
		}, {
			"file":	"inflate.c",
			"line":	491,
			"primary_score":	999997,
			"second_score":	1046
		}, {
			"file":	"inflate.c",
			"line":	502,
			"primary_score":	999997,
			"second_score":	655
		}, {
			"file":	"inflate.c",
			"line":	506,
			"primary_score":	999997,
			"second_score":	654
		}, {
			"file":	"inflate.c",
			"line":	507,
			"primary_score":	999997,
			"second_score":	653
		}, {
			"file":	"inflate.c",
			"line":	509,
			"primary_score":	999997,
			"second_score":	652
		}, {
			"file":	"inflate.c",
			"line":	510,
			"primary_score":	999997,
			"second_score":	651
		}, {
			"file":	"inflate.c",
			"line":	511,
			"primary_score":	999997,
			"second_score":	650
		}, {
			"file":	"inflate.c",
			"line":	513,
			"primary_score":	999997,
			"second_score":	649
		}, {
			"file":	"inflate.c",
			"line":	523,
			"primary_score":	999997,
			"second_score":	1044
		}, {
			"file":	"inflate.c",
			"line":	524,
			"primary_score":	999997,
			"second_score":	1043
		}, {
			"file":	"inflate.c",
			"line":	525,
			"primary_score":	999997,
			"second_score":	1042
		}, {
			"file":	"inflate.c",
			"line":	526,
			"primary_score":	999997,
			"second_score":	1041
		}, {
			"file":	"inflate.c",
			"line":	527,
			"primary_score":	999997,
			"second_score":	1040
		}, {
			"file":	"inflate.c",
			"line":	528,
			"primary_score":	999997,
			"second_score":	1039
		}, {
			"file":	"inflate.c",
			"line":	529,
			"primary_score":	999997,
			"second_score":	1038
		}, {
			"file":	"inflate.c",
			"line":	533,
			"primary_score":	999997,
			"second_score":	1037
		}, {
			"file":	"inflate.c",
			"line":	534,
			"primary_score":	999997,
			"second_score":	1036
		}, {
			"file":	"inflate.c",
			"line":	535,
			"primary_score":	999997,
			"second_score":	1035
		}, {
			"file":	"inflate.c",
			"line":	538,
			"primary_score":	999997,
			"second_score":	1034
		}, {
			"file":	"inflate.c",
			"line":	539,
			"primary_score":	999997,
			"second_score":	1033
		}, {
			"file":	"inflate.c",
			"line":	540,
			"primary_score":	999997,
			"second_score":	1032
		}, {
			"file":	"inflate.c",
			"line":	542,
			"primary_score":	999998,
			"second_score":	989
		}, {
			"file":	"inflate.c",
			"line":	543,
			"primary_score":	999997,
			"second_score":	987
		}, {
			"file":	"inflate.c",
			"line":	544,
			"primary_score":	999998,
			"second_score":	1006
		}, {
			"file":	"inflate.c",
			"line":	545,
			"primary_score":	999998,
			"second_score":	1005
		}, {
			"file":	"inflate.c",
			"line":	547,
			"primary_score":	999999,
			"second_score":	1004
		}, {
			"file":	"inflate.c",
			"line":	548,
			"primary_score":	999999,
			"second_score":	1001
		}, {
			"file":	"inflate.c",
			"line":	549,
			"primary_score":	999999,
			"second_score":	1000
		}, {
			"file":	"inflate.c",
			"line":	551,
			"primary_score":	999998,
			"second_score":	986
		}, {
			"file":	"inflate.c",
			"line":	552,
			"primary_score":	999998,
			"second_score":	983
		}, {
			"file":	"inflate.c",
			"line":	554,
			"primary_score":	999998,
			"second_score":	994
		}, {
			"file":	"inflate.c",
			"line":	555,
			"primary_score":	999998,
			"second_score":	993
		}, {
			"file":	"inflate.c",
			"line":	556,
			"primary_score":	999998,
			"second_score":	992
		}, {
			"file":	"inflate.c",
			"line":	565,
			"primary_score":	999998,
			"second_score":	982
		}, {
			"file":	"inflate.c",
			"line":	566,
			"primary_score":	999998,
			"second_score":	981
		}, {
			"file":	"inflate.c",
			"line":	616,
			"primary_score":	999998,
			"second_score":	980
		}, {
			"file":	"inflate.c",
			"line":	617,
			"primary_score":	999998,
			"second_score":	979
		}, {
			"file":	"inflate.c",
			"line":	618,
			"primary_score":	999998,
			"second_score":	978
		}, {
			"file":	"inflate.c",
			"line":	621,
			"primary_score":	999998,
			"second_score":	977
		}, {
			"file":	"inflate.c",
			"line":	684,
			"primary_score":	999999,
			"second_score":	8552
		}, {
			"file":	"inflate.c",
			"line":	685,
			"primary_score":	999999,
			"second_score":	8551
		}, {
			"file":	"inflate.c",
			"line":	686,
			"primary_score":	999999,
			"second_score":	8550
		}, {
			"file":	"inflate.c",
			"line":	687,
			"primary_score":	999999,
			"second_score":	8549
		}, {
			"file":	"inflate.c",
			"line":	688,
			"primary_score":	999999,
			"second_score":	8548
		}, {
			"file":	"inflate.c",
			"line":	689,
			"primary_score":	999999,
			"second_score":	8547
		}, {
			"file":	"inflate.c",
			"line":	693,
			"primary_score":	999999,
			"second_score":	8546
		}, {
			"file":	"inflate.c",
			"line":	695,
			"primary_score":	999999,
			"second_score":	8545
		}, {
			"file":	"inflate.c",
			"line":	697,
			"primary_score":	999999,
			"second_score":	8544
		}, {
			"file":	"inflate.c",
			"line":	699,
			"primary_score":	999999,
			"second_score":	8543
		}, {
			"file":	"inflate.c",
			"line":	701,
			"primary_score":	999999,
			"second_score":	8542
		}, {
			"file":	"inflate.c",
			"line":	702,
			"primary_score":	999999,
			"second_score":	8541
		}, {
			"file":	"inflate.c",
			"line":	707,
			"primary_score":	999999,
			"second_score":	1617
		}, {
			"file":	"inflate.c",
			"line":	709,
			"primary_score":	999999,
			"second_score":	1616
		}, {
			"file":	"inflate.c",
			"line":	710,
			"primary_score":	999999,
			"second_score":	1615
		}, {
			"file":	"inflate.c",
			"line":	718,
			"primary_score":	999999,
			"second_score":	1045
		}, {
			"file":	"inflate.c",
			"line":	723,
			"primary_score":	999999,
			"second_score":	976
		}, {
			"file":	"inflate.c",
			"line":	724,
			"primary_score":	999999,
			"second_score":	656
		}, {
			"file":	"inflate.c",
			"line":	725,
			"primary_score":	999999,
			"second_score":	648
		}, {
			"file":	"inflate.c",
			"line":	903,
			"primary_score":	999997,
			"second_score":	8579
		}, {
			"file":	"inflate.c",
			"line":	904,
			"primary_score":	999997,
			"second_score":	8578
		}, {
			"file":	"inflate.c",
			"line":	905,
			"primary_score":	999997,
			"second_score":	8577
		}, {
			"file":	"inflate.c",
			"line":	906,
			"primary_score":	999997,
			"second_score":	8576
		}, {
			"file":	"inflate.c",
			"line":	910,
			"primary_score":	999997,
			"second_score":	8575
		}, {
			"file":	"inflate.c",
			"line":	911,
			"primary_score":	999997,
			"second_score":	8574
		}, {
			"file":	"inflate.c",
			"line":	912,
			"primary_score":	999997,
			"second_score":	8573
		}, {
			"file":	"inflate.c",
			"line":	916,
			"primary_score":	999997,
			"second_score":	8572
		}, {
			"file":	"inflate.c",
			"line":	917,
			"primary_score":	999997,
			"second_score":	8568
		}, {
			"file":	"inflate.c",
			"line":	918,
			"primary_score":	999997,
			"second_score":	8567
		}, {
			"file":	"inflate.c",
			"line":	922,
			"primary_score":	999997,
			"second_score":	8564
		}, {
			"file":	"inflate.c",
			"line":	923,
			"primary_score":	999997,
			"second_score":	8562
		}, {
			"file":	"inflate.c",
			"line":	924,
			"primary_score":	999997,
			"second_score":	8561
		}, {
			"file":	"inflate.c",
			"line":	928,
			"primary_score":	999997,
			"second_score":	8558
		}, {
			"file":	"inflate.c",
			"line":	929,
			"primary_score":	999997,
			"second_score":	8557
		}, {
			"file":	"inflate.c",
			"line":	933,
			"primary_score":	999997,
			"second_score":	8556
		}, {
			"file":	"inflate.c",
			"line":	935,
			"primary_score":	999999,
			"second_score":	8555
		}, {
			"file":	"inflate.c",
			"line":	937,
			"primary_score":	999999,
			"second_score":	8554
		}, {
			"file":	"inflate.c",
			"line":	938,
			"primary_score":	999999,
			"second_score":	8553
		}, {
			"file":	"inflate.c",
			"line":	950,
			"primary_score":	999997,
			"second_score":	8589
		}, {
			"file":	"inflate.c",
			"line":	951,
			"primary_score":	999997,
			"second_score":	8588
		}, {
			"file":	"inflate.c",
			"line":	952,
			"primary_score":	999997,
			"second_score":	8587
		}, {
			"file":	"inflate.c",
			"line":	956,
			"primary_score":	999997,
			"second_score":	8586
		}, {
			"file":	"inflate.c",
			"line":	957,
			"primary_score":	999997,
			"second_score":	8585
		}, {
			"file":	"inflate.c",
			"line":	958,
			"primary_score":	999997,
			"second_score":	8584
		}, {
			"file":	"inflate.c",
			"line":	962,
			"primary_score":	999997,
			"second_score":	8583
		}, {
			"file":	"inflate.c",
			"line":	963,
			"primary_score":	999997,
			"second_score":	8582
		}, {
			"file":	"inflate.c",
			"line":	964,
			"primary_score":	999997,
			"second_score":	8581
		}, {
			"file":	"inflate.c",
			"line":	965,
			"primary_score":	999997,
			"second_score":	8580
		}, {
			"file":	"inflate.c",
			"line":	967,
			"primary_score":	999998,
			"second_score":	647
		}, {
			"file":	"inflate.c",
			"line":	968,
			"primary_score":	999998,
			"second_score":	646
		}, {
			"file":	"inflate.c",
			"line":	974,
			"primary_score":	999998,
			"second_score":	645
		}, {
			"file":	"inflate.c",
			"line":	980,
			"primary_score":	999998,
			"second_score":	644
		}, {
			"file":	"inflate.c",
			"line":	984,
			"primary_score":	999998,
			"second_score":	623
		}, {
			"file":	"inflate.c",
			"line":	985,
			"primary_score":	999998,
			"second_score":	622
		}, {
			"file":	"lib/printf-args.c",
			"line":	40,
			"primary_score":	999999,
			"second_score":	169
		}, {
			"file":	"lib/printf-args.c",
			"line":	41,
			"primary_score":	999999,
			"second_score":	168
		}, {
			"file":	"lib/printf-args.c",
			"line":	43,
			"primary_score":	999999,
			"second_score":	167
		}, {
			"file":	"lib/printf-args.c",
			"line":	103,
			"primary_score":	999999,
			"second_score":	166
		}, {
			"file":	"lib/printf-args.c",
			"line":	105,
			"primary_score":	999999,
			"second_score":	165
		}, {
			"file":	"lib/printf-args.c",
			"line":	188,
			"primary_score":	999999,
			"second_score":	164
		}, {
			"file":	"lib/printf-parse.c",
			"line":	85,
			"primary_score":	999999,
			"second_score":	315
		}, {
			"file":	"lib/printf-parse.c",
			"line":	86,
			"primary_score":	999999,
			"second_score":	314
		}, {
			"file":	"lib/printf-parse.c",
			"line":	87,
			"primary_score":	999999,
			"second_score":	313
		}, {
			"file":	"lib/printf-parse.c",
			"line":	88,
			"primary_score":	999999,
			"second_score":	312
		}, {
			"file":	"lib/printf-parse.c",
			"line":	89,
			"primary_score":	999999,
			"second_score":	311
		}, {
			"file":	"lib/printf-parse.c",
			"line":	90,
			"primary_score":	999999,
			"second_score":	310
		}, {
			"file":	"lib/printf-parse.c",
			"line":	92,
			"primary_score":	999999,
			"second_score":	309
		}, {
			"file":	"lib/printf-parse.c",
			"line":	93,
			"primary_score":	999999,
			"second_score":	308
		}, {
			"file":	"lib/printf-parse.c",
			"line":	94,
			"primary_score":	999999,
			"second_score":	307
		}, {
			"file":	"lib/printf-parse.c",
			"line":	95,
			"primary_score":	999999,
			"second_score":	306
		}, {
			"file":	"lib/printf-parse.c",
			"line":	99,
			"primary_score":	999999,
			"second_score":	305
		}, {
			"file":	"lib/printf-parse.c",
			"line":	100,
			"primary_score":	999999,
			"second_score":	304
		}, {
			"file":	"lib/printf-parse.c",
			"line":	101,
			"primary_score":	999999,
			"second_score":	303
		}, {
			"file":	"lib/printf-parse.c",
			"line":	135,
			"primary_score":	999999,
			"second_score":	302
		}, {
			"file":	"lib/printf-parse.c",
			"line":	137,
			"primary_score":	999999,
			"second_score":	176
		}, {
			"file":	"lib/printf-parse.c",
			"line":	138,
			"primary_score":	999999,
			"second_score":	175
		}, {
			"file":	"lib/printf-parse.c",
			"line":	140,
			"primary_score":	999999,
			"second_score":	299
		}, {
			"file":	"lib/printf-parse.c",
			"line":	141,
			"primary_score":	999999,
			"second_score":	298
		}, {
			"file":	"lib/printf-parse.c",
			"line":	144,
			"primary_score":	999999,
			"second_score":	297
		}, {
			"file":	"lib/printf-parse.c",
			"line":	145,
			"primary_score":	999999,
			"second_score":	296
		}, {
			"file":	"lib/printf-parse.c",
			"line":	146,
			"primary_score":	999999,
			"second_score":	295
		}, {
			"file":	"lib/printf-parse.c",
			"line":	147,
			"primary_score":	999999,
			"second_score":	294
		}, {
			"file":	"lib/printf-parse.c",
			"line":	148,
			"primary_score":	999999,
			"second_score":	293
		}, {
			"file":	"lib/printf-parse.c",
			"line":	149,
			"primary_score":	999999,
			"second_score":	292
		}, {
			"file":	"lib/printf-parse.c",
			"line":	150,
			"primary_score":	999999,
			"second_score":	291
		}, {
			"file":	"lib/printf-parse.c",
			"line":	151,
			"primary_score":	999999,
			"second_score":	290
		}, {
			"file":	"lib/printf-parse.c",
			"line":	152,
			"primary_score":	999999,
			"second_score":	289
		}, {
			"file":	"lib/printf-parse.c",
			"line":	155,
			"primary_score":	999999,
			"second_score":	288
		}, {
			"file":	"lib/printf-parse.c",
			"line":	179,
			"primary_score":	999999,
			"second_score":	287
		}, {
			"file":	"lib/printf-parse.c",
			"line":	181,
			"primary_score":	999999,
			"second_score":	286
		}, {
			"file":	"lib/printf-parse.c",
			"line":	186,
			"primary_score":	999999,
			"second_score":	285
		}, {
			"file":	"lib/printf-parse.c",
			"line":	191,
			"primary_score":	999999,
			"second_score":	284
		}, {
			"file":	"lib/printf-parse.c",
			"line":	196,
			"primary_score":	999999,
			"second_score":	283
		}, {
			"file":	"lib/printf-parse.c",
			"line":	201,
			"primary_score":	999999,
			"second_score":	282
		}, {
			"file":	"lib/printf-parse.c",
			"line":	206,
			"primary_score":	999999,
			"second_score":	281
		}, {
			"file":	"lib/printf-parse.c",
			"line":	212,
			"primary_score":	999999,
			"second_score":	280
		}, {
			"file":	"lib/printf-parse.c",
			"line":	216,
			"primary_score":	999999,
			"second_score":	279
		}, {
			"file":	"lib/printf-parse.c",
			"line":	256,
			"primary_score":	999999,
			"second_score":	278
		}, {
			"file":	"lib/printf-parse.c",
			"line":	270,
			"primary_score":	999999,
			"second_score":	277
		}, {
			"file":	"lib/printf-parse.c",
			"line":	328,
			"primary_score":	999999,
			"second_score":	276
		}, {
			"file":	"lib/printf-parse.c",
			"line":	329,
			"primary_score":	999999,
			"second_score":	275
		}, {
			"file":	"lib/printf-parse.c",
			"line":	332,
			"primary_score":	999999,
			"second_score":	274
		}, {
			"file":	"lib/printf-parse.c",
			"line":	333,
			"primary_score":	999999,
			"second_score":	273
		}, {
			"file":	"lib/printf-parse.c",
			"line":	335,
			"primary_score":	999999,
			"second_score":	272
		}, {
			"file":	"lib/printf-parse.c",
			"line":	337,
			"primary_score":	999999,
			"second_score":	271
		}, {
			"file":	"lib/printf-parse.c",
			"line":	342,
			"primary_score":	999999,
			"second_score":	270
		}, {
			"file":	"lib/printf-parse.c",
			"line":	347,
			"primary_score":	999999,
			"second_score":	269
		}, {
			"file":	"lib/printf-parse.c",
			"line":	352,
			"primary_score":	999999,
			"second_score":	268
		}, {
			"file":	"lib/printf-parse.c",
			"line":	366,
			"primary_score":	999999,
			"second_score":	267
		}, {
			"file":	"lib/printf-parse.c",
			"line":	383,
			"primary_score":	999999,
			"second_score":	266
		}, {
			"file":	"lib/printf-parse.c",
			"line":	436,
			"primary_score":	999999,
			"second_score":	265
		}, {
			"file":	"lib/printf-parse.c",
			"line":	440,
			"primary_score":	999999,
			"second_score":	264
		}, {
			"file":	"lib/printf-parse.c",
			"line":	441,
			"primary_score":	999999,
			"second_score":	263
		}, {
			"file":	"lib/printf-parse.c",
			"line":	510,
			"primary_score":	999999,
			"second_score":	262
		}, {
			"file":	"lib/printf-parse.c",
			"line":	511,
			"primary_score":	999999,
			"second_score":	261
		}, {
			"file":	"lib/printf-parse.c",
			"line":	559,
			"primary_score":	999999,
			"second_score":	260
		}, {
			"file":	"lib/printf-parse.c",
			"line":	561,
			"primary_score":	999999,
			"second_score":	259
		}, {
			"file":	"lib/printf-parse.c",
			"line":	562,
			"primary_score":	999999,
			"second_score":	258
		}, {
			"file":	"lib/printf-parse.c",
			"line":	564,
			"primary_score":	999999,
			"second_score":	257
		}, {
			"file":	"lib/printf-parse.c",
			"line":	565,
			"primary_score":	999999,
			"second_score":	256
		}, {
			"file":	"lib/printf-parse.c",
			"line":	569,
			"primary_score":	999999,
			"second_score":	255
		}, {
			"file":	"lib/printf-parse.c",
			"line":	571,
			"primary_score":	999999,
			"second_score":	236
		}, {
			"file":	"lib/printf-parse.c",
			"line":	572,
			"primary_score":	999999,
			"second_score":	235
		}, {
			"file":	"lib/printf-parse.c",
			"line":	575,
			"primary_score":	999999,
			"second_score":	234
		}, {
			"file":	"lib/printf-parse.c",
			"line":	576,
			"primary_score":	999999,
			"second_score":	233
		}, {
			"file":	"lib/printf-parse.c",
			"line":	578,
			"primary_score":	999999,
			"second_score":	232
		}, {
			"file":	"lib/printf-parse.c",
			"line":	579,
			"primary_score":	999999,
			"second_score":	231
		}, {
			"file":	"lib/printf-parse.c",
			"line":	581,
			"primary_score":	999999,
			"second_score":	230
		}, {
			"file":	"lib/printf-parse.c",
			"line":	582,
			"primary_score":	999999,
			"second_score":	229
		}, {
			"file":	"lib/printf-parse.c",
			"line":	583,
			"primary_score":	999999,
			"second_score":	228
		}, {
			"file":	"lib/printf-parse.c",
			"line":	586,
			"primary_score":	999999,
			"second_score":	227
		}, {
			"file":	"lib/printf-parse.c",
			"line":	587,
			"primary_score":	999999,
			"second_score":	226
		}, {
			"file":	"lib/printf-parse.c",
			"line":	590,
			"primary_score":	999999,
			"second_score":	225
		}, {
			"file":	"lib/printf-parse.c",
			"line":	601,
			"primary_score":	999999,
			"second_score":	174
		}, {
			"file":	"lib/printf-parse.c",
			"line":	603,
			"primary_score":	999999,
			"second_score":	173
		}, {
			"file":	"lib/printf-parse.c",
			"line":	604,
			"primary_score":	999999,
			"second_score":	172
		}, {
			"file":	"lib/printf-parse.c",
			"line":	605,
			"primary_score":	999999,
			"second_score":	171
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1483,
			"primary_score":	999999,
			"second_score":	318
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1484,
			"primary_score":	999999,
			"second_score":	317
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1486,
			"primary_score":	999999,
			"second_score":	316
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1495,
			"primary_score":	999999,
			"second_score":	170
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1502,
			"primary_score":	999999,
			"second_score":	163
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1503,
			"primary_score":	999999,
			"second_score":	162
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1504,
			"primary_score":	999999,
			"second_score":	161
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1505,
			"primary_score":	999999,
			"second_score":	160
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1506,
			"primary_score":	999999,
			"second_score":	159
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1507,
			"primary_score":	999999,
			"second_score":	158
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1508,
			"primary_score":	999999,
			"second_score":	157
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1510,
			"primary_score":	999999,
			"second_score":	156
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1511,
			"primary_score":	999999,
			"second_score":	155
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1512,
			"primary_score":	999999,
			"second_score":	154
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1516,
			"primary_score":	999999,
			"second_score":	153
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1519,
			"primary_score":	999999,
			"second_score":	145
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1521,
			"primary_score":	999999,
			"second_score":	144
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1522,
			"primary_score":	999999,
			"second_score":	143
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1536,
			"primary_score":	999999,
			"second_score":	142
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1538,
			"primary_score":	999999,
			"second_score":	141
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1539,
			"primary_score":	999999,
			"second_score":	140
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1546,
			"primary_score":	999999,
			"second_score":	139
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1576,
			"primary_score":	999999,
			"second_score":	138
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1578,
			"primary_score":	999999,
			"second_score":	83
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1580,
			"primary_score":	999999,
			"second_score":	82
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1581,
			"primary_score":	999999,
			"second_score":	81
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1583,
			"primary_score":	999999,
			"second_score":	78
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1587,
			"primary_score":	999999,
			"second_score":	76
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1589,
			"primary_score":	999999,
			"second_score":	75
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1590,
			"primary_score":	999999,
			"second_score":	74
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1599,
			"primary_score":	999999,
			"second_score":	73
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1600,
			"primary_score":	999999,
			"second_score":	72
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1603,
			"primary_score":	999999,
			"second_score":	135
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1616,
			"primary_score":	999999,
			"second_score":	134
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1619,
			"primary_score":	999999,
			"second_score":	133
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	3117,
			"primary_score":	999999,
			"second_score":	132
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4304,
			"primary_score":	999999,
			"second_score":	131
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4305,
			"primary_score":	999999,
			"second_score":	130
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4326,
			"primary_score":	999999,
			"second_score":	129
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4327,
			"primary_score":	999999,
			"second_score":	128
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4328,
			"primary_score":	999999,
			"second_score":	127
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4701,
			"primary_score":	999999,
			"second_score":	126
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4702,
			"primary_score":	999999,
			"second_score":	125
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4708,
			"primary_score":	999999,
			"second_score":	124
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4711,
			"primary_score":	999999,
			"second_score":	123
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4713,
			"primary_score":	999999,
			"second_score":	122
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4715,
			"primary_score":	999999,
			"second_score":	121
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4717,
			"primary_score":	999999,
			"second_score":	120
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4719,
			"primary_score":	999999,
			"second_score":	119
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4721,
			"primary_score":	999999,
			"second_score":	118
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4723,
			"primary_score":	999999,
			"second_score":	117
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4742,
			"primary_score":	999999,
			"second_score":	116
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4744,
			"primary_score":	999999,
			"second_score":	115
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4764,
			"primary_score":	999999,
			"second_score":	114
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4800,
			"primary_score":	999999,
			"second_score":	113
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4830,
			"primary_score":	999999,
			"second_score":	112
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4837,
			"primary_score":	999999,
			"second_score":	111
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4838,
			"primary_score":	999999,
			"second_score":	110
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4844,
			"primary_score":	999999,
			"second_score":	109
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4860,
			"primary_score":	999999,
			"second_score":	108
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4862,
			"primary_score":	999999,
			"second_score":	105
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4865,
			"primary_score":	999999,
			"second_score":	104
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4868,
			"primary_score":	999999,
			"second_score":	103
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4870,
			"primary_score":	999999,
			"second_score":	102
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4873,
			"primary_score":	999999,
			"second_score":	101
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4874,
			"primary_score":	999999,
			"second_score":	100
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4877,
			"primary_score":	999999,
			"second_score":	99
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4879,
			"primary_score":	999999,
			"second_score":	98
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4921,
			"primary_score":	999999,
			"second_score":	97
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5013,
			"primary_score":	999999,
			"second_score":	96
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5014,
			"primary_score":	999999,
			"second_score":	95
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5016,
			"primary_score":	999999,
			"second_score":	92
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5040,
			"primary_score":	999999,
			"second_score":	91
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5055,
			"primary_score":	999999,
			"second_score":	90
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5065,
			"primary_score":	999999,
			"second_score":	89
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5078,
			"primary_score":	999999,
			"second_score":	88
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5084,
			"primary_score":	999999,
			"second_score":	87
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5101,
			"primary_score":	999999,
			"second_score":	86
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5424,
			"primary_score":	999999,
			"second_score":	85
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5425,
			"primary_score":	999999,
			"second_score":	84
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5432,
			"primary_score":	999999,
			"second_score":	71
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5433,
			"primary_score":	999999,
			"second_score":	67
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5435,
			"primary_score":	999999,
			"second_score":	66
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5445,
			"primary_score":	999999,
			"second_score":	65
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5447,
			"primary_score":	999999,
			"second_score":	64
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5448,
			"primary_score":	999999,
			"second_score":	60
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5453,
			"primary_score":	999999,
			"second_score":	59
		}, {
			"file":	"lib/xsize.h",
			"line":	60,
			"primary_score":	999999,
			"second_score":	70
		}, {
			"file":	"lib/xsize.h",
			"line":	61,
			"primary_score":	999999,
			"second_score":	69
		}, {
			"file":	"lib/xsize.h",
			"line":	81,
			"primary_score":	999999,
			"second_score":	152
		}, {
			"file":	"trees.c",
			"line":	345,
			"primary_score":	999997,
			"second_score":	11696
		}, {
			"file":	"trees.c",
			"line":	346,
			"primary_score":	999997,
			"second_score":	11695
		}, {
			"file":	"trees.c",
			"line":	347,
			"primary_score":	999997,
			"second_score":	11694
		}, {
			"file":	"trees.c",
			"line":	348,
			"primary_score":	999997,
			"second_score":	11693
		}, {
			"file":	"trees.c",
			"line":	349,
			"primary_score":	999997,
			"second_score":	11692
		}, {
			"file":	"trees.c",
			"line":	351,
			"primary_score":	999997,
			"second_score":	11691
		}, {
			"file":	"trees.c",
			"line":	352,
			"primary_score":	999997,
			"second_score":	11690
		}, {
			"file":	"trees.c",
			"line":	353,
			"primary_score":	999997,
			"second_score":	11689
		}, {
			"file":	"trees.c",
			"line":	355,
			"primary_score":	999997,
			"second_score":	11688
		}, {
			"file":	"trees.c",
			"line":	358,
			"primary_score":	999997,
			"second_score":	11687
		}, {
			"file":	"trees.c",
			"line":	359,
			"primary_score":	999997,
			"second_score":	11686
		}, {
			"file":	"trees.c",
			"line":	360,
			"primary_score":	999997,
			"second_score":	11407
		}, {
			"file":	"trees.c",
			"line":	361,
			"primary_score":	999997,
			"second_score":	11406
		}, {
			"file":	"trees.c",
			"line":	362,
			"primary_score":	999997,
			"second_score":	11374
		}, {
			"file":	"trees.c",
			"line":	365,
			"primary_score":	999997,
			"second_score":	11373
		}, {
			"file":	"trees.c",
			"line":	370,
			"primary_score":	999997,
			"second_score":	11372
		}, {
			"file":	"trees.c",
			"line":	373,
			"primary_score":	999997,
			"second_score":	11371
		}, {
			"file":	"trees.c",
			"line":	374,
			"primary_score":	999997,
			"second_score":	11370
		}, {
			"file":	"trees.c",
			"line":	375,
			"primary_score":	999997,
			"second_score":	11147
		}, {
			"file":	"trees.c",
			"line":	376,
			"primary_score":	999997,
			"second_score":	11146
		}, {
			"file":	"trees.c",
			"line":	377,
			"primary_score":	999997,
			"second_score":	11082
		}, {
			"file":	"trees.c",
			"line":	380,
			"primary_score":	999997,
			"second_score":	11081
		}, {
			"file":	"trees.c",
			"line":	381,
			"primary_score":	999997,
			"second_score":	11080
		}, {
			"file":	"trees.c",
			"line":	382,
			"primary_score":	999997,
			"second_score":	11079
		}, {
			"file":	"trees.c",
			"line":	383,
			"primary_score":	999997,
			"second_score":	10862
		}, {
			"file":	"trees.c",
			"line":	384,
			"primary_score":	999997,
			"second_score":	10861
		}, {
			"file":	"trees.c",
			"line":	385,
			"primary_score":	999997,
			"second_score":	10797
		}, {
			"file":	"trees.c",
			"line":	388,
			"primary_score":	999997,
			"second_score":	10796
		}, {
			"file":	"trees.c",
			"line":	391,
			"primary_score":	999997,
			"second_score":	10795
		}, {
			"file":	"trees.c",
			"line":	392,
			"primary_score":	999997,
			"second_score":	10794
		}, {
			"file":	"trees.c",
			"line":	393,
			"primary_score":	999997,
			"second_score":	10793
		}, {
			"file":	"trees.c",
			"line":	394,
			"primary_score":	999997,
			"second_score":	10792
		}, {
			"file":	"trees.c",
			"line":	395,
			"primary_score":	999997,
			"second_score":	10791
		}, {
			"file":	"trees.c",
			"line":	396,
			"primary_score":	999997,
			"second_score":	10790
		}, {
			"file":	"trees.c",
			"line":	401,
			"primary_score":	999997,
			"second_score":	10789
		}, {
			"file":	"trees.c",
			"line":	404,
			"primary_score":	999997,
			"second_score":	3965
		}, {
			"file":	"trees.c",
			"line":	405,
			"primary_score":	999997,
			"second_score":	3529
		}, {
			"file":	"trees.c",
			"line":	406,
			"primary_score":	999997,
			"second_score":	3528
		}, {
			"file":	"trees.c",
			"line":	410,
			"primary_score":	999997,
			"second_score":	3514
		}, {
			"file":	"trees.c",
			"line":	418,
			"primary_score":	999997,
			"second_score":	102
		}, {
			"file":	"trees.c",
			"line":	421,
			"primary_score":	999997,
			"second_score":	101
		}, {
			"file":	"trees.c",
			"line":	422,
			"primary_score":	999997,
			"second_score":	100
		}, {
			"file":	"trees.c",
			"line":	423,
			"primary_score":	999997,
			"second_score":	99
		}, {
			"file":	"trees.c",
			"line":	425,
			"primary_score":	999997,
			"second_score":	98
		}, {
			"file":	"trees.c",
			"line":	426,
			"primary_score":	999997,
			"second_score":	97
		}, {
			"file":	"trees.c",
			"line":	427,
			"primary_score":	999997,
			"second_score":	96
		}, {
			"file":	"trees.c",
			"line":	428,
			"primary_score":	999997,
			"second_score":	95
		}, {
			"file":	"trees.c",
			"line":	464,
			"primary_score":	999997,
			"second_score":	376
		}, {
			"file":	"trees.c",
			"line":	465,
			"primary_score":	999997,
			"second_score":	375
		}, {
			"file":	"trees.c",
			"line":	466,
			"primary_score":	999997,
			"second_score":	374
		}, {
			"file":	"trees.c",
			"line":	468,
			"primary_score":	999998,
			"second_score":	430
		}, {
			"file":	"trees.c",
			"line":	471,
			"primary_score":	999997,
			"second_score":	469
		}, {
			"file":	"trees.c",
			"line":	474,
			"primary_score":	999997,
			"second_score":	397
		}, {
			"file":	"trees.c",
			"line":	477,
			"primary_score":	999997,
			"second_score":	395
		}, {
			"file":	"trees.c",
			"line":	479,
			"primary_score":	999997,
			"second_score":	373
		}, {
			"file":	"trees.c",
			"line":	495,
			"primary_score":	999997,
			"second_score":	370
		}, {
			"file":	"trees.c",
			"line":	496,
			"primary_score":	999997,
			"second_score":	369
		}, {
			"file":	"trees.c",
			"line":	497,
			"primary_score":	999997,
			"second_score":	368
		}, {
			"file":	"trees.c",
			"line":	498,
			"primary_score":	999997,
			"second_score":	367
		}, {
			"file":	"trees.c",
			"line":	499,
			"primary_score":	999997,
			"second_score":	366
		}, {
			"file":	"trees.c",
			"line":	500,
			"primary_score":	999997,
			"second_score":	365
		}, {
			"file":	"trees.c",
			"line":	501,
			"primary_score":	999997,
			"second_score":	364
		}, {
			"file":	"trees.c",
			"line":	502,
			"primary_score":	999997,
			"second_score":	363
		}, {
			"file":	"trees.c",
			"line":	503,
			"primary_score":	999997,
			"second_score":	362
		}, {
			"file":	"trees.c",
			"line":	504,
			"primary_score":	999997,
			"second_score":	361
		}, {
			"file":	"trees.c",
			"line":	505,
			"primary_score":	999997,
			"second_score":	360
		}, {
			"file":	"trees.c",
			"line":	506,
			"primary_score":	999997,
			"second_score":	359
		}, {
			"file":	"trees.c",
			"line":	508,
			"primary_score":	999997,
			"second_score":	358
		}, {
			"file":	"trees.c",
			"line":	513,
			"primary_score":	999997,
			"second_score":	357
		}, {
			"file":	"trees.c",
			"line":	515,
			"primary_score":	999997,
			"second_score":	356
		}, {
			"file":	"trees.c",
			"line":	516,
			"primary_score":	999997,
			"second_score":	307
		}, {
			"file":	"trees.c",
			"line":	517,
			"primary_score":	999997,
			"second_score":	306
		}, {
			"file":	"trees.c",
			"line":	518,
			"primary_score":	999997,
			"second_score":	305
		}, {
			"file":	"trees.c",
			"line":	519,
			"primary_score":	999997,
			"second_score":	304
		}, {
			"file":	"trees.c",
			"line":	522,
			"primary_score":	999998,
			"second_score":	344
		}, {
			"file":	"trees.c",
			"line":	524,
			"primary_score":	999997,
			"second_score":	302
		}, {
			"file":	"trees.c",
			"line":	525,
			"primary_score":	999997,
			"second_score":	301
		}, {
			"file":	"trees.c",
			"line":	526,
			"primary_score":	999997,
			"second_score":	300
		}, {
			"file":	"trees.c",
			"line":	527,
			"primary_score":	999997,
			"second_score":	298
		}, {
			"file":	"trees.c",
			"line":	528,
			"primary_score":	999997,
			"second_score":	297
		}, {
			"file":	"trees.c",
			"line":	529,
			"primary_score":	999997,
			"second_score":	1688
		}, {
			"file":	"trees.c",
			"line":	531,
			"primary_score":	999997,
			"second_score":	295
		}, {
			"file":	"trees.c",
			"line":	581,
			"primary_score":	999997,
			"second_score":	292
		}, {
			"file":	"trees.c",
			"line":	582,
			"primary_score":	999997,
			"second_score":	291
		}, {
			"file":	"trees.c",
			"line":	583,
			"primary_score":	999997,
			"second_score":	290
		}, {
			"file":	"trees.c",
			"line":	584,
			"primary_score":	999997,
			"second_score":	289
		}, {
			"file":	"trees.c",
			"line":	589,
			"primary_score":	999997,
			"second_score":	288
		}, {
			"file":	"trees.c",
			"line":	590,
			"primary_score":	999997,
			"second_score":	273
		}, {
			"file":	"trees.c",
			"line":	596,
			"primary_score":	999997,
			"second_score":	272
		}, {
			"file":	"trees.c",
			"line":	597,
			"primary_score":	999997,
			"second_score":	271
		}, {
			"file":	"trees.c",
			"line":	599,
			"primary_score":	999997,
			"second_score":	270
		}, {
			"file":	"trees.c",
			"line":	600,
			"primary_score":	999997,
			"second_score":	191
		}, {
			"file":	"trees.c",
			"line":	601,
			"primary_score":	999997,
			"second_score":	203
		}, {
			"file":	"trees.c",
			"line":	603,
			"primary_score":	999997,
			"second_score":	189
		}, {
			"file":	"trees.c",
			"line":	606,
			"primary_score":	999997,
			"second_score":	181
		}, {
			"file":	"trees.c",
			"line":	621,
			"primary_score":	999997,
			"second_score":	527
		}, {
			"file":	"trees.c",
			"line":	622,
			"primary_score":	999997,
			"second_score":	526
		}, {
			"file":	"trees.c",
			"line":	623,
			"primary_score":	999997,
			"second_score":	525
		}, {
			"file":	"trees.c",
			"line":	624,
			"primary_score":	999997,
			"second_score":	524
		}, {
			"file":	"trees.c",
			"line":	625,
			"primary_score":	999997,
			"second_score":	523
		}, {
			"file":	"trees.c",
			"line":	626,
			"primary_score":	999997,
			"second_score":	522
		}, {
			"file":	"trees.c",
			"line":	632,
			"primary_score":	999997,
			"second_score":	521
		}, {
			"file":	"trees.c",
			"line":	634,
			"primary_score":	999997,
			"second_score":	520
		}, {
			"file":	"trees.c",
			"line":	635,
			"primary_score":	999997,
			"second_score":	480
		}, {
			"file":	"trees.c",
			"line":	636,
			"primary_score":	999997,
			"second_score":	479
		}, {
			"file":	"trees.c",
			"line":	637,
			"primary_score":	999997,
			"second_score":	478
		}, {
			"file":	"trees.c",
			"line":	639,
			"primary_score":	999997,
			"second_score":	484
		}, {
			"file":	"trees.c",
			"line":	648,
			"primary_score":	999997,
			"second_score":	477
		}, {
			"file":	"trees.c",
			"line":	649,
			"primary_score":	999997,
			"second_score":	1767
		}, {
			"file":	"trees.c",
			"line":	650,
			"primary_score":	999997,
			"second_score":	1766
		}, {
			"file":	"trees.c",
			"line":	651,
			"primary_score":	999997,
			"second_score":	1765
		}, {
			"file":	"trees.c",
			"line":	652,
			"primary_score":	999997,
			"second_score":	1764
		}, {
			"file":	"trees.c",
			"line":	655,
			"primary_score":	999997,
			"second_score":	476
		}, {
			"file":	"trees.c",
			"line":	660,
			"primary_score":	999997,
			"second_score":	475
		}, {
			"file":	"trees.c",
			"line":	665,
			"primary_score":	999997,
			"second_score":	457
		}, {
			"file":	"trees.c",
			"line":	666,
			"primary_score":	999997,
			"second_score":	393
		}, {
			"file":	"trees.c",
			"line":	667,
			"primary_score":	999997,
			"second_score":	384
		}, {
			"file":	"trees.c",
			"line":	669,
			"primary_score":	999997,
			"second_score":	383
		}, {
			"file":	"trees.c",
			"line":	670,
			"primary_score":	999997,
			"second_score":	382
		}, {
			"file":	"trees.c",
			"line":	673,
			"primary_score":	999997,
			"second_score":	381
		}, {
			"file":	"trees.c",
			"line":	674,
			"primary_score":	999997,
			"second_score":	380
		}, {
			"file":	"trees.c",
			"line":	675,
			"primary_score":	999997,
			"second_score":	379
		}, {
			"file":	"trees.c",
			"line":	683,
			"primary_score":	999997,
			"second_score":	378
		}, {
			"file":	"trees.c",
			"line":	684,
			"primary_score":	999997,
			"second_score":	377
		}, {
			"file":	"trees.c",
			"line":	688,
			"primary_score":	999997,
			"second_score":	372
		}, {
			"file":	"trees.c",
			"line":	693,
			"primary_score":	999997,
			"second_score":	371
		}, {
			"file":	"trees.c",
			"line":	696,
			"primary_score":	999997,
			"second_score":	293
		}, {
			"file":	"trees.c",
			"line":	709,
			"primary_score":	999997,
			"second_score":	552
		}, {
			"file":	"trees.c",
			"line":	710,
			"primary_score":	999997,
			"second_score":	551
		}, {
			"file":	"trees.c",
			"line":	711,
			"primary_score":	999997,
			"second_score":	550
		}, {
			"file":	"trees.c",
			"line":	712,
			"primary_score":	999997,
			"second_score":	549
		}, {
			"file":	"trees.c",
			"line":	713,
			"primary_score":	999997,
			"second_score":	548
		}, {
			"file":	"trees.c",
			"line":	714,
			"primary_score":	999997,
			"second_score":	547
		}, {
			"file":	"trees.c",
			"line":	715,
			"primary_score":	999997,
			"second_score":	546
		}, {
			"file":	"trees.c",
			"line":	717,
			"primary_score":	999997,
			"second_score":	1631
		}, {
			"file":	"trees.c",
			"line":	718,
			"primary_score":	999997,
			"second_score":	544
		}, {
			"file":	"trees.c",
			"line":	720,
			"primary_score":	999997,
			"second_score":	543
		}, {
			"file":	"trees.c",
			"line":	721,
			"primary_score":	999997,
			"second_score":	538
		}, {
			"file":	"trees.c",
			"line":	722,
			"primary_score":	999997,
			"second_score":	536
		}, {
			"file":	"trees.c",
			"line":	723,
			"primary_score":	999997,
			"second_score":	539
		}, {
			"file":	"trees.c",
			"line":	724,
			"primary_score":	999997,
			"second_score":	535
		}, {
			"file":	"trees.c",
			"line":	725,
			"primary_score":	999997,
			"second_score":	534
		}, {
			"file":	"trees.c",
			"line":	726,
			"primary_score":	999997,
			"second_score":	571
		}, {
			"file":	"trees.c",
			"line":	729,
			"primary_score":	999997,
			"second_score":	570
		}, {
			"file":	"trees.c",
			"line":	730,
			"primary_score":	999999,
			"second_score":	1586
		}, {
			"file":	"trees.c",
			"line":	732,
			"primary_score":	999997,
			"second_score":	569
		}, {
			"file":	"trees.c",
			"line":	734,
			"primary_score":	999997,
			"second_score":	533
		}, {
			"file":	"trees.c",
			"line":	735,
			"primary_score":	999997,
			"second_score":	531
		}, {
			"file":	"trees.c",
			"line":	736,
			"primary_score":	999997,
			"second_score":	848
		}, {
			"file":	"trees.c",
			"line":	737,
			"primary_score":	999997,
			"second_score":	530
		}, {
			"file":	"trees.c",
			"line":	740,
			"primary_score":	999997,
			"second_score":	529
		}, {
			"file":	"trees.c",
			"line":	801,
			"primary_score":	999997,
			"second_score":	1641
		}, {
			"file":	"trees.c",
			"line":	804,
			"primary_score":	999997,
			"second_score":	1640
		}, {
			"file":	"trees.c",
			"line":	805,
			"primary_score":	999997,
			"second_score":	553
		}, {
			"file":	"trees.c",
			"line":	808,
			"primary_score":	999997,
			"second_score":	528
		}, {
			"file":	"trees.c",
			"line":	817,
			"primary_score":	999997,
			"second_score":	180
		}, {
			"file":	"trees.c",
			"line":	818,
			"primary_score":	999997,
			"second_score":	178
		}, {
			"file":	"trees.c",
			"line":	821,
			"primary_score":	999997,
			"second_score":	176
		}, {
			"file":	"trees.c",
			"line":	822,
			"primary_score":	999997,
			"second_score":	175
		}, {
			"file":	"trees.c",
			"line":	824,
			"primary_score":	999997,
			"second_score":	174
		}, {
			"file":	"trees.c",
			"line":	864,
			"primary_score":	999997,
			"second_score":	3372
		}, {
			"file":	"trees.c",
			"line":	865,
			"primary_score":	999997,
			"second_score":	3371
		}, {
			"file":	"trees.c",
			"line":	867,
			"primary_score":	999997,
			"second_score":	3370
		}, {
			"file":	"trees.c",
			"line":	870,
			"primary_score":	999997,
			"second_score":	3369
		}, {
			"file":	"trees.c",
			"line":	873,
			"primary_score":	999997,
			"second_score":	3368
		}, {
			"file":	"trees.c",
			"line":	874,
			"primary_score":	999997,
			"second_score":	1844
		}, {
			"file":	"trees.c",
			"line":	876,
			"primary_score":	999997,
			"second_score":	1843
		}, {
			"file":	"trees.c",
			"line":	877,
			"primary_score":	999997,
			"second_score":	1643
		}, {
			"file":	"trees.c",
			"line":	885,
			"primary_score":	999997,
			"second_score":	1642
		}, {
			"file":	"trees.c",
			"line":	888,
			"primary_score":	999997,
			"second_score":	173
		}, {
			"file":	"trees.c",
			"line":	889,
			"primary_score":	999997,
			"second_score":	172
		}, {
			"file":	"trees.c",
			"line":	890,
			"primary_score":	999997,
			"second_score":	171
		}, {
			"file":	"trees.c",
			"line":	894,
			"primary_score":	999997,
			"second_score":	170
		}, {
			"file":	"trees.c",
			"line":	896,
			"primary_score":	999998,
			"second_score":	168
		}, {
			"file":	"trees.c",
			"line":	905,
			"primary_score":	999997,
			"second_score":	167
		}, {
			"file":	"trees.c",
			"line":	918,
			"primary_score":	999997,
			"second_score":	166
		}, {
			"file":	"trees.c",
			"line":	936,
			"primary_score":	999997,
			"second_score":	165
		}, {
			"file":	"trees.c",
			"line":	938,
			"primary_score":	999998,
			"second_score":	164
		}, {
			"file":	"trees.c",
			"line":	939,
			"primary_score":	999998,
			"second_score":	160
		}, {
			"file":	"trees.c",
			"line":	940,
			"primary_score":	999998,
			"second_score":	105
		}, {
			"file":	"trees.c",
			"line":	947,
			"primary_score":	999997,
			"second_score":	104
		}, {
			"file":	"trees.c",
			"line":	948,
			"primary_score":	999997,
			"second_score":	103
		}, {
			"file":	"trees.c",
			"line":	950,
			"primary_score":	999997,
			"second_score":	93
		}, {
			"file":	"trees.c",
			"line":	951,
			"primary_score":	999997,
			"second_score":	92
		}, {
			"file":	"trees.c",
			"line":	952,
			"primary_score":	999997,
			"second_score":	91
		}, {
			"file":	"trees.c",
			"line":	953,
			"primary_score":	999997,
			"second_score":	82
		}, {
			"file":	"trees.c",
			"line":	956,
			"primary_score":	999997,
			"second_score":	81
		}, {
			"file":	"trees.c",
			"line":	967,
			"primary_score":	999997,
			"second_score":	3380
		}, {
			"file":	"trees.c",
			"line":	968,
			"primary_score":	999997,
			"second_score":	3379
		}, {
			"file":	"trees.c",
			"line":	970,
			"primary_score":	999997,
			"second_score":	3378
		}, {
			"file":	"trees.c",
			"line":	984,
			"primary_score":	999997,
			"second_score":	3377
		}, {
			"file":	"trees.c",
			"line":	987,
			"primary_score":	999997,
			"second_score":	3376
		}, {
			"file":	"trees.c",
			"line":	992,
			"primary_score":	999997,
			"second_score":	3375
		}, {
			"file":	"trees.c",
			"line":	1006,
			"primary_score":	999997,
			"second_score":	3374
		}, {
			"file":	"trees.c",
			"line":	1020,
			"primary_score":	999997,
			"second_score":	159
		}, {
			"file":	"trees.c",
			"line":	1021,
			"primary_score":	999997,
			"second_score":	158
		}, {
			"file":	"trees.c",
			"line":	1022,
			"primary_score":	999997,
			"second_score":	157
		}, {
			"file":	"trees.c",
			"line":	1023,
			"primary_score":	999997,
			"second_score":	156
		}, {
			"file":	"trees.c",
			"line":	1024,
			"primary_score":	999997,
			"second_score":	155
		}, {
			"file":	"trees.c",
			"line":	1025,
			"primary_score":	999997,
			"second_score":	154
		}, {
			"file":	"trees.c",
			"line":	1026,
			"primary_score":	999997,
			"second_score":	153
		}, {
			"file":	"trees.c",
			"line":	1027,
			"primary_score":	999997,
			"second_score":	152
		}, {
			"file":	"trees.c",
			"line":	1029,
			"primary_score":	999997,
			"second_score":	151
		}, {
			"file":	"trees.c",
			"line":	1030,
			"primary_score":	999997,
			"second_score":	148
		}, {
			"file":	"trees.c",
			"line":	1031,
			"primary_score":	999997,
			"second_score":	123
		}, {
			"file":	"trees.c",
			"line":	1032,
			"primary_score":	999997,
			"second_score":	122
		}, {
			"file":	"trees.c",
			"line":	1033,
			"primary_score":	999997,
			"second_score":	121
		}, {
			"file":	"trees.c",
			"line":	1034,
			"primary_score":	999997,
			"second_score":	117
		}, {
			"file":	"trees.c",
			"line":	1056,
			"primary_score":	999997,
			"second_score":	116
		}, {
			"file":	"trees.c",
			"line":	1059,
			"primary_score":	999997,
			"second_score":	115
		}, {
			"file":	"unzip.c",
			"line":	115,
			"primary_score":	999997,
			"second_score":	8606
		}, {
			"file":	"unzip.c",
			"line":	116,
			"primary_score":	999997,
			"second_score":	8605
		}, {
			"file":	"unzip.c",
			"line":	117,
			"primary_score":	999997,
			"second_score":	8604
		}, {
			"file":	"unzip.c",
			"line":	118,
			"primary_score":	999997,
			"second_score":	8603
		}, {
			"file":	"unzip.c",
			"line":	119,
			"primary_score":	999997,
			"second_score":	8602
		}, {
			"file":	"unzip.c",
			"line":	121,
			"primary_score":	999997,
			"second_score":	8601
		}, {
			"file":	"unzip.c",
			"line":	122,
			"primary_score":	999997,
			"second_score":	8600
		}, {
			"file":	"unzip.c",
			"line":	124,
			"primary_score":	999997,
			"second_score":	8599
		}, {
			"file":	"unzip.c",
			"line":	126,
			"primary_score":	999997,
			"second_score":	8592
		}, {
			"file":	"unzip.c",
			"line":	132,
			"primary_score":	999997,
			"second_score":	8591
		}, {
			"file":	"unzip.c",
			"line":	134,
			"primary_score":	999997,
			"second_score":	8590
		}, {
			"file":	"unzip.c",
			"line":	136,
			"primary_score":	999997,
			"second_score":	621
		}, {
			"file":	"unzip.c",
			"line":	138,
			"primary_score":	999997,
			"second_score":	620
		}, {
			"file":	"unzip.c",
			"line":	161,
			"primary_score":	999998,
			"second_score":	619
		}, {
			"file":	"unzip.c",
			"line":	165,
			"primary_score":	999998,
			"second_score":	618
		}, {
			"file":	"unzip.c",
			"line":	166,
			"primary_score":	999998,
			"second_score":	610
		}, {
			"file":	"unzip.c",
			"line":	168,
			"primary_score":	999998,
			"second_score":	609
		}, {
			"file":	"unzip.c",
			"line":	169,
			"primary_score":	999998,
			"second_score":	608
		}, {
			"file":	"unzip.c",
			"line":	185,
			"primary_score":	999998,
			"second_score":	607
		}, {
			"file":	"unzip.c",
			"line":	190,
			"primary_score":	999998,
			"second_score":	599
		}, {
			"file":	"unzip.c",
			"line":	197,
			"primary_score":	999998,
			"second_score":	598
		}, {
			"file":	"unzip.c",
			"line":	210,
			"primary_score":	999998,
			"second_score":	597
		}, {
			"file":	"unzip.c",
			"line":	211,
			"primary_score":	999998,
			"second_score":	596
		}, {
			"file":	"util.c",
			"line":	84,
			"primary_score":	999996,
			"second_score":	3482
		}, {
			"file":	"util.c",
			"line":	86,
			"primary_score":	999996,
			"second_score":	3481
		}, {
			"file":	"util.c",
			"line":	88,
			"primary_score":	999996,
			"second_score":	3480
		}, {
			"file":	"util.c",
			"line":	89,
			"primary_score":	999996,
			"second_score":	11706
		}, {
			"file":	"util.c",
			"line":	91,
			"primary_score":	999997,
			"second_score":	3479
		}, {
			"file":	"util.c",
			"line":	92,
			"primary_score":	999997,
			"second_score":	3478
		}, {
			"file":	"util.c",
			"line":	93,
			"primary_score":	999997,
			"second_score":	3474
		}, {
			"file":	"util.c",
			"line":	96,
			"primary_score":	999996,
			"second_score":	3473
		}, {
			"file":	"util.c",
			"line":	97,
			"primary_score":	999996,
			"second_score":	3472
		}, {
			"file":	"util.c",
			"line":	105,
			"primary_score":	999996,
			"second_score":	11758
		}, {
			"file":	"util.c",
			"line":	106,
			"primary_score":	999996,
			"second_score":	11757
		}, {
			"file":	"util.c",
			"line":	107,
			"primary_score":	999996,
			"second_score":	11756
		}, {
			"file":	"util.c",
			"line":	116,
			"primary_score":	999997,
			"second_score":	582
		}, {
			"file":	"util.c",
			"line":	119,
			"primary_score":	999997,
			"second_score":	581
		}, {
			"file":	"util.c",
			"line":	120,
			"primary_score":	999997,
			"second_score":	580
		}, {
			"file":	"util.c",
			"line":	121,
			"primary_score":	999997,
			"second_score":	579
		}, {
			"file":	"util.c",
			"line":	122,
			"primary_score":	999997,
			"second_score":	576
		}, {
			"file":	"util.c",
			"line":	123,
			"primary_score":	999997,
			"second_score":	8678
		}, {
			"file":	"util.c",
			"line":	127,
			"primary_score":	999997,
			"second_score":	8677
		}, {
			"file":	"util.c",
			"line":	130,
			"primary_score":	999997,
			"second_score":	574
		}, {
			"file":	"util.c",
			"line":	131,
			"primary_score":	1000000,
			"second_score":	573
		}, {
			"file":	"util.c",
			"line":	132,
			"primary_score":	1000000,
			"second_score":	572
		}, {
			"file":	"util.c",
			"line":	133,
			"primary_score":	1000000,
			"second_score":	569
		}, {
			"file":	"util.c",
			"line":	134,
			"primary_score":	1000000,
			"second_score":	568
		}, {
			"file":	"util.c",
			"line":	136,
			"primary_score":	999997,
			"second_score":	8670
		}, {
			"file":	"util.c",
			"line":	137,
			"primary_score":	999997,
			"second_score":	8669
		}, {
			"file":	"util.c",
			"line":	138,
			"primary_score":	999997,
			"second_score":	8668
		}, {
			"file":	"util.c",
			"line":	150,
			"primary_score":	999996,
			"second_score":	3457
		}, {
			"file":	"util.c",
			"line":	153,
			"primary_score":	999996,
			"second_score":	3456
		}, {
			"file":	"util.c",
			"line":	164,
			"primary_score":	999997,
			"second_score":	627
		}, {
			"file":	"util.c",
			"line":	167,
			"primary_score":	999997,
			"second_score":	626
		}, {
			"file":	"util.c",
			"line":	176,
			"primary_score":	999997,
			"second_score":	54
		}, {
			"file":	"util.c",
			"line":	178,
			"primary_score":	999997,
			"second_score":	53
		}, {
			"file":	"util.c",
			"line":	179,
			"primary_score":	999997,
			"second_score":	48
		}, {
			"file":	"util.c",
			"line":	180,
			"primary_score":	999997,
			"second_score":	47
		}, {
			"file":	"util.c",
			"line":	189,
			"primary_score":	1000000,
			"second_score":	570
		}, {
			"file":	"util.c",
			"line":	190,
			"primary_score":	999998,
			"second_score":	642
		}, {
			"file":	"util.c",
			"line":	192,
			"primary_score":	999998,
			"second_score":	631
		}, {
			"file":	"util.c",
			"line":	193,
			"primary_score":	999998,
			"second_score":	630
		}, {
			"file":	"util.c",
			"line":	195,
			"primary_score":	999998,
			"second_score":	625
		}, {
			"file":	"util.c",
			"line":	196,
			"primary_score":	999998,
			"second_score":	624
		}, {
			"file":	"util.c",
			"line":	208,
			"primary_score":	999997,
			"second_score":	629
		}, {
			"file":	"util.c",
			"line":	210,
			"primary_score":	999997,
			"second_score":	628
		}, {
			"file":	"util.c",
			"line":	225,
			"primary_score":	999999,
			"second_score":	8708
		}, {
			"file":	"util.c",
			"line":	226,
			"primary_score":	999999,
			"second_score":	8707
		}, {
			"file":	"util.c",
			"line":	228,
			"primary_score":	999999,
			"second_score":	8706
		}, {
			"file":	"util.c",
			"line":	240,
			"primary_score":	999996,
			"second_score":	11844
		}, {
			"file":	"util.c",
			"line":	242,
			"primary_score":	999996,
			"second_score":	11843
		}, {
			"file":	"util.c",
			"line":	252,
			"primary_score":	999996,
			"second_score":	11842
		}, {
			"file":	"util.c",
			"line":	253,
			"primary_score":	999996,
			"second_score":	11841
		}, {
			"file":	"util.c",
			"line":	262,
			"primary_score":	999999,
			"second_score":	46
		}, {
			"file":	"util.c",
			"line":	278,
			"primary_score":	999999,
			"second_score":	45
		}, {
			"file":	"util.c",
			"line":	365,
			"primary_score":	999996,
			"second_score":	11836
		}, {
			"file":	"util.c",
			"line":	366,
			"primary_score":	999996,
			"second_score":	11835
		}, {
			"file":	"util.c",
			"line":	367,
			"primary_score":	999996,
			"second_score":	11834
		}, {
			"file":	"util.c",
			"line":	368,
			"primary_score":	999996,
			"second_score":	11833
		}, {
			"file":	"util.c",
			"line":	369,
			"primary_score":	999996,
			"second_score":	11832
		}, {
			"file":	"util.c",
			"line":	371,
			"primary_score":	999996,
			"second_score":	11831
		}, {
			"file":	"util.c",
			"line":	372,
			"primary_score":	999996,
			"second_score":	11830
		}, {
			"file":	"util.c",
			"line":	439,
			"primary_score":	1000000,
			"second_score":	567
		}, {
			"file":	"util.c",
			"line":	440,
			"primary_score":	1000000,
			"second_score":	566
		}, {
			"file":	"util.c",
			"line":	441,
			"primary_score":	1000000,
			"second_score":	327
		}, {
			"file":	"util.c",
			"line":	445,
			"primary_score":	1000000,
			"second_score":	326
		}, {
			"file":	"util.c",
			"line":	447,
			"primary_score":	1000000,
			"second_score":	52
		}, {
			"file":	"zip.c",
			"line":	45,
			"primary_score":	999997,
			"second_score":	11748
		}, {
			"file":	"zip.c",
			"line":	46,
			"primary_score":	999997,
			"second_score":	11747
		}, {
			"file":	"zip.c",
			"line":	47,
			"primary_score":	999997,
			"second_score":	11746
		}, {
			"file":	"zip.c",
			"line":	48,
			"primary_score":	999997,
			"second_score":	11745
		}, {
			"file":	"zip.c",
			"line":	50,
			"primary_score":	999997,
			"second_score":	11744
		}, {
			"file":	"zip.c",
			"line":	51,
			"primary_score":	999997,
			"second_score":	11743
		}, {
			"file":	"zip.c",
			"line":	52,
			"primary_score":	999997,
			"second_score":	11742
		}, {
			"file":	"zip.c",
			"line":	56,
			"primary_score":	999997,
			"second_score":	11741
		}, {
			"file":	"zip.c",
			"line":	57,
			"primary_score":	999997,
			"second_score":	11740
		}, {
			"file":	"zip.c",
			"line":	58,
			"primary_score":	999997,
			"second_score":	11736
		}, {
			"file":	"zip.c",
			"line":	59,
			"primary_score":	999997,
			"second_score":	11732
		}, {
			"file":	"zip.c",
			"line":	61,
			"primary_score":	999997,
			"second_score":	11728
		}, {
			"file":	"zip.c",
			"line":	64,
			"primary_score":	999997,
			"second_score":	11727
		}, {
			"file":	"zip.c",
			"line":	65,
			"primary_score":	999997,
			"second_score":	11723
		}, {
			"file":	"zip.c",
			"line":	68,
			"primary_score":	999997,
			"second_score":	11722
		}, {
			"file":	"zip.c",
			"line":	71,
			"primary_score":	999997,
			"second_score":	11710
		}, {
			"file":	"zip.c",
			"line":	73,
			"primary_score":	999997,
			"second_score":	11703
		}, {
			"file":	"zip.c",
			"line":	74,
			"primary_score":	999997,
			"second_score":	11697
		}, {
			"file":	"zip.c",
			"line":	75,
			"primary_score":	999997,
			"second_score":	3504
		}, {
			"file":	"zip.c",
			"line":	77,
			"primary_score":	999997,
			"second_score":	3449
		}, {
			"file":	"zip.c",
			"line":	78,
			"primary_score":	999997,
			"second_score":	3445
		}, {
			"file":	"zip.c",
			"line":	80,
			"primary_score":	999997,
			"second_score":	3441
		}, {
			"file":	"zip.c",
			"line":	86,
			"primary_score":	999997,
			"second_score":	3440
		}, {
			"file":	"zip.c",
			"line":	88,
			"primary_score":	999997,
			"second_score":	3439
		}, {
			"file":	"zip.c",
			"line":	101,
			"primary_score":	999997,
			"second_score":	80
		}, {
			"file":	"zip.c",
			"line":	102,
			"primary_score":	999997,
			"second_score":	68
		}, {
			"file":	"zip.c",
			"line":	103,
			"primary_score":	999997,
			"second_score":	56
		}, {
			"file":	"zip.c",
			"line":	105,
			"primary_score":	999997,
			"second_score":	55
		}, {
			"file":	"zip.c",
			"line":	106,
			"primary_score":	999997,
			"second_score":	46
		}, {
			"file":	"zip.c",
			"line":	119,
			"primary_score":	999997,
			"second_score":	3460
		}, {
			"file":	"zip.c",
			"line":	121,
			"primary_score":	999997,
			"second_score":	3459
		}, {
			"file":	"zip.c",
			"line":	123,
			"primary_score":	999997,
			"second_score":	3458
		}, {
			"file":	"zip.c",
			"line":	124,
			"primary_score":	999997,
			"second_score":	3455
		}, {
			"file":	"zip.c",
			"line":	125,
			"primary_score":	999997,
			"second_score":	3484
		}, {
			"file":	"zip.c",
			"line":	130,
			"primary_score":	999997,
			"second_score":	3483
		}, {
			"file":	"zip.c",
			"line":	131,
			"primary_score":	999997,
			"second_score":	3471
		}, {
			"file":	"zip.c",
			"line":	132,
			"primary_score":	999997,
			"second_score":	3470
		}],
	"mutation_info":	[{
			"file":	"gzip.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"gzip.c",
			"lines":	[{
					"line":	600,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	601,
							"begin_column":	1,
							"end_line":	601,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L601\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L601\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L601\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L601\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.51810422495373]
								}, {
									"case":	2,
									"scores":	[-4.51810422495373]
								}, {
									"case":	3,
									"scores":	[-4.51810422495373]
								}, {
									"case":	4,
									"scores":	[-4.51810422495373]
								}, {
									"case":	5,
									"scores":	[-4.51810422495373]
								}, {
									"case":	6,
									"scores":	[-4.51810422495373]
								}, {
									"case":	7,
									"scores":	[-4.51810422495373]
								}, {
									"case":	8,
									"scores":	[-4.51810422495373]
								}, {
									"case":	9,
									"scores":	[-4.51810422495373]
								}, {
									"case":	10,
									"scores":	[-4.51810422495373]
								}, {
									"case":	11,
									"scores":	[-4.51810422495373]
								}, {
									"case":	12,
									"scores":	[-4.51810422495373]
								}, {
									"case":	13,
									"scores":	[-4.51810422495373]
								}, {
									"case":	14,
									"scores":	[-4.51810422495373]
								}, {
									"case":	15,
									"scores":	[-4.51810422495373]
								}, {
									"case":	16,
									"scores":	[-4.51810422495373]
								}, {
									"case":	17,
									"scores":	[-4.51810422495373]
								}, {
									"case":	18,
									"scores":	[-4.51810422495373]
								}, {
									"case":	19,
									"scores":	[-4.51810422495373]
								}, {
									"case":	20,
									"scores":	[-4.51810422495373]
								}, {
									"case":	21,
									"scores":	[-4.51810422495373]
								}, {
									"case":	22,
									"scores":	[-4.51810422495373]
								}, {
									"case":	23,
									"scores":	[-4.51810422495373]
								}, {
									"case":	24,
									"scores":	[-4.51810422495373]
								}, {
									"case":	25,
									"scores":	[-4.51810422495373]
								}, {
									"case":	26,
									"scores":	[-4.51810422495373]
								}, {
									"case":	27,
									"scores":	[-4.51810422495373]
								}, {
									"case":	28,
									"scores":	[-4.51810422495373]
								}, {
									"case":	29,
									"scores":	[-4.51810422495373]
								}, {
									"case":	30,
									"scores":	[-4.51810422495373]
								}, {
									"case":	31,
									"scores":	[-4.51810422495373]
								}, {
									"case":	32,
									"scores":	[-4.51810422495373]
								}, {
									"case":	33,
									"scores":	[-4.51810422495373]
								}, {
									"case":	34,
									"scores":	[-4.51810422495373]
								}, {
									"case":	35,
									"scores":	[-4.51810422495373]
								}, {
									"case":	36,
									"scores":	[-4.51810422495373]
								}, {
									"case":	37,
									"scores":	[-4.51810422495373]
								}, {
									"case":	38,
									"scores":	[-4.51810422495373]
								}, {
									"case":	39,
									"scores":	[-4.51810422495373]
								}, {
									"case":	40,
									"scores":	[-4.51810422495373]
								}, {
									"case":	41,
									"scores":	[-4.51810422495373]
								}, {
									"case":	42,
									"scores":	[-4.51810422495373]
								}, {
									"case":	43,
									"scores":	[-4.51810422495373]
								}, {
									"case":	44,
									"scores":	[-4.51810422495373]
								}, {
									"case":	45,
									"scores":	[-4.51810422495373]
								}, {
									"case":	46,
									"scores":	[-4.51810422495373]
								}, {
									"case":	47,
									"scores":	[-4.51810422495373]
								}, {
									"case":	48,
									"scores":	[-4.51810422495373]
								}, {
									"case":	49,
									"scores":	[-4.51810422495373]
								}, {
									"case":	50,
									"scores":	[-4.51810422495373]
								}, {
									"case":	51,
									"scores":	[-4.51810422495373]
								}, {
									"case":	52,
									"scores":	[-4.51810422495373]
								}, {
									"case":	53,
									"scores":	[-4.51810422495373]
								}, {
									"case":	54,
									"scores":	[-4.51810422495373]
								}, {
									"case":	55,
									"scores":	[-4.51810422495373]
								}, {
									"case":	56,
									"scores":	[-4.51810422495373]
								}, {
									"case":	57,
									"scores":	[-4.51810422495373]
								}, {
									"case":	58,
									"scores":	[-4.51810422495373]
								}, {
									"case":	59,
									"scores":	[-4.51810422495373]
								}, {
									"case":	60,
									"scores":	[-4.51810422495373]
								}, {
									"case":	61,
									"scores":	[-4.51810422495373]
								}, {
									"case":	62,
									"scores":	[-4.51810422495373]
								}, {
									"case":	63,
									"scores":	[-4.51810422495373]
								}, {
									"case":	64,
									"scores":	[-4.51810422495373]
								}, {
									"case":	65,
									"scores":	[-4.51810422495373]
								}, {
									"case":	66,
									"scores":	[-4.51810422495373]
								}, {
									"case":	67,
									"scores":	[-4.51810422495373]
								}, {
									"case":	68,
									"scores":	[-4.51810422495373]
								}, {
									"case":	69,
									"scores":	[-4.51810422495373]
								}, {
									"case":	70,
									"scores":	[-4.51810422495373]
								}, {
									"case":	71,
									"scores":	[-4.51810422495373]
								}, {
									"case":	72,
									"scores":	[-4.51810422495373]
								}, {
									"case":	73,
									"scores":	[-4.51810422495373]
								}, {
									"case":	74,
									"scores":	[-4.51810422495373]
								}, {
									"case":	75,
									"scores":	[-4.51810422495373]
								}, {
									"case":	76,
									"scores":	[-4.51810422495373]
								}, {
									"case":	77,
									"scores":	[-4.51810422495373]
								}, {
									"case":	78,
									"scores":	[-4.51810422495373]
								}, {
									"case":	79,
									"scores":	[-4.51810422495373]
								}, {
									"case":	80,
									"scores":	[-4.51810422495373]
								}, {
									"case":	81,
									"scores":	[-4.51810422495373]
								}, {
									"case":	82,
									"scores":	[-4.51810422495373]
								}, {
									"case":	83,
									"scores":	[-4.51810422495373]
								}, {
									"case":	84,
									"scores":	[-4.51810422495373]
								}, {
									"case":	85,
									"scores":	[-4.51810422495373]
								}, {
									"case":	86,
									"scores":	[-4.51810422495373]
								}, {
									"case":	87,
									"scores":	[-4.51810422495373]
								}, {
									"case":	88,
									"scores":	[-4.51810422495373]
								}, {
									"case":	89,
									"scores":	[-4.51810422495373]
								}, {
									"case":	90,
									"scores":	[-4.51810422495373]
								}, {
									"case":	91,
									"scores":	[-4.51810422495373]
								}, {
									"case":	92,
									"scores":	[-4.51810422495373]
								}, {
									"case":	93,
									"scores":	[-4.51810422495373]
								}, {
									"case":	94,
									"scores":	[-4.51810422495373]
								}, {
									"case":	95,
									"scores":	[-4.51810422495373]
								}, {
									"case":	96,
									"scores":	[-4.51810422495373]
								}, {
									"case":	97,
									"scores":	[-4.51810422495373]
								}, {
									"case":	98,
									"scores":	[-4.51810422495373]
								}, {
									"case":	99,
									"scores":	[-4.51810422495373]
								}, {
									"case":	100,
									"scores":	[-4.51810422495373]
								}, {
									"case":	101,
									"scores":	[-4.51810422495373]
								}, {
									"case":	102,
									"scores":	[-4.51810422495373]
								}, {
									"case":	103,
									"scores":	[-4.51810422495373]
								}, {
									"case":	104,
									"scores":	[-4.51810422495373]
								}, {
									"case":	105,
									"scores":	[-4.51810422495373]
								}, {
									"case":	106,
									"scores":	[-4.51810422495373]
								}, {
									"case":	107,
									"scores":	[-4.51810422495373]
								}, {
									"case":	108,
									"scores":	[-4.51810422495373]
								}, {
									"case":	109,
									"scores":	[-4.51810422495373]
								}, {
									"case":	110,
									"scores":	[-4.51810422495373]
								}, {
									"case":	111,
									"scores":	[-4.51810422495373]
								}, {
									"case":	112,
									"scores":	[-4.51810422495373]
								}, {
									"case":	113,
									"scores":	[-4.51810422495373]
								}, {
									"case":	114,
									"scores":	[-4.51810422495373]
								}, {
									"case":	115,
									"scores":	[-4.51810422495373]
								}, {
									"case":	116,
									"scores":	[-4.51810422495373]
								}, {
									"case":	117,
									"scores":	[-4.51810422495373]
								}, {
									"case":	118,
									"scores":	[-4.51810422495373]
								}, {
									"case":	119,
									"scores":	[-4.51810422495373]
								}, {
									"case":	120,
									"scores":	[-4.51810422495373]
								}, {
									"case":	121,
									"scores":	[-4.51810422495373]
								}, {
									"case":	122,
									"scores":	[-4.51810422495373]
								}, {
									"case":	123,
									"scores":	[-4.51810422495373]
								}, {
									"case":	124,
									"scores":	[-4.51810422495373]
								}, {
									"case":	125,
									"scores":	[-4.51810422495373]
								}, {
									"case":	126,
									"scores":	[-4.51810422495373]
								}, {
									"case":	127,
									"scores":	[-4.51810422495373]
								}, {
									"case":	128,
									"scores":	[-4.51810422495373]
								}, {
									"case":	129,
									"scores":	[-4.51810422495373]
								}, {
									"case":	130,
									"scores":	[-4.51810422495373]
								}, {
									"case":	131,
									"scores":	[-4.51810422495373]
								}, {
									"case":	132,
									"scores":	[-4.51810422495373]
								}, {
									"case":	133,
									"scores":	[-4.51810422495373]
								}, {
									"case":	134,
									"scores":	[-4.51810422495373]
								}, {
									"case":	135,
									"scores":	[-4.51810422495373]
								}, {
									"case":	136,
									"scores":	[-4.51810422495373]
								}, {
									"case":	137,
									"scores":	[-4.51810422495373]
								}, {
									"case":	138,
									"scores":	[-4.51810422495373]
								}, {
									"case":	139,
									"scores":	[-4.51810422495373]
								}, {
									"case":	140,
									"scores":	[-4.51810422495373]
								}, {
									"case":	141,
									"scores":	[-4.51810422495373]
								}, {
									"case":	142,
									"scores":	[-4.51810422495373]
								}, {
									"case":	143,
									"scores":	[-4.51810422495373]
								}, {
									"case":	144,
									"scores":	[-4.51810422495373]
								}, {
									"case":	145,
									"scores":	[-4.51810422495373]
								}, {
									"case":	146,
									"scores":	[-4.51810422495373]
								}, {
									"case":	147,
									"scores":	[-4.51810422495373]
								}, {
									"case":	148,
									"scores":	[-4.51810422495373]
								}, {
									"case":	149,
									"scores":	[-4.51810422495373]
								}, {
									"case":	150,
									"scores":	[-4.51810422495373]
								}, {
									"case":	151,
									"scores":	[-4.51810422495373]
								}, {
									"case":	152,
									"scores":	[-4.51810422495373]
								}, {
									"case":	153,
									"scores":	[-4.51810422495373]
								}, {
									"case":	154,
									"scores":	[-4.51810422495373]
								}, {
									"case":	155,
									"scores":	[-4.51810422495373]
								}, {
									"case":	156,
									"scores":	[-4.51810422495373]
								}, {
									"case":	157,
									"scores":	[-4.51810422495373]
								}, {
									"case":	158,
									"scores":	[-4.51810422495373]
								}, {
									"case":	159,
									"scores":	[-4.51810422495373]
								}, {
									"case":	160,
									"scores":	[-4.51810422495373]
								}, {
									"case":	161,
									"scores":	[-4.51810422495373]
								}, {
									"case":	162,
									"scores":	[-4.51810422495373]
								}, {
									"case":	163,
									"scores":	[-4.51810422495373]
								}, {
									"case":	164,
									"scores":	[-4.51810422495373]
								}, {
									"case":	165,
									"scores":	[-4.51810422495373]
								}, {
									"case":	166,
									"scores":	[-4.51810422495373]
								}, {
									"case":	167,
									"scores":	[-4.51810422495373]
								}, {
									"case":	168,
									"scores":	[-4.51810422495373]
								}, {
									"case":	169,
									"scores":	[-4.51810422495373]
								}, {
									"case":	170,
									"scores":	[-4.51810422495373]
								}, {
									"case":	171,
									"scores":	[-4.51810422495373]
								}, {
									"case":	172,
									"scores":	[-4.51810422495373]
								}, {
									"case":	173,
									"scores":	[-4.51810422495373]
								}, {
									"case":	174,
									"scores":	[-4.51810422495373]
								}, {
									"case":	175,
									"scores":	[-4.51810422495373]
								}, {
									"case":	176,
									"scores":	[-4.51810422495373]
								}, {
									"case":	177,
									"scores":	[-4.51810422495373]
								}, {
									"case":	178,
									"scores":	[-4.51810422495373]
								}, {
									"case":	179,
									"scores":	[-4.51810422495373]
								}, {
									"case":	180,
									"scores":	[-4.51810422495373]
								}, {
									"case":	181,
									"scores":	[-4.51810422495373]
								}, {
									"case":	182,
									"scores":	[-4.51810422495373]
								}, {
									"case":	183,
									"scores":	[-4.51810422495373]
								}, {
									"case":	184,
									"scores":	[-4.51810422495373]
								}, {
									"case":	185,
									"scores":	[-4.51810422495373]
								}, {
									"case":	186,
									"scores":	[-4.51810422495373]
								}, {
									"case":	187,
									"scores":	[-4.51810422495373]
								}, {
									"case":	188,
									"scores":	[-4.51810422495373]
								}, {
									"case":	189,
									"scores":	[-4.51810422495373]
								}, {
									"case":	190,
									"scores":	[-4.51810422495373]
								}, {
									"case":	191,
									"scores":	[-4.51810422495373]
								}, {
									"case":	192,
									"scores":	[-4.51810422495373]
								}, {
									"case":	193,
									"scores":	[-4.51810422495373]
								}, {
									"case":	194,
									"scores":	[-4.51810422495373]
								}, {
									"case":	195,
									"scores":	[-4.51810422495373]
								}, {
									"case":	196,
									"scores":	[-4.51810422495373]
								}, {
									"case":	197,
									"scores":	[-4.51810422495373]
								}, {
									"case":	198,
									"scores":	[-4.51810422495373]
								}, {
									"case":	199,
									"scores":	[-4.51810422495373]
								}, {
									"case":	200,
									"scores":	[-5.27728730325373, -5.27728730325373, -6.67667081525373, -6.67667081525373, -6.67607353705373, -6.67607353705373]
								}, {
									"case":	201,
									"scores":	[-5.37719550325373, -5.37719550325373, -6.77657901525373, -6.77657901525373, -6.77598173705373, -6.77598173705373]
								}, {
									"case":	202,
									"scores":	[-7.63997730325373, -7.63997730325373, -9.03936081525373, -9.03936081525373, -9.03876353705373, -9.03876353705373]
								}, {
									"case":	203,
									"scores":	[-7.63997730325373, -7.63997730325373, -9.03936081525373, -9.03936081525373, -9.03876353705373, -9.03876353705373]
								}]
						}, {
							"switch":	1,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	601,
							"begin_column":	3,
							"end_line":	601,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L601\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.33233725095373, -6.33233725095373, -5.71346330395373, -5.71346330395373, -5.71233582795373, -5.71233582795373]
								}]
						}]
				}, {
					"line":	842,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [395, 396], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	843,
							"begin_column":	0,
							"end_line":	843,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L843\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if (__is_neg(\"\", \"L843\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.49790151763621]
								}, {
									"case":	2,
									"scores":	[-4.49790151763621]
								}, {
									"case":	3,
									"scores":	[-4.49790151763621]
								}, {
									"case":	4,
									"scores":	[-4.49790151763621]
								}, {
									"case":	5,
									"scores":	[-4.49790151763621]
								}, {
									"case":	6,
									"scores":	[-4.49790151763621]
								}, {
									"case":	7,
									"scores":	[-4.49790151763621]
								}, {
									"case":	8,
									"scores":	[-4.49790151763621]
								}, {
									"case":	9,
									"scores":	[-4.49790151763621]
								}, {
									"case":	10,
									"scores":	[-4.49790151763621]
								}, {
									"case":	11,
									"scores":	[-4.49790151763621]
								}, {
									"case":	12,
									"scores":	[-4.49790151763621]
								}, {
									"case":	13,
									"scores":	[-4.49790151763621]
								}, {
									"case":	14,
									"scores":	[-4.49790151763621]
								}, {
									"case":	15,
									"scores":	[-4.49790151763621]
								}, {
									"case":	16,
									"scores":	[-4.49790151763621]
								}, {
									"case":	17,
									"scores":	[-4.49790151763621]
								}, {
									"case":	18,
									"scores":	[-4.49790151763621]
								}, {
									"case":	19,
									"scores":	[-4.49790151763621]
								}, {
									"case":	20,
									"scores":	[-4.49790151763621]
								}, {
									"case":	21,
									"scores":	[-4.49790151763621]
								}, {
									"case":	22,
									"scores":	[-4.49790151763621]
								}, {
									"case":	23,
									"scores":	[-4.49790151763621]
								}, {
									"case":	24,
									"scores":	[-4.49790151763621]
								}, {
									"case":	25,
									"scores":	[-4.49790151763621]
								}, {
									"case":	26,
									"scores":	[-4.49790151763621]
								}, {
									"case":	27,
									"scores":	[-4.49790151763621]
								}, {
									"case":	28,
									"scores":	[-4.49790151763621]
								}, {
									"case":	29,
									"scores":	[-4.49790151763621]
								}, {
									"case":	30,
									"scores":	[-4.49790151763621]
								}, {
									"case":	31,
									"scores":	[-4.49790151763621]
								}, {
									"case":	32,
									"scores":	[-4.49790151763621]
								}, {
									"case":	33,
									"scores":	[-4.49790151763621]
								}, {
									"case":	34,
									"scores":	[-4.49790151763621]
								}, {
									"case":	35,
									"scores":	[-4.49790151763621]
								}, {
									"case":	36,
									"scores":	[-4.49790151763621]
								}, {
									"case":	37,
									"scores":	[-4.49790151763621]
								}, {
									"case":	38,
									"scores":	[-4.49790151763621]
								}, {
									"case":	39,
									"scores":	[-4.49790151763621]
								}, {
									"case":	40,
									"scores":	[-4.49790151763621]
								}, {
									"case":	41,
									"scores":	[-4.49790151763621]
								}, {
									"case":	42,
									"scores":	[-4.49790151763621]
								}, {
									"case":	43,
									"scores":	[-4.49790151763621]
								}, {
									"case":	44,
									"scores":	[-4.49790151763621]
								}, {
									"case":	45,
									"scores":	[-4.49790151763621]
								}, {
									"case":	46,
									"scores":	[-4.49790151763621]
								}, {
									"case":	47,
									"scores":	[-4.49790151763621]
								}, {
									"case":	48,
									"scores":	[-4.49790151763621]
								}, {
									"case":	49,
									"scores":	[-4.49790151763621]
								}, {
									"case":	50,
									"scores":	[-4.49790151763621]
								}, {
									"case":	51,
									"scores":	[-4.49790151763621]
								}, {
									"case":	52,
									"scores":	[-4.49790151763621]
								}, {
									"case":	53,
									"scores":	[-4.49790151763621]
								}, {
									"case":	54,
									"scores":	[-4.49790151763621]
								}, {
									"case":	55,
									"scores":	[-4.49790151763621]
								}, {
									"case":	56,
									"scores":	[-4.49790151763621]
								}, {
									"case":	57,
									"scores":	[-4.49790151763621]
								}, {
									"case":	58,
									"scores":	[-4.49790151763621]
								}, {
									"case":	59,
									"scores":	[-4.49790151763621]
								}, {
									"case":	60,
									"scores":	[-4.49790151763621]
								}, {
									"case":	61,
									"scores":	[-4.49790151763621]
								}, {
									"case":	62,
									"scores":	[-4.49790151763621]
								}, {
									"case":	63,
									"scores":	[-4.49790151763621]
								}, {
									"case":	64,
									"scores":	[-4.49790151763621]
								}, {
									"case":	65,
									"scores":	[-4.49790151763621]
								}, {
									"case":	66,
									"scores":	[-4.49790151763621]
								}, {
									"case":	67,
									"scores":	[-4.49790151763621]
								}, {
									"case":	68,
									"scores":	[-4.49790151763621]
								}, {
									"case":	69,
									"scores":	[-4.49790151763621]
								}, {
									"case":	70,
									"scores":	[-4.49790151763621]
								}, {
									"case":	71,
									"scores":	[-4.49790151763621]
								}, {
									"case":	72,
									"scores":	[-4.49790151763621]
								}, {
									"case":	73,
									"scores":	[-4.49790151763621]
								}, {
									"case":	74,
									"scores":	[-4.49790151763621]
								}, {
									"case":	75,
									"scores":	[-4.49790151763621]
								}, {
									"case":	76,
									"scores":	[-4.49790151763621]
								}, {
									"case":	77,
									"scores":	[-4.49790151763621]
								}, {
									"case":	78,
									"scores":	[-4.49790151763621]
								}, {
									"case":	79,
									"scores":	[-4.49790151763621]
								}, {
									"case":	80,
									"scores":	[-4.49790151763621]
								}, {
									"case":	81,
									"scores":	[-4.49790151763621]
								}, {
									"case":	82,
									"scores":	[-4.49790151763621]
								}, {
									"case":	83,
									"scores":	[-4.49790151763621]
								}, {
									"case":	84,
									"scores":	[-4.49790151763621]
								}, {
									"case":	85,
									"scores":	[-4.49790151763621]
								}, {
									"case":	86,
									"scores":	[-4.49790151763621]
								}, {
									"case":	87,
									"scores":	[-4.49790151763621]
								}, {
									"case":	88,
									"scores":	[-4.49790151763621]
								}, {
									"case":	89,
									"scores":	[-4.49790151763621]
								}, {
									"case":	90,
									"scores":	[-4.49790151763621]
								}, {
									"case":	91,
									"scores":	[-4.49790151763621]
								}, {
									"case":	92,
									"scores":	[-4.49790151763621]
								}, {
									"case":	93,
									"scores":	[-4.49790151763621]
								}, {
									"case":	94,
									"scores":	[-4.49790151763621]
								}, {
									"case":	95,
									"scores":	[-4.49790151763621]
								}, {
									"case":	96,
									"scores":	[-4.49790151763621]
								}, {
									"case":	97,
									"scores":	[-4.49790151763621]
								}, {
									"case":	98,
									"scores":	[-4.49790151763621]
								}, {
									"case":	99,
									"scores":	[-4.49790151763621]
								}, {
									"case":	100,
									"scores":	[-4.49790151763621]
								}, {
									"case":	101,
									"scores":	[-4.49790151763621]
								}, {
									"case":	102,
									"scores":	[-4.49790151763621]
								}, {
									"case":	103,
									"scores":	[-4.49790151763621]
								}, {
									"case":	104,
									"scores":	[-4.49790151763621]
								}, {
									"case":	105,
									"scores":	[-4.49790151763621]
								}, {
									"case":	106,
									"scores":	[-4.49790151763621]
								}, {
									"case":	107,
									"scores":	[-4.49790151763621]
								}, {
									"case":	108,
									"scores":	[-4.49790151763621]
								}, {
									"case":	109,
									"scores":	[-4.49790151763621]
								}, {
									"case":	110,
									"scores":	[-4.49790151763621]
								}, {
									"case":	111,
									"scores":	[-4.49790151763621]
								}, {
									"case":	112,
									"scores":	[-4.49790151763621]
								}, {
									"case":	113,
									"scores":	[-4.49790151763621]
								}, {
									"case":	114,
									"scores":	[-4.49790151763621]
								}, {
									"case":	115,
									"scores":	[-4.49790151763621]
								}, {
									"case":	116,
									"scores":	[-4.49790151763621]
								}, {
									"case":	117,
									"scores":	[-4.49790151763621]
								}, {
									"case":	118,
									"scores":	[-4.49790151763621]
								}, {
									"case":	119,
									"scores":	[-4.49790151763621]
								}, {
									"case":	120,
									"scores":	[-4.49790151763621]
								}, {
									"case":	121,
									"scores":	[-4.49790151763621]
								}, {
									"case":	122,
									"scores":	[-4.49790151763621]
								}, {
									"case":	123,
									"scores":	[-4.49790151763621]
								}, {
									"case":	124,
									"scores":	[-4.49790151763621]
								}, {
									"case":	125,
									"scores":	[-4.49790151763621]
								}, {
									"case":	126,
									"scores":	[-4.49790151763621]
								}, {
									"case":	127,
									"scores":	[-4.49790151763621]
								}, {
									"case":	128,
									"scores":	[-4.49790151763621]
								}, {
									"case":	129,
									"scores":	[-4.49790151763621]
								}, {
									"case":	130,
									"scores":	[-4.49790151763621]
								}, {
									"case":	131,
									"scores":	[-4.49790151763621]
								}, {
									"case":	132,
									"scores":	[-4.49790151763621]
								}, {
									"case":	133,
									"scores":	[-4.49790151763621]
								}, {
									"case":	134,
									"scores":	[-4.49790151763621]
								}, {
									"case":	135,
									"scores":	[-4.49790151763621]
								}, {
									"case":	136,
									"scores":	[-4.49790151763621]
								}, {
									"case":	137,
									"scores":	[-4.49790151763621]
								}, {
									"case":	138,
									"scores":	[-4.49790151763621]
								}, {
									"case":	139,
									"scores":	[-4.49790151763621]
								}, {
									"case":	140,
									"scores":	[-4.49790151763621]
								}, {
									"case":	141,
									"scores":	[-4.49790151763621]
								}, {
									"case":	142,
									"scores":	[-4.49790151763621]
								}, {
									"case":	143,
									"scores":	[-4.49790151763621]
								}, {
									"case":	144,
									"scores":	[-4.49790151763621]
								}, {
									"case":	145,
									"scores":	[-4.49790151763621]
								}, {
									"case":	146,
									"scores":	[-4.49790151763621]
								}, {
									"case":	147,
									"scores":	[-4.49790151763621]
								}, {
									"case":	148,
									"scores":	[-4.49790151763621]
								}, {
									"case":	149,
									"scores":	[-4.49790151763621]
								}, {
									"case":	150,
									"scores":	[-4.49790151763621]
								}, {
									"case":	151,
									"scores":	[-4.49790151763621]
								}, {
									"case":	152,
									"scores":	[-4.49790151763621]
								}, {
									"case":	153,
									"scores":	[-4.49790151763621]
								}, {
									"case":	154,
									"scores":	[-4.49790151763621]
								}, {
									"case":	155,
									"scores":	[-4.49790151763621]
								}, {
									"case":	156,
									"scores":	[-4.49790151763621]
								}, {
									"case":	157,
									"scores":	[-4.49790151763621]
								}, {
									"case":	158,
									"scores":	[-4.49790151763621]
								}, {
									"case":	159,
									"scores":	[-4.49790151763621]
								}, {
									"case":	160,
									"scores":	[-4.49790151763621]
								}, {
									"case":	161,
									"scores":	[-4.49790151763621]
								}, {
									"case":	162,
									"scores":	[-4.49790151763621]
								}, {
									"case":	163,
									"scores":	[-4.49790151763621]
								}, {
									"case":	164,
									"scores":	[-4.49790151763621]
								}, {
									"case":	165,
									"scores":	[-4.49790151763621]
								}, {
									"case":	166,
									"scores":	[-4.49790151763621]
								}, {
									"case":	167,
									"scores":	[-4.49790151763621]
								}, {
									"case":	168,
									"scores":	[-4.49790151763621]
								}, {
									"case":	169,
									"scores":	[-4.49790151763621]
								}, {
									"case":	170,
									"scores":	[-4.49790151763621]
								}, {
									"case":	171,
									"scores":	[-4.49790151763621]
								}, {
									"case":	172,
									"scores":	[-4.49790151763621]
								}, {
									"case":	173,
									"scores":	[-4.49790151763621]
								}, {
									"case":	174,
									"scores":	[-4.49790151763621]
								}, {
									"case":	175,
									"scores":	[-4.49790151763621]
								}, {
									"case":	176,
									"scores":	[-4.49790151763621]
								}, {
									"case":	177,
									"scores":	[-4.49790151763621]
								}, {
									"case":	178,
									"scores":	[-4.49790151763621]
								}, {
									"case":	179,
									"scores":	[-4.49790151763621]
								}, {
									"case":	180,
									"scores":	[-4.49790151763621]
								}, {
									"case":	181,
									"scores":	[-4.49790151763621]
								}, {
									"case":	182,
									"scores":	[-4.49790151763621]
								}, {
									"case":	183,
									"scores":	[-4.49790151763621]
								}, {
									"case":	184,
									"scores":	[-4.49790151763621]
								}, {
									"case":	185,
									"scores":	[-4.49790151763621]
								}, {
									"case":	186,
									"scores":	[-4.49790151763621]
								}, {
									"case":	187,
									"scores":	[-4.49790151763621]
								}, {
									"case":	188,
									"scores":	[-4.49790151763621]
								}, {
									"case":	189,
									"scores":	[-4.49790151763621]
								}, {
									"case":	190,
									"scores":	[-4.49790151763621]
								}, {
									"case":	191,
									"scores":	[-4.49790151763621]
								}, {
									"case":	192,
									"scores":	[-4.49790151763621]
								}, {
									"case":	193,
									"scores":	[-4.49790151763621]
								}, {
									"case":	194,
									"scores":	[-4.49790151763621]
								}, {
									"case":	195,
									"scores":	[-4.49790151763621]
								}, {
									"case":	196,
									"scores":	[-4.49790151763621]
								}, {
									"case":	197,
									"scores":	[-4.49790151763621]
								}, {
									"case":	198,
									"scores":	[-4.49790151763621]
								}, {
									"case":	199,
									"scores":	[-4.49790151763621]
								}, {
									"case":	200,
									"scores":	[-4.49790151763621]
								}, {
									"case":	201,
									"scores":	[-4.49790151763621]
								}, {
									"case":	202,
									"scores":	[-4.49790151763621]
								}, {
									"case":	203,
									"scores":	[-4.49790151763621]
								}, {
									"case":	204,
									"scores":	[-4.49790151763621]
								}, {
									"case":	205,
									"scores":	[-4.49790151763621]
								}, {
									"case":	206,
									"scores":	[-4.49790151763621]
								}, {
									"case":	207,
									"scores":	[-4.49790151763621]
								}, {
									"case":	208,
									"scores":	[-4.49790151763621]
								}, {
									"case":	209,
									"scores":	[-4.49790151763621]
								}, {
									"case":	210,
									"scores":	[-4.49790151763621]
								}, {
									"case":	211,
									"scores":	[-4.49790151763621]
								}, {
									"case":	212,
									"scores":	[-4.49790151763621]
								}, {
									"case":	213,
									"scores":	[-4.49790151763621]
								}, {
									"case":	214,
									"scores":	[-4.49790151763621]
								}, {
									"case":	215,
									"scores":	[-4.49790151763621]
								}, {
									"case":	216,
									"scores":	[-4.49790151763621]
								}, {
									"case":	217,
									"scores":	[-4.49790151763621]
								}, {
									"case":	218,
									"scores":	[-4.49790151763621]
								}, {
									"case":	219,
									"scores":	[-4.49790151763621]
								}, {
									"case":	220,
									"scores":	[-4.49790151763621]
								}, {
									"case":	221,
									"scores":	[-4.49790151763621]
								}, {
									"case":	222,
									"scores":	[-4.49790151763621]
								}, {
									"case":	223,
									"scores":	[-4.49790151763621]
								}, {
									"case":	224,
									"scores":	[-4.49790151763621]
								}, {
									"case":	225,
									"scores":	[-4.49790151763621]
								}, {
									"case":	226,
									"scores":	[-4.49790151763621]
								}, {
									"case":	227,
									"scores":	[-4.49790151763621]
								}, {
									"case":	228,
									"scores":	[-4.49790151763621]
								}, {
									"case":	229,
									"scores":	[-4.49790151763621]
								}, {
									"case":	230,
									"scores":	[-4.49790151763621]
								}, {
									"case":	231,
									"scores":	[-4.49790151763621]
								}, {
									"case":	232,
									"scores":	[-4.49790151763621]
								}, {
									"case":	233,
									"scores":	[-4.49790151763621]
								}, {
									"case":	234,
									"scores":	[-4.49790151763621]
								}, {
									"case":	235,
									"scores":	[-4.49790151763621]
								}, {
									"case":	236,
									"scores":	[-4.49790151763621]
								}, {
									"case":	237,
									"scores":	[-4.49790151763621]
								}, {
									"case":	238,
									"scores":	[-4.49790151763621]
								}, {
									"case":	239,
									"scores":	[-4.49790151763621]
								}, {
									"case":	240,
									"scores":	[-4.49790151763621]
								}, {
									"case":	241,
									"scores":	[-4.49790151763621]
								}, {
									"case":	242,
									"scores":	[-4.49790151763621]
								}, {
									"case":	243,
									"scores":	[-4.49790151763621]
								}, {
									"case":	244,
									"scores":	[-4.49790151763621]
								}, {
									"case":	245,
									"scores":	[-4.49790151763621]
								}, {
									"case":	246,
									"scores":	[-4.49790151763621]
								}, {
									"case":	247,
									"scores":	[-4.49790151763621]
								}, {
									"case":	248,
									"scores":	[-4.49790151763621]
								}, {
									"case":	249,
									"scores":	[-4.49790151763621]
								}, {
									"case":	250,
									"scores":	[-4.49790151763621]
								}, {
									"case":	251,
									"scores":	[-4.49790151763621]
								}, {
									"case":	252,
									"scores":	[-4.49790151763621]
								}, {
									"case":	253,
									"scores":	[-4.49790151763621]
								}, {
									"case":	254,
									"scores":	[-4.49790151763621]
								}, {
									"case":	255,
									"scores":	[-4.49790151763621]
								}, {
									"case":	256,
									"scores":	[-4.49790151763621]
								}, {
									"case":	257,
									"scores":	[-4.49790151763621]
								}, {
									"case":	258,
									"scores":	[-4.49790151763621]
								}, {
									"case":	259,
									"scores":	[-4.49790151763621]
								}, {
									"case":	260,
									"scores":	[-4.49790151763621]
								}, {
									"case":	261,
									"scores":	[-4.49790151763621]
								}, {
									"case":	262,
									"scores":	[-4.49790151763621]
								}, {
									"case":	263,
									"scores":	[-4.49790151763621]
								}, {
									"case":	264,
									"scores":	[-4.49790151763621]
								}, {
									"case":	265,
									"scores":	[-4.49790151763621]
								}, {
									"case":	266,
									"scores":	[-4.49790151763621]
								}, {
									"case":	267,
									"scores":	[-4.49790151763621]
								}, {
									"case":	268,
									"scores":	[-4.49790151763621]
								}, {
									"case":	269,
									"scores":	[-4.49790151763621]
								}, {
									"case":	270,
									"scores":	[-4.49790151763621]
								}, {
									"case":	271,
									"scores":	[-4.49790151763621]
								}, {
									"case":	272,
									"scores":	[-4.49790151763621]
								}, {
									"case":	273,
									"scores":	[-4.49790151763621]
								}, {
									"case":	274,
									"scores":	[-4.49790151763621]
								}, {
									"case":	275,
									"scores":	[-4.49790151763621]
								}, {
									"case":	276,
									"scores":	[-4.49790151763621]
								}, {
									"case":	277,
									"scores":	[-4.49790151763621]
								}, {
									"case":	278,
									"scores":	[-4.49790151763621]
								}, {
									"case":	279,
									"scores":	[-4.49790151763621]
								}, {
									"case":	280,
									"scores":	[-4.49790151763621]
								}, {
									"case":	281,
									"scores":	[-4.49790151763621]
								}, {
									"case":	282,
									"scores":	[-4.49790151763621]
								}, {
									"case":	283,
									"scores":	[-4.49790151763621]
								}, {
									"case":	284,
									"scores":	[-4.49790151763621]
								}, {
									"case":	285,
									"scores":	[-4.49790151763621]
								}, {
									"case":	286,
									"scores":	[-4.49790151763621]
								}, {
									"case":	287,
									"scores":	[-4.49790151763621]
								}, {
									"case":	288,
									"scores":	[-4.49790151763621]
								}, {
									"case":	289,
									"scores":	[-4.49790151763621]
								}, {
									"case":	290,
									"scores":	[-4.49790151763621]
								}, {
									"case":	291,
									"scores":	[-4.49790151763621]
								}, {
									"case":	292,
									"scores":	[-4.49790151763621]
								}, {
									"case":	293,
									"scores":	[-4.49790151763621]
								}, {
									"case":	294,
									"scores":	[-4.49790151763621]
								}, {
									"case":	295,
									"scores":	[-4.49790151763621]
								}, {
									"case":	296,
									"scores":	[-4.49790151763621]
								}, {
									"case":	297,
									"scores":	[-4.49790151763621]
								}, {
									"case":	298,
									"scores":	[-4.49790151763621]
								}, {
									"case":	299,
									"scores":	[-4.49790151763621]
								}, {
									"case":	300,
									"scores":	[-4.49790151763621]
								}, {
									"case":	301,
									"scores":	[-4.49790151763621]
								}, {
									"case":	302,
									"scores":	[-4.49790151763621]
								}, {
									"case":	303,
									"scores":	[-4.49790151763621]
								}, {
									"case":	304,
									"scores":	[-4.49790151763621]
								}, {
									"case":	305,
									"scores":	[-4.49790151763621]
								}, {
									"case":	306,
									"scores":	[-4.49790151763621]
								}, {
									"case":	307,
									"scores":	[-4.49790151763621]
								}, {
									"case":	308,
									"scores":	[-4.49790151763621]
								}, {
									"case":	309,
									"scores":	[-4.49790151763621]
								}, {
									"case":	310,
									"scores":	[-4.49790151763621]
								}, {
									"case":	311,
									"scores":	[-4.49790151763621]
								}, {
									"case":	312,
									"scores":	[-4.49790151763621]
								}, {
									"case":	313,
									"scores":	[-4.49790151763621]
								}, {
									"case":	314,
									"scores":	[-4.49790151763621]
								}, {
									"case":	315,
									"scores":	[-4.49790151763621]
								}, {
									"case":	316,
									"scores":	[-4.49790151763621]
								}, {
									"case":	317,
									"scores":	[-4.49790151763621]
								}, {
									"case":	318,
									"scores":	[-4.49790151763621]
								}, {
									"case":	319,
									"scores":	[-4.49790151763621]
								}, {
									"case":	320,
									"scores":	[-4.49790151763621]
								}, {
									"case":	321,
									"scores":	[-4.49790151763621]
								}, {
									"case":	322,
									"scores":	[-4.49790151763621]
								}, {
									"case":	323,
									"scores":	[-4.49790151763621]
								}, {
									"case":	324,
									"scores":	[-4.49790151763621]
								}, {
									"case":	325,
									"scores":	[-4.49790151763621]
								}, {
									"case":	326,
									"scores":	[-4.49790151763621]
								}, {
									"case":	327,
									"scores":	[-4.49790151763621]
								}, {
									"case":	328,
									"scores":	[-4.49790151763621]
								}, {
									"case":	329,
									"scores":	[-4.49790151763621]
								}, {
									"case":	330,
									"scores":	[-4.49790151763621]
								}, {
									"case":	331,
									"scores":	[-4.49790151763621]
								}, {
									"case":	332,
									"scores":	[-4.49790151763621]
								}, {
									"case":	333,
									"scores":	[-4.49790151763621]
								}, {
									"case":	334,
									"scores":	[-4.49790151763621]
								}, {
									"case":	335,
									"scores":	[-4.49790151763621]
								}, {
									"case":	336,
									"scores":	[-4.49790151763621]
								}, {
									"case":	337,
									"scores":	[-4.49790151763621]
								}, {
									"case":	338,
									"scores":	[-4.49790151763621]
								}, {
									"case":	339,
									"scores":	[-4.49790151763621]
								}, {
									"case":	340,
									"scores":	[-4.49790151763621]
								}, {
									"case":	341,
									"scores":	[-4.49790151763621]
								}, {
									"case":	342,
									"scores":	[-4.49790151763621]
								}, {
									"case":	343,
									"scores":	[-4.49790151763621]
								}, {
									"case":	344,
									"scores":	[-4.49790151763621]
								}, {
									"case":	345,
									"scores":	[-4.49790151763621]
								}, {
									"case":	346,
									"scores":	[-4.49790151763621]
								}, {
									"case":	347,
									"scores":	[-4.49790151763621]
								}, {
									"case":	348,
									"scores":	[-4.49790151763621]
								}, {
									"case":	349,
									"scores":	[-4.49790151763621]
								}, {
									"case":	350,
									"scores":	[-4.49790151763621]
								}, {
									"case":	351,
									"scores":	[-4.49790151763621]
								}, {
									"case":	352,
									"scores":	[-4.49790151763621]
								}, {
									"case":	353,
									"scores":	[-4.49790151763621]
								}, {
									"case":	354,
									"scores":	[-4.49790151763621]
								}, {
									"case":	355,
									"scores":	[-4.49790151763621]
								}, {
									"case":	356,
									"scores":	[-4.49790151763621]
								}, {
									"case":	357,
									"scores":	[-4.49790151763621]
								}, {
									"case":	358,
									"scores":	[-4.49790151763621]
								}, {
									"case":	359,
									"scores":	[-4.49790151763621]
								}, {
									"case":	360,
									"scores":	[-4.49790151763621]
								}, {
									"case":	361,
									"scores":	[-4.49790151763621]
								}, {
									"case":	362,
									"scores":	[-4.49790151763621]
								}, {
									"case":	363,
									"scores":	[-4.49790151763621]
								}, {
									"case":	364,
									"scores":	[-4.49790151763621]
								}, {
									"case":	365,
									"scores":	[-4.49790151763621]
								}, {
									"case":	366,
									"scores":	[-4.49790151763621]
								}, {
									"case":	367,
									"scores":	[-4.49790151763621]
								}, {
									"case":	368,
									"scores":	[-4.49790151763621]
								}, {
									"case":	369,
									"scores":	[-4.49790151763621]
								}, {
									"case":	370,
									"scores":	[-4.49790151763621]
								}, {
									"case":	371,
									"scores":	[-4.49790151763621]
								}, {
									"case":	372,
									"scores":	[-4.49790151763621]
								}, {
									"case":	373,
									"scores":	[-4.49790151763621]
								}, {
									"case":	374,
									"scores":	[-4.49790151763621]
								}, {
									"case":	375,
									"scores":	[-4.49790151763621]
								}, {
									"case":	376,
									"scores":	[-4.49790151763621]
								}, {
									"case":	377,
									"scores":	[-4.49790151763621]
								}, {
									"case":	378,
									"scores":	[-4.49790151763621]
								}, {
									"case":	379,
									"scores":	[-4.49790151763621]
								}, {
									"case":	380,
									"scores":	[-4.49790151763621]
								}, {
									"case":	381,
									"scores":	[-4.49790151763621]
								}, {
									"case":	382,
									"scores":	[-4.49790151763621]
								}, {
									"case":	383,
									"scores":	[-4.49790151763621]
								}, {
									"case":	384,
									"scores":	[-4.49790151763621]
								}, {
									"case":	385,
									"scores":	[-4.49790151763621]
								}, {
									"case":	386,
									"scores":	[-4.49790151763621]
								}, {
									"case":	387,
									"scores":	[-4.49790151763621]
								}, {
									"case":	388,
									"scores":	[-4.49790151763621]
								}, {
									"case":	389,
									"scores":	[-4.49790151763621]
								}, {
									"case":	390,
									"scores":	[-4.49790151763621]
								}, {
									"case":	391,
									"scores":	[-4.49790151763621]
								}, {
									"case":	392,
									"scores":	[-4.49790151763621]
								}, {
									"case":	393,
									"scores":	[-4.49790151763621]
								}, {
									"case":	394,
									"scores":	[-4.49790151763621]
								}, {
									"case":	395,
									"scores":	[-5.71326485793621, -5.88279080043621, -5.71326485793621, -5.88279080043621, -7.95615038553621, -7.95615038553621, -7.55663522073621, -7.74719819043621, -7.55663522073621, -7.74719819043621, -8.11188202073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.64605792073621, -7.64605792073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.33036615763621, -7.55663522073621]
								}, {
									"case":	396,
									"scores":	[-5.71326485793621, -5.88279080043621, -5.71326485793621, -5.88279080043621, -7.95615038553621, -7.95615038553621, -7.55663522073621, -7.74719819043621, -7.55663522073621, -7.74719819043621, -8.11188202073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.64605792073621, -7.64605792073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.55663522073621, -7.33036615763621, -7.55663522073621]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718], [], [658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656], [], [], [657]],
							"begin_line":	843,
							"begin_column":	2,
							"end_line":	843,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L843\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    method = get_method(ifd);\n", "_IO_putc(ifd, 0)", "__tolower_l(ifd, 0)", "__toupper_l(ifd, 0)", "clock_adjtime(ifd, 0)", "clock_getcpuclockid(ifd, 0)", "clock_getres(ifd, 0)", "clock_gettime(ifd, 0)", "clock_settime(ifd, 0)", "copy(ifd, -1)", "copy(ifd, 0)", "copy(ifd, 1)", "copy(ifd, 1024)", "copy(ifd, 16384)", "copy(ifd, 2)", "copy(ifd, 2048)", "copy(ifd, 32768)", "copy(ifd, 512)", "copy(ifd, 61440)", "copy(ifd, ascii)", "copy(ifd, block_mode)", "copy(ifd, decompress)", "copy(ifd, decrypt)", "copy(ifd, do_lzw)", "copy(ifd, exit_code)", "copy(ifd, exiting_signal)", "copy(ifd, force)", "copy(ifd, foreground)", "copy(ifd, ifd)", "copy(ifd, last_member)", "copy(ifd, level)", "copy(ifd, list)", "copy(ifd, maxbits)", "copy(ifd, method)", "copy(ifd, no_name)", "copy(ifd, no_time)", "copy(ifd, ofd)", "copy(ifd, part_nb)", "copy(ifd, quiet)", "copy(ifd, recursive)", "copy(ifd, remove_ofname_fd)", "copy(ifd, save_orig_name)", "copy(ifd, test)", "copy(ifd, to_stdout)", "copy(ifd, verbose)", "ct_tally(ifd, -1)", "ct_tally(ifd, 0)", "ct_tally(ifd, 1)", "ct_tally(ifd, 1024)", "ct_tally(ifd, 16384)", "ct_tally(ifd, 2)", "ct_tally(ifd, 2048)", "ct_tally(ifd, 32768)", "ct_tally(ifd, 512)", "ct_tally(ifd, 61440)", "ct_tally(ifd, ascii)", "ct_tally(ifd, block_mode)", "ct_tally(ifd, decompress)", "ct_tally(ifd, decrypt)", "ct_tally(ifd, do_lzw)", "ct_tally(ifd, exit_code)", "ct_tally(ifd, exiting_signal)", "ct_tally(ifd, force)", "ct_tally(ifd, foreground)", "ct_tally(ifd, ifd)", "ct_tally(ifd, last_member)", "ct_tally(ifd, level)", "ct_tally(ifd, list)", "ct_tally(ifd, maxbits)", "ct_tally(ifd, method)", "ct_tally(ifd, no_name)", "ct_tally(ifd, no_time)", "ct_tally(ifd, ofd)", "ct_tally(ifd, part_nb)", "ct_tally(ifd, quiet)", "ct_tally(ifd, recursive)", "ct_tally(ifd, remove_ofname_fd)", "ct_tally(ifd, save_orig_name)", "ct_tally(ifd, test)", "ct_tally(ifd, to_stdout)", "ct_tally(ifd, verbose)", "daemon(ifd, -1)", "daemon(ifd, 0)", "daemon(ifd, 1)", "daemon(ifd, 1024)", "daemon(ifd, 16384)", "daemon(ifd, 2)", "daemon(ifd, 2048)", "daemon(ifd, 32768)", "daemon(ifd, 512)", "daemon(ifd, 61440)", "daemon(ifd, ascii)", "daemon(ifd, block_mode)", "daemon(ifd, decompress)", "daemon(ifd, decrypt)", "daemon(ifd, do_lzw)", "daemon(ifd, exit_code)", "daemon(ifd, exiting_signal)", "daemon(ifd, force)", "daemon(ifd, foreground)", "daemon(ifd, ifd)", "daemon(ifd, last_member)", "daemon(ifd, level)", "daemon(ifd, list)", "daemon(ifd, maxbits)", "daemon(ifd, method)", "daemon(ifd, no_name)", "daemon(ifd, no_time)", "daemon(ifd, ofd)", "daemon(ifd, part_nb)", "daemon(ifd, quiet)", "daemon(ifd, recursive)", "daemon(ifd, remove_ofname_fd)", "daemon(ifd, save_orig_name)", "daemon(ifd, test)", "daemon(ifd, to_stdout)", "daemon(ifd, verbose)", "dup2(ifd, -1)", "dup2(ifd, 0)", "dup2(ifd, 1)", "dup2(ifd, 1024)", "dup2(ifd, 16384)", "dup2(ifd, 2)", "dup2(ifd, 2048)", "dup2(ifd, 32768)", "dup2(ifd, 512)", "dup2(ifd, 61440)", "dup2(ifd, ascii)", "dup2(ifd, block_mode)", "dup2(ifd, decompress)", "dup2(ifd, decrypt)", "dup2(ifd, do_lzw)", "dup2(ifd, exit_code)", "dup2(ifd, exiting_signal)", "dup2(ifd, force)", "dup2(ifd, foreground)", "dup2(ifd, ifd)", "dup2(ifd, last_member)", "dup2(ifd, level)", "dup2(ifd, list)", "dup2(ifd, maxbits)", "dup2(ifd, method)", "dup2(ifd, no_name)", "dup2(ifd, no_time)", "dup2(ifd, ofd)", "dup2(ifd, part_nb)", "dup2(ifd, quiet)", "dup2(ifd, recursive)", "dup2(ifd, remove_ofname_fd)", "dup2(ifd, save_orig_name)", "dup2(ifd, test)", "dup2(ifd, to_stdout)", "dup2(ifd, verbose)", "fchmod(ifd, -1)", "fchmod(ifd, 0)", "fchmod(ifd, 1)", "fchmod(ifd, 1024)", "fchmod(ifd, 16384)", "fchmod(ifd, 2)", "fchmod(ifd, 2048)", "fchmod(ifd, 32768)", "fchmod(ifd, 512)", "fchmod(ifd, 61440)", "fchmod(ifd, inptr)", "fchmod(ifd, insize)", "fchmod(ifd, outcnt)", "fputc(ifd, 0)", "fputc_unlocked(ifd, 0)", "fstat(ifd, 0)", "fstat64(ifd, 0)", "ftruncate(ifd, -1)", "ftruncate(ifd, 0)", "ftruncate(ifd, 1)", "ftruncate(ifd, 1024)", "ftruncate(ifd, 16384)", "ftruncate(ifd, 2)", "ftruncate(ifd, 2048)", "ftruncate(ifd, 32768)", "ftruncate(ifd, 512)", "ftruncate(ifd, 61440)", "ftruncate(ifd, bytes_in)", "ftruncate(ifd, bytes_out)", "ftruncate(ifd, header_bytes)", "ftruncate(ifd, ifile_size)", "ftruncate(ifd, total_in)", "ftruncate(ifd, total_out)", "ftruncate64(ifd, -1)", "ftruncate64(ifd, 0)", "ftruncate64(ifd, 1)", "ftruncate64(ifd, 1024)", "ftruncate64(ifd, 16384)", "ftruncate64(ifd, 2)", "ftruncate64(ifd, 2048)", "ftruncate64(ifd, 32768)", "ftruncate64(ifd, 512)", "ftruncate64(ifd, 61440)", "ftruncate64(ifd, bytes_in)", "ftruncate64(ifd, bytes_out)", "ftruncate64(ifd, header_bytes)", "ftruncate64(ifd, ifile_size)", "ftruncate64(ifd, total_in)", "ftruncate64(ifd, total_out)", "futimens(ifd, 0)", "getgroups(ifd, 0)", "isalnum_l(ifd, 0)", "isalpha_l(ifd, 0)", "isblank_l(ifd, 0)", "iscntrl_l(ifd, 0)", "isctype(ifd, -1)", "isctype(ifd, 0)", "isctype(ifd, 1)", "isctype(ifd, 1024)", "isctype(ifd, 16384)", "isctype(ifd, 2)", "isctype(ifd, 2048)", "isctype(ifd, 32768)", "isctype(ifd, 512)", "isctype(ifd, 61440)", "isctype(ifd, ascii)", "isctype(ifd, block_mode)", "isctype(ifd, decompress)", "isctype(ifd, decrypt)", "isctype(ifd, do_lzw)", "isctype(ifd, exit_code)", "isctype(ifd, exiting_signal)", "isctype(ifd, force)", "isctype(ifd, foreground)", "isctype(ifd, ifd)", "isctype(ifd, last_member)", "isctype(ifd, level)", "isctype(ifd, list)", "isctype(ifd, maxbits)", "isctype(ifd, method)", "isctype(ifd, no_name)", "isctype(ifd, no_time)", "isctype(ifd, ofd)", "isctype(ifd, part_nb)", "isctype(ifd, quiet)", "isctype(ifd, recursive)", "isctype(ifd, remove_ofname_fd)", "isctype(ifd, save_orig_name)", "isctype(ifd, test)", "isctype(ifd, to_stdout)", "isctype(ifd, verbose)", "isdigit_l(ifd, 0)", "isgraph_l(ifd, 0)", "islower_l(ifd, 0)", "isprint_l(ifd, 0)", "ispunct_l(ifd, 0)", "isspace_l(ifd, 0)", "isupper_l(ifd, 0)", "isxdigit_l(ifd, 0)", "kill(ifd, -1)", "kill(ifd, 0)", "kill(ifd, 1)", "kill(ifd, 1024)", "kill(ifd, 16384)", "kill(ifd, 2)", "kill(ifd, 2048)", "kill(ifd, 32768)", "kill(ifd, 512)", "kill(ifd, 61440)", "kill(ifd, ascii)", "kill(ifd, block_mode)", "kill(ifd, decompress)", "kill(ifd, decrypt)", "kill(ifd, do_lzw)", "kill(ifd, exit_code)", "kill(ifd, exiting_signal)", "kill(ifd, force)", "kill(ifd, foreground)", "kill(ifd, ifd)", "kill(ifd, last_member)", "kill(ifd, level)", "kill(ifd, list)", "kill(ifd, maxbits)", "kill(ifd, method)", "kill(ifd, no_name)", "kill(ifd, no_time)", "kill(ifd, ofd)", "kill(ifd, part_nb)", "kill(ifd, quiet)", "kill(ifd, recursive)", "kill(ifd, remove_ofname_fd)", "kill(ifd, save_orig_name)", "kill(ifd, test)", "kill(ifd, to_stdout)", "kill(ifd, verbose)", "killpg(ifd, -1)", "killpg(ifd, 0)", "killpg(ifd, 1)", "killpg(ifd, 1024)", "killpg(ifd, 16384)", "killpg(ifd, 2)", "killpg(ifd, 2048)", "killpg(ifd, 32768)", "killpg(ifd, 512)", "killpg(ifd, 61440)", "killpg(ifd, ascii)", "killpg(ifd, block_mode)", "killpg(ifd, decompress)", "killpg(ifd, decrypt)", "killpg(ifd, do_lzw)", "killpg(ifd, exit_code)", "killpg(ifd, exiting_signal)", "killpg(ifd, force)", "killpg(ifd, foreground)", "killpg(ifd, ifd)", "killpg(ifd, last_member)", "killpg(ifd, level)", "killpg(ifd, list)", "killpg(ifd, maxbits)", "killpg(ifd, method)", "killpg(ifd, no_name)", "killpg(ifd, no_time)", "killpg(ifd, ofd)", "killpg(ifd, part_nb)", "killpg(ifd, quiet)", "killpg(ifd, recursive)", "killpg(ifd, remove_ofname_fd)", "killpg(ifd, save_orig_name)", "killpg(ifd, test)", "killpg(ifd, to_stdout)", "killpg(ifd, verbose)", "lzw(ifd, -1)", "lzw(ifd, 0)", "lzw(ifd, 1)", "lzw(ifd, 1024)", "lzw(ifd, 16384)", "lzw(ifd, 2)", "lzw(ifd, 2048)", "lzw(ifd, 32768)", "lzw(ifd, 512)", "lzw(ifd, 61440)", "lzw(ifd, ascii)", "lzw(ifd, block_mode)", "lzw(ifd, decompress)", "lzw(ifd, decrypt)", "lzw(ifd, do_lzw)", "lzw(ifd, exit_code)", "lzw(ifd, exiting_signal)", "lzw(ifd, force)", "lzw(ifd, foreground)", "lzw(ifd, ifd)", "lzw(ifd, last_member)", "lzw(ifd, level)", "lzw(ifd, list)", "lzw(ifd, maxbits)", "lzw(ifd, method)", "lzw(ifd, no_name)", "lzw(ifd, no_time)", "lzw(ifd, ofd)", "lzw(ifd, part_nb)", "lzw(ifd, quiet)", "lzw(ifd, recursive)", "lzw(ifd, remove_ofname_fd)", "lzw(ifd, save_orig_name)", "lzw(ifd, test)", "lzw(ifd, to_stdout)", "lzw(ifd, verbose)", "main(ifd, 0)", "main(ifd, args)", "putc(ifd, 0)", "putc_unlocked(ifd, 0)", "putw(ifd, 0)", "setpgid(ifd, -1)", "setpgid(ifd, 0)", "setpgid(ifd, 1)", "setpgid(ifd, 1024)", "setpgid(ifd, 16384)", "setpgid(ifd, 2)", "setpgid(ifd, 2048)", "setpgid(ifd, 32768)", "setpgid(ifd, 512)", "setpgid(ifd, 61440)", "setpgid(ifd, ascii)", "setpgid(ifd, block_mode)", "setpgid(ifd, decompress)", "setpgid(ifd, decrypt)", "setpgid(ifd, do_lzw)", "setpgid(ifd, exit_code)", "setpgid(ifd, exiting_signal)", "setpgid(ifd, force)", "setpgid(ifd, foreground)", "setpgid(ifd, ifd)", "setpgid(ifd, last_member)", "setpgid(ifd, level)", "setpgid(ifd, list)", "setpgid(ifd, maxbits)", "setpgid(ifd, method)", "setpgid(ifd, no_name)", "setpgid(ifd, no_time)", "setpgid(ifd, ofd)", "setpgid(ifd, part_nb)", "setpgid(ifd, quiet)", "setpgid(ifd, recursive)", "setpgid(ifd, remove_ofname_fd)", "setpgid(ifd, save_orig_name)", "setpgid(ifd, test)", "setpgid(ifd, to_stdout)", "setpgid(ifd, verbose)", "siginterrupt(ifd, -1)", "siginterrupt(ifd, 0)", "siginterrupt(ifd, 1)", "siginterrupt(ifd, 1024)", "siginterrupt(ifd, 16384)", "siginterrupt(ifd, 2)", "siginterrupt(ifd, 2048)", "siginterrupt(ifd, 32768)", "siginterrupt(ifd, 512)", "siginterrupt(ifd, 61440)", "siginterrupt(ifd, ascii)", "siginterrupt(ifd, block_mode)", "siginterrupt(ifd, decompress)", "siginterrupt(ifd, decrypt)", "siginterrupt(ifd, do_lzw)", "siginterrupt(ifd, exit_code)", "siginterrupt(ifd, exiting_signal)", "siginterrupt(ifd, force)", "siginterrupt(ifd, foreground)", "siginterrupt(ifd, ifd)", "siginterrupt(ifd, last_member)", "siginterrupt(ifd, level)", "siginterrupt(ifd, list)", "siginterrupt(ifd, maxbits)", "siginterrupt(ifd, method)", "siginterrupt(ifd, no_name)", "siginterrupt(ifd, no_time)", "siginterrupt(ifd, ofd)", "siginterrupt(ifd, part_nb)", "siginterrupt(ifd, quiet)", "siginterrupt(ifd, recursive)", "siginterrupt(ifd, remove_ofname_fd)", "siginterrupt(ifd, save_orig_name)", "siginterrupt(ifd, test)", "siginterrupt(ifd, to_stdout)", "siginterrupt(ifd, verbose)", "tcsetpgrp(ifd, -1)", "tcsetpgrp(ifd, 0)", "tcsetpgrp(ifd, 1)", "tcsetpgrp(ifd, 1024)", "tcsetpgrp(ifd, 16384)", "tcsetpgrp(ifd, 2)", "tcsetpgrp(ifd, 2048)", "tcsetpgrp(ifd, 32768)", "tcsetpgrp(ifd, 512)", "tcsetpgrp(ifd, 61440)", "tcsetpgrp(ifd, ascii)", "tcsetpgrp(ifd, block_mode)", "tcsetpgrp(ifd, decompress)", "tcsetpgrp(ifd, decrypt)", "tcsetpgrp(ifd, do_lzw)", "tcsetpgrp(ifd, exit_code)", "tcsetpgrp(ifd, exiting_signal)", "tcsetpgrp(ifd, force)", "tcsetpgrp(ifd, foreground)", "tcsetpgrp(ifd, ifd)", "tcsetpgrp(ifd, last_member)", "tcsetpgrp(ifd, level)", "tcsetpgrp(ifd, list)", "tcsetpgrp(ifd, maxbits)", "tcsetpgrp(ifd, method)", "tcsetpgrp(ifd, no_name)", "tcsetpgrp(ifd, no_time)", "tcsetpgrp(ifd, ofd)", "tcsetpgrp(ifd, part_nb)", "tcsetpgrp(ifd, quiet)", "tcsetpgrp(ifd, recursive)", "tcsetpgrp(ifd, remove_ofname_fd)", "tcsetpgrp(ifd, save_orig_name)", "tcsetpgrp(ifd, test)", "tcsetpgrp(ifd, to_stdout)", "tcsetpgrp(ifd, verbose)", "tolower_l(ifd, 0)", "toupper_l(ifd, 0)", "ungetc(ifd, 0)", "unlzh(ifd, -1)", "unlzh(ifd, 0)", "unlzh(ifd, 1)", "unlzh(ifd, 1024)", "unlzh(ifd, 16384)", "unlzh(ifd, 2)", "unlzh(ifd, 2048)", "unlzh(ifd, 32768)", "unlzh(ifd, 512)", "unlzh(ifd, 61440)", "unlzh(ifd, ascii)", "unlzh(ifd, block_mode)", "unlzh(ifd, decompress)", "unlzh(ifd, decrypt)", "unlzh(ifd, do_lzw)", "unlzh(ifd, exit_code)", "unlzh(ifd, exiting_signal)", "unlzh(ifd, force)", "unlzh(ifd, foreground)", "unlzh(ifd, ifd)", "unlzh(ifd, last_member)", "unlzh(ifd, level)", "unlzh(ifd, list)", "unlzh(ifd, maxbits)", "unlzh(ifd, method)", "unlzh(ifd, no_name)", "unlzh(ifd, no_time)", "unlzh(ifd, ofd)", "unlzh(ifd, part_nb)", "unlzh(ifd, quiet)", "unlzh(ifd, recursive)", "unlzh(ifd, remove_ofname_fd)", "unlzh(ifd, save_orig_name)", "unlzh(ifd, test)", "unlzh(ifd, to_stdout)", "unlzh(ifd, verbose)", "unlzw(ifd, -1)", "unlzw(ifd, 0)", "unlzw(ifd, 1)", "unlzw(ifd, 1024)", "unlzw(ifd, 16384)", "unlzw(ifd, 2)", "unlzw(ifd, 2048)", "unlzw(ifd, 32768)", "unlzw(ifd, 512)", "unlzw(ifd, 61440)", "unlzw(ifd, ascii)", "unlzw(ifd, block_mode)", "unlzw(ifd, decompress)", "unlzw(ifd, decrypt)", "unlzw(ifd, do_lzw)", "unlzw(ifd, exit_code)", "unlzw(ifd, exiting_signal)", "unlzw(ifd, force)", "unlzw(ifd, foreground)", "unlzw(ifd, ifd)", "unlzw(ifd, last_member)", "unlzw(ifd, level)", "unlzw(ifd, list)", "unlzw(ifd, maxbits)", "unlzw(ifd, method)", "unlzw(ifd, no_name)", "unlzw(ifd, no_time)", "unlzw(ifd, ofd)", "unlzw(ifd, part_nb)", "unlzw(ifd, quiet)", "unlzw(ifd, recursive)", "unlzw(ifd, remove_ofname_fd)", "unlzw(ifd, save_orig_name)", "unlzw(ifd, test)", "unlzw(ifd, to_stdout)", "unlzw(ifd, verbose)", "unpack(ifd, -1)", "unpack(ifd, 0)", "unpack(ifd, 1)", "unpack(ifd, 1024)", "unpack(ifd, 16384)", "unpack(ifd, 2)", "unpack(ifd, 2048)", "unpack(ifd, 32768)", "unpack(ifd, 512)", "unpack(ifd, 61440)", "unpack(ifd, ascii)", "unpack(ifd, block_mode)", "unpack(ifd, decompress)", "unpack(ifd, decrypt)", "unpack(ifd, do_lzw)", "unpack(ifd, exit_code)", "unpack(ifd, exiting_signal)", "unpack(ifd, force)", "unpack(ifd, foreground)", "unpack(ifd, ifd)", "unpack(ifd, last_member)", "unpack(ifd, level)", "unpack(ifd, list)", "unpack(ifd, maxbits)", "unpack(ifd, method)", "unpack(ifd, no_name)", "unpack(ifd, no_time)", "unpack(ifd, ofd)", "unpack(ifd, part_nb)", "unpack(ifd, quiet)", "unpack(ifd, recursive)", "unpack(ifd, remove_ofname_fd)", "unpack(ifd, save_orig_name)", "unpack(ifd, test)", "unpack(ifd, to_stdout)", "unpack(ifd, verbose)", "unzip(ifd, -1)", "unzip(ifd, 0)", "unzip(ifd, 1)", "unzip(ifd, 1024)", "unzip(ifd, 16384)", "unzip(ifd, 2)", "unzip(ifd, 2048)", "unzip(ifd, 32768)", "unzip(ifd, 512)", "unzip(ifd, 61440)", "unzip(ifd, ascii)", "unzip(ifd, block_mode)", "unzip(ifd, decompress)", "unzip(ifd, decrypt)", "unzip(ifd, do_lzw)", "unzip(ifd, exit_code)", "unzip(ifd, exiting_signal)", "unzip(ifd, force)", "unzip(ifd, foreground)", "unzip(ifd, ifd)", "unzip(ifd, last_member)", "unzip(ifd, level)", "unzip(ifd, list)", "unzip(ifd, maxbits)", "unzip(ifd, method)", "unzip(ifd, no_name)", "unzip(ifd, no_time)", "unzip(ifd, ofd)", "unzip(ifd, part_nb)", "unzip(ifd, quiet)", "unzip(ifd, recursive)", "unzip(ifd, remove_ofname_fd)", "unzip(ifd, save_orig_name)", "unzip(ifd, test)", "unzip(ifd, to_stdout)", "unzip(ifd, verbose)", "zip(ifd, -1)", "zip(ifd, 0)", "zip(ifd, 1)", "zip(ifd, 1024)", "zip(ifd, 16384)", "zip(ifd, 2)", "zip(ifd, 2048)", "zip(ifd, 32768)", "zip(ifd, 512)", "zip(ifd, 61440)", "zip(ifd, ascii)", "zip(ifd, block_mode)", "zip(ifd, decompress)", "zip(ifd, decrypt)", "zip(ifd, do_lzw)", "zip(ifd, exit_code)", "zip(ifd, exiting_signal)", "zip(ifd, force)", "zip(ifd, foreground)", "zip(ifd, ifd)", "zip(ifd, last_member)", "zip(ifd, level)", "zip(ifd, list)", "zip(ifd, maxbits)", "zip(ifd, method)", "zip(ifd, no_name)", "zip(ifd, no_time)", "zip(ifd, ofd)", "zip(ifd, part_nb)", "zip(ifd, quiet)", "zip(ifd, recursive)", "zip(ifd, remove_ofname_fd)", "zip(ifd, save_orig_name)", "zip(ifd, test)", "zip(ifd, to_stdout)", "zip(ifd, verbose)", "{\n}\n", "method = __getpgid(ifd)", "method = _tolower(ifd)", "method = _toupper(ifd)", "method = abs(ifd)", "method = check_zipfile(ifd)", "method = close(ifd)", "method = dup(ifd)", "method = dysize(ifd)", "method = fchdir(ifd)", "method = fdatasync(ifd)", "method = ffs(ifd)", "method = fill_inbuf(ifd)", "method = fsync(ifd)", "method = get_method(ifd)", "method = getpgid(ifd)", "method = getsid(ifd)", "method = grantpt(ifd)", "method = gsignal(ifd)", "method = isalnum(ifd)", "method = isalpha(ifd)", "method = isascii(ifd)", "method = isatty(ifd)", "method = isblank(ifd)", "method = iscntrl(ifd)", "method = isdigit(ifd)", "method = isgraph(ifd)", "method = islower(ifd)", "method = isprint(ifd)", "method = ispunct(ifd)", "method = isspace(ifd)", "method = isupper(ifd)", "method = isxdigit(ifd)", "method = nice(ifd)", "method = posix_openpt(ifd)", "method = putchar(ifd)", "method = putchar_unlocked(ifd)", "method = raise(ifd)", "method = sigblock(ifd)", "method = sighold(ifd)", "method = sigignore(ifd)", "method = sigpause(ifd)", "method = sigrelse(ifd)", "method = sigsetmask(ifd)", "method = syncfs(ifd)", "method = tcgetpgrp(ifd)", "method = toascii(ifd)", "method = tolower(ifd)", "method = toupper(ifd)", "method = unlockpt(ifd)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = get_method((iname != 0))", "method = get_method((iname == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.35343607663621, -4.86967199033621, -5.35343607663621, -4.86967199033621, -6.07286253163621, -6.07286253163621, -5.99962629763621, -5.98755361733621, -5.99962629763621, -5.98755361733621, -6.41841244763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -6.43659129763621, -6.43659129763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -5.99962629763621, -6.22001749763621, -5.99962629763621]
								}, {
									"case":	2,
									"scores":	[-4.49790151763621]
								}, {
									"case":	3,
									"scores":	[-4.49790151763621]
								}, {
									"case":	4,
									"scores":	[-4.49790151763621]
								}, {
									"case":	5,
									"scores":	[-4.49790151763621]
								}, {
									"case":	6,
									"scores":	[-4.49790151763621]
								}, {
									"case":	7,
									"scores":	[-4.49790151763621]
								}, {
									"case":	8,
									"scores":	[-4.49790151763621]
								}, {
									"case":	9,
									"scores":	[-4.49790151763621]
								}, {
									"case":	10,
									"scores":	[-4.49790151763621]
								}, {
									"case":	11,
									"scores":	[-4.49790151763621]
								}, {
									"case":	12,
									"scores":	[-4.49790151763621]
								}, {
									"case":	13,
									"scores":	[-4.49790151763621]
								}, {
									"case":	14,
									"scores":	[-4.49790151763621]
								}, {
									"case":	15,
									"scores":	[-4.49790151763621]
								}, {
									"case":	16,
									"scores":	[-4.49790151763621]
								}, {
									"case":	17,
									"scores":	[-4.49790151763621]
								}, {
									"case":	18,
									"scores":	[-4.49790151763621]
								}, {
									"case":	19,
									"scores":	[-4.49790151763621]
								}, {
									"case":	20,
									"scores":	[-4.49790151763621]
								}, {
									"case":	21,
									"scores":	[-4.49790151763621]
								}, {
									"case":	22,
									"scores":	[-4.49790151763621]
								}, {
									"case":	23,
									"scores":	[-4.49790151763621]
								}, {
									"case":	24,
									"scores":	[-4.49790151763621]
								}, {
									"case":	25,
									"scores":	[-4.49790151763621]
								}, {
									"case":	26,
									"scores":	[-4.49790151763621]
								}, {
									"case":	27,
									"scores":	[-4.49790151763621]
								}, {
									"case":	28,
									"scores":	[-4.49790151763621]
								}, {
									"case":	29,
									"scores":	[-4.49790151763621]
								}, {
									"case":	30,
									"scores":	[-4.49790151763621]
								}, {
									"case":	31,
									"scores":	[-4.49790151763621]
								}, {
									"case":	32,
									"scores":	[-4.49790151763621]
								}, {
									"case":	33,
									"scores":	[-4.49790151763621]
								}, {
									"case":	34,
									"scores":	[-4.49790151763621]
								}, {
									"case":	35,
									"scores":	[-4.49790151763621]
								}, {
									"case":	36,
									"scores":	[-4.49790151763621]
								}, {
									"case":	37,
									"scores":	[-4.49790151763621]
								}, {
									"case":	38,
									"scores":	[-4.49790151763621]
								}, {
									"case":	39,
									"scores":	[-4.49790151763621]
								}, {
									"case":	40,
									"scores":	[-4.49790151763621]
								}, {
									"case":	41,
									"scores":	[-4.49790151763621]
								}, {
									"case":	42,
									"scores":	[-4.49790151763621]
								}, {
									"case":	43,
									"scores":	[-4.49790151763621]
								}, {
									"case":	44,
									"scores":	[-4.49790151763621]
								}, {
									"case":	45,
									"scores":	[-4.49790151763621]
								}, {
									"case":	46,
									"scores":	[-4.49790151763621]
								}, {
									"case":	47,
									"scores":	[-4.49790151763621]
								}, {
									"case":	48,
									"scores":	[-4.49790151763621]
								}, {
									"case":	49,
									"scores":	[-4.49790151763621]
								}, {
									"case":	50,
									"scores":	[-4.49790151763621]
								}, {
									"case":	51,
									"scores":	[-4.49790151763621]
								}, {
									"case":	52,
									"scores":	[-4.49790151763621]
								}, {
									"case":	53,
									"scores":	[-4.49790151763621]
								}, {
									"case":	54,
									"scores":	[-4.49790151763621]
								}, {
									"case":	55,
									"scores":	[-4.49790151763621]
								}, {
									"case":	56,
									"scores":	[-4.49790151763621]
								}, {
									"case":	57,
									"scores":	[-4.49790151763621]
								}, {
									"case":	58,
									"scores":	[-4.49790151763621]
								}, {
									"case":	59,
									"scores":	[-4.49790151763621]
								}, {
									"case":	60,
									"scores":	[-4.49790151763621]
								}, {
									"case":	61,
									"scores":	[-4.49790151763621]
								}, {
									"case":	62,
									"scores":	[-4.49790151763621]
								}, {
									"case":	63,
									"scores":	[-4.49790151763621]
								}, {
									"case":	64,
									"scores":	[-4.49790151763621]
								}, {
									"case":	65,
									"scores":	[-4.49790151763621]
								}, {
									"case":	66,
									"scores":	[-4.49790151763621]
								}, {
									"case":	67,
									"scores":	[-4.49790151763621]
								}, {
									"case":	68,
									"scores":	[-4.49790151763621]
								}, {
									"case":	69,
									"scores":	[-4.49790151763621]
								}, {
									"case":	70,
									"scores":	[-4.49790151763621]
								}, {
									"case":	71,
									"scores":	[-4.49790151763621]
								}, {
									"case":	72,
									"scores":	[-4.49790151763621]
								}, {
									"case":	73,
									"scores":	[-4.49790151763621]
								}, {
									"case":	74,
									"scores":	[-4.49790151763621]
								}, {
									"case":	75,
									"scores":	[-4.49790151763621]
								}, {
									"case":	76,
									"scores":	[-4.49790151763621]
								}, {
									"case":	77,
									"scores":	[-4.49790151763621]
								}, {
									"case":	78,
									"scores":	[-4.49790151763621]
								}, {
									"case":	79,
									"scores":	[-4.49790151763621]
								}, {
									"case":	80,
									"scores":	[-4.49790151763621]
								}, {
									"case":	81,
									"scores":	[-4.49790151763621]
								}, {
									"case":	82,
									"scores":	[-4.49790151763621]
								}, {
									"case":	83,
									"scores":	[-4.49790151763621]
								}, {
									"case":	84,
									"scores":	[-4.49790151763621]
								}, {
									"case":	85,
									"scores":	[-4.49790151763621]
								}, {
									"case":	86,
									"scores":	[-4.49790151763621]
								}, {
									"case":	87,
									"scores":	[-4.49790151763621]
								}, {
									"case":	88,
									"scores":	[-4.49790151763621]
								}, {
									"case":	89,
									"scores":	[-4.49790151763621]
								}, {
									"case":	90,
									"scores":	[-4.49790151763621]
								}, {
									"case":	91,
									"scores":	[-4.49790151763621]
								}, {
									"case":	92,
									"scores":	[-4.49790151763621]
								}, {
									"case":	93,
									"scores":	[-4.49790151763621]
								}, {
									"case":	94,
									"scores":	[-4.49790151763621]
								}, {
									"case":	95,
									"scores":	[-4.49790151763621]
								}, {
									"case":	96,
									"scores":	[-4.49790151763621]
								}, {
									"case":	97,
									"scores":	[-4.49790151763621]
								}, {
									"case":	98,
									"scores":	[-4.49790151763621]
								}, {
									"case":	99,
									"scores":	[-4.49790151763621]
								}, {
									"case":	100,
									"scores":	[-4.49790151763621]
								}, {
									"case":	101,
									"scores":	[-4.49790151763621]
								}, {
									"case":	102,
									"scores":	[-4.49790151763621]
								}, {
									"case":	103,
									"scores":	[-4.49790151763621]
								}, {
									"case":	104,
									"scores":	[-4.49790151763621]
								}, {
									"case":	105,
									"scores":	[-4.49790151763621]
								}, {
									"case":	106,
									"scores":	[-4.49790151763621]
								}, {
									"case":	107,
									"scores":	[-4.49790151763621]
								}, {
									"case":	108,
									"scores":	[-4.49790151763621]
								}, {
									"case":	109,
									"scores":	[-4.49790151763621]
								}, {
									"case":	110,
									"scores":	[-4.49790151763621]
								}, {
									"case":	111,
									"scores":	[-4.49790151763621]
								}, {
									"case":	112,
									"scores":	[-4.49790151763621]
								}, {
									"case":	113,
									"scores":	[-4.49790151763621]
								}, {
									"case":	114,
									"scores":	[-4.49790151763621]
								}, {
									"case":	115,
									"scores":	[-4.49790151763621]
								}, {
									"case":	116,
									"scores":	[-4.49790151763621]
								}, {
									"case":	117,
									"scores":	[-4.49790151763621]
								}, {
									"case":	118,
									"scores":	[-4.49790151763621]
								}, {
									"case":	119,
									"scores":	[-4.49790151763621]
								}, {
									"case":	120,
									"scores":	[-4.49790151763621]
								}, {
									"case":	121,
									"scores":	[-4.49790151763621]
								}, {
									"case":	122,
									"scores":	[-4.49790151763621]
								}, {
									"case":	123,
									"scores":	[-4.49790151763621]
								}, {
									"case":	124,
									"scores":	[-4.49790151763621]
								}, {
									"case":	125,
									"scores":	[-4.49790151763621]
								}, {
									"case":	126,
									"scores":	[-4.49790151763621]
								}, {
									"case":	127,
									"scores":	[-4.49790151763621]
								}, {
									"case":	128,
									"scores":	[-4.49790151763621]
								}, {
									"case":	129,
									"scores":	[-4.49790151763621]
								}, {
									"case":	130,
									"scores":	[-4.49790151763621]
								}, {
									"case":	131,
									"scores":	[-4.49790151763621]
								}, {
									"case":	132,
									"scores":	[-4.49790151763621]
								}, {
									"case":	133,
									"scores":	[-4.49790151763621]
								}, {
									"case":	134,
									"scores":	[-4.49790151763621]
								}, {
									"case":	135,
									"scores":	[-4.49790151763621]
								}, {
									"case":	136,
									"scores":	[-4.49790151763621]
								}, {
									"case":	137,
									"scores":	[-4.49790151763621]
								}, {
									"case":	138,
									"scores":	[-4.49790151763621]
								}, {
									"case":	139,
									"scores":	[-4.49790151763621]
								}, {
									"case":	140,
									"scores":	[-4.49790151763621]
								}, {
									"case":	141,
									"scores":	[-4.49790151763621]
								}, {
									"case":	142,
									"scores":	[-4.49790151763621]
								}, {
									"case":	143,
									"scores":	[-4.49790151763621]
								}, {
									"case":	144,
									"scores":	[-4.49790151763621]
								}, {
									"case":	145,
									"scores":	[-4.49790151763621]
								}, {
									"case":	146,
									"scores":	[-4.49790151763621]
								}, {
									"case":	147,
									"scores":	[-4.49790151763621]
								}, {
									"case":	148,
									"scores":	[-4.49790151763621]
								}, {
									"case":	149,
									"scores":	[-4.49790151763621]
								}, {
									"case":	150,
									"scores":	[-4.49790151763621]
								}, {
									"case":	151,
									"scores":	[-4.49790151763621]
								}, {
									"case":	152,
									"scores":	[-4.49790151763621]
								}, {
									"case":	153,
									"scores":	[-4.49790151763621]
								}, {
									"case":	154,
									"scores":	[-4.49790151763621]
								}, {
									"case":	155,
									"scores":	[-4.49790151763621]
								}, {
									"case":	156,
									"scores":	[-4.49790151763621]
								}, {
									"case":	157,
									"scores":	[-4.49790151763621]
								}, {
									"case":	158,
									"scores":	[-4.49790151763621]
								}, {
									"case":	159,
									"scores":	[-4.49790151763621]
								}, {
									"case":	160,
									"scores":	[-4.49790151763621]
								}, {
									"case":	161,
									"scores":	[-4.49790151763621]
								}, {
									"case":	162,
									"scores":	[-4.49790151763621]
								}, {
									"case":	163,
									"scores":	[-4.49790151763621]
								}, {
									"case":	164,
									"scores":	[-4.49790151763621]
								}, {
									"case":	165,
									"scores":	[-4.49790151763621]
								}, {
									"case":	166,
									"scores":	[-4.49790151763621]
								}, {
									"case":	167,
									"scores":	[-4.49790151763621]
								}, {
									"case":	168,
									"scores":	[-4.49790151763621]
								}, {
									"case":	169,
									"scores":	[-4.49790151763621]
								}, {
									"case":	170,
									"scores":	[-4.49790151763621]
								}, {
									"case":	171,
									"scores":	[-4.49790151763621]
								}, {
									"case":	172,
									"scores":	[-4.49790151763621]
								}, {
									"case":	173,
									"scores":	[-4.49790151763621]
								}, {
									"case":	174,
									"scores":	[-4.49790151763621]
								}, {
									"case":	175,
									"scores":	[-4.49790151763621]
								}, {
									"case":	176,
									"scores":	[-4.49790151763621]
								}, {
									"case":	177,
									"scores":	[-4.49790151763621]
								}, {
									"case":	178,
									"scores":	[-4.49790151763621]
								}, {
									"case":	179,
									"scores":	[-4.49790151763621]
								}, {
									"case":	180,
									"scores":	[-4.49790151763621]
								}, {
									"case":	181,
									"scores":	[-4.49790151763621]
								}, {
									"case":	182,
									"scores":	[-4.49790151763621]
								}, {
									"case":	183,
									"scores":	[-4.49790151763621]
								}, {
									"case":	184,
									"scores":	[-4.49790151763621]
								}, {
									"case":	185,
									"scores":	[-4.49790151763621]
								}, {
									"case":	186,
									"scores":	[-4.49790151763621]
								}, {
									"case":	187,
									"scores":	[-4.49790151763621]
								}, {
									"case":	188,
									"scores":	[-4.49790151763621]
								}, {
									"case":	189,
									"scores":	[-4.49790151763621]
								}, {
									"case":	190,
									"scores":	[-4.49790151763621]
								}, {
									"case":	191,
									"scores":	[-4.49790151763621]
								}, {
									"case":	192,
									"scores":	[-4.49790151763621]
								}, {
									"case":	193,
									"scores":	[-4.49790151763621]
								}, {
									"case":	194,
									"scores":	[-4.49790151763621]
								}, {
									"case":	195,
									"scores":	[-4.49790151763621]
								}, {
									"case":	196,
									"scores":	[-4.49790151763621]
								}, {
									"case":	197,
									"scores":	[-4.49790151763621]
								}, {
									"case":	198,
									"scores":	[-4.49790151763621]
								}, {
									"case":	199,
									"scores":	[-4.49790151763621]
								}, {
									"case":	200,
									"scores":	[-4.49790151763621]
								}, {
									"case":	201,
									"scores":	[-4.49790151763621]
								}, {
									"case":	202,
									"scores":	[-4.49790151763621]
								}, {
									"case":	203,
									"scores":	[-4.49790151763621]
								}, {
									"case":	204,
									"scores":	[-4.49790151763621]
								}, {
									"case":	205,
									"scores":	[-4.49790151763621]
								}, {
									"case":	206,
									"scores":	[-4.49790151763621]
								}, {
									"case":	207,
									"scores":	[-4.49790151763621]
								}, {
									"case":	208,
									"scores":	[-4.49790151763621]
								}, {
									"case":	209,
									"scores":	[-4.49790151763621]
								}, {
									"case":	210,
									"scores":	[-4.49790151763621]
								}, {
									"case":	211,
									"scores":	[-4.49790151763621]
								}, {
									"case":	212,
									"scores":	[-4.49790151763621]
								}, {
									"case":	213,
									"scores":	[-4.49790151763621]
								}, {
									"case":	214,
									"scores":	[-4.49790151763621]
								}, {
									"case":	215,
									"scores":	[-4.49790151763621]
								}, {
									"case":	216,
									"scores":	[-4.49790151763621]
								}, {
									"case":	217,
									"scores":	[-4.49790151763621]
								}, {
									"case":	218,
									"scores":	[-4.49790151763621]
								}, {
									"case":	219,
									"scores":	[-4.49790151763621]
								}, {
									"case":	220,
									"scores":	[-4.49790151763621]
								}, {
									"case":	221,
									"scores":	[-4.49790151763621]
								}, {
									"case":	222,
									"scores":	[-4.49790151763621]
								}, {
									"case":	223,
									"scores":	[-4.49790151763621]
								}, {
									"case":	224,
									"scores":	[-4.49790151763621]
								}, {
									"case":	225,
									"scores":	[-4.49790151763621]
								}, {
									"case":	226,
									"scores":	[-4.49790151763621]
								}, {
									"case":	227,
									"scores":	[-4.49790151763621]
								}, {
									"case":	228,
									"scores":	[-4.49790151763621]
								}, {
									"case":	229,
									"scores":	[-4.49790151763621]
								}, {
									"case":	230,
									"scores":	[-4.49790151763621]
								}, {
									"case":	231,
									"scores":	[-4.49790151763621]
								}, {
									"case":	232,
									"scores":	[-4.49790151763621]
								}, {
									"case":	233,
									"scores":	[-4.49790151763621]
								}, {
									"case":	234,
									"scores":	[-4.49790151763621]
								}, {
									"case":	235,
									"scores":	[-4.49790151763621]
								}, {
									"case":	236,
									"scores":	[-4.49790151763621]
								}, {
									"case":	237,
									"scores":	[-4.49790151763621]
								}, {
									"case":	238,
									"scores":	[-4.49790151763621]
								}, {
									"case":	239,
									"scores":	[-4.49790151763621]
								}, {
									"case":	240,
									"scores":	[-4.49790151763621]
								}, {
									"case":	241,
									"scores":	[-4.49790151763621]
								}, {
									"case":	242,
									"scores":	[-4.49790151763621]
								}, {
									"case":	243,
									"scores":	[-4.49790151763621]
								}, {
									"case":	244,
									"scores":	[-4.49790151763621]
								}, {
									"case":	245,
									"scores":	[-4.49790151763621]
								}, {
									"case":	246,
									"scores":	[-4.49790151763621]
								}, {
									"case":	247,
									"scores":	[-4.49790151763621]
								}, {
									"case":	248,
									"scores":	[-4.49790151763621]
								}, {
									"case":	249,
									"scores":	[-4.49790151763621]
								}, {
									"case":	250,
									"scores":	[-4.49790151763621]
								}, {
									"case":	251,
									"scores":	[-4.49790151763621]
								}, {
									"case":	252,
									"scores":	[-4.49790151763621]
								}, {
									"case":	253,
									"scores":	[-4.49790151763621]
								}, {
									"case":	254,
									"scores":	[-4.49790151763621]
								}, {
									"case":	255,
									"scores":	[-4.49790151763621]
								}, {
									"case":	256,
									"scores":	[-4.49790151763621]
								}, {
									"case":	257,
									"scores":	[-4.49790151763621]
								}, {
									"case":	258,
									"scores":	[-4.49790151763621]
								}, {
									"case":	259,
									"scores":	[-4.49790151763621]
								}, {
									"case":	260,
									"scores":	[-4.49790151763621]
								}, {
									"case":	261,
									"scores":	[-4.49790151763621]
								}, {
									"case":	262,
									"scores":	[-4.49790151763621]
								}, {
									"case":	263,
									"scores":	[-4.49790151763621]
								}, {
									"case":	264,
									"scores":	[-4.49790151763621]
								}, {
									"case":	265,
									"scores":	[-4.49790151763621]
								}, {
									"case":	266,
									"scores":	[-4.49790151763621]
								}, {
									"case":	267,
									"scores":	[-4.49790151763621]
								}, {
									"case":	268,
									"scores":	[-4.49790151763621]
								}, {
									"case":	269,
									"scores":	[-4.49790151763621]
								}, {
									"case":	270,
									"scores":	[-4.49790151763621]
								}, {
									"case":	271,
									"scores":	[-4.49790151763621]
								}, {
									"case":	272,
									"scores":	[-4.49790151763621]
								}, {
									"case":	273,
									"scores":	[-4.49790151763621]
								}, {
									"case":	274,
									"scores":	[-4.49790151763621]
								}, {
									"case":	275,
									"scores":	[-4.49790151763621]
								}, {
									"case":	276,
									"scores":	[-4.49790151763621]
								}, {
									"case":	277,
									"scores":	[-4.49790151763621]
								}, {
									"case":	278,
									"scores":	[-4.49790151763621]
								}, {
									"case":	279,
									"scores":	[-4.49790151763621]
								}, {
									"case":	280,
									"scores":	[-4.49790151763621]
								}, {
									"case":	281,
									"scores":	[-4.49790151763621]
								}, {
									"case":	282,
									"scores":	[-4.49790151763621]
								}, {
									"case":	283,
									"scores":	[-4.49790151763621]
								}, {
									"case":	284,
									"scores":	[-4.49790151763621]
								}, {
									"case":	285,
									"scores":	[-4.49790151763621]
								}, {
									"case":	286,
									"scores":	[-4.49790151763621]
								}, {
									"case":	287,
									"scores":	[-4.49790151763621]
								}, {
									"case":	288,
									"scores":	[-4.49790151763621]
								}, {
									"case":	289,
									"scores":	[-4.49790151763621]
								}, {
									"case":	290,
									"scores":	[-4.49790151763621]
								}, {
									"case":	291,
									"scores":	[-4.49790151763621]
								}, {
									"case":	292,
									"scores":	[-4.49790151763621]
								}, {
									"case":	293,
									"scores":	[-4.49790151763621]
								}, {
									"case":	294,
									"scores":	[-4.49790151763621]
								}, {
									"case":	295,
									"scores":	[-4.49790151763621]
								}, {
									"case":	296,
									"scores":	[-4.49790151763621]
								}, {
									"case":	297,
									"scores":	[-4.49790151763621]
								}, {
									"case":	298,
									"scores":	[-4.49790151763621]
								}, {
									"case":	299,
									"scores":	[-4.49790151763621]
								}, {
									"case":	300,
									"scores":	[-4.49790151763621]
								}, {
									"case":	301,
									"scores":	[-4.49790151763621]
								}, {
									"case":	302,
									"scores":	[-4.49790151763621]
								}, {
									"case":	303,
									"scores":	[-4.49790151763621]
								}, {
									"case":	304,
									"scores":	[-4.49790151763621]
								}, {
									"case":	305,
									"scores":	[-4.49790151763621]
								}, {
									"case":	306,
									"scores":	[-4.49790151763621]
								}, {
									"case":	307,
									"scores":	[-4.49790151763621]
								}, {
									"case":	308,
									"scores":	[-4.49790151763621]
								}, {
									"case":	309,
									"scores":	[-4.49790151763621]
								}, {
									"case":	310,
									"scores":	[-4.49790151763621]
								}, {
									"case":	311,
									"scores":	[-4.49790151763621]
								}, {
									"case":	312,
									"scores":	[-4.49790151763621]
								}, {
									"case":	313,
									"scores":	[-4.49790151763621]
								}, {
									"case":	314,
									"scores":	[-4.49790151763621]
								}, {
									"case":	315,
									"scores":	[-4.49790151763621]
								}, {
									"case":	316,
									"scores":	[-4.49790151763621]
								}, {
									"case":	317,
									"scores":	[-4.49790151763621]
								}, {
									"case":	318,
									"scores":	[-4.49790151763621]
								}, {
									"case":	319,
									"scores":	[-4.49790151763621]
								}, {
									"case":	320,
									"scores":	[-4.49790151763621]
								}, {
									"case":	321,
									"scores":	[-4.49790151763621]
								}, {
									"case":	322,
									"scores":	[-4.49790151763621]
								}, {
									"case":	323,
									"scores":	[-4.49790151763621]
								}, {
									"case":	324,
									"scores":	[-4.49790151763621]
								}, {
									"case":	325,
									"scores":	[-4.49790151763621]
								}, {
									"case":	326,
									"scores":	[-4.49790151763621]
								}, {
									"case":	327,
									"scores":	[-4.49790151763621]
								}, {
									"case":	328,
									"scores":	[-4.49790151763621]
								}, {
									"case":	329,
									"scores":	[-4.49790151763621]
								}, {
									"case":	330,
									"scores":	[-4.49790151763621]
								}, {
									"case":	331,
									"scores":	[-4.49790151763621]
								}, {
									"case":	332,
									"scores":	[-4.49790151763621]
								}, {
									"case":	333,
									"scores":	[-4.49790151763621]
								}, {
									"case":	334,
									"scores":	[-4.49790151763621]
								}, {
									"case":	335,
									"scores":	[-4.49790151763621]
								}, {
									"case":	336,
									"scores":	[-4.49790151763621]
								}, {
									"case":	337,
									"scores":	[-4.49790151763621]
								}, {
									"case":	338,
									"scores":	[-4.49790151763621]
								}, {
									"case":	339,
									"scores":	[-4.49790151763621]
								}, {
									"case":	340,
									"scores":	[-4.49790151763621]
								}, {
									"case":	341,
									"scores":	[-4.49790151763621]
								}, {
									"case":	342,
									"scores":	[-4.49790151763621]
								}, {
									"case":	343,
									"scores":	[-4.49790151763621]
								}, {
									"case":	344,
									"scores":	[-4.49790151763621]
								}, {
									"case":	345,
									"scores":	[-4.49790151763621]
								}, {
									"case":	346,
									"scores":	[-4.49790151763621]
								}, {
									"case":	347,
									"scores":	[-4.49790151763621]
								}, {
									"case":	348,
									"scores":	[-4.49790151763621]
								}, {
									"case":	349,
									"scores":	[-4.49790151763621]
								}, {
									"case":	350,
									"scores":	[-4.49790151763621]
								}, {
									"case":	351,
									"scores":	[-4.49790151763621]
								}, {
									"case":	352,
									"scores":	[-4.49790151763621]
								}, {
									"case":	353,
									"scores":	[-4.49790151763621]
								}, {
									"case":	354,
									"scores":	[-4.49790151763621]
								}, {
									"case":	355,
									"scores":	[-4.49790151763621]
								}, {
									"case":	356,
									"scores":	[-4.49790151763621]
								}, {
									"case":	357,
									"scores":	[-4.49790151763621]
								}, {
									"case":	358,
									"scores":	[-4.49790151763621]
								}, {
									"case":	359,
									"scores":	[-4.49790151763621]
								}, {
									"case":	360,
									"scores":	[-4.49790151763621]
								}, {
									"case":	361,
									"scores":	[-4.49790151763621]
								}, {
									"case":	362,
									"scores":	[-4.49790151763621]
								}, {
									"case":	363,
									"scores":	[-4.49790151763621]
								}, {
									"case":	364,
									"scores":	[-4.49790151763621]
								}, {
									"case":	365,
									"scores":	[-4.49790151763621]
								}, {
									"case":	366,
									"scores":	[-4.49790151763621]
								}, {
									"case":	367,
									"scores":	[-4.49790151763621]
								}, {
									"case":	368,
									"scores":	[-4.49790151763621]
								}, {
									"case":	369,
									"scores":	[-4.49790151763621]
								}, {
									"case":	370,
									"scores":	[-4.49790151763621]
								}, {
									"case":	371,
									"scores":	[-4.49790151763621]
								}, {
									"case":	372,
									"scores":	[-4.49790151763621]
								}, {
									"case":	373,
									"scores":	[-4.49790151763621]
								}, {
									"case":	374,
									"scores":	[-4.49790151763621]
								}, {
									"case":	375,
									"scores":	[-4.49790151763621]
								}, {
									"case":	376,
									"scores":	[-4.49790151763621]
								}, {
									"case":	377,
									"scores":	[-4.49790151763621]
								}, {
									"case":	378,
									"scores":	[-4.49790151763621]
								}, {
									"case":	379,
									"scores":	[-4.49790151763621]
								}, {
									"case":	380,
									"scores":	[-4.49790151763621]
								}, {
									"case":	381,
									"scores":	[-4.49790151763621]
								}, {
									"case":	382,
									"scores":	[-4.49790151763621]
								}, {
									"case":	383,
									"scores":	[-4.49790151763621]
								}, {
									"case":	384,
									"scores":	[-4.49790151763621]
								}, {
									"case":	385,
									"scores":	[-4.49790151763621]
								}, {
									"case":	386,
									"scores":	[-4.49790151763621]
								}, {
									"case":	387,
									"scores":	[-4.49790151763621]
								}, {
									"case":	388,
									"scores":	[-4.49790151763621]
								}, {
									"case":	389,
									"scores":	[-4.49790151763621]
								}, {
									"case":	390,
									"scores":	[-4.49790151763621]
								}, {
									"case":	391,
									"scores":	[-4.49790151763621]
								}, {
									"case":	392,
									"scores":	[-4.49790151763621]
								}, {
									"case":	393,
									"scores":	[-4.49790151763621]
								}, {
									"case":	394,
									"scores":	[-4.49790151763621]
								}, {
									"case":	395,
									"scores":	[-4.49790151763621]
								}, {
									"case":	396,
									"scores":	[-4.49790151763621]
								}, {
									"case":	397,
									"scores":	[-4.49790151763621]
								}, {
									"case":	398,
									"scores":	[-4.49790151763621]
								}, {
									"case":	399,
									"scores":	[-4.49790151763621]
								}, {
									"case":	400,
									"scores":	[-4.49790151763621]
								}, {
									"case":	401,
									"scores":	[-4.49790151763621]
								}, {
									"case":	402,
									"scores":	[-4.49790151763621]
								}, {
									"case":	403,
									"scores":	[-4.49790151763621]
								}, {
									"case":	404,
									"scores":	[-4.49790151763621]
								}, {
									"case":	405,
									"scores":	[-4.49790151763621]
								}, {
									"case":	406,
									"scores":	[-4.49790151763621]
								}, {
									"case":	407,
									"scores":	[-4.49790151763621]
								}, {
									"case":	408,
									"scores":	[-4.49790151763621]
								}, {
									"case":	409,
									"scores":	[-4.49790151763621]
								}, {
									"case":	410,
									"scores":	[-4.49790151763621]
								}, {
									"case":	411,
									"scores":	[-4.49790151763621]
								}, {
									"case":	412,
									"scores":	[-4.49790151763621]
								}, {
									"case":	413,
									"scores":	[-4.49790151763621]
								}, {
									"case":	414,
									"scores":	[-4.49790151763621]
								}, {
									"case":	415,
									"scores":	[-4.49790151763621]
								}, {
									"case":	416,
									"scores":	[-4.49790151763621]
								}, {
									"case":	417,
									"scores":	[-4.49790151763621]
								}, {
									"case":	418,
									"scores":	[-4.49790151763621]
								}, {
									"case":	419,
									"scores":	[-4.49790151763621]
								}, {
									"case":	420,
									"scores":	[-4.49790151763621]
								}, {
									"case":	421,
									"scores":	[-4.49790151763621]
								}, {
									"case":	422,
									"scores":	[-4.49790151763621]
								}, {
									"case":	423,
									"scores":	[-4.49790151763621]
								}, {
									"case":	424,
									"scores":	[-4.49790151763621]
								}, {
									"case":	425,
									"scores":	[-4.49790151763621]
								}, {
									"case":	426,
									"scores":	[-4.49790151763621]
								}, {
									"case":	427,
									"scores":	[-4.49790151763621]
								}, {
									"case":	428,
									"scores":	[-4.49790151763621]
								}, {
									"case":	429,
									"scores":	[-4.49790151763621]
								}, {
									"case":	430,
									"scores":	[-4.49790151763621]
								}, {
									"case":	431,
									"scores":	[-4.49790151763621]
								}, {
									"case":	432,
									"scores":	[-4.49790151763621]
								}, {
									"case":	433,
									"scores":	[-4.49790151763621]
								}, {
									"case":	434,
									"scores":	[-4.49790151763621]
								}, {
									"case":	435,
									"scores":	[-4.49790151763621]
								}, {
									"case":	436,
									"scores":	[-4.49790151763621]
								}, {
									"case":	437,
									"scores":	[-4.49790151763621]
								}, {
									"case":	438,
									"scores":	[-4.49790151763621]
								}, {
									"case":	439,
									"scores":	[-4.49790151763621]
								}, {
									"case":	440,
									"scores":	[-4.49790151763621]
								}, {
									"case":	441,
									"scores":	[-4.49790151763621]
								}, {
									"case":	442,
									"scores":	[-4.49790151763621]
								}, {
									"case":	443,
									"scores":	[-4.49790151763621]
								}, {
									"case":	444,
									"scores":	[-4.49790151763621]
								}, {
									"case":	445,
									"scores":	[-4.49790151763621]
								}, {
									"case":	446,
									"scores":	[-4.49790151763621]
								}, {
									"case":	447,
									"scores":	[-4.49790151763621]
								}, {
									"case":	448,
									"scores":	[-4.49790151763621]
								}, {
									"case":	449,
									"scores":	[-4.49790151763621]
								}, {
									"case":	450,
									"scores":	[-4.49790151763621]
								}, {
									"case":	451,
									"scores":	[-4.49790151763621]
								}, {
									"case":	452,
									"scores":	[-4.49790151763621]
								}, {
									"case":	453,
									"scores":	[-4.49790151763621]
								}, {
									"case":	454,
									"scores":	[-4.49790151763621]
								}, {
									"case":	455,
									"scores":	[-4.49790151763621]
								}, {
									"case":	456,
									"scores":	[-4.49790151763621]
								}, {
									"case":	457,
									"scores":	[-4.49790151763621]
								}, {
									"case":	458,
									"scores":	[-4.49790151763621]
								}, {
									"case":	459,
									"scores":	[-4.49790151763621]
								}, {
									"case":	460,
									"scores":	[-4.49790151763621]
								}, {
									"case":	461,
									"scores":	[-4.49790151763621]
								}, {
									"case":	462,
									"scores":	[-4.49790151763621]
								}, {
									"case":	463,
									"scores":	[-4.49790151763621]
								}, {
									"case":	464,
									"scores":	[-4.49790151763621]
								}, {
									"case":	465,
									"scores":	[-4.49790151763621]
								}, {
									"case":	466,
									"scores":	[-4.49790151763621]
								}, {
									"case":	467,
									"scores":	[-4.49790151763621]
								}, {
									"case":	468,
									"scores":	[-4.49790151763621]
								}, {
									"case":	469,
									"scores":	[-4.49790151763621]
								}, {
									"case":	470,
									"scores":	[-4.49790151763621]
								}, {
									"case":	471,
									"scores":	[-4.49790151763621]
								}, {
									"case":	472,
									"scores":	[-4.49790151763621]
								}, {
									"case":	473,
									"scores":	[-4.49790151763621]
								}, {
									"case":	474,
									"scores":	[-4.49790151763621]
								}, {
									"case":	475,
									"scores":	[-4.49790151763621]
								}, {
									"case":	476,
									"scores":	[-4.49790151763621]
								}, {
									"case":	477,
									"scores":	[-4.49790151763621]
								}, {
									"case":	478,
									"scores":	[-4.49790151763621]
								}, {
									"case":	479,
									"scores":	[-4.49790151763621]
								}, {
									"case":	480,
									"scores":	[-4.49790151763621]
								}, {
									"case":	481,
									"scores":	[-4.49790151763621]
								}, {
									"case":	482,
									"scores":	[-4.49790151763621]
								}, {
									"case":	483,
									"scores":	[-4.49790151763621]
								}, {
									"case":	484,
									"scores":	[-4.49790151763621]
								}, {
									"case":	485,
									"scores":	[-4.49790151763621]
								}, {
									"case":	486,
									"scores":	[-4.49790151763621]
								}, {
									"case":	487,
									"scores":	[-4.49790151763621]
								}, {
									"case":	488,
									"scores":	[-4.49790151763621]
								}, {
									"case":	489,
									"scores":	[-4.49790151763621]
								}, {
									"case":	490,
									"scores":	[-4.49790151763621]
								}, {
									"case":	491,
									"scores":	[-4.49790151763621]
								}, {
									"case":	492,
									"scores":	[-4.49790151763621]
								}, {
									"case":	493,
									"scores":	[-4.49790151763621]
								}, {
									"case":	494,
									"scores":	[-4.49790151763621]
								}, {
									"case":	495,
									"scores":	[-4.49790151763621]
								}, {
									"case":	496,
									"scores":	[-4.49790151763621]
								}, {
									"case":	497,
									"scores":	[-4.49790151763621]
								}, {
									"case":	498,
									"scores":	[-4.49790151763621]
								}, {
									"case":	499,
									"scores":	[-4.49790151763621]
								}, {
									"case":	500,
									"scores":	[-4.49790151763621]
								}, {
									"case":	501,
									"scores":	[-4.49790151763621]
								}, {
									"case":	502,
									"scores":	[-4.49790151763621]
								}, {
									"case":	503,
									"scores":	[-4.49790151763621]
								}, {
									"case":	504,
									"scores":	[-4.49790151763621]
								}, {
									"case":	505,
									"scores":	[-4.49790151763621]
								}, {
									"case":	506,
									"scores":	[-4.49790151763621]
								}, {
									"case":	507,
									"scores":	[-4.49790151763621]
								}, {
									"case":	508,
									"scores":	[-4.49790151763621]
								}, {
									"case":	509,
									"scores":	[-4.49790151763621]
								}, {
									"case":	510,
									"scores":	[-4.49790151763621]
								}, {
									"case":	511,
									"scores":	[-4.49790151763621]
								}, {
									"case":	512,
									"scores":	[-4.49790151763621]
								}, {
									"case":	513,
									"scores":	[-4.49790151763621]
								}, {
									"case":	514,
									"scores":	[-4.49790151763621]
								}, {
									"case":	515,
									"scores":	[-4.49790151763621]
								}, {
									"case":	516,
									"scores":	[-4.49790151763621]
								}, {
									"case":	517,
									"scores":	[-4.49790151763621]
								}, {
									"case":	518,
									"scores":	[-4.49790151763621]
								}, {
									"case":	519,
									"scores":	[-4.49790151763621]
								}, {
									"case":	520,
									"scores":	[-4.49790151763621]
								}, {
									"case":	521,
									"scores":	[-4.49790151763621]
								}, {
									"case":	522,
									"scores":	[-4.49790151763621]
								}, {
									"case":	523,
									"scores":	[-4.49790151763621]
								}, {
									"case":	524,
									"scores":	[-4.49790151763621]
								}, {
									"case":	525,
									"scores":	[-4.49790151763621]
								}, {
									"case":	526,
									"scores":	[-4.49790151763621]
								}, {
									"case":	527,
									"scores":	[-4.49790151763621]
								}, {
									"case":	528,
									"scores":	[-4.49790151763621]
								}, {
									"case":	529,
									"scores":	[-4.49790151763621]
								}, {
									"case":	530,
									"scores":	[-4.49790151763621]
								}, {
									"case":	531,
									"scores":	[-4.49790151763621]
								}, {
									"case":	532,
									"scores":	[-4.49790151763621]
								}, {
									"case":	533,
									"scores":	[-4.49790151763621]
								}, {
									"case":	534,
									"scores":	[-4.49790151763621]
								}, {
									"case":	535,
									"scores":	[-4.49790151763621]
								}, {
									"case":	536,
									"scores":	[-4.49790151763621]
								}, {
									"case":	537,
									"scores":	[-4.49790151763621]
								}, {
									"case":	538,
									"scores":	[-4.49790151763621]
								}, {
									"case":	539,
									"scores":	[-4.49790151763621]
								}, {
									"case":	540,
									"scores":	[-4.49790151763621]
								}, {
									"case":	541,
									"scores":	[-4.49790151763621]
								}, {
									"case":	542,
									"scores":	[-4.49790151763621]
								}, {
									"case":	543,
									"scores":	[-4.49790151763621]
								}, {
									"case":	544,
									"scores":	[-4.49790151763621]
								}, {
									"case":	545,
									"scores":	[-4.49790151763621]
								}, {
									"case":	546,
									"scores":	[-4.49790151763621]
								}, {
									"case":	547,
									"scores":	[-4.49790151763621]
								}, {
									"case":	548,
									"scores":	[-4.49790151763621]
								}, {
									"case":	549,
									"scores":	[-4.49790151763621]
								}, {
									"case":	550,
									"scores":	[-4.49790151763621]
								}, {
									"case":	551,
									"scores":	[-4.49790151763621]
								}, {
									"case":	552,
									"scores":	[-4.49790151763621]
								}, {
									"case":	553,
									"scores":	[-4.49790151763621]
								}, {
									"case":	554,
									"scores":	[-4.49790151763621]
								}, {
									"case":	555,
									"scores":	[-4.49790151763621]
								}, {
									"case":	556,
									"scores":	[-4.49790151763621]
								}, {
									"case":	557,
									"scores":	[-4.49790151763621]
								}, {
									"case":	558,
									"scores":	[-4.49790151763621]
								}, {
									"case":	559,
									"scores":	[-4.49790151763621]
								}, {
									"case":	560,
									"scores":	[-4.49790151763621]
								}, {
									"case":	561,
									"scores":	[-4.49790151763621]
								}, {
									"case":	562,
									"scores":	[-4.49790151763621]
								}, {
									"case":	563,
									"scores":	[-4.49790151763621]
								}, {
									"case":	564,
									"scores":	[-4.49790151763621]
								}, {
									"case":	565,
									"scores":	[-4.49790151763621]
								}, {
									"case":	566,
									"scores":	[-4.49790151763621]
								}, {
									"case":	567,
									"scores":	[-4.49790151763621]
								}, {
									"case":	568,
									"scores":	[-4.49790151763621]
								}, {
									"case":	569,
									"scores":	[-4.49790151763621]
								}, {
									"case":	570,
									"scores":	[-4.49790151763621]
								}, {
									"case":	571,
									"scores":	[-4.49790151763621]
								}, {
									"case":	572,
									"scores":	[-4.49790151763621]
								}, {
									"case":	573,
									"scores":	[-4.49790151763621]
								}, {
									"case":	574,
									"scores":	[-4.49790151763621]
								}, {
									"case":	575,
									"scores":	[-4.49790151763621]
								}, {
									"case":	576,
									"scores":	[-4.49790151763621]
								}, {
									"case":	577,
									"scores":	[-4.49790151763621]
								}, {
									"case":	578,
									"scores":	[-4.49790151763621]
								}, {
									"case":	579,
									"scores":	[-4.49790151763621]
								}, {
									"case":	580,
									"scores":	[-4.49790151763621]
								}, {
									"case":	581,
									"scores":	[-4.49790151763621]
								}, {
									"case":	582,
									"scores":	[-4.49790151763621]
								}, {
									"case":	583,
									"scores":	[-4.49790151763621]
								}, {
									"case":	584,
									"scores":	[-4.49790151763621]
								}, {
									"case":	585,
									"scores":	[-4.49790151763621]
								}, {
									"case":	586,
									"scores":	[-4.49790151763621]
								}, {
									"case":	587,
									"scores":	[-4.49790151763621]
								}, {
									"case":	588,
									"scores":	[-4.49790151763621]
								}, {
									"case":	589,
									"scores":	[-4.49790151763621]
								}, {
									"case":	590,
									"scores":	[-4.49790151763621]
								}, {
									"case":	591,
									"scores":	[-4.49790151763621]
								}, {
									"case":	592,
									"scores":	[-4.49790151763621]
								}, {
									"case":	593,
									"scores":	[-4.49790151763621]
								}, {
									"case":	594,
									"scores":	[-4.49790151763621]
								}, {
									"case":	595,
									"scores":	[-4.49790151763621]
								}, {
									"case":	596,
									"scores":	[-4.49790151763621]
								}, {
									"case":	597,
									"scores":	[-4.49790151763621]
								}, {
									"case":	598,
									"scores":	[-4.49790151763621]
								}, {
									"case":	599,
									"scores":	[-4.49790151763621]
								}, {
									"case":	600,
									"scores":	[-4.49790151763621]
								}, {
									"case":	601,
									"scores":	[-4.49790151763621]
								}, {
									"case":	602,
									"scores":	[-4.49790151763621]
								}, {
									"case":	603,
									"scores":	[-4.49790151763621]
								}, {
									"case":	604,
									"scores":	[-4.49790151763621]
								}, {
									"case":	605,
									"scores":	[-4.49790151763621]
								}, {
									"case":	606,
									"scores":	[-4.49790151763621]
								}, {
									"case":	607,
									"scores":	[-4.49790151763621]
								}, {
									"case":	608,
									"scores":	[-4.49790151763621]
								}, {
									"case":	609,
									"scores":	[-4.49790151763621]
								}, {
									"case":	610,
									"scores":	[-4.49790151763621]
								}, {
									"case":	611,
									"scores":	[-4.49790151763621]
								}, {
									"case":	612,
									"scores":	[-4.49790151763621]
								}, {
									"case":	613,
									"scores":	[-4.49790151763621]
								}, {
									"case":	614,
									"scores":	[-4.49790151763621]
								}, {
									"case":	615,
									"scores":	[-4.49790151763621]
								}, {
									"case":	616,
									"scores":	[-4.49790151763621]
								}, {
									"case":	617,
									"scores":	[-4.49790151763621]
								}, {
									"case":	618,
									"scores":	[-4.49790151763621]
								}, {
									"case":	619,
									"scores":	[-4.49790151763621]
								}, {
									"case":	620,
									"scores":	[-4.49790151763621]
								}, {
									"case":	621,
									"scores":	[-4.49790151763621]
								}, {
									"case":	622,
									"scores":	[-4.49790151763621]
								}, {
									"case":	623,
									"scores":	[-4.49790151763621]
								}, {
									"case":	624,
									"scores":	[-4.49790151763621]
								}, {
									"case":	625,
									"scores":	[-4.49790151763621]
								}, {
									"case":	626,
									"scores":	[-4.49790151763621]
								}, {
									"case":	627,
									"scores":	[-4.49790151763621]
								}, {
									"case":	628,
									"scores":	[-4.49790151763621]
								}, {
									"case":	629,
									"scores":	[-4.49790151763621]
								}, {
									"case":	630,
									"scores":	[-4.49790151763621]
								}, {
									"case":	631,
									"scores":	[-4.49790151763621]
								}, {
									"case":	632,
									"scores":	[-4.49790151763621]
								}, {
									"case":	633,
									"scores":	[-4.49790151763621]
								}, {
									"case":	634,
									"scores":	[-4.49790151763621]
								}, {
									"case":	635,
									"scores":	[-4.49790151763621]
								}, {
									"case":	636,
									"scores":	[-4.49790151763621]
								}, {
									"case":	637,
									"scores":	[-4.49790151763621]
								}, {
									"case":	638,
									"scores":	[-4.49790151763621]
								}, {
									"case":	639,
									"scores":	[-4.49790151763621]
								}, {
									"case":	640,
									"scores":	[-4.49790151763621]
								}, {
									"case":	641,
									"scores":	[-4.49790151763621]
								}, {
									"case":	642,
									"scores":	[-4.49790151763621]
								}, {
									"case":	643,
									"scores":	[-4.49790151763621]
								}, {
									"case":	644,
									"scores":	[-4.49790151763621]
								}, {
									"case":	645,
									"scores":	[-4.49790151763621]
								}, {
									"case":	646,
									"scores":	[-4.49790151763621]
								}, {
									"case":	647,
									"scores":	[-4.49790151763621]
								}, {
									"case":	648,
									"scores":	[-4.49790151763621]
								}, {
									"case":	649,
									"scores":	[-4.49790151763621]
								}, {
									"case":	650,
									"scores":	[-4.49790151763621]
								}, {
									"case":	651,
									"scores":	[-4.49790151763621]
								}, {
									"case":	652,
									"scores":	[-4.49790151763621]
								}, {
									"case":	653,
									"scores":	[-4.49790151763621]
								}, {
									"case":	654,
									"scores":	[-4.49790151763621]
								}, {
									"case":	655,
									"scores":	[-4.49790151763621]
								}, {
									"case":	656,
									"scores":	[-4.49790151763621]
								}, {
									"case":	657,
									"scores":	[-4.49790151763621]
								}, {
									"case":	658,
									"scores":	[-4.49790151763621]
								}, {
									"case":	659,
									"scores":	[-4.49790151763621]
								}, {
									"case":	660,
									"scores":	[-4.49790151763621]
								}, {
									"case":	661,
									"scores":	[-4.49790151763621]
								}, {
									"case":	662,
									"scores":	[-4.49790151763621]
								}, {
									"case":	663,
									"scores":	[-4.49790151763621]
								}, {
									"case":	664,
									"scores":	[-4.49790151763621]
								}, {
									"case":	665,
									"scores":	[-4.49790151763621]
								}, {
									"case":	666,
									"scores":	[-4.49790151763621]
								}, {
									"case":	667,
									"scores":	[-4.49790151763621]
								}, {
									"case":	668,
									"scores":	[-4.49790151763621]
								}, {
									"case":	669,
									"scores":	[-4.49790151763621]
								}, {
									"case":	670,
									"scores":	[-4.49790151763621]
								}, {
									"case":	671,
									"scores":	[-4.49790151763621]
								}, {
									"case":	672,
									"scores":	[-4.49790151763621]
								}, {
									"case":	673,
									"scores":	[-4.49790151763621]
								}, {
									"case":	674,
									"scores":	[-4.49790151763621]
								}, {
									"case":	675,
									"scores":	[-4.49790151763621]
								}, {
									"case":	676,
									"scores":	[-4.49790151763621]
								}, {
									"case":	677,
									"scores":	[-4.49790151763621]
								}, {
									"case":	678,
									"scores":	[-4.49790151763621]
								}, {
									"case":	679,
									"scores":	[-4.49790151763621]
								}, {
									"case":	680,
									"scores":	[-4.49790151763621]
								}, {
									"case":	681,
									"scores":	[-4.49790151763621]
								}, {
									"case":	682,
									"scores":	[-4.49790151763621]
								}, {
									"case":	683,
									"scores":	[-4.49790151763621]
								}, {
									"case":	684,
									"scores":	[-4.49790151763621]
								}, {
									"case":	685,
									"scores":	[-4.49790151763621]
								}, {
									"case":	686,
									"scores":	[-4.49790151763621]
								}, {
									"case":	687,
									"scores":	[-4.49790151763621]
								}, {
									"case":	688,
									"scores":	[-4.49790151763621]
								}, {
									"case":	689,
									"scores":	[-4.49790151763621]
								}, {
									"case":	690,
									"scores":	[-4.49790151763621]
								}, {
									"case":	691,
									"scores":	[-4.49790151763621]
								}, {
									"case":	692,
									"scores":	[-4.49790151763621]
								}, {
									"case":	693,
									"scores":	[-4.49790151763621]
								}, {
									"case":	694,
									"scores":	[-4.49790151763621]
								}, {
									"case":	695,
									"scores":	[-4.49790151763621]
								}, {
									"case":	696,
									"scores":	[-4.49790151763621]
								}, {
									"case":	697,
									"scores":	[-4.49790151763621]
								}, {
									"case":	698,
									"scores":	[-4.49790151763621]
								}, {
									"case":	699,
									"scores":	[-4.49790151763621]
								}, {
									"case":	700,
									"scores":	[-4.49790151763621]
								}, {
									"case":	701,
									"scores":	[-4.49790151763621]
								}, {
									"case":	702,
									"scores":	[-4.49790151763621]
								}, {
									"case":	703,
									"scores":	[-4.49790151763621]
								}, {
									"case":	704,
									"scores":	[-4.49790151763621]
								}, {
									"case":	705,
									"scores":	[-4.49790151763621]
								}, {
									"case":	706,
									"scores":	[-4.49790151763621]
								}, {
									"case":	707,
									"scores":	[-4.49790151763621]
								}, {
									"case":	708,
									"scores":	[-4.49790151763621]
								}, {
									"case":	709,
									"scores":	[-4.49790151763621]
								}, {
									"case":	710,
									"scores":	[-4.49790151763621]
								}, {
									"case":	711,
									"scores":	[-4.49790151763621]
								}, {
									"case":	712,
									"scores":	[-4.49790151763621]
								}, {
									"case":	713,
									"scores":	[-4.49790151763621]
								}, {
									"case":	714,
									"scores":	[-4.49790151763621]
								}, {
									"case":	715,
									"scores":	[-4.49790151763621]
								}, {
									"case":	716,
									"scores":	[-4.49790151763621]
								}, {
									"case":	717,
									"scores":	[-4.49790151763621]
								}, {
									"case":	718,
									"scores":	[-4.49790151763621]
								}]
						}]
				}, {
					"line":	843,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [395, 396], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	844,
							"begin_column":	16,
							"end_line":	844,
							"end_column":	16,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if (__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	61,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	62,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	63,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	64,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	65,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	66,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	67,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	68,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	69,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	70,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	71,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	72,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	73,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	74,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	75,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	76,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	77,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	78,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	79,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	80,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	81,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	82,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	83,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	84,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	85,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	86,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	87,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	88,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	89,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	90,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	91,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	92,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	93,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	94,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	95,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	96,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	97,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	98,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	99,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	100,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	101,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	102,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	103,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	104,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	105,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	106,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	107,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	108,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	109,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	110,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	111,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	112,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	113,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	114,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	115,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	116,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	117,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	118,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	119,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	120,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	121,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	122,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	123,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	124,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	125,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	126,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	127,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	128,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	129,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	130,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	131,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	132,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	133,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	134,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	135,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	136,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	137,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	138,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	139,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	140,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	141,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	142,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	143,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	144,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	145,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	146,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	147,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	148,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	149,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	150,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	151,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	152,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	153,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	154,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	155,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	156,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	157,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	158,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	159,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	160,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	161,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	162,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	163,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	164,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	165,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	166,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	167,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	168,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	169,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	170,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	171,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	172,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	173,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	174,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	175,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	176,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	177,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	178,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	179,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	180,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	181,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	182,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	183,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	184,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	185,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	186,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	187,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	188,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	189,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	190,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	191,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	192,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	193,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	194,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	195,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	196,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	197,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	198,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	199,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	200,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	201,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	202,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	203,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	204,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	205,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	206,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	207,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	208,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	209,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	210,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	211,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	212,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	213,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	214,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	215,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	216,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	217,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	218,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	219,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	220,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	221,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	222,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	223,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	224,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	225,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	226,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	227,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	228,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	229,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	230,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	231,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	232,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	233,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	234,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	235,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	236,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	237,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	238,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	239,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	240,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	241,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	242,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	243,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	244,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	245,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	246,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	247,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	248,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	249,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	250,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	251,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	252,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	253,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	254,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	255,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	256,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	257,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	258,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	259,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	260,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	261,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	262,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	263,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	264,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	265,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	266,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	267,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	268,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	269,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	270,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	271,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	272,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	273,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	274,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	275,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	276,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	277,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	278,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	279,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	280,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	281,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	282,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	283,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	284,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	285,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	286,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	287,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	288,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	289,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	290,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	291,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	292,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	293,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	294,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	295,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	296,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	297,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	298,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	299,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	300,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	301,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	302,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	303,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	304,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	305,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	306,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	307,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	308,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	309,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	310,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	311,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	312,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	313,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	314,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	315,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	316,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	317,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	318,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	319,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	320,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	321,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	322,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	323,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	324,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	325,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	326,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	327,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	328,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	329,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	330,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	331,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	332,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	333,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	334,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	335,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	336,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	337,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	338,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	339,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	340,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	341,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	342,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	343,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	344,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	345,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	346,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	347,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	348,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	349,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	350,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	351,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	352,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	353,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	354,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	355,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	356,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	357,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	358,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	359,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	360,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	361,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	362,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	363,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	364,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	365,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	366,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	367,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	368,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	369,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	370,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	371,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	372,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	373,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	374,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	375,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	376,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	377,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	378,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	379,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	380,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	381,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	382,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	383,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	384,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	385,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	386,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	387,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	388,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	389,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	390,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	391,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	392,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	393,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	394,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	395,
									"scores":	[-5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.5569908467982234, -5.5569908467982234, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.2412990836982241, -5.4675681467982242]
								}, {
									"case":	396,
									"scores":	[-5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.5569908467982234, -5.5569908467982234, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.4675681467982242, -5.2412990836982241, -5.4675681467982242]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	844,
							"begin_column":	18,
							"end_line":	844,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -5.3069814376982238, -5.3069814376982238, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -4.870016437698224, -5.0904076376982239, -4.870016437698224]
								}]
						}]
				}, {
					"line":	843,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [395, 396], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	844,
							"begin_column":	0,
							"end_line":	844,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if (__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.013036542015743]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}, {
									"case":	46,
									"scores":	[-4.013036542015743]
								}, {
									"case":	47,
									"scores":	[-4.013036542015743]
								}, {
									"case":	48,
									"scores":	[-4.013036542015743]
								}, {
									"case":	49,
									"scores":	[-4.013036542015743]
								}, {
									"case":	50,
									"scores":	[-4.013036542015743]
								}, {
									"case":	51,
									"scores":	[-4.013036542015743]
								}, {
									"case":	52,
									"scores":	[-4.013036542015743]
								}, {
									"case":	53,
									"scores":	[-4.013036542015743]
								}, {
									"case":	54,
									"scores":	[-4.013036542015743]
								}, {
									"case":	55,
									"scores":	[-4.013036542015743]
								}, {
									"case":	56,
									"scores":	[-4.013036542015743]
								}, {
									"case":	57,
									"scores":	[-4.013036542015743]
								}, {
									"case":	58,
									"scores":	[-4.013036542015743]
								}, {
									"case":	59,
									"scores":	[-4.013036542015743]
								}, {
									"case":	60,
									"scores":	[-4.013036542015743]
								}, {
									"case":	61,
									"scores":	[-4.013036542015743]
								}, {
									"case":	62,
									"scores":	[-4.013036542015743]
								}, {
									"case":	63,
									"scores":	[-4.013036542015743]
								}, {
									"case":	64,
									"scores":	[-4.013036542015743]
								}, {
									"case":	65,
									"scores":	[-4.013036542015743]
								}, {
									"case":	66,
									"scores":	[-4.013036542015743]
								}, {
									"case":	67,
									"scores":	[-4.013036542015743]
								}, {
									"case":	68,
									"scores":	[-4.013036542015743]
								}, {
									"case":	69,
									"scores":	[-4.013036542015743]
								}, {
									"case":	70,
									"scores":	[-4.013036542015743]
								}, {
									"case":	71,
									"scores":	[-4.013036542015743]
								}, {
									"case":	72,
									"scores":	[-4.013036542015743]
								}, {
									"case":	73,
									"scores":	[-4.013036542015743]
								}, {
									"case":	74,
									"scores":	[-4.013036542015743]
								}, {
									"case":	75,
									"scores":	[-4.013036542015743]
								}, {
									"case":	76,
									"scores":	[-4.013036542015743]
								}, {
									"case":	77,
									"scores":	[-4.013036542015743]
								}, {
									"case":	78,
									"scores":	[-4.013036542015743]
								}, {
									"case":	79,
									"scores":	[-4.013036542015743]
								}, {
									"case":	80,
									"scores":	[-4.013036542015743]
								}, {
									"case":	81,
									"scores":	[-4.013036542015743]
								}, {
									"case":	82,
									"scores":	[-4.013036542015743]
								}, {
									"case":	83,
									"scores":	[-4.013036542015743]
								}, {
									"case":	84,
									"scores":	[-4.013036542015743]
								}, {
									"case":	85,
									"scores":	[-4.013036542015743]
								}, {
									"case":	86,
									"scores":	[-4.013036542015743]
								}, {
									"case":	87,
									"scores":	[-4.013036542015743]
								}, {
									"case":	88,
									"scores":	[-4.013036542015743]
								}, {
									"case":	89,
									"scores":	[-4.013036542015743]
								}, {
									"case":	90,
									"scores":	[-4.013036542015743]
								}, {
									"case":	91,
									"scores":	[-4.013036542015743]
								}, {
									"case":	92,
									"scores":	[-4.013036542015743]
								}, {
									"case":	93,
									"scores":	[-4.013036542015743]
								}, {
									"case":	94,
									"scores":	[-4.013036542015743]
								}, {
									"case":	95,
									"scores":	[-4.013036542015743]
								}, {
									"case":	96,
									"scores":	[-4.013036542015743]
								}, {
									"case":	97,
									"scores":	[-4.013036542015743]
								}, {
									"case":	98,
									"scores":	[-4.013036542015743]
								}, {
									"case":	99,
									"scores":	[-4.013036542015743]
								}, {
									"case":	100,
									"scores":	[-4.013036542015743]
								}, {
									"case":	101,
									"scores":	[-4.013036542015743]
								}, {
									"case":	102,
									"scores":	[-4.013036542015743]
								}, {
									"case":	103,
									"scores":	[-4.013036542015743]
								}, {
									"case":	104,
									"scores":	[-4.013036542015743]
								}, {
									"case":	105,
									"scores":	[-4.013036542015743]
								}, {
									"case":	106,
									"scores":	[-4.013036542015743]
								}, {
									"case":	107,
									"scores":	[-4.013036542015743]
								}, {
									"case":	108,
									"scores":	[-4.013036542015743]
								}, {
									"case":	109,
									"scores":	[-4.013036542015743]
								}, {
									"case":	110,
									"scores":	[-4.013036542015743]
								}, {
									"case":	111,
									"scores":	[-4.013036542015743]
								}, {
									"case":	112,
									"scores":	[-4.013036542015743]
								}, {
									"case":	113,
									"scores":	[-4.013036542015743]
								}, {
									"case":	114,
									"scores":	[-4.013036542015743]
								}, {
									"case":	115,
									"scores":	[-4.013036542015743]
								}, {
									"case":	116,
									"scores":	[-4.013036542015743]
								}, {
									"case":	117,
									"scores":	[-4.013036542015743]
								}, {
									"case":	118,
									"scores":	[-4.013036542015743]
								}, {
									"case":	119,
									"scores":	[-4.013036542015743]
								}, {
									"case":	120,
									"scores":	[-4.013036542015743]
								}, {
									"case":	121,
									"scores":	[-4.013036542015743]
								}, {
									"case":	122,
									"scores":	[-4.013036542015743]
								}, {
									"case":	123,
									"scores":	[-4.013036542015743]
								}, {
									"case":	124,
									"scores":	[-4.013036542015743]
								}, {
									"case":	125,
									"scores":	[-4.013036542015743]
								}, {
									"case":	126,
									"scores":	[-4.013036542015743]
								}, {
									"case":	127,
									"scores":	[-4.013036542015743]
								}, {
									"case":	128,
									"scores":	[-4.013036542015743]
								}, {
									"case":	129,
									"scores":	[-4.013036542015743]
								}, {
									"case":	130,
									"scores":	[-4.013036542015743]
								}, {
									"case":	131,
									"scores":	[-4.013036542015743]
								}, {
									"case":	132,
									"scores":	[-4.013036542015743]
								}, {
									"case":	133,
									"scores":	[-4.013036542015743]
								}, {
									"case":	134,
									"scores":	[-4.013036542015743]
								}, {
									"case":	135,
									"scores":	[-4.013036542015743]
								}, {
									"case":	136,
									"scores":	[-4.013036542015743]
								}, {
									"case":	137,
									"scores":	[-4.013036542015743]
								}, {
									"case":	138,
									"scores":	[-4.013036542015743]
								}, {
									"case":	139,
									"scores":	[-4.013036542015743]
								}, {
									"case":	140,
									"scores":	[-4.013036542015743]
								}, {
									"case":	141,
									"scores":	[-4.013036542015743]
								}, {
									"case":	142,
									"scores":	[-4.013036542015743]
								}, {
									"case":	143,
									"scores":	[-4.013036542015743]
								}, {
									"case":	144,
									"scores":	[-4.013036542015743]
								}, {
									"case":	145,
									"scores":	[-4.013036542015743]
								}, {
									"case":	146,
									"scores":	[-4.013036542015743]
								}, {
									"case":	147,
									"scores":	[-4.013036542015743]
								}, {
									"case":	148,
									"scores":	[-4.013036542015743]
								}, {
									"case":	149,
									"scores":	[-4.013036542015743]
								}, {
									"case":	150,
									"scores":	[-4.013036542015743]
								}, {
									"case":	151,
									"scores":	[-4.013036542015743]
								}, {
									"case":	152,
									"scores":	[-4.013036542015743]
								}, {
									"case":	153,
									"scores":	[-4.013036542015743]
								}, {
									"case":	154,
									"scores":	[-4.013036542015743]
								}, {
									"case":	155,
									"scores":	[-4.013036542015743]
								}, {
									"case":	156,
									"scores":	[-4.013036542015743]
								}, {
									"case":	157,
									"scores":	[-4.013036542015743]
								}, {
									"case":	158,
									"scores":	[-4.013036542015743]
								}, {
									"case":	159,
									"scores":	[-4.013036542015743]
								}, {
									"case":	160,
									"scores":	[-4.013036542015743]
								}, {
									"case":	161,
									"scores":	[-4.013036542015743]
								}, {
									"case":	162,
									"scores":	[-4.013036542015743]
								}, {
									"case":	163,
									"scores":	[-4.013036542015743]
								}, {
									"case":	164,
									"scores":	[-4.013036542015743]
								}, {
									"case":	165,
									"scores":	[-4.013036542015743]
								}, {
									"case":	166,
									"scores":	[-4.013036542015743]
								}, {
									"case":	167,
									"scores":	[-4.013036542015743]
								}, {
									"case":	168,
									"scores":	[-4.013036542015743]
								}, {
									"case":	169,
									"scores":	[-4.013036542015743]
								}, {
									"case":	170,
									"scores":	[-4.013036542015743]
								}, {
									"case":	171,
									"scores":	[-4.013036542015743]
								}, {
									"case":	172,
									"scores":	[-4.013036542015743]
								}, {
									"case":	173,
									"scores":	[-4.013036542015743]
								}, {
									"case":	174,
									"scores":	[-4.013036542015743]
								}, {
									"case":	175,
									"scores":	[-4.013036542015743]
								}, {
									"case":	176,
									"scores":	[-4.013036542015743]
								}, {
									"case":	177,
									"scores":	[-4.013036542015743]
								}, {
									"case":	178,
									"scores":	[-4.013036542015743]
								}, {
									"case":	179,
									"scores":	[-4.013036542015743]
								}, {
									"case":	180,
									"scores":	[-4.013036542015743]
								}, {
									"case":	181,
									"scores":	[-4.013036542015743]
								}, {
									"case":	182,
									"scores":	[-4.013036542015743]
								}, {
									"case":	183,
									"scores":	[-4.013036542015743]
								}, {
									"case":	184,
									"scores":	[-4.013036542015743]
								}, {
									"case":	185,
									"scores":	[-4.013036542015743]
								}, {
									"case":	186,
									"scores":	[-4.013036542015743]
								}, {
									"case":	187,
									"scores":	[-4.013036542015743]
								}, {
									"case":	188,
									"scores":	[-4.013036542015743]
								}, {
									"case":	189,
									"scores":	[-4.013036542015743]
								}, {
									"case":	190,
									"scores":	[-4.013036542015743]
								}, {
									"case":	191,
									"scores":	[-4.013036542015743]
								}, {
									"case":	192,
									"scores":	[-4.013036542015743]
								}, {
									"case":	193,
									"scores":	[-4.013036542015743]
								}, {
									"case":	194,
									"scores":	[-4.013036542015743]
								}, {
									"case":	195,
									"scores":	[-4.013036542015743]
								}, {
									"case":	196,
									"scores":	[-4.013036542015743]
								}, {
									"case":	197,
									"scores":	[-4.013036542015743]
								}, {
									"case":	198,
									"scores":	[-4.013036542015743]
								}, {
									"case":	199,
									"scores":	[-4.013036542015743]
								}, {
									"case":	200,
									"scores":	[-4.013036542015743]
								}, {
									"case":	201,
									"scores":	[-4.013036542015743]
								}, {
									"case":	202,
									"scores":	[-4.013036542015743]
								}, {
									"case":	203,
									"scores":	[-4.013036542015743]
								}, {
									"case":	204,
									"scores":	[-4.013036542015743]
								}, {
									"case":	205,
									"scores":	[-4.013036542015743]
								}, {
									"case":	206,
									"scores":	[-4.013036542015743]
								}, {
									"case":	207,
									"scores":	[-4.013036542015743]
								}, {
									"case":	208,
									"scores":	[-4.013036542015743]
								}, {
									"case":	209,
									"scores":	[-4.013036542015743]
								}, {
									"case":	210,
									"scores":	[-4.013036542015743]
								}, {
									"case":	211,
									"scores":	[-4.013036542015743]
								}, {
									"case":	212,
									"scores":	[-4.013036542015743]
								}, {
									"case":	213,
									"scores":	[-4.013036542015743]
								}, {
									"case":	214,
									"scores":	[-4.013036542015743]
								}, {
									"case":	215,
									"scores":	[-4.013036542015743]
								}, {
									"case":	216,
									"scores":	[-4.013036542015743]
								}, {
									"case":	217,
									"scores":	[-4.013036542015743]
								}, {
									"case":	218,
									"scores":	[-4.013036542015743]
								}, {
									"case":	219,
									"scores":	[-4.013036542015743]
								}, {
									"case":	220,
									"scores":	[-4.013036542015743]
								}, {
									"case":	221,
									"scores":	[-4.013036542015743]
								}, {
									"case":	222,
									"scores":	[-4.013036542015743]
								}, {
									"case":	223,
									"scores":	[-4.013036542015743]
								}, {
									"case":	224,
									"scores":	[-4.013036542015743]
								}, {
									"case":	225,
									"scores":	[-4.013036542015743]
								}, {
									"case":	226,
									"scores":	[-4.013036542015743]
								}, {
									"case":	227,
									"scores":	[-4.013036542015743]
								}, {
									"case":	228,
									"scores":	[-4.013036542015743]
								}, {
									"case":	229,
									"scores":	[-4.013036542015743]
								}, {
									"case":	230,
									"scores":	[-4.013036542015743]
								}, {
									"case":	231,
									"scores":	[-4.013036542015743]
								}, {
									"case":	232,
									"scores":	[-4.013036542015743]
								}, {
									"case":	233,
									"scores":	[-4.013036542015743]
								}, {
									"case":	234,
									"scores":	[-4.013036542015743]
								}, {
									"case":	235,
									"scores":	[-4.013036542015743]
								}, {
									"case":	236,
									"scores":	[-4.013036542015743]
								}, {
									"case":	237,
									"scores":	[-4.013036542015743]
								}, {
									"case":	238,
									"scores":	[-4.013036542015743]
								}, {
									"case":	239,
									"scores":	[-4.013036542015743]
								}, {
									"case":	240,
									"scores":	[-4.013036542015743]
								}, {
									"case":	241,
									"scores":	[-4.013036542015743]
								}, {
									"case":	242,
									"scores":	[-4.013036542015743]
								}, {
									"case":	243,
									"scores":	[-4.013036542015743]
								}, {
									"case":	244,
									"scores":	[-4.013036542015743]
								}, {
									"case":	245,
									"scores":	[-4.013036542015743]
								}, {
									"case":	246,
									"scores":	[-4.013036542015743]
								}, {
									"case":	247,
									"scores":	[-4.013036542015743]
								}, {
									"case":	248,
									"scores":	[-4.013036542015743]
								}, {
									"case":	249,
									"scores":	[-4.013036542015743]
								}, {
									"case":	250,
									"scores":	[-4.013036542015743]
								}, {
									"case":	251,
									"scores":	[-4.013036542015743]
								}, {
									"case":	252,
									"scores":	[-4.013036542015743]
								}, {
									"case":	253,
									"scores":	[-4.013036542015743]
								}, {
									"case":	254,
									"scores":	[-4.013036542015743]
								}, {
									"case":	255,
									"scores":	[-4.013036542015743]
								}, {
									"case":	256,
									"scores":	[-4.013036542015743]
								}, {
									"case":	257,
									"scores":	[-4.013036542015743]
								}, {
									"case":	258,
									"scores":	[-4.013036542015743]
								}, {
									"case":	259,
									"scores":	[-4.013036542015743]
								}, {
									"case":	260,
									"scores":	[-4.013036542015743]
								}, {
									"case":	261,
									"scores":	[-4.013036542015743]
								}, {
									"case":	262,
									"scores":	[-4.013036542015743]
								}, {
									"case":	263,
									"scores":	[-4.013036542015743]
								}, {
									"case":	264,
									"scores":	[-4.013036542015743]
								}, {
									"case":	265,
									"scores":	[-4.013036542015743]
								}, {
									"case":	266,
									"scores":	[-4.013036542015743]
								}, {
									"case":	267,
									"scores":	[-4.013036542015743]
								}, {
									"case":	268,
									"scores":	[-4.013036542015743]
								}, {
									"case":	269,
									"scores":	[-4.013036542015743]
								}, {
									"case":	270,
									"scores":	[-4.013036542015743]
								}, {
									"case":	271,
									"scores":	[-4.013036542015743]
								}, {
									"case":	272,
									"scores":	[-4.013036542015743]
								}, {
									"case":	273,
									"scores":	[-4.013036542015743]
								}, {
									"case":	274,
									"scores":	[-4.013036542015743]
								}, {
									"case":	275,
									"scores":	[-4.013036542015743]
								}, {
									"case":	276,
									"scores":	[-4.013036542015743]
								}, {
									"case":	277,
									"scores":	[-4.013036542015743]
								}, {
									"case":	278,
									"scores":	[-4.013036542015743]
								}, {
									"case":	279,
									"scores":	[-4.013036542015743]
								}, {
									"case":	280,
									"scores":	[-4.013036542015743]
								}, {
									"case":	281,
									"scores":	[-4.013036542015743]
								}, {
									"case":	282,
									"scores":	[-4.013036542015743]
								}, {
									"case":	283,
									"scores":	[-4.013036542015743]
								}, {
									"case":	284,
									"scores":	[-4.013036542015743]
								}, {
									"case":	285,
									"scores":	[-4.013036542015743]
								}, {
									"case":	286,
									"scores":	[-4.013036542015743]
								}, {
									"case":	287,
									"scores":	[-4.013036542015743]
								}, {
									"case":	288,
									"scores":	[-4.013036542015743]
								}, {
									"case":	289,
									"scores":	[-4.013036542015743]
								}, {
									"case":	290,
									"scores":	[-4.013036542015743]
								}, {
									"case":	291,
									"scores":	[-4.013036542015743]
								}, {
									"case":	292,
									"scores":	[-4.013036542015743]
								}, {
									"case":	293,
									"scores":	[-4.013036542015743]
								}, {
									"case":	294,
									"scores":	[-4.013036542015743]
								}, {
									"case":	295,
									"scores":	[-4.013036542015743]
								}, {
									"case":	296,
									"scores":	[-4.013036542015743]
								}, {
									"case":	297,
									"scores":	[-4.013036542015743]
								}, {
									"case":	298,
									"scores":	[-4.013036542015743]
								}, {
									"case":	299,
									"scores":	[-4.013036542015743]
								}, {
									"case":	300,
									"scores":	[-4.013036542015743]
								}, {
									"case":	301,
									"scores":	[-4.013036542015743]
								}, {
									"case":	302,
									"scores":	[-4.013036542015743]
								}, {
									"case":	303,
									"scores":	[-4.013036542015743]
								}, {
									"case":	304,
									"scores":	[-4.013036542015743]
								}, {
									"case":	305,
									"scores":	[-4.013036542015743]
								}, {
									"case":	306,
									"scores":	[-4.013036542015743]
								}, {
									"case":	307,
									"scores":	[-4.013036542015743]
								}, {
									"case":	308,
									"scores":	[-4.013036542015743]
								}, {
									"case":	309,
									"scores":	[-4.013036542015743]
								}, {
									"case":	310,
									"scores":	[-4.013036542015743]
								}, {
									"case":	311,
									"scores":	[-4.013036542015743]
								}, {
									"case":	312,
									"scores":	[-4.013036542015743]
								}, {
									"case":	313,
									"scores":	[-4.013036542015743]
								}, {
									"case":	314,
									"scores":	[-4.013036542015743]
								}, {
									"case":	315,
									"scores":	[-4.013036542015743]
								}, {
									"case":	316,
									"scores":	[-4.013036542015743]
								}, {
									"case":	317,
									"scores":	[-4.013036542015743]
								}, {
									"case":	318,
									"scores":	[-4.013036542015743]
								}, {
									"case":	319,
									"scores":	[-4.013036542015743]
								}, {
									"case":	320,
									"scores":	[-4.013036542015743]
								}, {
									"case":	321,
									"scores":	[-4.013036542015743]
								}, {
									"case":	322,
									"scores":	[-4.013036542015743]
								}, {
									"case":	323,
									"scores":	[-4.013036542015743]
								}, {
									"case":	324,
									"scores":	[-4.013036542015743]
								}, {
									"case":	325,
									"scores":	[-4.013036542015743]
								}, {
									"case":	326,
									"scores":	[-4.013036542015743]
								}, {
									"case":	327,
									"scores":	[-4.013036542015743]
								}, {
									"case":	328,
									"scores":	[-4.013036542015743]
								}, {
									"case":	329,
									"scores":	[-4.013036542015743]
								}, {
									"case":	330,
									"scores":	[-4.013036542015743]
								}, {
									"case":	331,
									"scores":	[-4.013036542015743]
								}, {
									"case":	332,
									"scores":	[-4.013036542015743]
								}, {
									"case":	333,
									"scores":	[-4.013036542015743]
								}, {
									"case":	334,
									"scores":	[-4.013036542015743]
								}, {
									"case":	335,
									"scores":	[-4.013036542015743]
								}, {
									"case":	336,
									"scores":	[-4.013036542015743]
								}, {
									"case":	337,
									"scores":	[-4.013036542015743]
								}, {
									"case":	338,
									"scores":	[-4.013036542015743]
								}, {
									"case":	339,
									"scores":	[-4.013036542015743]
								}, {
									"case":	340,
									"scores":	[-4.013036542015743]
								}, {
									"case":	341,
									"scores":	[-4.013036542015743]
								}, {
									"case":	342,
									"scores":	[-4.013036542015743]
								}, {
									"case":	343,
									"scores":	[-4.013036542015743]
								}, {
									"case":	344,
									"scores":	[-4.013036542015743]
								}, {
									"case":	345,
									"scores":	[-4.013036542015743]
								}, {
									"case":	346,
									"scores":	[-4.013036542015743]
								}, {
									"case":	347,
									"scores":	[-4.013036542015743]
								}, {
									"case":	348,
									"scores":	[-4.013036542015743]
								}, {
									"case":	349,
									"scores":	[-4.013036542015743]
								}, {
									"case":	350,
									"scores":	[-4.013036542015743]
								}, {
									"case":	351,
									"scores":	[-4.013036542015743]
								}, {
									"case":	352,
									"scores":	[-4.013036542015743]
								}, {
									"case":	353,
									"scores":	[-4.013036542015743]
								}, {
									"case":	354,
									"scores":	[-4.013036542015743]
								}, {
									"case":	355,
									"scores":	[-4.013036542015743]
								}, {
									"case":	356,
									"scores":	[-4.013036542015743]
								}, {
									"case":	357,
									"scores":	[-4.013036542015743]
								}, {
									"case":	358,
									"scores":	[-4.013036542015743]
								}, {
									"case":	359,
									"scores":	[-4.013036542015743]
								}, {
									"case":	360,
									"scores":	[-4.013036542015743]
								}, {
									"case":	361,
									"scores":	[-4.013036542015743]
								}, {
									"case":	362,
									"scores":	[-4.013036542015743]
								}, {
									"case":	363,
									"scores":	[-4.013036542015743]
								}, {
									"case":	364,
									"scores":	[-4.013036542015743]
								}, {
									"case":	365,
									"scores":	[-4.013036542015743]
								}, {
									"case":	366,
									"scores":	[-4.013036542015743]
								}, {
									"case":	367,
									"scores":	[-4.013036542015743]
								}, {
									"case":	368,
									"scores":	[-4.013036542015743]
								}, {
									"case":	369,
									"scores":	[-4.013036542015743]
								}, {
									"case":	370,
									"scores":	[-4.013036542015743]
								}, {
									"case":	371,
									"scores":	[-4.013036542015743]
								}, {
									"case":	372,
									"scores":	[-4.013036542015743]
								}, {
									"case":	373,
									"scores":	[-4.013036542015743]
								}, {
									"case":	374,
									"scores":	[-4.013036542015743]
								}, {
									"case":	375,
									"scores":	[-4.013036542015743]
								}, {
									"case":	376,
									"scores":	[-4.013036542015743]
								}, {
									"case":	377,
									"scores":	[-4.013036542015743]
								}, {
									"case":	378,
									"scores":	[-4.013036542015743]
								}, {
									"case":	379,
									"scores":	[-4.013036542015743]
								}, {
									"case":	380,
									"scores":	[-4.013036542015743]
								}, {
									"case":	381,
									"scores":	[-4.013036542015743]
								}, {
									"case":	382,
									"scores":	[-4.013036542015743]
								}, {
									"case":	383,
									"scores":	[-4.013036542015743]
								}, {
									"case":	384,
									"scores":	[-4.013036542015743]
								}, {
									"case":	385,
									"scores":	[-4.013036542015743]
								}, {
									"case":	386,
									"scores":	[-4.013036542015743]
								}, {
									"case":	387,
									"scores":	[-4.013036542015743]
								}, {
									"case":	388,
									"scores":	[-4.013036542015743]
								}, {
									"case":	389,
									"scores":	[-4.013036542015743]
								}, {
									"case":	390,
									"scores":	[-4.013036542015743]
								}, {
									"case":	391,
									"scores":	[-4.013036542015743]
								}, {
									"case":	392,
									"scores":	[-4.013036542015743]
								}, {
									"case":	393,
									"scores":	[-4.013036542015743]
								}, {
									"case":	394,
									"scores":	[-4.013036542015743]
								}, {
									"case":	395,
									"scores":	[-5.7039530551157434, -5.7039530551157434, -8.49112830991574, -7.899275114815743, -8.49112830991574, -7.899275114815743, -8.091613145115744, -8.091613145115744, -8.28217611481574, -8.28217611481574, -8.6468599451157431, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.1810358451157441, -8.1810358451157441, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -7.8653440820157439, -8.091613145115744]
								}, {
									"case":	396,
									"scores":	[-5.7039530551157434, -5.7039530551157434, -8.49112830991574, -7.899275114815743, -8.49112830991574, -7.899275114815743, -8.091613145115744, -8.091613145115744, -8.28217611481574, -8.28217611481574, -8.6468599451157431, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.1810358451157441, -8.1810358451157441, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -8.091613145115744, -7.8653440820157439, -8.091613145115744]
								}]
						}, {
							"switch":	5,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	844,
							"begin_column":	2,
							"end_line":	844,
							"end_column":	18,
							"patch_codes":	["if (__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if ((method < 0) || __is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if ((method < 0) && !__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.6133536524281462, -3.6133536524281462, -5.3133372124281459, -4.1043701251281455, -5.3133372124281459, -4.1043701251281455, -4.3318725054281462, -4.3318725054281462, -4.319799825128146, -4.319799825128146, -4.750658655428146, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.768837505428146, -4.768837505428146, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.5522637054281461, -4.3318725054281462]
								}, {
									"case":	2,
									"scores":	[-3.4631200694281459, -3.4631200694281459, -5.1631036294281456, -3.954136542128146, -5.1631036294281456, -3.954136542128146, -4.1816389224281458, -4.1816389224281458, -4.1695662421281465, -4.1695662421281465, -4.6004250724281457, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.6186039224281465, -4.6186039224281465, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.4020301224281457, -4.1816389224281458]
								}, {
									"case":	3,
									"scores":	[-3.4631200694281459, -3.4631200694281459, -5.1631036294281456, -3.954136542128146, -5.1631036294281456, -3.954136542128146, -4.1816389224281458, -4.1816389224281458, -4.1695662421281465, -4.1695662421281465, -4.6004250724281457, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.6186039224281465, -4.6186039224281465, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.1816389224281458, -4.4020301224281457, -4.1816389224281458]
								}]
						}, {
							"switch":	8,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	844,
							"begin_column":	2,
							"end_line":	844,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L844\", 37, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    if (method < 0)\n        break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9960089890157429, -4.9960089890157429, -6.6959925490157426, -5.487025461715743, -6.6959925490157426, -5.487025461715743, -5.7145278420157428, -5.7145278420157428, -5.7024551617157426, -5.7024551617157426, -6.1333139920157427, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -6.1514928420157426, -6.1514928420157426, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.7145278420157428, -5.9349190420157427, -5.7145278420157428]
								}]
						}]
				}, {
					"line":	852,
					"switches":	[]
				}, {
					"line":	853,
					"switches":	[]
				}, {
					"line":	855,
					"switches":	[{
							"switch":	11,
							"types":	[[], [], [], [], [426], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], [], [], [], [], [], []],
							"begin_line":	856,
							"begin_column":	0,
							"end_line":	856,
							"end_column":	0,
							"patch_codes":	["memset(&istat, 0, sizeof (*(&istat)))", "memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (unlink_errno)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (unlink_errno)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (unlink_errno)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (unlink_errno)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (unlink_errno)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (unlink_errno)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (unlink_errno)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (unlink_errno)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (unlink_errno)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (unlink_errno)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (unlink_errno)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (unlink_errno)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (unlink_errno)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (unlink_errno)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (unlink_errno)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location())", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L856\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(bytes_out), sizeof (bytes_out), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	28,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	29,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	30,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	31,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	32,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	33,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	34,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	35,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	36,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	37,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	38,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	39,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	40,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	41,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	42,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	43,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	44,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	45,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	46,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	47,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	48,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	49,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	50,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	51,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	52,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	53,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	54,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	55,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	56,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	57,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	58,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	59,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	60,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	61,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	62,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	63,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	64,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	65,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	66,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	67,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	68,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	69,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	70,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	71,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	72,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	73,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	74,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	75,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	76,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	77,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	78,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	79,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	80,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	81,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	82,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	83,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	84,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	85,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	86,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	87,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	88,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	89,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	90,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	91,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	92,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	93,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	94,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	95,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	96,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	97,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	98,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	99,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	100,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	101,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	102,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	103,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	104,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	105,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	106,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	107,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	108,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	109,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	110,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	111,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	112,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	113,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	114,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	115,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	116,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	117,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	118,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	119,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	120,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	121,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	122,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	123,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	124,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	125,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	126,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	127,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	128,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	129,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	130,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	131,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	132,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	133,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	134,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	135,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	136,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	137,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	138,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	139,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	140,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	141,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	142,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	143,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	144,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	145,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	146,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	147,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	148,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	149,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	150,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	151,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	152,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	153,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	154,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	155,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	156,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	157,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	158,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	159,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	160,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	161,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	162,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	163,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	164,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	165,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	166,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	167,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	168,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	169,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	170,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	171,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	172,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	173,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	174,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	175,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	176,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	177,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	178,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	179,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	180,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	181,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	182,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	183,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	184,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	185,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	186,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	187,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	188,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	189,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	190,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	191,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	192,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	193,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	194,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	195,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	196,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	197,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	198,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	199,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	200,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	201,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	202,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	203,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	204,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	205,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	206,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	207,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	208,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	209,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	210,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	211,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	212,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	213,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	214,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	215,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	216,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	217,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	218,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	219,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	220,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	221,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	222,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	223,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	224,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	225,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	226,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	227,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	228,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	229,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	230,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	231,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	232,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	233,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	234,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	235,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	236,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	237,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	238,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	239,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	240,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	241,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	242,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	243,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	244,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	245,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	246,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	247,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	248,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	249,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	250,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	251,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	252,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	253,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	254,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	255,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	256,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	257,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	258,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	259,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	260,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	261,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	262,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	263,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	264,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	265,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	266,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	267,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	268,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	269,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	270,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	271,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	272,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	273,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	274,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	275,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	276,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	277,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	278,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	279,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	280,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	281,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	282,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	283,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	284,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	285,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	286,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	287,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	288,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	289,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	290,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	291,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	292,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	293,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	294,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	295,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	296,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	297,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	298,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	299,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	300,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	301,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	302,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	303,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	304,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	305,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	306,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	307,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	308,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	309,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	310,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	311,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	312,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	313,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	314,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	315,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	316,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	317,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	318,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	319,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	320,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	321,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	322,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	323,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	324,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	325,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	326,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	327,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	328,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	329,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	330,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	331,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	332,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	333,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	334,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	335,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	336,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	337,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	338,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	339,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	340,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	341,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	342,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	343,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	344,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	345,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	346,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	347,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	348,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	349,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	350,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	351,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	352,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	353,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	354,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	355,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	356,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	357,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	358,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	359,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	360,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	361,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	362,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	363,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	364,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	365,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	366,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	367,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	368,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	369,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	370,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	371,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	372,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	373,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	374,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	375,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	376,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	377,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	378,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	379,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	380,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	381,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	382,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	383,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	384,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	385,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	386,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	387,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	388,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	389,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	390,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	391,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	392,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	393,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	394,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	395,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	396,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	397,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	398,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	399,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	400,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	401,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	402,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	403,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	404,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	405,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	406,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	407,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	408,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	409,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	410,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	411,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	412,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	413,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	414,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	415,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	416,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	417,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	418,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	419,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	420,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	421,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	422,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	423,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	424,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	425,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	426,
									"scores":	[-8.74049488442242, -8.74049488442242, -8.59192388442242, -8.59192388442242, -8.9569408982224168, -8.09896928132242, -8.59192388442242, -8.59192388442242, -8.68134658442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.68134658442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.59192388442242, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.59192388442242, -8.3656548213224173, -8.59192388442242, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171, -8.8723528813224171]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [], [], [], [], [], [3], [], [], [], [], [], [], [], [2]],
							"begin_line":	856,
							"begin_column":	2,
							"end_line":	856,
							"end_column":	19,
							"patch_codes":	["if (!__is_neg(\"\", \"L856\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(bytes_out), sizeof (bytes_out), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    copy_stat(&istat);\n", "{\n}\n", "copy_stat(&istat)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3270153413224168, -6.3270153413224168, -6.9014607413224169, -6.9014607413224169, -6.938558845322417, -6.4201054413224172, -6.9014607413224169, -6.9014607413224169, -7.3384257413224168, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -7.3384257413224168, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -6.9014607413224169, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -6.9014607413224169, -7.1218519413224168, -6.9014607413224169, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171, -7.1909391413224171]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}]
						}]
				}, {
					"line":	856,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [425], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [], [], [], [], [], []],
							"begin_line":	857,
							"begin_column":	0,
							"end_line":	857,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (unlink_errno)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (unlink_errno)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (unlink_errno)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (unlink_errno)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (unlink_errno)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (unlink_errno)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (unlink_errno)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (unlink_errno)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (unlink_errno)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (unlink_errno)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (unlink_errno)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (unlink_errno)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (unlink_errno)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (unlink_errno)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (unlink_errno)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location())", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L857\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.023171907891717]
								}, {
									"case":	2,
									"scores":	[-5.023171907891717]
								}, {
									"case":	3,
									"scores":	[-5.023171907891717]
								}, {
									"case":	4,
									"scores":	[-5.023171907891717]
								}, {
									"case":	5,
									"scores":	[-5.023171907891717]
								}, {
									"case":	6,
									"scores":	[-5.023171907891717]
								}, {
									"case":	7,
									"scores":	[-5.023171907891717]
								}, {
									"case":	8,
									"scores":	[-5.023171907891717]
								}, {
									"case":	9,
									"scores":	[-5.023171907891717]
								}, {
									"case":	10,
									"scores":	[-5.023171907891717]
								}, {
									"case":	11,
									"scores":	[-5.023171907891717]
								}, {
									"case":	12,
									"scores":	[-5.023171907891717]
								}, {
									"case":	13,
									"scores":	[-5.023171907891717]
								}, {
									"case":	14,
									"scores":	[-5.023171907891717]
								}, {
									"case":	15,
									"scores":	[-5.023171907891717]
								}, {
									"case":	16,
									"scores":	[-5.023171907891717]
								}, {
									"case":	17,
									"scores":	[-5.023171907891717]
								}, {
									"case":	18,
									"scores":	[-5.023171907891717]
								}, {
									"case":	19,
									"scores":	[-5.023171907891717]
								}, {
									"case":	20,
									"scores":	[-5.023171907891717]
								}, {
									"case":	21,
									"scores":	[-5.023171907891717]
								}, {
									"case":	22,
									"scores":	[-5.023171907891717]
								}, {
									"case":	23,
									"scores":	[-5.023171907891717]
								}, {
									"case":	24,
									"scores":	[-5.023171907891717]
								}, {
									"case":	25,
									"scores":	[-5.023171907891717]
								}, {
									"case":	26,
									"scores":	[-5.023171907891717]
								}, {
									"case":	27,
									"scores":	[-5.023171907891717]
								}, {
									"case":	28,
									"scores":	[-5.023171907891717]
								}, {
									"case":	29,
									"scores":	[-5.023171907891717]
								}, {
									"case":	30,
									"scores":	[-5.023171907891717]
								}, {
									"case":	31,
									"scores":	[-5.023171907891717]
								}, {
									"case":	32,
									"scores":	[-5.023171907891717]
								}, {
									"case":	33,
									"scores":	[-5.023171907891717]
								}, {
									"case":	34,
									"scores":	[-5.023171907891717]
								}, {
									"case":	35,
									"scores":	[-5.023171907891717]
								}, {
									"case":	36,
									"scores":	[-5.023171907891717]
								}, {
									"case":	37,
									"scores":	[-5.023171907891717]
								}, {
									"case":	38,
									"scores":	[-5.023171907891717]
								}, {
									"case":	39,
									"scores":	[-5.023171907891717]
								}, {
									"case":	40,
									"scores":	[-5.023171907891717]
								}, {
									"case":	41,
									"scores":	[-5.023171907891717]
								}, {
									"case":	42,
									"scores":	[-5.023171907891717]
								}, {
									"case":	43,
									"scores":	[-5.023171907891717]
								}, {
									"case":	44,
									"scores":	[-5.023171907891717]
								}, {
									"case":	45,
									"scores":	[-5.023171907891717]
								}, {
									"case":	46,
									"scores":	[-5.023171907891717]
								}, {
									"case":	47,
									"scores":	[-5.023171907891717]
								}, {
									"case":	48,
									"scores":	[-5.023171907891717]
								}, {
									"case":	49,
									"scores":	[-5.023171907891717]
								}, {
									"case":	50,
									"scores":	[-5.023171907891717]
								}, {
									"case":	51,
									"scores":	[-5.023171907891717]
								}, {
									"case":	52,
									"scores":	[-5.023171907891717]
								}, {
									"case":	53,
									"scores":	[-5.023171907891717]
								}, {
									"case":	54,
									"scores":	[-5.023171907891717]
								}, {
									"case":	55,
									"scores":	[-5.023171907891717]
								}, {
									"case":	56,
									"scores":	[-5.023171907891717]
								}, {
									"case":	57,
									"scores":	[-5.023171907891717]
								}, {
									"case":	58,
									"scores":	[-5.023171907891717]
								}, {
									"case":	59,
									"scores":	[-5.023171907891717]
								}, {
									"case":	60,
									"scores":	[-5.023171907891717]
								}, {
									"case":	61,
									"scores":	[-5.023171907891717]
								}, {
									"case":	62,
									"scores":	[-5.023171907891717]
								}, {
									"case":	63,
									"scores":	[-5.023171907891717]
								}, {
									"case":	64,
									"scores":	[-5.023171907891717]
								}, {
									"case":	65,
									"scores":	[-5.023171907891717]
								}, {
									"case":	66,
									"scores":	[-5.023171907891717]
								}, {
									"case":	67,
									"scores":	[-5.023171907891717]
								}, {
									"case":	68,
									"scores":	[-5.023171907891717]
								}, {
									"case":	69,
									"scores":	[-5.023171907891717]
								}, {
									"case":	70,
									"scores":	[-5.023171907891717]
								}, {
									"case":	71,
									"scores":	[-5.023171907891717]
								}, {
									"case":	72,
									"scores":	[-5.023171907891717]
								}, {
									"case":	73,
									"scores":	[-5.023171907891717]
								}, {
									"case":	74,
									"scores":	[-5.023171907891717]
								}, {
									"case":	75,
									"scores":	[-5.023171907891717]
								}, {
									"case":	76,
									"scores":	[-5.023171907891717]
								}, {
									"case":	77,
									"scores":	[-5.023171907891717]
								}, {
									"case":	78,
									"scores":	[-5.023171907891717]
								}, {
									"case":	79,
									"scores":	[-5.023171907891717]
								}, {
									"case":	80,
									"scores":	[-5.023171907891717]
								}, {
									"case":	81,
									"scores":	[-5.023171907891717]
								}, {
									"case":	82,
									"scores":	[-5.023171907891717]
								}, {
									"case":	83,
									"scores":	[-5.023171907891717]
								}, {
									"case":	84,
									"scores":	[-5.023171907891717]
								}, {
									"case":	85,
									"scores":	[-5.023171907891717]
								}, {
									"case":	86,
									"scores":	[-5.023171907891717]
								}, {
									"case":	87,
									"scores":	[-5.023171907891717]
								}, {
									"case":	88,
									"scores":	[-5.023171907891717]
								}, {
									"case":	89,
									"scores":	[-5.023171907891717]
								}, {
									"case":	90,
									"scores":	[-5.023171907891717]
								}, {
									"case":	91,
									"scores":	[-5.023171907891717]
								}, {
									"case":	92,
									"scores":	[-5.023171907891717]
								}, {
									"case":	93,
									"scores":	[-5.023171907891717]
								}, {
									"case":	94,
									"scores":	[-5.023171907891717]
								}, {
									"case":	95,
									"scores":	[-5.023171907891717]
								}, {
									"case":	96,
									"scores":	[-5.023171907891717]
								}, {
									"case":	97,
									"scores":	[-5.023171907891717]
								}, {
									"case":	98,
									"scores":	[-5.023171907891717]
								}, {
									"case":	99,
									"scores":	[-5.023171907891717]
								}, {
									"case":	100,
									"scores":	[-5.023171907891717]
								}, {
									"case":	101,
									"scores":	[-5.023171907891717]
								}, {
									"case":	102,
									"scores":	[-5.023171907891717]
								}, {
									"case":	103,
									"scores":	[-5.023171907891717]
								}, {
									"case":	104,
									"scores":	[-5.023171907891717]
								}, {
									"case":	105,
									"scores":	[-5.023171907891717]
								}, {
									"case":	106,
									"scores":	[-5.023171907891717]
								}, {
									"case":	107,
									"scores":	[-5.023171907891717]
								}, {
									"case":	108,
									"scores":	[-5.023171907891717]
								}, {
									"case":	109,
									"scores":	[-5.023171907891717]
								}, {
									"case":	110,
									"scores":	[-5.023171907891717]
								}, {
									"case":	111,
									"scores":	[-5.023171907891717]
								}, {
									"case":	112,
									"scores":	[-5.023171907891717]
								}, {
									"case":	113,
									"scores":	[-5.023171907891717]
								}, {
									"case":	114,
									"scores":	[-5.023171907891717]
								}, {
									"case":	115,
									"scores":	[-5.023171907891717]
								}, {
									"case":	116,
									"scores":	[-5.023171907891717]
								}, {
									"case":	117,
									"scores":	[-5.023171907891717]
								}, {
									"case":	118,
									"scores":	[-5.023171907891717]
								}, {
									"case":	119,
									"scores":	[-5.023171907891717]
								}, {
									"case":	120,
									"scores":	[-5.023171907891717]
								}, {
									"case":	121,
									"scores":	[-5.023171907891717]
								}, {
									"case":	122,
									"scores":	[-5.023171907891717]
								}, {
									"case":	123,
									"scores":	[-5.023171907891717]
								}, {
									"case":	124,
									"scores":	[-5.023171907891717]
								}, {
									"case":	125,
									"scores":	[-5.023171907891717]
								}, {
									"case":	126,
									"scores":	[-5.023171907891717]
								}, {
									"case":	127,
									"scores":	[-5.023171907891717]
								}, {
									"case":	128,
									"scores":	[-5.023171907891717]
								}, {
									"case":	129,
									"scores":	[-5.023171907891717]
								}, {
									"case":	130,
									"scores":	[-5.023171907891717]
								}, {
									"case":	131,
									"scores":	[-5.023171907891717]
								}, {
									"case":	132,
									"scores":	[-5.023171907891717]
								}, {
									"case":	133,
									"scores":	[-5.023171907891717]
								}, {
									"case":	134,
									"scores":	[-5.023171907891717]
								}, {
									"case":	135,
									"scores":	[-5.023171907891717]
								}, {
									"case":	136,
									"scores":	[-5.023171907891717]
								}, {
									"case":	137,
									"scores":	[-5.023171907891717]
								}, {
									"case":	138,
									"scores":	[-5.023171907891717]
								}, {
									"case":	139,
									"scores":	[-5.023171907891717]
								}, {
									"case":	140,
									"scores":	[-5.023171907891717]
								}, {
									"case":	141,
									"scores":	[-5.023171907891717]
								}, {
									"case":	142,
									"scores":	[-5.023171907891717]
								}, {
									"case":	143,
									"scores":	[-5.023171907891717]
								}, {
									"case":	144,
									"scores":	[-5.023171907891717]
								}, {
									"case":	145,
									"scores":	[-5.023171907891717]
								}, {
									"case":	146,
									"scores":	[-5.023171907891717]
								}, {
									"case":	147,
									"scores":	[-5.023171907891717]
								}, {
									"case":	148,
									"scores":	[-5.023171907891717]
								}, {
									"case":	149,
									"scores":	[-5.023171907891717]
								}, {
									"case":	150,
									"scores":	[-5.023171907891717]
								}, {
									"case":	151,
									"scores":	[-5.023171907891717]
								}, {
									"case":	152,
									"scores":	[-5.023171907891717]
								}, {
									"case":	153,
									"scores":	[-5.023171907891717]
								}, {
									"case":	154,
									"scores":	[-5.023171907891717]
								}, {
									"case":	155,
									"scores":	[-5.023171907891717]
								}, {
									"case":	156,
									"scores":	[-5.023171907891717]
								}, {
									"case":	157,
									"scores":	[-5.023171907891717]
								}, {
									"case":	158,
									"scores":	[-5.023171907891717]
								}, {
									"case":	159,
									"scores":	[-5.023171907891717]
								}, {
									"case":	160,
									"scores":	[-5.023171907891717]
								}, {
									"case":	161,
									"scores":	[-5.023171907891717]
								}, {
									"case":	162,
									"scores":	[-5.023171907891717]
								}, {
									"case":	163,
									"scores":	[-5.023171907891717]
								}, {
									"case":	164,
									"scores":	[-5.023171907891717]
								}, {
									"case":	165,
									"scores":	[-5.023171907891717]
								}, {
									"case":	166,
									"scores":	[-5.023171907891717]
								}, {
									"case":	167,
									"scores":	[-5.023171907891717]
								}, {
									"case":	168,
									"scores":	[-5.023171907891717]
								}, {
									"case":	169,
									"scores":	[-5.023171907891717]
								}, {
									"case":	170,
									"scores":	[-5.023171907891717]
								}, {
									"case":	171,
									"scores":	[-5.023171907891717]
								}, {
									"case":	172,
									"scores":	[-5.023171907891717]
								}, {
									"case":	173,
									"scores":	[-5.023171907891717]
								}, {
									"case":	174,
									"scores":	[-5.023171907891717]
								}, {
									"case":	175,
									"scores":	[-5.023171907891717]
								}, {
									"case":	176,
									"scores":	[-5.023171907891717]
								}, {
									"case":	177,
									"scores":	[-5.023171907891717]
								}, {
									"case":	178,
									"scores":	[-5.023171907891717]
								}, {
									"case":	179,
									"scores":	[-5.023171907891717]
								}, {
									"case":	180,
									"scores":	[-5.023171907891717]
								}, {
									"case":	181,
									"scores":	[-5.023171907891717]
								}, {
									"case":	182,
									"scores":	[-5.023171907891717]
								}, {
									"case":	183,
									"scores":	[-5.023171907891717]
								}, {
									"case":	184,
									"scores":	[-5.023171907891717]
								}, {
									"case":	185,
									"scores":	[-5.023171907891717]
								}, {
									"case":	186,
									"scores":	[-5.023171907891717]
								}, {
									"case":	187,
									"scores":	[-5.023171907891717]
								}, {
									"case":	188,
									"scores":	[-5.023171907891717]
								}, {
									"case":	189,
									"scores":	[-5.023171907891717]
								}, {
									"case":	190,
									"scores":	[-5.023171907891717]
								}, {
									"case":	191,
									"scores":	[-5.023171907891717]
								}, {
									"case":	192,
									"scores":	[-5.023171907891717]
								}, {
									"case":	193,
									"scores":	[-5.023171907891717]
								}, {
									"case":	194,
									"scores":	[-5.023171907891717]
								}, {
									"case":	195,
									"scores":	[-5.023171907891717]
								}, {
									"case":	196,
									"scores":	[-5.023171907891717]
								}, {
									"case":	197,
									"scores":	[-5.023171907891717]
								}, {
									"case":	198,
									"scores":	[-5.023171907891717]
								}, {
									"case":	199,
									"scores":	[-5.023171907891717]
								}, {
									"case":	200,
									"scores":	[-5.023171907891717]
								}, {
									"case":	201,
									"scores":	[-5.023171907891717]
								}, {
									"case":	202,
									"scores":	[-5.023171907891717]
								}, {
									"case":	203,
									"scores":	[-5.023171907891717]
								}, {
									"case":	204,
									"scores":	[-5.023171907891717]
								}, {
									"case":	205,
									"scores":	[-5.023171907891717]
								}, {
									"case":	206,
									"scores":	[-5.023171907891717]
								}, {
									"case":	207,
									"scores":	[-5.023171907891717]
								}, {
									"case":	208,
									"scores":	[-5.023171907891717]
								}, {
									"case":	209,
									"scores":	[-5.023171907891717]
								}, {
									"case":	210,
									"scores":	[-5.023171907891717]
								}, {
									"case":	211,
									"scores":	[-5.023171907891717]
								}, {
									"case":	212,
									"scores":	[-5.023171907891717]
								}, {
									"case":	213,
									"scores":	[-5.023171907891717]
								}, {
									"case":	214,
									"scores":	[-5.023171907891717]
								}, {
									"case":	215,
									"scores":	[-5.023171907891717]
								}, {
									"case":	216,
									"scores":	[-5.023171907891717]
								}, {
									"case":	217,
									"scores":	[-5.023171907891717]
								}, {
									"case":	218,
									"scores":	[-5.023171907891717]
								}, {
									"case":	219,
									"scores":	[-5.023171907891717]
								}, {
									"case":	220,
									"scores":	[-5.023171907891717]
								}, {
									"case":	221,
									"scores":	[-5.023171907891717]
								}, {
									"case":	222,
									"scores":	[-5.023171907891717]
								}, {
									"case":	223,
									"scores":	[-5.023171907891717]
								}, {
									"case":	224,
									"scores":	[-5.023171907891717]
								}, {
									"case":	225,
									"scores":	[-5.023171907891717]
								}, {
									"case":	226,
									"scores":	[-5.023171907891717]
								}, {
									"case":	227,
									"scores":	[-5.023171907891717]
								}, {
									"case":	228,
									"scores":	[-5.023171907891717]
								}, {
									"case":	229,
									"scores":	[-5.023171907891717]
								}, {
									"case":	230,
									"scores":	[-5.023171907891717]
								}, {
									"case":	231,
									"scores":	[-5.023171907891717]
								}, {
									"case":	232,
									"scores":	[-5.023171907891717]
								}, {
									"case":	233,
									"scores":	[-5.023171907891717]
								}, {
									"case":	234,
									"scores":	[-5.023171907891717]
								}, {
									"case":	235,
									"scores":	[-5.023171907891717]
								}, {
									"case":	236,
									"scores":	[-5.023171907891717]
								}, {
									"case":	237,
									"scores":	[-5.023171907891717]
								}, {
									"case":	238,
									"scores":	[-5.023171907891717]
								}, {
									"case":	239,
									"scores":	[-5.023171907891717]
								}, {
									"case":	240,
									"scores":	[-5.023171907891717]
								}, {
									"case":	241,
									"scores":	[-5.023171907891717]
								}, {
									"case":	242,
									"scores":	[-5.023171907891717]
								}, {
									"case":	243,
									"scores":	[-5.023171907891717]
								}, {
									"case":	244,
									"scores":	[-5.023171907891717]
								}, {
									"case":	245,
									"scores":	[-5.023171907891717]
								}, {
									"case":	246,
									"scores":	[-5.023171907891717]
								}, {
									"case":	247,
									"scores":	[-5.023171907891717]
								}, {
									"case":	248,
									"scores":	[-5.023171907891717]
								}, {
									"case":	249,
									"scores":	[-5.023171907891717]
								}, {
									"case":	250,
									"scores":	[-5.023171907891717]
								}, {
									"case":	251,
									"scores":	[-5.023171907891717]
								}, {
									"case":	252,
									"scores":	[-5.023171907891717]
								}, {
									"case":	253,
									"scores":	[-5.023171907891717]
								}, {
									"case":	254,
									"scores":	[-5.023171907891717]
								}, {
									"case":	255,
									"scores":	[-5.023171907891717]
								}, {
									"case":	256,
									"scores":	[-5.023171907891717]
								}, {
									"case":	257,
									"scores":	[-5.023171907891717]
								}, {
									"case":	258,
									"scores":	[-5.023171907891717]
								}, {
									"case":	259,
									"scores":	[-5.023171907891717]
								}, {
									"case":	260,
									"scores":	[-5.023171907891717]
								}, {
									"case":	261,
									"scores":	[-5.023171907891717]
								}, {
									"case":	262,
									"scores":	[-5.023171907891717]
								}, {
									"case":	263,
									"scores":	[-5.023171907891717]
								}, {
									"case":	264,
									"scores":	[-5.023171907891717]
								}, {
									"case":	265,
									"scores":	[-5.023171907891717]
								}, {
									"case":	266,
									"scores":	[-5.023171907891717]
								}, {
									"case":	267,
									"scores":	[-5.023171907891717]
								}, {
									"case":	268,
									"scores":	[-5.023171907891717]
								}, {
									"case":	269,
									"scores":	[-5.023171907891717]
								}, {
									"case":	270,
									"scores":	[-5.023171907891717]
								}, {
									"case":	271,
									"scores":	[-5.023171907891717]
								}, {
									"case":	272,
									"scores":	[-5.023171907891717]
								}, {
									"case":	273,
									"scores":	[-5.023171907891717]
								}, {
									"case":	274,
									"scores":	[-5.023171907891717]
								}, {
									"case":	275,
									"scores":	[-5.023171907891717]
								}, {
									"case":	276,
									"scores":	[-5.023171907891717]
								}, {
									"case":	277,
									"scores":	[-5.023171907891717]
								}, {
									"case":	278,
									"scores":	[-5.023171907891717]
								}, {
									"case":	279,
									"scores":	[-5.023171907891717]
								}, {
									"case":	280,
									"scores":	[-5.023171907891717]
								}, {
									"case":	281,
									"scores":	[-5.023171907891717]
								}, {
									"case":	282,
									"scores":	[-5.023171907891717]
								}, {
									"case":	283,
									"scores":	[-5.023171907891717]
								}, {
									"case":	284,
									"scores":	[-5.023171907891717]
								}, {
									"case":	285,
									"scores":	[-5.023171907891717]
								}, {
									"case":	286,
									"scores":	[-5.023171907891717]
								}, {
									"case":	287,
									"scores":	[-5.023171907891717]
								}, {
									"case":	288,
									"scores":	[-5.023171907891717]
								}, {
									"case":	289,
									"scores":	[-5.023171907891717]
								}, {
									"case":	290,
									"scores":	[-5.023171907891717]
								}, {
									"case":	291,
									"scores":	[-5.023171907891717]
								}, {
									"case":	292,
									"scores":	[-5.023171907891717]
								}, {
									"case":	293,
									"scores":	[-5.023171907891717]
								}, {
									"case":	294,
									"scores":	[-5.023171907891717]
								}, {
									"case":	295,
									"scores":	[-5.023171907891717]
								}, {
									"case":	296,
									"scores":	[-5.023171907891717]
								}, {
									"case":	297,
									"scores":	[-5.023171907891717]
								}, {
									"case":	298,
									"scores":	[-5.023171907891717]
								}, {
									"case":	299,
									"scores":	[-5.023171907891717]
								}, {
									"case":	300,
									"scores":	[-5.023171907891717]
								}, {
									"case":	301,
									"scores":	[-5.023171907891717]
								}, {
									"case":	302,
									"scores":	[-5.023171907891717]
								}, {
									"case":	303,
									"scores":	[-5.023171907891717]
								}, {
									"case":	304,
									"scores":	[-5.023171907891717]
								}, {
									"case":	305,
									"scores":	[-5.023171907891717]
								}, {
									"case":	306,
									"scores":	[-5.023171907891717]
								}, {
									"case":	307,
									"scores":	[-5.023171907891717]
								}, {
									"case":	308,
									"scores":	[-5.023171907891717]
								}, {
									"case":	309,
									"scores":	[-5.023171907891717]
								}, {
									"case":	310,
									"scores":	[-5.023171907891717]
								}, {
									"case":	311,
									"scores":	[-5.023171907891717]
								}, {
									"case":	312,
									"scores":	[-5.023171907891717]
								}, {
									"case":	313,
									"scores":	[-5.023171907891717]
								}, {
									"case":	314,
									"scores":	[-5.023171907891717]
								}, {
									"case":	315,
									"scores":	[-5.023171907891717]
								}, {
									"case":	316,
									"scores":	[-5.023171907891717]
								}, {
									"case":	317,
									"scores":	[-5.023171907891717]
								}, {
									"case":	318,
									"scores":	[-5.023171907891717]
								}, {
									"case":	319,
									"scores":	[-5.023171907891717]
								}, {
									"case":	320,
									"scores":	[-5.023171907891717]
								}, {
									"case":	321,
									"scores":	[-5.023171907891717]
								}, {
									"case":	322,
									"scores":	[-5.023171907891717]
								}, {
									"case":	323,
									"scores":	[-5.023171907891717]
								}, {
									"case":	324,
									"scores":	[-5.023171907891717]
								}, {
									"case":	325,
									"scores":	[-5.023171907891717]
								}, {
									"case":	326,
									"scores":	[-5.023171907891717]
								}, {
									"case":	327,
									"scores":	[-5.023171907891717]
								}, {
									"case":	328,
									"scores":	[-5.023171907891717]
								}, {
									"case":	329,
									"scores":	[-5.023171907891717]
								}, {
									"case":	330,
									"scores":	[-5.023171907891717]
								}, {
									"case":	331,
									"scores":	[-5.023171907891717]
								}, {
									"case":	332,
									"scores":	[-5.023171907891717]
								}, {
									"case":	333,
									"scores":	[-5.023171907891717]
								}, {
									"case":	334,
									"scores":	[-5.023171907891717]
								}, {
									"case":	335,
									"scores":	[-5.023171907891717]
								}, {
									"case":	336,
									"scores":	[-5.023171907891717]
								}, {
									"case":	337,
									"scores":	[-5.023171907891717]
								}, {
									"case":	338,
									"scores":	[-5.023171907891717]
								}, {
									"case":	339,
									"scores":	[-5.023171907891717]
								}, {
									"case":	340,
									"scores":	[-5.023171907891717]
								}, {
									"case":	341,
									"scores":	[-5.023171907891717]
								}, {
									"case":	342,
									"scores":	[-5.023171907891717]
								}, {
									"case":	343,
									"scores":	[-5.023171907891717]
								}, {
									"case":	344,
									"scores":	[-5.023171907891717]
								}, {
									"case":	345,
									"scores":	[-5.023171907891717]
								}, {
									"case":	346,
									"scores":	[-5.023171907891717]
								}, {
									"case":	347,
									"scores":	[-5.023171907891717]
								}, {
									"case":	348,
									"scores":	[-5.023171907891717]
								}, {
									"case":	349,
									"scores":	[-5.023171907891717]
								}, {
									"case":	350,
									"scores":	[-5.023171907891717]
								}, {
									"case":	351,
									"scores":	[-5.023171907891717]
								}, {
									"case":	352,
									"scores":	[-5.023171907891717]
								}, {
									"case":	353,
									"scores":	[-5.023171907891717]
								}, {
									"case":	354,
									"scores":	[-5.023171907891717]
								}, {
									"case":	355,
									"scores":	[-5.023171907891717]
								}, {
									"case":	356,
									"scores":	[-5.023171907891717]
								}, {
									"case":	357,
									"scores":	[-5.023171907891717]
								}, {
									"case":	358,
									"scores":	[-5.023171907891717]
								}, {
									"case":	359,
									"scores":	[-5.023171907891717]
								}, {
									"case":	360,
									"scores":	[-5.023171907891717]
								}, {
									"case":	361,
									"scores":	[-5.023171907891717]
								}, {
									"case":	362,
									"scores":	[-5.023171907891717]
								}, {
									"case":	363,
									"scores":	[-5.023171907891717]
								}, {
									"case":	364,
									"scores":	[-5.023171907891717]
								}, {
									"case":	365,
									"scores":	[-5.023171907891717]
								}, {
									"case":	366,
									"scores":	[-5.023171907891717]
								}, {
									"case":	367,
									"scores":	[-5.023171907891717]
								}, {
									"case":	368,
									"scores":	[-5.023171907891717]
								}, {
									"case":	369,
									"scores":	[-5.023171907891717]
								}, {
									"case":	370,
									"scores":	[-5.023171907891717]
								}, {
									"case":	371,
									"scores":	[-5.023171907891717]
								}, {
									"case":	372,
									"scores":	[-5.023171907891717]
								}, {
									"case":	373,
									"scores":	[-5.023171907891717]
								}, {
									"case":	374,
									"scores":	[-5.023171907891717]
								}, {
									"case":	375,
									"scores":	[-5.023171907891717]
								}, {
									"case":	376,
									"scores":	[-5.023171907891717]
								}, {
									"case":	377,
									"scores":	[-5.023171907891717]
								}, {
									"case":	378,
									"scores":	[-5.023171907891717]
								}, {
									"case":	379,
									"scores":	[-5.023171907891717]
								}, {
									"case":	380,
									"scores":	[-5.023171907891717]
								}, {
									"case":	381,
									"scores":	[-5.023171907891717]
								}, {
									"case":	382,
									"scores":	[-5.023171907891717]
								}, {
									"case":	383,
									"scores":	[-5.023171907891717]
								}, {
									"case":	384,
									"scores":	[-5.023171907891717]
								}, {
									"case":	385,
									"scores":	[-5.023171907891717]
								}, {
									"case":	386,
									"scores":	[-5.023171907891717]
								}, {
									"case":	387,
									"scores":	[-5.023171907891717]
								}, {
									"case":	388,
									"scores":	[-5.023171907891717]
								}, {
									"case":	389,
									"scores":	[-5.023171907891717]
								}, {
									"case":	390,
									"scores":	[-5.023171907891717]
								}, {
									"case":	391,
									"scores":	[-5.023171907891717]
								}, {
									"case":	392,
									"scores":	[-5.023171907891717]
								}, {
									"case":	393,
									"scores":	[-5.023171907891717]
								}, {
									"case":	394,
									"scores":	[-5.023171907891717]
								}, {
									"case":	395,
									"scores":	[-5.023171907891717]
								}, {
									"case":	396,
									"scores":	[-5.023171907891717]
								}, {
									"case":	397,
									"scores":	[-5.023171907891717]
								}, {
									"case":	398,
									"scores":	[-5.023171907891717]
								}, {
									"case":	399,
									"scores":	[-5.023171907891717]
								}, {
									"case":	400,
									"scores":	[-5.023171907891717]
								}, {
									"case":	401,
									"scores":	[-5.023171907891717]
								}, {
									"case":	402,
									"scores":	[-5.023171907891717]
								}, {
									"case":	403,
									"scores":	[-5.023171907891717]
								}, {
									"case":	404,
									"scores":	[-5.023171907891717]
								}, {
									"case":	405,
									"scores":	[-5.023171907891717]
								}, {
									"case":	406,
									"scores":	[-5.023171907891717]
								}, {
									"case":	407,
									"scores":	[-5.023171907891717]
								}, {
									"case":	408,
									"scores":	[-5.023171907891717]
								}, {
									"case":	409,
									"scores":	[-5.023171907891717]
								}, {
									"case":	410,
									"scores":	[-5.023171907891717]
								}, {
									"case":	411,
									"scores":	[-5.023171907891717]
								}, {
									"case":	412,
									"scores":	[-5.023171907891717]
								}, {
									"case":	413,
									"scores":	[-5.023171907891717]
								}, {
									"case":	414,
									"scores":	[-5.023171907891717]
								}, {
									"case":	415,
									"scores":	[-5.023171907891717]
								}, {
									"case":	416,
									"scores":	[-5.023171907891717]
								}, {
									"case":	417,
									"scores":	[-5.023171907891717]
								}, {
									"case":	418,
									"scores":	[-5.023171907891717]
								}, {
									"case":	419,
									"scores":	[-5.023171907891717]
								}, {
									"case":	420,
									"scores":	[-5.023171907891717]
								}, {
									"case":	421,
									"scores":	[-5.023171907891717]
								}, {
									"case":	422,
									"scores":	[-5.023171907891717]
								}, {
									"case":	423,
									"scores":	[-5.023171907891717]
								}, {
									"case":	424,
									"scores":	[-5.023171907891717]
								}, {
									"case":	425,
									"scores":	[-7.552718500991717, -7.552718500991717, -8.9168123147917164, -8.3529557178917173, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.6412180009917172, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.6412180009917172, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.5517953009917171, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.5517953009917171, -8.325526237891717, -8.5517953009917171, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167, -8.8322242978917167]
								}]
						}, {
							"switch":	14,
							"types":	[[51], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], []],
							"begin_line":	857,
							"begin_column":	2,
							"end_line":	858,
							"end_column":	17,
							"patch_codes":	["if (__is_neg(\"\", \"L857\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    write_error();\n", "if ((close(ofd) != 0) || __is_neg(\"\", \"L857\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    write_error();\n", "if (__getpgid(ofd) != 0)\n    write_error();\n", "if (_tolower(ofd) != 0)\n    write_error();\n", "if (_toupper(ofd) != 0)\n    write_error();\n", "if (abs(ofd) != 0)\n    write_error();\n", "if (check_zipfile(ofd) != 0)\n    write_error();\n", "if (dup(ofd) != 0)\n    write_error();\n", "if (dysize(ofd) != 0)\n    write_error();\n", "if (fchdir(ofd) != 0)\n    write_error();\n", "if (fdatasync(ofd) != 0)\n    write_error();\n", "if (ffs(ofd) != 0)\n    write_error();\n", "if (fill_inbuf(ofd) != 0)\n    write_error();\n", "if (fsync(ofd) != 0)\n    write_error();\n", "if (get_method(ofd) != 0)\n    write_error();\n", "if (getpgid(ofd) != 0)\n    write_error();\n", "if (getsid(ofd) != 0)\n    write_error();\n", "if (grantpt(ofd) != 0)\n    write_error();\n", "if (gsignal(ofd) != 0)\n    write_error();\n", "if (isalnum(ofd) != 0)\n    write_error();\n", "if (isalpha(ofd) != 0)\n    write_error();\n", "if (isascii(ofd) != 0)\n    write_error();\n", "if (isatty(ofd) != 0)\n    write_error();\n", "if (isblank(ofd) != 0)\n    write_error();\n", "if (iscntrl(ofd) != 0)\n    write_error();\n", "if (isdigit(ofd) != 0)\n    write_error();\n", "if (isgraph(ofd) != 0)\n    write_error();\n", "if (islower(ofd) != 0)\n    write_error();\n", "if (isprint(ofd) != 0)\n    write_error();\n", "if (ispunct(ofd) != 0)\n    write_error();\n", "if (isspace(ofd) != 0)\n    write_error();\n", "if (isupper(ofd) != 0)\n    write_error();\n", "if (isxdigit(ofd) != 0)\n    write_error();\n", "if (nice(ofd) != 0)\n    write_error();\n", "if (posix_openpt(ofd) != 0)\n    write_error();\n", "if (putchar(ofd) != 0)\n    write_error();\n", "if (putchar_unlocked(ofd) != 0)\n    write_error();\n", "if (raise(ofd) != 0)\n    write_error();\n", "if (sigblock(ofd) != 0)\n    write_error();\n", "if (sighold(ofd) != 0)\n    write_error();\n", "if (sigignore(ofd) != 0)\n    write_error();\n", "if (sigpause(ofd) != 0)\n    write_error();\n", "if (sigrelse(ofd) != 0)\n    write_error();\n", "if (sigsetmask(ofd) != 0)\n    write_error();\n", "if (syncfs(ofd) != 0)\n    write_error();\n", "if (tcgetpgrp(ofd) != 0)\n    write_error();\n", "if (toascii(ofd) != 0)\n    write_error();\n", "if (tolower(ofd) != 0)\n    write_error();\n", "if (toupper(ofd) != 0)\n    write_error();\n", "if (unlockpt(ofd) != 0)\n    write_error();\n", "if ((close(ofd) != 0) && !__is_neg(\"\", \"L857\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    write_error();\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.352885385428146, -3.352885385428146, -4.0547270894281455, -3.5028254034281456, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.4545939854281462, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.4545939854281462, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.0176289854281464, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.0176289854281464, -4.2380201854281463, -4.0176289854281464, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456, -4.3071073854281456]
								}, {
									"case":	2,
									"scores":	[-4.125653534428146, -4.125653534428146, -4.8274952384281455, -4.2755935524281456, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -5.2273621344281462, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -5.2273621344281462, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -4.7903971344281455, -5.0107883344281454, -4.7903971344281455, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-4.125653534428146, -4.125653534428146, -4.8274952384281455, -4.2755935524281456, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -5.2273621344281462, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -5.2273621344281462, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -4.7903971344281455, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -4.7903971344281455, -5.0107883344281454, -4.7903971344281455, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457, -5.0798755344281457]
								}]
						}, {
							"switch":	15,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	857,
							"begin_column":	2,
							"end_line":	858,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L857\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    if (close(ofd) != 0)\n        write_error();\n", "if (!__is_neg(\"\", \"L857\", 60, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_nlink), sizeof (istat.st_nlink), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)) && (close(ofd) != 0))\n    write_error();\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2398901978917172, -5.2398901978917172, -5.9417319018917167, -5.3898302158917168, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -6.3415987978917165, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -6.3415987978917165, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -5.9046337978917167, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -5.9046337978917167, -6.1250249978917175, -5.9046337978917167, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169, -6.1941121978917169]
								}, {
									"case":	2,
									"scores":	[-5.7588739368917166, -5.7588739368917166, -6.460715640891717, -5.9088139548917171, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.8605825368917168, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.8605825368917168, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.423617536891717, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.423617536891717, -6.6440087368917169, -6.423617536891717, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171, -6.7130959368917171]
								}]
						}]
				}, {
					"line":	859,
					"switches":	[{
							"switch":	16,
							"types":	[[], [], [], [], [425], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [], [], [], [], [], []],
							"begin_line":	860,
							"begin_column":	0,
							"end_line":	860,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (unlink_errno)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (unlink_errno)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (unlink_errno)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (unlink_errno)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (unlink_errno)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (unlink_errno)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (unlink_errno)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (unlink_errno)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (unlink_errno)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (unlink_errno)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (unlink_errno)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (unlink_errno)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (unlink_errno)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (unlink_errno)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (unlink_errno)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location())", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L860\", 38, &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.982766493256678]
								}, {
									"case":	2,
									"scores":	[-4.982766493256678]
								}, {
									"case":	3,
									"scores":	[-4.982766493256678]
								}, {
									"case":	4,
									"scores":	[-4.982766493256678]
								}, {
									"case":	5,
									"scores":	[-4.982766493256678]
								}, {
									"case":	6,
									"scores":	[-4.982766493256678]
								}, {
									"case":	7,
									"scores":	[-4.982766493256678]
								}, {
									"case":	8,
									"scores":	[-4.982766493256678]
								}, {
									"case":	9,
									"scores":	[-4.982766493256678]
								}, {
									"case":	10,
									"scores":	[-4.982766493256678]
								}, {
									"case":	11,
									"scores":	[-4.982766493256678]
								}, {
									"case":	12,
									"scores":	[-4.982766493256678]
								}, {
									"case":	13,
									"scores":	[-4.982766493256678]
								}, {
									"case":	14,
									"scores":	[-4.982766493256678]
								}, {
									"case":	15,
									"scores":	[-4.982766493256678]
								}, {
									"case":	16,
									"scores":	[-4.982766493256678]
								}, {
									"case":	17,
									"scores":	[-4.982766493256678]
								}, {
									"case":	18,
									"scores":	[-4.982766493256678]
								}, {
									"case":	19,
									"scores":	[-4.982766493256678]
								}, {
									"case":	20,
									"scores":	[-4.982766493256678]
								}, {
									"case":	21,
									"scores":	[-4.982766493256678]
								}, {
									"case":	22,
									"scores":	[-4.982766493256678]
								}, {
									"case":	23,
									"scores":	[-4.982766493256678]
								}, {
									"case":	24,
									"scores":	[-4.982766493256678]
								}, {
									"case":	25,
									"scores":	[-4.982766493256678]
								}, {
									"case":	26,
									"scores":	[-4.982766493256678]
								}, {
									"case":	27,
									"scores":	[-4.982766493256678]
								}, {
									"case":	28,
									"scores":	[-4.982766493256678]
								}, {
									"case":	29,
									"scores":	[-4.982766493256678]
								}, {
									"case":	30,
									"scores":	[-4.982766493256678]
								}, {
									"case":	31,
									"scores":	[-4.982766493256678]
								}, {
									"case":	32,
									"scores":	[-4.982766493256678]
								}, {
									"case":	33,
									"scores":	[-4.982766493256678]
								}, {
									"case":	34,
									"scores":	[-4.982766493256678]
								}, {
									"case":	35,
									"scores":	[-4.982766493256678]
								}, {
									"case":	36,
									"scores":	[-4.982766493256678]
								}, {
									"case":	37,
									"scores":	[-4.982766493256678]
								}, {
									"case":	38,
									"scores":	[-4.982766493256678]
								}, {
									"case":	39,
									"scores":	[-4.982766493256678]
								}, {
									"case":	40,
									"scores":	[-4.982766493256678]
								}, {
									"case":	41,
									"scores":	[-4.982766493256678]
								}, {
									"case":	42,
									"scores":	[-4.982766493256678]
								}, {
									"case":	43,
									"scores":	[-4.982766493256678]
								}, {
									"case":	44,
									"scores":	[-4.982766493256678]
								}, {
									"case":	45,
									"scores":	[-4.982766493256678]
								}, {
									"case":	46,
									"scores":	[-4.982766493256678]
								}, {
									"case":	47,
									"scores":	[-4.982766493256678]
								}, {
									"case":	48,
									"scores":	[-4.982766493256678]
								}, {
									"case":	49,
									"scores":	[-4.982766493256678]
								}, {
									"case":	50,
									"scores":	[-4.982766493256678]
								}, {
									"case":	51,
									"scores":	[-4.982766493256678]
								}, {
									"case":	52,
									"scores":	[-4.982766493256678]
								}, {
									"case":	53,
									"scores":	[-4.982766493256678]
								}, {
									"case":	54,
									"scores":	[-4.982766493256678]
								}, {
									"case":	55,
									"scores":	[-4.982766493256678]
								}, {
									"case":	56,
									"scores":	[-4.982766493256678]
								}, {
									"case":	57,
									"scores":	[-4.982766493256678]
								}, {
									"case":	58,
									"scores":	[-4.982766493256678]
								}, {
									"case":	59,
									"scores":	[-4.982766493256678]
								}, {
									"case":	60,
									"scores":	[-4.982766493256678]
								}, {
									"case":	61,
									"scores":	[-4.982766493256678]
								}, {
									"case":	62,
									"scores":	[-4.982766493256678]
								}, {
									"case":	63,
									"scores":	[-4.982766493256678]
								}, {
									"case":	64,
									"scores":	[-4.982766493256678]
								}, {
									"case":	65,
									"scores":	[-4.982766493256678]
								}, {
									"case":	66,
									"scores":	[-4.982766493256678]
								}, {
									"case":	67,
									"scores":	[-4.982766493256678]
								}, {
									"case":	68,
									"scores":	[-4.982766493256678]
								}, {
									"case":	69,
									"scores":	[-4.982766493256678]
								}, {
									"case":	70,
									"scores":	[-4.982766493256678]
								}, {
									"case":	71,
									"scores":	[-4.982766493256678]
								}, {
									"case":	72,
									"scores":	[-4.982766493256678]
								}, {
									"case":	73,
									"scores":	[-4.982766493256678]
								}, {
									"case":	74,
									"scores":	[-4.982766493256678]
								}, {
									"case":	75,
									"scores":	[-4.982766493256678]
								}, {
									"case":	76,
									"scores":	[-4.982766493256678]
								}, {
									"case":	77,
									"scores":	[-4.982766493256678]
								}, {
									"case":	78,
									"scores":	[-4.982766493256678]
								}, {
									"case":	79,
									"scores":	[-4.982766493256678]
								}, {
									"case":	80,
									"scores":	[-4.982766493256678]
								}, {
									"case":	81,
									"scores":	[-4.982766493256678]
								}, {
									"case":	82,
									"scores":	[-4.982766493256678]
								}, {
									"case":	83,
									"scores":	[-4.982766493256678]
								}, {
									"case":	84,
									"scores":	[-4.982766493256678]
								}, {
									"case":	85,
									"scores":	[-4.982766493256678]
								}, {
									"case":	86,
									"scores":	[-4.982766493256678]
								}, {
									"case":	87,
									"scores":	[-4.982766493256678]
								}, {
									"case":	88,
									"scores":	[-4.982766493256678]
								}, {
									"case":	89,
									"scores":	[-4.982766493256678]
								}, {
									"case":	90,
									"scores":	[-4.982766493256678]
								}, {
									"case":	91,
									"scores":	[-4.982766493256678]
								}, {
									"case":	92,
									"scores":	[-4.982766493256678]
								}, {
									"case":	93,
									"scores":	[-4.982766493256678]
								}, {
									"case":	94,
									"scores":	[-4.982766493256678]
								}, {
									"case":	95,
									"scores":	[-4.982766493256678]
								}, {
									"case":	96,
									"scores":	[-4.982766493256678]
								}, {
									"case":	97,
									"scores":	[-4.982766493256678]
								}, {
									"case":	98,
									"scores":	[-4.982766493256678]
								}, {
									"case":	99,
									"scores":	[-4.982766493256678]
								}, {
									"case":	100,
									"scores":	[-4.982766493256678]
								}, {
									"case":	101,
									"scores":	[-4.982766493256678]
								}, {
									"case":	102,
									"scores":	[-4.982766493256678]
								}, {
									"case":	103,
									"scores":	[-4.982766493256678]
								}, {
									"case":	104,
									"scores":	[-4.982766493256678]
								}, {
									"case":	105,
									"scores":	[-4.982766493256678]
								}, {
									"case":	106,
									"scores":	[-4.982766493256678]
								}, {
									"case":	107,
									"scores":	[-4.982766493256678]
								}, {
									"case":	108,
									"scores":	[-4.982766493256678]
								}, {
									"case":	109,
									"scores":	[-4.982766493256678]
								}, {
									"case":	110,
									"scores":	[-4.982766493256678]
								}, {
									"case":	111,
									"scores":	[-4.982766493256678]
								}, {
									"case":	112,
									"scores":	[-4.982766493256678]
								}, {
									"case":	113,
									"scores":	[-4.982766493256678]
								}, {
									"case":	114,
									"scores":	[-4.982766493256678]
								}, {
									"case":	115,
									"scores":	[-4.982766493256678]
								}, {
									"case":	116,
									"scores":	[-4.982766493256678]
								}, {
									"case":	117,
									"scores":	[-4.982766493256678]
								}, {
									"case":	118,
									"scores":	[-4.982766493256678]
								}, {
									"case":	119,
									"scores":	[-4.982766493256678]
								}, {
									"case":	120,
									"scores":	[-4.982766493256678]
								}, {
									"case":	121,
									"scores":	[-4.982766493256678]
								}, {
									"case":	122,
									"scores":	[-4.982766493256678]
								}, {
									"case":	123,
									"scores":	[-4.982766493256678]
								}, {
									"case":	124,
									"scores":	[-4.982766493256678]
								}, {
									"case":	125,
									"scores":	[-4.982766493256678]
								}, {
									"case":	126,
									"scores":	[-4.982766493256678]
								}, {
									"case":	127,
									"scores":	[-4.982766493256678]
								}, {
									"case":	128,
									"scores":	[-4.982766493256678]
								}, {
									"case":	129,
									"scores":	[-4.982766493256678]
								}, {
									"case":	130,
									"scores":	[-4.982766493256678]
								}, {
									"case":	131,
									"scores":	[-4.982766493256678]
								}, {
									"case":	132,
									"scores":	[-4.982766493256678]
								}, {
									"case":	133,
									"scores":	[-4.982766493256678]
								}, {
									"case":	134,
									"scores":	[-4.982766493256678]
								}, {
									"case":	135,
									"scores":	[-4.982766493256678]
								}, {
									"case":	136,
									"scores":	[-4.982766493256678]
								}, {
									"case":	137,
									"scores":	[-4.982766493256678]
								}, {
									"case":	138,
									"scores":	[-4.982766493256678]
								}, {
									"case":	139,
									"scores":	[-4.982766493256678]
								}, {
									"case":	140,
									"scores":	[-4.982766493256678]
								}, {
									"case":	141,
									"scores":	[-4.982766493256678]
								}, {
									"case":	142,
									"scores":	[-4.982766493256678]
								}, {
									"case":	143,
									"scores":	[-4.982766493256678]
								}, {
									"case":	144,
									"scores":	[-4.982766493256678]
								}, {
									"case":	145,
									"scores":	[-4.982766493256678]
								}, {
									"case":	146,
									"scores":	[-4.982766493256678]
								}, {
									"case":	147,
									"scores":	[-4.982766493256678]
								}, {
									"case":	148,
									"scores":	[-4.982766493256678]
								}, {
									"case":	149,
									"scores":	[-4.982766493256678]
								}, {
									"case":	150,
									"scores":	[-4.982766493256678]
								}, {
									"case":	151,
									"scores":	[-4.982766493256678]
								}, {
									"case":	152,
									"scores":	[-4.982766493256678]
								}, {
									"case":	153,
									"scores":	[-4.982766493256678]
								}, {
									"case":	154,
									"scores":	[-4.982766493256678]
								}, {
									"case":	155,
									"scores":	[-4.982766493256678]
								}, {
									"case":	156,
									"scores":	[-4.982766493256678]
								}, {
									"case":	157,
									"scores":	[-4.982766493256678]
								}, {
									"case":	158,
									"scores":	[-4.982766493256678]
								}, {
									"case":	159,
									"scores":	[-4.982766493256678]
								}, {
									"case":	160,
									"scores":	[-4.982766493256678]
								}, {
									"case":	161,
									"scores":	[-4.982766493256678]
								}, {
									"case":	162,
									"scores":	[-4.982766493256678]
								}, {
									"case":	163,
									"scores":	[-4.982766493256678]
								}, {
									"case":	164,
									"scores":	[-4.982766493256678]
								}, {
									"case":	165,
									"scores":	[-4.982766493256678]
								}, {
									"case":	166,
									"scores":	[-4.982766493256678]
								}, {
									"case":	167,
									"scores":	[-4.982766493256678]
								}, {
									"case":	168,
									"scores":	[-4.982766493256678]
								}, {
									"case":	169,
									"scores":	[-4.982766493256678]
								}, {
									"case":	170,
									"scores":	[-4.982766493256678]
								}, {
									"case":	171,
									"scores":	[-4.982766493256678]
								}, {
									"case":	172,
									"scores":	[-4.982766493256678]
								}, {
									"case":	173,
									"scores":	[-4.982766493256678]
								}, {
									"case":	174,
									"scores":	[-4.982766493256678]
								}, {
									"case":	175,
									"scores":	[-4.982766493256678]
								}, {
									"case":	176,
									"scores":	[-4.982766493256678]
								}, {
									"case":	177,
									"scores":	[-4.982766493256678]
								}, {
									"case":	178,
									"scores":	[-4.982766493256678]
								}, {
									"case":	179,
									"scores":	[-4.982766493256678]
								}, {
									"case":	180,
									"scores":	[-4.982766493256678]
								}, {
									"case":	181,
									"scores":	[-4.982766493256678]
								}, {
									"case":	182,
									"scores":	[-4.982766493256678]
								}, {
									"case":	183,
									"scores":	[-4.982766493256678]
								}, {
									"case":	184,
									"scores":	[-4.982766493256678]
								}, {
									"case":	185,
									"scores":	[-4.982766493256678]
								}, {
									"case":	186,
									"scores":	[-4.982766493256678]
								}, {
									"case":	187,
									"scores":	[-4.982766493256678]
								}, {
									"case":	188,
									"scores":	[-4.982766493256678]
								}, {
									"case":	189,
									"scores":	[-4.982766493256678]
								}, {
									"case":	190,
									"scores":	[-4.982766493256678]
								}, {
									"case":	191,
									"scores":	[-4.982766493256678]
								}, {
									"case":	192,
									"scores":	[-4.982766493256678]
								}, {
									"case":	193,
									"scores":	[-4.982766493256678]
								}, {
									"case":	194,
									"scores":	[-4.982766493256678]
								}, {
									"case":	195,
									"scores":	[-4.982766493256678]
								}, {
									"case":	196,
									"scores":	[-4.982766493256678]
								}, {
									"case":	197,
									"scores":	[-4.982766493256678]
								}, {
									"case":	198,
									"scores":	[-4.982766493256678]
								}, {
									"case":	199,
									"scores":	[-4.982766493256678]
								}, {
									"case":	200,
									"scores":	[-4.982766493256678]
								}, {
									"case":	201,
									"scores":	[-4.982766493256678]
								}, {
									"case":	202,
									"scores":	[-4.982766493256678]
								}, {
									"case":	203,
									"scores":	[-4.982766493256678]
								}, {
									"case":	204,
									"scores":	[-4.982766493256678]
								}, {
									"case":	205,
									"scores":	[-4.982766493256678]
								}, {
									"case":	206,
									"scores":	[-4.982766493256678]
								}, {
									"case":	207,
									"scores":	[-4.982766493256678]
								}, {
									"case":	208,
									"scores":	[-4.982766493256678]
								}, {
									"case":	209,
									"scores":	[-4.982766493256678]
								}, {
									"case":	210,
									"scores":	[-4.982766493256678]
								}, {
									"case":	211,
									"scores":	[-4.982766493256678]
								}, {
									"case":	212,
									"scores":	[-4.982766493256678]
								}, {
									"case":	213,
									"scores":	[-4.982766493256678]
								}, {
									"case":	214,
									"scores":	[-4.982766493256678]
								}, {
									"case":	215,
									"scores":	[-4.982766493256678]
								}, {
									"case":	216,
									"scores":	[-4.982766493256678]
								}, {
									"case":	217,
									"scores":	[-4.982766493256678]
								}, {
									"case":	218,
									"scores":	[-4.982766493256678]
								}, {
									"case":	219,
									"scores":	[-4.982766493256678]
								}, {
									"case":	220,
									"scores":	[-4.982766493256678]
								}, {
									"case":	221,
									"scores":	[-4.982766493256678]
								}, {
									"case":	222,
									"scores":	[-4.982766493256678]
								}, {
									"case":	223,
									"scores":	[-4.982766493256678]
								}, {
									"case":	224,
									"scores":	[-4.982766493256678]
								}, {
									"case":	225,
									"scores":	[-4.982766493256678]
								}, {
									"case":	226,
									"scores":	[-4.982766493256678]
								}, {
									"case":	227,
									"scores":	[-4.982766493256678]
								}, {
									"case":	228,
									"scores":	[-4.982766493256678]
								}, {
									"case":	229,
									"scores":	[-4.982766493256678]
								}, {
									"case":	230,
									"scores":	[-4.982766493256678]
								}, {
									"case":	231,
									"scores":	[-4.982766493256678]
								}, {
									"case":	232,
									"scores":	[-4.982766493256678]
								}, {
									"case":	233,
									"scores":	[-4.982766493256678]
								}, {
									"case":	234,
									"scores":	[-4.982766493256678]
								}, {
									"case":	235,
									"scores":	[-4.982766493256678]
								}, {
									"case":	236,
									"scores":	[-4.982766493256678]
								}, {
									"case":	237,
									"scores":	[-4.982766493256678]
								}, {
									"case":	238,
									"scores":	[-4.982766493256678]
								}, {
									"case":	239,
									"scores":	[-4.982766493256678]
								}, {
									"case":	240,
									"scores":	[-4.982766493256678]
								}, {
									"case":	241,
									"scores":	[-4.982766493256678]
								}, {
									"case":	242,
									"scores":	[-4.982766493256678]
								}, {
									"case":	243,
									"scores":	[-4.982766493256678]
								}, {
									"case":	244,
									"scores":	[-4.982766493256678]
								}, {
									"case":	245,
									"scores":	[-4.982766493256678]
								}, {
									"case":	246,
									"scores":	[-4.982766493256678]
								}, {
									"case":	247,
									"scores":	[-4.982766493256678]
								}, {
									"case":	248,
									"scores":	[-4.982766493256678]
								}, {
									"case":	249,
									"scores":	[-4.982766493256678]
								}, {
									"case":	250,
									"scores":	[-4.982766493256678]
								}, {
									"case":	251,
									"scores":	[-4.982766493256678]
								}, {
									"case":	252,
									"scores":	[-4.982766493256678]
								}, {
									"case":	253,
									"scores":	[-4.982766493256678]
								}, {
									"case":	254,
									"scores":	[-4.982766493256678]
								}, {
									"case":	255,
									"scores":	[-4.982766493256678]
								}, {
									"case":	256,
									"scores":	[-4.982766493256678]
								}, {
									"case":	257,
									"scores":	[-4.982766493256678]
								}, {
									"case":	258,
									"scores":	[-4.982766493256678]
								}, {
									"case":	259,
									"scores":	[-4.982766493256678]
								}, {
									"case":	260,
									"scores":	[-4.982766493256678]
								}, {
									"case":	261,
									"scores":	[-4.982766493256678]
								}, {
									"case":	262,
									"scores":	[-4.982766493256678]
								}, {
									"case":	263,
									"scores":	[-4.982766493256678]
								}, {
									"case":	264,
									"scores":	[-4.982766493256678]
								}, {
									"case":	265,
									"scores":	[-4.982766493256678]
								}, {
									"case":	266,
									"scores":	[-4.982766493256678]
								}, {
									"case":	267,
									"scores":	[-4.982766493256678]
								}, {
									"case":	268,
									"scores":	[-4.982766493256678]
								}, {
									"case":	269,
									"scores":	[-4.982766493256678]
								}, {
									"case":	270,
									"scores":	[-4.982766493256678]
								}, {
									"case":	271,
									"scores":	[-4.982766493256678]
								}, {
									"case":	272,
									"scores":	[-4.982766493256678]
								}, {
									"case":	273,
									"scores":	[-4.982766493256678]
								}, {
									"case":	274,
									"scores":	[-4.982766493256678]
								}, {
									"case":	275,
									"scores":	[-4.982766493256678]
								}, {
									"case":	276,
									"scores":	[-4.982766493256678]
								}, {
									"case":	277,
									"scores":	[-4.982766493256678]
								}, {
									"case":	278,
									"scores":	[-4.982766493256678]
								}, {
									"case":	279,
									"scores":	[-4.982766493256678]
								}, {
									"case":	280,
									"scores":	[-4.982766493256678]
								}, {
									"case":	281,
									"scores":	[-4.982766493256678]
								}, {
									"case":	282,
									"scores":	[-4.982766493256678]
								}, {
									"case":	283,
									"scores":	[-4.982766493256678]
								}, {
									"case":	284,
									"scores":	[-4.982766493256678]
								}, {
									"case":	285,
									"scores":	[-4.982766493256678]
								}, {
									"case":	286,
									"scores":	[-4.982766493256678]
								}, {
									"case":	287,
									"scores":	[-4.982766493256678]
								}, {
									"case":	288,
									"scores":	[-4.982766493256678]
								}, {
									"case":	289,
									"scores":	[-4.982766493256678]
								}, {
									"case":	290,
									"scores":	[-4.982766493256678]
								}, {
									"case":	291,
									"scores":	[-4.982766493256678]
								}, {
									"case":	292,
									"scores":	[-4.982766493256678]
								}, {
									"case":	293,
									"scores":	[-4.982766493256678]
								}, {
									"case":	294,
									"scores":	[-4.982766493256678]
								}, {
									"case":	295,
									"scores":	[-4.982766493256678]
								}, {
									"case":	296,
									"scores":	[-4.982766493256678]
								}, {
									"case":	297,
									"scores":	[-4.982766493256678]
								}, {
									"case":	298,
									"scores":	[-4.982766493256678]
								}, {
									"case":	299,
									"scores":	[-4.982766493256678]
								}, {
									"case":	300,
									"scores":	[-4.982766493256678]
								}, {
									"case":	301,
									"scores":	[-4.982766493256678]
								}, {
									"case":	302,
									"scores":	[-4.982766493256678]
								}, {
									"case":	303,
									"scores":	[-4.982766493256678]
								}, {
									"case":	304,
									"scores":	[-4.982766493256678]
								}, {
									"case":	305,
									"scores":	[-4.982766493256678]
								}, {
									"case":	306,
									"scores":	[-4.982766493256678]
								}, {
									"case":	307,
									"scores":	[-4.982766493256678]
								}, {
									"case":	308,
									"scores":	[-4.982766493256678]
								}, {
									"case":	309,
									"scores":	[-4.982766493256678]
								}, {
									"case":	310,
									"scores":	[-4.982766493256678]
								}, {
									"case":	311,
									"scores":	[-4.982766493256678]
								}, {
									"case":	312,
									"scores":	[-4.982766493256678]
								}, {
									"case":	313,
									"scores":	[-4.982766493256678]
								}, {
									"case":	314,
									"scores":	[-4.982766493256678]
								}, {
									"case":	315,
									"scores":	[-4.982766493256678]
								}, {
									"case":	316,
									"scores":	[-4.982766493256678]
								}, {
									"case":	317,
									"scores":	[-4.982766493256678]
								}, {
									"case":	318,
									"scores":	[-4.982766493256678]
								}, {
									"case":	319,
									"scores":	[-4.982766493256678]
								}, {
									"case":	320,
									"scores":	[-4.982766493256678]
								}, {
									"case":	321,
									"scores":	[-4.982766493256678]
								}, {
									"case":	322,
									"scores":	[-4.982766493256678]
								}, {
									"case":	323,
									"scores":	[-4.982766493256678]
								}, {
									"case":	324,
									"scores":	[-4.982766493256678]
								}, {
									"case":	325,
									"scores":	[-4.982766493256678]
								}, {
									"case":	326,
									"scores":	[-4.982766493256678]
								}, {
									"case":	327,
									"scores":	[-4.982766493256678]
								}, {
									"case":	328,
									"scores":	[-4.982766493256678]
								}, {
									"case":	329,
									"scores":	[-4.982766493256678]
								}, {
									"case":	330,
									"scores":	[-4.982766493256678]
								}, {
									"case":	331,
									"scores":	[-4.982766493256678]
								}, {
									"case":	332,
									"scores":	[-4.982766493256678]
								}, {
									"case":	333,
									"scores":	[-4.982766493256678]
								}, {
									"case":	334,
									"scores":	[-4.982766493256678]
								}, {
									"case":	335,
									"scores":	[-4.982766493256678]
								}, {
									"case":	336,
									"scores":	[-4.982766493256678]
								}, {
									"case":	337,
									"scores":	[-4.982766493256678]
								}, {
									"case":	338,
									"scores":	[-4.982766493256678]
								}, {
									"case":	339,
									"scores":	[-4.982766493256678]
								}, {
									"case":	340,
									"scores":	[-4.982766493256678]
								}, {
									"case":	341,
									"scores":	[-4.982766493256678]
								}, {
									"case":	342,
									"scores":	[-4.982766493256678]
								}, {
									"case":	343,
									"scores":	[-4.982766493256678]
								}, {
									"case":	344,
									"scores":	[-4.982766493256678]
								}, {
									"case":	345,
									"scores":	[-4.982766493256678]
								}, {
									"case":	346,
									"scores":	[-4.982766493256678]
								}, {
									"case":	347,
									"scores":	[-4.982766493256678]
								}, {
									"case":	348,
									"scores":	[-4.982766493256678]
								}, {
									"case":	349,
									"scores":	[-4.982766493256678]
								}, {
									"case":	350,
									"scores":	[-4.982766493256678]
								}, {
									"case":	351,
									"scores":	[-4.982766493256678]
								}, {
									"case":	352,
									"scores":	[-4.982766493256678]
								}, {
									"case":	353,
									"scores":	[-4.982766493256678]
								}, {
									"case":	354,
									"scores":	[-4.982766493256678]
								}, {
									"case":	355,
									"scores":	[-4.982766493256678]
								}, {
									"case":	356,
									"scores":	[-4.982766493256678]
								}, {
									"case":	357,
									"scores":	[-4.982766493256678]
								}, {
									"case":	358,
									"scores":	[-4.982766493256678]
								}, {
									"case":	359,
									"scores":	[-4.982766493256678]
								}, {
									"case":	360,
									"scores":	[-4.982766493256678]
								}, {
									"case":	361,
									"scores":	[-4.982766493256678]
								}, {
									"case":	362,
									"scores":	[-4.982766493256678]
								}, {
									"case":	363,
									"scores":	[-4.982766493256678]
								}, {
									"case":	364,
									"scores":	[-4.982766493256678]
								}, {
									"case":	365,
									"scores":	[-4.982766493256678]
								}, {
									"case":	366,
									"scores":	[-4.982766493256678]
								}, {
									"case":	367,
									"scores":	[-4.982766493256678]
								}, {
									"case":	368,
									"scores":	[-4.982766493256678]
								}, {
									"case":	369,
									"scores":	[-4.982766493256678]
								}, {
									"case":	370,
									"scores":	[-4.982766493256678]
								}, {
									"case":	371,
									"scores":	[-4.982766493256678]
								}, {
									"case":	372,
									"scores":	[-4.982766493256678]
								}, {
									"case":	373,
									"scores":	[-4.982766493256678]
								}, {
									"case":	374,
									"scores":	[-4.982766493256678]
								}, {
									"case":	375,
									"scores":	[-4.982766493256678]
								}, {
									"case":	376,
									"scores":	[-4.982766493256678]
								}, {
									"case":	377,
									"scores":	[-4.982766493256678]
								}, {
									"case":	378,
									"scores":	[-4.982766493256678]
								}, {
									"case":	379,
									"scores":	[-4.982766493256678]
								}, {
									"case":	380,
									"scores":	[-4.982766493256678]
								}, {
									"case":	381,
									"scores":	[-4.982766493256678]
								}, {
									"case":	382,
									"scores":	[-4.982766493256678]
								}, {
									"case":	383,
									"scores":	[-4.982766493256678]
								}, {
									"case":	384,
									"scores":	[-4.982766493256678]
								}, {
									"case":	385,
									"scores":	[-4.982766493256678]
								}, {
									"case":	386,
									"scores":	[-4.982766493256678]
								}, {
									"case":	387,
									"scores":	[-4.982766493256678]
								}, {
									"case":	388,
									"scores":	[-4.982766493256678]
								}, {
									"case":	389,
									"scores":	[-4.982766493256678]
								}, {
									"case":	390,
									"scores":	[-4.982766493256678]
								}, {
									"case":	391,
									"scores":	[-4.982766493256678]
								}, {
									"case":	392,
									"scores":	[-4.982766493256678]
								}, {
									"case":	393,
									"scores":	[-4.982766493256678]
								}, {
									"case":	394,
									"scores":	[-4.982766493256678]
								}, {
									"case":	395,
									"scores":	[-4.982766493256678]
								}, {
									"case":	396,
									"scores":	[-4.982766493256678]
								}, {
									"case":	397,
									"scores":	[-4.982766493256678]
								}, {
									"case":	398,
									"scores":	[-4.982766493256678]
								}, {
									"case":	399,
									"scores":	[-4.982766493256678]
								}, {
									"case":	400,
									"scores":	[-4.982766493256678]
								}, {
									"case":	401,
									"scores":	[-4.982766493256678]
								}, {
									"case":	402,
									"scores":	[-4.982766493256678]
								}, {
									"case":	403,
									"scores":	[-4.982766493256678]
								}, {
									"case":	404,
									"scores":	[-4.982766493256678]
								}, {
									"case":	405,
									"scores":	[-4.982766493256678]
								}, {
									"case":	406,
									"scores":	[-4.982766493256678]
								}, {
									"case":	407,
									"scores":	[-4.982766493256678]
								}, {
									"case":	408,
									"scores":	[-4.982766493256678]
								}, {
									"case":	409,
									"scores":	[-4.982766493256678]
								}, {
									"case":	410,
									"scores":	[-4.982766493256678]
								}, {
									"case":	411,
									"scores":	[-4.982766493256678]
								}, {
									"case":	412,
									"scores":	[-4.982766493256678]
								}, {
									"case":	413,
									"scores":	[-4.982766493256678]
								}, {
									"case":	414,
									"scores":	[-4.982766493256678]
								}, {
									"case":	415,
									"scores":	[-4.982766493256678]
								}, {
									"case":	416,
									"scores":	[-4.982766493256678]
								}, {
									"case":	417,
									"scores":	[-4.982766493256678]
								}, {
									"case":	418,
									"scores":	[-4.982766493256678]
								}, {
									"case":	419,
									"scores":	[-4.982766493256678]
								}, {
									"case":	420,
									"scores":	[-4.982766493256678]
								}, {
									"case":	421,
									"scores":	[-4.982766493256678]
								}, {
									"case":	422,
									"scores":	[-4.982766493256678]
								}, {
									"case":	423,
									"scores":	[-4.982766493256678]
								}, {
									"case":	424,
									"scores":	[-4.982766493256678]
								}, {
									"case":	425,
									"scores":	[-8.00477923015668, -7.4409226332566778, -7.8303251860566778, -7.8303251860566778, -7.7291849163566777, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.7291849163566777, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.6397622163566776, -7.4134931532566775, -7.6397622163566776]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [], [], [], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [], [], [], [], [2]],
							"begin_line":	860,
							"begin_column":	2,
							"end_line":	860,
							"end_column":	50,
							"patch_codes":	["if (!__is_neg(\"\", \"L860\", 38, &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    sigprocmask(0, &caught_signals, &oldset);\n", "{\n}\n", "__asprintf(0, &caught_signals, &oldset)", "__const_select(0, &caught_signals, &oldset)", "__printf__(0, &caught_signals, &oldset)", "asprintf(0, &caught_signals, &oldset)", "dprintf(0, &caught_signals, &oldset)", "execl(0, &caught_signals, &oldset)", "execle(0, &caught_signals, &oldset)", "execlp(0, &caught_signals, &oldset)", "fprintf(0, &caught_signals, &oldset)", "obstack_printf(0, &caught_signals, &oldset)", "printf(0, &caught_signals, &oldset)", "pthread_sigmask(0, &caught_signals, &oldset)", "rpl_fprintf(0, &caught_signals, &oldset)", "sigandset(0, &caught_signals, &oldset)", "sigorset(0, &caught_signals, &oldset)", "sprintf(0, &caught_signals, &oldset)", "syscall(0, &caught_signals, &oldset)", "sigprocmask((0 * unlink_errno), &caught_signals, &oldset)", "sigprocmask((0), &caught_signals, &oldset)", "sigprocmask((iname != 0), &caught_signals, &oldset)", "sigprocmask((iname == 0), &caught_signals, &oldset)", "sigprocmask((oldset != 0), &caught_signals, &oldset)", "sigprocmask((oldset == 0), &caught_signals, &oldset)", "sigprocmask((unlink_errno != 0), &caught_signals, &oldset)", "sigprocmask((unlink_errno + 0), &caught_signals, &oldset)", "sigprocmask((unlink_errno - 0), &caught_signals, &oldset)", "sigprocmask((unlink_errno == 0), &caught_signals, &oldset)", "sigprocmask(0, &(oldset), &oldset)", "sigprocmask(0, &caught_signals, &(oldset))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0455643702566775, -4.7735070112566778, -5.2762379129566783, -5.2762379129566783, -5.7252755932566783, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.7252755932566783, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.2883105932566785, -5.5087017932566784, -5.2883105932566785]
								}, {
									"case":	2,
									"scores":	[-4.982766493256678]
								}, {
									"case":	3,
									"scores":	[-4.982766493256678]
								}, {
									"case":	4,
									"scores":	[-4.982766493256678]
								}, {
									"case":	5,
									"scores":	[-4.982766493256678]
								}, {
									"case":	6,
									"scores":	[-4.982766493256678]
								}, {
									"case":	7,
									"scores":	[-4.982766493256678]
								}, {
									"case":	8,
									"scores":	[-4.982766493256678]
								}, {
									"case":	9,
									"scores":	[-4.982766493256678]
								}, {
									"case":	10,
									"scores":	[-4.982766493256678]
								}, {
									"case":	11,
									"scores":	[-4.982766493256678]
								}, {
									"case":	12,
									"scores":	[-4.982766493256678]
								}, {
									"case":	13,
									"scores":	[-4.982766493256678]
								}, {
									"case":	14,
									"scores":	[-4.982766493256678]
								}, {
									"case":	15,
									"scores":	[-4.982766493256678]
								}, {
									"case":	16,
									"scores":	[-4.982766493256678]
								}, {
									"case":	17,
									"scores":	[-4.982766493256678]
								}, {
									"case":	18,
									"scores":	[-4.982766493256678]
								}, {
									"case":	19,
									"scores":	[-4.982766493256678]
								}, {
									"case":	20,
									"scores":	[-4.982766493256678]
								}, {
									"case":	21,
									"scores":	[-4.982766493256678]
								}, {
									"case":	22,
									"scores":	[-4.982766493256678]
								}, {
									"case":	23,
									"scores":	[-4.982766493256678]
								}, {
									"case":	24,
									"scores":	[-4.982766493256678]
								}, {
									"case":	25,
									"scores":	[-4.982766493256678]
								}, {
									"case":	26,
									"scores":	[-4.982766493256678]
								}, {
									"case":	27,
									"scores":	[-4.982766493256678]
								}, {
									"case":	28,
									"scores":	[-4.982766493256678]
								}, {
									"case":	29,
									"scores":	[-4.982766493256678]
								}, {
									"case":	30,
									"scores":	[-4.982766493256678]
								}, {
									"case":	31,
									"scores":	[-4.982766493256678]
								}]
						}]
				}, {
					"line":	860,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [425], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [], [], [], [], [], []],
							"begin_line":	861,
							"begin_column":	0,
							"end_line":	861,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (unlink_errno)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (unlink_errno)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (unlink_errno)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (unlink_errno)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (unlink_errno)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (unlink_errno)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (unlink_errno)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (unlink_errno)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (unlink_errno)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (unlink_errno)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (unlink_errno)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (unlink_errno)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (unlink_errno)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (unlink_errno)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (unlink_errno)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location())", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L861\", 38, &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.94236107862164]
								}, {
									"case":	2,
									"scores":	[-4.94236107862164]
								}, {
									"case":	3,
									"scores":	[-4.94236107862164]
								}, {
									"case":	4,
									"scores":	[-4.94236107862164]
								}, {
									"case":	5,
									"scores":	[-4.94236107862164]
								}, {
									"case":	6,
									"scores":	[-4.94236107862164]
								}, {
									"case":	7,
									"scores":	[-4.94236107862164]
								}, {
									"case":	8,
									"scores":	[-4.94236107862164]
								}, {
									"case":	9,
									"scores":	[-4.94236107862164]
								}, {
									"case":	10,
									"scores":	[-4.94236107862164]
								}, {
									"case":	11,
									"scores":	[-4.94236107862164]
								}, {
									"case":	12,
									"scores":	[-4.94236107862164]
								}, {
									"case":	13,
									"scores":	[-4.94236107862164]
								}, {
									"case":	14,
									"scores":	[-4.94236107862164]
								}, {
									"case":	15,
									"scores":	[-4.94236107862164]
								}, {
									"case":	16,
									"scores":	[-4.94236107862164]
								}, {
									"case":	17,
									"scores":	[-4.94236107862164]
								}, {
									"case":	18,
									"scores":	[-4.94236107862164]
								}, {
									"case":	19,
									"scores":	[-4.94236107862164]
								}, {
									"case":	20,
									"scores":	[-4.94236107862164]
								}, {
									"case":	21,
									"scores":	[-4.94236107862164]
								}, {
									"case":	22,
									"scores":	[-4.94236107862164]
								}, {
									"case":	23,
									"scores":	[-4.94236107862164]
								}, {
									"case":	24,
									"scores":	[-4.94236107862164]
								}, {
									"case":	25,
									"scores":	[-4.94236107862164]
								}, {
									"case":	26,
									"scores":	[-4.94236107862164]
								}, {
									"case":	27,
									"scores":	[-4.94236107862164]
								}, {
									"case":	28,
									"scores":	[-4.94236107862164]
								}, {
									"case":	29,
									"scores":	[-4.94236107862164]
								}, {
									"case":	30,
									"scores":	[-4.94236107862164]
								}, {
									"case":	31,
									"scores":	[-4.94236107862164]
								}, {
									"case":	32,
									"scores":	[-4.94236107862164]
								}, {
									"case":	33,
									"scores":	[-4.94236107862164]
								}, {
									"case":	34,
									"scores":	[-4.94236107862164]
								}, {
									"case":	35,
									"scores":	[-4.94236107862164]
								}, {
									"case":	36,
									"scores":	[-4.94236107862164]
								}, {
									"case":	37,
									"scores":	[-4.94236107862164]
								}, {
									"case":	38,
									"scores":	[-4.94236107862164]
								}, {
									"case":	39,
									"scores":	[-4.94236107862164]
								}, {
									"case":	40,
									"scores":	[-4.94236107862164]
								}, {
									"case":	41,
									"scores":	[-4.94236107862164]
								}, {
									"case":	42,
									"scores":	[-4.94236107862164]
								}, {
									"case":	43,
									"scores":	[-4.94236107862164]
								}, {
									"case":	44,
									"scores":	[-4.94236107862164]
								}, {
									"case":	45,
									"scores":	[-4.94236107862164]
								}, {
									"case":	46,
									"scores":	[-4.94236107862164]
								}, {
									"case":	47,
									"scores":	[-4.94236107862164]
								}, {
									"case":	48,
									"scores":	[-4.94236107862164]
								}, {
									"case":	49,
									"scores":	[-4.94236107862164]
								}, {
									"case":	50,
									"scores":	[-4.94236107862164]
								}, {
									"case":	51,
									"scores":	[-4.94236107862164]
								}, {
									"case":	52,
									"scores":	[-4.94236107862164]
								}, {
									"case":	53,
									"scores":	[-4.94236107862164]
								}, {
									"case":	54,
									"scores":	[-4.94236107862164]
								}, {
									"case":	55,
									"scores":	[-4.94236107862164]
								}, {
									"case":	56,
									"scores":	[-4.94236107862164]
								}, {
									"case":	57,
									"scores":	[-4.94236107862164]
								}, {
									"case":	58,
									"scores":	[-4.94236107862164]
								}, {
									"case":	59,
									"scores":	[-4.94236107862164]
								}, {
									"case":	60,
									"scores":	[-4.94236107862164]
								}, {
									"case":	61,
									"scores":	[-4.94236107862164]
								}, {
									"case":	62,
									"scores":	[-4.94236107862164]
								}, {
									"case":	63,
									"scores":	[-4.94236107862164]
								}, {
									"case":	64,
									"scores":	[-4.94236107862164]
								}, {
									"case":	65,
									"scores":	[-4.94236107862164]
								}, {
									"case":	66,
									"scores":	[-4.94236107862164]
								}, {
									"case":	67,
									"scores":	[-4.94236107862164]
								}, {
									"case":	68,
									"scores":	[-4.94236107862164]
								}, {
									"case":	69,
									"scores":	[-4.94236107862164]
								}, {
									"case":	70,
									"scores":	[-4.94236107862164]
								}, {
									"case":	71,
									"scores":	[-4.94236107862164]
								}, {
									"case":	72,
									"scores":	[-4.94236107862164]
								}, {
									"case":	73,
									"scores":	[-4.94236107862164]
								}, {
									"case":	74,
									"scores":	[-4.94236107862164]
								}, {
									"case":	75,
									"scores":	[-4.94236107862164]
								}, {
									"case":	76,
									"scores":	[-4.94236107862164]
								}, {
									"case":	77,
									"scores":	[-4.94236107862164]
								}, {
									"case":	78,
									"scores":	[-4.94236107862164]
								}, {
									"case":	79,
									"scores":	[-4.94236107862164]
								}, {
									"case":	80,
									"scores":	[-4.94236107862164]
								}, {
									"case":	81,
									"scores":	[-4.94236107862164]
								}, {
									"case":	82,
									"scores":	[-4.94236107862164]
								}, {
									"case":	83,
									"scores":	[-4.94236107862164]
								}, {
									"case":	84,
									"scores":	[-4.94236107862164]
								}, {
									"case":	85,
									"scores":	[-4.94236107862164]
								}, {
									"case":	86,
									"scores":	[-4.94236107862164]
								}, {
									"case":	87,
									"scores":	[-4.94236107862164]
								}, {
									"case":	88,
									"scores":	[-4.94236107862164]
								}, {
									"case":	89,
									"scores":	[-4.94236107862164]
								}, {
									"case":	90,
									"scores":	[-4.94236107862164]
								}, {
									"case":	91,
									"scores":	[-4.94236107862164]
								}, {
									"case":	92,
									"scores":	[-4.94236107862164]
								}, {
									"case":	93,
									"scores":	[-4.94236107862164]
								}, {
									"case":	94,
									"scores":	[-4.94236107862164]
								}, {
									"case":	95,
									"scores":	[-4.94236107862164]
								}, {
									"case":	96,
									"scores":	[-4.94236107862164]
								}, {
									"case":	97,
									"scores":	[-4.94236107862164]
								}, {
									"case":	98,
									"scores":	[-4.94236107862164]
								}, {
									"case":	99,
									"scores":	[-4.94236107862164]
								}, {
									"case":	100,
									"scores":	[-4.94236107862164]
								}, {
									"case":	101,
									"scores":	[-4.94236107862164]
								}, {
									"case":	102,
									"scores":	[-4.94236107862164]
								}, {
									"case":	103,
									"scores":	[-4.94236107862164]
								}, {
									"case":	104,
									"scores":	[-4.94236107862164]
								}, {
									"case":	105,
									"scores":	[-4.94236107862164]
								}, {
									"case":	106,
									"scores":	[-4.94236107862164]
								}, {
									"case":	107,
									"scores":	[-4.94236107862164]
								}, {
									"case":	108,
									"scores":	[-4.94236107862164]
								}, {
									"case":	109,
									"scores":	[-4.94236107862164]
								}, {
									"case":	110,
									"scores":	[-4.94236107862164]
								}, {
									"case":	111,
									"scores":	[-4.94236107862164]
								}, {
									"case":	112,
									"scores":	[-4.94236107862164]
								}, {
									"case":	113,
									"scores":	[-4.94236107862164]
								}, {
									"case":	114,
									"scores":	[-4.94236107862164]
								}, {
									"case":	115,
									"scores":	[-4.94236107862164]
								}, {
									"case":	116,
									"scores":	[-4.94236107862164]
								}, {
									"case":	117,
									"scores":	[-4.94236107862164]
								}, {
									"case":	118,
									"scores":	[-4.94236107862164]
								}, {
									"case":	119,
									"scores":	[-4.94236107862164]
								}, {
									"case":	120,
									"scores":	[-4.94236107862164]
								}, {
									"case":	121,
									"scores":	[-4.94236107862164]
								}, {
									"case":	122,
									"scores":	[-4.94236107862164]
								}, {
									"case":	123,
									"scores":	[-4.94236107862164]
								}, {
									"case":	124,
									"scores":	[-4.94236107862164]
								}, {
									"case":	125,
									"scores":	[-4.94236107862164]
								}, {
									"case":	126,
									"scores":	[-4.94236107862164]
								}, {
									"case":	127,
									"scores":	[-4.94236107862164]
								}, {
									"case":	128,
									"scores":	[-4.94236107862164]
								}, {
									"case":	129,
									"scores":	[-4.94236107862164]
								}, {
									"case":	130,
									"scores":	[-4.94236107862164]
								}, {
									"case":	131,
									"scores":	[-4.94236107862164]
								}, {
									"case":	132,
									"scores":	[-4.94236107862164]
								}, {
									"case":	133,
									"scores":	[-4.94236107862164]
								}, {
									"case":	134,
									"scores":	[-4.94236107862164]
								}, {
									"case":	135,
									"scores":	[-4.94236107862164]
								}, {
									"case":	136,
									"scores":	[-4.94236107862164]
								}, {
									"case":	137,
									"scores":	[-4.94236107862164]
								}, {
									"case":	138,
									"scores":	[-4.94236107862164]
								}, {
									"case":	139,
									"scores":	[-4.94236107862164]
								}, {
									"case":	140,
									"scores":	[-4.94236107862164]
								}, {
									"case":	141,
									"scores":	[-4.94236107862164]
								}, {
									"case":	142,
									"scores":	[-4.94236107862164]
								}, {
									"case":	143,
									"scores":	[-4.94236107862164]
								}, {
									"case":	144,
									"scores":	[-4.94236107862164]
								}, {
									"case":	145,
									"scores":	[-4.94236107862164]
								}, {
									"case":	146,
									"scores":	[-4.94236107862164]
								}, {
									"case":	147,
									"scores":	[-4.94236107862164]
								}, {
									"case":	148,
									"scores":	[-4.94236107862164]
								}, {
									"case":	149,
									"scores":	[-4.94236107862164]
								}, {
									"case":	150,
									"scores":	[-4.94236107862164]
								}, {
									"case":	151,
									"scores":	[-4.94236107862164]
								}, {
									"case":	152,
									"scores":	[-4.94236107862164]
								}, {
									"case":	153,
									"scores":	[-4.94236107862164]
								}, {
									"case":	154,
									"scores":	[-4.94236107862164]
								}, {
									"case":	155,
									"scores":	[-4.94236107862164]
								}, {
									"case":	156,
									"scores":	[-4.94236107862164]
								}, {
									"case":	157,
									"scores":	[-4.94236107862164]
								}, {
									"case":	158,
									"scores":	[-4.94236107862164]
								}, {
									"case":	159,
									"scores":	[-4.94236107862164]
								}, {
									"case":	160,
									"scores":	[-4.94236107862164]
								}, {
									"case":	161,
									"scores":	[-4.94236107862164]
								}, {
									"case":	162,
									"scores":	[-4.94236107862164]
								}, {
									"case":	163,
									"scores":	[-4.94236107862164]
								}, {
									"case":	164,
									"scores":	[-4.94236107862164]
								}, {
									"case":	165,
									"scores":	[-4.94236107862164]
								}, {
									"case":	166,
									"scores":	[-4.94236107862164]
								}, {
									"case":	167,
									"scores":	[-4.94236107862164]
								}, {
									"case":	168,
									"scores":	[-4.94236107862164]
								}, {
									"case":	169,
									"scores":	[-4.94236107862164]
								}, {
									"case":	170,
									"scores":	[-4.94236107862164]
								}, {
									"case":	171,
									"scores":	[-4.94236107862164]
								}, {
									"case":	172,
									"scores":	[-4.94236107862164]
								}, {
									"case":	173,
									"scores":	[-4.94236107862164]
								}, {
									"case":	174,
									"scores":	[-4.94236107862164]
								}, {
									"case":	175,
									"scores":	[-4.94236107862164]
								}, {
									"case":	176,
									"scores":	[-4.94236107862164]
								}, {
									"case":	177,
									"scores":	[-4.94236107862164]
								}, {
									"case":	178,
									"scores":	[-4.94236107862164]
								}, {
									"case":	179,
									"scores":	[-4.94236107862164]
								}, {
									"case":	180,
									"scores":	[-4.94236107862164]
								}, {
									"case":	181,
									"scores":	[-4.94236107862164]
								}, {
									"case":	182,
									"scores":	[-4.94236107862164]
								}, {
									"case":	183,
									"scores":	[-4.94236107862164]
								}, {
									"case":	184,
									"scores":	[-4.94236107862164]
								}, {
									"case":	185,
									"scores":	[-4.94236107862164]
								}, {
									"case":	186,
									"scores":	[-4.94236107862164]
								}, {
									"case":	187,
									"scores":	[-4.94236107862164]
								}, {
									"case":	188,
									"scores":	[-4.94236107862164]
								}, {
									"case":	189,
									"scores":	[-4.94236107862164]
								}, {
									"case":	190,
									"scores":	[-4.94236107862164]
								}, {
									"case":	191,
									"scores":	[-4.94236107862164]
								}, {
									"case":	192,
									"scores":	[-4.94236107862164]
								}, {
									"case":	193,
									"scores":	[-4.94236107862164]
								}, {
									"case":	194,
									"scores":	[-4.94236107862164]
								}, {
									"case":	195,
									"scores":	[-4.94236107862164]
								}, {
									"case":	196,
									"scores":	[-4.94236107862164]
								}, {
									"case":	197,
									"scores":	[-4.94236107862164]
								}, {
									"case":	198,
									"scores":	[-4.94236107862164]
								}, {
									"case":	199,
									"scores":	[-4.94236107862164]
								}, {
									"case":	200,
									"scores":	[-4.94236107862164]
								}, {
									"case":	201,
									"scores":	[-4.94236107862164]
								}, {
									"case":	202,
									"scores":	[-4.94236107862164]
								}, {
									"case":	203,
									"scores":	[-4.94236107862164]
								}, {
									"case":	204,
									"scores":	[-4.94236107862164]
								}, {
									"case":	205,
									"scores":	[-4.94236107862164]
								}, {
									"case":	206,
									"scores":	[-4.94236107862164]
								}, {
									"case":	207,
									"scores":	[-4.94236107862164]
								}, {
									"case":	208,
									"scores":	[-4.94236107862164]
								}, {
									"case":	209,
									"scores":	[-4.94236107862164]
								}, {
									"case":	210,
									"scores":	[-4.94236107862164]
								}, {
									"case":	211,
									"scores":	[-4.94236107862164]
								}, {
									"case":	212,
									"scores":	[-4.94236107862164]
								}, {
									"case":	213,
									"scores":	[-4.94236107862164]
								}, {
									"case":	214,
									"scores":	[-4.94236107862164]
								}, {
									"case":	215,
									"scores":	[-4.94236107862164]
								}, {
									"case":	216,
									"scores":	[-4.94236107862164]
								}, {
									"case":	217,
									"scores":	[-4.94236107862164]
								}, {
									"case":	218,
									"scores":	[-4.94236107862164]
								}, {
									"case":	219,
									"scores":	[-4.94236107862164]
								}, {
									"case":	220,
									"scores":	[-4.94236107862164]
								}, {
									"case":	221,
									"scores":	[-4.94236107862164]
								}, {
									"case":	222,
									"scores":	[-4.94236107862164]
								}, {
									"case":	223,
									"scores":	[-4.94236107862164]
								}, {
									"case":	224,
									"scores":	[-4.94236107862164]
								}, {
									"case":	225,
									"scores":	[-4.94236107862164]
								}, {
									"case":	226,
									"scores":	[-4.94236107862164]
								}, {
									"case":	227,
									"scores":	[-4.94236107862164]
								}, {
									"case":	228,
									"scores":	[-4.94236107862164]
								}, {
									"case":	229,
									"scores":	[-4.94236107862164]
								}, {
									"case":	230,
									"scores":	[-4.94236107862164]
								}, {
									"case":	231,
									"scores":	[-4.94236107862164]
								}, {
									"case":	232,
									"scores":	[-4.94236107862164]
								}, {
									"case":	233,
									"scores":	[-4.94236107862164]
								}, {
									"case":	234,
									"scores":	[-4.94236107862164]
								}, {
									"case":	235,
									"scores":	[-4.94236107862164]
								}, {
									"case":	236,
									"scores":	[-4.94236107862164]
								}, {
									"case":	237,
									"scores":	[-4.94236107862164]
								}, {
									"case":	238,
									"scores":	[-4.94236107862164]
								}, {
									"case":	239,
									"scores":	[-4.94236107862164]
								}, {
									"case":	240,
									"scores":	[-4.94236107862164]
								}, {
									"case":	241,
									"scores":	[-4.94236107862164]
								}, {
									"case":	242,
									"scores":	[-4.94236107862164]
								}, {
									"case":	243,
									"scores":	[-4.94236107862164]
								}, {
									"case":	244,
									"scores":	[-4.94236107862164]
								}, {
									"case":	245,
									"scores":	[-4.94236107862164]
								}, {
									"case":	246,
									"scores":	[-4.94236107862164]
								}, {
									"case":	247,
									"scores":	[-4.94236107862164]
								}, {
									"case":	248,
									"scores":	[-4.94236107862164]
								}, {
									"case":	249,
									"scores":	[-4.94236107862164]
								}, {
									"case":	250,
									"scores":	[-4.94236107862164]
								}, {
									"case":	251,
									"scores":	[-4.94236107862164]
								}, {
									"case":	252,
									"scores":	[-4.94236107862164]
								}, {
									"case":	253,
									"scores":	[-4.94236107862164]
								}, {
									"case":	254,
									"scores":	[-4.94236107862164]
								}, {
									"case":	255,
									"scores":	[-4.94236107862164]
								}, {
									"case":	256,
									"scores":	[-4.94236107862164]
								}, {
									"case":	257,
									"scores":	[-4.94236107862164]
								}, {
									"case":	258,
									"scores":	[-4.94236107862164]
								}, {
									"case":	259,
									"scores":	[-4.94236107862164]
								}, {
									"case":	260,
									"scores":	[-4.94236107862164]
								}, {
									"case":	261,
									"scores":	[-4.94236107862164]
								}, {
									"case":	262,
									"scores":	[-4.94236107862164]
								}, {
									"case":	263,
									"scores":	[-4.94236107862164]
								}, {
									"case":	264,
									"scores":	[-4.94236107862164]
								}, {
									"case":	265,
									"scores":	[-4.94236107862164]
								}, {
									"case":	266,
									"scores":	[-4.94236107862164]
								}, {
									"case":	267,
									"scores":	[-4.94236107862164]
								}, {
									"case":	268,
									"scores":	[-4.94236107862164]
								}, {
									"case":	269,
									"scores":	[-4.94236107862164]
								}, {
									"case":	270,
									"scores":	[-4.94236107862164]
								}, {
									"case":	271,
									"scores":	[-4.94236107862164]
								}, {
									"case":	272,
									"scores":	[-4.94236107862164]
								}, {
									"case":	273,
									"scores":	[-4.94236107862164]
								}, {
									"case":	274,
									"scores":	[-4.94236107862164]
								}, {
									"case":	275,
									"scores":	[-4.94236107862164]
								}, {
									"case":	276,
									"scores":	[-4.94236107862164]
								}, {
									"case":	277,
									"scores":	[-4.94236107862164]
								}, {
									"case":	278,
									"scores":	[-4.94236107862164]
								}, {
									"case":	279,
									"scores":	[-4.94236107862164]
								}, {
									"case":	280,
									"scores":	[-4.94236107862164]
								}, {
									"case":	281,
									"scores":	[-4.94236107862164]
								}, {
									"case":	282,
									"scores":	[-4.94236107862164]
								}, {
									"case":	283,
									"scores":	[-4.94236107862164]
								}, {
									"case":	284,
									"scores":	[-4.94236107862164]
								}, {
									"case":	285,
									"scores":	[-4.94236107862164]
								}, {
									"case":	286,
									"scores":	[-4.94236107862164]
								}, {
									"case":	287,
									"scores":	[-4.94236107862164]
								}, {
									"case":	288,
									"scores":	[-4.94236107862164]
								}, {
									"case":	289,
									"scores":	[-4.94236107862164]
								}, {
									"case":	290,
									"scores":	[-4.94236107862164]
								}, {
									"case":	291,
									"scores":	[-4.94236107862164]
								}, {
									"case":	292,
									"scores":	[-4.94236107862164]
								}, {
									"case":	293,
									"scores":	[-4.94236107862164]
								}, {
									"case":	294,
									"scores":	[-4.94236107862164]
								}, {
									"case":	295,
									"scores":	[-4.94236107862164]
								}, {
									"case":	296,
									"scores":	[-4.94236107862164]
								}, {
									"case":	297,
									"scores":	[-4.94236107862164]
								}, {
									"case":	298,
									"scores":	[-4.94236107862164]
								}, {
									"case":	299,
									"scores":	[-4.94236107862164]
								}, {
									"case":	300,
									"scores":	[-4.94236107862164]
								}, {
									"case":	301,
									"scores":	[-4.94236107862164]
								}, {
									"case":	302,
									"scores":	[-4.94236107862164]
								}, {
									"case":	303,
									"scores":	[-4.94236107862164]
								}, {
									"case":	304,
									"scores":	[-4.94236107862164]
								}, {
									"case":	305,
									"scores":	[-4.94236107862164]
								}, {
									"case":	306,
									"scores":	[-4.94236107862164]
								}, {
									"case":	307,
									"scores":	[-4.94236107862164]
								}, {
									"case":	308,
									"scores":	[-4.94236107862164]
								}, {
									"case":	309,
									"scores":	[-4.94236107862164]
								}, {
									"case":	310,
									"scores":	[-4.94236107862164]
								}, {
									"case":	311,
									"scores":	[-4.94236107862164]
								}, {
									"case":	312,
									"scores":	[-4.94236107862164]
								}, {
									"case":	313,
									"scores":	[-4.94236107862164]
								}, {
									"case":	314,
									"scores":	[-4.94236107862164]
								}, {
									"case":	315,
									"scores":	[-4.94236107862164]
								}, {
									"case":	316,
									"scores":	[-4.94236107862164]
								}, {
									"case":	317,
									"scores":	[-4.94236107862164]
								}, {
									"case":	318,
									"scores":	[-4.94236107862164]
								}, {
									"case":	319,
									"scores":	[-4.94236107862164]
								}, {
									"case":	320,
									"scores":	[-4.94236107862164]
								}, {
									"case":	321,
									"scores":	[-4.94236107862164]
								}, {
									"case":	322,
									"scores":	[-4.94236107862164]
								}, {
									"case":	323,
									"scores":	[-4.94236107862164]
								}, {
									"case":	324,
									"scores":	[-4.94236107862164]
								}, {
									"case":	325,
									"scores":	[-4.94236107862164]
								}, {
									"case":	326,
									"scores":	[-4.94236107862164]
								}, {
									"case":	327,
									"scores":	[-4.94236107862164]
								}, {
									"case":	328,
									"scores":	[-4.94236107862164]
								}, {
									"case":	329,
									"scores":	[-4.94236107862164]
								}, {
									"case":	330,
									"scores":	[-4.94236107862164]
								}, {
									"case":	331,
									"scores":	[-4.94236107862164]
								}, {
									"case":	332,
									"scores":	[-4.94236107862164]
								}, {
									"case":	333,
									"scores":	[-4.94236107862164]
								}, {
									"case":	334,
									"scores":	[-4.94236107862164]
								}, {
									"case":	335,
									"scores":	[-4.94236107862164]
								}, {
									"case":	336,
									"scores":	[-4.94236107862164]
								}, {
									"case":	337,
									"scores":	[-4.94236107862164]
								}, {
									"case":	338,
									"scores":	[-4.94236107862164]
								}, {
									"case":	339,
									"scores":	[-4.94236107862164]
								}, {
									"case":	340,
									"scores":	[-4.94236107862164]
								}, {
									"case":	341,
									"scores":	[-4.94236107862164]
								}, {
									"case":	342,
									"scores":	[-4.94236107862164]
								}, {
									"case":	343,
									"scores":	[-4.94236107862164]
								}, {
									"case":	344,
									"scores":	[-4.94236107862164]
								}, {
									"case":	345,
									"scores":	[-4.94236107862164]
								}, {
									"case":	346,
									"scores":	[-4.94236107862164]
								}, {
									"case":	347,
									"scores":	[-4.94236107862164]
								}, {
									"case":	348,
									"scores":	[-4.94236107862164]
								}, {
									"case":	349,
									"scores":	[-4.94236107862164]
								}, {
									"case":	350,
									"scores":	[-4.94236107862164]
								}, {
									"case":	351,
									"scores":	[-4.94236107862164]
								}, {
									"case":	352,
									"scores":	[-4.94236107862164]
								}, {
									"case":	353,
									"scores":	[-4.94236107862164]
								}, {
									"case":	354,
									"scores":	[-4.94236107862164]
								}, {
									"case":	355,
									"scores":	[-4.94236107862164]
								}, {
									"case":	356,
									"scores":	[-4.94236107862164]
								}, {
									"case":	357,
									"scores":	[-4.94236107862164]
								}, {
									"case":	358,
									"scores":	[-4.94236107862164]
								}, {
									"case":	359,
									"scores":	[-4.94236107862164]
								}, {
									"case":	360,
									"scores":	[-4.94236107862164]
								}, {
									"case":	361,
									"scores":	[-4.94236107862164]
								}, {
									"case":	362,
									"scores":	[-4.94236107862164]
								}, {
									"case":	363,
									"scores":	[-4.94236107862164]
								}, {
									"case":	364,
									"scores":	[-4.94236107862164]
								}, {
									"case":	365,
									"scores":	[-4.94236107862164]
								}, {
									"case":	366,
									"scores":	[-4.94236107862164]
								}, {
									"case":	367,
									"scores":	[-4.94236107862164]
								}, {
									"case":	368,
									"scores":	[-4.94236107862164]
								}, {
									"case":	369,
									"scores":	[-4.94236107862164]
								}, {
									"case":	370,
									"scores":	[-4.94236107862164]
								}, {
									"case":	371,
									"scores":	[-4.94236107862164]
								}, {
									"case":	372,
									"scores":	[-4.94236107862164]
								}, {
									"case":	373,
									"scores":	[-4.94236107862164]
								}, {
									"case":	374,
									"scores":	[-4.94236107862164]
								}, {
									"case":	375,
									"scores":	[-4.94236107862164]
								}, {
									"case":	376,
									"scores":	[-4.94236107862164]
								}, {
									"case":	377,
									"scores":	[-4.94236107862164]
								}, {
									"case":	378,
									"scores":	[-4.94236107862164]
								}, {
									"case":	379,
									"scores":	[-4.94236107862164]
								}, {
									"case":	380,
									"scores":	[-4.94236107862164]
								}, {
									"case":	381,
									"scores":	[-4.94236107862164]
								}, {
									"case":	382,
									"scores":	[-4.94236107862164]
								}, {
									"case":	383,
									"scores":	[-4.94236107862164]
								}, {
									"case":	384,
									"scores":	[-4.94236107862164]
								}, {
									"case":	385,
									"scores":	[-4.94236107862164]
								}, {
									"case":	386,
									"scores":	[-4.94236107862164]
								}, {
									"case":	387,
									"scores":	[-4.94236107862164]
								}, {
									"case":	388,
									"scores":	[-4.94236107862164]
								}, {
									"case":	389,
									"scores":	[-4.94236107862164]
								}, {
									"case":	390,
									"scores":	[-4.94236107862164]
								}, {
									"case":	391,
									"scores":	[-4.94236107862164]
								}, {
									"case":	392,
									"scores":	[-4.94236107862164]
								}, {
									"case":	393,
									"scores":	[-4.94236107862164]
								}, {
									"case":	394,
									"scores":	[-4.94236107862164]
								}, {
									"case":	395,
									"scores":	[-4.94236107862164]
								}, {
									"case":	396,
									"scores":	[-4.94236107862164]
								}, {
									"case":	397,
									"scores":	[-4.94236107862164]
								}, {
									"case":	398,
									"scores":	[-4.94236107862164]
								}, {
									"case":	399,
									"scores":	[-4.94236107862164]
								}, {
									"case":	400,
									"scores":	[-4.94236107862164]
								}, {
									"case":	401,
									"scores":	[-4.94236107862164]
								}, {
									"case":	402,
									"scores":	[-4.94236107862164]
								}, {
									"case":	403,
									"scores":	[-4.94236107862164]
								}, {
									"case":	404,
									"scores":	[-4.94236107862164]
								}, {
									"case":	405,
									"scores":	[-4.94236107862164]
								}, {
									"case":	406,
									"scores":	[-4.94236107862164]
								}, {
									"case":	407,
									"scores":	[-4.94236107862164]
								}, {
									"case":	408,
									"scores":	[-4.94236107862164]
								}, {
									"case":	409,
									"scores":	[-4.94236107862164]
								}, {
									"case":	410,
									"scores":	[-4.94236107862164]
								}, {
									"case":	411,
									"scores":	[-4.94236107862164]
								}, {
									"case":	412,
									"scores":	[-4.94236107862164]
								}, {
									"case":	413,
									"scores":	[-4.94236107862164]
								}, {
									"case":	414,
									"scores":	[-4.94236107862164]
								}, {
									"case":	415,
									"scores":	[-4.94236107862164]
								}, {
									"case":	416,
									"scores":	[-4.94236107862164]
								}, {
									"case":	417,
									"scores":	[-4.94236107862164]
								}, {
									"case":	418,
									"scores":	[-4.94236107862164]
								}, {
									"case":	419,
									"scores":	[-4.94236107862164]
								}, {
									"case":	420,
									"scores":	[-4.94236107862164]
								}, {
									"case":	421,
									"scores":	[-4.94236107862164]
								}, {
									"case":	422,
									"scores":	[-4.94236107862164]
								}, {
									"case":	423,
									"scores":	[-4.94236107862164]
								}, {
									"case":	424,
									"scores":	[-4.94236107862164]
								}, {
									"case":	425,
									"scores":	[-8.79072166642164, -8.43711819862164, -8.82652075142164, -8.82652075142164, -8.87395148172164, -9.88754979552164, -8.63595778172164, -8.63595778172164, -8.87395148172164, -9.88754979552164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.63595778172164, -8.40968871862164, -8.63595778172164]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	861,
							"begin_column":	2,
							"end_line":	861,
							"end_column":	22,
							"patch_codes":	["if (!__is_neg(\"\", \"L861\", 38, &(remove_ofname_fd), sizeof (remove_ofname_fd), &(unlink_errno), sizeof (unlink_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    remove_ofname_fd = -1;\n", "{\n}\n", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "remove_ofname_fd = -(0 * unlink_errno)", "remove_ofname_fd = -(0)", "remove_ofname_fd = -(iname != 0)", "remove_ofname_fd = -(iname == 0)", "remove_ofname_fd = -(oldset != 0)", "remove_ofname_fd = -(oldset == 0)", "remove_ofname_fd = -(unlink_errno != 0)", "remove_ofname_fd = -(unlink_errno + 0)", "remove_ofname_fd = -(unlink_errno - 0)", "remove_ofname_fd = -(unlink_errno == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.05177283162164, -4.8877062496216386, -5.31954447832164, -5.31954447832164, -5.85888035862164, -6.3783062626216385, -5.33161715862164, -5.33161715862164, -5.85888035862164, -6.3783062626216385, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.33161715862164, -5.55200835862164, -5.33161715862164]
								}, {
									"case":	2,
									"scores":	[-4.94236107862164]
								}, {
									"case":	3,
									"scores":	[-4.94236107862164]
								}, {
									"case":	4,
									"scores":	[-4.94236107862164]
								}, {
									"case":	5,
									"scores":	[-4.94236107862164]
								}, {
									"case":	6,
									"scores":	[-4.94236107862164]
								}, {
									"case":	7,
									"scores":	[-4.94236107862164]
								}, {
									"case":	8,
									"scores":	[-4.94236107862164]
								}, {
									"case":	9,
									"scores":	[-4.94236107862164]
								}, {
									"case":	10,
									"scores":	[-4.94236107862164]
								}, {
									"case":	11,
									"scores":	[-4.94236107862164]
								}, {
									"case":	12,
									"scores":	[-4.94236107862164]
								}, {
									"case":	13,
									"scores":	[-4.94236107862164]
								}, {
									"case":	14,
									"scores":	[-4.94236107862164]
								}, {
									"case":	15,
									"scores":	[-4.94236107862164]
								}, {
									"case":	16,
									"scores":	[-4.94236107862164]
								}, {
									"case":	17,
									"scores":	[-4.94236107862164]
								}, {
									"case":	18,
									"scores":	[-4.94236107862164]
								}, {
									"case":	19,
									"scores":	[-4.94236107862164]
								}, {
									"case":	20,
									"scores":	[-4.94236107862164]
								}, {
									"case":	21,
									"scores":	[-4.94236107862164]
								}, {
									"case":	22,
									"scores":	[-4.94236107862164]
								}, {
									"case":	23,
									"scores":	[-4.94236107862164]
								}]
						}]
				}, {
					"line":	861,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [425], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [], [], [], [], [], []],
							"begin_line":	862,
							"begin_column":	0,
							"end_line":	862,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (unlink_errno)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (unlink_errno)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (unlink_errno)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (unlink_errno)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (unlink_errno)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (unlink_errno)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (unlink_errno)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (unlink_errno)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (unlink_errno)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (unlink_errno)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (unlink_errno)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (unlink_errno)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (unlink_errno)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (unlink_errno)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (unlink_errno)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location())", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L862\", 38, &(unlink_errno), sizeof (unlink_errno), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(ofd), sizeof (ofd), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9019556639866]
								}, {
									"case":	2,
									"scores":	[-4.9019556639866]
								}, {
									"case":	3,
									"scores":	[-4.9019556639866]
								}, {
									"case":	4,
									"scores":	[-4.9019556639866]
								}, {
									"case":	5,
									"scores":	[-4.9019556639866]
								}, {
									"case":	6,
									"scores":	[-4.9019556639866]
								}, {
									"case":	7,
									"scores":	[-4.9019556639866]
								}, {
									"case":	8,
									"scores":	[-4.9019556639866]
								}, {
									"case":	9,
									"scores":	[-4.9019556639866]
								}, {
									"case":	10,
									"scores":	[-4.9019556639866]
								}, {
									"case":	11,
									"scores":	[-4.9019556639866]
								}, {
									"case":	12,
									"scores":	[-4.9019556639866]
								}, {
									"case":	13,
									"scores":	[-4.9019556639866]
								}, {
									"case":	14,
									"scores":	[-4.9019556639866]
								}, {
									"case":	15,
									"scores":	[-4.9019556639866]
								}, {
									"case":	16,
									"scores":	[-4.9019556639866]
								}, {
									"case":	17,
									"scores":	[-4.9019556639866]
								}, {
									"case":	18,
									"scores":	[-4.9019556639866]
								}, {
									"case":	19,
									"scores":	[-4.9019556639866]
								}, {
									"case":	20,
									"scores":	[-4.9019556639866]
								}, {
									"case":	21,
									"scores":	[-4.9019556639866]
								}, {
									"case":	22,
									"scores":	[-4.9019556639866]
								}, {
									"case":	23,
									"scores":	[-4.9019556639866]
								}, {
									"case":	24,
									"scores":	[-4.9019556639866]
								}, {
									"case":	25,
									"scores":	[-4.9019556639866]
								}, {
									"case":	26,
									"scores":	[-4.9019556639866]
								}, {
									"case":	27,
									"scores":	[-4.9019556639866]
								}, {
									"case":	28,
									"scores":	[-4.9019556639866]
								}, {
									"case":	29,
									"scores":	[-4.9019556639866]
								}, {
									"case":	30,
									"scores":	[-4.9019556639866]
								}, {
									"case":	31,
									"scores":	[-4.9019556639866]
								}, {
									"case":	32,
									"scores":	[-4.9019556639866]
								}, {
									"case":	33,
									"scores":	[-4.9019556639866]
								}, {
									"case":	34,
									"scores":	[-4.9019556639866]
								}, {
									"case":	35,
									"scores":	[-4.9019556639866]
								}, {
									"case":	36,
									"scores":	[-4.9019556639866]
								}, {
									"case":	37,
									"scores":	[-4.9019556639866]
								}, {
									"case":	38,
									"scores":	[-4.9019556639866]
								}, {
									"case":	39,
									"scores":	[-4.9019556639866]
								}, {
									"case":	40,
									"scores":	[-4.9019556639866]
								}, {
									"case":	41,
									"scores":	[-4.9019556639866]
								}, {
									"case":	42,
									"scores":	[-4.9019556639866]
								}, {
									"case":	43,
									"scores":	[-4.9019556639866]
								}, {
									"case":	44,
									"scores":	[-4.9019556639866]
								}, {
									"case":	45,
									"scores":	[-4.9019556639866]
								}, {
									"case":	46,
									"scores":	[-4.9019556639866]
								}, {
									"case":	47,
									"scores":	[-4.9019556639866]
								}, {
									"case":	48,
									"scores":	[-4.9019556639866]
								}, {
									"case":	49,
									"scores":	[-4.9019556639866]
								}, {
									"case":	50,
									"scores":	[-4.9019556639866]
								}, {
									"case":	51,
									"scores":	[-4.9019556639866]
								}, {
									"case":	52,
									"scores":	[-4.9019556639866]
								}, {
									"case":	53,
									"scores":	[-4.9019556639866]
								}, {
									"case":	54,
									"scores":	[-4.9019556639866]
								}, {
									"case":	55,
									"scores":	[-4.9019556639866]
								}, {
									"case":	56,
									"scores":	[-4.9019556639866]
								}, {
									"case":	57,
									"scores":	[-4.9019556639866]
								}, {
									"case":	58,
									"scores":	[-4.9019556639866]
								}, {
									"case":	59,
									"scores":	[-4.9019556639866]
								}, {
									"case":	60,
									"scores":	[-4.9019556639866]
								}, {
									"case":	61,
									"scores":	[-4.9019556639866]
								}, {
									"case":	62,
									"scores":	[-4.9019556639866]
								}, {
									"case":	63,
									"scores":	[-4.9019556639866]
								}, {
									"case":	64,
									"scores":	[-4.9019556639866]
								}, {
									"case":	65,
									"scores":	[-4.9019556639866]
								}, {
									"case":	66,
									"scores":	[-4.9019556639866]
								}, {
									"case":	67,
									"scores":	[-4.9019556639866]
								}, {
									"case":	68,
									"scores":	[-4.9019556639866]
								}, {
									"case":	69,
									"scores":	[-4.9019556639866]
								}, {
									"case":	70,
									"scores":	[-4.9019556639866]
								}, {
									"case":	71,
									"scores":	[-4.9019556639866]
								}, {
									"case":	72,
									"scores":	[-4.9019556639866]
								}, {
									"case":	73,
									"scores":	[-4.9019556639866]
								}, {
									"case":	74,
									"scores":	[-4.9019556639866]
								}, {
									"case":	75,
									"scores":	[-4.9019556639866]
								}, {
									"case":	76,
									"scores":	[-4.9019556639866]
								}, {
									"case":	77,
									"scores":	[-4.9019556639866]
								}, {
									"case":	78,
									"scores":	[-4.9019556639866]
								}, {
									"case":	79,
									"scores":	[-4.9019556639866]
								}, {
									"case":	80,
									"scores":	[-4.9019556639866]
								}, {
									"case":	81,
									"scores":	[-4.9019556639866]
								}, {
									"case":	82,
									"scores":	[-4.9019556639866]
								}, {
									"case":	83,
									"scores":	[-4.9019556639866]
								}, {
									"case":	84,
									"scores":	[-4.9019556639866]
								}, {
									"case":	85,
									"scores":	[-4.9019556639866]
								}, {
									"case":	86,
									"scores":	[-4.9019556639866]
								}, {
									"case":	87,
									"scores":	[-4.9019556639866]
								}, {
									"case":	88,
									"scores":	[-4.9019556639866]
								}, {
									"case":	89,
									"scores":	[-4.9019556639866]
								}, {
									"case":	90,
									"scores":	[-4.9019556639866]
								}, {
									"case":	91,
									"scores":	[-4.9019556639866]
								}, {
									"case":	92,
									"scores":	[-4.9019556639866]
								}, {
									"case":	93,
									"scores":	[-4.9019556639866]
								}, {
									"case":	94,
									"scores":	[-4.9019556639866]
								}, {
									"case":	95,
									"scores":	[-4.9019556639866]
								}, {
									"case":	96,
									"scores":	[-4.9019556639866]
								}, {
									"case":	97,
									"scores":	[-4.9019556639866]
								}, {
									"case":	98,
									"scores":	[-4.9019556639866]
								}, {
									"case":	99,
									"scores":	[-4.9019556639866]
								}, {
									"case":	100,
									"scores":	[-4.9019556639866]
								}, {
									"case":	101,
									"scores":	[-4.9019556639866]
								}, {
									"case":	102,
									"scores":	[-4.9019556639866]
								}, {
									"case":	103,
									"scores":	[-4.9019556639866]
								}, {
									"case":	104,
									"scores":	[-4.9019556639866]
								}, {
									"case":	105,
									"scores":	[-4.9019556639866]
								}, {
									"case":	106,
									"scores":	[-4.9019556639866]
								}, {
									"case":	107,
									"scores":	[-4.9019556639866]
								}, {
									"case":	108,
									"scores":	[-4.9019556639866]
								}, {
									"case":	109,
									"scores":	[-4.9019556639866]
								}, {
									"case":	110,
									"scores":	[-4.9019556639866]
								}, {
									"case":	111,
									"scores":	[-4.9019556639866]
								}, {
									"case":	112,
									"scores":	[-4.9019556639866]
								}, {
									"case":	113,
									"scores":	[-4.9019556639866]
								}, {
									"case":	114,
									"scores":	[-4.9019556639866]
								}, {
									"case":	115,
									"scores":	[-4.9019556639866]
								}, {
									"case":	116,
									"scores":	[-4.9019556639866]
								}, {
									"case":	117,
									"scores":	[-4.9019556639866]
								}, {
									"case":	118,
									"scores":	[-4.9019556639866]
								}, {
									"case":	119,
									"scores":	[-4.9019556639866]
								}, {
									"case":	120,
									"scores":	[-4.9019556639866]
								}, {
									"case":	121,
									"scores":	[-4.9019556639866]
								}, {
									"case":	122,
									"scores":	[-4.9019556639866]
								}, {
									"case":	123,
									"scores":	[-4.9019556639866]
								}, {
									"case":	124,
									"scores":	[-4.9019556639866]
								}, {
									"case":	125,
									"scores":	[-4.9019556639866]
								}, {
									"case":	126,
									"scores":	[-4.9019556639866]
								}, {
									"case":	127,
									"scores":	[-4.9019556639866]
								}, {
									"case":	128,
									"scores":	[-4.9019556639866]
								}, {
									"case":	129,
									"scores":	[-4.9019556639866]
								}, {
									"case":	130,
									"scores":	[-4.9019556639866]
								}, {
									"case":	131,
									"scores":	[-4.9019556639866]
								}, {
									"case":	132,
									"scores":	[-4.9019556639866]
								}, {
									"case":	133,
									"scores":	[-4.9019556639866]
								}, {
									"case":	134,
									"scores":	[-4.9019556639866]
								}, {
									"case":	135,
									"scores":	[-4.9019556639866]
								}, {
									"case":	136,
									"scores":	[-4.9019556639866]
								}, {
									"case":	137,
									"scores":	[-4.9019556639866]
								}, {
									"case":	138,
									"scores":	[-4.9019556639866]
								}, {
									"case":	139,
									"scores":	[-4.9019556639866]
								}, {
									"case":	140,
									"scores":	[-4.9019556639866]
								}, {
									"case":	141,
									"scores":	[-4.9019556639866]
								}, {
									"case":	142,
									"scores":	[-4.9019556639866]
								}, {
									"case":	143,
									"scores":	[-4.9019556639866]
								}, {
									"case":	144,
									"scores":	[-4.9019556639866]
								}, {
									"case":	145,
									"scores":	[-4.9019556639866]
								}, {
									"case":	146,
									"scores":	[-4.9019556639866]
								}, {
									"case":	147,
									"scores":	[-4.9019556639866]
								}, {
									"case":	148,
									"scores":	[-4.9019556639866]
								}, {
									"case":	149,
									"scores":	[-4.9019556639866]
								}, {
									"case":	150,
									"scores":	[-4.9019556639866]
								}, {
									"case":	151,
									"scores":	[-4.9019556639866]
								}, {
									"case":	152,
									"scores":	[-4.9019556639866]
								}, {
									"case":	153,
									"scores":	[-4.9019556639866]
								}, {
									"case":	154,
									"scores":	[-4.9019556639866]
								}, {
									"case":	155,
									"scores":	[-4.9019556639866]
								}, {
									"case":	156,
									"scores":	[-4.9019556639866]
								}, {
									"case":	157,
									"scores":	[-4.9019556639866]
								}, {
									"case":	158,
									"scores":	[-4.9019556639866]
								}, {
									"case":	159,
									"scores":	[-4.9019556639866]
								}, {
									"case":	160,
									"scores":	[-4.9019556639866]
								}, {
									"case":	161,
									"scores":	[-4.9019556639866]
								}, {
									"case":	162,
									"scores":	[-4.9019556639866]
								}, {
									"case":	163,
									"scores":	[-4.9019556639866]
								}, {
									"case":	164,
									"scores":	[-4.9019556639866]
								}, {
									"case":	165,
									"scores":	[-4.9019556639866]
								}, {
									"case":	166,
									"scores":	[-4.9019556639866]
								}, {
									"case":	167,
									"scores":	[-4.9019556639866]
								}, {
									"case":	168,
									"scores":	[-4.9019556639866]
								}, {
									"case":	169,
									"scores":	[-4.9019556639866]
								}, {
									"case":	170,
									"scores":	[-4.9019556639866]
								}, {
									"case":	171,
									"scores":	[-4.9019556639866]
								}, {
									"case":	172,
									"scores":	[-4.9019556639866]
								}, {
									"case":	173,
									"scores":	[-4.9019556639866]
								}, {
									"case":	174,
									"scores":	[-4.9019556639866]
								}, {
									"case":	175,
									"scores":	[-4.9019556639866]
								}, {
									"case":	176,
									"scores":	[-4.9019556639866]
								}, {
									"case":	177,
									"scores":	[-4.9019556639866]
								}, {
									"case":	178,
									"scores":	[-4.9019556639866]
								}, {
									"case":	179,
									"scores":	[-4.9019556639866]
								}, {
									"case":	180,
									"scores":	[-4.9019556639866]
								}, {
									"case":	181,
									"scores":	[-4.9019556639866]
								}, {
									"case":	182,
									"scores":	[-4.9019556639866]
								}, {
									"case":	183,
									"scores":	[-4.9019556639866]
								}, {
									"case":	184,
									"scores":	[-4.9019556639866]
								}, {
									"case":	185,
									"scores":	[-4.9019556639866]
								}, {
									"case":	186,
									"scores":	[-4.9019556639866]
								}, {
									"case":	187,
									"scores":	[-4.9019556639866]
								}, {
									"case":	188,
									"scores":	[-4.9019556639866]
								}, {
									"case":	189,
									"scores":	[-4.9019556639866]
								}, {
									"case":	190,
									"scores":	[-4.9019556639866]
								}, {
									"case":	191,
									"scores":	[-4.9019556639866]
								}, {
									"case":	192,
									"scores":	[-4.9019556639866]
								}, {
									"case":	193,
									"scores":	[-4.9019556639866]
								}, {
									"case":	194,
									"scores":	[-4.9019556639866]
								}, {
									"case":	195,
									"scores":	[-4.9019556639866]
								}, {
									"case":	196,
									"scores":	[-4.9019556639866]
								}, {
									"case":	197,
									"scores":	[-4.9019556639866]
								}, {
									"case":	198,
									"scores":	[-4.9019556639866]
								}, {
									"case":	199,
									"scores":	[-4.9019556639866]
								}, {
									"case":	200,
									"scores":	[-4.9019556639866]
								}, {
									"case":	201,
									"scores":	[-4.9019556639866]
								}, {
									"case":	202,
									"scores":	[-4.9019556639866]
								}, {
									"case":	203,
									"scores":	[-4.9019556639866]
								}, {
									"case":	204,
									"scores":	[-4.9019556639866]
								}, {
									"case":	205,
									"scores":	[-4.9019556639866]
								}, {
									"case":	206,
									"scores":	[-4.9019556639866]
								}, {
									"case":	207,
									"scores":	[-4.9019556639866]
								}, {
									"case":	208,
									"scores":	[-4.9019556639866]
								}, {
									"case":	209,
									"scores":	[-4.9019556639866]
								}, {
									"case":	210,
									"scores":	[-4.9019556639866]
								}, {
									"case":	211,
									"scores":	[-4.9019556639866]
								}, {
									"case":	212,
									"scores":	[-4.9019556639866]
								}, {
									"case":	213,
									"scores":	[-4.9019556639866]
								}, {
									"case":	214,
									"scores":	[-4.9019556639866]
								}, {
									"case":	215,
									"scores":	[-4.9019556639866]
								}, {
									"case":	216,
									"scores":	[-4.9019556639866]
								}, {
									"case":	217,
									"scores":	[-4.9019556639866]
								}, {
									"case":	218,
									"scores":	[-4.9019556639866]
								}, {
									"case":	219,
									"scores":	[-4.9019556639866]
								}, {
									"case":	220,
									"scores":	[-4.9019556639866]
								}, {
									"case":	221,
									"scores":	[-4.9019556639866]
								}, {
									"case":	222,
									"scores":	[-4.9019556639866]
								}, {
									"case":	223,
									"scores":	[-4.9019556639866]
								}, {
									"case":	224,
									"scores":	[-4.9019556639866]
								}, {
									"case":	225,
									"scores":	[-4.9019556639866]
								}, {
									"case":	226,
									"scores":	[-4.9019556639866]
								}, {
									"case":	227,
									"scores":	[-4.9019556639866]
								}, {
									"case":	228,
									"scores":	[-4.9019556639866]
								}, {
									"case":	229,
									"scores":	[-4.9019556639866]
								}, {
									"case":	230,
									"scores":	[-4.9019556639866]
								}, {
									"case":	231,
									"scores":	[-4.9019556639866]
								}, {
									"case":	232,
									"scores":	[-4.9019556639866]
								}, {
									"case":	233,
									"scores":	[-4.9019556639866]
								}, {
									"case":	234,
									"scores":	[-4.9019556639866]
								}, {
									"case":	235,
									"scores":	[-4.9019556639866]
								}, {
									"case":	236,
									"scores":	[-4.9019556639866]
								}, {
									"case":	237,
									"scores":	[-4.9019556639866]
								}, {
									"case":	238,
									"scores":	[-4.9019556639866]
								}, {
									"case":	239,
									"scores":	[-4.9019556639866]
								}, {
									"case":	240,
									"scores":	[-4.9019556639866]
								}, {
									"case":	241,
									"scores":	[-4.9019556639866]
								}, {
									"case":	242,
									"scores":	[-4.9019556639866]
								}, {
									"case":	243,
									"scores":	[-4.9019556639866]
								}, {
									"case":	244,
									"scores":	[-4.9019556639866]
								}, {
									"case":	245,
									"scores":	[-4.9019556639866]
								}, {
									"case":	246,
									"scores":	[-4.9019556639866]
								}, {
									"case":	247,
									"scores":	[-4.9019556639866]
								}, {
									"case":	248,
									"scores":	[-4.9019556639866]
								}, {
									"case":	249,
									"scores":	[-4.9019556639866]
								}, {
									"case":	250,
									"scores":	[-4.9019556639866]
								}, {
									"case":	251,
									"scores":	[-4.9019556639866]
								}, {
									"case":	252,
									"scores":	[-4.9019556639866]
								}, {
									"case":	253,
									"scores":	[-4.9019556639866]
								}, {
									"case":	254,
									"scores":	[-4.9019556639866]
								}, {
									"case":	255,
									"scores":	[-4.9019556639866]
								}, {
									"case":	256,
									"scores":	[-4.9019556639866]
								}, {
									"case":	257,
									"scores":	[-4.9019556639866]
								}, {
									"case":	258,
									"scores":	[-4.9019556639866]
								}, {
									"case":	259,
									"scores":	[-4.9019556639866]
								}, {
									"case":	260,
									"scores":	[-4.9019556639866]
								}, {
									"case":	261,
									"scores":	[-4.9019556639866]
								}, {
									"case":	262,
									"scores":	[-4.9019556639866]
								}, {
									"case":	263,
									"scores":	[-4.9019556639866]
								}, {
									"case":	264,
									"scores":	[-4.9019556639866]
								}, {
									"case":	265,
									"scores":	[-4.9019556639866]
								}, {
									"case":	266,
									"scores":	[-4.9019556639866]
								}, {
									"case":	267,
									"scores":	[-4.9019556639866]
								}, {
									"case":	268,
									"scores":	[-4.9019556639866]
								}, {
									"case":	269,
									"scores":	[-4.9019556639866]
								}, {
									"case":	270,
									"scores":	[-4.9019556639866]
								}, {
									"case":	271,
									"scores":	[-4.9019556639866]
								}, {
									"case":	272,
									"scores":	[-4.9019556639866]
								}, {
									"case":	273,
									"scores":	[-4.9019556639866]
								}, {
									"case":	274,
									"scores":	[-4.9019556639866]
								}, {
									"case":	275,
									"scores":	[-4.9019556639866]
								}, {
									"case":	276,
									"scores":	[-4.9019556639866]
								}, {
									"case":	277,
									"scores":	[-4.9019556639866]
								}, {
									"case":	278,
									"scores":	[-4.9019556639866]
								}, {
									"case":	279,
									"scores":	[-4.9019556639866]
								}, {
									"case":	280,
									"scores":	[-4.9019556639866]
								}, {
									"case":	281,
									"scores":	[-4.9019556639866]
								}, {
									"case":	282,
									"scores":	[-4.9019556639866]
								}, {
									"case":	283,
									"scores":	[-4.9019556639866]
								}, {
									"case":	284,
									"scores":	[-4.9019556639866]
								}, {
									"case":	285,
									"scores":	[-4.9019556639866]
								}, {
									"case":	286,
									"scores":	[-4.9019556639866]
								}, {
									"case":	287,
									"scores":	[-4.9019556639866]
								}, {
									"case":	288,
									"scores":	[-4.9019556639866]
								}, {
									"case":	289,
									"scores":	[-4.9019556639866]
								}, {
									"case":	290,
									"scores":	[-4.9019556639866]
								}, {
									"case":	291,
									"scores":	[-4.9019556639866]
								}, {
									"case":	292,
									"scores":	[-4.9019556639866]
								}, {
									"case":	293,
									"scores":	[-4.9019556639866]
								}, {
									"case":	294,
									"scores":	[-4.9019556639866]
								}, {
									"case":	295,
									"scores":	[-4.9019556639866]
								}, {
									"case":	296,
									"scores":	[-4.9019556639866]
								}, {
									"case":	297,
									"scores":	[-4.9019556639866]
								}, {
									"case":	298,
									"scores":	[-4.9019556639866]
								}, {
									"case":	299,
									"scores":	[-4.9019556639866]
								}, {
									"case":	300,
									"scores":	[-4.9019556639866]
								}, {
									"case":	301,
									"scores":	[-4.9019556639866]
								}, {
									"case":	302,
									"scores":	[-4.9019556639866]
								}, {
									"case":	303,
									"scores":	[-4.9019556639866]
								}, {
									"case":	304,
									"scores":	[-4.9019556639866]
								}, {
									"case":	305,
									"scores":	[-4.9019556639866]
								}, {
									"case":	306,
									"scores":	[-4.9019556639866]
								}, {
									"case":	307,
									"scores":	[-4.9019556639866]
								}, {
									"case":	308,
									"scores":	[-4.9019556639866]
								}, {
									"case":	309,
									"scores":	[-4.9019556639866]
								}, {
									"case":	310,
									"scores":	[-4.9019556639866]
								}, {
									"case":	311,
									"scores":	[-4.9019556639866]
								}, {
									"case":	312,
									"scores":	[-4.9019556639866]
								}, {
									"case":	313,
									"scores":	[-4.9019556639866]
								}, {
									"case":	314,
									"scores":	[-4.9019556639866]
								}, {
									"case":	315,
									"scores":	[-4.9019556639866]
								}, {
									"case":	316,
									"scores":	[-4.9019556639866]
								}, {
									"case":	317,
									"scores":	[-4.9019556639866]
								}, {
									"case":	318,
									"scores":	[-4.9019556639866]
								}, {
									"case":	319,
									"scores":	[-4.9019556639866]
								}, {
									"case":	320,
									"scores":	[-4.9019556639866]
								}, {
									"case":	321,
									"scores":	[-4.9019556639866]
								}, {
									"case":	322,
									"scores":	[-4.9019556639866]
								}, {
									"case":	323,
									"scores":	[-4.9019556639866]
								}, {
									"case":	324,
									"scores":	[-4.9019556639866]
								}, {
									"case":	325,
									"scores":	[-4.9019556639866]
								}, {
									"case":	326,
									"scores":	[-4.9019556639866]
								}, {
									"case":	327,
									"scores":	[-4.9019556639866]
								}, {
									"case":	328,
									"scores":	[-4.9019556639866]
								}, {
									"case":	329,
									"scores":	[-4.9019556639866]
								}, {
									"case":	330,
									"scores":	[-4.9019556639866]
								}, {
									"case":	331,
									"scores":	[-4.9019556639866]
								}, {
									"case":	332,
									"scores":	[-4.9019556639866]
								}, {
									"case":	333,
									"scores":	[-4.9019556639866]
								}, {
									"case":	334,
									"scores":	[-4.9019556639866]
								}, {
									"case":	335,
									"scores":	[-4.9019556639866]
								}, {
									"case":	336,
									"scores":	[-4.9019556639866]
								}, {
									"case":	337,
									"scores":	[-4.9019556639866]
								}, {
									"case":	338,
									"scores":	[-4.9019556639866]
								}, {
									"case":	339,
									"scores":	[-4.9019556639866]
								}, {
									"case":	340,
									"scores":	[-4.9019556639866]
								}, {
									"case":	341,
									"scores":	[-4.9019556639866]
								}, {
									"case":	342,
									"scores":	[-4.9019556639866]
								}, {
									"case":	343,
									"scores":	[-4.9019556639866]
								}, {
									"case":	344,
									"scores":	[-4.9019556639866]
								}, {
									"case":	345,
									"scores":	[-4.9019556639866]
								}, {
									"case":	346,
									"scores":	[-4.9019556639866]
								}, {
									"case":	347,
									"scores":	[-4.9019556639866]
								}, {
									"case":	348,
									"scores":	[-4.9019556639866]
								}, {
									"case":	349,
									"scores":	[-4.9019556639866]
								}, {
									"case":	350,
									"scores":	[-4.9019556639866]
								}, {
									"case":	351,
									"scores":	[-4.9019556639866]
								}, {
									"case":	352,
									"scores":	[-4.9019556639866]
								}, {
									"case":	353,
									"scores":	[-4.9019556639866]
								}, {
									"case":	354,
									"scores":	[-4.9019556639866]
								}, {
									"case":	355,
									"scores":	[-4.9019556639866]
								}, {
									"case":	356,
									"scores":	[-4.9019556639866]
								}, {
									"case":	357,
									"scores":	[-4.9019556639866]
								}, {
									"case":	358,
									"scores":	[-4.9019556639866]
								}, {
									"case":	359,
									"scores":	[-4.9019556639866]
								}, {
									"case":	360,
									"scores":	[-4.9019556639866]
								}, {
									"case":	361,
									"scores":	[-4.9019556639866]
								}, {
									"case":	362,
									"scores":	[-4.9019556639866]
								}, {
									"case":	363,
									"scores":	[-4.9019556639866]
								}, {
									"case":	364,
									"scores":	[-4.9019556639866]
								}, {
									"case":	365,
									"scores":	[-4.9019556639866]
								}, {
									"case":	366,
									"scores":	[-4.9019556639866]
								}, {
									"case":	367,
									"scores":	[-4.9019556639866]
								}, {
									"case":	368,
									"scores":	[-4.9019556639866]
								}, {
									"case":	369,
									"scores":	[-4.9019556639866]
								}, {
									"case":	370,
									"scores":	[-4.9019556639866]
								}, {
									"case":	371,
									"scores":	[-4.9019556639866]
								}, {
									"case":	372,
									"scores":	[-4.9019556639866]
								}, {
									"case":	373,
									"scores":	[-4.9019556639866]
								}, {
									"case":	374,
									"scores":	[-4.9019556639866]
								}, {
									"case":	375,
									"scores":	[-4.9019556639866]
								}, {
									"case":	376,
									"scores":	[-4.9019556639866]
								}, {
									"case":	377,
									"scores":	[-4.9019556639866]
								}, {
									"case":	378,
									"scores":	[-4.9019556639866]
								}, {
									"case":	379,
									"scores":	[-4.9019556639866]
								}, {
									"case":	380,
									"scores":	[-4.9019556639866]
								}, {
									"case":	381,
									"scores":	[-4.9019556639866]
								}, {
									"case":	382,
									"scores":	[-4.9019556639866]
								}, {
									"case":	383,
									"scores":	[-4.9019556639866]
								}, {
									"case":	384,
									"scores":	[-4.9019556639866]
								}, {
									"case":	385,
									"scores":	[-4.9019556639866]
								}, {
									"case":	386,
									"scores":	[-4.9019556639866]
								}, {
									"case":	387,
									"scores":	[-4.9019556639866]
								}, {
									"case":	388,
									"scores":	[-4.9019556639866]
								}, {
									"case":	389,
									"scores":	[-4.9019556639866]
								}, {
									"case":	390,
									"scores":	[-4.9019556639866]
								}, {
									"case":	391,
									"scores":	[-4.9019556639866]
								}, {
									"case":	392,
									"scores":	[-4.9019556639866]
								}, {
									"case":	393,
									"scores":	[-4.9019556639866]
								}, {
									"case":	394,
									"scores":	[-4.9019556639866]
								}, {
									"case":	395,
									"scores":	[-4.9019556639866]
								}, {
									"case":	396,
									"scores":	[-4.9019556639866]
								}, {
									"case":	397,
									"scores":	[-4.9019556639866]
								}, {
									"case":	398,
									"scores":	[-4.9019556639866]
								}, {
									"case":	399,
									"scores":	[-4.9019556639866]
								}, {
									"case":	400,
									"scores":	[-4.9019556639866]
								}, {
									"case":	401,
									"scores":	[-4.9019556639866]
								}, {
									"case":	402,
									"scores":	[-4.9019556639866]
								}, {
									"case":	403,
									"scores":	[-4.9019556639866]
								}, {
									"case":	404,
									"scores":	[-4.9019556639866]
								}, {
									"case":	405,
									"scores":	[-4.9019556639866]
								}, {
									"case":	406,
									"scores":	[-4.9019556639866]
								}, {
									"case":	407,
									"scores":	[-4.9019556639866]
								}, {
									"case":	408,
									"scores":	[-4.9019556639866]
								}, {
									"case":	409,
									"scores":	[-4.9019556639866]
								}, {
									"case":	410,
									"scores":	[-4.9019556639866]
								}, {
									"case":	411,
									"scores":	[-4.9019556639866]
								}, {
									"case":	412,
									"scores":	[-4.9019556639866]
								}, {
									"case":	413,
									"scores":	[-4.9019556639866]
								}, {
									"case":	414,
									"scores":	[-4.9019556639866]
								}, {
									"case":	415,
									"scores":	[-4.9019556639866]
								}, {
									"case":	416,
									"scores":	[-4.9019556639866]
								}, {
									"case":	417,
									"scores":	[-4.9019556639866]
								}, {
									"case":	418,
									"scores":	[-4.9019556639866]
								}, {
									"case":	419,
									"scores":	[-4.9019556639866]
								}, {
									"case":	420,
									"scores":	[-4.9019556639866]
								}, {
									"case":	421,
									"scores":	[-4.9019556639866]
								}, {
									"case":	422,
									"scores":	[-4.9019556639866]
								}, {
									"case":	423,
									"scores":	[-4.9019556639866]
								}, {
									"case":	424,
									"scores":	[-4.9019556639866]
								}, {
									"case":	425,
									"scores":	[-8.3202944911866, -7.5527421670866, -9.3295140670866, -10.3431123808866, -9.0915203670866, -9.2820833367866, -9.0915203670866, -9.3295140670866, -10.3431123808866, -9.2820833367866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -9.0915203670866, -8.8652513039866, -9.0915203670866]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [], [], [], [239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], [], [236, 237, 238], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234], [], [], [235]],
							"begin_line":	862,
							"begin_column":	2,
							"end_line":	862,
							"end_column":	45,
							"patch_codes":	["if (!__is_neg(\"\", \"L862\", 38, &(unlink_errno), sizeof (unlink_errno), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(ofd), sizeof (ofd), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n", "file_read(ifname, -1)", "file_read(ifname, 0)", "file_read(ifname, 1)", "file_read(ifname, 1024)", "file_read(ifname, 16384)", "file_read(ifname, 2)", "file_read(ifname, 2048)", "file_read(ifname, 32768)", "file_read(ifname, 512)", "file_read(ifname, 61440)", "file_read(ifname, inptr)", "file_read(ifname, insize)", "file_read(ifname, outcnt)", "getdomainname(ifname, -1)", "getdomainname(ifname, 0)", "getdomainname(ifname, 1)", "getdomainname(ifname, 1024)", "getdomainname(ifname, 16384)", "getdomainname(ifname, 2)", "getdomainname(ifname, 2048)", "getdomainname(ifname, 32768)", "getdomainname(ifname, 512)", "getdomainname(ifname, 61440)", "getdomainname(ifname, z_len)", "gethostname(ifname, -1)", "gethostname(ifname, 0)", "gethostname(ifname, 1)", "gethostname(ifname, 1024)", "gethostname(ifname, 16384)", "gethostname(ifname, 2)", "gethostname(ifname, 2048)", "gethostname(ifname, 32768)", "gethostname(ifname, 512)", "gethostname(ifname, 61440)", "gethostname(ifname, z_len)", "getlogin_r(ifname, -1)", "getlogin_r(ifname, 0)", "getlogin_r(ifname, 1)", "getlogin_r(ifname, 1024)", "getlogin_r(ifname, 16384)", "getlogin_r(ifname, 2)", "getlogin_r(ifname, 2048)", "getlogin_r(ifname, 32768)", "getlogin_r(ifname, 512)", "getlogin_r(ifname, 61440)", "getlogin_r(ifname, z_len)", "mkostemp(ifname, -1)", "mkostemp(ifname, 0)", "mkostemp(ifname, 1)", "mkostemp(ifname, 1024)", "mkostemp(ifname, 16384)", "mkostemp(ifname, 2)", "mkostemp(ifname, 2048)", "mkostemp(ifname, 32768)", "mkostemp(ifname, 512)", "mkostemp(ifname, 61440)", "mkostemp(ifname, ascii)", "mkostemp(ifname, block_mode)", "mkostemp(ifname, decompress)", "mkostemp(ifname, decrypt)", "mkostemp(ifname, do_lzw)", "mkostemp(ifname, exit_code)", "mkostemp(ifname, exiting_signal)", "mkostemp(ifname, force)", "mkostemp(ifname, foreground)", "mkostemp(ifname, ifd)", "mkostemp(ifname, last_member)", "mkostemp(ifname, level)", "mkostemp(ifname, list)", "mkostemp(ifname, maxbits)", "mkostemp(ifname, method)", "mkostemp(ifname, no_name)", "mkostemp(ifname, no_time)", "mkostemp(ifname, ofd)", "mkostemp(ifname, part_nb)", "mkostemp(ifname, quiet)", "mkostemp(ifname, recursive)", "mkostemp(ifname, remove_ofname_fd)", "mkostemp(ifname, save_orig_name)", "mkostemp(ifname, test)", "mkostemp(ifname, to_stdout)", "mkostemp(ifname, unlink_errno)", "mkostemp(ifname, verbose)", "mkostemp64(ifname, -1)", "mkostemp64(ifname, 0)", "mkostemp64(ifname, 1)", "mkostemp64(ifname, 1024)", "mkostemp64(ifname, 16384)", "mkostemp64(ifname, 2)", "mkostemp64(ifname, 2048)", "mkostemp64(ifname, 32768)", "mkostemp64(ifname, 512)", "mkostemp64(ifname, 61440)", "mkostemp64(ifname, ascii)", "mkostemp64(ifname, block_mode)", "mkostemp64(ifname, decompress)", "mkostemp64(ifname, decrypt)", "mkostemp64(ifname, do_lzw)", "mkostemp64(ifname, exit_code)", "mkostemp64(ifname, exiting_signal)", "mkostemp64(ifname, force)", "mkostemp64(ifname, foreground)", "mkostemp64(ifname, ifd)", "mkostemp64(ifname, last_member)", "mkostemp64(ifname, level)", "mkostemp64(ifname, list)", "mkostemp64(ifname, maxbits)", "mkostemp64(ifname, method)", "mkostemp64(ifname, no_name)", "mkostemp64(ifname, no_time)", "mkostemp64(ifname, ofd)", "mkostemp64(ifname, part_nb)", "mkostemp64(ifname, quiet)", "mkostemp64(ifname, recursive)", "mkostemp64(ifname, remove_ofname_fd)", "mkostemp64(ifname, save_orig_name)", "mkostemp64(ifname, test)", "mkostemp64(ifname, to_stdout)", "mkostemp64(ifname, unlink_errno)", "mkostemp64(ifname, verbose)", "mkstemps(ifname, -1)", "mkstemps(ifname, 0)", "mkstemps(ifname, 1)", "mkstemps(ifname, 1024)", "mkstemps(ifname, 16384)", "mkstemps(ifname, 2)", "mkstemps(ifname, 2048)", "mkstemps(ifname, 32768)", "mkstemps(ifname, 512)", "mkstemps(ifname, 61440)", "mkstemps(ifname, ascii)", "mkstemps(ifname, block_mode)", "mkstemps(ifname, decompress)", "mkstemps(ifname, decrypt)", "mkstemps(ifname, do_lzw)", "mkstemps(ifname, exit_code)", "mkstemps(ifname, exiting_signal)", "mkstemps(ifname, force)", "mkstemps(ifname, foreground)", "mkstemps(ifname, ifd)", "mkstemps(ifname, last_member)", "mkstemps(ifname, level)", "mkstemps(ifname, list)", "mkstemps(ifname, maxbits)", "mkstemps(ifname, method)", "mkstemps(ifname, no_name)", "mkstemps(ifname, no_time)", "mkstemps(ifname, ofd)", "mkstemps(ifname, part_nb)", "mkstemps(ifname, quiet)", "mkstemps(ifname, recursive)", "mkstemps(ifname, remove_ofname_fd)", "mkstemps(ifname, save_orig_name)", "mkstemps(ifname, test)", "mkstemps(ifname, to_stdout)", "mkstemps(ifname, unlink_errno)", "mkstemps(ifname, verbose)", "mkstemps64(ifname, -1)", "mkstemps64(ifname, 0)", "mkstemps64(ifname, 1)", "mkstemps64(ifname, 1024)", "mkstemps64(ifname, 16384)", "mkstemps64(ifname, 2)", "mkstemps64(ifname, 2048)", "mkstemps64(ifname, 32768)", "mkstemps64(ifname, 512)", "mkstemps64(ifname, 61440)", "mkstemps64(ifname, ascii)", "mkstemps64(ifname, block_mode)", "mkstemps64(ifname, decompress)", "mkstemps64(ifname, decrypt)", "mkstemps64(ifname, do_lzw)", "mkstemps64(ifname, exit_code)", "mkstemps64(ifname, exiting_signal)", "mkstemps64(ifname, force)", "mkstemps64(ifname, foreground)", "mkstemps64(ifname, ifd)", "mkstemps64(ifname, last_member)", "mkstemps64(ifname, level)", "mkstemps64(ifname, list)", "mkstemps64(ifname, maxbits)", "mkstemps64(ifname, method)", "mkstemps64(ifname, no_name)", "mkstemps64(ifname, no_time)", "mkstemps64(ifname, ofd)", "mkstemps64(ifname, part_nb)", "mkstemps64(ifname, quiet)", "mkstemps64(ifname, recursive)", "mkstemps64(ifname, remove_ofname_fd)", "mkstemps64(ifname, save_orig_name)", "mkstemps64(ifname, test)", "mkstemps64(ifname, to_stdout)", "mkstemps64(ifname, unlink_errno)", "mkstemps64(ifname, verbose)", "open_input_file(ifname, 0)", "setstate_r(ifname, 0)", "wctomb(ifname, -1)", "wctomb(ifname, 0)", "wctomb(ifname, 1)", "wctomb(ifname, 1024)", "wctomb(ifname, 16384)", "wctomb(ifname, 2)", "wctomb(ifname, 2048)", "wctomb(ifname, 32768)", "wctomb(ifname, 512)", "wctomb(ifname, 61440)", "wctomb(ifname, ascii)", "wctomb(ifname, block_mode)", "wctomb(ifname, decompress)", "wctomb(ifname, decrypt)", "wctomb(ifname, do_lzw)", "wctomb(ifname, exit_code)", "wctomb(ifname, exiting_signal)", "wctomb(ifname, force)", "wctomb(ifname, foreground)", "wctomb(ifname, ifd)", "wctomb(ifname, last_member)", "wctomb(ifname, level)", "wctomb(ifname, list)", "wctomb(ifname, maxbits)", "wctomb(ifname, method)", "wctomb(ifname, no_name)", "wctomb(ifname, no_time)", "wctomb(ifname, ofd)", "wctomb(ifname, part_nb)", "wctomb(ifname, quiet)", "wctomb(ifname, recursive)", "wctomb(ifname, remove_ofname_fd)", "wctomb(ifname, save_orig_name)", "wctomb(ifname, test)", "wctomb(ifname, to_stdout)", "wctomb(ifname, unlink_errno)", "wctomb(ifname, verbose)", "{\n}\n", "unlink_errno = mkstemp(ifname) == 0 ? 0 : (*__errno_location())", "unlink_errno = mkstemp64(ifname) == 0 ? 0 : (*__errno_location())", "unlink_errno = putenv(ifname) == 0 ? 0 : (*__errno_location())", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "unlink_errno = xunlink((&iname)) == 0 ? 0 : (*__errno_location())", "unlink_errno = xunlink((&oldset)) == 0 ? 0 : (*__errno_location())", "unlink_errno = xunlink((&unlink_errno)) == 0 ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (0 * unlink_errno) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (iname != 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (iname == 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (oldset != 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (oldset == 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (unlink_errno != 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (unlink_errno + 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (unlink_errno - 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == (unlink_errno == 0) ? 0 : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (0 * unlink_errno) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (bytes_in != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (bytes_out != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (decompress != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (exit_code != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (force != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (header_bytes != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (ifd != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (ifile_size != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (iname != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (iname == 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (list != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (method != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (no_name != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (no_time != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (ofd != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (oldset != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (oldset == 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (part_nb != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (program_name != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (quiet != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (recursive != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (remove_ofname_fd != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (save_orig_name != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (test != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (to_stdout != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (unlink_errno != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (unlink_errno + 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (unlink_errno - 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (unlink_errno == 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (verbose != 0) : (*__errno_location())", "unlink_errno = xunlink(ifname) == 0 ? (work != 0) : (*__errno_location())"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2247008169866, -6.2091363909866, -6.3157514439866, -6.8351773479866, -5.7884882439866, -5.7764155636866, -5.7884882439866, -6.3157514439866, -6.8351773479866, -5.7764155636866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -5.7884882439866, -6.0088794439866, -5.7884882439866]
								}, {
									"case":	2,
									"scores":	[-4.9019556639866]
								}, {
									"case":	3,
									"scores":	[-4.9019556639866]
								}, {
									"case":	4,
									"scores":	[-4.9019556639866]
								}, {
									"case":	5,
									"scores":	[-4.9019556639866]
								}, {
									"case":	6,
									"scores":	[-4.9019556639866]
								}, {
									"case":	7,
									"scores":	[-4.9019556639866]
								}, {
									"case":	8,
									"scores":	[-4.9019556639866]
								}, {
									"case":	9,
									"scores":	[-4.9019556639866]
								}, {
									"case":	10,
									"scores":	[-4.9019556639866]
								}, {
									"case":	11,
									"scores":	[-4.9019556639866]
								}, {
									"case":	12,
									"scores":	[-4.9019556639866]
								}, {
									"case":	13,
									"scores":	[-4.9019556639866]
								}, {
									"case":	14,
									"scores":	[-4.9019556639866]
								}, {
									"case":	15,
									"scores":	[-4.9019556639866]
								}, {
									"case":	16,
									"scores":	[-4.9019556639866]
								}, {
									"case":	17,
									"scores":	[-4.9019556639866]
								}, {
									"case":	18,
									"scores":	[-4.9019556639866]
								}, {
									"case":	19,
									"scores":	[-4.9019556639866]
								}, {
									"case":	20,
									"scores":	[-4.9019556639866]
								}, {
									"case":	21,
									"scores":	[-4.9019556639866]
								}, {
									"case":	22,
									"scores":	[-4.9019556639866]
								}, {
									"case":	23,
									"scores":	[-4.9019556639866]
								}, {
									"case":	24,
									"scores":	[-4.9019556639866]
								}, {
									"case":	25,
									"scores":	[-4.9019556639866]
								}, {
									"case":	26,
									"scores":	[-4.9019556639866]
								}, {
									"case":	27,
									"scores":	[-4.9019556639866]
								}, {
									"case":	28,
									"scores":	[-4.9019556639866]
								}, {
									"case":	29,
									"scores":	[-4.9019556639866]
								}, {
									"case":	30,
									"scores":	[-4.9019556639866]
								}, {
									"case":	31,
									"scores":	[-4.9019556639866]
								}, {
									"case":	32,
									"scores":	[-4.9019556639866]
								}, {
									"case":	33,
									"scores":	[-4.9019556639866]
								}, {
									"case":	34,
									"scores":	[-4.9019556639866]
								}, {
									"case":	35,
									"scores":	[-4.9019556639866]
								}, {
									"case":	36,
									"scores":	[-4.9019556639866]
								}, {
									"case":	37,
									"scores":	[-4.9019556639866]
								}, {
									"case":	38,
									"scores":	[-4.9019556639866]
								}, {
									"case":	39,
									"scores":	[-4.9019556639866]
								}, {
									"case":	40,
									"scores":	[-4.9019556639866]
								}, {
									"case":	41,
									"scores":	[-4.9019556639866]
								}, {
									"case":	42,
									"scores":	[-4.9019556639866]
								}, {
									"case":	43,
									"scores":	[-4.9019556639866]
								}, {
									"case":	44,
									"scores":	[-4.9019556639866]
								}, {
									"case":	45,
									"scores":	[-4.9019556639866]
								}, {
									"case":	46,
									"scores":	[-4.9019556639866]
								}, {
									"case":	47,
									"scores":	[-4.9019556639866]
								}, {
									"case":	48,
									"scores":	[-4.9019556639866]
								}, {
									"case":	49,
									"scores":	[-4.9019556639866]
								}, {
									"case":	50,
									"scores":	[-4.9019556639866]
								}, {
									"case":	51,
									"scores":	[-4.9019556639866]
								}, {
									"case":	52,
									"scores":	[-4.9019556639866]
								}, {
									"case":	53,
									"scores":	[-4.9019556639866]
								}, {
									"case":	54,
									"scores":	[-4.9019556639866]
								}, {
									"case":	55,
									"scores":	[-4.9019556639866]
								}, {
									"case":	56,
									"scores":	[-4.9019556639866]
								}, {
									"case":	57,
									"scores":	[-4.9019556639866]
								}, {
									"case":	58,
									"scores":	[-4.9019556639866]
								}, {
									"case":	59,
									"scores":	[-4.9019556639866]
								}, {
									"case":	60,
									"scores":	[-4.9019556639866]
								}, {
									"case":	61,
									"scores":	[-4.9019556639866]
								}, {
									"case":	62,
									"scores":	[-4.9019556639866]
								}, {
									"case":	63,
									"scores":	[-4.9019556639866]
								}, {
									"case":	64,
									"scores":	[-4.9019556639866]
								}, {
									"case":	65,
									"scores":	[-4.9019556639866]
								}, {
									"case":	66,
									"scores":	[-4.9019556639866]
								}, {
									"case":	67,
									"scores":	[-4.9019556639866]
								}, {
									"case":	68,
									"scores":	[-4.9019556639866]
								}, {
									"case":	69,
									"scores":	[-4.9019556639866]
								}, {
									"case":	70,
									"scores":	[-4.9019556639866]
								}, {
									"case":	71,
									"scores":	[-4.9019556639866]
								}, {
									"case":	72,
									"scores":	[-4.9019556639866]
								}, {
									"case":	73,
									"scores":	[-4.9019556639866]
								}, {
									"case":	74,
									"scores":	[-4.9019556639866]
								}, {
									"case":	75,
									"scores":	[-4.9019556639866]
								}, {
									"case":	76,
									"scores":	[-4.9019556639866]
								}, {
									"case":	77,
									"scores":	[-4.9019556639866]
								}, {
									"case":	78,
									"scores":	[-4.9019556639866]
								}, {
									"case":	79,
									"scores":	[-4.9019556639866]
								}, {
									"case":	80,
									"scores":	[-4.9019556639866]
								}, {
									"case":	81,
									"scores":	[-4.9019556639866]
								}, {
									"case":	82,
									"scores":	[-4.9019556639866]
								}, {
									"case":	83,
									"scores":	[-4.9019556639866]
								}, {
									"case":	84,
									"scores":	[-4.9019556639866]
								}, {
									"case":	85,
									"scores":	[-4.9019556639866]
								}, {
									"case":	86,
									"scores":	[-4.9019556639866]
								}, {
									"case":	87,
									"scores":	[-4.9019556639866]
								}, {
									"case":	88,
									"scores":	[-4.9019556639866]
								}, {
									"case":	89,
									"scores":	[-4.9019556639866]
								}, {
									"case":	90,
									"scores":	[-4.9019556639866]
								}, {
									"case":	91,
									"scores":	[-4.9019556639866]
								}, {
									"case":	92,
									"scores":	[-4.9019556639866]
								}, {
									"case":	93,
									"scores":	[-4.9019556639866]
								}, {
									"case":	94,
									"scores":	[-4.9019556639866]
								}, {
									"case":	95,
									"scores":	[-4.9019556639866]
								}, {
									"case":	96,
									"scores":	[-4.9019556639866]
								}, {
									"case":	97,
									"scores":	[-4.9019556639866]
								}, {
									"case":	98,
									"scores":	[-4.9019556639866]
								}, {
									"case":	99,
									"scores":	[-4.9019556639866]
								}, {
									"case":	100,
									"scores":	[-4.9019556639866]
								}, {
									"case":	101,
									"scores":	[-4.9019556639866]
								}, {
									"case":	102,
									"scores":	[-4.9019556639866]
								}, {
									"case":	103,
									"scores":	[-4.9019556639866]
								}, {
									"case":	104,
									"scores":	[-4.9019556639866]
								}, {
									"case":	105,
									"scores":	[-4.9019556639866]
								}, {
									"case":	106,
									"scores":	[-4.9019556639866]
								}, {
									"case":	107,
									"scores":	[-4.9019556639866]
								}, {
									"case":	108,
									"scores":	[-4.9019556639866]
								}, {
									"case":	109,
									"scores":	[-4.9019556639866]
								}, {
									"case":	110,
									"scores":	[-4.9019556639866]
								}, {
									"case":	111,
									"scores":	[-4.9019556639866]
								}, {
									"case":	112,
									"scores":	[-4.9019556639866]
								}, {
									"case":	113,
									"scores":	[-4.9019556639866]
								}, {
									"case":	114,
									"scores":	[-4.9019556639866]
								}, {
									"case":	115,
									"scores":	[-4.9019556639866]
								}, {
									"case":	116,
									"scores":	[-4.9019556639866]
								}, {
									"case":	117,
									"scores":	[-4.9019556639866]
								}, {
									"case":	118,
									"scores":	[-4.9019556639866]
								}, {
									"case":	119,
									"scores":	[-4.9019556639866]
								}, {
									"case":	120,
									"scores":	[-4.9019556639866]
								}, {
									"case":	121,
									"scores":	[-4.9019556639866]
								}, {
									"case":	122,
									"scores":	[-4.9019556639866]
								}, {
									"case":	123,
									"scores":	[-4.9019556639866]
								}, {
									"case":	124,
									"scores":	[-4.9019556639866]
								}, {
									"case":	125,
									"scores":	[-4.9019556639866]
								}, {
									"case":	126,
									"scores":	[-4.9019556639866]
								}, {
									"case":	127,
									"scores":	[-4.9019556639866]
								}, {
									"case":	128,
									"scores":	[-4.9019556639866]
								}, {
									"case":	129,
									"scores":	[-4.9019556639866]
								}, {
									"case":	130,
									"scores":	[-4.9019556639866]
								}, {
									"case":	131,
									"scores":	[-4.9019556639866]
								}, {
									"case":	132,
									"scores":	[-4.9019556639866]
								}, {
									"case":	133,
									"scores":	[-4.9019556639866]
								}, {
									"case":	134,
									"scores":	[-4.9019556639866]
								}, {
									"case":	135,
									"scores":	[-4.9019556639866]
								}, {
									"case":	136,
									"scores":	[-4.9019556639866]
								}, {
									"case":	137,
									"scores":	[-4.9019556639866]
								}, {
									"case":	138,
									"scores":	[-4.9019556639866]
								}, {
									"case":	139,
									"scores":	[-4.9019556639866]
								}, {
									"case":	140,
									"scores":	[-4.9019556639866]
								}, {
									"case":	141,
									"scores":	[-4.9019556639866]
								}, {
									"case":	142,
									"scores":	[-4.9019556639866]
								}, {
									"case":	143,
									"scores":	[-4.9019556639866]
								}, {
									"case":	144,
									"scores":	[-4.9019556639866]
								}, {
									"case":	145,
									"scores":	[-4.9019556639866]
								}, {
									"case":	146,
									"scores":	[-4.9019556639866]
								}, {
									"case":	147,
									"scores":	[-4.9019556639866]
								}, {
									"case":	148,
									"scores":	[-4.9019556639866]
								}, {
									"case":	149,
									"scores":	[-4.9019556639866]
								}, {
									"case":	150,
									"scores":	[-4.9019556639866]
								}, {
									"case":	151,
									"scores":	[-4.9019556639866]
								}, {
									"case":	152,
									"scores":	[-4.9019556639866]
								}, {
									"case":	153,
									"scores":	[-4.9019556639866]
								}, {
									"case":	154,
									"scores":	[-4.9019556639866]
								}, {
									"case":	155,
									"scores":	[-4.9019556639866]
								}, {
									"case":	156,
									"scores":	[-4.9019556639866]
								}, {
									"case":	157,
									"scores":	[-4.9019556639866]
								}, {
									"case":	158,
									"scores":	[-4.9019556639866]
								}, {
									"case":	159,
									"scores":	[-4.9019556639866]
								}, {
									"case":	160,
									"scores":	[-4.9019556639866]
								}, {
									"case":	161,
									"scores":	[-4.9019556639866]
								}, {
									"case":	162,
									"scores":	[-4.9019556639866]
								}, {
									"case":	163,
									"scores":	[-4.9019556639866]
								}, {
									"case":	164,
									"scores":	[-4.9019556639866]
								}, {
									"case":	165,
									"scores":	[-4.9019556639866]
								}, {
									"case":	166,
									"scores":	[-4.9019556639866]
								}, {
									"case":	167,
									"scores":	[-4.9019556639866]
								}, {
									"case":	168,
									"scores":	[-4.9019556639866]
								}, {
									"case":	169,
									"scores":	[-4.9019556639866]
								}, {
									"case":	170,
									"scores":	[-4.9019556639866]
								}, {
									"case":	171,
									"scores":	[-4.9019556639866]
								}, {
									"case":	172,
									"scores":	[-4.9019556639866]
								}, {
									"case":	173,
									"scores":	[-4.9019556639866]
								}, {
									"case":	174,
									"scores":	[-4.9019556639866]
								}, {
									"case":	175,
									"scores":	[-4.9019556639866]
								}, {
									"case":	176,
									"scores":	[-4.9019556639866]
								}, {
									"case":	177,
									"scores":	[-4.9019556639866]
								}, {
									"case":	178,
									"scores":	[-4.9019556639866]
								}, {
									"case":	179,
									"scores":	[-4.9019556639866]
								}, {
									"case":	180,
									"scores":	[-4.9019556639866]
								}, {
									"case":	181,
									"scores":	[-4.9019556639866]
								}, {
									"case":	182,
									"scores":	[-4.9019556639866]
								}, {
									"case":	183,
									"scores":	[-4.9019556639866]
								}, {
									"case":	184,
									"scores":	[-4.9019556639866]
								}, {
									"case":	185,
									"scores":	[-4.9019556639866]
								}, {
									"case":	186,
									"scores":	[-4.9019556639866]
								}, {
									"case":	187,
									"scores":	[-4.9019556639866]
								}, {
									"case":	188,
									"scores":	[-4.9019556639866]
								}, {
									"case":	189,
									"scores":	[-4.9019556639866]
								}, {
									"case":	190,
									"scores":	[-4.9019556639866]
								}, {
									"case":	191,
									"scores":	[-4.9019556639866]
								}, {
									"case":	192,
									"scores":	[-4.9019556639866]
								}, {
									"case":	193,
									"scores":	[-4.9019556639866]
								}, {
									"case":	194,
									"scores":	[-4.9019556639866]
								}, {
									"case":	195,
									"scores":	[-4.9019556639866]
								}, {
									"case":	196,
									"scores":	[-4.9019556639866]
								}, {
									"case":	197,
									"scores":	[-4.9019556639866]
								}, {
									"case":	198,
									"scores":	[-4.9019556639866]
								}, {
									"case":	199,
									"scores":	[-4.9019556639866]
								}, {
									"case":	200,
									"scores":	[-4.9019556639866]
								}, {
									"case":	201,
									"scores":	[-4.9019556639866]
								}, {
									"case":	202,
									"scores":	[-4.9019556639866]
								}, {
									"case":	203,
									"scores":	[-4.9019556639866]
								}, {
									"case":	204,
									"scores":	[-4.9019556639866]
								}, {
									"case":	205,
									"scores":	[-4.9019556639866]
								}, {
									"case":	206,
									"scores":	[-4.9019556639866]
								}, {
									"case":	207,
									"scores":	[-4.9019556639866]
								}, {
									"case":	208,
									"scores":	[-4.9019556639866]
								}, {
									"case":	209,
									"scores":	[-4.9019556639866]
								}, {
									"case":	210,
									"scores":	[-4.9019556639866]
								}, {
									"case":	211,
									"scores":	[-4.9019556639866]
								}, {
									"case":	212,
									"scores":	[-4.9019556639866]
								}, {
									"case":	213,
									"scores":	[-4.9019556639866]
								}, {
									"case":	214,
									"scores":	[-4.9019556639866]
								}, {
									"case":	215,
									"scores":	[-4.9019556639866]
								}, {
									"case":	216,
									"scores":	[-4.9019556639866]
								}, {
									"case":	217,
									"scores":	[-4.9019556639866]
								}, {
									"case":	218,
									"scores":	[-4.9019556639866]
								}, {
									"case":	219,
									"scores":	[-4.9019556639866]
								}, {
									"case":	220,
									"scores":	[-4.9019556639866]
								}, {
									"case":	221,
									"scores":	[-4.9019556639866]
								}, {
									"case":	222,
									"scores":	[-4.9019556639866]
								}, {
									"case":	223,
									"scores":	[-4.9019556639866]
								}, {
									"case":	224,
									"scores":	[-4.9019556639866]
								}, {
									"case":	225,
									"scores":	[-4.9019556639866]
								}, {
									"case":	226,
									"scores":	[-4.9019556639866]
								}, {
									"case":	227,
									"scores":	[-4.9019556639866]
								}, {
									"case":	228,
									"scores":	[-4.9019556639866]
								}, {
									"case":	229,
									"scores":	[-4.9019556639866]
								}, {
									"case":	230,
									"scores":	[-4.9019556639866]
								}, {
									"case":	231,
									"scores":	[-4.9019556639866]
								}, {
									"case":	232,
									"scores":	[-4.9019556639866]
								}, {
									"case":	233,
									"scores":	[-4.9019556639866]
								}, {
									"case":	234,
									"scores":	[-4.9019556639866]
								}, {
									"case":	235,
									"scores":	[-4.9019556639866]
								}, {
									"case":	236,
									"scores":	[-4.9019556639866]
								}, {
									"case":	237,
									"scores":	[-4.9019556639866]
								}, {
									"case":	238,
									"scores":	[-4.9019556639866]
								}, {
									"case":	239,
									"scores":	[-4.9019556639866]
								}, {
									"case":	240,
									"scores":	[-4.9019556639866]
								}, {
									"case":	241,
									"scores":	[-4.9019556639866]
								}, {
									"case":	242,
									"scores":	[-4.9019556639866]
								}, {
									"case":	243,
									"scores":	[-4.9019556639866]
								}, {
									"case":	244,
									"scores":	[-4.9019556639866]
								}, {
									"case":	245,
									"scores":	[-4.9019556639866]
								}, {
									"case":	246,
									"scores":	[-4.9019556639866]
								}, {
									"case":	247,
									"scores":	[-4.9019556639866]
								}, {
									"case":	248,
									"scores":	[-4.9019556639866]
								}, {
									"case":	249,
									"scores":	[-4.9019556639866]
								}, {
									"case":	250,
									"scores":	[-4.9019556639866]
								}, {
									"case":	251,
									"scores":	[-4.9019556639866]
								}, {
									"case":	252,
									"scores":	[-4.9019556639866]
								}, {
									"case":	253,
									"scores":	[-4.9019556639866]
								}, {
									"case":	254,
									"scores":	[-4.9019556639866]
								}, {
									"case":	255,
									"scores":	[-4.9019556639866]
								}, {
									"case":	256,
									"scores":	[-4.9019556639866]
								}, {
									"case":	257,
									"scores":	[-4.9019556639866]
								}, {
									"case":	258,
									"scores":	[-4.9019556639866]
								}, {
									"case":	259,
									"scores":	[-4.9019556639866]
								}, {
									"case":	260,
									"scores":	[-4.9019556639866]
								}, {
									"case":	261,
									"scores":	[-4.9019556639866]
								}, {
									"case":	262,
									"scores":	[-4.9019556639866]
								}, {
									"case":	263,
									"scores":	[-4.9019556639866]
								}, {
									"case":	264,
									"scores":	[-4.9019556639866]
								}, {
									"case":	265,
									"scores":	[-4.9019556639866]
								}, {
									"case":	266,
									"scores":	[-4.9019556639866]
								}, {
									"case":	267,
									"scores":	[-4.9019556639866]
								}, {
									"case":	268,
									"scores":	[-4.9019556639866]
								}, {
									"case":	269,
									"scores":	[-4.9019556639866]
								}, {
									"case":	270,
									"scores":	[-4.9019556639866]
								}, {
									"case":	271,
									"scores":	[-4.9019556639866]
								}, {
									"case":	272,
									"scores":	[-4.9019556639866]
								}, {
									"case":	273,
									"scores":	[-4.9019556639866]
								}, {
									"case":	274,
									"scores":	[-4.9019556639866]
								}, {
									"case":	275,
									"scores":	[-4.9019556639866]
								}, {
									"case":	276,
									"scores":	[-4.9019556639866]
								}, {
									"case":	277,
									"scores":	[-4.9019556639866]
								}, {
									"case":	278,
									"scores":	[-4.9019556639866]
								}, {
									"case":	279,
									"scores":	[-4.9019556639866]
								}, {
									"case":	280,
									"scores":	[-4.9019556639866]
								}, {
									"case":	281,
									"scores":	[-4.9019556639866]
								}, {
									"case":	282,
									"scores":	[-4.9019556639866]
								}, {
									"case":	283,
									"scores":	[-4.9019556639866]
								}, {
									"case":	284,
									"scores":	[-4.9019556639866]
								}, {
									"case":	285,
									"scores":	[-4.9019556639866]
								}, {
									"case":	286,
									"scores":	[-4.9019556639866]
								}, {
									"case":	287,
									"scores":	[-4.9019556639866]
								}, {
									"case":	288,
									"scores":	[-4.9019556639866]
								}, {
									"case":	289,
									"scores":	[-4.9019556639866]
								}, {
									"case":	290,
									"scores":	[-4.9019556639866]
								}, {
									"case":	291,
									"scores":	[-4.9019556639866]
								}, {
									"case":	292,
									"scores":	[-4.9019556639866]
								}, {
									"case":	293,
									"scores":	[-4.9019556639866]
								}, {
									"case":	294,
									"scores":	[-4.9019556639866]
								}, {
									"case":	295,
									"scores":	[-4.9019556639866]
								}]
						}]
				}, {
					"line":	862,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [425], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [], [], [], [], [], []],
							"begin_line":	863,
							"begin_column":	0,
							"end_line":	863,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (unlink_errno)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (unlink_errno)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (unlink_errno)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (unlink_errno)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (unlink_errno)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (unlink_errno)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (unlink_errno)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (unlink_errno)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (unlink_errno)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (unlink_errno)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (unlink_errno)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (unlink_errno)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (unlink_errno)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (unlink_errno)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (unlink_errno)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location())", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L863\", 38, &(unlink_errno), sizeof (unlink_errno), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.821144834716522]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}, {
									"case":	14,
									"scores":	[-4.821144834716522]
								}, {
									"case":	15,
									"scores":	[-4.821144834716522]
								}, {
									"case":	16,
									"scores":	[-4.821144834716522]
								}, {
									"case":	17,
									"scores":	[-4.821144834716522]
								}, {
									"case":	18,
									"scores":	[-4.821144834716522]
								}, {
									"case":	19,
									"scores":	[-4.821144834716522]
								}, {
									"case":	20,
									"scores":	[-4.821144834716522]
								}, {
									"case":	21,
									"scores":	[-4.821144834716522]
								}, {
									"case":	22,
									"scores":	[-4.821144834716522]
								}, {
									"case":	23,
									"scores":	[-4.821144834716522]
								}, {
									"case":	24,
									"scores":	[-4.821144834716522]
								}, {
									"case":	25,
									"scores":	[-4.821144834716522]
								}, {
									"case":	26,
									"scores":	[-4.821144834716522]
								}, {
									"case":	27,
									"scores":	[-4.821144834716522]
								}, {
									"case":	28,
									"scores":	[-4.821144834716522]
								}, {
									"case":	29,
									"scores":	[-4.821144834716522]
								}, {
									"case":	30,
									"scores":	[-4.821144834716522]
								}, {
									"case":	31,
									"scores":	[-4.821144834716522]
								}, {
									"case":	32,
									"scores":	[-4.821144834716522]
								}, {
									"case":	33,
									"scores":	[-4.821144834716522]
								}, {
									"case":	34,
									"scores":	[-4.821144834716522]
								}, {
									"case":	35,
									"scores":	[-4.821144834716522]
								}, {
									"case":	36,
									"scores":	[-4.821144834716522]
								}, {
									"case":	37,
									"scores":	[-4.821144834716522]
								}, {
									"case":	38,
									"scores":	[-4.821144834716522]
								}, {
									"case":	39,
									"scores":	[-4.821144834716522]
								}, {
									"case":	40,
									"scores":	[-4.821144834716522]
								}, {
									"case":	41,
									"scores":	[-4.821144834716522]
								}, {
									"case":	42,
									"scores":	[-4.821144834716522]
								}, {
									"case":	43,
									"scores":	[-4.821144834716522]
								}, {
									"case":	44,
									"scores":	[-4.821144834716522]
								}, {
									"case":	45,
									"scores":	[-4.821144834716522]
								}, {
									"case":	46,
									"scores":	[-4.821144834716522]
								}, {
									"case":	47,
									"scores":	[-4.821144834716522]
								}, {
									"case":	48,
									"scores":	[-4.821144834716522]
								}, {
									"case":	49,
									"scores":	[-4.821144834716522]
								}, {
									"case":	50,
									"scores":	[-4.821144834716522]
								}, {
									"case":	51,
									"scores":	[-4.821144834716522]
								}, {
									"case":	52,
									"scores":	[-4.821144834716522]
								}, {
									"case":	53,
									"scores":	[-4.821144834716522]
								}, {
									"case":	54,
									"scores":	[-4.821144834716522]
								}, {
									"case":	55,
									"scores":	[-4.821144834716522]
								}, {
									"case":	56,
									"scores":	[-4.821144834716522]
								}, {
									"case":	57,
									"scores":	[-4.821144834716522]
								}, {
									"case":	58,
									"scores":	[-4.821144834716522]
								}, {
									"case":	59,
									"scores":	[-4.821144834716522]
								}, {
									"case":	60,
									"scores":	[-4.821144834716522]
								}, {
									"case":	61,
									"scores":	[-4.821144834716522]
								}, {
									"case":	62,
									"scores":	[-4.821144834716522]
								}, {
									"case":	63,
									"scores":	[-4.821144834716522]
								}, {
									"case":	64,
									"scores":	[-4.821144834716522]
								}, {
									"case":	65,
									"scores":	[-4.821144834716522]
								}, {
									"case":	66,
									"scores":	[-4.821144834716522]
								}, {
									"case":	67,
									"scores":	[-4.821144834716522]
								}, {
									"case":	68,
									"scores":	[-4.821144834716522]
								}, {
									"case":	69,
									"scores":	[-4.821144834716522]
								}, {
									"case":	70,
									"scores":	[-4.821144834716522]
								}, {
									"case":	71,
									"scores":	[-4.821144834716522]
								}, {
									"case":	72,
									"scores":	[-4.821144834716522]
								}, {
									"case":	73,
									"scores":	[-4.821144834716522]
								}, {
									"case":	74,
									"scores":	[-4.821144834716522]
								}, {
									"case":	75,
									"scores":	[-4.821144834716522]
								}, {
									"case":	76,
									"scores":	[-4.821144834716522]
								}, {
									"case":	77,
									"scores":	[-4.821144834716522]
								}, {
									"case":	78,
									"scores":	[-4.821144834716522]
								}, {
									"case":	79,
									"scores":	[-4.821144834716522]
								}, {
									"case":	80,
									"scores":	[-4.821144834716522]
								}, {
									"case":	81,
									"scores":	[-4.821144834716522]
								}, {
									"case":	82,
									"scores":	[-4.821144834716522]
								}, {
									"case":	83,
									"scores":	[-4.821144834716522]
								}, {
									"case":	84,
									"scores":	[-4.821144834716522]
								}, {
									"case":	85,
									"scores":	[-4.821144834716522]
								}, {
									"case":	86,
									"scores":	[-4.821144834716522]
								}, {
									"case":	87,
									"scores":	[-4.821144834716522]
								}, {
									"case":	88,
									"scores":	[-4.821144834716522]
								}, {
									"case":	89,
									"scores":	[-4.821144834716522]
								}, {
									"case":	90,
									"scores":	[-4.821144834716522]
								}, {
									"case":	91,
									"scores":	[-4.821144834716522]
								}, {
									"case":	92,
									"scores":	[-4.821144834716522]
								}, {
									"case":	93,
									"scores":	[-4.821144834716522]
								}, {
									"case":	94,
									"scores":	[-4.821144834716522]
								}, {
									"case":	95,
									"scores":	[-4.821144834716522]
								}, {
									"case":	96,
									"scores":	[-4.821144834716522]
								}, {
									"case":	97,
									"scores":	[-4.821144834716522]
								}, {
									"case":	98,
									"scores":	[-4.821144834716522]
								}, {
									"case":	99,
									"scores":	[-4.821144834716522]
								}, {
									"case":	100,
									"scores":	[-4.821144834716522]
								}, {
									"case":	101,
									"scores":	[-4.821144834716522]
								}, {
									"case":	102,
									"scores":	[-4.821144834716522]
								}, {
									"case":	103,
									"scores":	[-4.821144834716522]
								}, {
									"case":	104,
									"scores":	[-4.821144834716522]
								}, {
									"case":	105,
									"scores":	[-4.821144834716522]
								}, {
									"case":	106,
									"scores":	[-4.821144834716522]
								}, {
									"case":	107,
									"scores":	[-4.821144834716522]
								}, {
									"case":	108,
									"scores":	[-4.821144834716522]
								}, {
									"case":	109,
									"scores":	[-4.821144834716522]
								}, {
									"case":	110,
									"scores":	[-4.821144834716522]
								}, {
									"case":	111,
									"scores":	[-4.821144834716522]
								}, {
									"case":	112,
									"scores":	[-4.821144834716522]
								}, {
									"case":	113,
									"scores":	[-4.821144834716522]
								}, {
									"case":	114,
									"scores":	[-4.821144834716522]
								}, {
									"case":	115,
									"scores":	[-4.821144834716522]
								}, {
									"case":	116,
									"scores":	[-4.821144834716522]
								}, {
									"case":	117,
									"scores":	[-4.821144834716522]
								}, {
									"case":	118,
									"scores":	[-4.821144834716522]
								}, {
									"case":	119,
									"scores":	[-4.821144834716522]
								}, {
									"case":	120,
									"scores":	[-4.821144834716522]
								}, {
									"case":	121,
									"scores":	[-4.821144834716522]
								}, {
									"case":	122,
									"scores":	[-4.821144834716522]
								}, {
									"case":	123,
									"scores":	[-4.821144834716522]
								}, {
									"case":	124,
									"scores":	[-4.821144834716522]
								}, {
									"case":	125,
									"scores":	[-4.821144834716522]
								}, {
									"case":	126,
									"scores":	[-4.821144834716522]
								}, {
									"case":	127,
									"scores":	[-4.821144834716522]
								}, {
									"case":	128,
									"scores":	[-4.821144834716522]
								}, {
									"case":	129,
									"scores":	[-4.821144834716522]
								}, {
									"case":	130,
									"scores":	[-4.821144834716522]
								}, {
									"case":	131,
									"scores":	[-4.821144834716522]
								}, {
									"case":	132,
									"scores":	[-4.821144834716522]
								}, {
									"case":	133,
									"scores":	[-4.821144834716522]
								}, {
									"case":	134,
									"scores":	[-4.821144834716522]
								}, {
									"case":	135,
									"scores":	[-4.821144834716522]
								}, {
									"case":	136,
									"scores":	[-4.821144834716522]
								}, {
									"case":	137,
									"scores":	[-4.821144834716522]
								}, {
									"case":	138,
									"scores":	[-4.821144834716522]
								}, {
									"case":	139,
									"scores":	[-4.821144834716522]
								}, {
									"case":	140,
									"scores":	[-4.821144834716522]
								}, {
									"case":	141,
									"scores":	[-4.821144834716522]
								}, {
									"case":	142,
									"scores":	[-4.821144834716522]
								}, {
									"case":	143,
									"scores":	[-4.821144834716522]
								}, {
									"case":	144,
									"scores":	[-4.821144834716522]
								}, {
									"case":	145,
									"scores":	[-4.821144834716522]
								}, {
									"case":	146,
									"scores":	[-4.821144834716522]
								}, {
									"case":	147,
									"scores":	[-4.821144834716522]
								}, {
									"case":	148,
									"scores":	[-4.821144834716522]
								}, {
									"case":	149,
									"scores":	[-4.821144834716522]
								}, {
									"case":	150,
									"scores":	[-4.821144834716522]
								}, {
									"case":	151,
									"scores":	[-4.821144834716522]
								}, {
									"case":	152,
									"scores":	[-4.821144834716522]
								}, {
									"case":	153,
									"scores":	[-4.821144834716522]
								}, {
									"case":	154,
									"scores":	[-4.821144834716522]
								}, {
									"case":	155,
									"scores":	[-4.821144834716522]
								}, {
									"case":	156,
									"scores":	[-4.821144834716522]
								}, {
									"case":	157,
									"scores":	[-4.821144834716522]
								}, {
									"case":	158,
									"scores":	[-4.821144834716522]
								}, {
									"case":	159,
									"scores":	[-4.821144834716522]
								}, {
									"case":	160,
									"scores":	[-4.821144834716522]
								}, {
									"case":	161,
									"scores":	[-4.821144834716522]
								}, {
									"case":	162,
									"scores":	[-4.821144834716522]
								}, {
									"case":	163,
									"scores":	[-4.821144834716522]
								}, {
									"case":	164,
									"scores":	[-4.821144834716522]
								}, {
									"case":	165,
									"scores":	[-4.821144834716522]
								}, {
									"case":	166,
									"scores":	[-4.821144834716522]
								}, {
									"case":	167,
									"scores":	[-4.821144834716522]
								}, {
									"case":	168,
									"scores":	[-4.821144834716522]
								}, {
									"case":	169,
									"scores":	[-4.821144834716522]
								}, {
									"case":	170,
									"scores":	[-4.821144834716522]
								}, {
									"case":	171,
									"scores":	[-4.821144834716522]
								}, {
									"case":	172,
									"scores":	[-4.821144834716522]
								}, {
									"case":	173,
									"scores":	[-4.821144834716522]
								}, {
									"case":	174,
									"scores":	[-4.821144834716522]
								}, {
									"case":	175,
									"scores":	[-4.821144834716522]
								}, {
									"case":	176,
									"scores":	[-4.821144834716522]
								}, {
									"case":	177,
									"scores":	[-4.821144834716522]
								}, {
									"case":	178,
									"scores":	[-4.821144834716522]
								}, {
									"case":	179,
									"scores":	[-4.821144834716522]
								}, {
									"case":	180,
									"scores":	[-4.821144834716522]
								}, {
									"case":	181,
									"scores":	[-4.821144834716522]
								}, {
									"case":	182,
									"scores":	[-4.821144834716522]
								}, {
									"case":	183,
									"scores":	[-4.821144834716522]
								}, {
									"case":	184,
									"scores":	[-4.821144834716522]
								}, {
									"case":	185,
									"scores":	[-4.821144834716522]
								}, {
									"case":	186,
									"scores":	[-4.821144834716522]
								}, {
									"case":	187,
									"scores":	[-4.821144834716522]
								}, {
									"case":	188,
									"scores":	[-4.821144834716522]
								}, {
									"case":	189,
									"scores":	[-4.821144834716522]
								}, {
									"case":	190,
									"scores":	[-4.821144834716522]
								}, {
									"case":	191,
									"scores":	[-4.821144834716522]
								}, {
									"case":	192,
									"scores":	[-4.821144834716522]
								}, {
									"case":	193,
									"scores":	[-4.821144834716522]
								}, {
									"case":	194,
									"scores":	[-4.821144834716522]
								}, {
									"case":	195,
									"scores":	[-4.821144834716522]
								}, {
									"case":	196,
									"scores":	[-4.821144834716522]
								}, {
									"case":	197,
									"scores":	[-4.821144834716522]
								}, {
									"case":	198,
									"scores":	[-4.821144834716522]
								}, {
									"case":	199,
									"scores":	[-4.821144834716522]
								}, {
									"case":	200,
									"scores":	[-4.821144834716522]
								}, {
									"case":	201,
									"scores":	[-4.821144834716522]
								}, {
									"case":	202,
									"scores":	[-4.821144834716522]
								}, {
									"case":	203,
									"scores":	[-4.821144834716522]
								}, {
									"case":	204,
									"scores":	[-4.821144834716522]
								}, {
									"case":	205,
									"scores":	[-4.821144834716522]
								}, {
									"case":	206,
									"scores":	[-4.821144834716522]
								}, {
									"case":	207,
									"scores":	[-4.821144834716522]
								}, {
									"case":	208,
									"scores":	[-4.821144834716522]
								}, {
									"case":	209,
									"scores":	[-4.821144834716522]
								}, {
									"case":	210,
									"scores":	[-4.821144834716522]
								}, {
									"case":	211,
									"scores":	[-4.821144834716522]
								}, {
									"case":	212,
									"scores":	[-4.821144834716522]
								}, {
									"case":	213,
									"scores":	[-4.821144834716522]
								}, {
									"case":	214,
									"scores":	[-4.821144834716522]
								}, {
									"case":	215,
									"scores":	[-4.821144834716522]
								}, {
									"case":	216,
									"scores":	[-4.821144834716522]
								}, {
									"case":	217,
									"scores":	[-4.821144834716522]
								}, {
									"case":	218,
									"scores":	[-4.821144834716522]
								}, {
									"case":	219,
									"scores":	[-4.821144834716522]
								}, {
									"case":	220,
									"scores":	[-4.821144834716522]
								}, {
									"case":	221,
									"scores":	[-4.821144834716522]
								}, {
									"case":	222,
									"scores":	[-4.821144834716522]
								}, {
									"case":	223,
									"scores":	[-4.821144834716522]
								}, {
									"case":	224,
									"scores":	[-4.821144834716522]
								}, {
									"case":	225,
									"scores":	[-4.821144834716522]
								}, {
									"case":	226,
									"scores":	[-4.821144834716522]
								}, {
									"case":	227,
									"scores":	[-4.821144834716522]
								}, {
									"case":	228,
									"scores":	[-4.821144834716522]
								}, {
									"case":	229,
									"scores":	[-4.821144834716522]
								}, {
									"case":	230,
									"scores":	[-4.821144834716522]
								}, {
									"case":	231,
									"scores":	[-4.821144834716522]
								}, {
									"case":	232,
									"scores":	[-4.821144834716522]
								}, {
									"case":	233,
									"scores":	[-4.821144834716522]
								}, {
									"case":	234,
									"scores":	[-4.821144834716522]
								}, {
									"case":	235,
									"scores":	[-4.821144834716522]
								}, {
									"case":	236,
									"scores":	[-4.821144834716522]
								}, {
									"case":	237,
									"scores":	[-4.821144834716522]
								}, {
									"case":	238,
									"scores":	[-4.821144834716522]
								}, {
									"case":	239,
									"scores":	[-4.821144834716522]
								}, {
									"case":	240,
									"scores":	[-4.821144834716522]
								}, {
									"case":	241,
									"scores":	[-4.821144834716522]
								}, {
									"case":	242,
									"scores":	[-4.821144834716522]
								}, {
									"case":	243,
									"scores":	[-4.821144834716522]
								}, {
									"case":	244,
									"scores":	[-4.821144834716522]
								}, {
									"case":	245,
									"scores":	[-4.821144834716522]
								}, {
									"case":	246,
									"scores":	[-4.821144834716522]
								}, {
									"case":	247,
									"scores":	[-4.821144834716522]
								}, {
									"case":	248,
									"scores":	[-4.821144834716522]
								}, {
									"case":	249,
									"scores":	[-4.821144834716522]
								}, {
									"case":	250,
									"scores":	[-4.821144834716522]
								}, {
									"case":	251,
									"scores":	[-4.821144834716522]
								}, {
									"case":	252,
									"scores":	[-4.821144834716522]
								}, {
									"case":	253,
									"scores":	[-4.821144834716522]
								}, {
									"case":	254,
									"scores":	[-4.821144834716522]
								}, {
									"case":	255,
									"scores":	[-4.821144834716522]
								}, {
									"case":	256,
									"scores":	[-4.821144834716522]
								}, {
									"case":	257,
									"scores":	[-4.821144834716522]
								}, {
									"case":	258,
									"scores":	[-4.821144834716522]
								}, {
									"case":	259,
									"scores":	[-4.821144834716522]
								}, {
									"case":	260,
									"scores":	[-4.821144834716522]
								}, {
									"case":	261,
									"scores":	[-4.821144834716522]
								}, {
									"case":	262,
									"scores":	[-4.821144834716522]
								}, {
									"case":	263,
									"scores":	[-4.821144834716522]
								}, {
									"case":	264,
									"scores":	[-4.821144834716522]
								}, {
									"case":	265,
									"scores":	[-4.821144834716522]
								}, {
									"case":	266,
									"scores":	[-4.821144834716522]
								}, {
									"case":	267,
									"scores":	[-4.821144834716522]
								}, {
									"case":	268,
									"scores":	[-4.821144834716522]
								}, {
									"case":	269,
									"scores":	[-4.821144834716522]
								}, {
									"case":	270,
									"scores":	[-4.821144834716522]
								}, {
									"case":	271,
									"scores":	[-4.821144834716522]
								}, {
									"case":	272,
									"scores":	[-4.821144834716522]
								}, {
									"case":	273,
									"scores":	[-4.821144834716522]
								}, {
									"case":	274,
									"scores":	[-4.821144834716522]
								}, {
									"case":	275,
									"scores":	[-4.821144834716522]
								}, {
									"case":	276,
									"scores":	[-4.821144834716522]
								}, {
									"case":	277,
									"scores":	[-4.821144834716522]
								}, {
									"case":	278,
									"scores":	[-4.821144834716522]
								}, {
									"case":	279,
									"scores":	[-4.821144834716522]
								}, {
									"case":	280,
									"scores":	[-4.821144834716522]
								}, {
									"case":	281,
									"scores":	[-4.821144834716522]
								}, {
									"case":	282,
									"scores":	[-4.821144834716522]
								}, {
									"case":	283,
									"scores":	[-4.821144834716522]
								}, {
									"case":	284,
									"scores":	[-4.821144834716522]
								}, {
									"case":	285,
									"scores":	[-4.821144834716522]
								}, {
									"case":	286,
									"scores":	[-4.821144834716522]
								}, {
									"case":	287,
									"scores":	[-4.821144834716522]
								}, {
									"case":	288,
									"scores":	[-4.821144834716522]
								}, {
									"case":	289,
									"scores":	[-4.821144834716522]
								}, {
									"case":	290,
									"scores":	[-4.821144834716522]
								}, {
									"case":	291,
									"scores":	[-4.821144834716522]
								}, {
									"case":	292,
									"scores":	[-4.821144834716522]
								}, {
									"case":	293,
									"scores":	[-4.821144834716522]
								}, {
									"case":	294,
									"scores":	[-4.821144834716522]
								}, {
									"case":	295,
									"scores":	[-4.821144834716522]
								}, {
									"case":	296,
									"scores":	[-4.821144834716522]
								}, {
									"case":	297,
									"scores":	[-4.821144834716522]
								}, {
									"case":	298,
									"scores":	[-4.821144834716522]
								}, {
									"case":	299,
									"scores":	[-4.821144834716522]
								}, {
									"case":	300,
									"scores":	[-4.821144834716522]
								}, {
									"case":	301,
									"scores":	[-4.821144834716522]
								}, {
									"case":	302,
									"scores":	[-4.821144834716522]
								}, {
									"case":	303,
									"scores":	[-4.821144834716522]
								}, {
									"case":	304,
									"scores":	[-4.821144834716522]
								}, {
									"case":	305,
									"scores":	[-4.821144834716522]
								}, {
									"case":	306,
									"scores":	[-4.821144834716522]
								}, {
									"case":	307,
									"scores":	[-4.821144834716522]
								}, {
									"case":	308,
									"scores":	[-4.821144834716522]
								}, {
									"case":	309,
									"scores":	[-4.821144834716522]
								}, {
									"case":	310,
									"scores":	[-4.821144834716522]
								}, {
									"case":	311,
									"scores":	[-4.821144834716522]
								}, {
									"case":	312,
									"scores":	[-4.821144834716522]
								}, {
									"case":	313,
									"scores":	[-4.821144834716522]
								}, {
									"case":	314,
									"scores":	[-4.821144834716522]
								}, {
									"case":	315,
									"scores":	[-4.821144834716522]
								}, {
									"case":	316,
									"scores":	[-4.821144834716522]
								}, {
									"case":	317,
									"scores":	[-4.821144834716522]
								}, {
									"case":	318,
									"scores":	[-4.821144834716522]
								}, {
									"case":	319,
									"scores":	[-4.821144834716522]
								}, {
									"case":	320,
									"scores":	[-4.821144834716522]
								}, {
									"case":	321,
									"scores":	[-4.821144834716522]
								}, {
									"case":	322,
									"scores":	[-4.821144834716522]
								}, {
									"case":	323,
									"scores":	[-4.821144834716522]
								}, {
									"case":	324,
									"scores":	[-4.821144834716522]
								}, {
									"case":	325,
									"scores":	[-4.821144834716522]
								}, {
									"case":	326,
									"scores":	[-4.821144834716522]
								}, {
									"case":	327,
									"scores":	[-4.821144834716522]
								}, {
									"case":	328,
									"scores":	[-4.821144834716522]
								}, {
									"case":	329,
									"scores":	[-4.821144834716522]
								}, {
									"case":	330,
									"scores":	[-4.821144834716522]
								}, {
									"case":	331,
									"scores":	[-4.821144834716522]
								}, {
									"case":	332,
									"scores":	[-4.821144834716522]
								}, {
									"case":	333,
									"scores":	[-4.821144834716522]
								}, {
									"case":	334,
									"scores":	[-4.821144834716522]
								}, {
									"case":	335,
									"scores":	[-4.821144834716522]
								}, {
									"case":	336,
									"scores":	[-4.821144834716522]
								}, {
									"case":	337,
									"scores":	[-4.821144834716522]
								}, {
									"case":	338,
									"scores":	[-4.821144834716522]
								}, {
									"case":	339,
									"scores":	[-4.821144834716522]
								}, {
									"case":	340,
									"scores":	[-4.821144834716522]
								}, {
									"case":	341,
									"scores":	[-4.821144834716522]
								}, {
									"case":	342,
									"scores":	[-4.821144834716522]
								}, {
									"case":	343,
									"scores":	[-4.821144834716522]
								}, {
									"case":	344,
									"scores":	[-4.821144834716522]
								}, {
									"case":	345,
									"scores":	[-4.821144834716522]
								}, {
									"case":	346,
									"scores":	[-4.821144834716522]
								}, {
									"case":	347,
									"scores":	[-4.821144834716522]
								}, {
									"case":	348,
									"scores":	[-4.821144834716522]
								}, {
									"case":	349,
									"scores":	[-4.821144834716522]
								}, {
									"case":	350,
									"scores":	[-4.821144834716522]
								}, {
									"case":	351,
									"scores":	[-4.821144834716522]
								}, {
									"case":	352,
									"scores":	[-4.821144834716522]
								}, {
									"case":	353,
									"scores":	[-4.821144834716522]
								}, {
									"case":	354,
									"scores":	[-4.821144834716522]
								}, {
									"case":	355,
									"scores":	[-4.821144834716522]
								}, {
									"case":	356,
									"scores":	[-4.821144834716522]
								}, {
									"case":	357,
									"scores":	[-4.821144834716522]
								}, {
									"case":	358,
									"scores":	[-4.821144834716522]
								}, {
									"case":	359,
									"scores":	[-4.821144834716522]
								}, {
									"case":	360,
									"scores":	[-4.821144834716522]
								}, {
									"case":	361,
									"scores":	[-4.821144834716522]
								}, {
									"case":	362,
									"scores":	[-4.821144834716522]
								}, {
									"case":	363,
									"scores":	[-4.821144834716522]
								}, {
									"case":	364,
									"scores":	[-4.821144834716522]
								}, {
									"case":	365,
									"scores":	[-4.821144834716522]
								}, {
									"case":	366,
									"scores":	[-4.821144834716522]
								}, {
									"case":	367,
									"scores":	[-4.821144834716522]
								}, {
									"case":	368,
									"scores":	[-4.821144834716522]
								}, {
									"case":	369,
									"scores":	[-4.821144834716522]
								}, {
									"case":	370,
									"scores":	[-4.821144834716522]
								}, {
									"case":	371,
									"scores":	[-4.821144834716522]
								}, {
									"case":	372,
									"scores":	[-4.821144834716522]
								}, {
									"case":	373,
									"scores":	[-4.821144834716522]
								}, {
									"case":	374,
									"scores":	[-4.821144834716522]
								}, {
									"case":	375,
									"scores":	[-4.821144834716522]
								}, {
									"case":	376,
									"scores":	[-4.821144834716522]
								}, {
									"case":	377,
									"scores":	[-4.821144834716522]
								}, {
									"case":	378,
									"scores":	[-4.821144834716522]
								}, {
									"case":	379,
									"scores":	[-4.821144834716522]
								}, {
									"case":	380,
									"scores":	[-4.821144834716522]
								}, {
									"case":	381,
									"scores":	[-4.821144834716522]
								}, {
									"case":	382,
									"scores":	[-4.821144834716522]
								}, {
									"case":	383,
									"scores":	[-4.821144834716522]
								}, {
									"case":	384,
									"scores":	[-4.821144834716522]
								}, {
									"case":	385,
									"scores":	[-4.821144834716522]
								}, {
									"case":	386,
									"scores":	[-4.821144834716522]
								}, {
									"case":	387,
									"scores":	[-4.821144834716522]
								}, {
									"case":	388,
									"scores":	[-4.821144834716522]
								}, {
									"case":	389,
									"scores":	[-4.821144834716522]
								}, {
									"case":	390,
									"scores":	[-4.821144834716522]
								}, {
									"case":	391,
									"scores":	[-4.821144834716522]
								}, {
									"case":	392,
									"scores":	[-4.821144834716522]
								}, {
									"case":	393,
									"scores":	[-4.821144834716522]
								}, {
									"case":	394,
									"scores":	[-4.821144834716522]
								}, {
									"case":	395,
									"scores":	[-4.821144834716522]
								}, {
									"case":	396,
									"scores":	[-4.821144834716522]
								}, {
									"case":	397,
									"scores":	[-4.821144834716522]
								}, {
									"case":	398,
									"scores":	[-4.821144834716522]
								}, {
									"case":	399,
									"scores":	[-4.821144834716522]
								}, {
									"case":	400,
									"scores":	[-4.821144834716522]
								}, {
									"case":	401,
									"scores":	[-4.821144834716522]
								}, {
									"case":	402,
									"scores":	[-4.821144834716522]
								}, {
									"case":	403,
									"scores":	[-4.821144834716522]
								}, {
									"case":	404,
									"scores":	[-4.821144834716522]
								}, {
									"case":	405,
									"scores":	[-4.821144834716522]
								}, {
									"case":	406,
									"scores":	[-4.821144834716522]
								}, {
									"case":	407,
									"scores":	[-4.821144834716522]
								}, {
									"case":	408,
									"scores":	[-4.821144834716522]
								}, {
									"case":	409,
									"scores":	[-4.821144834716522]
								}, {
									"case":	410,
									"scores":	[-4.821144834716522]
								}, {
									"case":	411,
									"scores":	[-4.821144834716522]
								}, {
									"case":	412,
									"scores":	[-4.821144834716522]
								}, {
									"case":	413,
									"scores":	[-4.821144834716522]
								}, {
									"case":	414,
									"scores":	[-4.821144834716522]
								}, {
									"case":	415,
									"scores":	[-4.821144834716522]
								}, {
									"case":	416,
									"scores":	[-4.821144834716522]
								}, {
									"case":	417,
									"scores":	[-4.821144834716522]
								}, {
									"case":	418,
									"scores":	[-4.821144834716522]
								}, {
									"case":	419,
									"scores":	[-4.821144834716522]
								}, {
									"case":	420,
									"scores":	[-4.821144834716522]
								}, {
									"case":	421,
									"scores":	[-4.821144834716522]
								}, {
									"case":	422,
									"scores":	[-4.821144834716522]
								}, {
									"case":	423,
									"scores":	[-4.821144834716522]
								}, {
									"case":	424,
									"scores":	[-4.821144834716522]
								}, {
									"case":	425,
									"scores":	[-5.4000663647165226, -6.7166413578165223, -8.49341325781652, -9.50701157161652, -8.25541955781652, -8.25541955781652, -8.49341325781652, -9.50701157161652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.25541955781652, -8.02915049471652, -8.25541955781652]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [], [3, 4], [], [], [], [], [], [], [], [2]],
							"begin_line":	863,
							"begin_column":	2,
							"end_line":	863,
							"end_column":	41,
							"patch_codes":	["if (!__is_neg(\"\", \"L863\", 38, &(unlink_errno), sizeof (unlink_errno), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    sigprocmask(2, &oldset, ((void *)0));\n", "{\n}\n", "dprintf(2, &oldset, ((void *)0))", "pthread_sigmask(2, &oldset, ((void *)0))", "sigprocmask((0 * unlink_errno), &oldset, ((void *)0))", "sigprocmask((0), &oldset, ((void *)0))", "sigprocmask((iname != 0), &oldset, ((void *)0))", "sigprocmask((iname == 0), &oldset, ((void *)0))", "sigprocmask((oldset != 0), &oldset, ((void *)0))", "sigprocmask((oldset == 0), &oldset, ((void *)0))", "sigprocmask((unlink_errno != 0), &oldset, ((void *)0))", "sigprocmask((unlink_errno + 0), &oldset, ((void *)0))", "sigprocmask((unlink_errno - 0), &oldset, ((void *)0))", "sigprocmask((unlink_errno == 0), &oldset, ((void *)0))", "sigprocmask(2, &(oldset), ((void *)0))", "sigprocmask(2, &oldset, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5469571347165214, -6.7687822617165221, -6.21065371471652, -5.8977778917165216, -6.3481341147165216, -6.3481341147165216, -6.21065371471652, -5.8977778917165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.3481341147165216, -6.5685253147165223, -6.3481341147165216]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}, {
									"case":	14,
									"scores":	[-4.821144834716522]
								}, {
									"case":	15,
									"scores":	[-4.821144834716522]
								}, {
									"case":	16,
									"scores":	[-4.821144834716522]
								}]
						}]
				}, {
					"line":	864,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [425], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [], [], [], [], [], []],
							"begin_line":	865,
							"begin_column":	0,
							"end_line":	865,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (unlink_errno)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (unlink_errno)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (unlink_errno)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (unlink_errno)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (unlink_errno)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (unlink_errno)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (unlink_errno)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (unlink_errno)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (unlink_errno)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (unlink_errno)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (unlink_errno)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (unlink_errno)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (unlink_errno)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (unlink_errno)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (unlink_errno)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "unlink_errno = (-1)", "unlink_errno = (0)", "unlink_errno = (1)", "unlink_errno = (1024)", "unlink_errno = (16384)", "unlink_errno = (2)", "unlink_errno = (2048)", "unlink_errno = (32768)", "unlink_errno = (512)", "unlink_errno = (61440)", "unlink_errno = (unlink_errno)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (unlink_errno)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location())", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L865\", 38, &(unlink_errno), sizeof (unlink_errno), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	2,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	3,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	4,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	5,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	6,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	7,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	8,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	9,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	10,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	11,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	12,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	13,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	14,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	15,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	16,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	17,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	18,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	19,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	20,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	21,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	22,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	23,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	24,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	25,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	26,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	27,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	28,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	29,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	30,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	31,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	32,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	33,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	34,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	35,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	36,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	37,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	38,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	39,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	40,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	41,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	42,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	43,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	44,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	45,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	46,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	47,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	48,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	49,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	50,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	51,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	52,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	53,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	54,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	55,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	56,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	57,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	58,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	59,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	60,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	61,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	62,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	63,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	64,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	65,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	66,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	67,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	68,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	69,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	70,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	71,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	72,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	73,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	74,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	75,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	76,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	77,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	78,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	79,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	80,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	81,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	82,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	83,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	84,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	85,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	86,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	87,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	88,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	89,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	90,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	91,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	92,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	93,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	94,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	95,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	96,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	97,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	98,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	99,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	100,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	101,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	102,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	103,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	104,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	105,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	106,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	107,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	108,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	109,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	110,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	111,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	112,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	113,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	114,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	115,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	116,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	117,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	118,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	119,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	120,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	121,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	122,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	123,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	124,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	125,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	126,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	127,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	128,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	129,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	130,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	131,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	132,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	133,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	134,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	135,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	136,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	137,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	138,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	139,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	140,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	141,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	142,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	143,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	144,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	145,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	146,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	147,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	148,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	149,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	150,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	151,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	152,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	153,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	154,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	155,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	156,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	157,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	158,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	159,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	160,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	161,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	162,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	163,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	164,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	165,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	166,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	167,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	168,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	169,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	170,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	171,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	172,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	173,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	174,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	175,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	176,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	177,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	178,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	179,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	180,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	181,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	182,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	183,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	184,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	185,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	186,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	187,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	188,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	189,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	190,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	191,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	192,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	193,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	194,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	195,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	196,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	197,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	198,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	199,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	200,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	201,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	202,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	203,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	204,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	205,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	206,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	207,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	208,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	209,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	210,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	211,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	212,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	213,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	214,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	215,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	216,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	217,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	218,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	219,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	220,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	221,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	222,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	223,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	224,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	225,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	226,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	227,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	228,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	229,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	230,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	231,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	232,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	233,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	234,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	235,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	236,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	237,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	238,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	239,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	240,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	241,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	242,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	243,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	244,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	245,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	246,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	247,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	248,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	249,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	250,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	251,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	252,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	253,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	254,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	255,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	256,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	257,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	258,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	259,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	260,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	261,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	262,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	263,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	264,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	265,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	266,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	267,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	268,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	269,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	270,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	271,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	272,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	273,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	274,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	275,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	276,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	277,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	278,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	279,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	280,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	281,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	282,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	283,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	284,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	285,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	286,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	287,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	288,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	289,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	290,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	291,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	292,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	293,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	294,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	295,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	296,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	297,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	298,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	299,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	300,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	301,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	302,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	303,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	304,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	305,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	306,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	307,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	308,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	309,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	310,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	311,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	312,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	313,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	314,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	315,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	316,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	317,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	318,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	319,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	320,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	321,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	322,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	323,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	324,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	325,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	326,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	327,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	328,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	329,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	330,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	331,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	332,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	333,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	334,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	335,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	336,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	337,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	338,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	339,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	340,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	341,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	342,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	343,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	344,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	345,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	346,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	347,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	348,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	349,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	350,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	351,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	352,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	353,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	354,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	355,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	356,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	357,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	358,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	359,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	360,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	361,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	362,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	363,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	364,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	365,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	366,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	367,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	368,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	369,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	370,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	371,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	372,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	373,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	374,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	375,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	376,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	377,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	378,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	379,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	380,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	381,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	382,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	383,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	384,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	385,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	386,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	387,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	388,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	389,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	390,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	391,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	392,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	393,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	394,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	395,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	396,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	397,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	398,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	399,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	400,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	401,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	402,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	403,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	404,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	405,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	406,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	407,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	408,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	409,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	410,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	411,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	412,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	413,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	414,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	415,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	416,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	417,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	418,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	419,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	420,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	421,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	422,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	423,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	424,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	425,
									"scores":	[-4.654352537399002, -7.3778686304990027, -8.444990615199, -8.2875227304990027, -8.2875227304990027, -7.3778686304990027, -8.444990615199, -6.7487445304990024, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.2875227304990027, -8.061253667399, -8.2875227304990027]
								}]
						}, {
							"switch":	25,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	865,
							"begin_column":	2,
							"end_line":	873,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L865\", 38, &(unlink_errno), sizeof (unlink_errno), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = unlink_errno;\n        perror(ifname);\n    }\n}\n", "if ((unlink_errno) || __is_neg(\"\", \"L865\", 38, &(unlink_errno), sizeof (unlink_errno), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = unlink_errno;\n        perror(ifname);\n    }\n}\n", "if ((unlink_errno) && !__is_neg(\"\", \"L865\", 38, &(unlink_errno), sizeof (unlink_errno), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = unlink_errno;\n        perror(ifname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7901151601281455, -6.2101887401281459, -4.9409220131281462, -6.4379673401281465, -6.4379673401281465, -6.2101887401281459, -4.9409220131281462, -6.8586154871281462, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.4379673401281465, -6.6583585401281447, -6.4379673401281465]
								}, {
									"case":	2,
									"scores":	[-2.8541551254281456, -4.274228705428146, -3.0049619784281463, -4.5020073054281458, -4.5020073054281458, -4.274228705428146, -3.0049619784281463, -4.9226554524281454, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.7223985054281457, -4.5020073054281458]
								}, {
									"case":	3,
									"scores":	[-2.8541551254281456, -4.274228705428146, -3.0049619784281463, -4.5020073054281458, -4.5020073054281458, -4.274228705428146, -3.0049619784281463, -4.9226554524281454, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.5020073054281458, -4.7223985054281457, -4.5020073054281458]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	865,
							"begin_column":	2,
							"end_line":	873,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L865\", 38, &(unlink_errno), sizeof (unlink_errno), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    if (unlink_errno) {\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = unlink_errno;\n            perror(ifname);\n        }\n    }\n", "if (!__is_neg(\"\", \"L865\", 38, &(unlink_errno), sizeof (unlink_errno), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)) && (unlink_errno)) {\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = unlink_errno;\n        perror(ifname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7557362473990024, -6.1758098273990019, -4.9065431003990021, -6.4035884273990025, -6.4035884273990025, -6.1758098273990019, -4.9065431003990021, -6.8242365743990021, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.6239796273990024, -6.4035884273990025]
								}, {
									"case":	2,
									"scores":	[-4.7557362473990024, -6.1758098273990019, -4.9065431003990021, -6.4035884273990025, -6.4035884273990025, -6.1758098273990019, -4.9065431003990021, -6.8242365743990021, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.4035884273990025, -6.6239796273990024, -6.4035884273990025]
								}]
						}]
				}, {
					"line":	850,
					"switches":	[{
							"switch":	9,
							"types":	[[], [], [], [], [], [], [], [], [], [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280], [], [], [], [], [], []],
							"begin_line":	851,
							"begin_column":	3,
							"end_line":	851,
							"end_column":	3,
							"patch_codes":	["(iname)++", "(iname)--", "__printf__(\"%s %s\\n\", (iname), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\""],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	68,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	69,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	70,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	71,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	72,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	73,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	74,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	75,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	76,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	77,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	78,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	79,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	80,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	81,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	82,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	83,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	84,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	85,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	86,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	87,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	88,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	89,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	90,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	91,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	92,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	93,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	94,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	95,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	96,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	97,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	98,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	99,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	100,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	101,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	102,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	103,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	104,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	105,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	106,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	107,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	108,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	109,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	110,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	111,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	112,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	113,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	114,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	115,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	116,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	117,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	118,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	119,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	120,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	121,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	122,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	123,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	124,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	125,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	126,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	127,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	128,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	129,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	130,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	131,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	132,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	133,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	134,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	135,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	136,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	137,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	138,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	139,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	140,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	141,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	142,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	143,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	144,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	145,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	146,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	147,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	148,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	149,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	150,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	151,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	152,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	153,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	154,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	155,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	156,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	157,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	158,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	159,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	160,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	161,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	162,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	163,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	164,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	165,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	166,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	167,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	168,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	169,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	170,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	171,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	172,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	173,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	174,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	175,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	176,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	177,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	178,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	179,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	180,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	181,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	182,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	183,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	184,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	185,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	186,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	187,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	188,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	189,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	190,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	191,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	192,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	193,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	194,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	195,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	196,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	197,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	198,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	199,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	200,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	201,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	202,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	203,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	204,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	205,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	206,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	207,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	208,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	209,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	210,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	211,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	212,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	213,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	214,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	215,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	216,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	217,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	218,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	219,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	220,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	221,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	222,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	223,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	224,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	225,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	226,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	227,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	228,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	229,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	230,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	231,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	232,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	233,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	234,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	235,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	236,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	237,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	238,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	239,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	240,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	241,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	242,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	243,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	244,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	245,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	246,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	247,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	248,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	249,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	250,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	251,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	252,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	253,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	254,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	255,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	256,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	257,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	258,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	259,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	260,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	261,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	262,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	263,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	264,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	265,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	266,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	267,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	268,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	269,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	270,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	271,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	272,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	273,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	274,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	275,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	276,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	277,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	278,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	279,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	280,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	281,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	282,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	283,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	284,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	285,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	286,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	287,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	288,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	289,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	290,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	291,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	292,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	293,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	294,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	295,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	296,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	297,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	298,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	299,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	300,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	301,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	302,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	303,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	304,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	305,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	306,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	307,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	308,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	309,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	310,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	311,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	312,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	313,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	314,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	315,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	316,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	317,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	318,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	319,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	320,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	321,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	322,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	323,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	324,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	325,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	326,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	327,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	328,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	329,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	330,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	331,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	332,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	333,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	334,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	335,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	336,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	337,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	338,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	339,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	340,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	341,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	342,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	343,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	344,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	345,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	346,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	347,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	348,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	349,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	350,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	351,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	352,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	353,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	354,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	355,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	356,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	357,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	358,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	359,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	360,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	361,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	362,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	363,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	364,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	365,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	366,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	367,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	368,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	369,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	370,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	371,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	372,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	373,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	374,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	375,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	376,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	377,
									"scores":	[-5.8312802005924951]
								}]
						}, {
							"switch":	10,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	851,
							"begin_column":	5,
							"end_line":	874,
							"end_column":	7,
							"patch_codes":	["if (__is_neg(\"\", \"L851\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    sigset_t oldset;\n    int unlink_errno;\n    copy_stat(&istat);\n    if (close(ofd) != 0)\n        write_error();\n    sigprocmask(0, &caught_signals, &oldset);\n    remove_ofname_fd = -1;\n    unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n    sigprocmask(2, &oldset, ((void *)0));\n    if (unlink_errno) {\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = unlink_errno;\n            perror(ifname);\n        }\n    }\n}\n", "if ((!to_stdout) && !__is_neg(\"\", \"L851\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    sigset_t oldset;\n    int unlink_errno;\n    copy_stat(&istat);\n    if (close(ofd) != 0)\n        write_error();\n    sigprocmask(0, &caught_signals, &oldset);\n    remove_ofname_fd = -1;\n    unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n    sigprocmask(2, &oldset, ((void *)0));\n    if (unlink_errno) {\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = unlink_errno;\n            perror(ifname);\n        }\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.302405829128146, -7.302405829128146, -7.074903448828147, -7.074903448828147, -8.001001376128146, -6.6255895488281453, -8.001001376128146, -6.6255895488281453, -5.837940976128146, -5.837940976128146, -8.0225615021281449, -7.0746272291281453, -5.8053605021281465, -7.302405829128146, -7.302405829128146, -7.0746272291281453, -5.8053605021281465, -7.7211919791281449, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.3821274291281451, -7.7355857291281449, -7.3821274291281451, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.5227970291281459, -7.302405829128146]
								}, {
									"case":	2,
									"scores":	[-4.7615736054281461, -4.7615736054281461, -4.5340712251281463, -4.5340712251281463, -5.4601691524281462, -4.0847573251281464, -5.4601691524281462, -4.0847573251281464, -3.2971087524281462, -3.2971087524281462, -5.4817292784281459, -4.5337950054281464, -3.2645282784281462, -4.7615736054281461, -4.7615736054281461, -4.5337950054281464, -3.2645282784281462, -5.180359755428146, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.8412952054281462, -5.194753505428146, -4.8412952054281462, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.981964805428146, -4.7615736054281461]
								}]
						}]
				}, {
					"line":	1006,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [379, 380], [], [], [], [], [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], [], [], [], [], [], []],
							"begin_line":	1007,
							"begin_column":	10,
							"end_line":	1007,
							"end_column":	10,
							"patch_codes":	["(name)++", "(name)--", "(suf)++", "__printf__(\"%s %s\\n\", (name), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (name))", "args = (suf)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = (3)", "bytes_in = (30)", "bytes_in = (32)", "bytes_in = (33)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "bytes_out = (3)", "bytes_out = (30)", "bytes_out = (32)", "bytes_out = (33)", "env = (name)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (3)", "exit_code = (30)", "exit_code = (32)", "exit_code = (33)", "exit_code = (nlen)", "exit_code = (s)", "exit_code = (slen)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (3)", "exiting_signal = (30)", "exiting_signal = (32)", "exiting_signal = (33)", "exiting_signal = (nlen)", "exiting_signal = (s)", "exiting_signal = (slen)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (3)", "foreground = (30)", "foreground = (32)", "foreground = (33)", "foreground = (nlen)", "foreground = (s)", "foreground = (slen)", "free((name))", "free((suf))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = (3)", "header_bytes = (30)", "header_bytes = (32)", "header_bytes = (33)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (3)", "ifd = (30)", "ifd = (32)", "ifd = (33)", "ifd = (nlen)", "ifd = (s)", "ifd = (slen)", "ifd = open_input_file((name), &istat)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "ifile_size = (3)", "ifile_size = (30)", "ifile_size = (32)", "ifile_size = (33)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "inptr = (3)", "inptr = (30)", "inptr = (32)", "inptr = (33)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (3)", "last_member = (30)", "last_member = (32)", "last_member = (33)", "last_member = (nlen)", "last_member = (s)", "last_member = (slen)", "list = (0)", "list = (1)", "list = (2)", "list = (3)", "list = (30)", "list = (32)", "list = (33)", "list = (nlen)", "list = (s)", "list = (slen)", "method = (0)", "method = (1)", "method = (2)", "method = (3)", "method = (30)", "method = (32)", "method = (33)", "method = (nlen)", "method = (s)", "method = (slen)", "nlen = (0)", "nlen = (1)", "nlen = (2)", "nlen = (3)", "nlen = (30)", "nlen = (32)", "nlen = (33)", "nlen = (nlen)", "nlen = (s)", "nlen = (slen)", "nlen = strlen((name))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (3)", "no_name = (30)", "no_name = (32)", "no_name = (33)", "no_name = (nlen)", "no_name = (s)", "no_name = (slen)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (3)", "no_time = (30)", "no_time = (32)", "no_time = (33)", "no_time = (nlen)", "no_time = (s)", "no_time = (slen)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (3)", "ofd = (30)", "ofd = (32)", "ofd = (33)", "ofd = (nlen)", "ofd = (s)", "ofd = (slen)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (3)", "part_nb = (30)", "part_nb = (32)", "part_nb = (33)", "part_nb = (nlen)", "part_nb = (s)", "part_nb = (slen)", "perror((name))", "progerror((name))", "program_name = (name)", "program_name = gzip_base_name((suf)[0])", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (3)", "quiet = (30)", "quiet = (32)", "quiet = (33)", "quiet = (nlen)", "quiet = (s)", "quiet = (slen)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (3)", "remove_ofname_fd = (30)", "remove_ofname_fd = (32)", "remove_ofname_fd = (33)", "remove_ofname_fd = (nlen)", "remove_ofname_fd = (s)", "remove_ofname_fd = (slen)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (3)", "save_orig_name = (30)", "save_orig_name = (32)", "save_orig_name = (33)", "save_orig_name = (nlen)", "save_orig_name = (s)", "save_orig_name = (slen)", "slen = (0)", "slen = (1)", "slen = (2)", "slen = (3)", "slen = (30)", "slen = (32)", "slen = (33)", "slen = (nlen)", "slen = (s)", "slen = (slen)", "strcat(ifname, (name))", "strcat(ofname, (name))", "strcpy((name) - 4, \".tgz\")", "strcpy((name), \".tar\")", "strcpy((name), z_suffix)", "strcpy(ifname, (name))", "strcpy(suffix, (name) + nlen - 30 - 2)", "strcpy(suffix, (name))", "strlwr((name))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (33)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (33)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (3)", "to_stdout = (30)", "to_stdout = (32)", "to_stdout = (33)", "to_stdout = (nlen)", "to_stdout = (s)", "to_stdout = (slen)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_in = (3)", "total_in = (30)", "total_in = (32)", "total_in = (33)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "total_out = (3)", "total_out = (30)", "total_out = (32)", "total_out = (33)", "treat_dir(ifd, (name))", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (3)", "verbose = (30)", "verbose = (32)", "verbose = (33)", "verbose = (nlen)", "verbose = (s)", "verbose = (slen)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = (3)", "z_len = (30)", "z_len = (32)", "z_len = (33)", "z_len = strlen((name))", "z_suffix = (name)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "nlen = strlen(name)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "slen = strlen(suffix)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "strcpy(suffix, name + nlen - 30 - 2)", "strcpy(suffix, name)", "strlwr(suffix)", "suf++", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1007\", 6, &(name), sizeof (name), &(nlen), sizeof (nlen), &(s), sizeof (s), &(slen), sizeof (slen), &(suf), sizeof (suf), &(z_suffix), sizeof (z_suffix)))\n    break;\n", "if (__is_neg(\"\", \"L1007\", 6, &(name), sizeof (name), &(nlen), sizeof (nlen), &(s), sizeof (s), &(slen), sizeof (slen), &(suf), sizeof (suf), &(z_suffix), sizeof (z_suffix)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.699928590811405]
								}, {
									"case":	2,
									"scores":	[-4.699928590811405]
								}, {
									"case":	3,
									"scores":	[-4.699928590811405]
								}, {
									"case":	4,
									"scores":	[-4.699928590811405]
								}, {
									"case":	5,
									"scores":	[-4.699928590811405]
								}, {
									"case":	6,
									"scores":	[-4.699928590811405]
								}, {
									"case":	7,
									"scores":	[-4.699928590811405]
								}, {
									"case":	8,
									"scores":	[-4.699928590811405]
								}, {
									"case":	9,
									"scores":	[-4.699928590811405]
								}, {
									"case":	10,
									"scores":	[-4.699928590811405]
								}, {
									"case":	11,
									"scores":	[-4.699928590811405]
								}, {
									"case":	12,
									"scores":	[-4.699928590811405]
								}, {
									"case":	13,
									"scores":	[-4.699928590811405]
								}, {
									"case":	14,
									"scores":	[-4.699928590811405]
								}, {
									"case":	15,
									"scores":	[-4.699928590811405]
								}, {
									"case":	16,
									"scores":	[-4.699928590811405]
								}, {
									"case":	17,
									"scores":	[-4.699928590811405]
								}, {
									"case":	18,
									"scores":	[-4.699928590811405]
								}, {
									"case":	19,
									"scores":	[-4.699928590811405]
								}, {
									"case":	20,
									"scores":	[-4.699928590811405]
								}, {
									"case":	21,
									"scores":	[-4.699928590811405]
								}, {
									"case":	22,
									"scores":	[-4.699928590811405]
								}, {
									"case":	23,
									"scores":	[-4.699928590811405]
								}, {
									"case":	24,
									"scores":	[-4.699928590811405]
								}, {
									"case":	25,
									"scores":	[-4.699928590811405]
								}, {
									"case":	26,
									"scores":	[-4.699928590811405]
								}, {
									"case":	27,
									"scores":	[-4.699928590811405]
								}, {
									"case":	28,
									"scores":	[-4.699928590811405]
								}, {
									"case":	29,
									"scores":	[-4.699928590811405]
								}, {
									"case":	30,
									"scores":	[-4.699928590811405]
								}, {
									"case":	31,
									"scores":	[-4.699928590811405]
								}, {
									"case":	32,
									"scores":	[-4.699928590811405]
								}, {
									"case":	33,
									"scores":	[-4.699928590811405]
								}, {
									"case":	34,
									"scores":	[-4.699928590811405]
								}, {
									"case":	35,
									"scores":	[-4.699928590811405]
								}, {
									"case":	36,
									"scores":	[-4.699928590811405]
								}, {
									"case":	37,
									"scores":	[-4.699928590811405]
								}, {
									"case":	38,
									"scores":	[-4.699928590811405]
								}, {
									"case":	39,
									"scores":	[-4.699928590811405]
								}, {
									"case":	40,
									"scores":	[-4.699928590811405]
								}, {
									"case":	41,
									"scores":	[-4.699928590811405]
								}, {
									"case":	42,
									"scores":	[-4.699928590811405]
								}, {
									"case":	43,
									"scores":	[-4.699928590811405]
								}, {
									"case":	44,
									"scores":	[-4.699928590811405]
								}, {
									"case":	45,
									"scores":	[-4.699928590811405]
								}, {
									"case":	46,
									"scores":	[-4.699928590811405]
								}, {
									"case":	47,
									"scores":	[-4.699928590811405]
								}, {
									"case":	48,
									"scores":	[-4.699928590811405]
								}, {
									"case":	49,
									"scores":	[-4.699928590811405]
								}, {
									"case":	50,
									"scores":	[-4.699928590811405]
								}, {
									"case":	51,
									"scores":	[-4.699928590811405]
								}, {
									"case":	52,
									"scores":	[-4.699928590811405]
								}, {
									"case":	53,
									"scores":	[-4.699928590811405]
								}, {
									"case":	54,
									"scores":	[-4.699928590811405]
								}, {
									"case":	55,
									"scores":	[-4.699928590811405]
								}, {
									"case":	56,
									"scores":	[-4.699928590811405]
								}, {
									"case":	57,
									"scores":	[-4.699928590811405]
								}, {
									"case":	58,
									"scores":	[-4.699928590811405]
								}, {
									"case":	59,
									"scores":	[-4.699928590811405]
								}, {
									"case":	60,
									"scores":	[-4.699928590811405]
								}, {
									"case":	61,
									"scores":	[-4.699928590811405]
								}, {
									"case":	62,
									"scores":	[-4.699928590811405]
								}, {
									"case":	63,
									"scores":	[-4.699928590811405]
								}, {
									"case":	64,
									"scores":	[-4.699928590811405]
								}, {
									"case":	65,
									"scores":	[-4.699928590811405]
								}, {
									"case":	66,
									"scores":	[-4.699928590811405]
								}, {
									"case":	67,
									"scores":	[-4.699928590811405]
								}, {
									"case":	68,
									"scores":	[-4.699928590811405]
								}, {
									"case":	69,
									"scores":	[-4.699928590811405]
								}, {
									"case":	70,
									"scores":	[-4.699928590811405]
								}, {
									"case":	71,
									"scores":	[-4.699928590811405]
								}, {
									"case":	72,
									"scores":	[-4.699928590811405]
								}, {
									"case":	73,
									"scores":	[-4.699928590811405]
								}, {
									"case":	74,
									"scores":	[-4.699928590811405]
								}, {
									"case":	75,
									"scores":	[-4.699928590811405]
								}, {
									"case":	76,
									"scores":	[-4.699928590811405]
								}, {
									"case":	77,
									"scores":	[-4.699928590811405]
								}, {
									"case":	78,
									"scores":	[-4.699928590811405]
								}, {
									"case":	79,
									"scores":	[-4.699928590811405]
								}, {
									"case":	80,
									"scores":	[-4.699928590811405]
								}, {
									"case":	81,
									"scores":	[-4.699928590811405]
								}, {
									"case":	82,
									"scores":	[-4.699928590811405]
								}, {
									"case":	83,
									"scores":	[-4.699928590811405]
								}, {
									"case":	84,
									"scores":	[-4.699928590811405]
								}, {
									"case":	85,
									"scores":	[-4.699928590811405]
								}, {
									"case":	86,
									"scores":	[-4.699928590811405]
								}, {
									"case":	87,
									"scores":	[-4.699928590811405]
								}, {
									"case":	88,
									"scores":	[-4.699928590811405]
								}, {
									"case":	89,
									"scores":	[-4.699928590811405]
								}, {
									"case":	90,
									"scores":	[-4.699928590811405]
								}, {
									"case":	91,
									"scores":	[-4.699928590811405]
								}, {
									"case":	92,
									"scores":	[-4.699928590811405]
								}, {
									"case":	93,
									"scores":	[-4.699928590811405]
								}, {
									"case":	94,
									"scores":	[-4.699928590811405]
								}, {
									"case":	95,
									"scores":	[-4.699928590811405]
								}, {
									"case":	96,
									"scores":	[-4.699928590811405]
								}, {
									"case":	97,
									"scores":	[-4.699928590811405]
								}, {
									"case":	98,
									"scores":	[-4.699928590811405]
								}, {
									"case":	99,
									"scores":	[-4.699928590811405]
								}, {
									"case":	100,
									"scores":	[-4.699928590811405]
								}, {
									"case":	101,
									"scores":	[-4.699928590811405]
								}, {
									"case":	102,
									"scores":	[-4.699928590811405]
								}, {
									"case":	103,
									"scores":	[-4.699928590811405]
								}, {
									"case":	104,
									"scores":	[-4.699928590811405]
								}, {
									"case":	105,
									"scores":	[-4.699928590811405]
								}, {
									"case":	106,
									"scores":	[-4.699928590811405]
								}, {
									"case":	107,
									"scores":	[-4.699928590811405]
								}, {
									"case":	108,
									"scores":	[-4.699928590811405]
								}, {
									"case":	109,
									"scores":	[-4.699928590811405]
								}, {
									"case":	110,
									"scores":	[-4.699928590811405]
								}, {
									"case":	111,
									"scores":	[-4.699928590811405]
								}, {
									"case":	112,
									"scores":	[-4.699928590811405]
								}, {
									"case":	113,
									"scores":	[-4.699928590811405]
								}, {
									"case":	114,
									"scores":	[-4.699928590811405]
								}, {
									"case":	115,
									"scores":	[-4.699928590811405]
								}, {
									"case":	116,
									"scores":	[-4.699928590811405]
								}, {
									"case":	117,
									"scores":	[-4.699928590811405]
								}, {
									"case":	118,
									"scores":	[-4.699928590811405]
								}, {
									"case":	119,
									"scores":	[-4.699928590811405]
								}, {
									"case":	120,
									"scores":	[-4.699928590811405]
								}, {
									"case":	121,
									"scores":	[-4.699928590811405]
								}, {
									"case":	122,
									"scores":	[-4.699928590811405]
								}, {
									"case":	123,
									"scores":	[-4.699928590811405]
								}, {
									"case":	124,
									"scores":	[-4.699928590811405]
								}, {
									"case":	125,
									"scores":	[-4.699928590811405]
								}, {
									"case":	126,
									"scores":	[-4.699928590811405]
								}, {
									"case":	127,
									"scores":	[-4.699928590811405]
								}, {
									"case":	128,
									"scores":	[-4.699928590811405]
								}, {
									"case":	129,
									"scores":	[-4.699928590811405]
								}, {
									"case":	130,
									"scores":	[-4.699928590811405]
								}, {
									"case":	131,
									"scores":	[-4.699928590811405]
								}, {
									"case":	132,
									"scores":	[-4.699928590811405]
								}, {
									"case":	133,
									"scores":	[-4.699928590811405]
								}, {
									"case":	134,
									"scores":	[-4.699928590811405]
								}, {
									"case":	135,
									"scores":	[-4.699928590811405]
								}, {
									"case":	136,
									"scores":	[-4.699928590811405]
								}, {
									"case":	137,
									"scores":	[-4.699928590811405]
								}, {
									"case":	138,
									"scores":	[-4.699928590811405]
								}, {
									"case":	139,
									"scores":	[-4.699928590811405]
								}, {
									"case":	140,
									"scores":	[-4.699928590811405]
								}, {
									"case":	141,
									"scores":	[-4.699928590811405]
								}, {
									"case":	142,
									"scores":	[-4.699928590811405]
								}, {
									"case":	143,
									"scores":	[-4.699928590811405]
								}, {
									"case":	144,
									"scores":	[-4.699928590811405]
								}, {
									"case":	145,
									"scores":	[-4.699928590811405]
								}, {
									"case":	146,
									"scores":	[-4.699928590811405]
								}, {
									"case":	147,
									"scores":	[-4.699928590811405]
								}, {
									"case":	148,
									"scores":	[-4.699928590811405]
								}, {
									"case":	149,
									"scores":	[-4.699928590811405]
								}, {
									"case":	150,
									"scores":	[-4.699928590811405]
								}, {
									"case":	151,
									"scores":	[-4.699928590811405]
								}, {
									"case":	152,
									"scores":	[-4.699928590811405]
								}, {
									"case":	153,
									"scores":	[-4.699928590811405]
								}, {
									"case":	154,
									"scores":	[-4.699928590811405]
								}, {
									"case":	155,
									"scores":	[-4.699928590811405]
								}, {
									"case":	156,
									"scores":	[-4.699928590811405]
								}, {
									"case":	157,
									"scores":	[-4.699928590811405]
								}, {
									"case":	158,
									"scores":	[-4.699928590811405]
								}, {
									"case":	159,
									"scores":	[-4.699928590811405]
								}, {
									"case":	160,
									"scores":	[-4.699928590811405]
								}, {
									"case":	161,
									"scores":	[-4.699928590811405]
								}, {
									"case":	162,
									"scores":	[-4.699928590811405]
								}, {
									"case":	163,
									"scores":	[-4.699928590811405]
								}, {
									"case":	164,
									"scores":	[-4.699928590811405]
								}, {
									"case":	165,
									"scores":	[-4.699928590811405]
								}, {
									"case":	166,
									"scores":	[-4.699928590811405]
								}, {
									"case":	167,
									"scores":	[-4.699928590811405]
								}, {
									"case":	168,
									"scores":	[-4.699928590811405]
								}, {
									"case":	169,
									"scores":	[-4.699928590811405]
								}, {
									"case":	170,
									"scores":	[-4.699928590811405]
								}, {
									"case":	171,
									"scores":	[-4.699928590811405]
								}, {
									"case":	172,
									"scores":	[-4.699928590811405]
								}, {
									"case":	173,
									"scores":	[-4.699928590811405]
								}, {
									"case":	174,
									"scores":	[-4.699928590811405]
								}, {
									"case":	175,
									"scores":	[-4.699928590811405]
								}, {
									"case":	176,
									"scores":	[-4.699928590811405]
								}, {
									"case":	177,
									"scores":	[-4.699928590811405]
								}, {
									"case":	178,
									"scores":	[-4.699928590811405]
								}, {
									"case":	179,
									"scores":	[-4.699928590811405]
								}, {
									"case":	180,
									"scores":	[-4.699928590811405]
								}, {
									"case":	181,
									"scores":	[-4.699928590811405]
								}, {
									"case":	182,
									"scores":	[-4.699928590811405]
								}, {
									"case":	183,
									"scores":	[-4.699928590811405]
								}, {
									"case":	184,
									"scores":	[-4.699928590811405]
								}, {
									"case":	185,
									"scores":	[-4.699928590811405]
								}, {
									"case":	186,
									"scores":	[-4.699928590811405]
								}, {
									"case":	187,
									"scores":	[-4.699928590811405]
								}, {
									"case":	188,
									"scores":	[-4.699928590811405]
								}, {
									"case":	189,
									"scores":	[-4.699928590811405]
								}, {
									"case":	190,
									"scores":	[-4.699928590811405]
								}, {
									"case":	191,
									"scores":	[-4.699928590811405]
								}, {
									"case":	192,
									"scores":	[-4.699928590811405]
								}, {
									"case":	193,
									"scores":	[-4.699928590811405]
								}, {
									"case":	194,
									"scores":	[-4.699928590811405]
								}, {
									"case":	195,
									"scores":	[-4.699928590811405]
								}, {
									"case":	196,
									"scores":	[-4.699928590811405]
								}, {
									"case":	197,
									"scores":	[-4.699928590811405]
								}, {
									"case":	198,
									"scores":	[-4.699928590811405]
								}, {
									"case":	199,
									"scores":	[-4.699928590811405]
								}, {
									"case":	200,
									"scores":	[-4.699928590811405]
								}, {
									"case":	201,
									"scores":	[-4.699928590811405]
								}, {
									"case":	202,
									"scores":	[-4.699928590811405]
								}, {
									"case":	203,
									"scores":	[-4.699928590811405]
								}, {
									"case":	204,
									"scores":	[-4.699928590811405]
								}, {
									"case":	205,
									"scores":	[-4.699928590811405]
								}, {
									"case":	206,
									"scores":	[-4.699928590811405]
								}, {
									"case":	207,
									"scores":	[-4.699928590811405]
								}, {
									"case":	208,
									"scores":	[-4.699928590811405]
								}, {
									"case":	209,
									"scores":	[-4.699928590811405]
								}, {
									"case":	210,
									"scores":	[-4.699928590811405]
								}, {
									"case":	211,
									"scores":	[-4.699928590811405]
								}, {
									"case":	212,
									"scores":	[-4.699928590811405]
								}, {
									"case":	213,
									"scores":	[-4.699928590811405]
								}, {
									"case":	214,
									"scores":	[-4.699928590811405]
								}, {
									"case":	215,
									"scores":	[-4.699928590811405]
								}, {
									"case":	216,
									"scores":	[-4.699928590811405]
								}, {
									"case":	217,
									"scores":	[-4.699928590811405]
								}, {
									"case":	218,
									"scores":	[-4.699928590811405]
								}, {
									"case":	219,
									"scores":	[-4.699928590811405]
								}, {
									"case":	220,
									"scores":	[-4.699928590811405]
								}, {
									"case":	221,
									"scores":	[-4.699928590811405]
								}, {
									"case":	222,
									"scores":	[-4.699928590811405]
								}, {
									"case":	223,
									"scores":	[-4.699928590811405]
								}, {
									"case":	224,
									"scores":	[-4.699928590811405]
								}, {
									"case":	225,
									"scores":	[-4.699928590811405]
								}, {
									"case":	226,
									"scores":	[-4.699928590811405]
								}, {
									"case":	227,
									"scores":	[-4.699928590811405]
								}, {
									"case":	228,
									"scores":	[-4.699928590811405]
								}, {
									"case":	229,
									"scores":	[-4.699928590811405]
								}, {
									"case":	230,
									"scores":	[-4.699928590811405]
								}, {
									"case":	231,
									"scores":	[-4.699928590811405]
								}, {
									"case":	232,
									"scores":	[-4.699928590811405]
								}, {
									"case":	233,
									"scores":	[-4.699928590811405]
								}, {
									"case":	234,
									"scores":	[-4.699928590811405]
								}, {
									"case":	235,
									"scores":	[-4.699928590811405]
								}, {
									"case":	236,
									"scores":	[-4.699928590811405]
								}, {
									"case":	237,
									"scores":	[-4.699928590811405]
								}, {
									"case":	238,
									"scores":	[-4.699928590811405]
								}, {
									"case":	239,
									"scores":	[-4.699928590811405]
								}, {
									"case":	240,
									"scores":	[-4.699928590811405]
								}, {
									"case":	241,
									"scores":	[-4.699928590811405]
								}, {
									"case":	242,
									"scores":	[-4.699928590811405]
								}, {
									"case":	243,
									"scores":	[-4.699928590811405]
								}, {
									"case":	244,
									"scores":	[-4.699928590811405]
								}, {
									"case":	245,
									"scores":	[-4.699928590811405]
								}, {
									"case":	246,
									"scores":	[-4.699928590811405]
								}, {
									"case":	247,
									"scores":	[-4.699928590811405]
								}, {
									"case":	248,
									"scores":	[-4.699928590811405]
								}, {
									"case":	249,
									"scores":	[-4.699928590811405]
								}, {
									"case":	250,
									"scores":	[-4.699928590811405]
								}, {
									"case":	251,
									"scores":	[-4.699928590811405]
								}, {
									"case":	252,
									"scores":	[-4.699928590811405]
								}, {
									"case":	253,
									"scores":	[-4.699928590811405]
								}, {
									"case":	254,
									"scores":	[-4.699928590811405]
								}, {
									"case":	255,
									"scores":	[-4.699928590811405]
								}, {
									"case":	256,
									"scores":	[-4.699928590811405]
								}, {
									"case":	257,
									"scores":	[-4.699928590811405]
								}, {
									"case":	258,
									"scores":	[-4.699928590811405]
								}, {
									"case":	259,
									"scores":	[-4.699928590811405]
								}, {
									"case":	260,
									"scores":	[-4.699928590811405]
								}, {
									"case":	261,
									"scores":	[-4.699928590811405]
								}, {
									"case":	262,
									"scores":	[-4.699928590811405]
								}, {
									"case":	263,
									"scores":	[-4.699928590811405]
								}, {
									"case":	264,
									"scores":	[-4.699928590811405]
								}, {
									"case":	265,
									"scores":	[-4.699928590811405]
								}, {
									"case":	266,
									"scores":	[-4.699928590811405]
								}, {
									"case":	267,
									"scores":	[-4.699928590811405]
								}, {
									"case":	268,
									"scores":	[-4.699928590811405]
								}, {
									"case":	269,
									"scores":	[-4.699928590811405]
								}, {
									"case":	270,
									"scores":	[-4.699928590811405]
								}, {
									"case":	271,
									"scores":	[-4.699928590811405]
								}, {
									"case":	272,
									"scores":	[-4.699928590811405]
								}, {
									"case":	273,
									"scores":	[-4.699928590811405]
								}, {
									"case":	274,
									"scores":	[-4.699928590811405]
								}, {
									"case":	275,
									"scores":	[-4.699928590811405]
								}, {
									"case":	276,
									"scores":	[-4.699928590811405]
								}, {
									"case":	277,
									"scores":	[-4.699928590811405]
								}, {
									"case":	278,
									"scores":	[-4.699928590811405]
								}, {
									"case":	279,
									"scores":	[-4.699928590811405]
								}, {
									"case":	280,
									"scores":	[-4.699928590811405]
								}, {
									"case":	281,
									"scores":	[-4.699928590811405]
								}, {
									"case":	282,
									"scores":	[-4.699928590811405]
								}, {
									"case":	283,
									"scores":	[-4.699928590811405]
								}, {
									"case":	284,
									"scores":	[-4.699928590811405]
								}, {
									"case":	285,
									"scores":	[-4.699928590811405]
								}, {
									"case":	286,
									"scores":	[-4.699928590811405]
								}, {
									"case":	287,
									"scores":	[-4.699928590811405]
								}, {
									"case":	288,
									"scores":	[-4.699928590811405]
								}, {
									"case":	289,
									"scores":	[-4.699928590811405]
								}, {
									"case":	290,
									"scores":	[-4.699928590811405]
								}, {
									"case":	291,
									"scores":	[-4.699928590811405]
								}, {
									"case":	292,
									"scores":	[-4.699928590811405]
								}, {
									"case":	293,
									"scores":	[-4.699928590811405]
								}, {
									"case":	294,
									"scores":	[-4.699928590811405]
								}, {
									"case":	295,
									"scores":	[-4.699928590811405]
								}, {
									"case":	296,
									"scores":	[-4.699928590811405]
								}, {
									"case":	297,
									"scores":	[-4.699928590811405]
								}, {
									"case":	298,
									"scores":	[-4.699928590811405]
								}, {
									"case":	299,
									"scores":	[-4.699928590811405]
								}, {
									"case":	300,
									"scores":	[-4.699928590811405]
								}, {
									"case":	301,
									"scores":	[-4.699928590811405]
								}, {
									"case":	302,
									"scores":	[-4.699928590811405]
								}, {
									"case":	303,
									"scores":	[-4.699928590811405]
								}, {
									"case":	304,
									"scores":	[-4.699928590811405]
								}, {
									"case":	305,
									"scores":	[-4.699928590811405]
								}, {
									"case":	306,
									"scores":	[-4.699928590811405]
								}, {
									"case":	307,
									"scores":	[-4.699928590811405]
								}, {
									"case":	308,
									"scores":	[-4.699928590811405]
								}, {
									"case":	309,
									"scores":	[-4.699928590811405]
								}, {
									"case":	310,
									"scores":	[-4.699928590811405]
								}, {
									"case":	311,
									"scores":	[-4.699928590811405]
								}, {
									"case":	312,
									"scores":	[-4.699928590811405]
								}, {
									"case":	313,
									"scores":	[-4.699928590811405]
								}, {
									"case":	314,
									"scores":	[-4.699928590811405]
								}, {
									"case":	315,
									"scores":	[-4.699928590811405]
								}, {
									"case":	316,
									"scores":	[-4.699928590811405]
								}, {
									"case":	317,
									"scores":	[-4.699928590811405]
								}, {
									"case":	318,
									"scores":	[-4.699928590811405]
								}, {
									"case":	319,
									"scores":	[-4.699928590811405]
								}, {
									"case":	320,
									"scores":	[-4.699928590811405]
								}, {
									"case":	321,
									"scores":	[-4.699928590811405]
								}, {
									"case":	322,
									"scores":	[-4.699928590811405]
								}, {
									"case":	323,
									"scores":	[-4.699928590811405]
								}, {
									"case":	324,
									"scores":	[-4.699928590811405]
								}, {
									"case":	325,
									"scores":	[-4.699928590811405]
								}, {
									"case":	326,
									"scores":	[-4.699928590811405]
								}, {
									"case":	327,
									"scores":	[-4.699928590811405]
								}, {
									"case":	328,
									"scores":	[-4.699928590811405]
								}, {
									"case":	329,
									"scores":	[-4.699928590811405]
								}, {
									"case":	330,
									"scores":	[-4.699928590811405]
								}, {
									"case":	331,
									"scores":	[-4.699928590811405]
								}, {
									"case":	332,
									"scores":	[-4.699928590811405]
								}, {
									"case":	333,
									"scores":	[-4.699928590811405]
								}, {
									"case":	334,
									"scores":	[-4.699928590811405]
								}, {
									"case":	335,
									"scores":	[-4.699928590811405]
								}, {
									"case":	336,
									"scores":	[-4.699928590811405]
								}, {
									"case":	337,
									"scores":	[-4.699928590811405]
								}, {
									"case":	338,
									"scores":	[-4.699928590811405]
								}, {
									"case":	339,
									"scores":	[-4.699928590811405]
								}, {
									"case":	340,
									"scores":	[-4.699928590811405]
								}, {
									"case":	341,
									"scores":	[-4.699928590811405]
								}, {
									"case":	342,
									"scores":	[-4.699928590811405]
								}, {
									"case":	343,
									"scores":	[-4.699928590811405]
								}, {
									"case":	344,
									"scores":	[-4.699928590811405]
								}, {
									"case":	345,
									"scores":	[-4.699928590811405]
								}, {
									"case":	346,
									"scores":	[-4.699928590811405]
								}, {
									"case":	347,
									"scores":	[-4.699928590811405]
								}, {
									"case":	348,
									"scores":	[-4.699928590811405]
								}, {
									"case":	349,
									"scores":	[-4.699928590811405]
								}, {
									"case":	350,
									"scores":	[-4.699928590811405]
								}, {
									"case":	351,
									"scores":	[-4.699928590811405]
								}, {
									"case":	352,
									"scores":	[-4.699928590811405]
								}, {
									"case":	353,
									"scores":	[-4.699928590811405]
								}, {
									"case":	354,
									"scores":	[-4.699928590811405]
								}, {
									"case":	355,
									"scores":	[-4.699928590811405]
								}, {
									"case":	356,
									"scores":	[-4.699928590811405]
								}, {
									"case":	357,
									"scores":	[-4.699928590811405]
								}, {
									"case":	358,
									"scores":	[-4.699928590811405]
								}, {
									"case":	359,
									"scores":	[-4.699928590811405]
								}, {
									"case":	360,
									"scores":	[-4.699928590811405]
								}, {
									"case":	361,
									"scores":	[-4.699928590811405]
								}, {
									"case":	362,
									"scores":	[-4.699928590811405]
								}, {
									"case":	363,
									"scores":	[-4.699928590811405]
								}, {
									"case":	364,
									"scores":	[-4.699928590811405]
								}, {
									"case":	365,
									"scores":	[-4.699928590811405]
								}, {
									"case":	366,
									"scores":	[-4.699928590811405]
								}, {
									"case":	367,
									"scores":	[-4.699928590811405]
								}, {
									"case":	368,
									"scores":	[-4.699928590811405]
								}, {
									"case":	369,
									"scores":	[-4.699928590811405]
								}, {
									"case":	370,
									"scores":	[-4.699928590811405]
								}, {
									"case":	371,
									"scores":	[-4.699928590811405]
								}, {
									"case":	372,
									"scores":	[-4.699928590811405]
								}, {
									"case":	373,
									"scores":	[-4.699928590811405]
								}, {
									"case":	374,
									"scores":	[-4.699928590811405]
								}, {
									"case":	375,
									"scores":	[-4.699928590811405]
								}, {
									"case":	376,
									"scores":	[-4.699928590811405]
								}, {
									"case":	377,
									"scores":	[-4.699928590811405]
								}, {
									"case":	378,
									"scores":	[-4.699928590811405]
								}, {
									"case":	379,
									"scores":	[-5.9518859508114055, -5.2290894108114054, -5.8665530598114053, -5.6233192998114054, -6.1688529998114046, -6.6618076029114048]
								}, {
									"case":	380,
									"scores":	[-6.0517941508114053, -5.3289976108114052, -5.9664612598114051, -5.7232274998114052, -6.2687611998114052, -6.7617158029114055]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1007,
							"begin_column":	12,
							"end_line":	1007,
							"end_column":	29,
							"patch_codes":	["if (!__is_neg(\"\", \"L1007\", 6, &(name), sizeof (name), &(nlen), sizeof (nlen), &(s), sizeof (s), &(slen), sizeof (slen), &(suf), sizeof (suf), &(z_suffix), sizeof (z_suffix)))\n    return name + nlen - s;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4154901378114051, -4.4698167678114054, -5.2799759378114048, -5.2495510238114047, -5.9304428938114047, -6.4117981938114053]
								}]
						}]
				}, {
					"line":	1004,
					"switches":	[{
							"switch":	27,
							"types":	[[], [], [], [], [], [], [], [], [], [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], [], [], [], [], [], []],
							"begin_line":	1005,
							"begin_column":	6,
							"end_line":	1005,
							"end_column":	6,
							"patch_codes":	["(name)++", "(name)--", "(suf)++", "__printf__(\"%s %s\\n\", (name), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (name))", "args = (suf)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = (3)", "bytes_in = (30)", "bytes_in = (32)", "bytes_in = (33)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "bytes_out = (3)", "bytes_out = (30)", "bytes_out = (32)", "bytes_out = (33)", "env = (name)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (3)", "exit_code = (30)", "exit_code = (32)", "exit_code = (33)", "exit_code = (nlen)", "exit_code = (s)", "exit_code = (slen)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (3)", "exiting_signal = (30)", "exiting_signal = (32)", "exiting_signal = (33)", "exiting_signal = (nlen)", "exiting_signal = (s)", "exiting_signal = (slen)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (3)", "foreground = (30)", "foreground = (32)", "foreground = (33)", "foreground = (nlen)", "foreground = (s)", "foreground = (slen)", "free((name))", "free((suf))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = (3)", "header_bytes = (30)", "header_bytes = (32)", "header_bytes = (33)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (3)", "ifd = (30)", "ifd = (32)", "ifd = (33)", "ifd = (nlen)", "ifd = (s)", "ifd = (slen)", "ifd = open_input_file((name), &istat)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "ifile_size = (3)", "ifile_size = (30)", "ifile_size = (32)", "ifile_size = (33)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "inptr = (3)", "inptr = (30)", "inptr = (32)", "inptr = (33)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (3)", "last_member = (30)", "last_member = (32)", "last_member = (33)", "last_member = (nlen)", "last_member = (s)", "last_member = (slen)", "list = (0)", "list = (1)", "list = (2)", "list = (3)", "list = (30)", "list = (32)", "list = (33)", "list = (nlen)", "list = (s)", "list = (slen)", "method = (0)", "method = (1)", "method = (2)", "method = (3)", "method = (30)", "method = (32)", "method = (33)", "method = (nlen)", "method = (s)", "method = (slen)", "nlen = (0)", "nlen = (1)", "nlen = (2)", "nlen = (3)", "nlen = (30)", "nlen = (32)", "nlen = (33)", "nlen = (nlen)", "nlen = (s)", "nlen = (slen)", "nlen = strlen((name))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (3)", "no_name = (30)", "no_name = (32)", "no_name = (33)", "no_name = (nlen)", "no_name = (s)", "no_name = (slen)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (3)", "no_time = (30)", "no_time = (32)", "no_time = (33)", "no_time = (nlen)", "no_time = (s)", "no_time = (slen)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (3)", "ofd = (30)", "ofd = (32)", "ofd = (33)", "ofd = (nlen)", "ofd = (s)", "ofd = (slen)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (3)", "part_nb = (30)", "part_nb = (32)", "part_nb = (33)", "part_nb = (nlen)", "part_nb = (s)", "part_nb = (slen)", "perror((name))", "progerror((name))", "program_name = (name)", "program_name = gzip_base_name((suf)[0])", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (3)", "quiet = (30)", "quiet = (32)", "quiet = (33)", "quiet = (nlen)", "quiet = (s)", "quiet = (slen)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (3)", "remove_ofname_fd = (30)", "remove_ofname_fd = (32)", "remove_ofname_fd = (33)", "remove_ofname_fd = (nlen)", "remove_ofname_fd = (s)", "remove_ofname_fd = (slen)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (3)", "save_orig_name = (30)", "save_orig_name = (32)", "save_orig_name = (33)", "save_orig_name = (nlen)", "save_orig_name = (s)", "save_orig_name = (slen)", "slen = (0)", "slen = (1)", "slen = (2)", "slen = (3)", "slen = (30)", "slen = (32)", "slen = (33)", "slen = (nlen)", "slen = (s)", "slen = (slen)", "strcat(ifname, (name))", "strcat(ofname, (name))", "strcpy((name) - 4, \".tgz\")", "strcpy((name), \".tar\")", "strcpy((name), z_suffix)", "strcpy(ifname, (name))", "strcpy(suffix, (name) + nlen - 30 - 2)", "strcpy(suffix, (name))", "strlwr((name))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (33)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (33)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (3)", "to_stdout = (30)", "to_stdout = (32)", "to_stdout = (33)", "to_stdout = (nlen)", "to_stdout = (s)", "to_stdout = (slen)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_in = (3)", "total_in = (30)", "total_in = (32)", "total_in = (33)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "total_out = (3)", "total_out = (30)", "total_out = (32)", "total_out = (33)", "treat_dir(ifd, (name))", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (3)", "verbose = (30)", "verbose = (32)", "verbose = (33)", "verbose = (nlen)", "verbose = (s)", "verbose = (slen)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = (3)", "z_len = (30)", "z_len = (32)", "z_len = (33)", "z_len = strlen((name))", "z_suffix = (name)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "nlen = strlen(name)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "slen = strlen(suffix)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "strcpy(suffix, name + nlen - 30 - 2)", "strcpy(suffix, name)", "strlwr(suffix)", "suf++", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\""],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.699928590811405]
								}, {
									"case":	2,
									"scores":	[-4.699928590811405]
								}, {
									"case":	3,
									"scores":	[-4.699928590811405]
								}, {
									"case":	4,
									"scores":	[-4.699928590811405]
								}, {
									"case":	5,
									"scores":	[-4.699928590811405]
								}, {
									"case":	6,
									"scores":	[-4.699928590811405]
								}, {
									"case":	7,
									"scores":	[-4.699928590811405]
								}, {
									"case":	8,
									"scores":	[-4.699928590811405]
								}, {
									"case":	9,
									"scores":	[-4.699928590811405]
								}, {
									"case":	10,
									"scores":	[-4.699928590811405]
								}, {
									"case":	11,
									"scores":	[-4.699928590811405]
								}, {
									"case":	12,
									"scores":	[-4.699928590811405]
								}, {
									"case":	13,
									"scores":	[-4.699928590811405]
								}, {
									"case":	14,
									"scores":	[-4.699928590811405]
								}, {
									"case":	15,
									"scores":	[-4.699928590811405]
								}, {
									"case":	16,
									"scores":	[-4.699928590811405]
								}, {
									"case":	17,
									"scores":	[-4.699928590811405]
								}, {
									"case":	18,
									"scores":	[-4.699928590811405]
								}, {
									"case":	19,
									"scores":	[-4.699928590811405]
								}, {
									"case":	20,
									"scores":	[-4.699928590811405]
								}, {
									"case":	21,
									"scores":	[-4.699928590811405]
								}, {
									"case":	22,
									"scores":	[-4.699928590811405]
								}, {
									"case":	23,
									"scores":	[-4.699928590811405]
								}, {
									"case":	24,
									"scores":	[-4.699928590811405]
								}, {
									"case":	25,
									"scores":	[-4.699928590811405]
								}, {
									"case":	26,
									"scores":	[-4.699928590811405]
								}, {
									"case":	27,
									"scores":	[-4.699928590811405]
								}, {
									"case":	28,
									"scores":	[-4.699928590811405]
								}, {
									"case":	29,
									"scores":	[-4.699928590811405]
								}, {
									"case":	30,
									"scores":	[-4.699928590811405]
								}, {
									"case":	31,
									"scores":	[-4.699928590811405]
								}, {
									"case":	32,
									"scores":	[-4.699928590811405]
								}, {
									"case":	33,
									"scores":	[-4.699928590811405]
								}, {
									"case":	34,
									"scores":	[-4.699928590811405]
								}, {
									"case":	35,
									"scores":	[-4.699928590811405]
								}, {
									"case":	36,
									"scores":	[-4.699928590811405]
								}, {
									"case":	37,
									"scores":	[-4.699928590811405]
								}, {
									"case":	38,
									"scores":	[-4.699928590811405]
								}, {
									"case":	39,
									"scores":	[-4.699928590811405]
								}, {
									"case":	40,
									"scores":	[-4.699928590811405]
								}, {
									"case":	41,
									"scores":	[-4.699928590811405]
								}, {
									"case":	42,
									"scores":	[-4.699928590811405]
								}, {
									"case":	43,
									"scores":	[-4.699928590811405]
								}, {
									"case":	44,
									"scores":	[-4.699928590811405]
								}, {
									"case":	45,
									"scores":	[-4.699928590811405]
								}, {
									"case":	46,
									"scores":	[-4.699928590811405]
								}, {
									"case":	47,
									"scores":	[-4.699928590811405]
								}, {
									"case":	48,
									"scores":	[-4.699928590811405]
								}, {
									"case":	49,
									"scores":	[-4.699928590811405]
								}, {
									"case":	50,
									"scores":	[-4.699928590811405]
								}, {
									"case":	51,
									"scores":	[-4.699928590811405]
								}, {
									"case":	52,
									"scores":	[-4.699928590811405]
								}, {
									"case":	53,
									"scores":	[-4.699928590811405]
								}, {
									"case":	54,
									"scores":	[-4.699928590811405]
								}, {
									"case":	55,
									"scores":	[-4.699928590811405]
								}, {
									"case":	56,
									"scores":	[-4.699928590811405]
								}, {
									"case":	57,
									"scores":	[-4.699928590811405]
								}, {
									"case":	58,
									"scores":	[-4.699928590811405]
								}, {
									"case":	59,
									"scores":	[-4.699928590811405]
								}, {
									"case":	60,
									"scores":	[-4.699928590811405]
								}, {
									"case":	61,
									"scores":	[-4.699928590811405]
								}, {
									"case":	62,
									"scores":	[-4.699928590811405]
								}, {
									"case":	63,
									"scores":	[-4.699928590811405]
								}, {
									"case":	64,
									"scores":	[-4.699928590811405]
								}, {
									"case":	65,
									"scores":	[-4.699928590811405]
								}, {
									"case":	66,
									"scores":	[-4.699928590811405]
								}, {
									"case":	67,
									"scores":	[-4.699928590811405]
								}, {
									"case":	68,
									"scores":	[-4.699928590811405]
								}, {
									"case":	69,
									"scores":	[-4.699928590811405]
								}, {
									"case":	70,
									"scores":	[-4.699928590811405]
								}, {
									"case":	71,
									"scores":	[-4.699928590811405]
								}, {
									"case":	72,
									"scores":	[-4.699928590811405]
								}, {
									"case":	73,
									"scores":	[-4.699928590811405]
								}, {
									"case":	74,
									"scores":	[-4.699928590811405]
								}, {
									"case":	75,
									"scores":	[-4.699928590811405]
								}, {
									"case":	76,
									"scores":	[-4.699928590811405]
								}, {
									"case":	77,
									"scores":	[-4.699928590811405]
								}, {
									"case":	78,
									"scores":	[-4.699928590811405]
								}, {
									"case":	79,
									"scores":	[-4.699928590811405]
								}, {
									"case":	80,
									"scores":	[-4.699928590811405]
								}, {
									"case":	81,
									"scores":	[-4.699928590811405]
								}, {
									"case":	82,
									"scores":	[-4.699928590811405]
								}, {
									"case":	83,
									"scores":	[-4.699928590811405]
								}, {
									"case":	84,
									"scores":	[-4.699928590811405]
								}, {
									"case":	85,
									"scores":	[-4.699928590811405]
								}, {
									"case":	86,
									"scores":	[-4.699928590811405]
								}, {
									"case":	87,
									"scores":	[-4.699928590811405]
								}, {
									"case":	88,
									"scores":	[-4.699928590811405]
								}, {
									"case":	89,
									"scores":	[-4.699928590811405]
								}, {
									"case":	90,
									"scores":	[-4.699928590811405]
								}, {
									"case":	91,
									"scores":	[-4.699928590811405]
								}, {
									"case":	92,
									"scores":	[-4.699928590811405]
								}, {
									"case":	93,
									"scores":	[-4.699928590811405]
								}, {
									"case":	94,
									"scores":	[-4.699928590811405]
								}, {
									"case":	95,
									"scores":	[-4.699928590811405]
								}, {
									"case":	96,
									"scores":	[-4.699928590811405]
								}, {
									"case":	97,
									"scores":	[-4.699928590811405]
								}, {
									"case":	98,
									"scores":	[-4.699928590811405]
								}, {
									"case":	99,
									"scores":	[-4.699928590811405]
								}, {
									"case":	100,
									"scores":	[-4.699928590811405]
								}, {
									"case":	101,
									"scores":	[-4.699928590811405]
								}, {
									"case":	102,
									"scores":	[-4.699928590811405]
								}, {
									"case":	103,
									"scores":	[-4.699928590811405]
								}, {
									"case":	104,
									"scores":	[-4.699928590811405]
								}, {
									"case":	105,
									"scores":	[-4.699928590811405]
								}, {
									"case":	106,
									"scores":	[-4.699928590811405]
								}, {
									"case":	107,
									"scores":	[-4.699928590811405]
								}, {
									"case":	108,
									"scores":	[-4.699928590811405]
								}, {
									"case":	109,
									"scores":	[-4.699928590811405]
								}, {
									"case":	110,
									"scores":	[-4.699928590811405]
								}, {
									"case":	111,
									"scores":	[-4.699928590811405]
								}, {
									"case":	112,
									"scores":	[-4.699928590811405]
								}, {
									"case":	113,
									"scores":	[-4.699928590811405]
								}, {
									"case":	114,
									"scores":	[-4.699928590811405]
								}, {
									"case":	115,
									"scores":	[-4.699928590811405]
								}, {
									"case":	116,
									"scores":	[-4.699928590811405]
								}, {
									"case":	117,
									"scores":	[-4.699928590811405]
								}, {
									"case":	118,
									"scores":	[-4.699928590811405]
								}, {
									"case":	119,
									"scores":	[-4.699928590811405]
								}, {
									"case":	120,
									"scores":	[-4.699928590811405]
								}, {
									"case":	121,
									"scores":	[-4.699928590811405]
								}, {
									"case":	122,
									"scores":	[-4.699928590811405]
								}, {
									"case":	123,
									"scores":	[-4.699928590811405]
								}, {
									"case":	124,
									"scores":	[-4.699928590811405]
								}, {
									"case":	125,
									"scores":	[-4.699928590811405]
								}, {
									"case":	126,
									"scores":	[-4.699928590811405]
								}, {
									"case":	127,
									"scores":	[-4.699928590811405]
								}, {
									"case":	128,
									"scores":	[-4.699928590811405]
								}, {
									"case":	129,
									"scores":	[-4.699928590811405]
								}, {
									"case":	130,
									"scores":	[-4.699928590811405]
								}, {
									"case":	131,
									"scores":	[-4.699928590811405]
								}, {
									"case":	132,
									"scores":	[-4.699928590811405]
								}, {
									"case":	133,
									"scores":	[-4.699928590811405]
								}, {
									"case":	134,
									"scores":	[-4.699928590811405]
								}, {
									"case":	135,
									"scores":	[-4.699928590811405]
								}, {
									"case":	136,
									"scores":	[-4.699928590811405]
								}, {
									"case":	137,
									"scores":	[-4.699928590811405]
								}, {
									"case":	138,
									"scores":	[-4.699928590811405]
								}, {
									"case":	139,
									"scores":	[-4.699928590811405]
								}, {
									"case":	140,
									"scores":	[-4.699928590811405]
								}, {
									"case":	141,
									"scores":	[-4.699928590811405]
								}, {
									"case":	142,
									"scores":	[-4.699928590811405]
								}, {
									"case":	143,
									"scores":	[-4.699928590811405]
								}, {
									"case":	144,
									"scores":	[-4.699928590811405]
								}, {
									"case":	145,
									"scores":	[-4.699928590811405]
								}, {
									"case":	146,
									"scores":	[-4.699928590811405]
								}, {
									"case":	147,
									"scores":	[-4.699928590811405]
								}, {
									"case":	148,
									"scores":	[-4.699928590811405]
								}, {
									"case":	149,
									"scores":	[-4.699928590811405]
								}, {
									"case":	150,
									"scores":	[-4.699928590811405]
								}, {
									"case":	151,
									"scores":	[-4.699928590811405]
								}, {
									"case":	152,
									"scores":	[-4.699928590811405]
								}, {
									"case":	153,
									"scores":	[-4.699928590811405]
								}, {
									"case":	154,
									"scores":	[-4.699928590811405]
								}, {
									"case":	155,
									"scores":	[-4.699928590811405]
								}, {
									"case":	156,
									"scores":	[-4.699928590811405]
								}, {
									"case":	157,
									"scores":	[-4.699928590811405]
								}, {
									"case":	158,
									"scores":	[-4.699928590811405]
								}, {
									"case":	159,
									"scores":	[-4.699928590811405]
								}, {
									"case":	160,
									"scores":	[-4.699928590811405]
								}, {
									"case":	161,
									"scores":	[-4.699928590811405]
								}, {
									"case":	162,
									"scores":	[-4.699928590811405]
								}, {
									"case":	163,
									"scores":	[-4.699928590811405]
								}, {
									"case":	164,
									"scores":	[-4.699928590811405]
								}, {
									"case":	165,
									"scores":	[-4.699928590811405]
								}, {
									"case":	166,
									"scores":	[-4.699928590811405]
								}, {
									"case":	167,
									"scores":	[-4.699928590811405]
								}, {
									"case":	168,
									"scores":	[-4.699928590811405]
								}, {
									"case":	169,
									"scores":	[-4.699928590811405]
								}, {
									"case":	170,
									"scores":	[-4.699928590811405]
								}, {
									"case":	171,
									"scores":	[-4.699928590811405]
								}, {
									"case":	172,
									"scores":	[-4.699928590811405]
								}, {
									"case":	173,
									"scores":	[-4.699928590811405]
								}, {
									"case":	174,
									"scores":	[-4.699928590811405]
								}, {
									"case":	175,
									"scores":	[-4.699928590811405]
								}, {
									"case":	176,
									"scores":	[-4.699928590811405]
								}, {
									"case":	177,
									"scores":	[-4.699928590811405]
								}, {
									"case":	178,
									"scores":	[-4.699928590811405]
								}, {
									"case":	179,
									"scores":	[-4.699928590811405]
								}, {
									"case":	180,
									"scores":	[-4.699928590811405]
								}, {
									"case":	181,
									"scores":	[-4.699928590811405]
								}, {
									"case":	182,
									"scores":	[-4.699928590811405]
								}, {
									"case":	183,
									"scores":	[-4.699928590811405]
								}, {
									"case":	184,
									"scores":	[-4.699928590811405]
								}, {
									"case":	185,
									"scores":	[-4.699928590811405]
								}, {
									"case":	186,
									"scores":	[-4.699928590811405]
								}, {
									"case":	187,
									"scores":	[-4.699928590811405]
								}, {
									"case":	188,
									"scores":	[-4.699928590811405]
								}, {
									"case":	189,
									"scores":	[-4.699928590811405]
								}, {
									"case":	190,
									"scores":	[-4.699928590811405]
								}, {
									"case":	191,
									"scores":	[-4.699928590811405]
								}, {
									"case":	192,
									"scores":	[-4.699928590811405]
								}, {
									"case":	193,
									"scores":	[-4.699928590811405]
								}, {
									"case":	194,
									"scores":	[-4.699928590811405]
								}, {
									"case":	195,
									"scores":	[-4.699928590811405]
								}, {
									"case":	196,
									"scores":	[-4.699928590811405]
								}, {
									"case":	197,
									"scores":	[-4.699928590811405]
								}, {
									"case":	198,
									"scores":	[-4.699928590811405]
								}, {
									"case":	199,
									"scores":	[-4.699928590811405]
								}, {
									"case":	200,
									"scores":	[-4.699928590811405]
								}, {
									"case":	201,
									"scores":	[-4.699928590811405]
								}, {
									"case":	202,
									"scores":	[-4.699928590811405]
								}, {
									"case":	203,
									"scores":	[-4.699928590811405]
								}, {
									"case":	204,
									"scores":	[-4.699928590811405]
								}, {
									"case":	205,
									"scores":	[-4.699928590811405]
								}, {
									"case":	206,
									"scores":	[-4.699928590811405]
								}, {
									"case":	207,
									"scores":	[-4.699928590811405]
								}, {
									"case":	208,
									"scores":	[-4.699928590811405]
								}, {
									"case":	209,
									"scores":	[-4.699928590811405]
								}, {
									"case":	210,
									"scores":	[-4.699928590811405]
								}, {
									"case":	211,
									"scores":	[-4.699928590811405]
								}, {
									"case":	212,
									"scores":	[-4.699928590811405]
								}, {
									"case":	213,
									"scores":	[-4.699928590811405]
								}, {
									"case":	214,
									"scores":	[-4.699928590811405]
								}, {
									"case":	215,
									"scores":	[-4.699928590811405]
								}, {
									"case":	216,
									"scores":	[-4.699928590811405]
								}, {
									"case":	217,
									"scores":	[-4.699928590811405]
								}, {
									"case":	218,
									"scores":	[-4.699928590811405]
								}, {
									"case":	219,
									"scores":	[-4.699928590811405]
								}, {
									"case":	220,
									"scores":	[-4.699928590811405]
								}, {
									"case":	221,
									"scores":	[-4.699928590811405]
								}, {
									"case":	222,
									"scores":	[-4.699928590811405]
								}, {
									"case":	223,
									"scores":	[-4.699928590811405]
								}, {
									"case":	224,
									"scores":	[-4.699928590811405]
								}, {
									"case":	225,
									"scores":	[-4.699928590811405]
								}, {
									"case":	226,
									"scores":	[-4.699928590811405]
								}, {
									"case":	227,
									"scores":	[-4.699928590811405]
								}, {
									"case":	228,
									"scores":	[-4.699928590811405]
								}, {
									"case":	229,
									"scores":	[-4.699928590811405]
								}, {
									"case":	230,
									"scores":	[-4.699928590811405]
								}, {
									"case":	231,
									"scores":	[-4.699928590811405]
								}, {
									"case":	232,
									"scores":	[-4.699928590811405]
								}, {
									"case":	233,
									"scores":	[-4.699928590811405]
								}, {
									"case":	234,
									"scores":	[-4.699928590811405]
								}, {
									"case":	235,
									"scores":	[-4.699928590811405]
								}, {
									"case":	236,
									"scores":	[-4.699928590811405]
								}, {
									"case":	237,
									"scores":	[-4.699928590811405]
								}, {
									"case":	238,
									"scores":	[-4.699928590811405]
								}, {
									"case":	239,
									"scores":	[-4.699928590811405]
								}, {
									"case":	240,
									"scores":	[-4.699928590811405]
								}, {
									"case":	241,
									"scores":	[-4.699928590811405]
								}, {
									"case":	242,
									"scores":	[-4.699928590811405]
								}, {
									"case":	243,
									"scores":	[-4.699928590811405]
								}, {
									"case":	244,
									"scores":	[-4.699928590811405]
								}, {
									"case":	245,
									"scores":	[-4.699928590811405]
								}, {
									"case":	246,
									"scores":	[-4.699928590811405]
								}, {
									"case":	247,
									"scores":	[-4.699928590811405]
								}, {
									"case":	248,
									"scores":	[-4.699928590811405]
								}, {
									"case":	249,
									"scores":	[-4.699928590811405]
								}, {
									"case":	250,
									"scores":	[-4.699928590811405]
								}, {
									"case":	251,
									"scores":	[-4.699928590811405]
								}, {
									"case":	252,
									"scores":	[-4.699928590811405]
								}, {
									"case":	253,
									"scores":	[-4.699928590811405]
								}, {
									"case":	254,
									"scores":	[-4.699928590811405]
								}, {
									"case":	255,
									"scores":	[-4.699928590811405]
								}, {
									"case":	256,
									"scores":	[-4.699928590811405]
								}, {
									"case":	257,
									"scores":	[-4.699928590811405]
								}, {
									"case":	258,
									"scores":	[-4.699928590811405]
								}, {
									"case":	259,
									"scores":	[-4.699928590811405]
								}, {
									"case":	260,
									"scores":	[-4.699928590811405]
								}, {
									"case":	261,
									"scores":	[-4.699928590811405]
								}, {
									"case":	262,
									"scores":	[-4.699928590811405]
								}, {
									"case":	263,
									"scores":	[-4.699928590811405]
								}, {
									"case":	264,
									"scores":	[-4.699928590811405]
								}, {
									"case":	265,
									"scores":	[-4.699928590811405]
								}, {
									"case":	266,
									"scores":	[-4.699928590811405]
								}, {
									"case":	267,
									"scores":	[-4.699928590811405]
								}, {
									"case":	268,
									"scores":	[-4.699928590811405]
								}, {
									"case":	269,
									"scores":	[-4.699928590811405]
								}, {
									"case":	270,
									"scores":	[-4.699928590811405]
								}, {
									"case":	271,
									"scores":	[-4.699928590811405]
								}, {
									"case":	272,
									"scores":	[-4.699928590811405]
								}, {
									"case":	273,
									"scores":	[-4.699928590811405]
								}, {
									"case":	274,
									"scores":	[-4.699928590811405]
								}, {
									"case":	275,
									"scores":	[-4.699928590811405]
								}, {
									"case":	276,
									"scores":	[-4.699928590811405]
								}, {
									"case":	277,
									"scores":	[-4.699928590811405]
								}, {
									"case":	278,
									"scores":	[-4.699928590811405]
								}, {
									"case":	279,
									"scores":	[-4.699928590811405]
								}, {
									"case":	280,
									"scores":	[-4.699928590811405]
								}, {
									"case":	281,
									"scores":	[-4.699928590811405]
								}, {
									"case":	282,
									"scores":	[-4.699928590811405]
								}, {
									"case":	283,
									"scores":	[-4.699928590811405]
								}, {
									"case":	284,
									"scores":	[-4.699928590811405]
								}, {
									"case":	285,
									"scores":	[-4.699928590811405]
								}, {
									"case":	286,
									"scores":	[-4.699928590811405]
								}, {
									"case":	287,
									"scores":	[-4.699928590811405]
								}, {
									"case":	288,
									"scores":	[-4.699928590811405]
								}, {
									"case":	289,
									"scores":	[-4.699928590811405]
								}, {
									"case":	290,
									"scores":	[-4.699928590811405]
								}, {
									"case":	291,
									"scores":	[-4.699928590811405]
								}, {
									"case":	292,
									"scores":	[-4.699928590811405]
								}, {
									"case":	293,
									"scores":	[-4.699928590811405]
								}, {
									"case":	294,
									"scores":	[-4.699928590811405]
								}, {
									"case":	295,
									"scores":	[-4.699928590811405]
								}, {
									"case":	296,
									"scores":	[-4.699928590811405]
								}, {
									"case":	297,
									"scores":	[-4.699928590811405]
								}, {
									"case":	298,
									"scores":	[-4.699928590811405]
								}, {
									"case":	299,
									"scores":	[-4.699928590811405]
								}, {
									"case":	300,
									"scores":	[-4.699928590811405]
								}, {
									"case":	301,
									"scores":	[-4.699928590811405]
								}, {
									"case":	302,
									"scores":	[-4.699928590811405]
								}, {
									"case":	303,
									"scores":	[-4.699928590811405]
								}, {
									"case":	304,
									"scores":	[-4.699928590811405]
								}, {
									"case":	305,
									"scores":	[-4.699928590811405]
								}, {
									"case":	306,
									"scores":	[-4.699928590811405]
								}, {
									"case":	307,
									"scores":	[-4.699928590811405]
								}, {
									"case":	308,
									"scores":	[-4.699928590811405]
								}, {
									"case":	309,
									"scores":	[-4.699928590811405]
								}, {
									"case":	310,
									"scores":	[-4.699928590811405]
								}, {
									"case":	311,
									"scores":	[-4.699928590811405]
								}, {
									"case":	312,
									"scores":	[-4.699928590811405]
								}, {
									"case":	313,
									"scores":	[-4.699928590811405]
								}, {
									"case":	314,
									"scores":	[-4.699928590811405]
								}, {
									"case":	315,
									"scores":	[-4.699928590811405]
								}, {
									"case":	316,
									"scores":	[-4.699928590811405]
								}, {
									"case":	317,
									"scores":	[-4.699928590811405]
								}, {
									"case":	318,
									"scores":	[-4.699928590811405]
								}, {
									"case":	319,
									"scores":	[-4.699928590811405]
								}, {
									"case":	320,
									"scores":	[-4.699928590811405]
								}, {
									"case":	321,
									"scores":	[-4.699928590811405]
								}, {
									"case":	322,
									"scores":	[-4.699928590811405]
								}, {
									"case":	323,
									"scores":	[-4.699928590811405]
								}, {
									"case":	324,
									"scores":	[-4.699928590811405]
								}, {
									"case":	325,
									"scores":	[-4.699928590811405]
								}, {
									"case":	326,
									"scores":	[-4.699928590811405]
								}, {
									"case":	327,
									"scores":	[-4.699928590811405]
								}, {
									"case":	328,
									"scores":	[-4.699928590811405]
								}, {
									"case":	329,
									"scores":	[-4.699928590811405]
								}, {
									"case":	330,
									"scores":	[-4.699928590811405]
								}, {
									"case":	331,
									"scores":	[-4.699928590811405]
								}, {
									"case":	332,
									"scores":	[-4.699928590811405]
								}, {
									"case":	333,
									"scores":	[-4.699928590811405]
								}, {
									"case":	334,
									"scores":	[-4.699928590811405]
								}, {
									"case":	335,
									"scores":	[-4.699928590811405]
								}, {
									"case":	336,
									"scores":	[-4.699928590811405]
								}, {
									"case":	337,
									"scores":	[-4.699928590811405]
								}, {
									"case":	338,
									"scores":	[-4.699928590811405]
								}, {
									"case":	339,
									"scores":	[-4.699928590811405]
								}, {
									"case":	340,
									"scores":	[-4.699928590811405]
								}, {
									"case":	341,
									"scores":	[-4.699928590811405]
								}, {
									"case":	342,
									"scores":	[-4.699928590811405]
								}, {
									"case":	343,
									"scores":	[-4.699928590811405]
								}, {
									"case":	344,
									"scores":	[-4.699928590811405]
								}, {
									"case":	345,
									"scores":	[-4.699928590811405]
								}, {
									"case":	346,
									"scores":	[-4.699928590811405]
								}, {
									"case":	347,
									"scores":	[-4.699928590811405]
								}, {
									"case":	348,
									"scores":	[-4.699928590811405]
								}, {
									"case":	349,
									"scores":	[-4.699928590811405]
								}, {
									"case":	350,
									"scores":	[-4.699928590811405]
								}, {
									"case":	351,
									"scores":	[-4.699928590811405]
								}, {
									"case":	352,
									"scores":	[-4.699928590811405]
								}, {
									"case":	353,
									"scores":	[-4.699928590811405]
								}, {
									"case":	354,
									"scores":	[-4.699928590811405]
								}, {
									"case":	355,
									"scores":	[-4.699928590811405]
								}, {
									"case":	356,
									"scores":	[-4.699928590811405]
								}, {
									"case":	357,
									"scores":	[-4.699928590811405]
								}, {
									"case":	358,
									"scores":	[-4.699928590811405]
								}, {
									"case":	359,
									"scores":	[-4.699928590811405]
								}, {
									"case":	360,
									"scores":	[-4.699928590811405]
								}, {
									"case":	361,
									"scores":	[-4.699928590811405]
								}, {
									"case":	362,
									"scores":	[-4.699928590811405]
								}, {
									"case":	363,
									"scores":	[-4.699928590811405]
								}, {
									"case":	364,
									"scores":	[-4.699928590811405]
								}, {
									"case":	365,
									"scores":	[-4.699928590811405]
								}, {
									"case":	366,
									"scores":	[-4.699928590811405]
								}, {
									"case":	367,
									"scores":	[-4.699928590811405]
								}, {
									"case":	368,
									"scores":	[-4.699928590811405]
								}, {
									"case":	369,
									"scores":	[-4.699928590811405]
								}, {
									"case":	370,
									"scores":	[-4.699928590811405]
								}, {
									"case":	371,
									"scores":	[-4.699928590811405]
								}, {
									"case":	372,
									"scores":	[-4.699928590811405]
								}, {
									"case":	373,
									"scores":	[-4.699928590811405]
								}, {
									"case":	374,
									"scores":	[-4.699928590811405]
								}, {
									"case":	375,
									"scores":	[-4.699928590811405]
								}, {
									"case":	376,
									"scores":	[-4.699928590811405]
								}, {
									"case":	377,
									"scores":	[-4.699928590811405]
								}, {
									"case":	378,
									"scores":	[-4.699928590811405]
								}]
						}, {
							"switch":	28,
							"types":	[[34], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [2, 3, 4]],
							"begin_line":	1005,
							"begin_column":	8,
							"end_line":	1008,
							"end_column":	8,
							"patch_codes":	["if (__is_neg(\"\", \"L1005\", 6, &(slen), sizeof (slen), &(suf), sizeof (suf), &(s), sizeof (s), &(name), sizeof (name), &(nlen), sizeof (nlen), &(z_suffix), sizeof (z_suffix))) {\n    return name + nlen - s;\n}\n", "if (slen > s && (strcmp((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/') {\n    return name + nlen - s;\n}\n", "if (suffix[slen - s - 1] != '/' && (strcmp((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (__asprintf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (__printf__((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (asprintf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (execl((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (execle((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (execlp((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (execv((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (execvp((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (fprintf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (fputs((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (fputs_unlocked((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (getdate_r((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (link((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (lstat((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (lstat64((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (obstack_printf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (printf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (rename((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (rpl_fprintf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (sprintf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (stat((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (stat64((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (strcasecmp((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (strcmp((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (strcoll((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (strverscmp((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (symlink((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (utimens((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if (slen > s && suffix[slen - s - 1] != '/' && (vprintf((suffix + slen - s), (*suf)) == 0)) {\n    return name + nlen - s;\n}\n", "if ((slen > s && suffix[slen - s - 1] != '/' && (strcmp((suffix + slen - s), (*suf)) == 0)) && !__is_neg(\"\", \"L1005\", 6, &(slen), sizeof (slen), &(suf), sizeof (suf), &(s), sizeof (s), &(name), sizeof (name), &(nlen), sizeof (nlen), &(z_suffix), sizeof (z_suffix))) {\n    return name + nlen - s;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.6939770854281457, -4.2144498054281465, -2.7197196994281452, -4.9147118994281467, -3.9690385294281465, -5.911019955428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[0.47303876707185166, -2.047433952928146, -0.55270384692814734, -2.7476960469281462, -1.8020226769281469, -3.7440041029281468]
								}]
						}]
				}, {
					"line":	1171,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [172, 173, 174], [], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	1172,
							"begin_column":	0,
							"end_line":	1172,
							"end_column":	0,
							"patch_codes":	["(suff)++", "(suff)--", "__printf__(\"%s %s\\n\", (suff), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (suff))", "bytes_in = (0)", "bytes_in = (2)", "bytes_out = (0)", "bytes_out = (2)", "env = (suff)", "exit_code = (0)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (2)", "foreground = (0)", "foreground = (2)", "free((suff))", "header_bytes = (0)", "header_bytes = (2)", "ifd = (0)", "ifd = (2)", "ifd = open_input_file((suff), &istat)", "ifile_size = (0)", "ifile_size = (2)", "inptr = (0)", "inptr = (2)", "last_member = (0)", "last_member = (2)", "list = (0)", "list = (2)", "method = (0)", "method = (2)", "no_name = (0)", "no_name = (2)", "no_time = (0)", "no_time = (2)", "ofd = (0)", "ofd = (2)", "part_nb = (0)", "part_nb = (2)", "perror((suff))", "progerror((suff))", "program_name = (suff)", "quiet = (0)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (2)", "save_orig_name = (0)", "save_orig_name = (2)", "strcat(ifname, (suff))", "strcat(ofname, (suff))", "strcpy((suff) - 4, \".tgz\")", "strcpy((suff), \".tar\")", "strcpy((suff), z_suffix)", "strcpy(ifname, (suff))", "strlwr((suff))", "suff = (suff)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (2)", "total_in = (0)", "total_in = (2)", "total_out = (0)", "total_out = (2)", "treat_dir(ifd, (suff))", "verbose = (0)", "verbose = (2)", "z_len = (0)", "z_len = (2)", "z_len = strlen((suff))", "z_suffix = (suff)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "strcpy(suff, \".tar\")", "strlwr(suff)", "suff = get_suffix(ofname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    goto name_too_long;\n", "if (__is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 0;\n", "if (__is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	2,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	3,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	4,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	5,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	6,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	7,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	8,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	9,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	10,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	11,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	12,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	13,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	14,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	15,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	16,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	17,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	18,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	19,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	20,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	21,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	22,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	23,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	24,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	25,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	26,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	27,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	28,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	29,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	30,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	31,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	32,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	33,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	34,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	35,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	36,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	37,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	38,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	39,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	40,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	41,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	42,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	43,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	44,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	45,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	46,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	47,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	48,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	49,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	50,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	51,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	52,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	53,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	54,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	55,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	56,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	57,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	58,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	59,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	60,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	61,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	62,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	63,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	64,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	65,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	66,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	67,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	68,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	69,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	70,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	71,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	72,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	73,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	74,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	75,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	76,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	77,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	78,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	79,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	80,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	81,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	82,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	83,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	84,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	85,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	86,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	87,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	88,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	89,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	90,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	91,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	92,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	93,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	94,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	95,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	96,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	97,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	98,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	99,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	100,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	101,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	102,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	103,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	104,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	105,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	106,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	107,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	108,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	109,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	110,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	111,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	112,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	113,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	114,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	115,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	116,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	117,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	118,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	119,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	120,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	121,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	122,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	123,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	124,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	125,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	126,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	127,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	128,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	129,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	130,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	131,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	132,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	133,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	134,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	135,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	136,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	137,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	138,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	139,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	140,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	141,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	142,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	143,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	144,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	145,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	146,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	147,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	148,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	149,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	150,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	151,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	152,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	153,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	154,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	155,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	156,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	157,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	158,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	159,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	160,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	161,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	162,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	163,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	164,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	165,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	166,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	167,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	168,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	169,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	170,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	171,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	172,
									"scores":	[-7.9960225884938838, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -7.3084033865938851, -8.3755253712938842, -7.3084033865938851, -8.3755253712938842, -8.2180574865938851, -8.2180574865938851, -8.2180574865938851, -7.7619464865938852, -8.3074801865938852]
								}, {
									"case":	173,
									"scores":	[-8.0969307884938839, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -7.4093115865938852, -8.4764335712938852, -7.4093115865938852, -8.4764335712938852, -8.3189656865938844, -8.3189656865938844, -8.3189656865938844, -7.8628546865938853, -8.4083883865938844]
								}, {
									"case":	174,
									"scores":	[-10.359712588493885, -10.581747486593885, -10.581747486593885, -10.581747486593885, -10.581747486593885, -10.581747486593885, -10.581747486593885, -10.581747486593885, -10.581747486593885, -10.581747486593885, -9.6720933865938861, -10.739215371293884, -9.6720933865938861, -10.739215371293884, -10.581747486593885, -10.581747486593885, -10.581747486593885, -10.125636486593885, -10.671170186593885]
								}]
						}, {
							"switch":	34,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1172,
							"begin_column":	2,
							"end_line":	1184,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    if (!recursive && (list || test))\n        return 0;\n    if (verbose || (!recursive && !quiet)) {\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: %s: unknown suffix -- ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n    }\n    return 2;\n}\n", "if ((suff == ((void *)0)) || __is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    if (!recursive && (list || test))\n        return 0;\n    if (verbose || (!recursive && !quiet)) {\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: %s: unknown suffix -- ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n    }\n    return 2;\n}\n", "if ((suff == ((void *)0)) && !__is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    if (!recursive && (list || test))\n        return 0;\n    if (verbose || (!recursive && !quiet)) {\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: %s: unknown suffix -- ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n    }\n    return 2;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.920883920128146, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.3234168201281467, -5.0541500931281469, -6.3234168201281467, -5.0541500931281469, -6.5511954201281473, -6.5511954201281473, -6.5511954201281473, -6.3072685501281462, -6.9881604201281462]
								}, {
									"case":	2,
									"scores":	[-3.0485306054281458, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.451063505428146, -4.1817967784281462, -5.451063505428146, -4.1817967784281462, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.4349152354281456, -6.1158071054281464]
								}, {
									"case":	3,
									"scores":	[-3.0485306054281458, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.451063505428146, -4.1817967784281462, -5.451063505428146, -4.1817967784281462, -5.6788421054281457, -5.6788421054281457, -5.6788421054281457, -5.4349152354281456, -6.1158071054281464]
								}]
						}, {
							"switch":	35,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1172,
							"begin_column":	2,
							"end_line":	1184,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    if (suff == ((void *)0)) {\n        if (!recursive && (list || test))\n            return 0;\n        if (verbose || (!recursive && !quiet)) {\n            {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"%s: %s: unknown suffix -- ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n        }\n        return 2;\n    }\n", "if (!__is_neg(\"\", \"L1172\", 19, &(suff), sizeof (suff), &(decompress), sizeof (decompress), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)) && (suff == ((void *)0))) {\n    if (!recursive && (list || test))\n        return 0;\n    if (verbose || (!recursive && !quiet)) {\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: %s: unknown suffix -- ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n    }\n    return 2;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9769079634938862, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.3794408634938851, -5.1101741364938853, -6.3794408634938851, -5.1101741364938853, -6.6072194634938857, -6.6072194634938857, -6.6072194634938857, -6.3632925934938855, -7.0441844634938855]
								}, {
									"case":	2,
									"scores":	[-4.8687545664938856, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.2712874664938854, -6.0020207394938856, -7.2712874664938854, -6.0020207394938856, -7.4990660664938851, -7.4990660664938851, -7.4990660664938851, -7.2551391964938858, -7.9360310664938858]
								}]
						}]
				}, {
					"line":	1185,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [172, 173, 174], [], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	1186,
							"begin_column":	0,
							"end_line":	1186,
							"end_column":	0,
							"patch_codes":	["(suff)++", "(suff)--", "__printf__(\"%s %s\\n\", (suff), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (suff))", "bytes_in = (0)", "bytes_in = (2)", "bytes_out = (0)", "bytes_out = (2)", "env = (suff)", "exit_code = (0)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (2)", "foreground = (0)", "foreground = (2)", "free((suff))", "header_bytes = (0)", "header_bytes = (2)", "ifd = (0)", "ifd = (2)", "ifd = open_input_file((suff), &istat)", "ifile_size = (0)", "ifile_size = (2)", "inptr = (0)", "inptr = (2)", "last_member = (0)", "last_member = (2)", "list = (0)", "list = (2)", "method = (0)", "method = (2)", "no_name = (0)", "no_name = (2)", "no_time = (0)", "no_time = (2)", "ofd = (0)", "ofd = (2)", "part_nb = (0)", "part_nb = (2)", "perror((suff))", "progerror((suff))", "program_name = (suff)", "quiet = (0)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (2)", "save_orig_name = (0)", "save_orig_name = (2)", "strcat(ifname, (suff))", "strcat(ofname, (suff))", "strcpy((suff) - 4, \".tgz\")", "strcpy((suff), \".tar\")", "strcpy((suff), z_suffix)", "strcpy(ifname, (suff))", "strlwr((suff))", "suff = (suff)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (2)", "total_in = (0)", "total_in = (2)", "total_out = (0)", "total_out = (2)", "treat_dir(ifd, (suff))", "verbose = (0)", "verbose = (2)", "z_len = (0)", "z_len = (2)", "z_len = strlen((suff))", "z_suffix = (suff)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "strcpy(suff, \".tar\")", "strlwr(suff)", "suff = get_suffix(ofname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1186\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(force), sizeof (force), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    goto name_too_long;\n", "if (__is_neg(\"\", \"L1186\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(force), sizeof (force), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 0;\n", "if (__is_neg(\"\", \"L1186\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(force), sizeof (force), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.659523176176366]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-4.659523176176366]
								}, {
									"case":	44,
									"scores":	[-4.659523176176366]
								}, {
									"case":	45,
									"scores":	[-4.659523176176366]
								}, {
									"case":	46,
									"scores":	[-4.659523176176366]
								}, {
									"case":	47,
									"scores":	[-4.659523176176366]
								}, {
									"case":	48,
									"scores":	[-4.659523176176366]
								}, {
									"case":	49,
									"scores":	[-4.659523176176366]
								}, {
									"case":	50,
									"scores":	[-4.659523176176366]
								}, {
									"case":	51,
									"scores":	[-4.659523176176366]
								}, {
									"case":	52,
									"scores":	[-4.659523176176366]
								}, {
									"case":	53,
									"scores":	[-4.659523176176366]
								}, {
									"case":	54,
									"scores":	[-4.659523176176366]
								}, {
									"case":	55,
									"scores":	[-4.659523176176366]
								}, {
									"case":	56,
									"scores":	[-4.659523176176366]
								}, {
									"case":	57,
									"scores":	[-4.659523176176366]
								}, {
									"case":	58,
									"scores":	[-4.659523176176366]
								}, {
									"case":	59,
									"scores":	[-4.659523176176366]
								}, {
									"case":	60,
									"scores":	[-4.659523176176366]
								}, {
									"case":	61,
									"scores":	[-4.659523176176366]
								}, {
									"case":	62,
									"scores":	[-4.659523176176366]
								}, {
									"case":	63,
									"scores":	[-4.659523176176366]
								}, {
									"case":	64,
									"scores":	[-4.659523176176366]
								}, {
									"case":	65,
									"scores":	[-4.659523176176366]
								}, {
									"case":	66,
									"scores":	[-4.659523176176366]
								}, {
									"case":	67,
									"scores":	[-4.659523176176366]
								}, {
									"case":	68,
									"scores":	[-4.659523176176366]
								}, {
									"case":	69,
									"scores":	[-4.659523176176366]
								}, {
									"case":	70,
									"scores":	[-4.659523176176366]
								}, {
									"case":	71,
									"scores":	[-4.659523176176366]
								}, {
									"case":	72,
									"scores":	[-4.659523176176366]
								}, {
									"case":	73,
									"scores":	[-4.659523176176366]
								}, {
									"case":	74,
									"scores":	[-4.659523176176366]
								}, {
									"case":	75,
									"scores":	[-4.659523176176366]
								}, {
									"case":	76,
									"scores":	[-4.659523176176366]
								}, {
									"case":	77,
									"scores":	[-4.659523176176366]
								}, {
									"case":	78,
									"scores":	[-4.659523176176366]
								}, {
									"case":	79,
									"scores":	[-4.659523176176366]
								}, {
									"case":	80,
									"scores":	[-4.659523176176366]
								}, {
									"case":	81,
									"scores":	[-4.659523176176366]
								}, {
									"case":	82,
									"scores":	[-4.659523176176366]
								}, {
									"case":	83,
									"scores":	[-4.659523176176366]
								}, {
									"case":	84,
									"scores":	[-4.659523176176366]
								}, {
									"case":	85,
									"scores":	[-4.659523176176366]
								}, {
									"case":	86,
									"scores":	[-4.659523176176366]
								}, {
									"case":	87,
									"scores":	[-4.659523176176366]
								}, {
									"case":	88,
									"scores":	[-4.659523176176366]
								}, {
									"case":	89,
									"scores":	[-4.659523176176366]
								}, {
									"case":	90,
									"scores":	[-4.659523176176366]
								}, {
									"case":	91,
									"scores":	[-4.659523176176366]
								}, {
									"case":	92,
									"scores":	[-4.659523176176366]
								}, {
									"case":	93,
									"scores":	[-4.659523176176366]
								}, {
									"case":	94,
									"scores":	[-4.659523176176366]
								}, {
									"case":	95,
									"scores":	[-4.659523176176366]
								}, {
									"case":	96,
									"scores":	[-4.659523176176366]
								}, {
									"case":	97,
									"scores":	[-4.659523176176366]
								}, {
									"case":	98,
									"scores":	[-4.659523176176366]
								}, {
									"case":	99,
									"scores":	[-4.659523176176366]
								}, {
									"case":	100,
									"scores":	[-4.659523176176366]
								}, {
									"case":	101,
									"scores":	[-4.659523176176366]
								}, {
									"case":	102,
									"scores":	[-4.659523176176366]
								}, {
									"case":	103,
									"scores":	[-4.659523176176366]
								}, {
									"case":	104,
									"scores":	[-4.659523176176366]
								}, {
									"case":	105,
									"scores":	[-4.659523176176366]
								}, {
									"case":	106,
									"scores":	[-4.659523176176366]
								}, {
									"case":	107,
									"scores":	[-4.659523176176366]
								}, {
									"case":	108,
									"scores":	[-4.659523176176366]
								}, {
									"case":	109,
									"scores":	[-4.659523176176366]
								}, {
									"case":	110,
									"scores":	[-4.659523176176366]
								}, {
									"case":	111,
									"scores":	[-4.659523176176366]
								}, {
									"case":	112,
									"scores":	[-4.659523176176366]
								}, {
									"case":	113,
									"scores":	[-4.659523176176366]
								}, {
									"case":	114,
									"scores":	[-4.659523176176366]
								}, {
									"case":	115,
									"scores":	[-4.659523176176366]
								}, {
									"case":	116,
									"scores":	[-4.659523176176366]
								}, {
									"case":	117,
									"scores":	[-4.659523176176366]
								}, {
									"case":	118,
									"scores":	[-4.659523176176366]
								}, {
									"case":	119,
									"scores":	[-4.659523176176366]
								}, {
									"case":	120,
									"scores":	[-4.659523176176366]
								}, {
									"case":	121,
									"scores":	[-4.659523176176366]
								}, {
									"case":	122,
									"scores":	[-4.659523176176366]
								}, {
									"case":	123,
									"scores":	[-4.659523176176366]
								}, {
									"case":	124,
									"scores":	[-4.659523176176366]
								}, {
									"case":	125,
									"scores":	[-4.659523176176366]
								}, {
									"case":	126,
									"scores":	[-4.659523176176366]
								}, {
									"case":	127,
									"scores":	[-4.659523176176366]
								}, {
									"case":	128,
									"scores":	[-4.659523176176366]
								}, {
									"case":	129,
									"scores":	[-4.659523176176366]
								}, {
									"case":	130,
									"scores":	[-4.659523176176366]
								}, {
									"case":	131,
									"scores":	[-4.659523176176366]
								}, {
									"case":	132,
									"scores":	[-4.659523176176366]
								}, {
									"case":	133,
									"scores":	[-4.659523176176366]
								}, {
									"case":	134,
									"scores":	[-4.659523176176366]
								}, {
									"case":	135,
									"scores":	[-4.659523176176366]
								}, {
									"case":	136,
									"scores":	[-4.659523176176366]
								}, {
									"case":	137,
									"scores":	[-4.659523176176366]
								}, {
									"case":	138,
									"scores":	[-4.659523176176366]
								}, {
									"case":	139,
									"scores":	[-4.659523176176366]
								}, {
									"case":	140,
									"scores":	[-4.659523176176366]
								}, {
									"case":	141,
									"scores":	[-4.659523176176366]
								}, {
									"case":	142,
									"scores":	[-4.659523176176366]
								}, {
									"case":	143,
									"scores":	[-4.659523176176366]
								}, {
									"case":	144,
									"scores":	[-4.659523176176366]
								}, {
									"case":	145,
									"scores":	[-4.659523176176366]
								}, {
									"case":	146,
									"scores":	[-4.659523176176366]
								}, {
									"case":	147,
									"scores":	[-4.659523176176366]
								}, {
									"case":	148,
									"scores":	[-4.659523176176366]
								}, {
									"case":	149,
									"scores":	[-4.659523176176366]
								}, {
									"case":	150,
									"scores":	[-4.659523176176366]
								}, {
									"case":	151,
									"scores":	[-4.659523176176366]
								}, {
									"case":	152,
									"scores":	[-4.659523176176366]
								}, {
									"case":	153,
									"scores":	[-4.659523176176366]
								}, {
									"case":	154,
									"scores":	[-4.659523176176366]
								}, {
									"case":	155,
									"scores":	[-4.659523176176366]
								}, {
									"case":	156,
									"scores":	[-4.659523176176366]
								}, {
									"case":	157,
									"scores":	[-4.659523176176366]
								}, {
									"case":	158,
									"scores":	[-4.659523176176366]
								}, {
									"case":	159,
									"scores":	[-4.659523176176366]
								}, {
									"case":	160,
									"scores":	[-4.659523176176366]
								}, {
									"case":	161,
									"scores":	[-4.659523176176366]
								}, {
									"case":	162,
									"scores":	[-4.659523176176366]
								}, {
									"case":	163,
									"scores":	[-4.659523176176366]
								}, {
									"case":	164,
									"scores":	[-4.659523176176366]
								}, {
									"case":	165,
									"scores":	[-4.659523176176366]
								}, {
									"case":	166,
									"scores":	[-4.659523176176366]
								}, {
									"case":	167,
									"scores":	[-4.659523176176366]
								}, {
									"case":	168,
									"scores":	[-4.659523176176366]
								}, {
									"case":	169,
									"scores":	[-4.659523176176366]
								}, {
									"case":	170,
									"scores":	[-4.659523176176366]
								}, {
									"case":	171,
									"scores":	[-4.659523176176366]
								}, {
									"case":	172,
									"scores":	[-7.0640644793763663, -8.7158395689763655, -6.8976729774763657, -8.4358538992763652, -8.4358538992763652, -8.7158395689763655, -6.8976729774763657, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -8.4358538992763652, -7.9797428992763653, -8.5252765992763653]
								}, {
									"case":	173,
									"scores":	[-7.1649726793763664, -8.8167477689763665, -6.9985811774763658, -8.5367620992763662, -8.5367620992763662, -8.8167477689763665, -6.9985811774763658, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.5367620992763662, -8.0806510992763663, -8.6261847992763663]
								}, {
									"case":	174,
									"scores":	[-9.4277544793763663, -11.079529568976366, -9.2613629774763666, -10.799543899276365, -10.799543899276365, -11.079529568976366, -9.2613629774763666, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.799543899276365, -10.343432899276365, -10.888966599276365]
								}]
						}, {
							"switch":	37,
							"types":	[[], [], [1], [], [], [], [216, 217], [], [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], [], [], [194]],
							"begin_line":	1186,
							"begin_column":	2,
							"end_line":	1186,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L1186\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(force), sizeof (force), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    strlwr(suff);\n", "__stpcpy(suff, 0)", "encrypt(suff, 0)", "encrypt(suff, 2)", "encrypt(suff, ascii)", "encrypt(suff, block_mode)", "encrypt(suff, decompress)", "encrypt(suff, decrypt)", "encrypt(suff, do_lzw)", "encrypt(suff, exit_code)", "encrypt(suff, exiting_signal)", "encrypt(suff, force)", "encrypt(suff, foreground)", "encrypt(suff, ifd)", "encrypt(suff, last_member)", "encrypt(suff, level)", "encrypt(suff, list)", "encrypt(suff, maxbits)", "encrypt(suff, method)", "encrypt(suff, no_name)", "encrypt(suff, no_time)", "encrypt(suff, ofd)", "encrypt(suff, part_nb)", "encrypt(suff, quiet)", "encrypt(suff, recursive)", "encrypt(suff, remove_ofname_fd)", "encrypt(suff, save_orig_name)", "encrypt(suff, test)", "encrypt(suff, to_stdout)", "encrypt(suff, verbose)", "file_read(suff, 0)", "file_read(suff, 2)", "file_read(suff, inptr)", "file_read(suff, insize)", "file_read(suff, outcnt)", "getcwd(suff, 0)", "getcwd(suff, 2)", "getcwd(suff, z_len)", "getdomainname(suff, 0)", "getdomainname(suff, 2)", "getdomainname(suff, z_len)", "gethostname(suff, 0)", "gethostname(suff, 2)", "gethostname(suff, z_len)", "getlogin_r(suff, 0)", "getlogin_r(suff, 2)", "getlogin_r(suff, z_len)", "mkostemp(suff, 0)", "mkostemp(suff, 2)", "mkostemp(suff, ascii)", "mkostemp(suff, block_mode)", "mkostemp(suff, decompress)", "mkostemp(suff, decrypt)", "mkostemp(suff, do_lzw)", "mkostemp(suff, exit_code)", "mkostemp(suff, exiting_signal)", "mkostemp(suff, force)", "mkostemp(suff, foreground)", "mkostemp(suff, ifd)", "mkostemp(suff, last_member)", "mkostemp(suff, level)", "mkostemp(suff, list)", "mkostemp(suff, maxbits)", "mkostemp(suff, method)", "mkostemp(suff, no_name)", "mkostemp(suff, no_time)", "mkostemp(suff, ofd)", "mkostemp(suff, part_nb)", "mkostemp(suff, quiet)", "mkostemp(suff, recursive)", "mkostemp(suff, remove_ofname_fd)", "mkostemp(suff, save_orig_name)", "mkostemp(suff, test)", "mkostemp(suff, to_stdout)", "mkostemp(suff, verbose)", "mkostemp64(suff, 0)", "mkostemp64(suff, 2)", "mkostemp64(suff, ascii)", "mkostemp64(suff, block_mode)", "mkostemp64(suff, decompress)", "mkostemp64(suff, decrypt)", "mkostemp64(suff, do_lzw)", "mkostemp64(suff, exit_code)", "mkostemp64(suff, exiting_signal)", "mkostemp64(suff, force)", "mkostemp64(suff, foreground)", "mkostemp64(suff, ifd)", "mkostemp64(suff, last_member)", "mkostemp64(suff, level)", "mkostemp64(suff, list)", "mkostemp64(suff, maxbits)", "mkostemp64(suff, method)", "mkostemp64(suff, no_name)", "mkostemp64(suff, no_time)", "mkostemp64(suff, ofd)", "mkostemp64(suff, part_nb)", "mkostemp64(suff, quiet)", "mkostemp64(suff, recursive)", "mkostemp64(suff, remove_ofname_fd)", "mkostemp64(suff, save_orig_name)", "mkostemp64(suff, test)", "mkostemp64(suff, to_stdout)", "mkostemp64(suff, verbose)", "mkstemps(suff, 0)", "mkstemps(suff, 2)", "mkstemps(suff, ascii)", "mkstemps(suff, block_mode)", "mkstemps(suff, decompress)", "mkstemps(suff, decrypt)", "mkstemps(suff, do_lzw)", "mkstemps(suff, exit_code)", "mkstemps(suff, exiting_signal)", "mkstemps(suff, force)", "mkstemps(suff, foreground)", "mkstemps(suff, ifd)", "mkstemps(suff, last_member)", "mkstemps(suff, level)", "mkstemps(suff, list)", "mkstemps(suff, maxbits)", "mkstemps(suff, method)", "mkstemps(suff, no_name)", "mkstemps(suff, no_time)", "mkstemps(suff, ofd)", "mkstemps(suff, part_nb)", "mkstemps(suff, quiet)", "mkstemps(suff, recursive)", "mkstemps(suff, remove_ofname_fd)", "mkstemps(suff, save_orig_name)", "mkstemps(suff, test)", "mkstemps(suff, to_stdout)", "mkstemps(suff, verbose)", "mkstemps64(suff, 0)", "mkstemps64(suff, 2)", "mkstemps64(suff, ascii)", "mkstemps64(suff, block_mode)", "mkstemps64(suff, decompress)", "mkstemps64(suff, decrypt)", "mkstemps64(suff, do_lzw)", "mkstemps64(suff, exit_code)", "mkstemps64(suff, exiting_signal)", "mkstemps64(suff, force)", "mkstemps64(suff, foreground)", "mkstemps64(suff, ifd)", "mkstemps64(suff, last_member)", "mkstemps64(suff, level)", "mkstemps64(suff, list)", "mkstemps64(suff, maxbits)", "mkstemps64(suff, method)", "mkstemps64(suff, no_name)", "mkstemps64(suff, no_time)", "mkstemps64(suff, ofd)", "mkstemps64(suff, part_nb)", "mkstemps64(suff, quiet)", "mkstemps64(suff, recursive)", "mkstemps64(suff, remove_ofname_fd)", "mkstemps64(suff, save_orig_name)", "mkstemps64(suff, test)", "mkstemps64(suff, to_stdout)", "mkstemps64(suff, verbose)", "open_input_file(suff, 0)", "setstate_r(suff, 0)", "stpcpy(suff, 0)", "strcat(suff, 0)", "strcpy(suff, 0)", "strtok(suff, 0)", "wctomb(suff, 0)", "wctomb(suff, 2)", "wctomb(suff, ascii)", "wctomb(suff, block_mode)", "wctomb(suff, decompress)", "wctomb(suff, decrypt)", "wctomb(suff, do_lzw)", "wctomb(suff, exit_code)", "wctomb(suff, exiting_signal)", "wctomb(suff, force)", "wctomb(suff, foreground)", "wctomb(suff, ifd)", "wctomb(suff, last_member)", "wctomb(suff, level)", "wctomb(suff, list)", "wctomb(suff, maxbits)", "wctomb(suff, method)", "wctomb(suff, no_name)", "wctomb(suff, no_time)", "wctomb(suff, ofd)", "wctomb(suff, part_nb)", "wctomb(suff, quiet)", "wctomb(suff, recursive)", "wctomb(suff, remove_ofname_fd)", "wctomb(suff, save_orig_name)", "wctomb(suff, test)", "wctomb(suff, to_stdout)", "wctomb(suff, verbose)", "{\n}\n", "ctermid(suff)", "cuserid(suff)", "get_suffix(suff)", "getwd(suff)", "gzip_base_name(suff)", "gzip_error(suff)", "make_simple_name(suff)", "mkdtemp(suff)", "mkstemp(suff)", "mkstemp64(suff)", "mktemp(suff)", "progerror(suff)", "putenv(suff)", "setstate(suff)", "shorten_name(suff)", "strfry(suff)", "tmpnam(suff)", "tmpnam_r(suff)", "treat_file(suff)", "warning(suff)", "xunlink(suff)", "strlwr((&suff))", "strlwr((suff))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3322004051763656, -7.3878837758763662, -7.384767079176366, -6.9629914561763666, -6.9629914561763666, -7.3878837758763662, -7.384767079176366, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.9629914561763666, -6.7190645861763656, -7.3999564561763655]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-4.659523176176366]
								}, {
									"case":	44,
									"scores":	[-4.659523176176366]
								}, {
									"case":	45,
									"scores":	[-4.659523176176366]
								}, {
									"case":	46,
									"scores":	[-4.659523176176366]
								}, {
									"case":	47,
									"scores":	[-4.659523176176366]
								}, {
									"case":	48,
									"scores":	[-4.659523176176366]
								}, {
									"case":	49,
									"scores":	[-4.659523176176366]
								}, {
									"case":	50,
									"scores":	[-4.659523176176366]
								}, {
									"case":	51,
									"scores":	[-4.659523176176366]
								}, {
									"case":	52,
									"scores":	[-4.659523176176366]
								}, {
									"case":	53,
									"scores":	[-4.659523176176366]
								}, {
									"case":	54,
									"scores":	[-4.659523176176366]
								}, {
									"case":	55,
									"scores":	[-4.659523176176366]
								}, {
									"case":	56,
									"scores":	[-4.659523176176366]
								}, {
									"case":	57,
									"scores":	[-4.659523176176366]
								}, {
									"case":	58,
									"scores":	[-4.659523176176366]
								}, {
									"case":	59,
									"scores":	[-4.659523176176366]
								}, {
									"case":	60,
									"scores":	[-4.659523176176366]
								}, {
									"case":	61,
									"scores":	[-4.659523176176366]
								}, {
									"case":	62,
									"scores":	[-4.659523176176366]
								}, {
									"case":	63,
									"scores":	[-4.659523176176366]
								}, {
									"case":	64,
									"scores":	[-4.659523176176366]
								}, {
									"case":	65,
									"scores":	[-4.659523176176366]
								}, {
									"case":	66,
									"scores":	[-4.659523176176366]
								}, {
									"case":	67,
									"scores":	[-4.659523176176366]
								}, {
									"case":	68,
									"scores":	[-4.659523176176366]
								}, {
									"case":	69,
									"scores":	[-4.659523176176366]
								}, {
									"case":	70,
									"scores":	[-4.659523176176366]
								}, {
									"case":	71,
									"scores":	[-4.659523176176366]
								}, {
									"case":	72,
									"scores":	[-4.659523176176366]
								}, {
									"case":	73,
									"scores":	[-4.659523176176366]
								}, {
									"case":	74,
									"scores":	[-4.659523176176366]
								}, {
									"case":	75,
									"scores":	[-4.659523176176366]
								}, {
									"case":	76,
									"scores":	[-4.659523176176366]
								}, {
									"case":	77,
									"scores":	[-4.659523176176366]
								}, {
									"case":	78,
									"scores":	[-4.659523176176366]
								}, {
									"case":	79,
									"scores":	[-4.659523176176366]
								}, {
									"case":	80,
									"scores":	[-4.659523176176366]
								}, {
									"case":	81,
									"scores":	[-4.659523176176366]
								}, {
									"case":	82,
									"scores":	[-4.659523176176366]
								}, {
									"case":	83,
									"scores":	[-4.659523176176366]
								}, {
									"case":	84,
									"scores":	[-4.659523176176366]
								}, {
									"case":	85,
									"scores":	[-4.659523176176366]
								}, {
									"case":	86,
									"scores":	[-4.659523176176366]
								}, {
									"case":	87,
									"scores":	[-4.659523176176366]
								}, {
									"case":	88,
									"scores":	[-4.659523176176366]
								}, {
									"case":	89,
									"scores":	[-4.659523176176366]
								}, {
									"case":	90,
									"scores":	[-4.659523176176366]
								}, {
									"case":	91,
									"scores":	[-4.659523176176366]
								}, {
									"case":	92,
									"scores":	[-4.659523176176366]
								}, {
									"case":	93,
									"scores":	[-4.659523176176366]
								}, {
									"case":	94,
									"scores":	[-4.659523176176366]
								}, {
									"case":	95,
									"scores":	[-4.659523176176366]
								}, {
									"case":	96,
									"scores":	[-4.659523176176366]
								}, {
									"case":	97,
									"scores":	[-4.659523176176366]
								}, {
									"case":	98,
									"scores":	[-4.659523176176366]
								}, {
									"case":	99,
									"scores":	[-4.659523176176366]
								}, {
									"case":	100,
									"scores":	[-4.659523176176366]
								}, {
									"case":	101,
									"scores":	[-4.659523176176366]
								}, {
									"case":	102,
									"scores":	[-4.659523176176366]
								}, {
									"case":	103,
									"scores":	[-4.659523176176366]
								}, {
									"case":	104,
									"scores":	[-4.659523176176366]
								}, {
									"case":	105,
									"scores":	[-4.659523176176366]
								}, {
									"case":	106,
									"scores":	[-4.659523176176366]
								}, {
									"case":	107,
									"scores":	[-4.659523176176366]
								}, {
									"case":	108,
									"scores":	[-4.659523176176366]
								}, {
									"case":	109,
									"scores":	[-4.659523176176366]
								}, {
									"case":	110,
									"scores":	[-4.659523176176366]
								}, {
									"case":	111,
									"scores":	[-4.659523176176366]
								}, {
									"case":	112,
									"scores":	[-4.659523176176366]
								}, {
									"case":	113,
									"scores":	[-4.659523176176366]
								}, {
									"case":	114,
									"scores":	[-4.659523176176366]
								}, {
									"case":	115,
									"scores":	[-4.659523176176366]
								}, {
									"case":	116,
									"scores":	[-4.659523176176366]
								}, {
									"case":	117,
									"scores":	[-4.659523176176366]
								}, {
									"case":	118,
									"scores":	[-4.659523176176366]
								}, {
									"case":	119,
									"scores":	[-4.659523176176366]
								}, {
									"case":	120,
									"scores":	[-4.659523176176366]
								}, {
									"case":	121,
									"scores":	[-4.659523176176366]
								}, {
									"case":	122,
									"scores":	[-4.659523176176366]
								}, {
									"case":	123,
									"scores":	[-4.659523176176366]
								}, {
									"case":	124,
									"scores":	[-4.659523176176366]
								}, {
									"case":	125,
									"scores":	[-4.659523176176366]
								}, {
									"case":	126,
									"scores":	[-4.659523176176366]
								}, {
									"case":	127,
									"scores":	[-4.659523176176366]
								}, {
									"case":	128,
									"scores":	[-4.659523176176366]
								}, {
									"case":	129,
									"scores":	[-4.659523176176366]
								}, {
									"case":	130,
									"scores":	[-4.659523176176366]
								}, {
									"case":	131,
									"scores":	[-4.659523176176366]
								}, {
									"case":	132,
									"scores":	[-4.659523176176366]
								}, {
									"case":	133,
									"scores":	[-4.659523176176366]
								}, {
									"case":	134,
									"scores":	[-4.659523176176366]
								}, {
									"case":	135,
									"scores":	[-4.659523176176366]
								}, {
									"case":	136,
									"scores":	[-4.659523176176366]
								}, {
									"case":	137,
									"scores":	[-4.659523176176366]
								}, {
									"case":	138,
									"scores":	[-4.659523176176366]
								}, {
									"case":	139,
									"scores":	[-4.659523176176366]
								}, {
									"case":	140,
									"scores":	[-4.659523176176366]
								}, {
									"case":	141,
									"scores":	[-4.659523176176366]
								}, {
									"case":	142,
									"scores":	[-4.659523176176366]
								}, {
									"case":	143,
									"scores":	[-4.659523176176366]
								}, {
									"case":	144,
									"scores":	[-4.659523176176366]
								}, {
									"case":	145,
									"scores":	[-4.659523176176366]
								}, {
									"case":	146,
									"scores":	[-4.659523176176366]
								}, {
									"case":	147,
									"scores":	[-4.659523176176366]
								}, {
									"case":	148,
									"scores":	[-4.659523176176366]
								}, {
									"case":	149,
									"scores":	[-4.659523176176366]
								}, {
									"case":	150,
									"scores":	[-4.659523176176366]
								}, {
									"case":	151,
									"scores":	[-4.659523176176366]
								}, {
									"case":	152,
									"scores":	[-4.659523176176366]
								}, {
									"case":	153,
									"scores":	[-4.659523176176366]
								}, {
									"case":	154,
									"scores":	[-4.659523176176366]
								}, {
									"case":	155,
									"scores":	[-4.659523176176366]
								}, {
									"case":	156,
									"scores":	[-4.659523176176366]
								}, {
									"case":	157,
									"scores":	[-4.659523176176366]
								}, {
									"case":	158,
									"scores":	[-4.659523176176366]
								}, {
									"case":	159,
									"scores":	[-4.659523176176366]
								}, {
									"case":	160,
									"scores":	[-4.659523176176366]
								}, {
									"case":	161,
									"scores":	[-4.659523176176366]
								}, {
									"case":	162,
									"scores":	[-4.659523176176366]
								}, {
									"case":	163,
									"scores":	[-4.659523176176366]
								}, {
									"case":	164,
									"scores":	[-4.659523176176366]
								}, {
									"case":	165,
									"scores":	[-4.659523176176366]
								}, {
									"case":	166,
									"scores":	[-4.659523176176366]
								}, {
									"case":	167,
									"scores":	[-4.659523176176366]
								}, {
									"case":	168,
									"scores":	[-4.659523176176366]
								}, {
									"case":	169,
									"scores":	[-4.659523176176366]
								}, {
									"case":	170,
									"scores":	[-4.659523176176366]
								}, {
									"case":	171,
									"scores":	[-4.659523176176366]
								}, {
									"case":	172,
									"scores":	[-4.659523176176366]
								}, {
									"case":	173,
									"scores":	[-4.659523176176366]
								}, {
									"case":	174,
									"scores":	[-4.659523176176366]
								}, {
									"case":	175,
									"scores":	[-4.659523176176366]
								}, {
									"case":	176,
									"scores":	[-4.659523176176366]
								}, {
									"case":	177,
									"scores":	[-4.659523176176366]
								}, {
									"case":	178,
									"scores":	[-4.659523176176366]
								}, {
									"case":	179,
									"scores":	[-4.659523176176366]
								}, {
									"case":	180,
									"scores":	[-4.659523176176366]
								}, {
									"case":	181,
									"scores":	[-4.659523176176366]
								}, {
									"case":	182,
									"scores":	[-4.659523176176366]
								}, {
									"case":	183,
									"scores":	[-4.659523176176366]
								}, {
									"case":	184,
									"scores":	[-4.659523176176366]
								}, {
									"case":	185,
									"scores":	[-4.659523176176366]
								}, {
									"case":	186,
									"scores":	[-4.659523176176366]
								}, {
									"case":	187,
									"scores":	[-4.659523176176366]
								}, {
									"case":	188,
									"scores":	[-4.659523176176366]
								}, {
									"case":	189,
									"scores":	[-4.659523176176366]
								}, {
									"case":	190,
									"scores":	[-4.659523176176366]
								}, {
									"case":	191,
									"scores":	[-4.659523176176366]
								}, {
									"case":	192,
									"scores":	[-4.659523176176366]
								}, {
									"case":	193,
									"scores":	[-4.659523176176366]
								}, {
									"case":	194,
									"scores":	[-4.659523176176366]
								}, {
									"case":	195,
									"scores":	[-4.659523176176366]
								}, {
									"case":	196,
									"scores":	[-4.659523176176366]
								}, {
									"case":	197,
									"scores":	[-4.659523176176366]
								}, {
									"case":	198,
									"scores":	[-4.659523176176366]
								}, {
									"case":	199,
									"scores":	[-4.659523176176366]
								}, {
									"case":	200,
									"scores":	[-4.659523176176366]
								}, {
									"case":	201,
									"scores":	[-4.659523176176366]
								}, {
									"case":	202,
									"scores":	[-4.659523176176366]
								}, {
									"case":	203,
									"scores":	[-4.659523176176366]
								}, {
									"case":	204,
									"scores":	[-4.659523176176366]
								}, {
									"case":	205,
									"scores":	[-4.659523176176366]
								}, {
									"case":	206,
									"scores":	[-4.659523176176366]
								}, {
									"case":	207,
									"scores":	[-4.659523176176366]
								}, {
									"case":	208,
									"scores":	[-4.659523176176366]
								}, {
									"case":	209,
									"scores":	[-4.659523176176366]
								}, {
									"case":	210,
									"scores":	[-4.659523176176366]
								}, {
									"case":	211,
									"scores":	[-4.659523176176366]
								}, {
									"case":	212,
									"scores":	[-4.659523176176366]
								}, {
									"case":	213,
									"scores":	[-4.659523176176366]
								}, {
									"case":	214,
									"scores":	[-4.659523176176366]
								}, {
									"case":	215,
									"scores":	[-4.659523176176366]
								}, {
									"case":	216,
									"scores":	[-4.659523176176366]
								}, {
									"case":	217,
									"scores":	[-4.659523176176366]
								}]
						}]
				}, {
					"line":	1189,
					"switches":	[{
							"switch":	40,
							"types":	[[], [], [], [], [172, 173, 174], [], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	1190,
							"begin_column":	4,
							"end_line":	1190,
							"end_column":	4,
							"patch_codes":	["(suff)++", "(suff)--", "__printf__(\"%s %s\\n\", (suff), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (suff))", "bytes_in = (0)", "bytes_in = (2)", "bytes_out = (0)", "bytes_out = (2)", "env = (suff)", "exit_code = (0)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (2)", "foreground = (0)", "foreground = (2)", "free((suff))", "header_bytes = (0)", "header_bytes = (2)", "ifd = (0)", "ifd = (2)", "ifd = open_input_file((suff), &istat)", "ifile_size = (0)", "ifile_size = (2)", "inptr = (0)", "inptr = (2)", "last_member = (0)", "last_member = (2)", "list = (0)", "list = (2)", "method = (0)", "method = (2)", "no_name = (0)", "no_name = (2)", "no_time = (0)", "no_time = (2)", "ofd = (0)", "ofd = (2)", "part_nb = (0)", "part_nb = (2)", "perror((suff))", "progerror((suff))", "program_name = (suff)", "quiet = (0)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (2)", "save_orig_name = (0)", "save_orig_name = (2)", "strcat(ifname, (suff))", "strcat(ofname, (suff))", "strcpy((suff) - 4, \".tgz\")", "strcpy((suff), \".tar\")", "strcpy((suff), z_suffix)", "strcpy(ifname, (suff))", "strlwr((suff))", "suff = (suff)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (2)", "total_in = (0)", "total_in = (2)", "total_out = (0)", "total_out = (2)", "treat_dir(ifd, (suff))", "verbose = (0)", "verbose = (2)", "z_len = (0)", "z_len = (2)", "z_len = strlen((suff))", "z_suffix = (suff)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "strcpy(suff, \".tar\")", "strlwr(suff)", "suff = get_suffix(ofname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1190\", 19, &(suff), sizeof (suff), &(force), sizeof (force), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    goto name_too_long;\n", "if (__is_neg(\"\", \"L1190\", 19, &(suff), sizeof (suff), &(force), sizeof (force), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 0;\n", "if (__is_neg(\"\", \"L1190\", 19, &(suff), sizeof (suff), &(force), sizeof (force), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.53830693227125]
								}, {
									"case":	2,
									"scores":	[-4.53830693227125]
								}, {
									"case":	3,
									"scores":	[-4.53830693227125]
								}, {
									"case":	4,
									"scores":	[-4.53830693227125]
								}, {
									"case":	5,
									"scores":	[-4.53830693227125]
								}, {
									"case":	6,
									"scores":	[-4.53830693227125]
								}, {
									"case":	7,
									"scores":	[-4.53830693227125]
								}, {
									"case":	8,
									"scores":	[-4.53830693227125]
								}, {
									"case":	9,
									"scores":	[-4.53830693227125]
								}, {
									"case":	10,
									"scores":	[-4.53830693227125]
								}, {
									"case":	11,
									"scores":	[-4.53830693227125]
								}, {
									"case":	12,
									"scores":	[-4.53830693227125]
								}, {
									"case":	13,
									"scores":	[-4.53830693227125]
								}, {
									"case":	14,
									"scores":	[-4.53830693227125]
								}, {
									"case":	15,
									"scores":	[-4.53830693227125]
								}, {
									"case":	16,
									"scores":	[-4.53830693227125]
								}, {
									"case":	17,
									"scores":	[-4.53830693227125]
								}, {
									"case":	18,
									"scores":	[-4.53830693227125]
								}, {
									"case":	19,
									"scores":	[-4.53830693227125]
								}, {
									"case":	20,
									"scores":	[-4.53830693227125]
								}, {
									"case":	21,
									"scores":	[-4.53830693227125]
								}, {
									"case":	22,
									"scores":	[-4.53830693227125]
								}, {
									"case":	23,
									"scores":	[-4.53830693227125]
								}, {
									"case":	24,
									"scores":	[-4.53830693227125]
								}, {
									"case":	25,
									"scores":	[-4.53830693227125]
								}, {
									"case":	26,
									"scores":	[-4.53830693227125]
								}, {
									"case":	27,
									"scores":	[-4.53830693227125]
								}, {
									"case":	28,
									"scores":	[-4.53830693227125]
								}, {
									"case":	29,
									"scores":	[-4.53830693227125]
								}, {
									"case":	30,
									"scores":	[-4.53830693227125]
								}, {
									"case":	31,
									"scores":	[-4.53830693227125]
								}, {
									"case":	32,
									"scores":	[-4.53830693227125]
								}, {
									"case":	33,
									"scores":	[-4.53830693227125]
								}, {
									"case":	34,
									"scores":	[-4.53830693227125]
								}, {
									"case":	35,
									"scores":	[-4.53830693227125]
								}, {
									"case":	36,
									"scores":	[-4.53830693227125]
								}, {
									"case":	37,
									"scores":	[-4.53830693227125]
								}, {
									"case":	38,
									"scores":	[-4.53830693227125]
								}, {
									"case":	39,
									"scores":	[-4.53830693227125]
								}, {
									"case":	40,
									"scores":	[-4.53830693227125]
								}, {
									"case":	41,
									"scores":	[-4.53830693227125]
								}, {
									"case":	42,
									"scores":	[-4.53830693227125]
								}, {
									"case":	43,
									"scores":	[-4.53830693227125]
								}, {
									"case":	44,
									"scores":	[-4.53830693227125]
								}, {
									"case":	45,
									"scores":	[-4.53830693227125]
								}, {
									"case":	46,
									"scores":	[-4.53830693227125]
								}, {
									"case":	47,
									"scores":	[-4.53830693227125]
								}, {
									"case":	48,
									"scores":	[-4.53830693227125]
								}, {
									"case":	49,
									"scores":	[-4.53830693227125]
								}, {
									"case":	50,
									"scores":	[-4.53830693227125]
								}, {
									"case":	51,
									"scores":	[-4.53830693227125]
								}, {
									"case":	52,
									"scores":	[-4.53830693227125]
								}, {
									"case":	53,
									"scores":	[-4.53830693227125]
								}, {
									"case":	54,
									"scores":	[-4.53830693227125]
								}, {
									"case":	55,
									"scores":	[-4.53830693227125]
								}, {
									"case":	56,
									"scores":	[-4.53830693227125]
								}, {
									"case":	57,
									"scores":	[-4.53830693227125]
								}, {
									"case":	58,
									"scores":	[-4.53830693227125]
								}, {
									"case":	59,
									"scores":	[-4.53830693227125]
								}, {
									"case":	60,
									"scores":	[-4.53830693227125]
								}, {
									"case":	61,
									"scores":	[-4.53830693227125]
								}, {
									"case":	62,
									"scores":	[-4.53830693227125]
								}, {
									"case":	63,
									"scores":	[-4.53830693227125]
								}, {
									"case":	64,
									"scores":	[-4.53830693227125]
								}, {
									"case":	65,
									"scores":	[-4.53830693227125]
								}, {
									"case":	66,
									"scores":	[-4.53830693227125]
								}, {
									"case":	67,
									"scores":	[-4.53830693227125]
								}, {
									"case":	68,
									"scores":	[-4.53830693227125]
								}, {
									"case":	69,
									"scores":	[-4.53830693227125]
								}, {
									"case":	70,
									"scores":	[-4.53830693227125]
								}, {
									"case":	71,
									"scores":	[-4.53830693227125]
								}, {
									"case":	72,
									"scores":	[-4.53830693227125]
								}, {
									"case":	73,
									"scores":	[-4.53830693227125]
								}, {
									"case":	74,
									"scores":	[-4.53830693227125]
								}, {
									"case":	75,
									"scores":	[-4.53830693227125]
								}, {
									"case":	76,
									"scores":	[-4.53830693227125]
								}, {
									"case":	77,
									"scores":	[-4.53830693227125]
								}, {
									"case":	78,
									"scores":	[-4.53830693227125]
								}, {
									"case":	79,
									"scores":	[-4.53830693227125]
								}, {
									"case":	80,
									"scores":	[-4.53830693227125]
								}, {
									"case":	81,
									"scores":	[-4.53830693227125]
								}, {
									"case":	82,
									"scores":	[-4.53830693227125]
								}, {
									"case":	83,
									"scores":	[-4.53830693227125]
								}, {
									"case":	84,
									"scores":	[-4.53830693227125]
								}, {
									"case":	85,
									"scores":	[-4.53830693227125]
								}, {
									"case":	86,
									"scores":	[-4.53830693227125]
								}, {
									"case":	87,
									"scores":	[-4.53830693227125]
								}, {
									"case":	88,
									"scores":	[-4.53830693227125]
								}, {
									"case":	89,
									"scores":	[-4.53830693227125]
								}, {
									"case":	90,
									"scores":	[-4.53830693227125]
								}, {
									"case":	91,
									"scores":	[-4.53830693227125]
								}, {
									"case":	92,
									"scores":	[-4.53830693227125]
								}, {
									"case":	93,
									"scores":	[-4.53830693227125]
								}, {
									"case":	94,
									"scores":	[-4.53830693227125]
								}, {
									"case":	95,
									"scores":	[-4.53830693227125]
								}, {
									"case":	96,
									"scores":	[-4.53830693227125]
								}, {
									"case":	97,
									"scores":	[-4.53830693227125]
								}, {
									"case":	98,
									"scores":	[-4.53830693227125]
								}, {
									"case":	99,
									"scores":	[-4.53830693227125]
								}, {
									"case":	100,
									"scores":	[-4.53830693227125]
								}, {
									"case":	101,
									"scores":	[-4.53830693227125]
								}, {
									"case":	102,
									"scores":	[-4.53830693227125]
								}, {
									"case":	103,
									"scores":	[-4.53830693227125]
								}, {
									"case":	104,
									"scores":	[-4.53830693227125]
								}, {
									"case":	105,
									"scores":	[-4.53830693227125]
								}, {
									"case":	106,
									"scores":	[-4.53830693227125]
								}, {
									"case":	107,
									"scores":	[-4.53830693227125]
								}, {
									"case":	108,
									"scores":	[-4.53830693227125]
								}, {
									"case":	109,
									"scores":	[-4.53830693227125]
								}, {
									"case":	110,
									"scores":	[-4.53830693227125]
								}, {
									"case":	111,
									"scores":	[-4.53830693227125]
								}, {
									"case":	112,
									"scores":	[-4.53830693227125]
								}, {
									"case":	113,
									"scores":	[-4.53830693227125]
								}, {
									"case":	114,
									"scores":	[-4.53830693227125]
								}, {
									"case":	115,
									"scores":	[-4.53830693227125]
								}, {
									"case":	116,
									"scores":	[-4.53830693227125]
								}, {
									"case":	117,
									"scores":	[-4.53830693227125]
								}, {
									"case":	118,
									"scores":	[-4.53830693227125]
								}, {
									"case":	119,
									"scores":	[-4.53830693227125]
								}, {
									"case":	120,
									"scores":	[-4.53830693227125]
								}, {
									"case":	121,
									"scores":	[-4.53830693227125]
								}, {
									"case":	122,
									"scores":	[-4.53830693227125]
								}, {
									"case":	123,
									"scores":	[-4.53830693227125]
								}, {
									"case":	124,
									"scores":	[-4.53830693227125]
								}, {
									"case":	125,
									"scores":	[-4.53830693227125]
								}, {
									"case":	126,
									"scores":	[-4.53830693227125]
								}, {
									"case":	127,
									"scores":	[-4.53830693227125]
								}, {
									"case":	128,
									"scores":	[-4.53830693227125]
								}, {
									"case":	129,
									"scores":	[-4.53830693227125]
								}, {
									"case":	130,
									"scores":	[-4.53830693227125]
								}, {
									"case":	131,
									"scores":	[-4.53830693227125]
								}, {
									"case":	132,
									"scores":	[-4.53830693227125]
								}, {
									"case":	133,
									"scores":	[-4.53830693227125]
								}, {
									"case":	134,
									"scores":	[-4.53830693227125]
								}, {
									"case":	135,
									"scores":	[-4.53830693227125]
								}, {
									"case":	136,
									"scores":	[-4.53830693227125]
								}, {
									"case":	137,
									"scores":	[-4.53830693227125]
								}, {
									"case":	138,
									"scores":	[-4.53830693227125]
								}, {
									"case":	139,
									"scores":	[-4.53830693227125]
								}, {
									"case":	140,
									"scores":	[-4.53830693227125]
								}, {
									"case":	141,
									"scores":	[-4.53830693227125]
								}, {
									"case":	142,
									"scores":	[-4.53830693227125]
								}, {
									"case":	143,
									"scores":	[-4.53830693227125]
								}, {
									"case":	144,
									"scores":	[-4.53830693227125]
								}, {
									"case":	145,
									"scores":	[-4.53830693227125]
								}, {
									"case":	146,
									"scores":	[-4.53830693227125]
								}, {
									"case":	147,
									"scores":	[-4.53830693227125]
								}, {
									"case":	148,
									"scores":	[-4.53830693227125]
								}, {
									"case":	149,
									"scores":	[-4.53830693227125]
								}, {
									"case":	150,
									"scores":	[-4.53830693227125]
								}, {
									"case":	151,
									"scores":	[-4.53830693227125]
								}, {
									"case":	152,
									"scores":	[-4.53830693227125]
								}, {
									"case":	153,
									"scores":	[-4.53830693227125]
								}, {
									"case":	154,
									"scores":	[-4.53830693227125]
								}, {
									"case":	155,
									"scores":	[-4.53830693227125]
								}, {
									"case":	156,
									"scores":	[-4.53830693227125]
								}, {
									"case":	157,
									"scores":	[-4.53830693227125]
								}, {
									"case":	158,
									"scores":	[-4.53830693227125]
								}, {
									"case":	159,
									"scores":	[-4.53830693227125]
								}, {
									"case":	160,
									"scores":	[-4.53830693227125]
								}, {
									"case":	161,
									"scores":	[-4.53830693227125]
								}, {
									"case":	162,
									"scores":	[-4.53830693227125]
								}, {
									"case":	163,
									"scores":	[-4.53830693227125]
								}, {
									"case":	164,
									"scores":	[-4.53830693227125]
								}, {
									"case":	165,
									"scores":	[-4.53830693227125]
								}, {
									"case":	166,
									"scores":	[-4.53830693227125]
								}, {
									"case":	167,
									"scores":	[-4.53830693227125]
								}, {
									"case":	168,
									"scores":	[-4.53830693227125]
								}, {
									"case":	169,
									"scores":	[-4.53830693227125]
								}, {
									"case":	170,
									"scores":	[-4.53830693227125]
								}, {
									"case":	171,
									"scores":	[-4.53830693227125]
								}, {
									"case":	172,
									"scores":	[-4.29445773727125, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.2847103353712486, -6.2847103353712486, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -6.1952876353712485, -5.7391766353712486, -6.2847103353712486]
								}, {
									"case":	173,
									"scores":	[-4.39536593727125, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.38561853537125, -6.38561853537125, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -6.2961958353712486, -5.84008483537125, -6.38561853537125]
								}, {
									"case":	174,
									"scores":	[-6.65814773727125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.64840033537125, -8.64840033537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.55897763537125, -8.10286663537125, -8.64840033537125]
								}]
						}, {
							"switch":	41,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1190,
							"begin_column":	6,
							"end_line":	1190,
							"end_column":	14,
							"patch_codes":	["if (!__is_neg(\"\", \"L1190\", 19, &(suff), sizeof (suff), &(force), sizeof (force), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    *suff = '\\x00';\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.43860490527125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -6.1387682322712482, -6.1387682322712482, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.70180323227125, -5.45787636227125, -6.1387682322712482]
								}, {
									"case":	2,
									"scores":	[-4.53830693227125]
								}]
						}]
				}, {
					"line":	1186,
					"switches":	[{
							"switch":	38,
							"types":	[[], [], [], [], [172, 173, 174], [], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	1187,
							"begin_column":	0,
							"end_line":	1187,
							"end_column":	0,
							"patch_codes":	["(suff)++", "(suff)--", "__printf__(\"%s %s\\n\", (suff), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (suff))", "bytes_in = (0)", "bytes_in = (2)", "bytes_out = (0)", "bytes_out = (2)", "env = (suff)", "exit_code = (0)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (2)", "foreground = (0)", "foreground = (2)", "free((suff))", "header_bytes = (0)", "header_bytes = (2)", "ifd = (0)", "ifd = (2)", "ifd = open_input_file((suff), &istat)", "ifile_size = (0)", "ifile_size = (2)", "inptr = (0)", "inptr = (2)", "last_member = (0)", "last_member = (2)", "list = (0)", "list = (2)", "method = (0)", "method = (2)", "no_name = (0)", "no_name = (2)", "no_time = (0)", "no_time = (2)", "ofd = (0)", "ofd = (2)", "part_nb = (0)", "part_nb = (2)", "perror((suff))", "progerror((suff))", "program_name = (suff)", "quiet = (0)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (2)", "save_orig_name = (0)", "save_orig_name = (2)", "strcat(ifname, (suff))", "strcat(ofname, (suff))", "strcpy((suff) - 4, \".tgz\")", "strcpy((suff), \".tar\")", "strcpy((suff), z_suffix)", "strcpy(ifname, (suff))", "strlwr((suff))", "suff = (suff)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (2)", "total_in = (0)", "total_in = (2)", "total_out = (0)", "total_out = (2)", "treat_dir(ifd, (suff))", "verbose = (0)", "verbose = (2)", "z_len = (0)", "z_len = (2)", "z_len = strlen((suff))", "z_suffix = (suff)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "strcpy(suff, \".tar\")", "strlwr(suff)", "suff = get_suffix(ofname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    goto name_too_long;\n", "if (__is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 0;\n", "if (__is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	2,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	3,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	4,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	5,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	6,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	7,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	8,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	9,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	10,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	11,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	12,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	13,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	14,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	15,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	16,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	17,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	18,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	19,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	20,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	21,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	22,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	23,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	24,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	25,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	26,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	27,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	28,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	29,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	30,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	31,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	32,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	33,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	34,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	35,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	36,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	37,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	38,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	39,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	40,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	41,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	42,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	43,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	44,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	45,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	46,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	47,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	48,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	49,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	50,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	51,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	52,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	53,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	54,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	55,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	56,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	57,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	58,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	59,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	60,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	61,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	62,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	63,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	64,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	65,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	66,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	67,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	68,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	69,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	70,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	71,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	72,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	73,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	74,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	75,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	76,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	77,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	78,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	79,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	80,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	81,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	82,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	83,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	84,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	85,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	86,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	87,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	88,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	89,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	90,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	91,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	92,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	93,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	94,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	95,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	96,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	97,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	98,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	99,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	100,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	101,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	102,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	103,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	104,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	105,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	106,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	107,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	108,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	109,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	110,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	111,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	112,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	113,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	114,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	115,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	116,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	117,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	118,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	119,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	120,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	121,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	122,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	123,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	124,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	125,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	126,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	127,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	128,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	129,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	130,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	131,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	132,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	133,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	134,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	135,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	136,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	137,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	138,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	139,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	140,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	141,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	142,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	143,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	144,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	145,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	146,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	147,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	148,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	149,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	150,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	151,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	152,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	153,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	154,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	155,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	156,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	157,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	158,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	159,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	160,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	161,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	162,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	163,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	164,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	165,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	166,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	167,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	168,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	169,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	170,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	171,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	172,
									"scores":	[-6.0011436217588461, -8.989875741658846, -7.1717091501588461, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.989875741658846, -7.1717091501588461, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.7098900719588457, -8.2537790719588457, -8.7993127719588458]
								}, {
									"case":	173,
									"scores":	[-6.1020518217588462, -9.0907839416588452, -7.2726173501588462, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -9.0907839416588452, -7.2726173501588462, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -8.8107982719588449, -8.354687271958845, -8.900220971958845]
								}, {
									"case":	174,
									"scores":	[-8.3648336217588461, -11.353565741658846, -9.5353991501588471, -11.073580071958846, -11.073580071958846, -11.073580071958846, -11.353565741658846, -9.5353991501588471, -11.073580071958846, -11.073580071958846, -11.073580071958846, -11.073580071958846, -11.073580071958846, -11.073580071958846, -11.073580071958846, -11.073580071958846, -11.073580071958846, -10.617469071958846, -11.163002771958846]
								}]
						}, {
							"switch":	39,
							"types":	[[61], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [], [3]],
							"begin_line":	1187,
							"begin_column":	2,
							"end_line":	1191,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if (((strcmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) || __is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((__asprintf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((__printf__((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((asprintf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((execl((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((execle((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((execlp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((execv((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((execvp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((fprintf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((fputs((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((fputs_unlocked((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((getdate_r((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((link((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((lstat((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((lstat64((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((obstack_printf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((printf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((rename((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((rpl_fprintf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((sprintf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((stat((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((stat64((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcasecmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (__asprintf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (__printf__((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (asprintf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (execl((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (execle((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (execlp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (execv((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (execvp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (fprintf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (fputs((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (fputs_unlocked((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (getdate_r((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (link((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (lstat((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (lstat64((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (obstack_printf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (printf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (rename((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (rpl_fprintf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (sprintf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (stat((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (stat64((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (strcasecmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (strcoll((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (strverscmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (symlink((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (utimens((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcmp((suff), (\".tgz\")) == 0) || (vprintf((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strcoll((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((strverscmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((symlink((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((utimens((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if ((vprintf((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n", "if (((strcmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) && !__is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.574954599828145, -2.9387340508281454, -2.9356173541281461, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.9387340508281454, -2.9356173541281461, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.5138417311281458, -2.2699148611281457, -2.9508067311281461]
								}, {
									"case":	2,
									"scores":	[-2.6269852151281459, -4.9907646661281451, -4.9876479694281457, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.9907646661281451, -4.9876479694281457, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.3219454764281462, -5.0028373464281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-2.6269852151281459, -4.9907646661281451, -4.9876479694281457, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.9907646661281451, -4.9876479694281457, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.5658723464281454, -4.3219454764281462, -5.0028373464281461]
								}]
						}, {
							"switch":	42,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1187,
							"begin_column":	2,
							"end_line":	1191,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)))\n    if ((strcmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n        strcpy(suff, \".tar\");\n    } else {\n        *suff = '\\x00';\n    }\n", "if (!__is_neg(\"\", \"L1187\", 19, &(suff), sizeof (suff), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(force), sizeof (force), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(verbose), sizeof (verbose), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix)) && ((strcmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0))) {\n    strcpy(suff, \".tar\");\n} else {\n    *suff = '\\x00';\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8140566375588465, -7.1778360885588466, -7.1747193918588463, -6.752943768858847, -6.752943768858847, -6.752943768858847, -7.1778360885588466, -7.1747193918588463, -6.752943768858847, -6.752943768858847, -6.752943768858847, -6.752943768858847, -6.752943768858847, -6.752943768858847, -6.752943768858847, -6.752943768858847, -6.752943768858847, -6.5090168988588459, -7.1899087688588459]
								}, {
									"case":	2,
									"scores":	[-4.0224951785588461, -6.3862746295588462, -6.3831579328588459, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -6.3862746295588462, -6.3831579328588459, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -5.9613823098588457, -5.7174554398588455, -6.3983473098588464]
								}]
						}]
				}, {
					"line":	1170,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [], [], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	1171,
							"begin_column":	3,
							"end_line":	1171,
							"end_column":	3,
							"patch_codes":	["(suff)++", "(suff)--", "__printf__(\"%s %s\\n\", (suff), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", (suff))", "bytes_in = (0)", "bytes_in = (2)", "bytes_out = (0)", "bytes_out = (2)", "env = (suff)", "exit_code = (0)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (2)", "foreground = (0)", "foreground = (2)", "free((suff))", "header_bytes = (0)", "header_bytes = (2)", "ifd = (0)", "ifd = (2)", "ifd = open_input_file((suff), &istat)", "ifile_size = (0)", "ifile_size = (2)", "inptr = (0)", "inptr = (2)", "last_member = (0)", "last_member = (2)", "list = (0)", "list = (2)", "method = (0)", "method = (2)", "no_name = (0)", "no_name = (2)", "no_time = (0)", "no_time = (2)", "ofd = (0)", "ofd = (2)", "part_nb = (0)", "part_nb = (2)", "perror((suff))", "progerror((suff))", "program_name = (suff)", "quiet = (0)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (2)", "save_orig_name = (0)", "save_orig_name = (2)", "strcat(ifname, (suff))", "strcat(ofname, (suff))", "strcpy((suff) - 4, \".tgz\")", "strcpy((suff), \".tar\")", "strcpy((suff), z_suffix)", "strcpy(ifname, (suff))", "strlwr((suff))", "suff = (suff)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (2)", "total_in = (0)", "total_in = (2)", "total_out = (0)", "total_out = (2)", "treat_dir(ifd, (suff))", "verbose = (0)", "verbose = (2)", "z_len = (0)", "z_len = (2)", "z_len = strlen((suff))", "z_suffix = (suff)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "strcpy(suff, \".tar\")", "strlwr(suff)", "suff = get_suffix(ofname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\""],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	2,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	3,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	4,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	5,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	6,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	7,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	8,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	9,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	10,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	11,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	12,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	13,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	14,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	15,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	16,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	17,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	18,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	19,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	20,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	21,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	22,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	23,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	24,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	25,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	26,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	27,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	28,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	29,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	30,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	31,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	32,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	33,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	34,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	35,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	36,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	37,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	38,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	39,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	40,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	41,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	42,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	43,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	44,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	45,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	46,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	47,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	48,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	49,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	50,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	51,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	52,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	53,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	54,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	55,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	56,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	57,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	58,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	59,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	60,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	61,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	62,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	63,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	64,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	65,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	66,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	67,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	68,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	69,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	70,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	71,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	72,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	73,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	74,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	75,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	76,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	77,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	78,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	79,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	80,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	81,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	82,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	83,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	84,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	85,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	86,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	87,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	88,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	89,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	90,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	91,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	92,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	93,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	94,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	95,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	96,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	97,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	98,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	99,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	100,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	101,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	102,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	103,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	104,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	105,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	106,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	107,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	108,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	109,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	110,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	111,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	112,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	113,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	114,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	115,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	116,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	117,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	118,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	119,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	120,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	121,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	122,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	123,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	124,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	125,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	126,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	127,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	128,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	129,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	130,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	131,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	132,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	133,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	134,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	135,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	136,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	137,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	138,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	139,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	140,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	141,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	142,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	143,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	144,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	145,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	146,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	147,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	148,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	149,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	150,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	151,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	152,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	153,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	154,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	155,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	156,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	157,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	158,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	159,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	160,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	161,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	162,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	163,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	164,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	165,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	166,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	167,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	168,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	169,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	170,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	171,
									"scores":	[-4.6797258834938855]
								}]
						}, {
							"switch":	32,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1171,
							"begin_column":	5,
							"end_line":	1232,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1171\", 19, &(decompress), sizeof (decompress), &(suff), sizeof (suff), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    if (suff == ((void *)0)) {\n        if (!recursive && (list || test))\n            return 0;\n        if (verbose || (!recursive && !quiet)) {\n            {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"%s: %s: unknown suffix -- ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n        }\n        return 2;\n    }\n    strlwr(suff);\n    if ((strcmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n        strcpy(suff, \".tar\");\n    } else {\n        *suff = '\\x00';\n    }\n} else if (suff && !force) {\n    if (verbose || (!recursive && !quiet)) {\n        rpl_fprintf(stderr, \"%s: %s already has %s suffix -- unchanged\\n\", program_name, ifname, suff);\n    }\n    return 2;\n} else {\n    save_orig_name = 0;\n    if (sizeof ofname <= strlen(ofname) + z_len)\n        goto name_too_long;\n    strcat(ofname, z_suffix);\n}\n", "if ((decompress) && !__is_neg(\"\", \"L1171\", 19, &(decompress), sizeof (decompress), &(suff), sizeof (suff), &(test), sizeof (test), &(recursive), sizeof (recursive), &(list), sizeof (list), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(save_orig_name), sizeof (save_orig_name), &(save_orig_name), sizeof (save_orig_name), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix))) {\n    if (suff == ((void *)0)) {\n        if (!recursive && (list || test))\n            return 0;\n        if (verbose || (!recursive && !quiet)) {\n            {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"%s: %s: unknown suffix -- ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n        }\n        return 2;\n    }\n    strlwr(suff);\n    if ((strcmp((suff), (\".tgz\")) == 0) || (strcmp((suff), (\".taz\")) == 0)) {\n        strcpy(suff, \".tar\");\n    } else {\n        *suff = '\\x00';\n    }\n} else if (suff && !force) {\n    if (verbose || (!recursive && !quiet)) {\n        rpl_fprintf(stderr, \"%s: %s already has %s suffix -- unchanged\\n\", program_name, ifname, suff);\n    }\n    return 2;\n} else {\n    save_orig_name = 0;\n    if (sizeof ofname <= strlen(ofname) + z_len)\n        goto name_too_long;\n    strcat(ofname, z_suffix);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8130455326281467, -1.9545437526281466, -6.8130455326281467, -6.8130455326281467, -6.8130455326281467, -6.8130455326281467, -6.8130455326281467, -6.8130455326281467, -6.8130455326281467, -6.8130455326281467, -6.6755651326281455, -6.3626893096281449, -6.6755651326281455, -6.3626893096281449, -6.8130455326281467, -7.7212740056281426, -7.7212740056281426, -5.7883436626281446, -6.5852669326281443]
								}, {
									"case":	2,
									"scores":	[-5.4015965054281461, -0.54309472542814641, -5.4015965054281461, -5.4015965054281461, -5.4015965054281461, -5.4015965054281461, -5.4015965054281461, -5.4015965054281461, -5.4015965054281461, -5.4015965054281461, -5.2641161054281458, -4.9512402824281452, -5.2641161054281458, -4.9512402824281452, -5.4015965054281461, -6.3098249784281464, -6.3098249784281464, -4.3768946354281457, -5.1738179054281463]
								}]
						}]
				}, {
					"line":	1404,
					"switches":	[{
							"switch":	52,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1405,
							"begin_column":	10,
							"end_line":	1405,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.215063615190938]
								}, {
									"case":	2,
									"scores":	[-4.215063615190938]
								}, {
									"case":	3,
									"scores":	[-4.215063615190938]
								}, {
									"case":	4,
									"scores":	[-4.215063615190938]
								}, {
									"case":	5,
									"scores":	[-4.215063615190938]
								}, {
									"case":	6,
									"scores":	[-4.215063615190938]
								}, {
									"case":	7,
									"scores":	[-4.215063615190938]
								}, {
									"case":	8,
									"scores":	[-4.215063615190938]
								}, {
									"case":	9,
									"scores":	[-4.215063615190938]
								}, {
									"case":	10,
									"scores":	[-4.215063615190938]
								}, {
									"case":	11,
									"scores":	[-4.215063615190938]
								}, {
									"case":	12,
									"scores":	[-4.215063615190938]
								}, {
									"case":	13,
									"scores":	[-4.215063615190938]
								}, {
									"case":	14,
									"scores":	[-4.215063615190938]
								}, {
									"case":	15,
									"scores":	[-4.215063615190938]
								}, {
									"case":	16,
									"scores":	[-4.215063615190938]
								}, {
									"case":	17,
									"scores":	[-4.215063615190938]
								}, {
									"case":	18,
									"scores":	[-4.215063615190938]
								}, {
									"case":	19,
									"scores":	[-4.215063615190938]
								}, {
									"case":	20,
									"scores":	[-4.215063615190938]
								}, {
									"case":	21,
									"scores":	[-4.215063615190938]
								}, {
									"case":	22,
									"scores":	[-4.215063615190938]
								}, {
									"case":	23,
									"scores":	[-4.215063615190938]
								}, {
									"case":	24,
									"scores":	[-4.215063615190938]
								}, {
									"case":	25,
									"scores":	[-4.215063615190938]
								}, {
									"case":	26,
									"scores":	[-4.215063615190938]
								}, {
									"case":	27,
									"scores":	[-4.215063615190938]
								}, {
									"case":	28,
									"scores":	[-4.215063615190938]
								}, {
									"case":	29,
									"scores":	[-4.215063615190938]
								}, {
									"case":	30,
									"scores":	[-4.215063615190938]
								}, {
									"case":	31,
									"scores":	[-4.215063615190938]
								}, {
									"case":	32,
									"scores":	[-4.215063615190938]
								}, {
									"case":	33,
									"scores":	[-4.215063615190938]
								}, {
									"case":	34,
									"scores":	[-4.215063615190938]
								}, {
									"case":	35,
									"scores":	[-4.215063615190938]
								}, {
									"case":	36,
									"scores":	[-4.215063615190938]
								}, {
									"case":	37,
									"scores":	[-4.215063615190938]
								}, {
									"case":	38,
									"scores":	[-4.215063615190938]
								}, {
									"case":	39,
									"scores":	[-4.215063615190938]
								}, {
									"case":	40,
									"scores":	[-4.215063615190938]
								}, {
									"case":	41,
									"scores":	[-4.215063615190938]
								}, {
									"case":	42,
									"scores":	[-4.215063615190938]
								}, {
									"case":	43,
									"scores":	[-4.215063615190938]
								}, {
									"case":	44,
									"scores":	[-4.215063615190938]
								}, {
									"case":	45,
									"scores":	[-4.215063615190938]
								}, {
									"case":	46,
									"scores":	[-4.215063615190938]
								}, {
									"case":	47,
									"scores":	[-4.215063615190938]
								}, {
									"case":	48,
									"scores":	[-4.215063615190938]
								}, {
									"case":	49,
									"scores":	[-4.215063615190938]
								}, {
									"case":	50,
									"scores":	[-4.215063615190938]
								}, {
									"case":	51,
									"scores":	[-4.215063615190938]
								}, {
									"case":	52,
									"scores":	[-4.215063615190938]
								}, {
									"case":	53,
									"scores":	[-4.215063615190938]
								}, {
									"case":	54,
									"scores":	[-4.215063615190938]
								}, {
									"case":	55,
									"scores":	[-4.215063615190938]
								}, {
									"case":	56,
									"scores":	[-4.215063615190938]
								}, {
									"case":	57,
									"scores":	[-4.215063615190938]
								}, {
									"case":	58,
									"scores":	[-4.215063615190938]
								}, {
									"case":	59,
									"scores":	[-4.215063615190938]
								}, {
									"case":	60,
									"scores":	[-4.215063615190938]
								}, {
									"case":	61,
									"scores":	[-4.215063615190938]
								}, {
									"case":	62,
									"scores":	[-4.215063615190938]
								}, {
									"case":	63,
									"scores":	[-4.215063615190938]
								}, {
									"case":	64,
									"scores":	[-4.215063615190938]
								}, {
									"case":	65,
									"scores":	[-4.215063615190938]
								}, {
									"case":	66,
									"scores":	[-4.215063615190938]
								}, {
									"case":	67,
									"scores":	[-4.215063615190938]
								}, {
									"case":	68,
									"scores":	[-4.215063615190938]
								}, {
									"case":	69,
									"scores":	[-4.215063615190938]
								}, {
									"case":	70,
									"scores":	[-4.215063615190938]
								}, {
									"case":	71,
									"scores":	[-4.215063615190938]
								}, {
									"case":	72,
									"scores":	[-4.215063615190938]
								}, {
									"case":	73,
									"scores":	[-4.215063615190938]
								}, {
									"case":	74,
									"scores":	[-4.215063615190938]
								}, {
									"case":	75,
									"scores":	[-4.215063615190938]
								}, {
									"case":	76,
									"scores":	[-4.215063615190938]
								}, {
									"case":	77,
									"scores":	[-4.215063615190938]
								}, {
									"case":	78,
									"scores":	[-4.215063615190938]
								}, {
									"case":	79,
									"scores":	[-4.215063615190938]
								}, {
									"case":	80,
									"scores":	[-4.215063615190938]
								}, {
									"case":	81,
									"scores":	[-4.215063615190938]
								}, {
									"case":	82,
									"scores":	[-4.215063615190938]
								}, {
									"case":	83,
									"scores":	[-4.215063615190938]
								}, {
									"case":	84,
									"scores":	[-4.215063615190938]
								}, {
									"case":	85,
									"scores":	[-4.215063615190938]
								}, {
									"case":	86,
									"scores":	[-4.215063615190938]
								}, {
									"case":	87,
									"scores":	[-4.215063615190938]
								}, {
									"case":	88,
									"scores":	[-4.215063615190938]
								}, {
									"case":	89,
									"scores":	[-4.215063615190938]
								}, {
									"case":	90,
									"scores":	[-4.215063615190938]
								}, {
									"case":	91,
									"scores":	[-4.215063615190938]
								}, {
									"case":	92,
									"scores":	[-4.215063615190938]
								}, {
									"case":	93,
									"scores":	[-4.215063615190938]
								}, {
									"case":	94,
									"scores":	[-4.215063615190938]
								}, {
									"case":	95,
									"scores":	[-4.215063615190938]
								}, {
									"case":	96,
									"scores":	[-4.215063615190938]
								}, {
									"case":	97,
									"scores":	[-4.215063615190938]
								}, {
									"case":	98,
									"scores":	[-4.215063615190938]
								}, {
									"case":	99,
									"scores":	[-4.215063615190938]
								}, {
									"case":	100,
									"scores":	[-4.215063615190938]
								}, {
									"case":	101,
									"scores":	[-4.215063615190938]
								}, {
									"case":	102,
									"scores":	[-4.215063615190938]
								}, {
									"case":	103,
									"scores":	[-4.215063615190938]
								}, {
									"case":	104,
									"scores":	[-4.215063615190938]
								}, {
									"case":	105,
									"scores":	[-4.215063615190938]
								}, {
									"case":	106,
									"scores":	[-4.215063615190938]
								}, {
									"case":	107,
									"scores":	[-4.215063615190938]
								}, {
									"case":	108,
									"scores":	[-4.215063615190938]
								}, {
									"case":	109,
									"scores":	[-4.215063615190938]
								}, {
									"case":	110,
									"scores":	[-4.215063615190938]
								}, {
									"case":	111,
									"scores":	[-4.215063615190938]
								}, {
									"case":	112,
									"scores":	[-4.215063615190938]
								}, {
									"case":	113,
									"scores":	[-4.215063615190938]
								}, {
									"case":	114,
									"scores":	[-4.215063615190938]
								}, {
									"case":	115,
									"scores":	[-4.215063615190938]
								}, {
									"case":	116,
									"scores":	[-4.215063615190938]
								}, {
									"case":	117,
									"scores":	[-4.215063615190938]
								}, {
									"case":	118,
									"scores":	[-4.215063615190938]
								}, {
									"case":	119,
									"scores":	[-4.215063615190938]
								}, {
									"case":	120,
									"scores":	[-4.215063615190938]
								}, {
									"case":	121,
									"scores":	[-4.215063615190938]
								}, {
									"case":	122,
									"scores":	[-4.215063615190938]
								}, {
									"case":	123,
									"scores":	[-4.215063615190938]
								}, {
									"case":	124,
									"scores":	[-4.215063615190938]
								}, {
									"case":	125,
									"scores":	[-4.215063615190938]
								}, {
									"case":	126,
									"scores":	[-4.215063615190938]
								}, {
									"case":	127,
									"scores":	[-4.215063615190938]
								}, {
									"case":	128,
									"scores":	[-4.215063615190938]
								}, {
									"case":	129,
									"scores":	[-4.215063615190938]
								}, {
									"case":	130,
									"scores":	[-4.215063615190938]
								}, {
									"case":	131,
									"scores":	[-4.215063615190938]
								}, {
									"case":	132,
									"scores":	[-4.215063615190938]
								}, {
									"case":	133,
									"scores":	[-4.215063615190938]
								}, {
									"case":	134,
									"scores":	[-4.215063615190938]
								}, {
									"case":	135,
									"scores":	[-4.215063615190938]
								}, {
									"case":	136,
									"scores":	[-4.215063615190938]
								}, {
									"case":	137,
									"scores":	[-4.215063615190938]
								}, {
									"case":	138,
									"scores":	[-4.215063615190938]
								}, {
									"case":	139,
									"scores":	[-4.215063615190938]
								}, {
									"case":	140,
									"scores":	[-4.215063615190938]
								}, {
									"case":	141,
									"scores":	[-4.215063615190938]
								}, {
									"case":	142,
									"scores":	[-4.215063615190938]
								}, {
									"case":	143,
									"scores":	[-4.215063615190938]
								}, {
									"case":	144,
									"scores":	[-4.215063615190938]
								}, {
									"case":	145,
									"scores":	[-4.215063615190938]
								}, {
									"case":	146,
									"scores":	[-4.215063615190938]
								}, {
									"case":	147,
									"scores":	[-4.215063615190938]
								}, {
									"case":	148,
									"scores":	[-4.215063615190938]
								}, {
									"case":	149,
									"scores":	[-4.215063615190938]
								}, {
									"case":	150,
									"scores":	[-4.215063615190938]
								}, {
									"case":	151,
									"scores":	[-4.215063615190938]
								}, {
									"case":	152,
									"scores":	[-4.215063615190938]
								}, {
									"case":	153,
									"scores":	[-4.215063615190938]
								}, {
									"case":	154,
									"scores":	[-4.215063615190938]
								}, {
									"case":	155,
									"scores":	[-4.215063615190938]
								}, {
									"case":	156,
									"scores":	[-4.215063615190938]
								}, {
									"case":	157,
									"scores":	[-4.215063615190938]
								}, {
									"case":	158,
									"scores":	[-4.215063615190938]
								}, {
									"case":	159,
									"scores":	[-4.215063615190938]
								}, {
									"case":	160,
									"scores":	[-4.215063615190938]
								}, {
									"case":	161,
									"scores":	[-4.215063615190938]
								}, {
									"case":	162,
									"scores":	[-4.215063615190938]
								}, {
									"case":	163,
									"scores":	[-4.215063615190938]
								}, {
									"case":	164,
									"scores":	[-4.215063615190938]
								}, {
									"case":	165,
									"scores":	[-4.215063615190938]
								}, {
									"case":	166,
									"scores":	[-4.215063615190938]
								}, {
									"case":	167,
									"scores":	[-4.215063615190938]
								}, {
									"case":	168,
									"scores":	[-4.215063615190938]
								}, {
									"case":	169,
									"scores":	[-4.215063615190938]
								}, {
									"case":	170,
									"scores":	[-4.215063615190938]
								}, {
									"case":	171,
									"scores":	[-4.215063615190938]
								}, {
									"case":	172,
									"scores":	[-4.215063615190938]
								}, {
									"case":	173,
									"scores":	[-4.215063615190938]
								}, {
									"case":	174,
									"scores":	[-4.215063615190938]
								}, {
									"case":	175,
									"scores":	[-4.215063615190938]
								}, {
									"case":	176,
									"scores":	[-4.215063615190938]
								}, {
									"case":	177,
									"scores":	[-4.215063615190938]
								}, {
									"case":	178,
									"scores":	[-4.215063615190938]
								}, {
									"case":	179,
									"scores":	[-4.215063615190938]
								}, {
									"case":	180,
									"scores":	[-4.215063615190938]
								}, {
									"case":	181,
									"scores":	[-4.215063615190938]
								}, {
									"case":	182,
									"scores":	[-4.215063615190938]
								}, {
									"case":	183,
									"scores":	[-4.215063615190938]
								}, {
									"case":	184,
									"scores":	[-4.215063615190938]
								}, {
									"case":	185,
									"scores":	[-4.215063615190938]
								}, {
									"case":	186,
									"scores":	[-4.215063615190938]
								}, {
									"case":	187,
									"scores":	[-4.215063615190938]
								}, {
									"case":	188,
									"scores":	[-4.215063615190938]
								}, {
									"case":	189,
									"scores":	[-4.215063615190938]
								}, {
									"case":	190,
									"scores":	[-4.215063615190938]
								}, {
									"case":	191,
									"scores":	[-4.215063615190938]
								}, {
									"case":	192,
									"scores":	[-4.215063615190938]
								}, {
									"case":	193,
									"scores":	[-4.215063615190938]
								}, {
									"case":	194,
									"scores":	[-4.215063615190938]
								}, {
									"case":	195,
									"scores":	[-4.215063615190938]
								}, {
									"case":	196,
									"scores":	[-4.215063615190938]
								}, {
									"case":	197,
									"scores":	[-4.215063615190938]
								}, {
									"case":	198,
									"scores":	[-4.215063615190938]
								}, {
									"case":	199,
									"scores":	[-4.215063615190938]
								}, {
									"case":	200,
									"scores":	[-4.215063615190938]
								}, {
									"case":	201,
									"scores":	[-4.215063615190938]
								}, {
									"case":	202,
									"scores":	[-4.215063615190938]
								}, {
									"case":	203,
									"scores":	[-4.215063615190938]
								}, {
									"case":	204,
									"scores":	[-4.215063615190938]
								}, {
									"case":	205,
									"scores":	[-4.215063615190938]
								}, {
									"case":	206,
									"scores":	[-4.215063615190938]
								}, {
									"case":	207,
									"scores":	[-4.215063615190938]
								}, {
									"case":	208,
									"scores":	[-4.215063615190938]
								}, {
									"case":	209,
									"scores":	[-4.215063615190938]
								}, {
									"case":	210,
									"scores":	[-4.215063615190938]
								}, {
									"case":	211,
									"scores":	[-4.215063615190938]
								}, {
									"case":	212,
									"scores":	[-4.215063615190938]
								}, {
									"case":	213,
									"scores":	[-4.215063615190938]
								}, {
									"case":	214,
									"scores":	[-4.215063615190938]
								}, {
									"case":	215,
									"scores":	[-4.215063615190938]
								}, {
									"case":	216,
									"scores":	[-4.215063615190938]
								}, {
									"case":	217,
									"scores":	[-4.215063615190938]
								}, {
									"case":	218,
									"scores":	[-4.215063615190938]
								}, {
									"case":	219,
									"scores":	[-4.215063615190938]
								}, {
									"case":	220,
									"scores":	[-4.215063615190938]
								}, {
									"case":	221,
									"scores":	[-4.215063615190938]
								}, {
									"case":	222,
									"scores":	[-4.215063615190938]
								}, {
									"case":	223,
									"scores":	[-4.215063615190938]
								}, {
									"case":	224,
									"scores":	[-4.215063615190938]
								}, {
									"case":	225,
									"scores":	[-4.215063615190938]
								}, {
									"case":	226,
									"scores":	[-4.215063615190938]
								}, {
									"case":	227,
									"scores":	[-4.215063615190938]
								}, {
									"case":	228,
									"scores":	[-4.215063615190938]
								}, {
									"case":	229,
									"scores":	[-4.215063615190938]
								}, {
									"case":	230,
									"scores":	[-4.215063615190938]
								}, {
									"case":	231,
									"scores":	[-4.215063615190938]
								}, {
									"case":	232,
									"scores":	[-4.215063615190938]
								}, {
									"case":	233,
									"scores":	[-4.215063615190938]
								}, {
									"case":	234,
									"scores":	[-4.215063615190938]
								}, {
									"case":	235,
									"scores":	[-4.215063615190938]
								}, {
									"case":	236,
									"scores":	[-4.215063615190938]
								}, {
									"case":	237,
									"scores":	[-4.215063615190938]
								}, {
									"case":	238,
									"scores":	[-4.215063615190938]
								}, {
									"case":	239,
									"scores":	[-4.215063615190938]
								}, {
									"case":	240,
									"scores":	[-4.215063615190938]
								}, {
									"case":	241,
									"scores":	[-4.215063615190938]
								}, {
									"case":	242,
									"scores":	[-4.215063615190938]
								}, {
									"case":	243,
									"scores":	[-4.215063615190938]
								}, {
									"case":	244,
									"scores":	[-4.215063615190938]
								}, {
									"case":	245,
									"scores":	[-4.215063615190938]
								}, {
									"case":	246,
									"scores":	[-4.215063615190938]
								}, {
									"case":	247,
									"scores":	[-4.215063615190938]
								}, {
									"case":	248,
									"scores":	[-4.215063615190938]
								}, {
									"case":	249,
									"scores":	[-4.215063615190938]
								}, {
									"case":	250,
									"scores":	[-4.215063615190938]
								}, {
									"case":	251,
									"scores":	[-4.215063615190938]
								}, {
									"case":	252,
									"scores":	[-4.215063615190938]
								}, {
									"case":	253,
									"scores":	[-4.215063615190938]
								}, {
									"case":	254,
									"scores":	[-4.215063615190938]
								}, {
									"case":	255,
									"scores":	[-4.215063615190938]
								}, {
									"case":	256,
									"scores":	[-4.215063615190938]
								}, {
									"case":	257,
									"scores":	[-4.215063615190938]
								}, {
									"case":	258,
									"scores":	[-4.215063615190938]
								}, {
									"case":	259,
									"scores":	[-4.215063615190938]
								}, {
									"case":	260,
									"scores":	[-4.215063615190938]
								}, {
									"case":	261,
									"scores":	[-4.215063615190938]
								}, {
									"case":	262,
									"scores":	[-4.215063615190938]
								}, {
									"case":	263,
									"scores":	[-4.215063615190938]
								}, {
									"case":	264,
									"scores":	[-4.215063615190938]
								}, {
									"case":	265,
									"scores":	[-4.215063615190938]
								}, {
									"case":	266,
									"scores":	[-4.215063615190938]
								}, {
									"case":	267,
									"scores":	[-4.215063615190938]
								}, {
									"case":	268,
									"scores":	[-4.215063615190938]
								}, {
									"case":	269,
									"scores":	[-4.215063615190938]
								}, {
									"case":	270,
									"scores":	[-4.215063615190938]
								}, {
									"case":	271,
									"scores":	[-4.215063615190938]
								}, {
									"case":	272,
									"scores":	[-4.215063615190938]
								}, {
									"case":	273,
									"scores":	[-4.215063615190938]
								}, {
									"case":	274,
									"scores":	[-4.215063615190938]
								}, {
									"case":	275,
									"scores":	[-4.215063615190938]
								}, {
									"case":	276,
									"scores":	[-4.215063615190938]
								}, {
									"case":	277,
									"scores":	[-4.215063615190938]
								}, {
									"case":	278,
									"scores":	[-4.215063615190938]
								}, {
									"case":	279,
									"scores":	[-4.215063615190938]
								}, {
									"case":	280,
									"scores":	[-4.215063615190938]
								}, {
									"case":	281,
									"scores":	[-4.215063615190938]
								}, {
									"case":	282,
									"scores":	[-4.215063615190938]
								}, {
									"case":	283,
									"scores":	[-4.215063615190938]
								}, {
									"case":	284,
									"scores":	[-4.215063615190938]
								}, {
									"case":	285,
									"scores":	[-4.215063615190938]
								}, {
									"case":	286,
									"scores":	[-4.215063615190938]
								}, {
									"case":	287,
									"scores":	[-4.215063615190938]
								}, {
									"case":	288,
									"scores":	[-4.215063615190938]
								}, {
									"case":	289,
									"scores":	[-4.215063615190938]
								}, {
									"case":	290,
									"scores":	[-4.215063615190938]
								}, {
									"case":	291,
									"scores":	[-4.215063615190938]
								}, {
									"case":	292,
									"scores":	[-4.215063615190938]
								}, {
									"case":	293,
									"scores":	[-4.215063615190938]
								}, {
									"case":	294,
									"scores":	[-4.215063615190938]
								}, {
									"case":	295,
									"scores":	[-4.215063615190938]
								}, {
									"case":	296,
									"scores":	[-4.215063615190938]
								}, {
									"case":	297,
									"scores":	[-4.215063615190938]
								}, {
									"case":	298,
									"scores":	[-4.215063615190938]
								}, {
									"case":	299,
									"scores":	[-4.215063615190938]
								}, {
									"case":	300,
									"scores":	[-4.215063615190938]
								}, {
									"case":	301,
									"scores":	[-4.215063615190938]
								}, {
									"case":	302,
									"scores":	[-4.215063615190938]
								}, {
									"case":	303,
									"scores":	[-4.215063615190938]
								}, {
									"case":	304,
									"scores":	[-4.215063615190938]
								}, {
									"case":	305,
									"scores":	[-4.215063615190938]
								}, {
									"case":	306,
									"scores":	[-4.215063615190938]
								}, {
									"case":	307,
									"scores":	[-4.215063615190938]
								}, {
									"case":	308,
									"scores":	[-4.215063615190938]
								}, {
									"case":	309,
									"scores":	[-4.215063615190938]
								}, {
									"case":	310,
									"scores":	[-4.215063615190938]
								}, {
									"case":	311,
									"scores":	[-4.215063615190938]
								}, {
									"case":	312,
									"scores":	[-4.215063615190938]
								}, {
									"case":	313,
									"scores":	[-4.215063615190938]
								}, {
									"case":	314,
									"scores":	[-4.215063615190938]
								}, {
									"case":	315,
									"scores":	[-4.215063615190938]
								}, {
									"case":	316,
									"scores":	[-4.215063615190938]
								}, {
									"case":	317,
									"scores":	[-4.215063615190938]
								}, {
									"case":	318,
									"scores":	[-4.215063615190938]
								}, {
									"case":	319,
									"scores":	[-4.215063615190938]
								}, {
									"case":	320,
									"scores":	[-4.215063615190938]
								}, {
									"case":	321,
									"scores":	[-4.215063615190938]
								}, {
									"case":	322,
									"scores":	[-4.215063615190938]
								}, {
									"case":	323,
									"scores":	[-4.215063615190938]
								}, {
									"case":	324,
									"scores":	[-4.215063615190938]
								}, {
									"case":	325,
									"scores":	[-4.215063615190938]
								}, {
									"case":	326,
									"scores":	[-4.215063615190938]
								}, {
									"case":	327,
									"scores":	[-4.215063615190938]
								}, {
									"case":	328,
									"scores":	[-4.215063615190938]
								}, {
									"case":	329,
									"scores":	[-4.215063615190938]
								}, {
									"case":	330,
									"scores":	[-4.215063615190938]
								}, {
									"case":	331,
									"scores":	[-4.215063615190938]
								}, {
									"case":	332,
									"scores":	[-4.215063615190938]
								}, {
									"case":	333,
									"scores":	[-4.215063615190938]
								}, {
									"case":	334,
									"scores":	[-4.215063615190938]
								}, {
									"case":	335,
									"scores":	[-4.215063615190938]
								}, {
									"case":	336,
									"scores":	[-4.215063615190938]
								}, {
									"case":	337,
									"scores":	[-4.215063615190938]
								}, {
									"case":	338,
									"scores":	[-4.215063615190938]
								}, {
									"case":	339,
									"scores":	[-4.215063615190938]
								}, {
									"case":	340,
									"scores":	[-4.215063615190938]
								}, {
									"case":	341,
									"scores":	[-4.215063615190938]
								}, {
									"case":	342,
									"scores":	[-4.215063615190938]
								}, {
									"case":	343,
									"scores":	[-4.215063615190938]
								}, {
									"case":	344,
									"scores":	[-4.215063615190938]
								}, {
									"case":	345,
									"scores":	[-4.215063615190938]
								}, {
									"case":	346,
									"scores":	[-4.215063615190938]
								}, {
									"case":	347,
									"scores":	[-4.215063615190938]
								}, {
									"case":	348,
									"scores":	[-4.215063615190938]
								}, {
									"case":	349,
									"scores":	[-4.215063615190938]
								}, {
									"case":	350,
									"scores":	[-4.215063615190938]
								}, {
									"case":	351,
									"scores":	[-4.215063615190938]
								}, {
									"case":	352,
									"scores":	[-4.215063615190938]
								}, {
									"case":	353,
									"scores":	[-4.215063615190938]
								}, {
									"case":	354,
									"scores":	[-4.215063615190938]
								}, {
									"case":	355,
									"scores":	[-4.215063615190938]
								}, {
									"case":	356,
									"scores":	[-4.215063615190938]
								}, {
									"case":	357,
									"scores":	[-4.215063615190938]
								}, {
									"case":	358,
									"scores":	[-4.215063615190938]
								}, {
									"case":	359,
									"scores":	[-4.215063615190938]
								}, {
									"case":	360,
									"scores":	[-4.215063615190938]
								}, {
									"case":	361,
									"scores":	[-4.215063615190938]
								}, {
									"case":	362,
									"scores":	[-4.215063615190938]
								}, {
									"case":	363,
									"scores":	[-4.215063615190938]
								}, {
									"case":	364,
									"scores":	[-4.215063615190938]
								}, {
									"case":	365,
									"scores":	[-4.215063615190938]
								}, {
									"case":	366,
									"scores":	[-4.215063615190938]
								}, {
									"case":	367,
									"scores":	[-4.215063615190938]
								}, {
									"case":	368,
									"scores":	[-4.215063615190938]
								}, {
									"case":	369,
									"scores":	[-4.215063615190938]
								}, {
									"case":	370,
									"scores":	[-4.215063615190938]
								}, {
									"case":	371,
									"scores":	[-4.215063615190938]
								}, {
									"case":	372,
									"scores":	[-4.215063615190938]
								}, {
									"case":	373,
									"scores":	[-4.215063615190938]
								}, {
									"case":	374,
									"scores":	[-4.215063615190938]
								}, {
									"case":	375,
									"scores":	[-4.215063615190938]
								}, {
									"case":	376,
									"scores":	[-4.215063615190938]
								}, {
									"case":	377,
									"scores":	[-4.215063615190938]
								}, {
									"case":	378,
									"scores":	[-4.215063615190938]
								}, {
									"case":	379,
									"scores":	[-4.215063615190938]
								}, {
									"case":	380,
									"scores":	[-4.215063615190938]
								}, {
									"case":	381,
									"scores":	[-4.215063615190938]
								}, {
									"case":	382,
									"scores":	[-4.215063615190938]
								}, {
									"case":	383,
									"scores":	[-4.215063615190938]
								}, {
									"case":	384,
									"scores":	[-4.215063615190938]
								}, {
									"case":	385,
									"scores":	[-4.215063615190938]
								}, {
									"case":	386,
									"scores":	[-4.215063615190938]
								}, {
									"case":	387,
									"scores":	[-4.215063615190938]
								}, {
									"case":	388,
									"scores":	[-4.215063615190938]
								}, {
									"case":	389,
									"scores":	[-4.215063615190938]
								}, {
									"case":	390,
									"scores":	[-4.215063615190938]
								}, {
									"case":	391,
									"scores":	[-4.215063615190938]
								}, {
									"case":	392,
									"scores":	[-4.215063615190938]
								}, {
									"case":	393,
									"scores":	[-4.215063615190938]
								}, {
									"case":	394,
									"scores":	[-4.215063615190938]
								}, {
									"case":	395,
									"scores":	[-4.215063615190938]
								}, {
									"case":	396,
									"scores":	[-4.215063615190938]
								}, {
									"case":	397,
									"scores":	[-4.215063615190938]
								}, {
									"case":	398,
									"scores":	[-4.215063615190938]
								}, {
									"case":	399,
									"scores":	[-4.215063615190938]
								}, {
									"case":	400,
									"scores":	[-4.215063615190938]
								}, {
									"case":	401,
									"scores":	[-4.215063615190938]
								}, {
									"case":	402,
									"scores":	[-4.215063615190938]
								}, {
									"case":	403,
									"scores":	[-4.215063615190938]
								}, {
									"case":	404,
									"scores":	[-4.215063615190938]
								}, {
									"case":	405,
									"scores":	[-4.215063615190938]
								}, {
									"case":	406,
									"scores":	[-4.215063615190938]
								}, {
									"case":	407,
									"scores":	[-4.215063615190938]
								}, {
									"case":	408,
									"scores":	[-4.215063615190938]
								}, {
									"case":	409,
									"scores":	[-4.215063615190938]
								}, {
									"case":	410,
									"scores":	[-4.215063615190938]
								}, {
									"case":	411,
									"scores":	[-4.215063615190938]
								}, {
									"case":	412,
									"scores":	[-4.215063615190938]
								}, {
									"case":	413,
									"scores":	[-4.215063615190938]
								}, {
									"case":	414,
									"scores":	[-4.215063615190938]
								}, {
									"case":	415,
									"scores":	[-4.215063615190938]
								}, {
									"case":	416,
									"scores":	[-4.215063615190938]
								}, {
									"case":	417,
									"scores":	[-4.215063615190938]
								}, {
									"case":	418,
									"scores":	[-4.215063615190938]
								}, {
									"case":	419,
									"scores":	[-4.215063615190938]
								}, {
									"case":	420,
									"scores":	[-4.215063615190938]
								}, {
									"case":	421,
									"scores":	[-4.215063615190938]
								}, {
									"case":	422,
									"scores":	[-4.215063615190938]
								}, {
									"case":	423,
									"scores":	[-4.215063615190938]
								}, {
									"case":	424,
									"scores":	[-4.215063615190938]
								}, {
									"case":	425,
									"scores":	[-4.215063615190938]
								}, {
									"case":	426,
									"scores":	[-4.215063615190938]
								}, {
									"case":	427,
									"scores":	[-4.215063615190938]
								}, {
									"case":	428,
									"scores":	[-4.215063615190938]
								}, {
									"case":	429,
									"scores":	[-4.215063615190938]
								}, {
									"case":	430,
									"scores":	[-4.215063615190938]
								}, {
									"case":	431,
									"scores":	[-4.215063615190938]
								}, {
									"case":	432,
									"scores":	[-4.215063615190938]
								}, {
									"case":	433,
									"scores":	[-4.215063615190938]
								}, {
									"case":	434,
									"scores":	[-4.215063615190938]
								}, {
									"case":	435,
									"scores":	[-4.215063615190938]
								}, {
									"case":	436,
									"scores":	[-4.215063615190938]
								}, {
									"case":	437,
									"scores":	[-4.215063615190938]
								}, {
									"case":	438,
									"scores":	[-4.215063615190938]
								}, {
									"case":	439,
									"scores":	[-4.215063615190938]
								}, {
									"case":	440,
									"scores":	[-4.215063615190938]
								}, {
									"case":	441,
									"scores":	[-4.215063615190938]
								}, {
									"case":	442,
									"scores":	[-4.215063615190938]
								}, {
									"case":	443,
									"scores":	[-4.215063615190938]
								}, {
									"case":	444,
									"scores":	[-4.215063615190938]
								}, {
									"case":	445,
									"scores":	[-4.215063615190938]
								}, {
									"case":	446,
									"scores":	[-4.215063615190938]
								}, {
									"case":	447,
									"scores":	[-4.215063615190938]
								}, {
									"case":	448,
									"scores":	[-4.215063615190938]
								}, {
									"case":	449,
									"scores":	[-4.215063615190938]
								}, {
									"case":	450,
									"scores":	[-4.215063615190938]
								}, {
									"case":	451,
									"scores":	[-4.215063615190938]
								}, {
									"case":	452,
									"scores":	[-4.215063615190938]
								}, {
									"case":	453,
									"scores":	[-4.215063615190938]
								}, {
									"case":	454,
									"scores":	[-4.215063615190938]
								}, {
									"case":	455,
									"scores":	[-4.215063615190938]
								}, {
									"case":	456,
									"scores":	[-4.215063615190938]
								}, {
									"case":	457,
									"scores":	[-4.215063615190938]
								}, {
									"case":	458,
									"scores":	[-4.215063615190938]
								}, {
									"case":	459,
									"scores":	[-4.215063615190938]
								}, {
									"case":	460,
									"scores":	[-4.215063615190938]
								}, {
									"case":	461,
									"scores":	[-4.215063615190938]
								}, {
									"case":	462,
									"scores":	[-4.215063615190938]
								}, {
									"case":	463,
									"scores":	[-4.215063615190938]
								}, {
									"case":	464,
									"scores":	[-4.215063615190938]
								}, {
									"case":	465,
									"scores":	[-4.215063615190938]
								}, {
									"case":	466,
									"scores":	[-4.215063615190938]
								}, {
									"case":	467,
									"scores":	[-4.215063615190938]
								}, {
									"case":	468,
									"scores":	[-4.215063615190938]
								}, {
									"case":	469,
									"scores":	[-4.215063615190938]
								}, {
									"case":	470,
									"scores":	[-4.215063615190938]
								}, {
									"case":	471,
									"scores":	[-4.215063615190938]
								}, {
									"case":	472,
									"scores":	[-4.215063615190938]
								}, {
									"case":	473,
									"scores":	[-4.215063615190938]
								}, {
									"case":	474,
									"scores":	[-4.215063615190938]
								}, {
									"case":	475,
									"scores":	[-4.215063615190938]
								}, {
									"case":	476,
									"scores":	[-4.215063615190938]
								}, {
									"case":	477,
									"scores":	[-4.215063615190938]
								}, {
									"case":	478,
									"scores":	[-4.215063615190938]
								}, {
									"case":	479,
									"scores":	[-4.215063615190938]
								}, {
									"case":	480,
									"scores":	[-4.215063615190938]
								}, {
									"case":	481,
									"scores":	[-4.215063615190938]
								}, {
									"case":	482,
									"scores":	[-4.215063615190938]
								}, {
									"case":	483,
									"scores":	[-4.215063615190938]
								}, {
									"case":	484,
									"scores":	[-4.215063615190938]
								}, {
									"case":	485,
									"scores":	[-4.215063615190938]
								}, {
									"case":	486,
									"scores":	[-4.215063615190938]
								}, {
									"case":	487,
									"scores":	[-4.215063615190938]
								}, {
									"case":	488,
									"scores":	[-4.215063615190938]
								}, {
									"case":	489,
									"scores":	[-4.215063615190938]
								}, {
									"case":	490,
									"scores":	[-4.215063615190938]
								}, {
									"case":	491,
									"scores":	[-4.215063615190938]
								}, {
									"case":	492,
									"scores":	[-4.215063615190938]
								}, {
									"case":	493,
									"scores":	[-4.215063615190938]
								}, {
									"case":	494,
									"scores":	[-4.215063615190938]
								}, {
									"case":	495,
									"scores":	[-4.215063615190938]
								}, {
									"case":	496,
									"scores":	[-4.215063615190938]
								}, {
									"case":	497,
									"scores":	[-4.215063615190938]
								}, {
									"case":	498,
									"scores":	[-4.215063615190938]
								}, {
									"case":	499,
									"scores":	[-4.215063615190938]
								}, {
									"case":	500,
									"scores":	[-4.215063615190938]
								}, {
									"case":	501,
									"scores":	[-4.215063615190938]
								}, {
									"case":	502,
									"scores":	[-4.215063615190938]
								}, {
									"case":	503,
									"scores":	[-4.215063615190938]
								}, {
									"case":	504,
									"scores":	[-4.215063615190938]
								}, {
									"case":	505,
									"scores":	[-4.215063615190938]
								}, {
									"case":	506,
									"scores":	[-4.215063615190938]
								}, {
									"case":	507,
									"scores":	[-4.215063615190938]
								}, {
									"case":	508,
									"scores":	[-4.215063615190938]
								}, {
									"case":	509,
									"scores":	[-4.215063615190938]
								}, {
									"case":	510,
									"scores":	[-4.215063615190938]
								}, {
									"case":	511,
									"scores":	[-4.215063615190938]
								}, {
									"case":	512,
									"scores":	[-4.215063615190938]
								}, {
									"case":	513,
									"scores":	[-4.215063615190938]
								}, {
									"case":	514,
									"scores":	[-4.215063615190938]
								}, {
									"case":	515,
									"scores":	[-4.215063615190938]
								}, {
									"case":	516,
									"scores":	[-4.215063615190938]
								}, {
									"case":	517,
									"scores":	[-4.215063615190938]
								}, {
									"case":	518,
									"scores":	[-4.215063615190938]
								}, {
									"case":	519,
									"scores":	[-4.215063615190938]
								}, {
									"case":	520,
									"scores":	[-4.215063615190938]
								}, {
									"case":	521,
									"scores":	[-4.215063615190938]
								}, {
									"case":	522,
									"scores":	[-4.215063615190938]
								}, {
									"case":	523,
									"scores":	[-4.215063615190938]
								}, {
									"case":	524,
									"scores":	[-4.215063615190938]
								}, {
									"case":	525,
									"scores":	[-4.215063615190938]
								}, {
									"case":	526,
									"scores":	[-4.215063615190938]
								}, {
									"case":	527,
									"scores":	[-4.215063615190938]
								}, {
									"case":	528,
									"scores":	[-4.215063615190938]
								}, {
									"case":	529,
									"scores":	[-4.215063615190938]
								}, {
									"case":	530,
									"scores":	[-4.215063615190938]
								}, {
									"case":	531,
									"scores":	[-4.215063615190938]
								}, {
									"case":	532,
									"scores":	[-4.215063615190938]
								}, {
									"case":	533,
									"scores":	[-4.215063615190938]
								}, {
									"case":	534,
									"scores":	[-4.215063615190938]
								}, {
									"case":	535,
									"scores":	[-4.215063615190938]
								}, {
									"case":	536,
									"scores":	[-4.215063615190938]
								}, {
									"case":	537,
									"scores":	[-4.215063615190938]
								}, {
									"case":	538,
									"scores":	[-4.215063615190938]
								}, {
									"case":	539,
									"scores":	[-4.215063615190938]
								}, {
									"case":	540,
									"scores":	[-4.215063615190938]
								}, {
									"case":	541,
									"scores":	[-4.215063615190938]
								}, {
									"case":	542,
									"scores":	[-4.215063615190938]
								}, {
									"case":	543,
									"scores":	[-4.215063615190938]
								}, {
									"case":	544,
									"scores":	[-4.215063615190938]
								}, {
									"case":	545,
									"scores":	[-6.9637432182909382, -6.9637432182909382, -6.9637432182909382, -6.9637432182909382, -7.2721657509909372, -7.2721657509909372, -7.1185071029909377, -6.6854719454909377, -7.2721657509909372, -7.2721657509909372, -6.9637432182909382, -7.0531659182909383, -7.0531659182909383, -6.9637432182909382, -6.9637432182909382, -6.4707886151909371, -6.9637432182909382, -6.9637432182909382, -6.648051455190938, -6.9637432182909382, -6.9637432182909382, -6.9637432182909382, -6.9637432182909382, -6.9637432182909382, -6.4707886151909371, -6.9637432182909382, -6.4707886151909371, -6.9637432182909382]
								}, {
									"case":	546,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	547,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	548,
									"scores":	[-7.063651418290938, -7.063651418290938, -7.063651418290938, -7.063651418290938, -7.372073950990937, -7.372073950990937, -7.2184153029909375, -6.7853801454909375, -7.372073950990937, -7.372073950990937, -7.063651418290938, -7.1530741182909381, -7.1530741182909381, -7.063651418290938, -7.063651418290938, -6.5706968151909377, -7.063651418290938, -7.063651418290938, -6.7479596551909378, -7.063651418290938, -7.063651418290938, -7.063651418290938, -7.063651418290938, -7.063651418290938, -6.5706968151909377, -7.063651418290938, -6.5706968151909377, -7.063651418290938]
								}, {
									"case":	549,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	550,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	551,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	552,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	553,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	554,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	555,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	556,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}, {
									"case":	557,
									"scores":	[-9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.6348557509909369, -9.6348557509909369, -9.4811971029909365, -9.04816194549094, -9.6348557509909369, -9.6348557509909369, -9.3264332182909371, -9.4158559182909372, -9.4158559182909372, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -9.3264332182909371, -9.01074145519094, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -9.3264332182909371, -8.83347861519094, -9.3264332182909371, -8.83347861519094, -9.3264332182909371]
								}]
						}, {
							"switch":	53,
							"types":	[[7], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4, 5, 6]],
							"begin_line":	1405,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (((force && to_stdout) || __is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((force && to_stdout && !list) || __is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (force && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (force && to_stdout) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((force && to_stdout && !list) && !__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -6.7182935381281457, -6.7182935381281457, -6.5302207381281452, -5.8809577381281457, -6.7182935381281457, -6.7182935381281457, -5.8100650651281462, -6.2470300651281452, -6.2470300651281452, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.8100650651281462, -5.5934912651281454, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462]
								}, {
									"case":	2,
									"scores":	[-4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.9943627784281457, -4.9943627784281457, -4.8062899784281461, -4.1570269784281457, -4.9943627784281457, -4.9943627784281457, -4.0861343054281463, -4.5230993054281461, -4.5230993054281461, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -4.0861343054281463, -3.8695605054281459, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463]
								}, {
									"case":	3,
									"scores":	[-4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.9943627784281457, -4.9943627784281457, -4.8062899784281461, -4.1570269784281457, -4.9943627784281457, -4.9943627784281457, -4.0861343054281463, -4.5230993054281461, -4.5230993054281461, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -4.0861343054281463, -3.8695605054281459, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.9943627784281457, -4.9943627784281457, -4.8062899784281461, -4.1570269784281457, -4.9943627784281457, -4.9943627784281457, -4.0861343054281463, -4.5230993054281461, -4.5230993054281461, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -4.0861343054281463, -3.8695605054281459, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463]
								}]
						}, {
							"switch":	54,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1405,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1405\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8794179151909383, -5.8794179151909383, -5.8794179151909383, -5.8794179151909383, -6.7876463881909377, -6.7876463881909377, -6.5995735881909372, -5.9503105881909377, -6.7876463881909377, -6.7876463881909377, -5.8794179151909383, -6.3163829151909372, -6.3163829151909372, -5.8794179151909383, -5.8794179151909383, -5.3980626151909377, -5.8794179151909383, -5.8794179151909383, -5.6628441151909374, -5.8794179151909383, -5.8794179151909383, -5.8794179151909383, -5.8794179151909383, -5.8794179151909383, -5.3980626151909377, -5.8794179151909383, -5.3980626151909377, -5.8794179151909383]
								}]
						}]
				}, {
					"line":	1399,
					"switches":	[{
							"switch":	50,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1400,
							"begin_column":	10,
							"end_line":	1400,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	2,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	3,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	4,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	5,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	6,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	7,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	8,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	9,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	10,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	11,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	12,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	13,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	14,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	15,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	16,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	17,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	18,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	19,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	20,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	21,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	22,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	23,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	24,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	25,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	26,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	27,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	28,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	29,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	30,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	31,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	32,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	33,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	34,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	35,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	36,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	37,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	38,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	39,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	40,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	41,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	42,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	43,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	44,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	45,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	46,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	47,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	48,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	49,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	50,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	51,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	52,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	53,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	54,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	55,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	56,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	57,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	58,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	59,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	60,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	61,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	62,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	63,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	64,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	65,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	66,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	67,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	68,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	69,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	70,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	71,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	72,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	73,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	74,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	75,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	76,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	77,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	78,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	79,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	80,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	81,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	82,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	83,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	84,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	85,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	86,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	87,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	88,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	89,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	90,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	91,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	92,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	93,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	94,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	95,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	96,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	97,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	98,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	99,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	100,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	101,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	102,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	103,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	104,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	105,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	106,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	107,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	108,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	109,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	110,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	111,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	112,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	113,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	114,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	115,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	116,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	117,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	118,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	119,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	120,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	121,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	122,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	123,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	124,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	125,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	126,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	127,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	128,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	129,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	130,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	131,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	132,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	133,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	134,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	135,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	136,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	137,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	138,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	139,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	140,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	141,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	142,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	143,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	144,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	145,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	146,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	147,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	148,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	149,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	150,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	151,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	152,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	153,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	154,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	155,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	156,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	157,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	158,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	159,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	160,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	161,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	162,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	163,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	164,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	165,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	166,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	167,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	168,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	169,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	170,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	171,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	172,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	173,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	174,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	175,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	176,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	177,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	178,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	179,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	180,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	181,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	182,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	183,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	184,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	185,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	186,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	187,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	188,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	189,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	190,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	191,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	192,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	193,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	194,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	195,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	196,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	197,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	198,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	199,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	200,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	201,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	202,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	203,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	204,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	205,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	206,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	207,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	208,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	209,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	210,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	211,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	212,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	213,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	214,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	215,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	216,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	217,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	218,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	219,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	220,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	221,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	222,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	223,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	224,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	225,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	226,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	227,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	228,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	229,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	230,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	231,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	232,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	233,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	234,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	235,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	236,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	237,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	238,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	239,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	240,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	241,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	242,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	243,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	244,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	245,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	246,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	247,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	248,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	249,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	250,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	251,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	252,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	253,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	254,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	255,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	256,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	257,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	258,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	259,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	260,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	261,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	262,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	263,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	264,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	265,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	266,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	267,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	268,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	269,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	270,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	271,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	272,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	273,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	274,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	275,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	276,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	277,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	278,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	279,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	280,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	281,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	282,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	283,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	284,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	285,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	286,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	287,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	288,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	289,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	290,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	291,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	292,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	293,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	294,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	295,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	296,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	297,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	298,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	299,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	300,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	301,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	302,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	303,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	304,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	305,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	306,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	307,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	308,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	309,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	310,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	311,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	312,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	313,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	314,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	315,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	316,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	317,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	318,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	319,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	320,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	321,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	322,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	323,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	324,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	325,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	326,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	327,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	328,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	329,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	330,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	331,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	332,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	333,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	334,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	335,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	336,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	337,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	338,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	339,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	340,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	341,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	342,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	343,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	344,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	345,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	346,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	347,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	348,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	349,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	350,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	351,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	352,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	353,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	354,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	355,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	356,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	357,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	358,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	359,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	360,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	361,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	362,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	363,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	364,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	365,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	366,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	367,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	368,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	369,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	370,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	371,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	372,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	373,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	374,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	375,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	376,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	377,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	378,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	379,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	380,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	381,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	382,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	383,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	384,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	385,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	386,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	387,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	388,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	389,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	390,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	391,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	392,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	393,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	394,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	395,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	396,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	397,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	398,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	399,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	400,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	401,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	402,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	403,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	404,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	405,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	406,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	407,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	408,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	409,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	410,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	411,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	412,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	413,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	414,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	415,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	416,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	417,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	418,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	419,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	420,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	421,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	422,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	423,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	424,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	425,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	426,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	427,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	428,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	429,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	430,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	431,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	432,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	433,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	434,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	435,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	436,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	437,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	438,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	439,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	440,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	441,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	442,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	443,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	444,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	445,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	446,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	447,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	448,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	449,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	450,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	451,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	452,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	453,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	454,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	455,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	456,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	457,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	458,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	459,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	460,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	461,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	462,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	463,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	464,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	465,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	466,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	467,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	468,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	469,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	470,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	471,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	472,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	473,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	474,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	475,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	476,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	477,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	478,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	479,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	480,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	481,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	482,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	483,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	484,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	485,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	486,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	487,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	488,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	489,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	490,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	491,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	492,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	493,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	494,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	495,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	496,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	497,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	498,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	499,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	500,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	501,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	502,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	503,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	504,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	505,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	506,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	507,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	508,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	509,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	510,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	511,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	512,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	513,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	514,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	515,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	516,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	517,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	518,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	519,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	520,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	521,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	522,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	523,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	524,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	525,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	526,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	527,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	528,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	529,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	530,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	531,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	532,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	533,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	534,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	535,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	536,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	537,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	538,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	539,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	540,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	541,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	542,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	543,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	544,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	545,
									"scores":	[-6.7056746528084572, -7.2923684583084567, -7.2923684583084567, -7.1387098103084572, -6.9839459256084577, -6.9839459256084577, -6.9839459256084577, -6.9839459256084577, -7.2923684583084567, -7.2923684583084567, -6.6682541625084575, -6.9839459256084577, -7.0733686256084578, -7.0733686256084578, -6.9839459256084577, -6.9839459256084577, -6.4909913225084566, -6.9839459256084577, -6.9839459256084577, -6.9839459256084577, -6.9839459256084577, -6.9839459256084577, -6.4909913225084566, -6.9839459256084577, -6.9839459256084577, -6.9839459256084577, -6.4909913225084566, -6.9839459256084577]
								}, {
									"case":	546,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	547,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	548,
									"scores":	[-6.805582852808457, -7.3922766583084565, -7.3922766583084565, -7.238618010308457, -7.0838541256084575, -7.0838541256084575, -7.0838541256084575, -7.0838541256084575, -7.3922766583084565, -7.3922766583084565, -6.7681623625084573, -7.0838541256084575, -7.1732768256084576, -7.1732768256084576, -7.0838541256084575, -7.0838541256084575, -6.5908995225084572, -7.0838541256084575, -7.0838541256084575, -7.0838541256084575, -7.0838541256084575, -7.0838541256084575, -6.5908995225084572, -7.0838541256084575, -7.0838541256084575, -7.0838541256084575, -6.5908995225084572, -7.0838541256084575]
								}, {
									"case":	549,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	550,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	551,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	552,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	553,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	554,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	555,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	556,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}, {
									"case":	557,
									"scores":	[-9.06836465280846, -9.6550584583084564, -9.6550584583084564, -9.501399810308456, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.6550584583084564, -9.6550584583084564, -9.03094416250846, -9.3466359256084566, -9.4360586256084567, -9.4360586256084567, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566, -9.3466359256084566, -9.3466359256084566, -8.8536813225084572, -9.3466359256084566]
								}]
						}, {
							"switch":	51,
							"types":	[[7], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6], []],
							"begin_line":	1400,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\240\", 2) == 0) || __is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\240\", 2) == 0) && !__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8809577381281457, -6.7182935381281457, -6.7182935381281457, -6.5302207381281452, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -6.7182935381281457, -6.7182935381281457, -5.5934912651281454, -5.8100650651281462, -6.2470300651281452, -6.2470300651281452, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462]
								}, {
									"case":	2,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -4.3520597474281457, -3.2272574744281459, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -4.3520597474281457, -3.2272574744281459, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}]
						}, {
							"switch":	55,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1400,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1400\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"\\037\\240\", 2) == 0)) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9705132955084572, -6.8078490955084572, -6.8078490955084572, -6.6197762955084567, -5.8996206225084578, -5.8996206225084578, -5.8996206225084578, -5.8996206225084578, -6.8078490955084572, -6.8078490955084572, -5.6830468225084569, -5.8996206225084578, -6.3365856225084567, -6.3365856225084567, -5.8996206225084578, -5.8996206225084578, -5.4182653225084572, -5.8996206225084578, -5.8996206225084578, -5.8996206225084578, -5.8996206225084578, -5.8996206225084578, -5.4182653225084572, -5.8996206225084578, -5.8996206225084578, -5.8996206225084578, -5.4182653225084572, -5.8996206225084578]
								}, {
									"case":	2,
									"scores":	[-5.2176712645084571, -6.055007064508457, -6.055007064508457, -5.8669342645084566, -5.1467785915084567, -5.1467785915084567, -5.1467785915084567, -5.1467785915084567, -6.055007064508457, -6.055007064508457, -4.9302047915084568, -5.1467785915084567, -5.5837435915084566, -5.5837435915084566, -5.1467785915084567, -5.1467785915084567, -4.665423291508457, -5.1467785915084567, -5.1467785915084567, -5.1467785915084567, -5.1467785915084567, -5.1467785915084567, -4.665423291508457, -5.1467785915084567, -5.1467785915084567, -5.1467785915084567, -4.665423291508457, -5.1467785915084567]
								}]
						}]
				}, {
					"line":	1394,
					"switches":	[{
							"switch":	48,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1395,
							"begin_column":	10,
							"end_line":	1395,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.255469029825977]
								}, {
									"case":	2,
									"scores":	[-4.255469029825977]
								}, {
									"case":	3,
									"scores":	[-4.255469029825977]
								}, {
									"case":	4,
									"scores":	[-4.255469029825977]
								}, {
									"case":	5,
									"scores":	[-4.255469029825977]
								}, {
									"case":	6,
									"scores":	[-4.255469029825977]
								}, {
									"case":	7,
									"scores":	[-4.255469029825977]
								}, {
									"case":	8,
									"scores":	[-4.255469029825977]
								}, {
									"case":	9,
									"scores":	[-4.255469029825977]
								}, {
									"case":	10,
									"scores":	[-4.255469029825977]
								}, {
									"case":	11,
									"scores":	[-4.255469029825977]
								}, {
									"case":	12,
									"scores":	[-4.255469029825977]
								}, {
									"case":	13,
									"scores":	[-4.255469029825977]
								}, {
									"case":	14,
									"scores":	[-4.255469029825977]
								}, {
									"case":	15,
									"scores":	[-4.255469029825977]
								}, {
									"case":	16,
									"scores":	[-4.255469029825977]
								}, {
									"case":	17,
									"scores":	[-4.255469029825977]
								}, {
									"case":	18,
									"scores":	[-4.255469029825977]
								}, {
									"case":	19,
									"scores":	[-4.255469029825977]
								}, {
									"case":	20,
									"scores":	[-4.255469029825977]
								}, {
									"case":	21,
									"scores":	[-4.255469029825977]
								}, {
									"case":	22,
									"scores":	[-4.255469029825977]
								}, {
									"case":	23,
									"scores":	[-4.255469029825977]
								}, {
									"case":	24,
									"scores":	[-4.255469029825977]
								}, {
									"case":	25,
									"scores":	[-4.255469029825977]
								}, {
									"case":	26,
									"scores":	[-4.255469029825977]
								}, {
									"case":	27,
									"scores":	[-4.255469029825977]
								}, {
									"case":	28,
									"scores":	[-4.255469029825977]
								}, {
									"case":	29,
									"scores":	[-4.255469029825977]
								}, {
									"case":	30,
									"scores":	[-4.255469029825977]
								}, {
									"case":	31,
									"scores":	[-4.255469029825977]
								}, {
									"case":	32,
									"scores":	[-4.255469029825977]
								}, {
									"case":	33,
									"scores":	[-4.255469029825977]
								}, {
									"case":	34,
									"scores":	[-4.255469029825977]
								}, {
									"case":	35,
									"scores":	[-4.255469029825977]
								}, {
									"case":	36,
									"scores":	[-4.255469029825977]
								}, {
									"case":	37,
									"scores":	[-4.255469029825977]
								}, {
									"case":	38,
									"scores":	[-4.255469029825977]
								}, {
									"case":	39,
									"scores":	[-4.255469029825977]
								}, {
									"case":	40,
									"scores":	[-4.255469029825977]
								}, {
									"case":	41,
									"scores":	[-4.255469029825977]
								}, {
									"case":	42,
									"scores":	[-4.255469029825977]
								}, {
									"case":	43,
									"scores":	[-4.255469029825977]
								}, {
									"case":	44,
									"scores":	[-4.255469029825977]
								}, {
									"case":	45,
									"scores":	[-4.255469029825977]
								}, {
									"case":	46,
									"scores":	[-4.255469029825977]
								}, {
									"case":	47,
									"scores":	[-4.255469029825977]
								}, {
									"case":	48,
									"scores":	[-4.255469029825977]
								}, {
									"case":	49,
									"scores":	[-4.255469029825977]
								}, {
									"case":	50,
									"scores":	[-4.255469029825977]
								}, {
									"case":	51,
									"scores":	[-4.255469029825977]
								}, {
									"case":	52,
									"scores":	[-4.255469029825977]
								}, {
									"case":	53,
									"scores":	[-4.255469029825977]
								}, {
									"case":	54,
									"scores":	[-4.255469029825977]
								}, {
									"case":	55,
									"scores":	[-4.255469029825977]
								}, {
									"case":	56,
									"scores":	[-4.255469029825977]
								}, {
									"case":	57,
									"scores":	[-4.255469029825977]
								}, {
									"case":	58,
									"scores":	[-4.255469029825977]
								}, {
									"case":	59,
									"scores":	[-4.255469029825977]
								}, {
									"case":	60,
									"scores":	[-4.255469029825977]
								}, {
									"case":	61,
									"scores":	[-4.255469029825977]
								}, {
									"case":	62,
									"scores":	[-4.255469029825977]
								}, {
									"case":	63,
									"scores":	[-4.255469029825977]
								}, {
									"case":	64,
									"scores":	[-4.255469029825977]
								}, {
									"case":	65,
									"scores":	[-4.255469029825977]
								}, {
									"case":	66,
									"scores":	[-4.255469029825977]
								}, {
									"case":	67,
									"scores":	[-4.255469029825977]
								}, {
									"case":	68,
									"scores":	[-4.255469029825977]
								}, {
									"case":	69,
									"scores":	[-4.255469029825977]
								}, {
									"case":	70,
									"scores":	[-4.255469029825977]
								}, {
									"case":	71,
									"scores":	[-4.255469029825977]
								}, {
									"case":	72,
									"scores":	[-4.255469029825977]
								}, {
									"case":	73,
									"scores":	[-4.255469029825977]
								}, {
									"case":	74,
									"scores":	[-4.255469029825977]
								}, {
									"case":	75,
									"scores":	[-4.255469029825977]
								}, {
									"case":	76,
									"scores":	[-4.255469029825977]
								}, {
									"case":	77,
									"scores":	[-4.255469029825977]
								}, {
									"case":	78,
									"scores":	[-4.255469029825977]
								}, {
									"case":	79,
									"scores":	[-4.255469029825977]
								}, {
									"case":	80,
									"scores":	[-4.255469029825977]
								}, {
									"case":	81,
									"scores":	[-4.255469029825977]
								}, {
									"case":	82,
									"scores":	[-4.255469029825977]
								}, {
									"case":	83,
									"scores":	[-4.255469029825977]
								}, {
									"case":	84,
									"scores":	[-4.255469029825977]
								}, {
									"case":	85,
									"scores":	[-4.255469029825977]
								}, {
									"case":	86,
									"scores":	[-4.255469029825977]
								}, {
									"case":	87,
									"scores":	[-4.255469029825977]
								}, {
									"case":	88,
									"scores":	[-4.255469029825977]
								}, {
									"case":	89,
									"scores":	[-4.255469029825977]
								}, {
									"case":	90,
									"scores":	[-4.255469029825977]
								}, {
									"case":	91,
									"scores":	[-4.255469029825977]
								}, {
									"case":	92,
									"scores":	[-4.255469029825977]
								}, {
									"case":	93,
									"scores":	[-4.255469029825977]
								}, {
									"case":	94,
									"scores":	[-4.255469029825977]
								}, {
									"case":	95,
									"scores":	[-4.255469029825977]
								}, {
									"case":	96,
									"scores":	[-4.255469029825977]
								}, {
									"case":	97,
									"scores":	[-4.255469029825977]
								}, {
									"case":	98,
									"scores":	[-4.255469029825977]
								}, {
									"case":	99,
									"scores":	[-4.255469029825977]
								}, {
									"case":	100,
									"scores":	[-4.255469029825977]
								}, {
									"case":	101,
									"scores":	[-4.255469029825977]
								}, {
									"case":	102,
									"scores":	[-4.255469029825977]
								}, {
									"case":	103,
									"scores":	[-4.255469029825977]
								}, {
									"case":	104,
									"scores":	[-4.255469029825977]
								}, {
									"case":	105,
									"scores":	[-4.255469029825977]
								}, {
									"case":	106,
									"scores":	[-4.255469029825977]
								}, {
									"case":	107,
									"scores":	[-4.255469029825977]
								}, {
									"case":	108,
									"scores":	[-4.255469029825977]
								}, {
									"case":	109,
									"scores":	[-4.255469029825977]
								}, {
									"case":	110,
									"scores":	[-4.255469029825977]
								}, {
									"case":	111,
									"scores":	[-4.255469029825977]
								}, {
									"case":	112,
									"scores":	[-4.255469029825977]
								}, {
									"case":	113,
									"scores":	[-4.255469029825977]
								}, {
									"case":	114,
									"scores":	[-4.255469029825977]
								}, {
									"case":	115,
									"scores":	[-4.255469029825977]
								}, {
									"case":	116,
									"scores":	[-4.255469029825977]
								}, {
									"case":	117,
									"scores":	[-4.255469029825977]
								}, {
									"case":	118,
									"scores":	[-4.255469029825977]
								}, {
									"case":	119,
									"scores":	[-4.255469029825977]
								}, {
									"case":	120,
									"scores":	[-4.255469029825977]
								}, {
									"case":	121,
									"scores":	[-4.255469029825977]
								}, {
									"case":	122,
									"scores":	[-4.255469029825977]
								}, {
									"case":	123,
									"scores":	[-4.255469029825977]
								}, {
									"case":	124,
									"scores":	[-4.255469029825977]
								}, {
									"case":	125,
									"scores":	[-4.255469029825977]
								}, {
									"case":	126,
									"scores":	[-4.255469029825977]
								}, {
									"case":	127,
									"scores":	[-4.255469029825977]
								}, {
									"case":	128,
									"scores":	[-4.255469029825977]
								}, {
									"case":	129,
									"scores":	[-4.255469029825977]
								}, {
									"case":	130,
									"scores":	[-4.255469029825977]
								}, {
									"case":	131,
									"scores":	[-4.255469029825977]
								}, {
									"case":	132,
									"scores":	[-4.255469029825977]
								}, {
									"case":	133,
									"scores":	[-4.255469029825977]
								}, {
									"case":	134,
									"scores":	[-4.255469029825977]
								}, {
									"case":	135,
									"scores":	[-4.255469029825977]
								}, {
									"case":	136,
									"scores":	[-4.255469029825977]
								}, {
									"case":	137,
									"scores":	[-4.255469029825977]
								}, {
									"case":	138,
									"scores":	[-4.255469029825977]
								}, {
									"case":	139,
									"scores":	[-4.255469029825977]
								}, {
									"case":	140,
									"scores":	[-4.255469029825977]
								}, {
									"case":	141,
									"scores":	[-4.255469029825977]
								}, {
									"case":	142,
									"scores":	[-4.255469029825977]
								}, {
									"case":	143,
									"scores":	[-4.255469029825977]
								}, {
									"case":	144,
									"scores":	[-4.255469029825977]
								}, {
									"case":	145,
									"scores":	[-4.255469029825977]
								}, {
									"case":	146,
									"scores":	[-4.255469029825977]
								}, {
									"case":	147,
									"scores":	[-4.255469029825977]
								}, {
									"case":	148,
									"scores":	[-4.255469029825977]
								}, {
									"case":	149,
									"scores":	[-4.255469029825977]
								}, {
									"case":	150,
									"scores":	[-4.255469029825977]
								}, {
									"case":	151,
									"scores":	[-4.255469029825977]
								}, {
									"case":	152,
									"scores":	[-4.255469029825977]
								}, {
									"case":	153,
									"scores":	[-4.255469029825977]
								}, {
									"case":	154,
									"scores":	[-4.255469029825977]
								}, {
									"case":	155,
									"scores":	[-4.255469029825977]
								}, {
									"case":	156,
									"scores":	[-4.255469029825977]
								}, {
									"case":	157,
									"scores":	[-4.255469029825977]
								}, {
									"case":	158,
									"scores":	[-4.255469029825977]
								}, {
									"case":	159,
									"scores":	[-4.255469029825977]
								}, {
									"case":	160,
									"scores":	[-4.255469029825977]
								}, {
									"case":	161,
									"scores":	[-4.255469029825977]
								}, {
									"case":	162,
									"scores":	[-4.255469029825977]
								}, {
									"case":	163,
									"scores":	[-4.255469029825977]
								}, {
									"case":	164,
									"scores":	[-4.255469029825977]
								}, {
									"case":	165,
									"scores":	[-4.255469029825977]
								}, {
									"case":	166,
									"scores":	[-4.255469029825977]
								}, {
									"case":	167,
									"scores":	[-4.255469029825977]
								}, {
									"case":	168,
									"scores":	[-4.255469029825977]
								}, {
									"case":	169,
									"scores":	[-4.255469029825977]
								}, {
									"case":	170,
									"scores":	[-4.255469029825977]
								}, {
									"case":	171,
									"scores":	[-4.255469029825977]
								}, {
									"case":	172,
									"scores":	[-4.255469029825977]
								}, {
									"case":	173,
									"scores":	[-4.255469029825977]
								}, {
									"case":	174,
									"scores":	[-4.255469029825977]
								}, {
									"case":	175,
									"scores":	[-4.255469029825977]
								}, {
									"case":	176,
									"scores":	[-4.255469029825977]
								}, {
									"case":	177,
									"scores":	[-4.255469029825977]
								}, {
									"case":	178,
									"scores":	[-4.255469029825977]
								}, {
									"case":	179,
									"scores":	[-4.255469029825977]
								}, {
									"case":	180,
									"scores":	[-4.255469029825977]
								}, {
									"case":	181,
									"scores":	[-4.255469029825977]
								}, {
									"case":	182,
									"scores":	[-4.255469029825977]
								}, {
									"case":	183,
									"scores":	[-4.255469029825977]
								}, {
									"case":	184,
									"scores":	[-4.255469029825977]
								}, {
									"case":	185,
									"scores":	[-4.255469029825977]
								}, {
									"case":	186,
									"scores":	[-4.255469029825977]
								}, {
									"case":	187,
									"scores":	[-4.255469029825977]
								}, {
									"case":	188,
									"scores":	[-4.255469029825977]
								}, {
									"case":	189,
									"scores":	[-4.255469029825977]
								}, {
									"case":	190,
									"scores":	[-4.255469029825977]
								}, {
									"case":	191,
									"scores":	[-4.255469029825977]
								}, {
									"case":	192,
									"scores":	[-4.255469029825977]
								}, {
									"case":	193,
									"scores":	[-4.255469029825977]
								}, {
									"case":	194,
									"scores":	[-4.255469029825977]
								}, {
									"case":	195,
									"scores":	[-4.255469029825977]
								}, {
									"case":	196,
									"scores":	[-4.255469029825977]
								}, {
									"case":	197,
									"scores":	[-4.255469029825977]
								}, {
									"case":	198,
									"scores":	[-4.255469029825977]
								}, {
									"case":	199,
									"scores":	[-4.255469029825977]
								}, {
									"case":	200,
									"scores":	[-4.255469029825977]
								}, {
									"case":	201,
									"scores":	[-4.255469029825977]
								}, {
									"case":	202,
									"scores":	[-4.255469029825977]
								}, {
									"case":	203,
									"scores":	[-4.255469029825977]
								}, {
									"case":	204,
									"scores":	[-4.255469029825977]
								}, {
									"case":	205,
									"scores":	[-4.255469029825977]
								}, {
									"case":	206,
									"scores":	[-4.255469029825977]
								}, {
									"case":	207,
									"scores":	[-4.255469029825977]
								}, {
									"case":	208,
									"scores":	[-4.255469029825977]
								}, {
									"case":	209,
									"scores":	[-4.255469029825977]
								}, {
									"case":	210,
									"scores":	[-4.255469029825977]
								}, {
									"case":	211,
									"scores":	[-4.255469029825977]
								}, {
									"case":	212,
									"scores":	[-4.255469029825977]
								}, {
									"case":	213,
									"scores":	[-4.255469029825977]
								}, {
									"case":	214,
									"scores":	[-4.255469029825977]
								}, {
									"case":	215,
									"scores":	[-4.255469029825977]
								}, {
									"case":	216,
									"scores":	[-4.255469029825977]
								}, {
									"case":	217,
									"scores":	[-4.255469029825977]
								}, {
									"case":	218,
									"scores":	[-4.255469029825977]
								}, {
									"case":	219,
									"scores":	[-4.255469029825977]
								}, {
									"case":	220,
									"scores":	[-4.255469029825977]
								}, {
									"case":	221,
									"scores":	[-4.255469029825977]
								}, {
									"case":	222,
									"scores":	[-4.255469029825977]
								}, {
									"case":	223,
									"scores":	[-4.255469029825977]
								}, {
									"case":	224,
									"scores":	[-4.255469029825977]
								}, {
									"case":	225,
									"scores":	[-4.255469029825977]
								}, {
									"case":	226,
									"scores":	[-4.255469029825977]
								}, {
									"case":	227,
									"scores":	[-4.255469029825977]
								}, {
									"case":	228,
									"scores":	[-4.255469029825977]
								}, {
									"case":	229,
									"scores":	[-4.255469029825977]
								}, {
									"case":	230,
									"scores":	[-4.255469029825977]
								}, {
									"case":	231,
									"scores":	[-4.255469029825977]
								}, {
									"case":	232,
									"scores":	[-4.255469029825977]
								}, {
									"case":	233,
									"scores":	[-4.255469029825977]
								}, {
									"case":	234,
									"scores":	[-4.255469029825977]
								}, {
									"case":	235,
									"scores":	[-4.255469029825977]
								}, {
									"case":	236,
									"scores":	[-4.255469029825977]
								}, {
									"case":	237,
									"scores":	[-4.255469029825977]
								}, {
									"case":	238,
									"scores":	[-4.255469029825977]
								}, {
									"case":	239,
									"scores":	[-4.255469029825977]
								}, {
									"case":	240,
									"scores":	[-4.255469029825977]
								}, {
									"case":	241,
									"scores":	[-4.255469029825977]
								}, {
									"case":	242,
									"scores":	[-4.255469029825977]
								}, {
									"case":	243,
									"scores":	[-4.255469029825977]
								}, {
									"case":	244,
									"scores":	[-4.255469029825977]
								}, {
									"case":	245,
									"scores":	[-4.255469029825977]
								}, {
									"case":	246,
									"scores":	[-4.255469029825977]
								}, {
									"case":	247,
									"scores":	[-4.255469029825977]
								}, {
									"case":	248,
									"scores":	[-4.255469029825977]
								}, {
									"case":	249,
									"scores":	[-4.255469029825977]
								}, {
									"case":	250,
									"scores":	[-4.255469029825977]
								}, {
									"case":	251,
									"scores":	[-4.255469029825977]
								}, {
									"case":	252,
									"scores":	[-4.255469029825977]
								}, {
									"case":	253,
									"scores":	[-4.255469029825977]
								}, {
									"case":	254,
									"scores":	[-4.255469029825977]
								}, {
									"case":	255,
									"scores":	[-4.255469029825977]
								}, {
									"case":	256,
									"scores":	[-4.255469029825977]
								}, {
									"case":	257,
									"scores":	[-4.255469029825977]
								}, {
									"case":	258,
									"scores":	[-4.255469029825977]
								}, {
									"case":	259,
									"scores":	[-4.255469029825977]
								}, {
									"case":	260,
									"scores":	[-4.255469029825977]
								}, {
									"case":	261,
									"scores":	[-4.255469029825977]
								}, {
									"case":	262,
									"scores":	[-4.255469029825977]
								}, {
									"case":	263,
									"scores":	[-4.255469029825977]
								}, {
									"case":	264,
									"scores":	[-4.255469029825977]
								}, {
									"case":	265,
									"scores":	[-4.255469029825977]
								}, {
									"case":	266,
									"scores":	[-4.255469029825977]
								}, {
									"case":	267,
									"scores":	[-4.255469029825977]
								}, {
									"case":	268,
									"scores":	[-4.255469029825977]
								}, {
									"case":	269,
									"scores":	[-4.255469029825977]
								}, {
									"case":	270,
									"scores":	[-4.255469029825977]
								}, {
									"case":	271,
									"scores":	[-4.255469029825977]
								}, {
									"case":	272,
									"scores":	[-4.255469029825977]
								}, {
									"case":	273,
									"scores":	[-4.255469029825977]
								}, {
									"case":	274,
									"scores":	[-4.255469029825977]
								}, {
									"case":	275,
									"scores":	[-4.255469029825977]
								}, {
									"case":	276,
									"scores":	[-4.255469029825977]
								}, {
									"case":	277,
									"scores":	[-4.255469029825977]
								}, {
									"case":	278,
									"scores":	[-4.255469029825977]
								}, {
									"case":	279,
									"scores":	[-4.255469029825977]
								}, {
									"case":	280,
									"scores":	[-4.255469029825977]
								}, {
									"case":	281,
									"scores":	[-4.255469029825977]
								}, {
									"case":	282,
									"scores":	[-4.255469029825977]
								}, {
									"case":	283,
									"scores":	[-4.255469029825977]
								}, {
									"case":	284,
									"scores":	[-4.255469029825977]
								}, {
									"case":	285,
									"scores":	[-4.255469029825977]
								}, {
									"case":	286,
									"scores":	[-4.255469029825977]
								}, {
									"case":	287,
									"scores":	[-4.255469029825977]
								}, {
									"case":	288,
									"scores":	[-4.255469029825977]
								}, {
									"case":	289,
									"scores":	[-4.255469029825977]
								}, {
									"case":	290,
									"scores":	[-4.255469029825977]
								}, {
									"case":	291,
									"scores":	[-4.255469029825977]
								}, {
									"case":	292,
									"scores":	[-4.255469029825977]
								}, {
									"case":	293,
									"scores":	[-4.255469029825977]
								}, {
									"case":	294,
									"scores":	[-4.255469029825977]
								}, {
									"case":	295,
									"scores":	[-4.255469029825977]
								}, {
									"case":	296,
									"scores":	[-4.255469029825977]
								}, {
									"case":	297,
									"scores":	[-4.255469029825977]
								}, {
									"case":	298,
									"scores":	[-4.255469029825977]
								}, {
									"case":	299,
									"scores":	[-4.255469029825977]
								}, {
									"case":	300,
									"scores":	[-4.255469029825977]
								}, {
									"case":	301,
									"scores":	[-4.255469029825977]
								}, {
									"case":	302,
									"scores":	[-4.255469029825977]
								}, {
									"case":	303,
									"scores":	[-4.255469029825977]
								}, {
									"case":	304,
									"scores":	[-4.255469029825977]
								}, {
									"case":	305,
									"scores":	[-4.255469029825977]
								}, {
									"case":	306,
									"scores":	[-4.255469029825977]
								}, {
									"case":	307,
									"scores":	[-4.255469029825977]
								}, {
									"case":	308,
									"scores":	[-4.255469029825977]
								}, {
									"case":	309,
									"scores":	[-4.255469029825977]
								}, {
									"case":	310,
									"scores":	[-4.255469029825977]
								}, {
									"case":	311,
									"scores":	[-4.255469029825977]
								}, {
									"case":	312,
									"scores":	[-4.255469029825977]
								}, {
									"case":	313,
									"scores":	[-4.255469029825977]
								}, {
									"case":	314,
									"scores":	[-4.255469029825977]
								}, {
									"case":	315,
									"scores":	[-4.255469029825977]
								}, {
									"case":	316,
									"scores":	[-4.255469029825977]
								}, {
									"case":	317,
									"scores":	[-4.255469029825977]
								}, {
									"case":	318,
									"scores":	[-4.255469029825977]
								}, {
									"case":	319,
									"scores":	[-4.255469029825977]
								}, {
									"case":	320,
									"scores":	[-4.255469029825977]
								}, {
									"case":	321,
									"scores":	[-4.255469029825977]
								}, {
									"case":	322,
									"scores":	[-4.255469029825977]
								}, {
									"case":	323,
									"scores":	[-4.255469029825977]
								}, {
									"case":	324,
									"scores":	[-4.255469029825977]
								}, {
									"case":	325,
									"scores":	[-4.255469029825977]
								}, {
									"case":	326,
									"scores":	[-4.255469029825977]
								}, {
									"case":	327,
									"scores":	[-4.255469029825977]
								}, {
									"case":	328,
									"scores":	[-4.255469029825977]
								}, {
									"case":	329,
									"scores":	[-4.255469029825977]
								}, {
									"case":	330,
									"scores":	[-4.255469029825977]
								}, {
									"case":	331,
									"scores":	[-4.255469029825977]
								}, {
									"case":	332,
									"scores":	[-4.255469029825977]
								}, {
									"case":	333,
									"scores":	[-4.255469029825977]
								}, {
									"case":	334,
									"scores":	[-4.255469029825977]
								}, {
									"case":	335,
									"scores":	[-4.255469029825977]
								}, {
									"case":	336,
									"scores":	[-4.255469029825977]
								}, {
									"case":	337,
									"scores":	[-4.255469029825977]
								}, {
									"case":	338,
									"scores":	[-4.255469029825977]
								}, {
									"case":	339,
									"scores":	[-4.255469029825977]
								}, {
									"case":	340,
									"scores":	[-4.255469029825977]
								}, {
									"case":	341,
									"scores":	[-4.255469029825977]
								}, {
									"case":	342,
									"scores":	[-4.255469029825977]
								}, {
									"case":	343,
									"scores":	[-4.255469029825977]
								}, {
									"case":	344,
									"scores":	[-4.255469029825977]
								}, {
									"case":	345,
									"scores":	[-4.255469029825977]
								}, {
									"case":	346,
									"scores":	[-4.255469029825977]
								}, {
									"case":	347,
									"scores":	[-4.255469029825977]
								}, {
									"case":	348,
									"scores":	[-4.255469029825977]
								}, {
									"case":	349,
									"scores":	[-4.255469029825977]
								}, {
									"case":	350,
									"scores":	[-4.255469029825977]
								}, {
									"case":	351,
									"scores":	[-4.255469029825977]
								}, {
									"case":	352,
									"scores":	[-4.255469029825977]
								}, {
									"case":	353,
									"scores":	[-4.255469029825977]
								}, {
									"case":	354,
									"scores":	[-4.255469029825977]
								}, {
									"case":	355,
									"scores":	[-4.255469029825977]
								}, {
									"case":	356,
									"scores":	[-4.255469029825977]
								}, {
									"case":	357,
									"scores":	[-4.255469029825977]
								}, {
									"case":	358,
									"scores":	[-4.255469029825977]
								}, {
									"case":	359,
									"scores":	[-4.255469029825977]
								}, {
									"case":	360,
									"scores":	[-4.255469029825977]
								}, {
									"case":	361,
									"scores":	[-4.255469029825977]
								}, {
									"case":	362,
									"scores":	[-4.255469029825977]
								}, {
									"case":	363,
									"scores":	[-4.255469029825977]
								}, {
									"case":	364,
									"scores":	[-4.255469029825977]
								}, {
									"case":	365,
									"scores":	[-4.255469029825977]
								}, {
									"case":	366,
									"scores":	[-4.255469029825977]
								}, {
									"case":	367,
									"scores":	[-4.255469029825977]
								}, {
									"case":	368,
									"scores":	[-4.255469029825977]
								}, {
									"case":	369,
									"scores":	[-4.255469029825977]
								}, {
									"case":	370,
									"scores":	[-4.255469029825977]
								}, {
									"case":	371,
									"scores":	[-4.255469029825977]
								}, {
									"case":	372,
									"scores":	[-4.255469029825977]
								}, {
									"case":	373,
									"scores":	[-4.255469029825977]
								}, {
									"case":	374,
									"scores":	[-4.255469029825977]
								}, {
									"case":	375,
									"scores":	[-4.255469029825977]
								}, {
									"case":	376,
									"scores":	[-4.255469029825977]
								}, {
									"case":	377,
									"scores":	[-4.255469029825977]
								}, {
									"case":	378,
									"scores":	[-4.255469029825977]
								}, {
									"case":	379,
									"scores":	[-4.255469029825977]
								}, {
									"case":	380,
									"scores":	[-4.255469029825977]
								}, {
									"case":	381,
									"scores":	[-4.255469029825977]
								}, {
									"case":	382,
									"scores":	[-4.255469029825977]
								}, {
									"case":	383,
									"scores":	[-4.255469029825977]
								}, {
									"case":	384,
									"scores":	[-4.255469029825977]
								}, {
									"case":	385,
									"scores":	[-4.255469029825977]
								}, {
									"case":	386,
									"scores":	[-4.255469029825977]
								}, {
									"case":	387,
									"scores":	[-4.255469029825977]
								}, {
									"case":	388,
									"scores":	[-4.255469029825977]
								}, {
									"case":	389,
									"scores":	[-4.255469029825977]
								}, {
									"case":	390,
									"scores":	[-4.255469029825977]
								}, {
									"case":	391,
									"scores":	[-4.255469029825977]
								}, {
									"case":	392,
									"scores":	[-4.255469029825977]
								}, {
									"case":	393,
									"scores":	[-4.255469029825977]
								}, {
									"case":	394,
									"scores":	[-4.255469029825977]
								}, {
									"case":	395,
									"scores":	[-4.255469029825977]
								}, {
									"case":	396,
									"scores":	[-4.255469029825977]
								}, {
									"case":	397,
									"scores":	[-4.255469029825977]
								}, {
									"case":	398,
									"scores":	[-4.255469029825977]
								}, {
									"case":	399,
									"scores":	[-4.255469029825977]
								}, {
									"case":	400,
									"scores":	[-4.255469029825977]
								}, {
									"case":	401,
									"scores":	[-4.255469029825977]
								}, {
									"case":	402,
									"scores":	[-4.255469029825977]
								}, {
									"case":	403,
									"scores":	[-4.255469029825977]
								}, {
									"case":	404,
									"scores":	[-4.255469029825977]
								}, {
									"case":	405,
									"scores":	[-4.255469029825977]
								}, {
									"case":	406,
									"scores":	[-4.255469029825977]
								}, {
									"case":	407,
									"scores":	[-4.255469029825977]
								}, {
									"case":	408,
									"scores":	[-4.255469029825977]
								}, {
									"case":	409,
									"scores":	[-4.255469029825977]
								}, {
									"case":	410,
									"scores":	[-4.255469029825977]
								}, {
									"case":	411,
									"scores":	[-4.255469029825977]
								}, {
									"case":	412,
									"scores":	[-4.255469029825977]
								}, {
									"case":	413,
									"scores":	[-4.255469029825977]
								}, {
									"case":	414,
									"scores":	[-4.255469029825977]
								}, {
									"case":	415,
									"scores":	[-4.255469029825977]
								}, {
									"case":	416,
									"scores":	[-4.255469029825977]
								}, {
									"case":	417,
									"scores":	[-4.255469029825977]
								}, {
									"case":	418,
									"scores":	[-4.255469029825977]
								}, {
									"case":	419,
									"scores":	[-4.255469029825977]
								}, {
									"case":	420,
									"scores":	[-4.255469029825977]
								}, {
									"case":	421,
									"scores":	[-4.255469029825977]
								}, {
									"case":	422,
									"scores":	[-4.255469029825977]
								}, {
									"case":	423,
									"scores":	[-4.255469029825977]
								}, {
									"case":	424,
									"scores":	[-4.255469029825977]
								}, {
									"case":	425,
									"scores":	[-4.255469029825977]
								}, {
									"case":	426,
									"scores":	[-4.255469029825977]
								}, {
									"case":	427,
									"scores":	[-4.255469029825977]
								}, {
									"case":	428,
									"scores":	[-4.255469029825977]
								}, {
									"case":	429,
									"scores":	[-4.255469029825977]
								}, {
									"case":	430,
									"scores":	[-4.255469029825977]
								}, {
									"case":	431,
									"scores":	[-4.255469029825977]
								}, {
									"case":	432,
									"scores":	[-4.255469029825977]
								}, {
									"case":	433,
									"scores":	[-4.255469029825977]
								}, {
									"case":	434,
									"scores":	[-4.255469029825977]
								}, {
									"case":	435,
									"scores":	[-4.255469029825977]
								}, {
									"case":	436,
									"scores":	[-4.255469029825977]
								}, {
									"case":	437,
									"scores":	[-4.255469029825977]
								}, {
									"case":	438,
									"scores":	[-4.255469029825977]
								}, {
									"case":	439,
									"scores":	[-4.255469029825977]
								}, {
									"case":	440,
									"scores":	[-4.255469029825977]
								}, {
									"case":	441,
									"scores":	[-4.255469029825977]
								}, {
									"case":	442,
									"scores":	[-4.255469029825977]
								}, {
									"case":	443,
									"scores":	[-4.255469029825977]
								}, {
									"case":	444,
									"scores":	[-4.255469029825977]
								}, {
									"case":	445,
									"scores":	[-4.255469029825977]
								}, {
									"case":	446,
									"scores":	[-4.255469029825977]
								}, {
									"case":	447,
									"scores":	[-4.255469029825977]
								}, {
									"case":	448,
									"scores":	[-4.255469029825977]
								}, {
									"case":	449,
									"scores":	[-4.255469029825977]
								}, {
									"case":	450,
									"scores":	[-4.255469029825977]
								}, {
									"case":	451,
									"scores":	[-4.255469029825977]
								}, {
									"case":	452,
									"scores":	[-4.255469029825977]
								}, {
									"case":	453,
									"scores":	[-4.255469029825977]
								}, {
									"case":	454,
									"scores":	[-4.255469029825977]
								}, {
									"case":	455,
									"scores":	[-4.255469029825977]
								}, {
									"case":	456,
									"scores":	[-4.255469029825977]
								}, {
									"case":	457,
									"scores":	[-4.255469029825977]
								}, {
									"case":	458,
									"scores":	[-4.255469029825977]
								}, {
									"case":	459,
									"scores":	[-4.255469029825977]
								}, {
									"case":	460,
									"scores":	[-4.255469029825977]
								}, {
									"case":	461,
									"scores":	[-4.255469029825977]
								}, {
									"case":	462,
									"scores":	[-4.255469029825977]
								}, {
									"case":	463,
									"scores":	[-4.255469029825977]
								}, {
									"case":	464,
									"scores":	[-4.255469029825977]
								}, {
									"case":	465,
									"scores":	[-4.255469029825977]
								}, {
									"case":	466,
									"scores":	[-4.255469029825977]
								}, {
									"case":	467,
									"scores":	[-4.255469029825977]
								}, {
									"case":	468,
									"scores":	[-4.255469029825977]
								}, {
									"case":	469,
									"scores":	[-4.255469029825977]
								}, {
									"case":	470,
									"scores":	[-4.255469029825977]
								}, {
									"case":	471,
									"scores":	[-4.255469029825977]
								}, {
									"case":	472,
									"scores":	[-4.255469029825977]
								}, {
									"case":	473,
									"scores":	[-4.255469029825977]
								}, {
									"case":	474,
									"scores":	[-4.255469029825977]
								}, {
									"case":	475,
									"scores":	[-4.255469029825977]
								}, {
									"case":	476,
									"scores":	[-4.255469029825977]
								}, {
									"case":	477,
									"scores":	[-4.255469029825977]
								}, {
									"case":	478,
									"scores":	[-4.255469029825977]
								}, {
									"case":	479,
									"scores":	[-4.255469029825977]
								}, {
									"case":	480,
									"scores":	[-4.255469029825977]
								}, {
									"case":	481,
									"scores":	[-4.255469029825977]
								}, {
									"case":	482,
									"scores":	[-4.255469029825977]
								}, {
									"case":	483,
									"scores":	[-4.255469029825977]
								}, {
									"case":	484,
									"scores":	[-4.255469029825977]
								}, {
									"case":	485,
									"scores":	[-4.255469029825977]
								}, {
									"case":	486,
									"scores":	[-4.255469029825977]
								}, {
									"case":	487,
									"scores":	[-4.255469029825977]
								}, {
									"case":	488,
									"scores":	[-4.255469029825977]
								}, {
									"case":	489,
									"scores":	[-4.255469029825977]
								}, {
									"case":	490,
									"scores":	[-4.255469029825977]
								}, {
									"case":	491,
									"scores":	[-4.255469029825977]
								}, {
									"case":	492,
									"scores":	[-4.255469029825977]
								}, {
									"case":	493,
									"scores":	[-4.255469029825977]
								}, {
									"case":	494,
									"scores":	[-4.255469029825977]
								}, {
									"case":	495,
									"scores":	[-4.255469029825977]
								}, {
									"case":	496,
									"scores":	[-4.255469029825977]
								}, {
									"case":	497,
									"scores":	[-4.255469029825977]
								}, {
									"case":	498,
									"scores":	[-4.255469029825977]
								}, {
									"case":	499,
									"scores":	[-4.255469029825977]
								}, {
									"case":	500,
									"scores":	[-4.255469029825977]
								}, {
									"case":	501,
									"scores":	[-4.255469029825977]
								}, {
									"case":	502,
									"scores":	[-4.255469029825977]
								}, {
									"case":	503,
									"scores":	[-4.255469029825977]
								}, {
									"case":	504,
									"scores":	[-4.255469029825977]
								}, {
									"case":	505,
									"scores":	[-4.255469029825977]
								}, {
									"case":	506,
									"scores":	[-4.255469029825977]
								}, {
									"case":	507,
									"scores":	[-4.255469029825977]
								}, {
									"case":	508,
									"scores":	[-4.255469029825977]
								}, {
									"case":	509,
									"scores":	[-4.255469029825977]
								}, {
									"case":	510,
									"scores":	[-4.255469029825977]
								}, {
									"case":	511,
									"scores":	[-4.255469029825977]
								}, {
									"case":	512,
									"scores":	[-4.255469029825977]
								}, {
									"case":	513,
									"scores":	[-4.255469029825977]
								}, {
									"case":	514,
									"scores":	[-4.255469029825977]
								}, {
									"case":	515,
									"scores":	[-4.255469029825977]
								}, {
									"case":	516,
									"scores":	[-4.255469029825977]
								}, {
									"case":	517,
									"scores":	[-4.255469029825977]
								}, {
									"case":	518,
									"scores":	[-4.255469029825977]
								}, {
									"case":	519,
									"scores":	[-4.255469029825977]
								}, {
									"case":	520,
									"scores":	[-4.255469029825977]
								}, {
									"case":	521,
									"scores":	[-4.255469029825977]
								}, {
									"case":	522,
									"scores":	[-4.255469029825977]
								}, {
									"case":	523,
									"scores":	[-4.255469029825977]
								}, {
									"case":	524,
									"scores":	[-4.255469029825977]
								}, {
									"case":	525,
									"scores":	[-4.255469029825977]
								}, {
									"case":	526,
									"scores":	[-4.255469029825977]
								}, {
									"case":	527,
									"scores":	[-4.255469029825977]
								}, {
									"case":	528,
									"scores":	[-4.255469029825977]
								}, {
									"case":	529,
									"scores":	[-4.255469029825977]
								}, {
									"case":	530,
									"scores":	[-4.255469029825977]
								}, {
									"case":	531,
									"scores":	[-4.255469029825977]
								}, {
									"case":	532,
									"scores":	[-4.255469029825977]
								}, {
									"case":	533,
									"scores":	[-4.255469029825977]
								}, {
									"case":	534,
									"scores":	[-4.255469029825977]
								}, {
									"case":	535,
									"scores":	[-4.255469029825977]
								}, {
									"case":	536,
									"scores":	[-4.255469029825977]
								}, {
									"case":	537,
									"scores":	[-4.255469029825977]
								}, {
									"case":	538,
									"scores":	[-4.255469029825977]
								}, {
									"case":	539,
									"scores":	[-4.255469029825977]
								}, {
									"case":	540,
									"scores":	[-4.255469029825977]
								}, {
									"case":	541,
									"scores":	[-4.255469029825977]
								}, {
									"case":	542,
									"scores":	[-4.255469029825977]
								}, {
									"case":	543,
									"scores":	[-4.255469029825977]
								}, {
									"case":	544,
									"scores":	[-4.255469029825977]
								}, {
									"case":	545,
									"scores":	[-6.7258773601259767, -7.3125711656259762, -7.3125711656259762, -7.1589125176259767, -6.688456869825977, -7.0041486329259772, -7.3125711656259762, -7.0041486329259772, -7.0041486329259772, -7.0041486329259772, -7.3125711656259762, -7.0041486329259772, -7.0041486329259772, -7.0935713329259773, -7.0935713329259773, -7.0041486329259772, -7.0041486329259772, -7.0041486329259772, -7.0041486329259772, -6.5111940298259761, -6.5111940298259761, -7.0041486329259772, -7.0041486329259772, -7.0041486329259772, -7.0041486329259772, -7.0041486329259772, -6.5111940298259761, -7.0041486329259772]
								}, {
									"case":	546,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	547,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	548,
									"scores":	[-6.8257855601259765, -7.412479365625976, -7.412479365625976, -7.2588207176259765, -6.7883650698259768, -7.104056832925977, -7.412479365625976, -7.104056832925977, -7.104056832925977, -7.104056832925977, -7.412479365625976, -7.104056832925977, -7.104056832925977, -7.1934795329259771, -7.1934795329259771, -7.104056832925977, -7.104056832925977, -7.104056832925977, -7.104056832925977, -6.6111022298259767, -6.6111022298259767, -7.104056832925977, -7.104056832925977, -7.104056832925977, -7.104056832925977, -7.104056832925977, -6.6111022298259767, -7.104056832925977]
								}, {
									"case":	549,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	550,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	551,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	552,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	553,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	554,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	555,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	556,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	557,
									"scores":	[-9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.05114686982598, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.3668386329259761, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}]
						}, {
							"switch":	49,
							"types":	[[7], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6], []],
							"begin_line":	1395,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\235\", 2) == 0) || __is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\235\", 2) == 0) && !__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2386547071281457, -6.0759905071281448, -6.0759905071281448, -5.8879177071281461, -4.9511882341281455, -5.1677620341281454, -6.0759905071281448, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -6.0759905071281448, -5.1677620341281454, -5.1677620341281454, -5.6047270341281461, -5.6047270341281461, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -4.6864067341281457, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.1677620341281454]
								}, {
									"case":	2,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -3.4438312744281458, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -3.4438312744281458, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}]
						}, {
							"switch":	56,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1395,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n        work = unlzw;\n        method = 1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1395\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(to_stdout), sizeof (to_stdout), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"\\037\\235\", 2) == 0)) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9907160028259767, -6.8280518028259767, -6.8280518028259767, -6.6399790028259762, -5.7032495298259764, -5.9198233298259773, -6.8280518028259767, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -6.8280518028259767, -5.9198233298259773, -5.9198233298259773, -6.3567883298259762, -6.3567883298259762, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.4384680298259767, -5.4384680298259767, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.4384680298259767, -5.9198233298259773]
								}, {
									"case":	2,
									"scores":	[-5.2378739718259766, -6.0752097718259765, -6.0752097718259765, -5.8871369718259761, -4.9504074988259763, -5.1669812988259762, -6.0752097718259765, -5.1669812988259762, -5.1669812988259762, -5.1669812988259762, -6.0752097718259765, -5.1669812988259762, -5.1669812988259762, -5.6039462988259761, -5.6039462988259761, -5.1669812988259762, -5.1669812988259762, -5.1669812988259762, -5.1669812988259762, -4.6856259988259765, -4.6856259988259765, -5.1669812988259762, -5.1669812988259762, -5.1669812988259762, -5.1669812988259762, -5.1669812988259762, -4.6856259988259765, -5.1669812988259762]
								}]
						}]
				}, {
					"line":	1390,
					"switches":	[{
							"switch":	46,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1391,
							"begin_column":	10,
							"end_line":	1391,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	2,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	3,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	4,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	5,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	6,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	7,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	8,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	9,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	10,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	11,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	12,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	13,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	14,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	15,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	16,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	17,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	18,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	19,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	20,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	21,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	22,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	23,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	24,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	25,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	26,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	27,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	28,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	29,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	30,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	31,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	32,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	33,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	34,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	35,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	36,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	37,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	38,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	39,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	40,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	41,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	42,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	43,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	44,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	45,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	46,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	47,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	48,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	49,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	50,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	51,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	52,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	53,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	54,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	55,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	56,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	57,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	58,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	59,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	60,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	61,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	62,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	63,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	64,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	65,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	66,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	67,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	68,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	69,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	70,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	71,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	72,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	73,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	74,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	75,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	76,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	77,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	78,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	79,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	80,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	81,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	82,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	83,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	84,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	85,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	86,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	87,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	88,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	89,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	90,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	91,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	92,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	93,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	94,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	95,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	96,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	97,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	98,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	99,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	100,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	101,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	102,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	103,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	104,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	105,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	106,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	107,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	108,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	109,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	110,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	111,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	112,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	113,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	114,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	115,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	116,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	117,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	118,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	119,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	120,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	121,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	122,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	123,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	124,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	125,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	126,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	127,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	128,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	129,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	130,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	131,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	132,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	133,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	134,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	135,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	136,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	137,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	138,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	139,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	140,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	141,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	142,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	143,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	144,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	145,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	146,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	147,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	148,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	149,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	150,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	151,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	152,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	153,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	154,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	155,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	156,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	157,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	158,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	159,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	160,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	161,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	162,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	163,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	164,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	165,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	166,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	167,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	168,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	169,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	170,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	171,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	172,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	173,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	174,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	175,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	176,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	177,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	178,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	179,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	180,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	181,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	182,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	183,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	184,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	185,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	186,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	187,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	188,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	189,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	190,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	191,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	192,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	193,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	194,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	195,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	196,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	197,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	198,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	199,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	200,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	201,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	202,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	203,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	204,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	205,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	206,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	207,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	208,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	209,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	210,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	211,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	212,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	213,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	214,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	215,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	216,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	217,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	218,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	219,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	220,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	221,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	222,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	223,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	224,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	225,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	226,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	227,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	228,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	229,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	230,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	231,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	232,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	233,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	234,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	235,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	236,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	237,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	238,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	239,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	240,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	241,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	242,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	243,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	244,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	245,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	246,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	247,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	248,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	249,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	250,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	251,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	252,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	253,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	254,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	255,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	256,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	257,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	258,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	259,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	260,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	261,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	262,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	263,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	264,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	265,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	266,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	267,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	268,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	269,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	270,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	271,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	272,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	273,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	274,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	275,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	276,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	277,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	278,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	279,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	280,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	281,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	282,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	283,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	284,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	285,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	286,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	287,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	288,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	289,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	290,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	291,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	292,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	293,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	294,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	295,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	296,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	297,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	298,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	299,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	300,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	301,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	302,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	303,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	304,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	305,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	306,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	307,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	308,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	309,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	310,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	311,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	312,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	313,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	314,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	315,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	316,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	317,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	318,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	319,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	320,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	321,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	322,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	323,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	324,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	325,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	326,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	327,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	328,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	329,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	330,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	331,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	332,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	333,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	334,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	335,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	336,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	337,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	338,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	339,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	340,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	341,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	342,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	343,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	344,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	345,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	346,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	347,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	348,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	349,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	350,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	351,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	352,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	353,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	354,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	355,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	356,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	357,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	358,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	359,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	360,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	361,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	362,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	363,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	364,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	365,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	366,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	367,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	368,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	369,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	370,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	371,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	372,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	373,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	374,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	375,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	376,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	377,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	378,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	379,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	380,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	381,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	382,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	383,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	384,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	385,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	386,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	387,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	388,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	389,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	390,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	391,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	392,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	393,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	394,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	395,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	396,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	397,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	398,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	399,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	400,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	401,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	402,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	403,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	404,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	405,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	406,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	407,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	408,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	409,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	410,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	411,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	412,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	413,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	414,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	415,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	416,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	417,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	418,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	419,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	420,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	421,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	422,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	423,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	424,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	425,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	426,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	427,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	428,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	429,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	430,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	431,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	432,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	433,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	434,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	435,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	436,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	437,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	438,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	439,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	440,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	441,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	442,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	443,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	444,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	445,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	446,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	447,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	448,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	449,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	450,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	451,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	452,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	453,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	454,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	455,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	456,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	457,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	458,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	459,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	460,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	461,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	462,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	463,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	464,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	465,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	466,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	467,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	468,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	469,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	470,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	471,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	472,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	473,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	474,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	475,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	476,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	477,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	478,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	479,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	480,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	481,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	482,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	483,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	484,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	485,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	486,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	487,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	488,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	489,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	490,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	491,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	492,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	493,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	494,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	495,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	496,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	497,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	498,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	499,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	500,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	501,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	502,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	503,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	504,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	505,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	506,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	507,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	508,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	509,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	510,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	511,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	512,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	513,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	514,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	515,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	516,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	517,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	518,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	519,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	520,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	521,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	522,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	523,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	524,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	525,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	526,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	527,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	528,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	529,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	530,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	531,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	532,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	533,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	534,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	535,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	536,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	537,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	538,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	539,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	540,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	541,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	542,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	543,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	544,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	545,
									"scores":	[-6.7460800674434962, -7.3327738729434957, -7.3327738729434957, -7.1791152249434962, -6.7086595771434965, -7.3327738729434957, -7.3327738729434957, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -6.5313967371434956, -7.1137740402434968, -7.1137740402434968, -7.0243513402434967, -7.0243513402434967, -6.5313967371434956, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -7.0243513402434967, -6.5313967371434956, -7.0243513402434967]
								}, {
									"case":	546,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	547,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	548,
									"scores":	[-6.845988267443496, -7.4326820729434955, -7.4326820729434955, -7.279023424943496, -6.8085677771434963, -7.4326820729434955, -7.4326820729434955, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -6.6313049371434962, -7.2136822402434966, -7.2136822402434966, -7.1242595402434965, -7.1242595402434965, -6.6313049371434962, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -6.6313049371434962, -7.1242595402434965]
								}, {
									"case":	549,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	550,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	551,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	552,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	553,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	554,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	555,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	556,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	557,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.0713495771434971, -9.6954638729434954, -9.6954638729434954, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}]
						}, {
							"switch":	47,
							"types":	[[7], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6], []],
							"begin_line":	1391,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\036\", 2) == 0) || __is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\036\", 2) == 0) && !__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2386547071281457, -6.0759905071281448, -6.0759905071281448, -5.8879177071281461, -4.9511882341281455, -6.0759905071281448, -6.0759905071281448, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.6047270341281461, -5.6047270341281461, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.1677620341281454]
								}, {
									"case":	2,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -4.3520597474281457, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -4.3520597474281457, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1391,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n        work = unpack;\n        method = 2;\n    } else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n        work = unlzw;\n        method = 1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"\\037\\036\", 2) == 0)) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0109187101434962, -6.8482545101434962, -6.8482545101434962, -6.6601817101434957, -5.7234522371434959, -6.8482545101434962, -6.8482545101434962, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.4586707371434962, -6.3769910371434957, -6.3769910371434957, -5.9400260371434968, -5.9400260371434968, -5.4586707371434962, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.4586707371434962, -5.9400260371434968]
								}, {
									"case":	2,
									"scores":	[-5.2580766791434961, -6.095412479143496, -6.095412479143496, -5.9073396791434956, -4.9706102061434958, -6.095412479143496, -6.095412479143496, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -4.705828706143496, -5.6241490061434956, -5.6241490061434956, -5.1871840061434957, -5.1871840061434957, -4.705828706143496, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -4.705828706143496, -5.1871840061434957]
								}]
						}]
				}, {
					"line":	1379,
					"switches":	[{
							"switch":	44,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1380,
							"begin_column":	10,
							"end_line":	1380,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.295874444461016]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}, {
									"case":	17,
									"scores":	[-4.295874444461016]
								}, {
									"case":	18,
									"scores":	[-4.295874444461016]
								}, {
									"case":	19,
									"scores":	[-4.295874444461016]
								}, {
									"case":	20,
									"scores":	[-4.295874444461016]
								}, {
									"case":	21,
									"scores":	[-4.295874444461016]
								}, {
									"case":	22,
									"scores":	[-4.295874444461016]
								}, {
									"case":	23,
									"scores":	[-4.295874444461016]
								}, {
									"case":	24,
									"scores":	[-4.295874444461016]
								}, {
									"case":	25,
									"scores":	[-4.295874444461016]
								}, {
									"case":	26,
									"scores":	[-4.295874444461016]
								}, {
									"case":	27,
									"scores":	[-4.295874444461016]
								}, {
									"case":	28,
									"scores":	[-4.295874444461016]
								}, {
									"case":	29,
									"scores":	[-4.295874444461016]
								}, {
									"case":	30,
									"scores":	[-4.295874444461016]
								}, {
									"case":	31,
									"scores":	[-4.295874444461016]
								}, {
									"case":	32,
									"scores":	[-4.295874444461016]
								}, {
									"case":	33,
									"scores":	[-4.295874444461016]
								}, {
									"case":	34,
									"scores":	[-4.295874444461016]
								}, {
									"case":	35,
									"scores":	[-4.295874444461016]
								}, {
									"case":	36,
									"scores":	[-4.295874444461016]
								}, {
									"case":	37,
									"scores":	[-4.295874444461016]
								}, {
									"case":	38,
									"scores":	[-4.295874444461016]
								}, {
									"case":	39,
									"scores":	[-4.295874444461016]
								}, {
									"case":	40,
									"scores":	[-4.295874444461016]
								}, {
									"case":	41,
									"scores":	[-4.295874444461016]
								}, {
									"case":	42,
									"scores":	[-4.295874444461016]
								}, {
									"case":	43,
									"scores":	[-4.295874444461016]
								}, {
									"case":	44,
									"scores":	[-4.295874444461016]
								}, {
									"case":	45,
									"scores":	[-4.295874444461016]
								}, {
									"case":	46,
									"scores":	[-4.295874444461016]
								}, {
									"case":	47,
									"scores":	[-4.295874444461016]
								}, {
									"case":	48,
									"scores":	[-4.295874444461016]
								}, {
									"case":	49,
									"scores":	[-4.295874444461016]
								}, {
									"case":	50,
									"scores":	[-4.295874444461016]
								}, {
									"case":	51,
									"scores":	[-4.295874444461016]
								}, {
									"case":	52,
									"scores":	[-4.295874444461016]
								}, {
									"case":	53,
									"scores":	[-4.295874444461016]
								}, {
									"case":	54,
									"scores":	[-4.295874444461016]
								}, {
									"case":	55,
									"scores":	[-4.295874444461016]
								}, {
									"case":	56,
									"scores":	[-4.295874444461016]
								}, {
									"case":	57,
									"scores":	[-4.295874444461016]
								}, {
									"case":	58,
									"scores":	[-4.295874444461016]
								}, {
									"case":	59,
									"scores":	[-4.295874444461016]
								}, {
									"case":	60,
									"scores":	[-4.295874444461016]
								}, {
									"case":	61,
									"scores":	[-4.295874444461016]
								}, {
									"case":	62,
									"scores":	[-4.295874444461016]
								}, {
									"case":	63,
									"scores":	[-4.295874444461016]
								}, {
									"case":	64,
									"scores":	[-4.295874444461016]
								}, {
									"case":	65,
									"scores":	[-4.295874444461016]
								}, {
									"case":	66,
									"scores":	[-4.295874444461016]
								}, {
									"case":	67,
									"scores":	[-4.295874444461016]
								}, {
									"case":	68,
									"scores":	[-4.295874444461016]
								}, {
									"case":	69,
									"scores":	[-4.295874444461016]
								}, {
									"case":	70,
									"scores":	[-4.295874444461016]
								}, {
									"case":	71,
									"scores":	[-4.295874444461016]
								}, {
									"case":	72,
									"scores":	[-4.295874444461016]
								}, {
									"case":	73,
									"scores":	[-4.295874444461016]
								}, {
									"case":	74,
									"scores":	[-4.295874444461016]
								}, {
									"case":	75,
									"scores":	[-4.295874444461016]
								}, {
									"case":	76,
									"scores":	[-4.295874444461016]
								}, {
									"case":	77,
									"scores":	[-4.295874444461016]
								}, {
									"case":	78,
									"scores":	[-4.295874444461016]
								}, {
									"case":	79,
									"scores":	[-4.295874444461016]
								}, {
									"case":	80,
									"scores":	[-4.295874444461016]
								}, {
									"case":	81,
									"scores":	[-4.295874444461016]
								}, {
									"case":	82,
									"scores":	[-4.295874444461016]
								}, {
									"case":	83,
									"scores":	[-4.295874444461016]
								}, {
									"case":	84,
									"scores":	[-4.295874444461016]
								}, {
									"case":	85,
									"scores":	[-4.295874444461016]
								}, {
									"case":	86,
									"scores":	[-4.295874444461016]
								}, {
									"case":	87,
									"scores":	[-4.295874444461016]
								}, {
									"case":	88,
									"scores":	[-4.295874444461016]
								}, {
									"case":	89,
									"scores":	[-4.295874444461016]
								}, {
									"case":	90,
									"scores":	[-4.295874444461016]
								}, {
									"case":	91,
									"scores":	[-4.295874444461016]
								}, {
									"case":	92,
									"scores":	[-4.295874444461016]
								}, {
									"case":	93,
									"scores":	[-4.295874444461016]
								}, {
									"case":	94,
									"scores":	[-4.295874444461016]
								}, {
									"case":	95,
									"scores":	[-4.295874444461016]
								}, {
									"case":	96,
									"scores":	[-4.295874444461016]
								}, {
									"case":	97,
									"scores":	[-4.295874444461016]
								}, {
									"case":	98,
									"scores":	[-4.295874444461016]
								}, {
									"case":	99,
									"scores":	[-4.295874444461016]
								}, {
									"case":	100,
									"scores":	[-4.295874444461016]
								}, {
									"case":	101,
									"scores":	[-4.295874444461016]
								}, {
									"case":	102,
									"scores":	[-4.295874444461016]
								}, {
									"case":	103,
									"scores":	[-4.295874444461016]
								}, {
									"case":	104,
									"scores":	[-4.295874444461016]
								}, {
									"case":	105,
									"scores":	[-4.295874444461016]
								}, {
									"case":	106,
									"scores":	[-4.295874444461016]
								}, {
									"case":	107,
									"scores":	[-4.295874444461016]
								}, {
									"case":	108,
									"scores":	[-4.295874444461016]
								}, {
									"case":	109,
									"scores":	[-4.295874444461016]
								}, {
									"case":	110,
									"scores":	[-4.295874444461016]
								}, {
									"case":	111,
									"scores":	[-4.295874444461016]
								}, {
									"case":	112,
									"scores":	[-4.295874444461016]
								}, {
									"case":	113,
									"scores":	[-4.295874444461016]
								}, {
									"case":	114,
									"scores":	[-4.295874444461016]
								}, {
									"case":	115,
									"scores":	[-4.295874444461016]
								}, {
									"case":	116,
									"scores":	[-4.295874444461016]
								}, {
									"case":	117,
									"scores":	[-4.295874444461016]
								}, {
									"case":	118,
									"scores":	[-4.295874444461016]
								}, {
									"case":	119,
									"scores":	[-4.295874444461016]
								}, {
									"case":	120,
									"scores":	[-4.295874444461016]
								}, {
									"case":	121,
									"scores":	[-4.295874444461016]
								}, {
									"case":	122,
									"scores":	[-4.295874444461016]
								}, {
									"case":	123,
									"scores":	[-4.295874444461016]
								}, {
									"case":	124,
									"scores":	[-4.295874444461016]
								}, {
									"case":	125,
									"scores":	[-4.295874444461016]
								}, {
									"case":	126,
									"scores":	[-4.295874444461016]
								}, {
									"case":	127,
									"scores":	[-4.295874444461016]
								}, {
									"case":	128,
									"scores":	[-4.295874444461016]
								}, {
									"case":	129,
									"scores":	[-4.295874444461016]
								}, {
									"case":	130,
									"scores":	[-4.295874444461016]
								}, {
									"case":	131,
									"scores":	[-4.295874444461016]
								}, {
									"case":	132,
									"scores":	[-4.295874444461016]
								}, {
									"case":	133,
									"scores":	[-4.295874444461016]
								}, {
									"case":	134,
									"scores":	[-4.295874444461016]
								}, {
									"case":	135,
									"scores":	[-4.295874444461016]
								}, {
									"case":	136,
									"scores":	[-4.295874444461016]
								}, {
									"case":	137,
									"scores":	[-4.295874444461016]
								}, {
									"case":	138,
									"scores":	[-4.295874444461016]
								}, {
									"case":	139,
									"scores":	[-4.295874444461016]
								}, {
									"case":	140,
									"scores":	[-4.295874444461016]
								}, {
									"case":	141,
									"scores":	[-4.295874444461016]
								}, {
									"case":	142,
									"scores":	[-4.295874444461016]
								}, {
									"case":	143,
									"scores":	[-4.295874444461016]
								}, {
									"case":	144,
									"scores":	[-4.295874444461016]
								}, {
									"case":	145,
									"scores":	[-4.295874444461016]
								}, {
									"case":	146,
									"scores":	[-4.295874444461016]
								}, {
									"case":	147,
									"scores":	[-4.295874444461016]
								}, {
									"case":	148,
									"scores":	[-4.295874444461016]
								}, {
									"case":	149,
									"scores":	[-4.295874444461016]
								}, {
									"case":	150,
									"scores":	[-4.295874444461016]
								}, {
									"case":	151,
									"scores":	[-4.295874444461016]
								}, {
									"case":	152,
									"scores":	[-4.295874444461016]
								}, {
									"case":	153,
									"scores":	[-4.295874444461016]
								}, {
									"case":	154,
									"scores":	[-4.295874444461016]
								}, {
									"case":	155,
									"scores":	[-4.295874444461016]
								}, {
									"case":	156,
									"scores":	[-4.295874444461016]
								}, {
									"case":	157,
									"scores":	[-4.295874444461016]
								}, {
									"case":	158,
									"scores":	[-4.295874444461016]
								}, {
									"case":	159,
									"scores":	[-4.295874444461016]
								}, {
									"case":	160,
									"scores":	[-4.295874444461016]
								}, {
									"case":	161,
									"scores":	[-4.295874444461016]
								}, {
									"case":	162,
									"scores":	[-4.295874444461016]
								}, {
									"case":	163,
									"scores":	[-4.295874444461016]
								}, {
									"case":	164,
									"scores":	[-4.295874444461016]
								}, {
									"case":	165,
									"scores":	[-4.295874444461016]
								}, {
									"case":	166,
									"scores":	[-4.295874444461016]
								}, {
									"case":	167,
									"scores":	[-4.295874444461016]
								}, {
									"case":	168,
									"scores":	[-4.295874444461016]
								}, {
									"case":	169,
									"scores":	[-4.295874444461016]
								}, {
									"case":	170,
									"scores":	[-4.295874444461016]
								}, {
									"case":	171,
									"scores":	[-4.295874444461016]
								}, {
									"case":	172,
									"scores":	[-4.295874444461016]
								}, {
									"case":	173,
									"scores":	[-4.295874444461016]
								}, {
									"case":	174,
									"scores":	[-4.295874444461016]
								}, {
									"case":	175,
									"scores":	[-4.295874444461016]
								}, {
									"case":	176,
									"scores":	[-4.295874444461016]
								}, {
									"case":	177,
									"scores":	[-4.295874444461016]
								}, {
									"case":	178,
									"scores":	[-4.295874444461016]
								}, {
									"case":	179,
									"scores":	[-4.295874444461016]
								}, {
									"case":	180,
									"scores":	[-4.295874444461016]
								}, {
									"case":	181,
									"scores":	[-4.295874444461016]
								}, {
									"case":	182,
									"scores":	[-4.295874444461016]
								}, {
									"case":	183,
									"scores":	[-4.295874444461016]
								}, {
									"case":	184,
									"scores":	[-4.295874444461016]
								}, {
									"case":	185,
									"scores":	[-4.295874444461016]
								}, {
									"case":	186,
									"scores":	[-4.295874444461016]
								}, {
									"case":	187,
									"scores":	[-4.295874444461016]
								}, {
									"case":	188,
									"scores":	[-4.295874444461016]
								}, {
									"case":	189,
									"scores":	[-4.295874444461016]
								}, {
									"case":	190,
									"scores":	[-4.295874444461016]
								}, {
									"case":	191,
									"scores":	[-4.295874444461016]
								}, {
									"case":	192,
									"scores":	[-4.295874444461016]
								}, {
									"case":	193,
									"scores":	[-4.295874444461016]
								}, {
									"case":	194,
									"scores":	[-4.295874444461016]
								}, {
									"case":	195,
									"scores":	[-4.295874444461016]
								}, {
									"case":	196,
									"scores":	[-4.295874444461016]
								}, {
									"case":	197,
									"scores":	[-4.295874444461016]
								}, {
									"case":	198,
									"scores":	[-4.295874444461016]
								}, {
									"case":	199,
									"scores":	[-4.295874444461016]
								}, {
									"case":	200,
									"scores":	[-4.295874444461016]
								}, {
									"case":	201,
									"scores":	[-4.295874444461016]
								}, {
									"case":	202,
									"scores":	[-4.295874444461016]
								}, {
									"case":	203,
									"scores":	[-4.295874444461016]
								}, {
									"case":	204,
									"scores":	[-4.295874444461016]
								}, {
									"case":	205,
									"scores":	[-4.295874444461016]
								}, {
									"case":	206,
									"scores":	[-4.295874444461016]
								}, {
									"case":	207,
									"scores":	[-4.295874444461016]
								}, {
									"case":	208,
									"scores":	[-4.295874444461016]
								}, {
									"case":	209,
									"scores":	[-4.295874444461016]
								}, {
									"case":	210,
									"scores":	[-4.295874444461016]
								}, {
									"case":	211,
									"scores":	[-4.295874444461016]
								}, {
									"case":	212,
									"scores":	[-4.295874444461016]
								}, {
									"case":	213,
									"scores":	[-4.295874444461016]
								}, {
									"case":	214,
									"scores":	[-4.295874444461016]
								}, {
									"case":	215,
									"scores":	[-4.295874444461016]
								}, {
									"case":	216,
									"scores":	[-4.295874444461016]
								}, {
									"case":	217,
									"scores":	[-4.295874444461016]
								}, {
									"case":	218,
									"scores":	[-4.295874444461016]
								}, {
									"case":	219,
									"scores":	[-4.295874444461016]
								}, {
									"case":	220,
									"scores":	[-4.295874444461016]
								}, {
									"case":	221,
									"scores":	[-4.295874444461016]
								}, {
									"case":	222,
									"scores":	[-4.295874444461016]
								}, {
									"case":	223,
									"scores":	[-4.295874444461016]
								}, {
									"case":	224,
									"scores":	[-4.295874444461016]
								}, {
									"case":	225,
									"scores":	[-4.295874444461016]
								}, {
									"case":	226,
									"scores":	[-4.295874444461016]
								}, {
									"case":	227,
									"scores":	[-4.295874444461016]
								}, {
									"case":	228,
									"scores":	[-4.295874444461016]
								}, {
									"case":	229,
									"scores":	[-4.295874444461016]
								}, {
									"case":	230,
									"scores":	[-4.295874444461016]
								}, {
									"case":	231,
									"scores":	[-4.295874444461016]
								}, {
									"case":	232,
									"scores":	[-4.295874444461016]
								}, {
									"case":	233,
									"scores":	[-4.295874444461016]
								}, {
									"case":	234,
									"scores":	[-4.295874444461016]
								}, {
									"case":	235,
									"scores":	[-4.295874444461016]
								}, {
									"case":	236,
									"scores":	[-4.295874444461016]
								}, {
									"case":	237,
									"scores":	[-4.295874444461016]
								}, {
									"case":	238,
									"scores":	[-4.295874444461016]
								}, {
									"case":	239,
									"scores":	[-4.295874444461016]
								}, {
									"case":	240,
									"scores":	[-4.295874444461016]
								}, {
									"case":	241,
									"scores":	[-4.295874444461016]
								}, {
									"case":	242,
									"scores":	[-4.295874444461016]
								}, {
									"case":	243,
									"scores":	[-4.295874444461016]
								}, {
									"case":	244,
									"scores":	[-4.295874444461016]
								}, {
									"case":	245,
									"scores":	[-4.295874444461016]
								}, {
									"case":	246,
									"scores":	[-4.295874444461016]
								}, {
									"case":	247,
									"scores":	[-4.295874444461016]
								}, {
									"case":	248,
									"scores":	[-4.295874444461016]
								}, {
									"case":	249,
									"scores":	[-4.295874444461016]
								}, {
									"case":	250,
									"scores":	[-4.295874444461016]
								}, {
									"case":	251,
									"scores":	[-4.295874444461016]
								}, {
									"case":	252,
									"scores":	[-4.295874444461016]
								}, {
									"case":	253,
									"scores":	[-4.295874444461016]
								}, {
									"case":	254,
									"scores":	[-4.295874444461016]
								}, {
									"case":	255,
									"scores":	[-4.295874444461016]
								}, {
									"case":	256,
									"scores":	[-4.295874444461016]
								}, {
									"case":	257,
									"scores":	[-4.295874444461016]
								}, {
									"case":	258,
									"scores":	[-4.295874444461016]
								}, {
									"case":	259,
									"scores":	[-4.295874444461016]
								}, {
									"case":	260,
									"scores":	[-4.295874444461016]
								}, {
									"case":	261,
									"scores":	[-4.295874444461016]
								}, {
									"case":	262,
									"scores":	[-4.295874444461016]
								}, {
									"case":	263,
									"scores":	[-4.295874444461016]
								}, {
									"case":	264,
									"scores":	[-4.295874444461016]
								}, {
									"case":	265,
									"scores":	[-4.295874444461016]
								}, {
									"case":	266,
									"scores":	[-4.295874444461016]
								}, {
									"case":	267,
									"scores":	[-4.295874444461016]
								}, {
									"case":	268,
									"scores":	[-4.295874444461016]
								}, {
									"case":	269,
									"scores":	[-4.295874444461016]
								}, {
									"case":	270,
									"scores":	[-4.295874444461016]
								}, {
									"case":	271,
									"scores":	[-4.295874444461016]
								}, {
									"case":	272,
									"scores":	[-4.295874444461016]
								}, {
									"case":	273,
									"scores":	[-4.295874444461016]
								}, {
									"case":	274,
									"scores":	[-4.295874444461016]
								}, {
									"case":	275,
									"scores":	[-4.295874444461016]
								}, {
									"case":	276,
									"scores":	[-4.295874444461016]
								}, {
									"case":	277,
									"scores":	[-4.295874444461016]
								}, {
									"case":	278,
									"scores":	[-4.295874444461016]
								}, {
									"case":	279,
									"scores":	[-4.295874444461016]
								}, {
									"case":	280,
									"scores":	[-4.295874444461016]
								}, {
									"case":	281,
									"scores":	[-4.295874444461016]
								}, {
									"case":	282,
									"scores":	[-4.295874444461016]
								}, {
									"case":	283,
									"scores":	[-4.295874444461016]
								}, {
									"case":	284,
									"scores":	[-4.295874444461016]
								}, {
									"case":	285,
									"scores":	[-4.295874444461016]
								}, {
									"case":	286,
									"scores":	[-4.295874444461016]
								}, {
									"case":	287,
									"scores":	[-4.295874444461016]
								}, {
									"case":	288,
									"scores":	[-4.295874444461016]
								}, {
									"case":	289,
									"scores":	[-4.295874444461016]
								}, {
									"case":	290,
									"scores":	[-4.295874444461016]
								}, {
									"case":	291,
									"scores":	[-4.295874444461016]
								}, {
									"case":	292,
									"scores":	[-4.295874444461016]
								}, {
									"case":	293,
									"scores":	[-4.295874444461016]
								}, {
									"case":	294,
									"scores":	[-4.295874444461016]
								}, {
									"case":	295,
									"scores":	[-4.295874444461016]
								}, {
									"case":	296,
									"scores":	[-4.295874444461016]
								}, {
									"case":	297,
									"scores":	[-4.295874444461016]
								}, {
									"case":	298,
									"scores":	[-4.295874444461016]
								}, {
									"case":	299,
									"scores":	[-4.295874444461016]
								}, {
									"case":	300,
									"scores":	[-4.295874444461016]
								}, {
									"case":	301,
									"scores":	[-4.295874444461016]
								}, {
									"case":	302,
									"scores":	[-4.295874444461016]
								}, {
									"case":	303,
									"scores":	[-4.295874444461016]
								}, {
									"case":	304,
									"scores":	[-4.295874444461016]
								}, {
									"case":	305,
									"scores":	[-4.295874444461016]
								}, {
									"case":	306,
									"scores":	[-4.295874444461016]
								}, {
									"case":	307,
									"scores":	[-4.295874444461016]
								}, {
									"case":	308,
									"scores":	[-4.295874444461016]
								}, {
									"case":	309,
									"scores":	[-4.295874444461016]
								}, {
									"case":	310,
									"scores":	[-4.295874444461016]
								}, {
									"case":	311,
									"scores":	[-4.295874444461016]
								}, {
									"case":	312,
									"scores":	[-4.295874444461016]
								}, {
									"case":	313,
									"scores":	[-4.295874444461016]
								}, {
									"case":	314,
									"scores":	[-4.295874444461016]
								}, {
									"case":	315,
									"scores":	[-4.295874444461016]
								}, {
									"case":	316,
									"scores":	[-4.295874444461016]
								}, {
									"case":	317,
									"scores":	[-4.295874444461016]
								}, {
									"case":	318,
									"scores":	[-4.295874444461016]
								}, {
									"case":	319,
									"scores":	[-4.295874444461016]
								}, {
									"case":	320,
									"scores":	[-4.295874444461016]
								}, {
									"case":	321,
									"scores":	[-4.295874444461016]
								}, {
									"case":	322,
									"scores":	[-4.295874444461016]
								}, {
									"case":	323,
									"scores":	[-4.295874444461016]
								}, {
									"case":	324,
									"scores":	[-4.295874444461016]
								}, {
									"case":	325,
									"scores":	[-4.295874444461016]
								}, {
									"case":	326,
									"scores":	[-4.295874444461016]
								}, {
									"case":	327,
									"scores":	[-4.295874444461016]
								}, {
									"case":	328,
									"scores":	[-4.295874444461016]
								}, {
									"case":	329,
									"scores":	[-4.295874444461016]
								}, {
									"case":	330,
									"scores":	[-4.295874444461016]
								}, {
									"case":	331,
									"scores":	[-4.295874444461016]
								}, {
									"case":	332,
									"scores":	[-4.295874444461016]
								}, {
									"case":	333,
									"scores":	[-4.295874444461016]
								}, {
									"case":	334,
									"scores":	[-4.295874444461016]
								}, {
									"case":	335,
									"scores":	[-4.295874444461016]
								}, {
									"case":	336,
									"scores":	[-4.295874444461016]
								}, {
									"case":	337,
									"scores":	[-4.295874444461016]
								}, {
									"case":	338,
									"scores":	[-4.295874444461016]
								}, {
									"case":	339,
									"scores":	[-4.295874444461016]
								}, {
									"case":	340,
									"scores":	[-4.295874444461016]
								}, {
									"case":	341,
									"scores":	[-4.295874444461016]
								}, {
									"case":	342,
									"scores":	[-4.295874444461016]
								}, {
									"case":	343,
									"scores":	[-4.295874444461016]
								}, {
									"case":	344,
									"scores":	[-4.295874444461016]
								}, {
									"case":	345,
									"scores":	[-4.295874444461016]
								}, {
									"case":	346,
									"scores":	[-4.295874444461016]
								}, {
									"case":	347,
									"scores":	[-4.295874444461016]
								}, {
									"case":	348,
									"scores":	[-4.295874444461016]
								}, {
									"case":	349,
									"scores":	[-4.295874444461016]
								}, {
									"case":	350,
									"scores":	[-4.295874444461016]
								}, {
									"case":	351,
									"scores":	[-4.295874444461016]
								}, {
									"case":	352,
									"scores":	[-4.295874444461016]
								}, {
									"case":	353,
									"scores":	[-4.295874444461016]
								}, {
									"case":	354,
									"scores":	[-4.295874444461016]
								}, {
									"case":	355,
									"scores":	[-4.295874444461016]
								}, {
									"case":	356,
									"scores":	[-4.295874444461016]
								}, {
									"case":	357,
									"scores":	[-4.295874444461016]
								}, {
									"case":	358,
									"scores":	[-4.295874444461016]
								}, {
									"case":	359,
									"scores":	[-4.295874444461016]
								}, {
									"case":	360,
									"scores":	[-4.295874444461016]
								}, {
									"case":	361,
									"scores":	[-4.295874444461016]
								}, {
									"case":	362,
									"scores":	[-4.295874444461016]
								}, {
									"case":	363,
									"scores":	[-4.295874444461016]
								}, {
									"case":	364,
									"scores":	[-4.295874444461016]
								}, {
									"case":	365,
									"scores":	[-4.295874444461016]
								}, {
									"case":	366,
									"scores":	[-4.295874444461016]
								}, {
									"case":	367,
									"scores":	[-4.295874444461016]
								}, {
									"case":	368,
									"scores":	[-4.295874444461016]
								}, {
									"case":	369,
									"scores":	[-4.295874444461016]
								}, {
									"case":	370,
									"scores":	[-4.295874444461016]
								}, {
									"case":	371,
									"scores":	[-4.295874444461016]
								}, {
									"case":	372,
									"scores":	[-4.295874444461016]
								}, {
									"case":	373,
									"scores":	[-4.295874444461016]
								}, {
									"case":	374,
									"scores":	[-4.295874444461016]
								}, {
									"case":	375,
									"scores":	[-4.295874444461016]
								}, {
									"case":	376,
									"scores":	[-4.295874444461016]
								}, {
									"case":	377,
									"scores":	[-4.295874444461016]
								}, {
									"case":	378,
									"scores":	[-4.295874444461016]
								}, {
									"case":	379,
									"scores":	[-4.295874444461016]
								}, {
									"case":	380,
									"scores":	[-4.295874444461016]
								}, {
									"case":	381,
									"scores":	[-4.295874444461016]
								}, {
									"case":	382,
									"scores":	[-4.295874444461016]
								}, {
									"case":	383,
									"scores":	[-4.295874444461016]
								}, {
									"case":	384,
									"scores":	[-4.295874444461016]
								}, {
									"case":	385,
									"scores":	[-4.295874444461016]
								}, {
									"case":	386,
									"scores":	[-4.295874444461016]
								}, {
									"case":	387,
									"scores":	[-4.295874444461016]
								}, {
									"case":	388,
									"scores":	[-4.295874444461016]
								}, {
									"case":	389,
									"scores":	[-4.295874444461016]
								}, {
									"case":	390,
									"scores":	[-4.295874444461016]
								}, {
									"case":	391,
									"scores":	[-4.295874444461016]
								}, {
									"case":	392,
									"scores":	[-4.295874444461016]
								}, {
									"case":	393,
									"scores":	[-4.295874444461016]
								}, {
									"case":	394,
									"scores":	[-4.295874444461016]
								}, {
									"case":	395,
									"scores":	[-4.295874444461016]
								}, {
									"case":	396,
									"scores":	[-4.295874444461016]
								}, {
									"case":	397,
									"scores":	[-4.295874444461016]
								}, {
									"case":	398,
									"scores":	[-4.295874444461016]
								}, {
									"case":	399,
									"scores":	[-4.295874444461016]
								}, {
									"case":	400,
									"scores":	[-4.295874444461016]
								}, {
									"case":	401,
									"scores":	[-4.295874444461016]
								}, {
									"case":	402,
									"scores":	[-4.295874444461016]
								}, {
									"case":	403,
									"scores":	[-4.295874444461016]
								}, {
									"case":	404,
									"scores":	[-4.295874444461016]
								}, {
									"case":	405,
									"scores":	[-4.295874444461016]
								}, {
									"case":	406,
									"scores":	[-4.295874444461016]
								}, {
									"case":	407,
									"scores":	[-4.295874444461016]
								}, {
									"case":	408,
									"scores":	[-4.295874444461016]
								}, {
									"case":	409,
									"scores":	[-4.295874444461016]
								}, {
									"case":	410,
									"scores":	[-4.295874444461016]
								}, {
									"case":	411,
									"scores":	[-4.295874444461016]
								}, {
									"case":	412,
									"scores":	[-4.295874444461016]
								}, {
									"case":	413,
									"scores":	[-4.295874444461016]
								}, {
									"case":	414,
									"scores":	[-4.295874444461016]
								}, {
									"case":	415,
									"scores":	[-4.295874444461016]
								}, {
									"case":	416,
									"scores":	[-4.295874444461016]
								}, {
									"case":	417,
									"scores":	[-4.295874444461016]
								}, {
									"case":	418,
									"scores":	[-4.295874444461016]
								}, {
									"case":	419,
									"scores":	[-4.295874444461016]
								}, {
									"case":	420,
									"scores":	[-4.295874444461016]
								}, {
									"case":	421,
									"scores":	[-4.295874444461016]
								}, {
									"case":	422,
									"scores":	[-4.295874444461016]
								}, {
									"case":	423,
									"scores":	[-4.295874444461016]
								}, {
									"case":	424,
									"scores":	[-4.295874444461016]
								}, {
									"case":	425,
									"scores":	[-4.295874444461016]
								}, {
									"case":	426,
									"scores":	[-4.295874444461016]
								}, {
									"case":	427,
									"scores":	[-4.295874444461016]
								}, {
									"case":	428,
									"scores":	[-4.295874444461016]
								}, {
									"case":	429,
									"scores":	[-4.295874444461016]
								}, {
									"case":	430,
									"scores":	[-4.295874444461016]
								}, {
									"case":	431,
									"scores":	[-4.295874444461016]
								}, {
									"case":	432,
									"scores":	[-4.295874444461016]
								}, {
									"case":	433,
									"scores":	[-4.295874444461016]
								}, {
									"case":	434,
									"scores":	[-4.295874444461016]
								}, {
									"case":	435,
									"scores":	[-4.295874444461016]
								}, {
									"case":	436,
									"scores":	[-4.295874444461016]
								}, {
									"case":	437,
									"scores":	[-4.295874444461016]
								}, {
									"case":	438,
									"scores":	[-4.295874444461016]
								}, {
									"case":	439,
									"scores":	[-4.295874444461016]
								}, {
									"case":	440,
									"scores":	[-4.295874444461016]
								}, {
									"case":	441,
									"scores":	[-4.295874444461016]
								}, {
									"case":	442,
									"scores":	[-4.295874444461016]
								}, {
									"case":	443,
									"scores":	[-4.295874444461016]
								}, {
									"case":	444,
									"scores":	[-4.295874444461016]
								}, {
									"case":	445,
									"scores":	[-4.295874444461016]
								}, {
									"case":	446,
									"scores":	[-4.295874444461016]
								}, {
									"case":	447,
									"scores":	[-4.295874444461016]
								}, {
									"case":	448,
									"scores":	[-4.295874444461016]
								}, {
									"case":	449,
									"scores":	[-4.295874444461016]
								}, {
									"case":	450,
									"scores":	[-4.295874444461016]
								}, {
									"case":	451,
									"scores":	[-4.295874444461016]
								}, {
									"case":	452,
									"scores":	[-4.295874444461016]
								}, {
									"case":	453,
									"scores":	[-4.295874444461016]
								}, {
									"case":	454,
									"scores":	[-4.295874444461016]
								}, {
									"case":	455,
									"scores":	[-4.295874444461016]
								}, {
									"case":	456,
									"scores":	[-4.295874444461016]
								}, {
									"case":	457,
									"scores":	[-4.295874444461016]
								}, {
									"case":	458,
									"scores":	[-4.295874444461016]
								}, {
									"case":	459,
									"scores":	[-4.295874444461016]
								}, {
									"case":	460,
									"scores":	[-4.295874444461016]
								}, {
									"case":	461,
									"scores":	[-4.295874444461016]
								}, {
									"case":	462,
									"scores":	[-4.295874444461016]
								}, {
									"case":	463,
									"scores":	[-4.295874444461016]
								}, {
									"case":	464,
									"scores":	[-4.295874444461016]
								}, {
									"case":	465,
									"scores":	[-4.295874444461016]
								}, {
									"case":	466,
									"scores":	[-4.295874444461016]
								}, {
									"case":	467,
									"scores":	[-4.295874444461016]
								}, {
									"case":	468,
									"scores":	[-4.295874444461016]
								}, {
									"case":	469,
									"scores":	[-4.295874444461016]
								}, {
									"case":	470,
									"scores":	[-4.295874444461016]
								}, {
									"case":	471,
									"scores":	[-4.295874444461016]
								}, {
									"case":	472,
									"scores":	[-4.295874444461016]
								}, {
									"case":	473,
									"scores":	[-4.295874444461016]
								}, {
									"case":	474,
									"scores":	[-4.295874444461016]
								}, {
									"case":	475,
									"scores":	[-4.295874444461016]
								}, {
									"case":	476,
									"scores":	[-4.295874444461016]
								}, {
									"case":	477,
									"scores":	[-4.295874444461016]
								}, {
									"case":	478,
									"scores":	[-4.295874444461016]
								}, {
									"case":	479,
									"scores":	[-4.295874444461016]
								}, {
									"case":	480,
									"scores":	[-4.295874444461016]
								}, {
									"case":	481,
									"scores":	[-4.295874444461016]
								}, {
									"case":	482,
									"scores":	[-4.295874444461016]
								}, {
									"case":	483,
									"scores":	[-4.295874444461016]
								}, {
									"case":	484,
									"scores":	[-4.295874444461016]
								}, {
									"case":	485,
									"scores":	[-4.295874444461016]
								}, {
									"case":	486,
									"scores":	[-4.295874444461016]
								}, {
									"case":	487,
									"scores":	[-4.295874444461016]
								}, {
									"case":	488,
									"scores":	[-4.295874444461016]
								}, {
									"case":	489,
									"scores":	[-4.295874444461016]
								}, {
									"case":	490,
									"scores":	[-4.295874444461016]
								}, {
									"case":	491,
									"scores":	[-4.295874444461016]
								}, {
									"case":	492,
									"scores":	[-4.295874444461016]
								}, {
									"case":	493,
									"scores":	[-4.295874444461016]
								}, {
									"case":	494,
									"scores":	[-4.295874444461016]
								}, {
									"case":	495,
									"scores":	[-4.295874444461016]
								}, {
									"case":	496,
									"scores":	[-4.295874444461016]
								}, {
									"case":	497,
									"scores":	[-4.295874444461016]
								}, {
									"case":	498,
									"scores":	[-4.295874444461016]
								}, {
									"case":	499,
									"scores":	[-4.295874444461016]
								}, {
									"case":	500,
									"scores":	[-4.295874444461016]
								}, {
									"case":	501,
									"scores":	[-4.295874444461016]
								}, {
									"case":	502,
									"scores":	[-4.295874444461016]
								}, {
									"case":	503,
									"scores":	[-4.295874444461016]
								}, {
									"case":	504,
									"scores":	[-4.295874444461016]
								}, {
									"case":	505,
									"scores":	[-4.295874444461016]
								}, {
									"case":	506,
									"scores":	[-4.295874444461016]
								}, {
									"case":	507,
									"scores":	[-4.295874444461016]
								}, {
									"case":	508,
									"scores":	[-4.295874444461016]
								}, {
									"case":	509,
									"scores":	[-4.295874444461016]
								}, {
									"case":	510,
									"scores":	[-4.295874444461016]
								}, {
									"case":	511,
									"scores":	[-4.295874444461016]
								}, {
									"case":	512,
									"scores":	[-4.295874444461016]
								}, {
									"case":	513,
									"scores":	[-4.295874444461016]
								}, {
									"case":	514,
									"scores":	[-4.295874444461016]
								}, {
									"case":	515,
									"scores":	[-4.295874444461016]
								}, {
									"case":	516,
									"scores":	[-4.295874444461016]
								}, {
									"case":	517,
									"scores":	[-4.295874444461016]
								}, {
									"case":	518,
									"scores":	[-4.295874444461016]
								}, {
									"case":	519,
									"scores":	[-4.295874444461016]
								}, {
									"case":	520,
									"scores":	[-4.295874444461016]
								}, {
									"case":	521,
									"scores":	[-4.295874444461016]
								}, {
									"case":	522,
									"scores":	[-4.295874444461016]
								}, {
									"case":	523,
									"scores":	[-4.295874444461016]
								}, {
									"case":	524,
									"scores":	[-4.295874444461016]
								}, {
									"case":	525,
									"scores":	[-4.295874444461016]
								}, {
									"case":	526,
									"scores":	[-4.295874444461016]
								}, {
									"case":	527,
									"scores":	[-4.295874444461016]
								}, {
									"case":	528,
									"scores":	[-4.295874444461016]
								}, {
									"case":	529,
									"scores":	[-4.295874444461016]
								}, {
									"case":	530,
									"scores":	[-4.295874444461016]
								}, {
									"case":	531,
									"scores":	[-4.295874444461016]
								}, {
									"case":	532,
									"scores":	[-4.295874444461016]
								}, {
									"case":	533,
									"scores":	[-4.295874444461016]
								}, {
									"case":	534,
									"scores":	[-4.295874444461016]
								}, {
									"case":	535,
									"scores":	[-4.295874444461016]
								}, {
									"case":	536,
									"scores":	[-4.295874444461016]
								}, {
									"case":	537,
									"scores":	[-4.295874444461016]
								}, {
									"case":	538,
									"scores":	[-4.295874444461016]
								}, {
									"case":	539,
									"scores":	[-4.295874444461016]
								}, {
									"case":	540,
									"scores":	[-4.295874444461016]
								}, {
									"case":	541,
									"scores":	[-4.295874444461016]
								}, {
									"case":	542,
									"scores":	[-4.295874444461016]
								}, {
									"case":	543,
									"scores":	[-4.295874444461016]
								}, {
									"case":	544,
									"scores":	[-4.295874444461016]
								}, {
									"case":	545,
									"scores":	[-7.3556805802610157, -7.3556805802610157, -7.0445540475610162, -7.0445540475610162, -7.0445540475610162, -7.0445540475610162, -6.7662827747610157, -5.7297854844610159, -6.5515994444610151, -7.1993179322610157, -7.3529765802610152, -7.0445540475610162, -7.3529765802610152, -7.0445540475610162, -7.0445540475610162, -7.0445540475610162, -7.0445540475610162, -7.1339767475610163, -7.1339767475610163, -7.0445540475610162, -7.0445540475610162, -6.5515994444610151, -7.0445540475610162, -7.0445540475610162, -7.0445540475610162, -7.0445540475610162, -6.5515994444610151, -7.0445540475610162]
								}, {
									"case":	546,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	547,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	548,
									"scores":	[-7.4555887802610155, -7.4555887802610155, -7.144462247561016, -7.144462247561016, -7.144462247561016, -7.144462247561016, -6.8661909747610155, -5.8296936844610157, -6.6515076444610157, -7.2992261322610155, -7.452884780261015, -7.144462247561016, -7.452884780261015, -7.144462247561016, -7.144462247561016, -7.144462247561016, -7.144462247561016, -7.2338849475610161, -7.2338849475610161, -7.144462247561016, -7.144462247561016, -6.6515076444610157, -7.144462247561016, -7.144462247561016, -7.144462247561016, -7.144462247561016, -6.6515076444610157, -7.144462247561016]
								}, {
									"case":	549,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	550,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	551,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	552,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	553,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	554,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	555,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	556,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}, {
									"case":	557,
									"scores":	[-9.7183705802610163, -9.7183705802610163, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.1289727747610172, -8.0924754844610156, -8.9142894444610157, -9.5620079322610145, -9.7156665802610149, -9.4072440475610151, -9.7156665802610149, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4966667475610151, -9.4966667475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -9.4072440475610151, -8.9142894444610157, -9.4072440475610151]
								}]
						}, {
							"switch":	45,
							"types":	[[14], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [7, 8, 9, 10, 11, 12, 13], [], [4, 5, 6]],
							"begin_line":	1380,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (((memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2) || __is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) || __is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && __printf__((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && bcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && printf((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) && !__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1735194311281472, -4.1735194311281472, -5.4824919581281453, -5.4824919581281453, -5.5533846311281456, -4.6011745581281467, -5.4824919581281453, -5.4824919581281453, -5.0011366581281456, -6.202647631128146, -6.3907204311281465, -6.3907204311281465, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.919456958128146, -5.4824919581281453, -5.919456958128146, -5.4824919581281453, -5.4824919581281453, -5.0011366581281456, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.0011366581281456, -5.4824919581281453]
								}, {
									"case":	2,
									"scores":	[-1.2862315141281466, -1.2862315141281466, -2.5952040411281461, -2.5952040411281461, -2.6660967141281464, -1.7138866411281457, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -3.3153597141281463, -3.5034325141281464, -3.5034325141281464, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461]
								}, {
									"case":	3,
									"scores":	[-1.2862315141281466, -1.2862315141281466, -2.5952040411281461, -2.5952040411281461, -2.6660967141281464, -1.7138866411281457, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -3.3153597141281463, -3.5034325141281464, -3.5034325141281464, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-1.2862315141281466, -1.2862315141281466, -2.5952040411281461, -2.5952040411281461, -2.6660967141281464, -1.7138866411281457, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -3.3153597141281463, -3.5034325141281464, -3.5034325141281464, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461]
								}]
						}, {
							"switch":	58,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1380,
							"begin_column":	12,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n        inptr = 0;\n        work = unzip;\n        if (check_zipfile(in) != 0)\n            return -1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n        work = unpack;\n        method = 2;\n    } else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n        work = unlzw;\n        method = 1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1380\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0)) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6512562174610164, -4.6512562174610164, -5.9602287444610162, -5.9602287444610162, -5.9602287444610162, -5.9602287444610162, -6.0311214174610157, -5.0789113444610159, -5.4788734444610157, -6.6803844174610152, -6.8684572174610157, -5.9602287444610162, -6.8684572174610157, -5.9602287444610162, -5.9602287444610162, -5.9602287444610162, -5.9602287444610162, -6.3971937444610152, -6.3971937444610152, -5.9602287444610162, -5.9602287444610162, -5.4788734444610157, -5.9602287444610162, -5.9602287444610162, -5.9602287444610162, -5.9602287444610162, -5.4788734444610157, -5.9602287444610162]
								}, {
									"case":	2,
									"scores":	[-3.049786953161016, -3.049786953161016, -4.3587594801610159, -4.3587594801610159, -4.3587594801610159, -4.3587594801610159, -4.4296521531610153, -3.4774420801610155, -3.8774041801610157, -5.0789151531610157, -5.2669879531610153, -4.3587594801610159, -5.2669879531610153, -4.3587594801610159, -4.3587594801610159, -4.3587594801610159, -4.3587594801610159, -4.7957244801610157, -4.7957244801610157, -4.3587594801610159, -4.3587594801610159, -3.8774041801610157, -4.3587594801610159, -4.3587594801610159, -4.3587594801610159, -4.3587594801610159, -3.8774041801610157, -4.3587594801610159]
								}]
						}]
				}, {
					"line":	1278,
					"switches":	[{
							"switch":	43,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [4, 5, 6, 7, 8, 9, 10], [], [3]],
							"begin_line":	1279,
							"begin_column":	5,
							"end_line":	1410,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1279\", 28, &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(work), sizeof (work), &(flags), sizeof (flags), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet))) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) || __is_neg(\"\", \"L1279\", 28, &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(work), sizeof (work), &(flags), sizeof (flags), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet))) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || __printf__(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || bcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || printf(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.914190083728144, -8.1181592007281456, -6.5468856057281464, -7.914190083728144, -8.1181592007281456, -6.5468856057281464, -10.980748788728148, -10.331485788728147, -9.5042387687281469, -9.5042387687281469, -7.6021771687281454, -11.408563945728147, -11.408563945728147, -8.65655796872815, -9.7126118417281457, -8.56651294172815, -9.6417191687281463, -9.6417191687281463, -8.50255216872815, -7.0140555417281458, -9.6417191687281463, -9.6417191687281463, -9.6417191687281463, -9.6417191687281463, -10.549947641728147, -8.76040176872815, -9.6417191687281463, -9.6417191687281463]
								}, {
									"case":	2,
									"scores":	[-2.8057891894281459, -3.0097583064281457, -1.4384847114281478, -2.8057891894281459, -3.0097583064281457, -1.4384847114281478, -5.8723478944281462, -5.2230848944281458, -4.3958378744281461, -4.3958378744281461, -2.4937762744281455, -6.3001630514281466, -6.3001630514281466, -3.5481570744281461, -4.6042109474281459, -3.4581120474281457, -4.5333182744281455, -4.5333182744281455, -3.3941512744281459, -1.9056546474281459, -4.5333182744281455, -4.5333182744281455, -4.5333182744281455, -4.5333182744281455, -5.4415467474281449, -3.6520008744281456, -4.5333182744281455, -4.5333182744281455]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}]
						}]
				}, {
					"line":	1420,
					"switches":	[]
				}, {
					"line":	1421,
					"switches":	[{
							"switch":	63,
							"types":	[[], [], [], [], [562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], [], [], [], [], [458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], [], [], [], [], [], []],
							"begin_line":	1422,
							"begin_column":	4,
							"end_line":	1422,
							"end_column":	4,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exit_code = (inbyte)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "exiting_signal = (inbyte)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "foreground = (inbyte)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifd = (inbyte)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "imagic1 = (inbyte)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "last_member = (inbyte)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "list = (inbyte)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "method = (inbyte)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_name = (inbyte)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "no_time = (inbyte)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "ofd = (inbyte)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "part_nb = (inbyte)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "quiet = (inbyte)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "remove_ofname_fd = (inbyte)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "save_orig_name = (inbyte)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "to_stdout = (inbyte)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "verbose = (inbyte)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.13425278592086]
								}, {
									"case":	2,
									"scores":	[-4.13425278592086]
								}, {
									"case":	3,
									"scores":	[-4.13425278592086]
								}, {
									"case":	4,
									"scores":	[-4.13425278592086]
								}, {
									"case":	5,
									"scores":	[-4.13425278592086]
								}, {
									"case":	6,
									"scores":	[-4.13425278592086]
								}, {
									"case":	7,
									"scores":	[-4.13425278592086]
								}, {
									"case":	8,
									"scores":	[-4.13425278592086]
								}, {
									"case":	9,
									"scores":	[-4.13425278592086]
								}, {
									"case":	10,
									"scores":	[-4.13425278592086]
								}, {
									"case":	11,
									"scores":	[-4.13425278592086]
								}, {
									"case":	12,
									"scores":	[-4.13425278592086]
								}, {
									"case":	13,
									"scores":	[-4.13425278592086]
								}, {
									"case":	14,
									"scores":	[-4.13425278592086]
								}, {
									"case":	15,
									"scores":	[-4.13425278592086]
								}, {
									"case":	16,
									"scores":	[-4.13425278592086]
								}, {
									"case":	17,
									"scores":	[-4.13425278592086]
								}, {
									"case":	18,
									"scores":	[-4.13425278592086]
								}, {
									"case":	19,
									"scores":	[-4.13425278592086]
								}, {
									"case":	20,
									"scores":	[-4.13425278592086]
								}, {
									"case":	21,
									"scores":	[-4.13425278592086]
								}, {
									"case":	22,
									"scores":	[-4.13425278592086]
								}, {
									"case":	23,
									"scores":	[-4.13425278592086]
								}, {
									"case":	24,
									"scores":	[-4.13425278592086]
								}, {
									"case":	25,
									"scores":	[-4.13425278592086]
								}, {
									"case":	26,
									"scores":	[-4.13425278592086]
								}, {
									"case":	27,
									"scores":	[-4.13425278592086]
								}, {
									"case":	28,
									"scores":	[-4.13425278592086]
								}, {
									"case":	29,
									"scores":	[-4.13425278592086]
								}, {
									"case":	30,
									"scores":	[-4.13425278592086]
								}, {
									"case":	31,
									"scores":	[-4.13425278592086]
								}, {
									"case":	32,
									"scores":	[-4.13425278592086]
								}, {
									"case":	33,
									"scores":	[-4.13425278592086]
								}, {
									"case":	34,
									"scores":	[-4.13425278592086]
								}, {
									"case":	35,
									"scores":	[-4.13425278592086]
								}, {
									"case":	36,
									"scores":	[-4.13425278592086]
								}, {
									"case":	37,
									"scores":	[-4.13425278592086]
								}, {
									"case":	38,
									"scores":	[-4.13425278592086]
								}, {
									"case":	39,
									"scores":	[-4.13425278592086]
								}, {
									"case":	40,
									"scores":	[-4.13425278592086]
								}, {
									"case":	41,
									"scores":	[-4.13425278592086]
								}, {
									"case":	42,
									"scores":	[-4.13425278592086]
								}, {
									"case":	43,
									"scores":	[-4.13425278592086]
								}, {
									"case":	44,
									"scores":	[-4.13425278592086]
								}, {
									"case":	45,
									"scores":	[-4.13425278592086]
								}, {
									"case":	46,
									"scores":	[-4.13425278592086]
								}, {
									"case":	47,
									"scores":	[-4.13425278592086]
								}, {
									"case":	48,
									"scores":	[-4.13425278592086]
								}, {
									"case":	49,
									"scores":	[-4.13425278592086]
								}, {
									"case":	50,
									"scores":	[-4.13425278592086]
								}, {
									"case":	51,
									"scores":	[-4.13425278592086]
								}, {
									"case":	52,
									"scores":	[-4.13425278592086]
								}, {
									"case":	53,
									"scores":	[-4.13425278592086]
								}, {
									"case":	54,
									"scores":	[-4.13425278592086]
								}, {
									"case":	55,
									"scores":	[-4.13425278592086]
								}, {
									"case":	56,
									"scores":	[-4.13425278592086]
								}, {
									"case":	57,
									"scores":	[-4.13425278592086]
								}, {
									"case":	58,
									"scores":	[-4.13425278592086]
								}, {
									"case":	59,
									"scores":	[-4.13425278592086]
								}, {
									"case":	60,
									"scores":	[-4.13425278592086]
								}, {
									"case":	61,
									"scores":	[-4.13425278592086]
								}, {
									"case":	62,
									"scores":	[-4.13425278592086]
								}, {
									"case":	63,
									"scores":	[-4.13425278592086]
								}, {
									"case":	64,
									"scores":	[-4.13425278592086]
								}, {
									"case":	65,
									"scores":	[-4.13425278592086]
								}, {
									"case":	66,
									"scores":	[-4.13425278592086]
								}, {
									"case":	67,
									"scores":	[-4.13425278592086]
								}, {
									"case":	68,
									"scores":	[-4.13425278592086]
								}, {
									"case":	69,
									"scores":	[-4.13425278592086]
								}, {
									"case":	70,
									"scores":	[-4.13425278592086]
								}, {
									"case":	71,
									"scores":	[-4.13425278592086]
								}, {
									"case":	72,
									"scores":	[-4.13425278592086]
								}, {
									"case":	73,
									"scores":	[-4.13425278592086]
								}, {
									"case":	74,
									"scores":	[-4.13425278592086]
								}, {
									"case":	75,
									"scores":	[-4.13425278592086]
								}, {
									"case":	76,
									"scores":	[-4.13425278592086]
								}, {
									"case":	77,
									"scores":	[-4.13425278592086]
								}, {
									"case":	78,
									"scores":	[-4.13425278592086]
								}, {
									"case":	79,
									"scores":	[-4.13425278592086]
								}, {
									"case":	80,
									"scores":	[-4.13425278592086]
								}, {
									"case":	81,
									"scores":	[-4.13425278592086]
								}, {
									"case":	82,
									"scores":	[-4.13425278592086]
								}, {
									"case":	83,
									"scores":	[-4.13425278592086]
								}, {
									"case":	84,
									"scores":	[-4.13425278592086]
								}, {
									"case":	85,
									"scores":	[-4.13425278592086]
								}, {
									"case":	86,
									"scores":	[-4.13425278592086]
								}, {
									"case":	87,
									"scores":	[-4.13425278592086]
								}, {
									"case":	88,
									"scores":	[-4.13425278592086]
								}, {
									"case":	89,
									"scores":	[-4.13425278592086]
								}, {
									"case":	90,
									"scores":	[-4.13425278592086]
								}, {
									"case":	91,
									"scores":	[-4.13425278592086]
								}, {
									"case":	92,
									"scores":	[-4.13425278592086]
								}, {
									"case":	93,
									"scores":	[-4.13425278592086]
								}, {
									"case":	94,
									"scores":	[-4.13425278592086]
								}, {
									"case":	95,
									"scores":	[-4.13425278592086]
								}, {
									"case":	96,
									"scores":	[-4.13425278592086]
								}, {
									"case":	97,
									"scores":	[-4.13425278592086]
								}, {
									"case":	98,
									"scores":	[-4.13425278592086]
								}, {
									"case":	99,
									"scores":	[-4.13425278592086]
								}, {
									"case":	100,
									"scores":	[-4.13425278592086]
								}, {
									"case":	101,
									"scores":	[-4.13425278592086]
								}, {
									"case":	102,
									"scores":	[-4.13425278592086]
								}, {
									"case":	103,
									"scores":	[-4.13425278592086]
								}, {
									"case":	104,
									"scores":	[-4.13425278592086]
								}, {
									"case":	105,
									"scores":	[-4.13425278592086]
								}, {
									"case":	106,
									"scores":	[-4.13425278592086]
								}, {
									"case":	107,
									"scores":	[-4.13425278592086]
								}, {
									"case":	108,
									"scores":	[-4.13425278592086]
								}, {
									"case":	109,
									"scores":	[-4.13425278592086]
								}, {
									"case":	110,
									"scores":	[-4.13425278592086]
								}, {
									"case":	111,
									"scores":	[-4.13425278592086]
								}, {
									"case":	112,
									"scores":	[-4.13425278592086]
								}, {
									"case":	113,
									"scores":	[-4.13425278592086]
								}, {
									"case":	114,
									"scores":	[-4.13425278592086]
								}, {
									"case":	115,
									"scores":	[-4.13425278592086]
								}, {
									"case":	116,
									"scores":	[-4.13425278592086]
								}, {
									"case":	117,
									"scores":	[-4.13425278592086]
								}, {
									"case":	118,
									"scores":	[-4.13425278592086]
								}, {
									"case":	119,
									"scores":	[-4.13425278592086]
								}, {
									"case":	120,
									"scores":	[-4.13425278592086]
								}, {
									"case":	121,
									"scores":	[-4.13425278592086]
								}, {
									"case":	122,
									"scores":	[-4.13425278592086]
								}, {
									"case":	123,
									"scores":	[-4.13425278592086]
								}, {
									"case":	124,
									"scores":	[-4.13425278592086]
								}, {
									"case":	125,
									"scores":	[-4.13425278592086]
								}, {
									"case":	126,
									"scores":	[-4.13425278592086]
								}, {
									"case":	127,
									"scores":	[-4.13425278592086]
								}, {
									"case":	128,
									"scores":	[-4.13425278592086]
								}, {
									"case":	129,
									"scores":	[-4.13425278592086]
								}, {
									"case":	130,
									"scores":	[-4.13425278592086]
								}, {
									"case":	131,
									"scores":	[-4.13425278592086]
								}, {
									"case":	132,
									"scores":	[-4.13425278592086]
								}, {
									"case":	133,
									"scores":	[-4.13425278592086]
								}, {
									"case":	134,
									"scores":	[-4.13425278592086]
								}, {
									"case":	135,
									"scores":	[-4.13425278592086]
								}, {
									"case":	136,
									"scores":	[-4.13425278592086]
								}, {
									"case":	137,
									"scores":	[-4.13425278592086]
								}, {
									"case":	138,
									"scores":	[-4.13425278592086]
								}, {
									"case":	139,
									"scores":	[-4.13425278592086]
								}, {
									"case":	140,
									"scores":	[-4.13425278592086]
								}, {
									"case":	141,
									"scores":	[-4.13425278592086]
								}, {
									"case":	142,
									"scores":	[-4.13425278592086]
								}, {
									"case":	143,
									"scores":	[-4.13425278592086]
								}, {
									"case":	144,
									"scores":	[-4.13425278592086]
								}, {
									"case":	145,
									"scores":	[-4.13425278592086]
								}, {
									"case":	146,
									"scores":	[-4.13425278592086]
								}, {
									"case":	147,
									"scores":	[-4.13425278592086]
								}, {
									"case":	148,
									"scores":	[-4.13425278592086]
								}, {
									"case":	149,
									"scores":	[-4.13425278592086]
								}, {
									"case":	150,
									"scores":	[-4.13425278592086]
								}, {
									"case":	151,
									"scores":	[-4.13425278592086]
								}, {
									"case":	152,
									"scores":	[-4.13425278592086]
								}, {
									"case":	153,
									"scores":	[-4.13425278592086]
								}, {
									"case":	154,
									"scores":	[-4.13425278592086]
								}, {
									"case":	155,
									"scores":	[-4.13425278592086]
								}, {
									"case":	156,
									"scores":	[-4.13425278592086]
								}, {
									"case":	157,
									"scores":	[-4.13425278592086]
								}, {
									"case":	158,
									"scores":	[-4.13425278592086]
								}, {
									"case":	159,
									"scores":	[-4.13425278592086]
								}, {
									"case":	160,
									"scores":	[-4.13425278592086]
								}, {
									"case":	161,
									"scores":	[-4.13425278592086]
								}, {
									"case":	162,
									"scores":	[-4.13425278592086]
								}, {
									"case":	163,
									"scores":	[-4.13425278592086]
								}, {
									"case":	164,
									"scores":	[-4.13425278592086]
								}, {
									"case":	165,
									"scores":	[-4.13425278592086]
								}, {
									"case":	166,
									"scores":	[-4.13425278592086]
								}, {
									"case":	167,
									"scores":	[-4.13425278592086]
								}, {
									"case":	168,
									"scores":	[-4.13425278592086]
								}, {
									"case":	169,
									"scores":	[-4.13425278592086]
								}, {
									"case":	170,
									"scores":	[-4.13425278592086]
								}, {
									"case":	171,
									"scores":	[-4.13425278592086]
								}, {
									"case":	172,
									"scores":	[-4.13425278592086]
								}, {
									"case":	173,
									"scores":	[-4.13425278592086]
								}, {
									"case":	174,
									"scores":	[-4.13425278592086]
								}, {
									"case":	175,
									"scores":	[-4.13425278592086]
								}, {
									"case":	176,
									"scores":	[-4.13425278592086]
								}, {
									"case":	177,
									"scores":	[-4.13425278592086]
								}, {
									"case":	178,
									"scores":	[-4.13425278592086]
								}, {
									"case":	179,
									"scores":	[-4.13425278592086]
								}, {
									"case":	180,
									"scores":	[-4.13425278592086]
								}, {
									"case":	181,
									"scores":	[-4.13425278592086]
								}, {
									"case":	182,
									"scores":	[-4.13425278592086]
								}, {
									"case":	183,
									"scores":	[-4.13425278592086]
								}, {
									"case":	184,
									"scores":	[-4.13425278592086]
								}, {
									"case":	185,
									"scores":	[-4.13425278592086]
								}, {
									"case":	186,
									"scores":	[-4.13425278592086]
								}, {
									"case":	187,
									"scores":	[-4.13425278592086]
								}, {
									"case":	188,
									"scores":	[-4.13425278592086]
								}, {
									"case":	189,
									"scores":	[-4.13425278592086]
								}, {
									"case":	190,
									"scores":	[-4.13425278592086]
								}, {
									"case":	191,
									"scores":	[-4.13425278592086]
								}, {
									"case":	192,
									"scores":	[-4.13425278592086]
								}, {
									"case":	193,
									"scores":	[-4.13425278592086]
								}, {
									"case":	194,
									"scores":	[-4.13425278592086]
								}, {
									"case":	195,
									"scores":	[-4.13425278592086]
								}, {
									"case":	196,
									"scores":	[-4.13425278592086]
								}, {
									"case":	197,
									"scores":	[-4.13425278592086]
								}, {
									"case":	198,
									"scores":	[-4.13425278592086]
								}, {
									"case":	199,
									"scores":	[-4.13425278592086]
								}, {
									"case":	200,
									"scores":	[-4.13425278592086]
								}, {
									"case":	201,
									"scores":	[-4.13425278592086]
								}, {
									"case":	202,
									"scores":	[-4.13425278592086]
								}, {
									"case":	203,
									"scores":	[-4.13425278592086]
								}, {
									"case":	204,
									"scores":	[-4.13425278592086]
								}, {
									"case":	205,
									"scores":	[-4.13425278592086]
								}, {
									"case":	206,
									"scores":	[-4.13425278592086]
								}, {
									"case":	207,
									"scores":	[-4.13425278592086]
								}, {
									"case":	208,
									"scores":	[-4.13425278592086]
								}, {
									"case":	209,
									"scores":	[-4.13425278592086]
								}, {
									"case":	210,
									"scores":	[-4.13425278592086]
								}, {
									"case":	211,
									"scores":	[-4.13425278592086]
								}, {
									"case":	212,
									"scores":	[-4.13425278592086]
								}, {
									"case":	213,
									"scores":	[-4.13425278592086]
								}, {
									"case":	214,
									"scores":	[-4.13425278592086]
								}, {
									"case":	215,
									"scores":	[-4.13425278592086]
								}, {
									"case":	216,
									"scores":	[-4.13425278592086]
								}, {
									"case":	217,
									"scores":	[-4.13425278592086]
								}, {
									"case":	218,
									"scores":	[-4.13425278592086]
								}, {
									"case":	219,
									"scores":	[-4.13425278592086]
								}, {
									"case":	220,
									"scores":	[-4.13425278592086]
								}, {
									"case":	221,
									"scores":	[-4.13425278592086]
								}, {
									"case":	222,
									"scores":	[-4.13425278592086]
								}, {
									"case":	223,
									"scores":	[-4.13425278592086]
								}, {
									"case":	224,
									"scores":	[-4.13425278592086]
								}, {
									"case":	225,
									"scores":	[-4.13425278592086]
								}, {
									"case":	226,
									"scores":	[-4.13425278592086]
								}, {
									"case":	227,
									"scores":	[-4.13425278592086]
								}, {
									"case":	228,
									"scores":	[-4.13425278592086]
								}, {
									"case":	229,
									"scores":	[-4.13425278592086]
								}, {
									"case":	230,
									"scores":	[-4.13425278592086]
								}, {
									"case":	231,
									"scores":	[-4.13425278592086]
								}, {
									"case":	232,
									"scores":	[-4.13425278592086]
								}, {
									"case":	233,
									"scores":	[-4.13425278592086]
								}, {
									"case":	234,
									"scores":	[-4.13425278592086]
								}, {
									"case":	235,
									"scores":	[-4.13425278592086]
								}, {
									"case":	236,
									"scores":	[-4.13425278592086]
								}, {
									"case":	237,
									"scores":	[-4.13425278592086]
								}, {
									"case":	238,
									"scores":	[-4.13425278592086]
								}, {
									"case":	239,
									"scores":	[-4.13425278592086]
								}, {
									"case":	240,
									"scores":	[-4.13425278592086]
								}, {
									"case":	241,
									"scores":	[-4.13425278592086]
								}, {
									"case":	242,
									"scores":	[-4.13425278592086]
								}, {
									"case":	243,
									"scores":	[-4.13425278592086]
								}, {
									"case":	244,
									"scores":	[-4.13425278592086]
								}, {
									"case":	245,
									"scores":	[-4.13425278592086]
								}, {
									"case":	246,
									"scores":	[-4.13425278592086]
								}, {
									"case":	247,
									"scores":	[-4.13425278592086]
								}, {
									"case":	248,
									"scores":	[-4.13425278592086]
								}, {
									"case":	249,
									"scores":	[-4.13425278592086]
								}, {
									"case":	250,
									"scores":	[-4.13425278592086]
								}, {
									"case":	251,
									"scores":	[-4.13425278592086]
								}, {
									"case":	252,
									"scores":	[-4.13425278592086]
								}, {
									"case":	253,
									"scores":	[-4.13425278592086]
								}, {
									"case":	254,
									"scores":	[-4.13425278592086]
								}, {
									"case":	255,
									"scores":	[-4.13425278592086]
								}, {
									"case":	256,
									"scores":	[-4.13425278592086]
								}, {
									"case":	257,
									"scores":	[-4.13425278592086]
								}, {
									"case":	258,
									"scores":	[-4.13425278592086]
								}, {
									"case":	259,
									"scores":	[-4.13425278592086]
								}, {
									"case":	260,
									"scores":	[-4.13425278592086]
								}, {
									"case":	261,
									"scores":	[-4.13425278592086]
								}, {
									"case":	262,
									"scores":	[-4.13425278592086]
								}, {
									"case":	263,
									"scores":	[-4.13425278592086]
								}, {
									"case":	264,
									"scores":	[-4.13425278592086]
								}, {
									"case":	265,
									"scores":	[-4.13425278592086]
								}, {
									"case":	266,
									"scores":	[-4.13425278592086]
								}, {
									"case":	267,
									"scores":	[-4.13425278592086]
								}, {
									"case":	268,
									"scores":	[-4.13425278592086]
								}, {
									"case":	269,
									"scores":	[-4.13425278592086]
								}, {
									"case":	270,
									"scores":	[-4.13425278592086]
								}, {
									"case":	271,
									"scores":	[-4.13425278592086]
								}, {
									"case":	272,
									"scores":	[-4.13425278592086]
								}, {
									"case":	273,
									"scores":	[-4.13425278592086]
								}, {
									"case":	274,
									"scores":	[-4.13425278592086]
								}, {
									"case":	275,
									"scores":	[-4.13425278592086]
								}, {
									"case":	276,
									"scores":	[-4.13425278592086]
								}, {
									"case":	277,
									"scores":	[-4.13425278592086]
								}, {
									"case":	278,
									"scores":	[-4.13425278592086]
								}, {
									"case":	279,
									"scores":	[-4.13425278592086]
								}, {
									"case":	280,
									"scores":	[-4.13425278592086]
								}, {
									"case":	281,
									"scores":	[-4.13425278592086]
								}, {
									"case":	282,
									"scores":	[-4.13425278592086]
								}, {
									"case":	283,
									"scores":	[-4.13425278592086]
								}, {
									"case":	284,
									"scores":	[-4.13425278592086]
								}, {
									"case":	285,
									"scores":	[-4.13425278592086]
								}, {
									"case":	286,
									"scores":	[-4.13425278592086]
								}, {
									"case":	287,
									"scores":	[-4.13425278592086]
								}, {
									"case":	288,
									"scores":	[-4.13425278592086]
								}, {
									"case":	289,
									"scores":	[-4.13425278592086]
								}, {
									"case":	290,
									"scores":	[-4.13425278592086]
								}, {
									"case":	291,
									"scores":	[-4.13425278592086]
								}, {
									"case":	292,
									"scores":	[-4.13425278592086]
								}, {
									"case":	293,
									"scores":	[-4.13425278592086]
								}, {
									"case":	294,
									"scores":	[-4.13425278592086]
								}, {
									"case":	295,
									"scores":	[-4.13425278592086]
								}, {
									"case":	296,
									"scores":	[-4.13425278592086]
								}, {
									"case":	297,
									"scores":	[-4.13425278592086]
								}, {
									"case":	298,
									"scores":	[-4.13425278592086]
								}, {
									"case":	299,
									"scores":	[-4.13425278592086]
								}, {
									"case":	300,
									"scores":	[-4.13425278592086]
								}, {
									"case":	301,
									"scores":	[-4.13425278592086]
								}, {
									"case":	302,
									"scores":	[-4.13425278592086]
								}, {
									"case":	303,
									"scores":	[-4.13425278592086]
								}, {
									"case":	304,
									"scores":	[-4.13425278592086]
								}, {
									"case":	305,
									"scores":	[-4.13425278592086]
								}, {
									"case":	306,
									"scores":	[-4.13425278592086]
								}, {
									"case":	307,
									"scores":	[-4.13425278592086]
								}, {
									"case":	308,
									"scores":	[-4.13425278592086]
								}, {
									"case":	309,
									"scores":	[-4.13425278592086]
								}, {
									"case":	310,
									"scores":	[-4.13425278592086]
								}, {
									"case":	311,
									"scores":	[-4.13425278592086]
								}, {
									"case":	312,
									"scores":	[-4.13425278592086]
								}, {
									"case":	313,
									"scores":	[-4.13425278592086]
								}, {
									"case":	314,
									"scores":	[-4.13425278592086]
								}, {
									"case":	315,
									"scores":	[-4.13425278592086]
								}, {
									"case":	316,
									"scores":	[-4.13425278592086]
								}, {
									"case":	317,
									"scores":	[-4.13425278592086]
								}, {
									"case":	318,
									"scores":	[-4.13425278592086]
								}, {
									"case":	319,
									"scores":	[-4.13425278592086]
								}, {
									"case":	320,
									"scores":	[-4.13425278592086]
								}, {
									"case":	321,
									"scores":	[-4.13425278592086]
								}, {
									"case":	322,
									"scores":	[-4.13425278592086]
								}, {
									"case":	323,
									"scores":	[-4.13425278592086]
								}, {
									"case":	324,
									"scores":	[-4.13425278592086]
								}, {
									"case":	325,
									"scores":	[-4.13425278592086]
								}, {
									"case":	326,
									"scores":	[-4.13425278592086]
								}, {
									"case":	327,
									"scores":	[-4.13425278592086]
								}, {
									"case":	328,
									"scores":	[-4.13425278592086]
								}, {
									"case":	329,
									"scores":	[-4.13425278592086]
								}, {
									"case":	330,
									"scores":	[-4.13425278592086]
								}, {
									"case":	331,
									"scores":	[-4.13425278592086]
								}, {
									"case":	332,
									"scores":	[-4.13425278592086]
								}, {
									"case":	333,
									"scores":	[-4.13425278592086]
								}, {
									"case":	334,
									"scores":	[-4.13425278592086]
								}, {
									"case":	335,
									"scores":	[-4.13425278592086]
								}, {
									"case":	336,
									"scores":	[-4.13425278592086]
								}, {
									"case":	337,
									"scores":	[-4.13425278592086]
								}, {
									"case":	338,
									"scores":	[-4.13425278592086]
								}, {
									"case":	339,
									"scores":	[-4.13425278592086]
								}, {
									"case":	340,
									"scores":	[-4.13425278592086]
								}, {
									"case":	341,
									"scores":	[-4.13425278592086]
								}, {
									"case":	342,
									"scores":	[-4.13425278592086]
								}, {
									"case":	343,
									"scores":	[-4.13425278592086]
								}, {
									"case":	344,
									"scores":	[-4.13425278592086]
								}, {
									"case":	345,
									"scores":	[-4.13425278592086]
								}, {
									"case":	346,
									"scores":	[-4.13425278592086]
								}, {
									"case":	347,
									"scores":	[-4.13425278592086]
								}, {
									"case":	348,
									"scores":	[-4.13425278592086]
								}, {
									"case":	349,
									"scores":	[-4.13425278592086]
								}, {
									"case":	350,
									"scores":	[-4.13425278592086]
								}, {
									"case":	351,
									"scores":	[-4.13425278592086]
								}, {
									"case":	352,
									"scores":	[-4.13425278592086]
								}, {
									"case":	353,
									"scores":	[-4.13425278592086]
								}, {
									"case":	354,
									"scores":	[-4.13425278592086]
								}, {
									"case":	355,
									"scores":	[-4.13425278592086]
								}, {
									"case":	356,
									"scores":	[-4.13425278592086]
								}, {
									"case":	357,
									"scores":	[-4.13425278592086]
								}, {
									"case":	358,
									"scores":	[-4.13425278592086]
								}, {
									"case":	359,
									"scores":	[-4.13425278592086]
								}, {
									"case":	360,
									"scores":	[-4.13425278592086]
								}, {
									"case":	361,
									"scores":	[-4.13425278592086]
								}, {
									"case":	362,
									"scores":	[-4.13425278592086]
								}, {
									"case":	363,
									"scores":	[-4.13425278592086]
								}, {
									"case":	364,
									"scores":	[-4.13425278592086]
								}, {
									"case":	365,
									"scores":	[-4.13425278592086]
								}, {
									"case":	366,
									"scores":	[-4.13425278592086]
								}, {
									"case":	367,
									"scores":	[-4.13425278592086]
								}, {
									"case":	368,
									"scores":	[-4.13425278592086]
								}, {
									"case":	369,
									"scores":	[-4.13425278592086]
								}, {
									"case":	370,
									"scores":	[-4.13425278592086]
								}, {
									"case":	371,
									"scores":	[-4.13425278592086]
								}, {
									"case":	372,
									"scores":	[-4.13425278592086]
								}, {
									"case":	373,
									"scores":	[-4.13425278592086]
								}, {
									"case":	374,
									"scores":	[-4.13425278592086]
								}, {
									"case":	375,
									"scores":	[-4.13425278592086]
								}, {
									"case":	376,
									"scores":	[-4.13425278592086]
								}, {
									"case":	377,
									"scores":	[-4.13425278592086]
								}, {
									"case":	378,
									"scores":	[-4.13425278592086]
								}, {
									"case":	379,
									"scores":	[-4.13425278592086]
								}, {
									"case":	380,
									"scores":	[-4.13425278592086]
								}, {
									"case":	381,
									"scores":	[-4.13425278592086]
								}, {
									"case":	382,
									"scores":	[-4.13425278592086]
								}, {
									"case":	383,
									"scores":	[-4.13425278592086]
								}, {
									"case":	384,
									"scores":	[-4.13425278592086]
								}, {
									"case":	385,
									"scores":	[-4.13425278592086]
								}, {
									"case":	386,
									"scores":	[-4.13425278592086]
								}, {
									"case":	387,
									"scores":	[-4.13425278592086]
								}, {
									"case":	388,
									"scores":	[-4.13425278592086]
								}, {
									"case":	389,
									"scores":	[-4.13425278592086]
								}, {
									"case":	390,
									"scores":	[-4.13425278592086]
								}, {
									"case":	391,
									"scores":	[-4.13425278592086]
								}, {
									"case":	392,
									"scores":	[-4.13425278592086]
								}, {
									"case":	393,
									"scores":	[-4.13425278592086]
								}, {
									"case":	394,
									"scores":	[-4.13425278592086]
								}, {
									"case":	395,
									"scores":	[-4.13425278592086]
								}, {
									"case":	396,
									"scores":	[-4.13425278592086]
								}, {
									"case":	397,
									"scores":	[-4.13425278592086]
								}, {
									"case":	398,
									"scores":	[-4.13425278592086]
								}, {
									"case":	399,
									"scores":	[-4.13425278592086]
								}, {
									"case":	400,
									"scores":	[-4.13425278592086]
								}, {
									"case":	401,
									"scores":	[-4.13425278592086]
								}, {
									"case":	402,
									"scores":	[-4.13425278592086]
								}, {
									"case":	403,
									"scores":	[-4.13425278592086]
								}, {
									"case":	404,
									"scores":	[-4.13425278592086]
								}, {
									"case":	405,
									"scores":	[-4.13425278592086]
								}, {
									"case":	406,
									"scores":	[-4.13425278592086]
								}, {
									"case":	407,
									"scores":	[-4.13425278592086]
								}, {
									"case":	408,
									"scores":	[-4.13425278592086]
								}, {
									"case":	409,
									"scores":	[-4.13425278592086]
								}, {
									"case":	410,
									"scores":	[-4.13425278592086]
								}, {
									"case":	411,
									"scores":	[-4.13425278592086]
								}, {
									"case":	412,
									"scores":	[-4.13425278592086]
								}, {
									"case":	413,
									"scores":	[-4.13425278592086]
								}, {
									"case":	414,
									"scores":	[-4.13425278592086]
								}, {
									"case":	415,
									"scores":	[-4.13425278592086]
								}, {
									"case":	416,
									"scores":	[-4.13425278592086]
								}, {
									"case":	417,
									"scores":	[-4.13425278592086]
								}, {
									"case":	418,
									"scores":	[-4.13425278592086]
								}, {
									"case":	419,
									"scores":	[-4.13425278592086]
								}, {
									"case":	420,
									"scores":	[-4.13425278592086]
								}, {
									"case":	421,
									"scores":	[-4.13425278592086]
								}, {
									"case":	422,
									"scores":	[-4.13425278592086]
								}, {
									"case":	423,
									"scores":	[-4.13425278592086]
								}, {
									"case":	424,
									"scores":	[-4.13425278592086]
								}, {
									"case":	425,
									"scores":	[-4.13425278592086]
								}, {
									"case":	426,
									"scores":	[-4.13425278592086]
								}, {
									"case":	427,
									"scores":	[-4.13425278592086]
								}, {
									"case":	428,
									"scores":	[-4.13425278592086]
								}, {
									"case":	429,
									"scores":	[-4.13425278592086]
								}, {
									"case":	430,
									"scores":	[-4.13425278592086]
								}, {
									"case":	431,
									"scores":	[-4.13425278592086]
								}, {
									"case":	432,
									"scores":	[-4.13425278592086]
								}, {
									"case":	433,
									"scores":	[-4.13425278592086]
								}, {
									"case":	434,
									"scores":	[-4.13425278592086]
								}, {
									"case":	435,
									"scores":	[-4.13425278592086]
								}, {
									"case":	436,
									"scores":	[-4.13425278592086]
								}, {
									"case":	437,
									"scores":	[-4.13425278592086]
								}, {
									"case":	438,
									"scores":	[-4.13425278592086]
								}, {
									"case":	439,
									"scores":	[-4.13425278592086]
								}, {
									"case":	440,
									"scores":	[-4.13425278592086]
								}, {
									"case":	441,
									"scores":	[-4.13425278592086]
								}, {
									"case":	442,
									"scores":	[-4.13425278592086]
								}, {
									"case":	443,
									"scores":	[-4.13425278592086]
								}, {
									"case":	444,
									"scores":	[-4.13425278592086]
								}, {
									"case":	445,
									"scores":	[-4.13425278592086]
								}, {
									"case":	446,
									"scores":	[-4.13425278592086]
								}, {
									"case":	447,
									"scores":	[-4.13425278592086]
								}, {
									"case":	448,
									"scores":	[-4.13425278592086]
								}, {
									"case":	449,
									"scores":	[-4.13425278592086]
								}, {
									"case":	450,
									"scores":	[-4.13425278592086]
								}, {
									"case":	451,
									"scores":	[-4.13425278592086]
								}, {
									"case":	452,
									"scores":	[-4.13425278592086]
								}, {
									"case":	453,
									"scores":	[-4.13425278592086]
								}, {
									"case":	454,
									"scores":	[-4.13425278592086]
								}, {
									"case":	455,
									"scores":	[-4.13425278592086]
								}, {
									"case":	456,
									"scores":	[-4.13425278592086]
								}, {
									"case":	457,
									"scores":	[-4.13425278592086]
								}, {
									"case":	458,
									"scores":	[-4.13425278592086]
								}, {
									"case":	459,
									"scores":	[-4.13425278592086]
								}, {
									"case":	460,
									"scores":	[-4.13425278592086]
								}, {
									"case":	461,
									"scores":	[-4.13425278592086]
								}, {
									"case":	462,
									"scores":	[-4.13425278592086]
								}, {
									"case":	463,
									"scores":	[-4.13425278592086]
								}, {
									"case":	464,
									"scores":	[-4.13425278592086]
								}, {
									"case":	465,
									"scores":	[-4.13425278592086]
								}, {
									"case":	466,
									"scores":	[-4.13425278592086]
								}, {
									"case":	467,
									"scores":	[-4.13425278592086]
								}, {
									"case":	468,
									"scores":	[-4.13425278592086]
								}, {
									"case":	469,
									"scores":	[-4.13425278592086]
								}, {
									"case":	470,
									"scores":	[-4.13425278592086]
								}, {
									"case":	471,
									"scores":	[-4.13425278592086]
								}, {
									"case":	472,
									"scores":	[-4.13425278592086]
								}, {
									"case":	473,
									"scores":	[-4.13425278592086]
								}, {
									"case":	474,
									"scores":	[-4.13425278592086]
								}, {
									"case":	475,
									"scores":	[-4.13425278592086]
								}, {
									"case":	476,
									"scores":	[-4.13425278592086]
								}, {
									"case":	477,
									"scores":	[-4.13425278592086]
								}, {
									"case":	478,
									"scores":	[-4.13425278592086]
								}, {
									"case":	479,
									"scores":	[-4.13425278592086]
								}, {
									"case":	480,
									"scores":	[-4.13425278592086]
								}, {
									"case":	481,
									"scores":	[-4.13425278592086]
								}, {
									"case":	482,
									"scores":	[-4.13425278592086]
								}, {
									"case":	483,
									"scores":	[-4.13425278592086]
								}, {
									"case":	484,
									"scores":	[-4.13425278592086]
								}, {
									"case":	485,
									"scores":	[-4.13425278592086]
								}, {
									"case":	486,
									"scores":	[-4.13425278592086]
								}, {
									"case":	487,
									"scores":	[-4.13425278592086]
								}, {
									"case":	488,
									"scores":	[-4.13425278592086]
								}, {
									"case":	489,
									"scores":	[-4.13425278592086]
								}, {
									"case":	490,
									"scores":	[-4.13425278592086]
								}, {
									"case":	491,
									"scores":	[-4.13425278592086]
								}, {
									"case":	492,
									"scores":	[-4.13425278592086]
								}, {
									"case":	493,
									"scores":	[-4.13425278592086]
								}, {
									"case":	494,
									"scores":	[-4.13425278592086]
								}, {
									"case":	495,
									"scores":	[-4.13425278592086]
								}, {
									"case":	496,
									"scores":	[-4.13425278592086]
								}, {
									"case":	497,
									"scores":	[-4.13425278592086]
								}, {
									"case":	498,
									"scores":	[-4.13425278592086]
								}, {
									"case":	499,
									"scores":	[-4.13425278592086]
								}, {
									"case":	500,
									"scores":	[-4.13425278592086]
								}, {
									"case":	501,
									"scores":	[-4.13425278592086]
								}, {
									"case":	502,
									"scores":	[-4.13425278592086]
								}, {
									"case":	503,
									"scores":	[-4.13425278592086]
								}, {
									"case":	504,
									"scores":	[-4.13425278592086]
								}, {
									"case":	505,
									"scores":	[-4.13425278592086]
								}, {
									"case":	506,
									"scores":	[-4.13425278592086]
								}, {
									"case":	507,
									"scores":	[-4.13425278592086]
								}, {
									"case":	508,
									"scores":	[-4.13425278592086]
								}, {
									"case":	509,
									"scores":	[-4.13425278592086]
								}, {
									"case":	510,
									"scores":	[-4.13425278592086]
								}, {
									"case":	511,
									"scores":	[-4.13425278592086]
								}, {
									"case":	512,
									"scores":	[-4.13425278592086]
								}, {
									"case":	513,
									"scores":	[-4.13425278592086]
								}, {
									"case":	514,
									"scores":	[-4.13425278592086]
								}, {
									"case":	515,
									"scores":	[-4.13425278592086]
								}, {
									"case":	516,
									"scores":	[-4.13425278592086]
								}, {
									"case":	517,
									"scores":	[-4.13425278592086]
								}, {
									"case":	518,
									"scores":	[-4.13425278592086]
								}, {
									"case":	519,
									"scores":	[-4.13425278592086]
								}, {
									"case":	520,
									"scores":	[-4.13425278592086]
								}, {
									"case":	521,
									"scores":	[-4.13425278592086]
								}, {
									"case":	522,
									"scores":	[-4.13425278592086]
								}, {
									"case":	523,
									"scores":	[-4.13425278592086]
								}, {
									"case":	524,
									"scores":	[-4.13425278592086]
								}, {
									"case":	525,
									"scores":	[-4.13425278592086]
								}, {
									"case":	526,
									"scores":	[-4.13425278592086]
								}, {
									"case":	527,
									"scores":	[-4.13425278592086]
								}, {
									"case":	528,
									"scores":	[-4.13425278592086]
								}, {
									"case":	529,
									"scores":	[-4.13425278592086]
								}, {
									"case":	530,
									"scores":	[-4.13425278592086]
								}, {
									"case":	531,
									"scores":	[-4.13425278592086]
								}, {
									"case":	532,
									"scores":	[-4.13425278592086]
								}, {
									"case":	533,
									"scores":	[-4.13425278592086]
								}, {
									"case":	534,
									"scores":	[-4.13425278592086]
								}, {
									"case":	535,
									"scores":	[-4.13425278592086]
								}, {
									"case":	536,
									"scores":	[-4.13425278592086]
								}, {
									"case":	537,
									"scores":	[-4.13425278592086]
								}, {
									"case":	538,
									"scores":	[-4.13425278592086]
								}, {
									"case":	539,
									"scores":	[-4.13425278592086]
								}, {
									"case":	540,
									"scores":	[-4.13425278592086]
								}, {
									"case":	541,
									"scores":	[-4.13425278592086]
								}, {
									"case":	542,
									"scores":	[-4.13425278592086]
								}, {
									"case":	543,
									"scores":	[-4.13425278592086]
								}, {
									"case":	544,
									"scores":	[-4.13425278592086]
								}, {
									"case":	545,
									"scores":	[-4.13425278592086]
								}, {
									"case":	546,
									"scores":	[-4.13425278592086]
								}, {
									"case":	547,
									"scores":	[-4.13425278592086]
								}, {
									"case":	548,
									"scores":	[-4.13425278592086]
								}, {
									"case":	549,
									"scores":	[-4.13425278592086]
								}, {
									"case":	550,
									"scores":	[-4.13425278592086]
								}, {
									"case":	551,
									"scores":	[-4.13425278592086]
								}, {
									"case":	552,
									"scores":	[-4.13425278592086]
								}, {
									"case":	553,
									"scores":	[-4.13425278592086]
								}, {
									"case":	554,
									"scores":	[-4.13425278592086]
								}, {
									"case":	555,
									"scores":	[-4.13425278592086]
								}, {
									"case":	556,
									"scores":	[-4.13425278592086]
								}, {
									"case":	557,
									"scores":	[-4.13425278592086]
								}, {
									"case":	558,
									"scores":	[-4.13425278592086]
								}, {
									"case":	559,
									"scores":	[-4.13425278592086]
								}, {
									"case":	560,
									"scores":	[-4.13425278592086]
								}, {
									"case":	561,
									"scores":	[-4.13425278592086]
								}, {
									"case":	562,
									"scores":	[-4.84328545792086, -5.43304877512086, -4.48735817102086, -4.19212834302086, -4.48735817102086, -4.19212834302086, -6.43634935102086, -6.43634935102086, -6.67434305102086, -7.68794136482086, -6.43634935102086, -6.43634935102086, -6.67434305102086, -7.68794136482086, -6.43634935102086, -6.43634935102086, -6.43634935102086, -6.43634935102086, -6.43634935102086, -6.43634935102086, -6.43634935102086, -6.43634935102086, -6.43634935102086, -6.12065758792086, -6.43634935102086, -5.94339474792086, -6.43634935102086, -5.94339474792086, -6.43634935102086]
								}, {
									"case":	563,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	564,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	565,
									"scores":	[-4.94319365792086, -5.53295697512086, -4.58726637102086, -4.29203654302086, -4.58726637102086, -4.29203654302086, -6.53625755102086, -6.53625755102086, -6.77425125102086, -7.78784956482086, -6.53625755102086, -6.53625755102086, -6.77425125102086, -7.78784956482086, -6.53625755102086, -6.53625755102086, -6.53625755102086, -6.53625755102086, -6.53625755102086, -6.53625755102086, -6.53625755102086, -6.53625755102086, -6.53625755102086, -6.22056578792086, -6.53625755102086, -6.04330294792086, -6.53625755102086, -6.04330294792086, -6.53625755102086]
								}, {
									"case":	566,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	567,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	568,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	569,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	570,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	571,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	572,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	573,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}, {
									"case":	574,
									"scores":	[-7.20597545792086, -7.79573877512086, -6.85004817102086, -6.55481834302086, -6.85004817102086, -6.55481834302086, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -9.03703305102086, -10.050631364820861, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.79903935102086, -8.48334758792086, -8.79903935102086, -8.30608474792086, -8.79903935102086, -8.30608474792086, -8.79903935102086]
								}]
						}, {
							"switch":	64,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1422,
							"begin_column":	6,
							"end_line":	1423,
							"end_column":	8,
							"patch_codes":	["if (!__is_neg(\"\", \"L1422\", 29, &(imagic1), sizeof (imagic1), &(inbyte), sizeof (inbyte), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n        continue;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.73507523892086, -5.05149593892086, -5.07726353892086, -4.83458017192086, -5.07726353892086, -4.83458017192086, -6.09845356592086, -6.09845356592086, -5.96097316592086, -5.64809734292086, -6.09845356592086, -6.09845356592086, -5.96097316592086, -5.64809734292086, -6.09845356592086, -6.09845356592086, -6.09845356592086, -6.09845356592086, -6.09845356592086, -6.09845356592086, -6.09845356592086, -6.09845356592086, -6.09845356592086, -5.88187976592086, -6.09845356592086, -5.61709826592086, -6.09845356592086, -5.61709826592086, -6.09845356592086]
								}]
						}]
				}, {
					"line":	1425,
					"switches":	[{
							"switch":	67,
							"types":	[[], [], [], [], [562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], [], [], [], [], [458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], [], [], [], [], [], []],
							"begin_line":	1426,
							"begin_column":	1,
							"end_line":	1426,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exit_code = (inbyte)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "exiting_signal = (inbyte)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "foreground = (inbyte)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifd = (inbyte)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "imagic1 = (inbyte)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "last_member = (inbyte)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "list = (inbyte)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "method = (inbyte)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_name = (inbyte)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "no_time = (inbyte)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "ofd = (inbyte)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "part_nb = (inbyte)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "quiet = (inbyte)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "remove_ofname_fd = (inbyte)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "save_orig_name = (inbyte)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "to_stdout = (inbyte)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "verbose = (inbyte)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	2,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	3,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	4,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	5,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	6,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	7,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	8,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	9,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	10,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	11,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	12,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	13,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	14,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	15,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	16,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	17,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	18,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	19,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	20,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	21,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	22,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	23,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	24,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	25,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	26,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	27,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	28,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	29,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	30,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	31,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	32,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	33,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	34,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	35,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	36,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	37,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	38,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	39,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	40,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	41,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	42,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	43,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	44,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	45,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	46,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	47,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	48,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	49,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	50,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	51,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	52,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	53,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	54,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	55,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	56,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	57,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	58,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	59,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	60,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	61,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	62,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	63,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	64,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	65,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	66,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	67,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	68,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	69,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	70,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	71,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	72,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	73,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	74,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	75,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	76,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	77,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	78,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	79,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	80,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	81,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	82,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	83,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	84,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	85,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	86,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	87,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	88,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	89,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	90,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	91,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	92,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	93,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	94,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	95,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	96,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	97,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	98,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	99,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	100,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	101,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	102,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	103,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	104,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	105,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	106,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	107,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	108,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	109,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	110,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	111,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	112,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	113,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	114,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	115,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	116,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	117,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	118,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	119,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	120,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	121,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	122,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	123,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	124,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	125,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	126,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	127,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	128,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	129,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	130,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	131,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	132,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	133,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	134,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	135,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	136,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	137,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	138,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	139,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	140,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	141,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	142,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	143,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	144,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	145,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	146,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	147,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	148,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	149,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	150,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	151,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	152,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	153,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	154,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	155,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	156,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	157,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	158,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	159,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	160,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	161,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	162,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	163,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	164,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	165,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	166,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	167,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	168,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	169,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	170,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	171,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	172,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	173,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	174,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	175,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	176,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	177,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	178,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	179,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	180,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	181,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	182,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	183,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	184,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	185,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	186,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	187,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	188,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	189,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	190,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	191,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	192,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	193,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	194,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	195,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	196,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	197,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	198,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	199,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	200,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	201,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	202,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	203,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	204,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	205,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	206,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	207,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	208,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	209,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	210,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	211,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	212,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	213,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	214,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	215,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	216,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	217,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	218,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	219,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	220,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	221,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	222,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	223,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	224,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	225,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	226,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	227,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	228,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	229,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	230,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	231,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	232,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	233,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	234,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	235,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	236,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	237,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	238,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	239,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	240,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	241,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	242,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	243,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	244,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	245,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	246,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	247,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	248,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	249,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	250,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	251,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	252,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	253,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	254,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	255,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	256,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	257,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	258,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	259,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	260,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	261,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	262,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	263,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	264,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	265,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	266,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	267,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	268,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	269,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	270,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	271,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	272,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	273,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	274,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	275,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	276,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	277,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	278,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	279,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	280,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	281,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	282,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	283,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	284,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	285,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	286,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	287,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	288,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	289,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	290,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	291,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	292,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	293,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	294,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	295,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	296,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	297,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	298,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	299,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	300,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	301,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	302,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	303,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	304,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	305,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	306,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	307,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	308,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	309,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	310,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	311,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	312,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	313,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	314,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	315,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	316,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	317,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	318,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	319,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	320,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	321,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	322,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	323,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	324,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	325,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	326,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	327,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	328,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	329,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	330,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	331,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	332,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	333,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	334,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	335,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	336,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	337,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	338,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	339,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	340,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	341,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	342,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	343,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	344,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	345,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	346,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	347,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	348,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	349,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	350,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	351,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	352,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	353,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	354,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	355,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	356,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	357,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	358,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	359,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	360,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	361,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	362,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	363,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	364,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	365,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	366,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	367,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	368,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	369,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	370,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	371,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	372,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	373,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	374,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	375,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	376,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	377,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	378,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	379,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	380,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	381,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	382,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	383,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	384,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	385,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	386,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	387,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	388,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	389,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	390,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	391,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	392,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	393,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	394,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	395,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	396,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	397,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	398,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	399,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	400,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	401,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	402,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	403,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	404,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	405,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	406,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	407,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	408,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	409,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	410,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	411,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	412,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	413,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	414,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	415,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	416,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	417,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	418,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	419,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	420,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	421,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	422,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	423,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	424,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	425,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	426,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	427,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	428,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	429,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	430,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	431,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	432,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	433,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	434,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	435,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	436,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	437,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	438,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	439,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	440,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	441,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	442,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	443,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	444,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	445,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	446,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	447,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	448,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	449,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	450,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	451,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	452,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	453,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	454,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	455,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	456,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	457,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	458,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	459,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	460,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	461,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	462,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	463,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	464,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	465,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	466,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	467,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	468,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	469,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	470,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	471,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	472,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	473,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	474,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	475,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	476,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	477,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	478,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	479,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	480,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	481,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	482,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	483,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	484,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	485,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	486,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	487,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	488,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	489,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	490,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	491,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	492,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	493,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	494,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	495,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	496,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	497,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	498,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	499,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	500,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	501,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	502,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	503,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	504,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	505,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	506,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	507,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	508,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	509,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	510,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	511,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	512,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	513,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	514,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	515,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	516,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	517,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	518,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	519,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	520,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	521,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	522,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	523,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	524,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	525,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	526,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	527,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	528,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	529,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	530,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	531,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	532,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	533,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	534,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	535,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	536,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	537,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	538,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	539,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	540,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	541,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	542,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	543,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	544,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	545,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	546,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	547,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	548,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	549,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	550,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	551,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	552,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	553,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	554,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	555,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	556,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	557,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	558,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	559,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	560,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	561,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	562,
									"scores":	[-7.1102452670683, -7.1102452670683, -6.2005911670683016, -7.2677131517683, -7.1102452670683, -7.1102452670683, -6.2005911670683016, -7.2677131517683, -6.6172906639683013, -6.6172906639683013, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -7.1102452670683, -6.7945535039683, -7.1102452670683, -6.6172906639683013, -7.1102452670683, -6.6172906639683013, -7.1102452670683]
								}, {
									"case":	563,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	564,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	565,
									"scores":	[-7.2101534670683014, -7.2101534670683014, -6.3004993670683014, -7.3676213517683, -7.2101534670683014, -7.2101534670683014, -6.3004993670683014, -7.3676213517683, -6.7171988639683, -6.7171988639683, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -7.2101534670683014, -6.8944617039683, -7.2101534670683014, -6.7171988639683, -7.2101534670683014, -6.7171988639683, -7.2101534670683014]
								}, {
									"case":	566,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	567,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	568,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	569,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	570,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	571,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	572,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	573,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}, {
									"case":	574,
									"scores":	[-9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -9.4729352670683, -9.4729352670683, -8.5632811670683, -9.6304031517683, -8.9799806639683, -8.9799806639683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.4729352670683, -9.1572435039683, -9.4729352670683, -8.9799806639683, -9.4729352670683, -8.9799806639683, -9.4729352670683]
								}]
						}, {
							"switch":	68,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1426,
							"begin_column":	3,
							"end_line":	1427,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    if (!quiet)\n        rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n    if (exit_code == 0)\n        exit_code = 2;\n}\n", "if ((verbose) || __is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    if (!quiet)\n        rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n    if (exit_code == 0)\n        exit_code = 2;\n}\n", "if ((verbose) && !__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    if (!quiet)\n        rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n    if (exit_code == 0)\n        exit_code = 2;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7129221201281464, -5.7129221201281464, -5.4851435201281467, -4.2158767931281469, -5.7129221201281464, -5.7129221201281464, -5.4851435201281467, -4.2158767931281469, -5.2315668201281458, -5.2315668201281458, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.7129221201281464, -5.4963483201281456, -5.7129221201281464, -5.2315668201281458, -5.7129221201281464, -5.2315668201281458, -5.7129221201281464]
								}, {
									"case":	2,
									"scores":	[-3.9495915054281459, -3.9495915054281459, -3.7218129054281466, -2.4525461784281459, -3.9495915054281459, -3.9495915054281459, -3.7218129054281466, -2.4525461784281459, -3.4682362054281461, -3.4682362054281461, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.7330177054281459, -3.9495915054281459, -3.4682362054281461, -3.9495915054281459, -3.4682362054281461, -3.9495915054281459]
								}, {
									"case":	3,
									"scores":	[-3.9495915054281459, -3.9495915054281459, -3.7218129054281466, -2.4525461784281459, -3.9495915054281459, -3.9495915054281459, -3.7218129054281466, -2.4525461784281459, -3.4682362054281461, -3.4682362054281461, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.9495915054281459, -3.7330177054281459, -3.9495915054281459, -3.4682362054281461, -3.9495915054281459, -3.4682362054281461, -3.9495915054281459]
								}]
						}, {
							"switch":	69,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1426,
							"begin_column":	3,
							"end_line":	1427,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (verbose) {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n", "if (!__is_neg(\"\", \"L1426\", 29, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (verbose)) {\n    if (!quiet)\n        rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n    if (exit_code == 0)\n        exit_code = 2;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3735839639683016, -5.3735839639683016, -5.1458053639683019, -3.8765386369683013, -5.3735839639683016, -5.3735839639683016, -5.1458053639683019, -3.8765386369683013, -4.8922286639683019, -4.8922286639683019, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.1570101639683017, -5.3735839639683016, -4.8922286639683019, -5.3735839639683016, -4.8922286639683019, -5.3735839639683016]
								}, {
									"case":	2,
									"scores":	[-5.3735839639683016, -5.3735839639683016, -5.1458053639683019, -3.8765386369683013, -5.3735839639683016, -5.3735839639683016, -5.1458053639683019, -3.8765386369683013, -4.8922286639683019, -4.8922286639683019, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.3735839639683016, -5.1570101639683017, -5.3735839639683016, -4.8922286639683019, -5.3735839639683016, -4.8922286639683019, -5.3735839639683016]
								}]
						}]
				}, {
					"line":	1428,
					"switches":	[{
							"switch":	70,
							"types":	[[], [], [], [], [562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], [], [], [], [], [458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], [], [], [], [], [], []],
							"begin_line":	1429,
							"begin_column":	1,
							"end_line":	1429,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exit_code = (inbyte)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "exiting_signal = (inbyte)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "foreground = (inbyte)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifd = (inbyte)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "imagic1 = (inbyte)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "last_member = (inbyte)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "list = (inbyte)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "method = (inbyte)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_name = (inbyte)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "no_time = (inbyte)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "ofd = (inbyte)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "part_nb = (inbyte)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "quiet = (inbyte)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "remove_ofname_fd = (inbyte)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "save_orig_name = (inbyte)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "to_stdout = (inbyte)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "verbose = (inbyte)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	2,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	3,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	4,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	5,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	6,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	7,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	8,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	9,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	10,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	11,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	12,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	13,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	14,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	15,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	16,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	17,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	18,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	19,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	20,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	21,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	22,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	23,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	24,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	25,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	26,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	27,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	28,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	29,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	30,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	31,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	32,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	33,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	34,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	35,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	36,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	37,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	38,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	39,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	40,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	41,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	42,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	43,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	44,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	45,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	46,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	47,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	48,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	49,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	50,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	51,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	52,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	53,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	54,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	55,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	56,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	57,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	58,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	59,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	60,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	61,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	62,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	63,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	64,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	65,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	66,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	67,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	68,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	69,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	70,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	71,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	72,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	73,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	74,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	75,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	76,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	77,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	78,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	79,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	80,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	81,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	82,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	83,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	84,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	85,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	86,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	87,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	88,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	89,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	90,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	91,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	92,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	93,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	94,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	95,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	96,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	97,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	98,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	99,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	100,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	101,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	102,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	103,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	104,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	105,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	106,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	107,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	108,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	109,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	110,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	111,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	112,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	113,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	114,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	115,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	116,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	117,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	118,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	119,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	120,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	121,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	122,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	123,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	124,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	125,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	126,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	127,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	128,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	129,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	130,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	131,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	132,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	133,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	134,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	135,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	136,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	137,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	138,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	139,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	140,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	141,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	142,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	143,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	144,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	145,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	146,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	147,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	148,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	149,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	150,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	151,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	152,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	153,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	154,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	155,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	156,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	157,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	158,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	159,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	160,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	161,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	162,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	163,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	164,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	165,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	166,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	167,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	168,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	169,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	170,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	171,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	172,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	173,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	174,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	175,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	176,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	177,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	178,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	179,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	180,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	181,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	182,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	183,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	184,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	185,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	186,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	187,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	188,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	189,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	190,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	191,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	192,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	193,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	194,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	195,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	196,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	197,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	198,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	199,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	200,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	201,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	202,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	203,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	204,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	205,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	206,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	207,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	208,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	209,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	210,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	211,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	212,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	213,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	214,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	215,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	216,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	217,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	218,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	219,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	220,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	221,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	222,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	223,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	224,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	225,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	226,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	227,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	228,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	229,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	230,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	231,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	232,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	233,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	234,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	235,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	236,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	237,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	238,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	239,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	240,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	241,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	242,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	243,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	244,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	245,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	246,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	247,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	248,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	249,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	250,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	251,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	252,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	253,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	254,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	255,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	256,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	257,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	258,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	259,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	260,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	261,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	262,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	263,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	264,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	265,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	266,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	267,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	268,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	269,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	270,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	271,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	272,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	273,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	274,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	275,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	276,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	277,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	278,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	279,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	280,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	281,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	282,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	283,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	284,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	285,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	286,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	287,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	288,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	289,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	290,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	291,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	292,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	293,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	294,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	295,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	296,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	297,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	298,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	299,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	300,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	301,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	302,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	303,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	304,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	305,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	306,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	307,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	308,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	309,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	310,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	311,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	312,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	313,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	314,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	315,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	316,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	317,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	318,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	319,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	320,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	321,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	322,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	323,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	324,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	325,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	326,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	327,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	328,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	329,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	330,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	331,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	332,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	333,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	334,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	335,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	336,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	337,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	338,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	339,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	340,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	341,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	342,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	343,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	344,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	345,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	346,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	347,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	348,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	349,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	350,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	351,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	352,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	353,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	354,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	355,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	356,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	357,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	358,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	359,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	360,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	361,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	362,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	363,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	364,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	365,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	366,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	367,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	368,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	369,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	370,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	371,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	372,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	373,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	374,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	375,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	376,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	377,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	378,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	379,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	380,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	381,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	382,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	383,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	384,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	385,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	386,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	387,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	388,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	389,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	390,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	391,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	392,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	393,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	394,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	395,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	396,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	397,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	398,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	399,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	400,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	401,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	402,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	403,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	404,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	405,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	406,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	407,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	408,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	409,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	410,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	411,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	412,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	413,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	414,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	415,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	416,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	417,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	418,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	419,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	420,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	421,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	422,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	423,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	424,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	425,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	426,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	427,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	428,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	429,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	430,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	431,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	432,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	433,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	434,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	435,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	436,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	437,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	438,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	439,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	440,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	441,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	442,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	443,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	444,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	445,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	446,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	447,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	448,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	449,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	450,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	451,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	452,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	453,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	454,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	455,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	456,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	457,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	458,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	459,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	460,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	461,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	462,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	463,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	464,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	465,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	466,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	467,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	468,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	469,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	470,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	471,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	472,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	473,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	474,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	475,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	476,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	477,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	478,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	479,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	480,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	481,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	482,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	483,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	484,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	485,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	486,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	487,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	488,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	489,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	490,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	491,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	492,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	493,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	494,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	495,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	496,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	497,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	498,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	499,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	500,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	501,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	502,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	503,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	504,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	505,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	506,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	507,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	508,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	509,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	510,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	511,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	512,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	513,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	514,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	515,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	516,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	517,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	518,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	519,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	520,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	521,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	522,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	523,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	524,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	525,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	526,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	527,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	528,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	529,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	530,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	531,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	532,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	533,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	534,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	535,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	536,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	537,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	538,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	539,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	540,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	541,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	542,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	543,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	544,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	545,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	546,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	547,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	548,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	549,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	550,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	551,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	552,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	553,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	554,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	555,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	556,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	557,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	558,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	559,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	560,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	561,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	562,
									"scores":	[-6.4711942311332624, -4.6530276396332626, -6.1912085614332621, -6.1912085614332621, -6.4711942311332624, -4.6530276396332626, -6.1912085614332621, -6.1912085614332621, -5.6982539583332628, -5.6982539583332628, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -6.1912085614332621, -5.8755167983332628, -6.1912085614332621, -5.6982539583332628, -6.1912085614332621, -5.6982539583332628, -6.1912085614332621]
								}, {
									"case":	563,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	564,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	565,
									"scores":	[-6.5711024311332631, -4.7529358396332633, -6.2911167614332628, -6.2911167614332628, -6.5711024311332631, -4.7529358396332633, -6.2911167614332628, -6.2911167614332628, -5.7981621583332625, -5.7981621583332625, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -6.2911167614332628, -5.9754249983332626, -6.2911167614332628, -5.7981621583332625, -6.2911167614332628, -5.7981621583332625, -6.2911167614332628]
								}, {
									"case":	566,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	567,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	568,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	569,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	570,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	571,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	572,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	573,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}, {
									"case":	574,
									"scores":	[-8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.833884231133263, -7.0157176396332632, -8.5538985614332628, -8.5538985614332628, -8.06094395833326, -8.06094395833326, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.5538985614332628, -8.23820679833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628, -8.06094395833326, -8.5538985614332628]
								}]
						}, {
							"switch":	71,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1429,
							"begin_column":	3,
							"end_line":	1429,
							"end_column":	11,
							"patch_codes":	["if (!__is_neg(\"\", \"L1429\", 29, &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6523631720332626, -5.6492464753332623, -5.227470852333262, -5.227470852333262, -5.6523631720332626, -5.6492464753332623, -5.227470852333262, -5.227470852333262, -4.7461155523332623, -4.7461155523332623, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.227470852333262, -5.010897052333263, -5.227470852333262, -4.7461155523332623, -5.227470852333262, -4.7461155523332623, -5.227470852333262]
								}]
						}]
				}, {
					"line":	1423,
					"switches":	[{
							"switch":	65,
							"types":	[[], [], [], [], [562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], [], [], [], [], [458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], [], [], [], [], [], []],
							"begin_line":	1424,
							"begin_column":	4,
							"end_line":	1424,
							"end_column":	4,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exit_code = (inbyte)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "exiting_signal = (inbyte)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "foreground = (inbyte)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifd = (inbyte)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "imagic1 = (inbyte)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "last_member = (inbyte)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "list = (inbyte)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "method = (inbyte)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_name = (inbyte)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "no_time = (inbyte)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "ofd = (inbyte)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "part_nb = (inbyte)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "quiet = (inbyte)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "remove_ofname_fd = (inbyte)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "save_orig_name = (inbyte)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "to_stdout = (inbyte)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "verbose = (inbyte)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.09384737128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}, {
									"case":	27,
									"scores":	[-4.09384737128582]
								}, {
									"case":	28,
									"scores":	[-4.09384737128582]
								}, {
									"case":	29,
									"scores":	[-4.09384737128582]
								}, {
									"case":	30,
									"scores":	[-4.09384737128582]
								}, {
									"case":	31,
									"scores":	[-4.09384737128582]
								}, {
									"case":	32,
									"scores":	[-4.09384737128582]
								}, {
									"case":	33,
									"scores":	[-4.09384737128582]
								}, {
									"case":	34,
									"scores":	[-4.09384737128582]
								}, {
									"case":	35,
									"scores":	[-4.09384737128582]
								}, {
									"case":	36,
									"scores":	[-4.09384737128582]
								}, {
									"case":	37,
									"scores":	[-4.09384737128582]
								}, {
									"case":	38,
									"scores":	[-4.09384737128582]
								}, {
									"case":	39,
									"scores":	[-4.09384737128582]
								}, {
									"case":	40,
									"scores":	[-4.09384737128582]
								}, {
									"case":	41,
									"scores":	[-4.09384737128582]
								}, {
									"case":	42,
									"scores":	[-4.09384737128582]
								}, {
									"case":	43,
									"scores":	[-4.09384737128582]
								}, {
									"case":	44,
									"scores":	[-4.09384737128582]
								}, {
									"case":	45,
									"scores":	[-4.09384737128582]
								}, {
									"case":	46,
									"scores":	[-4.09384737128582]
								}, {
									"case":	47,
									"scores":	[-4.09384737128582]
								}, {
									"case":	48,
									"scores":	[-4.09384737128582]
								}, {
									"case":	49,
									"scores":	[-4.09384737128582]
								}, {
									"case":	50,
									"scores":	[-4.09384737128582]
								}, {
									"case":	51,
									"scores":	[-4.09384737128582]
								}, {
									"case":	52,
									"scores":	[-4.09384737128582]
								}, {
									"case":	53,
									"scores":	[-4.09384737128582]
								}, {
									"case":	54,
									"scores":	[-4.09384737128582]
								}, {
									"case":	55,
									"scores":	[-4.09384737128582]
								}, {
									"case":	56,
									"scores":	[-4.09384737128582]
								}, {
									"case":	57,
									"scores":	[-4.09384737128582]
								}, {
									"case":	58,
									"scores":	[-4.09384737128582]
								}, {
									"case":	59,
									"scores":	[-4.09384737128582]
								}, {
									"case":	60,
									"scores":	[-4.09384737128582]
								}, {
									"case":	61,
									"scores":	[-4.09384737128582]
								}, {
									"case":	62,
									"scores":	[-4.09384737128582]
								}, {
									"case":	63,
									"scores":	[-4.09384737128582]
								}, {
									"case":	64,
									"scores":	[-4.09384737128582]
								}, {
									"case":	65,
									"scores":	[-4.09384737128582]
								}, {
									"case":	66,
									"scores":	[-4.09384737128582]
								}, {
									"case":	67,
									"scores":	[-4.09384737128582]
								}, {
									"case":	68,
									"scores":	[-4.09384737128582]
								}, {
									"case":	69,
									"scores":	[-4.09384737128582]
								}, {
									"case":	70,
									"scores":	[-4.09384737128582]
								}, {
									"case":	71,
									"scores":	[-4.09384737128582]
								}, {
									"case":	72,
									"scores":	[-4.09384737128582]
								}, {
									"case":	73,
									"scores":	[-4.09384737128582]
								}, {
									"case":	74,
									"scores":	[-4.09384737128582]
								}, {
									"case":	75,
									"scores":	[-4.09384737128582]
								}, {
									"case":	76,
									"scores":	[-4.09384737128582]
								}, {
									"case":	77,
									"scores":	[-4.09384737128582]
								}, {
									"case":	78,
									"scores":	[-4.09384737128582]
								}, {
									"case":	79,
									"scores":	[-4.09384737128582]
								}, {
									"case":	80,
									"scores":	[-4.09384737128582]
								}, {
									"case":	81,
									"scores":	[-4.09384737128582]
								}, {
									"case":	82,
									"scores":	[-4.09384737128582]
								}, {
									"case":	83,
									"scores":	[-4.09384737128582]
								}, {
									"case":	84,
									"scores":	[-4.09384737128582]
								}, {
									"case":	85,
									"scores":	[-4.09384737128582]
								}, {
									"case":	86,
									"scores":	[-4.09384737128582]
								}, {
									"case":	87,
									"scores":	[-4.09384737128582]
								}, {
									"case":	88,
									"scores":	[-4.09384737128582]
								}, {
									"case":	89,
									"scores":	[-4.09384737128582]
								}, {
									"case":	90,
									"scores":	[-4.09384737128582]
								}, {
									"case":	91,
									"scores":	[-4.09384737128582]
								}, {
									"case":	92,
									"scores":	[-4.09384737128582]
								}, {
									"case":	93,
									"scores":	[-4.09384737128582]
								}, {
									"case":	94,
									"scores":	[-4.09384737128582]
								}, {
									"case":	95,
									"scores":	[-4.09384737128582]
								}, {
									"case":	96,
									"scores":	[-4.09384737128582]
								}, {
									"case":	97,
									"scores":	[-4.09384737128582]
								}, {
									"case":	98,
									"scores":	[-4.09384737128582]
								}, {
									"case":	99,
									"scores":	[-4.09384737128582]
								}, {
									"case":	100,
									"scores":	[-4.09384737128582]
								}, {
									"case":	101,
									"scores":	[-4.09384737128582]
								}, {
									"case":	102,
									"scores":	[-4.09384737128582]
								}, {
									"case":	103,
									"scores":	[-4.09384737128582]
								}, {
									"case":	104,
									"scores":	[-4.09384737128582]
								}, {
									"case":	105,
									"scores":	[-4.09384737128582]
								}, {
									"case":	106,
									"scores":	[-4.09384737128582]
								}, {
									"case":	107,
									"scores":	[-4.09384737128582]
								}, {
									"case":	108,
									"scores":	[-4.09384737128582]
								}, {
									"case":	109,
									"scores":	[-4.09384737128582]
								}, {
									"case":	110,
									"scores":	[-4.09384737128582]
								}, {
									"case":	111,
									"scores":	[-4.09384737128582]
								}, {
									"case":	112,
									"scores":	[-4.09384737128582]
								}, {
									"case":	113,
									"scores":	[-4.09384737128582]
								}, {
									"case":	114,
									"scores":	[-4.09384737128582]
								}, {
									"case":	115,
									"scores":	[-4.09384737128582]
								}, {
									"case":	116,
									"scores":	[-4.09384737128582]
								}, {
									"case":	117,
									"scores":	[-4.09384737128582]
								}, {
									"case":	118,
									"scores":	[-4.09384737128582]
								}, {
									"case":	119,
									"scores":	[-4.09384737128582]
								}, {
									"case":	120,
									"scores":	[-4.09384737128582]
								}, {
									"case":	121,
									"scores":	[-4.09384737128582]
								}, {
									"case":	122,
									"scores":	[-4.09384737128582]
								}, {
									"case":	123,
									"scores":	[-4.09384737128582]
								}, {
									"case":	124,
									"scores":	[-4.09384737128582]
								}, {
									"case":	125,
									"scores":	[-4.09384737128582]
								}, {
									"case":	126,
									"scores":	[-4.09384737128582]
								}, {
									"case":	127,
									"scores":	[-4.09384737128582]
								}, {
									"case":	128,
									"scores":	[-4.09384737128582]
								}, {
									"case":	129,
									"scores":	[-4.09384737128582]
								}, {
									"case":	130,
									"scores":	[-4.09384737128582]
								}, {
									"case":	131,
									"scores":	[-4.09384737128582]
								}, {
									"case":	132,
									"scores":	[-4.09384737128582]
								}, {
									"case":	133,
									"scores":	[-4.09384737128582]
								}, {
									"case":	134,
									"scores":	[-4.09384737128582]
								}, {
									"case":	135,
									"scores":	[-4.09384737128582]
								}, {
									"case":	136,
									"scores":	[-4.09384737128582]
								}, {
									"case":	137,
									"scores":	[-4.09384737128582]
								}, {
									"case":	138,
									"scores":	[-4.09384737128582]
								}, {
									"case":	139,
									"scores":	[-4.09384737128582]
								}, {
									"case":	140,
									"scores":	[-4.09384737128582]
								}, {
									"case":	141,
									"scores":	[-4.09384737128582]
								}, {
									"case":	142,
									"scores":	[-4.09384737128582]
								}, {
									"case":	143,
									"scores":	[-4.09384737128582]
								}, {
									"case":	144,
									"scores":	[-4.09384737128582]
								}, {
									"case":	145,
									"scores":	[-4.09384737128582]
								}, {
									"case":	146,
									"scores":	[-4.09384737128582]
								}, {
									"case":	147,
									"scores":	[-4.09384737128582]
								}, {
									"case":	148,
									"scores":	[-4.09384737128582]
								}, {
									"case":	149,
									"scores":	[-4.09384737128582]
								}, {
									"case":	150,
									"scores":	[-4.09384737128582]
								}, {
									"case":	151,
									"scores":	[-4.09384737128582]
								}, {
									"case":	152,
									"scores":	[-4.09384737128582]
								}, {
									"case":	153,
									"scores":	[-4.09384737128582]
								}, {
									"case":	154,
									"scores":	[-4.09384737128582]
								}, {
									"case":	155,
									"scores":	[-4.09384737128582]
								}, {
									"case":	156,
									"scores":	[-4.09384737128582]
								}, {
									"case":	157,
									"scores":	[-4.09384737128582]
								}, {
									"case":	158,
									"scores":	[-4.09384737128582]
								}, {
									"case":	159,
									"scores":	[-4.09384737128582]
								}, {
									"case":	160,
									"scores":	[-4.09384737128582]
								}, {
									"case":	161,
									"scores":	[-4.09384737128582]
								}, {
									"case":	162,
									"scores":	[-4.09384737128582]
								}, {
									"case":	163,
									"scores":	[-4.09384737128582]
								}, {
									"case":	164,
									"scores":	[-4.09384737128582]
								}, {
									"case":	165,
									"scores":	[-4.09384737128582]
								}, {
									"case":	166,
									"scores":	[-4.09384737128582]
								}, {
									"case":	167,
									"scores":	[-4.09384737128582]
								}, {
									"case":	168,
									"scores":	[-4.09384737128582]
								}, {
									"case":	169,
									"scores":	[-4.09384737128582]
								}, {
									"case":	170,
									"scores":	[-4.09384737128582]
								}, {
									"case":	171,
									"scores":	[-4.09384737128582]
								}, {
									"case":	172,
									"scores":	[-4.09384737128582]
								}, {
									"case":	173,
									"scores":	[-4.09384737128582]
								}, {
									"case":	174,
									"scores":	[-4.09384737128582]
								}, {
									"case":	175,
									"scores":	[-4.09384737128582]
								}, {
									"case":	176,
									"scores":	[-4.09384737128582]
								}, {
									"case":	177,
									"scores":	[-4.09384737128582]
								}, {
									"case":	178,
									"scores":	[-4.09384737128582]
								}, {
									"case":	179,
									"scores":	[-4.09384737128582]
								}, {
									"case":	180,
									"scores":	[-4.09384737128582]
								}, {
									"case":	181,
									"scores":	[-4.09384737128582]
								}, {
									"case":	182,
									"scores":	[-4.09384737128582]
								}, {
									"case":	183,
									"scores":	[-4.09384737128582]
								}, {
									"case":	184,
									"scores":	[-4.09384737128582]
								}, {
									"case":	185,
									"scores":	[-4.09384737128582]
								}, {
									"case":	186,
									"scores":	[-4.09384737128582]
								}, {
									"case":	187,
									"scores":	[-4.09384737128582]
								}, {
									"case":	188,
									"scores":	[-4.09384737128582]
								}, {
									"case":	189,
									"scores":	[-4.09384737128582]
								}, {
									"case":	190,
									"scores":	[-4.09384737128582]
								}, {
									"case":	191,
									"scores":	[-4.09384737128582]
								}, {
									"case":	192,
									"scores":	[-4.09384737128582]
								}, {
									"case":	193,
									"scores":	[-4.09384737128582]
								}, {
									"case":	194,
									"scores":	[-4.09384737128582]
								}, {
									"case":	195,
									"scores":	[-4.09384737128582]
								}, {
									"case":	196,
									"scores":	[-4.09384737128582]
								}, {
									"case":	197,
									"scores":	[-4.09384737128582]
								}, {
									"case":	198,
									"scores":	[-4.09384737128582]
								}, {
									"case":	199,
									"scores":	[-4.09384737128582]
								}, {
									"case":	200,
									"scores":	[-4.09384737128582]
								}, {
									"case":	201,
									"scores":	[-4.09384737128582]
								}, {
									"case":	202,
									"scores":	[-4.09384737128582]
								}, {
									"case":	203,
									"scores":	[-4.09384737128582]
								}, {
									"case":	204,
									"scores":	[-4.09384737128582]
								}, {
									"case":	205,
									"scores":	[-4.09384737128582]
								}, {
									"case":	206,
									"scores":	[-4.09384737128582]
								}, {
									"case":	207,
									"scores":	[-4.09384737128582]
								}, {
									"case":	208,
									"scores":	[-4.09384737128582]
								}, {
									"case":	209,
									"scores":	[-4.09384737128582]
								}, {
									"case":	210,
									"scores":	[-4.09384737128582]
								}, {
									"case":	211,
									"scores":	[-4.09384737128582]
								}, {
									"case":	212,
									"scores":	[-4.09384737128582]
								}, {
									"case":	213,
									"scores":	[-4.09384737128582]
								}, {
									"case":	214,
									"scores":	[-4.09384737128582]
								}, {
									"case":	215,
									"scores":	[-4.09384737128582]
								}, {
									"case":	216,
									"scores":	[-4.09384737128582]
								}, {
									"case":	217,
									"scores":	[-4.09384737128582]
								}, {
									"case":	218,
									"scores":	[-4.09384737128582]
								}, {
									"case":	219,
									"scores":	[-4.09384737128582]
								}, {
									"case":	220,
									"scores":	[-4.09384737128582]
								}, {
									"case":	221,
									"scores":	[-4.09384737128582]
								}, {
									"case":	222,
									"scores":	[-4.09384737128582]
								}, {
									"case":	223,
									"scores":	[-4.09384737128582]
								}, {
									"case":	224,
									"scores":	[-4.09384737128582]
								}, {
									"case":	225,
									"scores":	[-4.09384737128582]
								}, {
									"case":	226,
									"scores":	[-4.09384737128582]
								}, {
									"case":	227,
									"scores":	[-4.09384737128582]
								}, {
									"case":	228,
									"scores":	[-4.09384737128582]
								}, {
									"case":	229,
									"scores":	[-4.09384737128582]
								}, {
									"case":	230,
									"scores":	[-4.09384737128582]
								}, {
									"case":	231,
									"scores":	[-4.09384737128582]
								}, {
									"case":	232,
									"scores":	[-4.09384737128582]
								}, {
									"case":	233,
									"scores":	[-4.09384737128582]
								}, {
									"case":	234,
									"scores":	[-4.09384737128582]
								}, {
									"case":	235,
									"scores":	[-4.09384737128582]
								}, {
									"case":	236,
									"scores":	[-4.09384737128582]
								}, {
									"case":	237,
									"scores":	[-4.09384737128582]
								}, {
									"case":	238,
									"scores":	[-4.09384737128582]
								}, {
									"case":	239,
									"scores":	[-4.09384737128582]
								}, {
									"case":	240,
									"scores":	[-4.09384737128582]
								}, {
									"case":	241,
									"scores":	[-4.09384737128582]
								}, {
									"case":	242,
									"scores":	[-4.09384737128582]
								}, {
									"case":	243,
									"scores":	[-4.09384737128582]
								}, {
									"case":	244,
									"scores":	[-4.09384737128582]
								}, {
									"case":	245,
									"scores":	[-4.09384737128582]
								}, {
									"case":	246,
									"scores":	[-4.09384737128582]
								}, {
									"case":	247,
									"scores":	[-4.09384737128582]
								}, {
									"case":	248,
									"scores":	[-4.09384737128582]
								}, {
									"case":	249,
									"scores":	[-4.09384737128582]
								}, {
									"case":	250,
									"scores":	[-4.09384737128582]
								}, {
									"case":	251,
									"scores":	[-4.09384737128582]
								}, {
									"case":	252,
									"scores":	[-4.09384737128582]
								}, {
									"case":	253,
									"scores":	[-4.09384737128582]
								}, {
									"case":	254,
									"scores":	[-4.09384737128582]
								}, {
									"case":	255,
									"scores":	[-4.09384737128582]
								}, {
									"case":	256,
									"scores":	[-4.09384737128582]
								}, {
									"case":	257,
									"scores":	[-4.09384737128582]
								}, {
									"case":	258,
									"scores":	[-4.09384737128582]
								}, {
									"case":	259,
									"scores":	[-4.09384737128582]
								}, {
									"case":	260,
									"scores":	[-4.09384737128582]
								}, {
									"case":	261,
									"scores":	[-4.09384737128582]
								}, {
									"case":	262,
									"scores":	[-4.09384737128582]
								}, {
									"case":	263,
									"scores":	[-4.09384737128582]
								}, {
									"case":	264,
									"scores":	[-4.09384737128582]
								}, {
									"case":	265,
									"scores":	[-4.09384737128582]
								}, {
									"case":	266,
									"scores":	[-4.09384737128582]
								}, {
									"case":	267,
									"scores":	[-4.09384737128582]
								}, {
									"case":	268,
									"scores":	[-4.09384737128582]
								}, {
									"case":	269,
									"scores":	[-4.09384737128582]
								}, {
									"case":	270,
									"scores":	[-4.09384737128582]
								}, {
									"case":	271,
									"scores":	[-4.09384737128582]
								}, {
									"case":	272,
									"scores":	[-4.09384737128582]
								}, {
									"case":	273,
									"scores":	[-4.09384737128582]
								}, {
									"case":	274,
									"scores":	[-4.09384737128582]
								}, {
									"case":	275,
									"scores":	[-4.09384737128582]
								}, {
									"case":	276,
									"scores":	[-4.09384737128582]
								}, {
									"case":	277,
									"scores":	[-4.09384737128582]
								}, {
									"case":	278,
									"scores":	[-4.09384737128582]
								}, {
									"case":	279,
									"scores":	[-4.09384737128582]
								}, {
									"case":	280,
									"scores":	[-4.09384737128582]
								}, {
									"case":	281,
									"scores":	[-4.09384737128582]
								}, {
									"case":	282,
									"scores":	[-4.09384737128582]
								}, {
									"case":	283,
									"scores":	[-4.09384737128582]
								}, {
									"case":	284,
									"scores":	[-4.09384737128582]
								}, {
									"case":	285,
									"scores":	[-4.09384737128582]
								}, {
									"case":	286,
									"scores":	[-4.09384737128582]
								}, {
									"case":	287,
									"scores":	[-4.09384737128582]
								}, {
									"case":	288,
									"scores":	[-4.09384737128582]
								}, {
									"case":	289,
									"scores":	[-4.09384737128582]
								}, {
									"case":	290,
									"scores":	[-4.09384737128582]
								}, {
									"case":	291,
									"scores":	[-4.09384737128582]
								}, {
									"case":	292,
									"scores":	[-4.09384737128582]
								}, {
									"case":	293,
									"scores":	[-4.09384737128582]
								}, {
									"case":	294,
									"scores":	[-4.09384737128582]
								}, {
									"case":	295,
									"scores":	[-4.09384737128582]
								}, {
									"case":	296,
									"scores":	[-4.09384737128582]
								}, {
									"case":	297,
									"scores":	[-4.09384737128582]
								}, {
									"case":	298,
									"scores":	[-4.09384737128582]
								}, {
									"case":	299,
									"scores":	[-4.09384737128582]
								}, {
									"case":	300,
									"scores":	[-4.09384737128582]
								}, {
									"case":	301,
									"scores":	[-4.09384737128582]
								}, {
									"case":	302,
									"scores":	[-4.09384737128582]
								}, {
									"case":	303,
									"scores":	[-4.09384737128582]
								}, {
									"case":	304,
									"scores":	[-4.09384737128582]
								}, {
									"case":	305,
									"scores":	[-4.09384737128582]
								}, {
									"case":	306,
									"scores":	[-4.09384737128582]
								}, {
									"case":	307,
									"scores":	[-4.09384737128582]
								}, {
									"case":	308,
									"scores":	[-4.09384737128582]
								}, {
									"case":	309,
									"scores":	[-4.09384737128582]
								}, {
									"case":	310,
									"scores":	[-4.09384737128582]
								}, {
									"case":	311,
									"scores":	[-4.09384737128582]
								}, {
									"case":	312,
									"scores":	[-4.09384737128582]
								}, {
									"case":	313,
									"scores":	[-4.09384737128582]
								}, {
									"case":	314,
									"scores":	[-4.09384737128582]
								}, {
									"case":	315,
									"scores":	[-4.09384737128582]
								}, {
									"case":	316,
									"scores":	[-4.09384737128582]
								}, {
									"case":	317,
									"scores":	[-4.09384737128582]
								}, {
									"case":	318,
									"scores":	[-4.09384737128582]
								}, {
									"case":	319,
									"scores":	[-4.09384737128582]
								}, {
									"case":	320,
									"scores":	[-4.09384737128582]
								}, {
									"case":	321,
									"scores":	[-4.09384737128582]
								}, {
									"case":	322,
									"scores":	[-4.09384737128582]
								}, {
									"case":	323,
									"scores":	[-4.09384737128582]
								}, {
									"case":	324,
									"scores":	[-4.09384737128582]
								}, {
									"case":	325,
									"scores":	[-4.09384737128582]
								}, {
									"case":	326,
									"scores":	[-4.09384737128582]
								}, {
									"case":	327,
									"scores":	[-4.09384737128582]
								}, {
									"case":	328,
									"scores":	[-4.09384737128582]
								}, {
									"case":	329,
									"scores":	[-4.09384737128582]
								}, {
									"case":	330,
									"scores":	[-4.09384737128582]
								}, {
									"case":	331,
									"scores":	[-4.09384737128582]
								}, {
									"case":	332,
									"scores":	[-4.09384737128582]
								}, {
									"case":	333,
									"scores":	[-4.09384737128582]
								}, {
									"case":	334,
									"scores":	[-4.09384737128582]
								}, {
									"case":	335,
									"scores":	[-4.09384737128582]
								}, {
									"case":	336,
									"scores":	[-4.09384737128582]
								}, {
									"case":	337,
									"scores":	[-4.09384737128582]
								}, {
									"case":	338,
									"scores":	[-4.09384737128582]
								}, {
									"case":	339,
									"scores":	[-4.09384737128582]
								}, {
									"case":	340,
									"scores":	[-4.09384737128582]
								}, {
									"case":	341,
									"scores":	[-4.09384737128582]
								}, {
									"case":	342,
									"scores":	[-4.09384737128582]
								}, {
									"case":	343,
									"scores":	[-4.09384737128582]
								}, {
									"case":	344,
									"scores":	[-4.09384737128582]
								}, {
									"case":	345,
									"scores":	[-4.09384737128582]
								}, {
									"case":	346,
									"scores":	[-4.09384737128582]
								}, {
									"case":	347,
									"scores":	[-4.09384737128582]
								}, {
									"case":	348,
									"scores":	[-4.09384737128582]
								}, {
									"case":	349,
									"scores":	[-4.09384737128582]
								}, {
									"case":	350,
									"scores":	[-4.09384737128582]
								}, {
									"case":	351,
									"scores":	[-4.09384737128582]
								}, {
									"case":	352,
									"scores":	[-4.09384737128582]
								}, {
									"case":	353,
									"scores":	[-4.09384737128582]
								}, {
									"case":	354,
									"scores":	[-4.09384737128582]
								}, {
									"case":	355,
									"scores":	[-4.09384737128582]
								}, {
									"case":	356,
									"scores":	[-4.09384737128582]
								}, {
									"case":	357,
									"scores":	[-4.09384737128582]
								}, {
									"case":	358,
									"scores":	[-4.09384737128582]
								}, {
									"case":	359,
									"scores":	[-4.09384737128582]
								}, {
									"case":	360,
									"scores":	[-4.09384737128582]
								}, {
									"case":	361,
									"scores":	[-4.09384737128582]
								}, {
									"case":	362,
									"scores":	[-4.09384737128582]
								}, {
									"case":	363,
									"scores":	[-4.09384737128582]
								}, {
									"case":	364,
									"scores":	[-4.09384737128582]
								}, {
									"case":	365,
									"scores":	[-4.09384737128582]
								}, {
									"case":	366,
									"scores":	[-4.09384737128582]
								}, {
									"case":	367,
									"scores":	[-4.09384737128582]
								}, {
									"case":	368,
									"scores":	[-4.09384737128582]
								}, {
									"case":	369,
									"scores":	[-4.09384737128582]
								}, {
									"case":	370,
									"scores":	[-4.09384737128582]
								}, {
									"case":	371,
									"scores":	[-4.09384737128582]
								}, {
									"case":	372,
									"scores":	[-4.09384737128582]
								}, {
									"case":	373,
									"scores":	[-4.09384737128582]
								}, {
									"case":	374,
									"scores":	[-4.09384737128582]
								}, {
									"case":	375,
									"scores":	[-4.09384737128582]
								}, {
									"case":	376,
									"scores":	[-4.09384737128582]
								}, {
									"case":	377,
									"scores":	[-4.09384737128582]
								}, {
									"case":	378,
									"scores":	[-4.09384737128582]
								}, {
									"case":	379,
									"scores":	[-4.09384737128582]
								}, {
									"case":	380,
									"scores":	[-4.09384737128582]
								}, {
									"case":	381,
									"scores":	[-4.09384737128582]
								}, {
									"case":	382,
									"scores":	[-4.09384737128582]
								}, {
									"case":	383,
									"scores":	[-4.09384737128582]
								}, {
									"case":	384,
									"scores":	[-4.09384737128582]
								}, {
									"case":	385,
									"scores":	[-4.09384737128582]
								}, {
									"case":	386,
									"scores":	[-4.09384737128582]
								}, {
									"case":	387,
									"scores":	[-4.09384737128582]
								}, {
									"case":	388,
									"scores":	[-4.09384737128582]
								}, {
									"case":	389,
									"scores":	[-4.09384737128582]
								}, {
									"case":	390,
									"scores":	[-4.09384737128582]
								}, {
									"case":	391,
									"scores":	[-4.09384737128582]
								}, {
									"case":	392,
									"scores":	[-4.09384737128582]
								}, {
									"case":	393,
									"scores":	[-4.09384737128582]
								}, {
									"case":	394,
									"scores":	[-4.09384737128582]
								}, {
									"case":	395,
									"scores":	[-4.09384737128582]
								}, {
									"case":	396,
									"scores":	[-4.09384737128582]
								}, {
									"case":	397,
									"scores":	[-4.09384737128582]
								}, {
									"case":	398,
									"scores":	[-4.09384737128582]
								}, {
									"case":	399,
									"scores":	[-4.09384737128582]
								}, {
									"case":	400,
									"scores":	[-4.09384737128582]
								}, {
									"case":	401,
									"scores":	[-4.09384737128582]
								}, {
									"case":	402,
									"scores":	[-4.09384737128582]
								}, {
									"case":	403,
									"scores":	[-4.09384737128582]
								}, {
									"case":	404,
									"scores":	[-4.09384737128582]
								}, {
									"case":	405,
									"scores":	[-4.09384737128582]
								}, {
									"case":	406,
									"scores":	[-4.09384737128582]
								}, {
									"case":	407,
									"scores":	[-4.09384737128582]
								}, {
									"case":	408,
									"scores":	[-4.09384737128582]
								}, {
									"case":	409,
									"scores":	[-4.09384737128582]
								}, {
									"case":	410,
									"scores":	[-4.09384737128582]
								}, {
									"case":	411,
									"scores":	[-4.09384737128582]
								}, {
									"case":	412,
									"scores":	[-4.09384737128582]
								}, {
									"case":	413,
									"scores":	[-4.09384737128582]
								}, {
									"case":	414,
									"scores":	[-4.09384737128582]
								}, {
									"case":	415,
									"scores":	[-4.09384737128582]
								}, {
									"case":	416,
									"scores":	[-4.09384737128582]
								}, {
									"case":	417,
									"scores":	[-4.09384737128582]
								}, {
									"case":	418,
									"scores":	[-4.09384737128582]
								}, {
									"case":	419,
									"scores":	[-4.09384737128582]
								}, {
									"case":	420,
									"scores":	[-4.09384737128582]
								}, {
									"case":	421,
									"scores":	[-4.09384737128582]
								}, {
									"case":	422,
									"scores":	[-4.09384737128582]
								}, {
									"case":	423,
									"scores":	[-4.09384737128582]
								}, {
									"case":	424,
									"scores":	[-4.09384737128582]
								}, {
									"case":	425,
									"scores":	[-4.09384737128582]
								}, {
									"case":	426,
									"scores":	[-4.09384737128582]
								}, {
									"case":	427,
									"scores":	[-4.09384737128582]
								}, {
									"case":	428,
									"scores":	[-4.09384737128582]
								}, {
									"case":	429,
									"scores":	[-4.09384737128582]
								}, {
									"case":	430,
									"scores":	[-4.09384737128582]
								}, {
									"case":	431,
									"scores":	[-4.09384737128582]
								}, {
									"case":	432,
									"scores":	[-4.09384737128582]
								}, {
									"case":	433,
									"scores":	[-4.09384737128582]
								}, {
									"case":	434,
									"scores":	[-4.09384737128582]
								}, {
									"case":	435,
									"scores":	[-4.09384737128582]
								}, {
									"case":	436,
									"scores":	[-4.09384737128582]
								}, {
									"case":	437,
									"scores":	[-4.09384737128582]
								}, {
									"case":	438,
									"scores":	[-4.09384737128582]
								}, {
									"case":	439,
									"scores":	[-4.09384737128582]
								}, {
									"case":	440,
									"scores":	[-4.09384737128582]
								}, {
									"case":	441,
									"scores":	[-4.09384737128582]
								}, {
									"case":	442,
									"scores":	[-4.09384737128582]
								}, {
									"case":	443,
									"scores":	[-4.09384737128582]
								}, {
									"case":	444,
									"scores":	[-4.09384737128582]
								}, {
									"case":	445,
									"scores":	[-4.09384737128582]
								}, {
									"case":	446,
									"scores":	[-4.09384737128582]
								}, {
									"case":	447,
									"scores":	[-4.09384737128582]
								}, {
									"case":	448,
									"scores":	[-4.09384737128582]
								}, {
									"case":	449,
									"scores":	[-4.09384737128582]
								}, {
									"case":	450,
									"scores":	[-4.09384737128582]
								}, {
									"case":	451,
									"scores":	[-4.09384737128582]
								}, {
									"case":	452,
									"scores":	[-4.09384737128582]
								}, {
									"case":	453,
									"scores":	[-4.09384737128582]
								}, {
									"case":	454,
									"scores":	[-4.09384737128582]
								}, {
									"case":	455,
									"scores":	[-4.09384737128582]
								}, {
									"case":	456,
									"scores":	[-4.09384737128582]
								}, {
									"case":	457,
									"scores":	[-4.09384737128582]
								}, {
									"case":	458,
									"scores":	[-4.09384737128582]
								}, {
									"case":	459,
									"scores":	[-4.09384737128582]
								}, {
									"case":	460,
									"scores":	[-4.09384737128582]
								}, {
									"case":	461,
									"scores":	[-4.09384737128582]
								}, {
									"case":	462,
									"scores":	[-4.09384737128582]
								}, {
									"case":	463,
									"scores":	[-4.09384737128582]
								}, {
									"case":	464,
									"scores":	[-4.09384737128582]
								}, {
									"case":	465,
									"scores":	[-4.09384737128582]
								}, {
									"case":	466,
									"scores":	[-4.09384737128582]
								}, {
									"case":	467,
									"scores":	[-4.09384737128582]
								}, {
									"case":	468,
									"scores":	[-4.09384737128582]
								}, {
									"case":	469,
									"scores":	[-4.09384737128582]
								}, {
									"case":	470,
									"scores":	[-4.09384737128582]
								}, {
									"case":	471,
									"scores":	[-4.09384737128582]
								}, {
									"case":	472,
									"scores":	[-4.09384737128582]
								}, {
									"case":	473,
									"scores":	[-4.09384737128582]
								}, {
									"case":	474,
									"scores":	[-4.09384737128582]
								}, {
									"case":	475,
									"scores":	[-4.09384737128582]
								}, {
									"case":	476,
									"scores":	[-4.09384737128582]
								}, {
									"case":	477,
									"scores":	[-4.09384737128582]
								}, {
									"case":	478,
									"scores":	[-4.09384737128582]
								}, {
									"case":	479,
									"scores":	[-4.09384737128582]
								}, {
									"case":	480,
									"scores":	[-4.09384737128582]
								}, {
									"case":	481,
									"scores":	[-4.09384737128582]
								}, {
									"case":	482,
									"scores":	[-4.09384737128582]
								}, {
									"case":	483,
									"scores":	[-4.09384737128582]
								}, {
									"case":	484,
									"scores":	[-4.09384737128582]
								}, {
									"case":	485,
									"scores":	[-4.09384737128582]
								}, {
									"case":	486,
									"scores":	[-4.09384737128582]
								}, {
									"case":	487,
									"scores":	[-4.09384737128582]
								}, {
									"case":	488,
									"scores":	[-4.09384737128582]
								}, {
									"case":	489,
									"scores":	[-4.09384737128582]
								}, {
									"case":	490,
									"scores":	[-4.09384737128582]
								}, {
									"case":	491,
									"scores":	[-4.09384737128582]
								}, {
									"case":	492,
									"scores":	[-4.09384737128582]
								}, {
									"case":	493,
									"scores":	[-4.09384737128582]
								}, {
									"case":	494,
									"scores":	[-4.09384737128582]
								}, {
									"case":	495,
									"scores":	[-4.09384737128582]
								}, {
									"case":	496,
									"scores":	[-4.09384737128582]
								}, {
									"case":	497,
									"scores":	[-4.09384737128582]
								}, {
									"case":	498,
									"scores":	[-4.09384737128582]
								}, {
									"case":	499,
									"scores":	[-4.09384737128582]
								}, {
									"case":	500,
									"scores":	[-4.09384737128582]
								}, {
									"case":	501,
									"scores":	[-4.09384737128582]
								}, {
									"case":	502,
									"scores":	[-4.09384737128582]
								}, {
									"case":	503,
									"scores":	[-4.09384737128582]
								}, {
									"case":	504,
									"scores":	[-4.09384737128582]
								}, {
									"case":	505,
									"scores":	[-4.09384737128582]
								}, {
									"case":	506,
									"scores":	[-4.09384737128582]
								}, {
									"case":	507,
									"scores":	[-4.09384737128582]
								}, {
									"case":	508,
									"scores":	[-4.09384737128582]
								}, {
									"case":	509,
									"scores":	[-4.09384737128582]
								}, {
									"case":	510,
									"scores":	[-4.09384737128582]
								}, {
									"case":	511,
									"scores":	[-4.09384737128582]
								}, {
									"case":	512,
									"scores":	[-4.09384737128582]
								}, {
									"case":	513,
									"scores":	[-4.09384737128582]
								}, {
									"case":	514,
									"scores":	[-4.09384737128582]
								}, {
									"case":	515,
									"scores":	[-4.09384737128582]
								}, {
									"case":	516,
									"scores":	[-4.09384737128582]
								}, {
									"case":	517,
									"scores":	[-4.09384737128582]
								}, {
									"case":	518,
									"scores":	[-4.09384737128582]
								}, {
									"case":	519,
									"scores":	[-4.09384737128582]
								}, {
									"case":	520,
									"scores":	[-4.09384737128582]
								}, {
									"case":	521,
									"scores":	[-4.09384737128582]
								}, {
									"case":	522,
									"scores":	[-4.09384737128582]
								}, {
									"case":	523,
									"scores":	[-4.09384737128582]
								}, {
									"case":	524,
									"scores":	[-4.09384737128582]
								}, {
									"case":	525,
									"scores":	[-4.09384737128582]
								}, {
									"case":	526,
									"scores":	[-4.09384737128582]
								}, {
									"case":	527,
									"scores":	[-4.09384737128582]
								}, {
									"case":	528,
									"scores":	[-4.09384737128582]
								}, {
									"case":	529,
									"scores":	[-4.09384737128582]
								}, {
									"case":	530,
									"scores":	[-4.09384737128582]
								}, {
									"case":	531,
									"scores":	[-4.09384737128582]
								}, {
									"case":	532,
									"scores":	[-4.09384737128582]
								}, {
									"case":	533,
									"scores":	[-4.09384737128582]
								}, {
									"case":	534,
									"scores":	[-4.09384737128582]
								}, {
									"case":	535,
									"scores":	[-4.09384737128582]
								}, {
									"case":	536,
									"scores":	[-4.09384737128582]
								}, {
									"case":	537,
									"scores":	[-4.09384737128582]
								}, {
									"case":	538,
									"scores":	[-4.09384737128582]
								}, {
									"case":	539,
									"scores":	[-4.09384737128582]
								}, {
									"case":	540,
									"scores":	[-4.09384737128582]
								}, {
									"case":	541,
									"scores":	[-4.09384737128582]
								}, {
									"case":	542,
									"scores":	[-4.09384737128582]
								}, {
									"case":	543,
									"scores":	[-4.09384737128582]
								}, {
									"case":	544,
									"scores":	[-4.09384737128582]
								}, {
									"case":	545,
									"scores":	[-4.09384737128582]
								}, {
									"case":	546,
									"scores":	[-4.09384737128582]
								}, {
									"case":	547,
									"scores":	[-4.09384737128582]
								}, {
									"case":	548,
									"scores":	[-4.09384737128582]
								}, {
									"case":	549,
									"scores":	[-4.09384737128582]
								}, {
									"case":	550,
									"scores":	[-4.09384737128582]
								}, {
									"case":	551,
									"scores":	[-4.09384737128582]
								}, {
									"case":	552,
									"scores":	[-4.09384737128582]
								}, {
									"case":	553,
									"scores":	[-4.09384737128582]
								}, {
									"case":	554,
									"scores":	[-4.09384737128582]
								}, {
									"case":	555,
									"scores":	[-4.09384737128582]
								}, {
									"case":	556,
									"scores":	[-4.09384737128582]
								}, {
									"case":	557,
									"scores":	[-4.09384737128582]
								}, {
									"case":	558,
									"scores":	[-4.09384737128582]
								}, {
									"case":	559,
									"scores":	[-4.09384737128582]
								}, {
									"case":	560,
									"scores":	[-4.09384737128582]
								}, {
									"case":	561,
									"scores":	[-4.09384737128582]
								}, {
									"case":	562,
									"scores":	[-4.3332760494858213, -6.22195877128582, -6.9555119743858214, -6.54547547438582, -5.98070437838582, -6.9555119743858214, -6.54547547438582, -5.98070437838582, -6.04585787438582, -7.11297985908582, -6.9555119743858214, -6.9555119743858214, -6.04585787438582, -7.11297985908582, -6.9555119743858214, -6.9555119743858214, -6.9555119743858214, -6.9555119743858214, -6.9555119743858214, -6.9555119743858214, -6.9555119743858214, -6.9555119743858214, -6.9555119743858214, -6.63982021128582, -6.9555119743858214, -6.46255737128582, -6.9555119743858214, -6.46255737128582, -6.9555119743858214]
								}, {
									"case":	563,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	564,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	565,
									"scores":	[-4.43318424948582, -6.32186697128582, -7.05542017438582, -6.64538367438582, -6.08061257838582, -7.05542017438582, -6.64538367438582, -6.08061257838582, -6.14576607438582, -7.21288805908582, -7.05542017438582, -7.05542017438582, -6.14576607438582, -7.21288805908582, -7.05542017438582, -7.05542017438582, -7.05542017438582, -7.05542017438582, -7.05542017438582, -7.05542017438582, -7.05542017438582, -7.05542017438582, -7.05542017438582, -6.73972841128582, -7.05542017438582, -6.56246557128582, -7.05542017438582, -6.56246557128582, -7.05542017438582]
								}, {
									"case":	566,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	567,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	568,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	569,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	570,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	571,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	572,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	573,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}, {
									"case":	574,
									"scores":	[-6.69596604948582, -8.58464877128582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -9.31820197438582, -8.90816547438582, -8.34339437838582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -8.40854787438582, -9.47566985908582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.31820197438582, -9.00251021128582, -9.31820197438582, -8.82524737128582, -9.31820197438582, -8.82524737128582, -9.31820197438582]
								}]
						}, {
							"switch":	66,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1424,
							"begin_column":	6,
							"end_line":	1430,
							"end_column":	8,
							"patch_codes":	["if (__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    if (verbose) {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -3;\n}\n", "if ((inbyte == (-1)) || __is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    if (verbose) {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -3;\n}\n", "if ((inbyte == (-1)) && !__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    if (verbose) {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -3;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.2177949611281464, -4.9317976381281463, -5.5130249201281458, -4.7356499381281463, -5.0948649381281461, -5.5130249201281458, -4.7356499381281463, -5.0948649381281461, -5.285246320128147, -4.0159795931281472, -5.5130249201281458, -5.5130249201281458, -5.285246320128147, -4.0159795931281472, -5.5130249201281458, -5.5130249201281458, -5.5130249201281458, -5.5130249201281458, -5.5130249201281458, -5.5130249201281458, -5.5130249201281458, -5.5130249201281458, -5.5130249201281458, -5.2964511201281468, -5.5130249201281458, -5.0316696201281461, -5.5130249201281458, -5.0316696201281461, -5.5130249201281458]
								}, {
									"case":	2,
									"scores":	[-1.649815990428146, -4.3638186674281458, -4.9450459494281462, -4.1676709674281458, -4.5268859674281465, -4.9450459494281462, -4.1676709674281458, -4.5268859674281465, -4.7172673494281456, -3.4480006224281463, -4.9450459494281462, -4.9450459494281462, -4.7172673494281456, -3.4480006224281463, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.7284721494281463, -4.9450459494281462, -4.4636906494281465, -4.9450459494281462, -4.4636906494281465, -4.9450459494281462]
								}, {
									"case":	3,
									"scores":	[-1.649815990428146, -4.3638186674281458, -4.9450459494281462, -4.1676709674281458, -4.5268859674281465, -4.9450459494281462, -4.1676709674281458, -4.5268859674281465, -4.7172673494281456, -3.4480006224281463, -4.9450459494281462, -4.9450459494281462, -4.7172673494281456, -3.4480006224281463, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.9450459494281462, -4.7284721494281463, -4.9450459494281462, -4.4636906494281465, -4.9450459494281462, -4.4636906494281465, -4.9450459494281462]
								}]
						}, {
							"switch":	72,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1424,
							"begin_column":	6,
							"end_line":	1430,
							"end_column":	8,
							"patch_codes":	["if (!__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (inbyte == (-1)) {\n        if (verbose) {\n            if (!quiet)\n                rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        return -3;\n    }\n", "if (!__is_neg(\"\", \"L1424\", 29, &(inbyte), sizeof (inbyte), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(verbose), sizeof (verbose), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (inbyte == (-1))) {\n    if (verbose) {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -3;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.387283212285821, -5.10128588928582, -5.68251317128582, -4.90513818928582, -5.26435318928582, -5.68251317128582, -4.90513818928582, -5.26435318928582, -5.45473457128582, -4.18546784428582, -5.68251317128582, -5.68251317128582, -5.45473457128582, -4.18546784428582, -5.68251317128582, -5.68251317128582, -5.68251317128582, -5.68251317128582, -5.68251317128582, -5.68251317128582, -5.68251317128582, -5.68251317128582, -5.68251317128582, -5.46593937128582, -5.68251317128582, -5.20115787128582, -5.68251317128582, -5.20115787128582, -5.68251317128582]
								}, {
									"case":	2,
									"scores":	[-3.52153865928582, -6.23554133628582, -6.81676861828582, -6.03939363628582, -6.3986086362858217, -6.81676861828582, -6.03939363628582, -6.3986086362858217, -6.58899001828582, -5.31972329128582, -6.81676861828582, -6.81676861828582, -6.58899001828582, -5.31972329128582, -6.81676861828582, -6.81676861828582, -6.81676861828582, -6.81676861828582, -6.81676861828582, -6.81676861828582, -6.81676861828582, -6.81676861828582, -6.81676861828582, -6.60019481828582, -6.81676861828582, -6.33541331828582, -6.81676861828582, -6.33541331828582, -6.81676861828582]
								}]
						}]
				}, {
					"line":	1418,
					"switches":	[{
							"switch":	61,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1419,
							"begin_column":	0,
							"end_line":	1419,
							"end_column":	0,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1746582005559]
								}, {
									"case":	2,
									"scores":	[-4.1746582005559]
								}, {
									"case":	3,
									"scores":	[-4.1746582005559]
								}, {
									"case":	4,
									"scores":	[-4.1746582005559]
								}, {
									"case":	5,
									"scores":	[-4.1746582005559]
								}, {
									"case":	6,
									"scores":	[-4.1746582005559]
								}, {
									"case":	7,
									"scores":	[-4.1746582005559]
								}, {
									"case":	8,
									"scores":	[-4.1746582005559]
								}, {
									"case":	9,
									"scores":	[-4.1746582005559]
								}, {
									"case":	10,
									"scores":	[-4.1746582005559]
								}, {
									"case":	11,
									"scores":	[-4.1746582005559]
								}, {
									"case":	12,
									"scores":	[-4.1746582005559]
								}, {
									"case":	13,
									"scores":	[-4.1746582005559]
								}, {
									"case":	14,
									"scores":	[-4.1746582005559]
								}, {
									"case":	15,
									"scores":	[-4.1746582005559]
								}, {
									"case":	16,
									"scores":	[-4.1746582005559]
								}, {
									"case":	17,
									"scores":	[-4.1746582005559]
								}, {
									"case":	18,
									"scores":	[-4.1746582005559]
								}, {
									"case":	19,
									"scores":	[-4.1746582005559]
								}, {
									"case":	20,
									"scores":	[-4.1746582005559]
								}, {
									"case":	21,
									"scores":	[-4.1746582005559]
								}, {
									"case":	22,
									"scores":	[-4.1746582005559]
								}, {
									"case":	23,
									"scores":	[-4.1746582005559]
								}, {
									"case":	24,
									"scores":	[-4.1746582005559]
								}, {
									"case":	25,
									"scores":	[-4.1746582005559]
								}, {
									"case":	26,
									"scores":	[-4.1746582005559]
								}, {
									"case":	27,
									"scores":	[-4.1746582005559]
								}, {
									"case":	28,
									"scores":	[-4.1746582005559]
								}, {
									"case":	29,
									"scores":	[-4.1746582005559]
								}, {
									"case":	30,
									"scores":	[-4.1746582005559]
								}, {
									"case":	31,
									"scores":	[-4.1746582005559]
								}, {
									"case":	32,
									"scores":	[-4.1746582005559]
								}, {
									"case":	33,
									"scores":	[-4.1746582005559]
								}, {
									"case":	34,
									"scores":	[-4.1746582005559]
								}, {
									"case":	35,
									"scores":	[-4.1746582005559]
								}, {
									"case":	36,
									"scores":	[-4.1746582005559]
								}, {
									"case":	37,
									"scores":	[-4.1746582005559]
								}, {
									"case":	38,
									"scores":	[-4.1746582005559]
								}, {
									"case":	39,
									"scores":	[-4.1746582005559]
								}, {
									"case":	40,
									"scores":	[-4.1746582005559]
								}, {
									"case":	41,
									"scores":	[-4.1746582005559]
								}, {
									"case":	42,
									"scores":	[-4.1746582005559]
								}, {
									"case":	43,
									"scores":	[-4.1746582005559]
								}, {
									"case":	44,
									"scores":	[-4.1746582005559]
								}, {
									"case":	45,
									"scores":	[-4.1746582005559]
								}, {
									"case":	46,
									"scores":	[-4.1746582005559]
								}, {
									"case":	47,
									"scores":	[-4.1746582005559]
								}, {
									"case":	48,
									"scores":	[-4.1746582005559]
								}, {
									"case":	49,
									"scores":	[-4.1746582005559]
								}, {
									"case":	50,
									"scores":	[-4.1746582005559]
								}, {
									"case":	51,
									"scores":	[-4.1746582005559]
								}, {
									"case":	52,
									"scores":	[-4.1746582005559]
								}, {
									"case":	53,
									"scores":	[-4.1746582005559]
								}, {
									"case":	54,
									"scores":	[-4.1746582005559]
								}, {
									"case":	55,
									"scores":	[-4.1746582005559]
								}, {
									"case":	56,
									"scores":	[-4.1746582005559]
								}, {
									"case":	57,
									"scores":	[-4.1746582005559]
								}, {
									"case":	58,
									"scores":	[-4.1746582005559]
								}, {
									"case":	59,
									"scores":	[-4.1746582005559]
								}, {
									"case":	60,
									"scores":	[-4.1746582005559]
								}, {
									"case":	61,
									"scores":	[-4.1746582005559]
								}, {
									"case":	62,
									"scores":	[-4.1746582005559]
								}, {
									"case":	63,
									"scores":	[-4.1746582005559]
								}, {
									"case":	64,
									"scores":	[-4.1746582005559]
								}, {
									"case":	65,
									"scores":	[-4.1746582005559]
								}, {
									"case":	66,
									"scores":	[-4.1746582005559]
								}, {
									"case":	67,
									"scores":	[-4.1746582005559]
								}, {
									"case":	68,
									"scores":	[-4.1746582005559]
								}, {
									"case":	69,
									"scores":	[-4.1746582005559]
								}, {
									"case":	70,
									"scores":	[-4.1746582005559]
								}, {
									"case":	71,
									"scores":	[-4.1746582005559]
								}, {
									"case":	72,
									"scores":	[-4.1746582005559]
								}, {
									"case":	73,
									"scores":	[-4.1746582005559]
								}, {
									"case":	74,
									"scores":	[-4.1746582005559]
								}, {
									"case":	75,
									"scores":	[-4.1746582005559]
								}, {
									"case":	76,
									"scores":	[-4.1746582005559]
								}, {
									"case":	77,
									"scores":	[-4.1746582005559]
								}, {
									"case":	78,
									"scores":	[-4.1746582005559]
								}, {
									"case":	79,
									"scores":	[-4.1746582005559]
								}, {
									"case":	80,
									"scores":	[-4.1746582005559]
								}, {
									"case":	81,
									"scores":	[-4.1746582005559]
								}, {
									"case":	82,
									"scores":	[-4.1746582005559]
								}, {
									"case":	83,
									"scores":	[-4.1746582005559]
								}, {
									"case":	84,
									"scores":	[-4.1746582005559]
								}, {
									"case":	85,
									"scores":	[-4.1746582005559]
								}, {
									"case":	86,
									"scores":	[-4.1746582005559]
								}, {
									"case":	87,
									"scores":	[-4.1746582005559]
								}, {
									"case":	88,
									"scores":	[-4.1746582005559]
								}, {
									"case":	89,
									"scores":	[-4.1746582005559]
								}, {
									"case":	90,
									"scores":	[-4.1746582005559]
								}, {
									"case":	91,
									"scores":	[-4.1746582005559]
								}, {
									"case":	92,
									"scores":	[-4.1746582005559]
								}, {
									"case":	93,
									"scores":	[-4.1746582005559]
								}, {
									"case":	94,
									"scores":	[-4.1746582005559]
								}, {
									"case":	95,
									"scores":	[-4.1746582005559]
								}, {
									"case":	96,
									"scores":	[-4.1746582005559]
								}, {
									"case":	97,
									"scores":	[-4.1746582005559]
								}, {
									"case":	98,
									"scores":	[-4.1746582005559]
								}, {
									"case":	99,
									"scores":	[-4.1746582005559]
								}, {
									"case":	100,
									"scores":	[-4.1746582005559]
								}, {
									"case":	101,
									"scores":	[-4.1746582005559]
								}, {
									"case":	102,
									"scores":	[-4.1746582005559]
								}, {
									"case":	103,
									"scores":	[-4.1746582005559]
								}, {
									"case":	104,
									"scores":	[-4.1746582005559]
								}, {
									"case":	105,
									"scores":	[-4.1746582005559]
								}, {
									"case":	106,
									"scores":	[-4.1746582005559]
								}, {
									"case":	107,
									"scores":	[-4.1746582005559]
								}, {
									"case":	108,
									"scores":	[-4.1746582005559]
								}, {
									"case":	109,
									"scores":	[-4.1746582005559]
								}, {
									"case":	110,
									"scores":	[-4.1746582005559]
								}, {
									"case":	111,
									"scores":	[-4.1746582005559]
								}, {
									"case":	112,
									"scores":	[-4.1746582005559]
								}, {
									"case":	113,
									"scores":	[-4.1746582005559]
								}, {
									"case":	114,
									"scores":	[-4.1746582005559]
								}, {
									"case":	115,
									"scores":	[-4.1746582005559]
								}, {
									"case":	116,
									"scores":	[-4.1746582005559]
								}, {
									"case":	117,
									"scores":	[-4.1746582005559]
								}, {
									"case":	118,
									"scores":	[-4.1746582005559]
								}, {
									"case":	119,
									"scores":	[-4.1746582005559]
								}, {
									"case":	120,
									"scores":	[-4.1746582005559]
								}, {
									"case":	121,
									"scores":	[-4.1746582005559]
								}, {
									"case":	122,
									"scores":	[-4.1746582005559]
								}, {
									"case":	123,
									"scores":	[-4.1746582005559]
								}, {
									"case":	124,
									"scores":	[-4.1746582005559]
								}, {
									"case":	125,
									"scores":	[-4.1746582005559]
								}, {
									"case":	126,
									"scores":	[-4.1746582005559]
								}, {
									"case":	127,
									"scores":	[-4.1746582005559]
								}, {
									"case":	128,
									"scores":	[-4.1746582005559]
								}, {
									"case":	129,
									"scores":	[-4.1746582005559]
								}, {
									"case":	130,
									"scores":	[-4.1746582005559]
								}, {
									"case":	131,
									"scores":	[-4.1746582005559]
								}, {
									"case":	132,
									"scores":	[-4.1746582005559]
								}, {
									"case":	133,
									"scores":	[-4.1746582005559]
								}, {
									"case":	134,
									"scores":	[-4.1746582005559]
								}, {
									"case":	135,
									"scores":	[-4.1746582005559]
								}, {
									"case":	136,
									"scores":	[-4.1746582005559]
								}, {
									"case":	137,
									"scores":	[-4.1746582005559]
								}, {
									"case":	138,
									"scores":	[-4.1746582005559]
								}, {
									"case":	139,
									"scores":	[-4.1746582005559]
								}, {
									"case":	140,
									"scores":	[-4.1746582005559]
								}, {
									"case":	141,
									"scores":	[-4.1746582005559]
								}, {
									"case":	142,
									"scores":	[-4.1746582005559]
								}, {
									"case":	143,
									"scores":	[-4.1746582005559]
								}, {
									"case":	144,
									"scores":	[-4.1746582005559]
								}, {
									"case":	145,
									"scores":	[-4.1746582005559]
								}, {
									"case":	146,
									"scores":	[-4.1746582005559]
								}, {
									"case":	147,
									"scores":	[-4.1746582005559]
								}, {
									"case":	148,
									"scores":	[-4.1746582005559]
								}, {
									"case":	149,
									"scores":	[-4.1746582005559]
								}, {
									"case":	150,
									"scores":	[-4.1746582005559]
								}, {
									"case":	151,
									"scores":	[-4.1746582005559]
								}, {
									"case":	152,
									"scores":	[-4.1746582005559]
								}, {
									"case":	153,
									"scores":	[-4.1746582005559]
								}, {
									"case":	154,
									"scores":	[-4.1746582005559]
								}, {
									"case":	155,
									"scores":	[-4.1746582005559]
								}, {
									"case":	156,
									"scores":	[-4.1746582005559]
								}, {
									"case":	157,
									"scores":	[-4.1746582005559]
								}, {
									"case":	158,
									"scores":	[-4.1746582005559]
								}, {
									"case":	159,
									"scores":	[-4.1746582005559]
								}, {
									"case":	160,
									"scores":	[-4.1746582005559]
								}, {
									"case":	161,
									"scores":	[-4.1746582005559]
								}, {
									"case":	162,
									"scores":	[-4.1746582005559]
								}, {
									"case":	163,
									"scores":	[-4.1746582005559]
								}, {
									"case":	164,
									"scores":	[-4.1746582005559]
								}, {
									"case":	165,
									"scores":	[-4.1746582005559]
								}, {
									"case":	166,
									"scores":	[-4.1746582005559]
								}, {
									"case":	167,
									"scores":	[-4.1746582005559]
								}, {
									"case":	168,
									"scores":	[-4.1746582005559]
								}, {
									"case":	169,
									"scores":	[-4.1746582005559]
								}, {
									"case":	170,
									"scores":	[-4.1746582005559]
								}, {
									"case":	171,
									"scores":	[-4.1746582005559]
								}, {
									"case":	172,
									"scores":	[-4.1746582005559]
								}, {
									"case":	173,
									"scores":	[-4.1746582005559]
								}, {
									"case":	174,
									"scores":	[-4.1746582005559]
								}, {
									"case":	175,
									"scores":	[-4.1746582005559]
								}, {
									"case":	176,
									"scores":	[-4.1746582005559]
								}, {
									"case":	177,
									"scores":	[-4.1746582005559]
								}, {
									"case":	178,
									"scores":	[-4.1746582005559]
								}, {
									"case":	179,
									"scores":	[-4.1746582005559]
								}, {
									"case":	180,
									"scores":	[-4.1746582005559]
								}, {
									"case":	181,
									"scores":	[-4.1746582005559]
								}, {
									"case":	182,
									"scores":	[-4.1746582005559]
								}, {
									"case":	183,
									"scores":	[-4.1746582005559]
								}, {
									"case":	184,
									"scores":	[-4.1746582005559]
								}, {
									"case":	185,
									"scores":	[-4.1746582005559]
								}, {
									"case":	186,
									"scores":	[-4.1746582005559]
								}, {
									"case":	187,
									"scores":	[-4.1746582005559]
								}, {
									"case":	188,
									"scores":	[-4.1746582005559]
								}, {
									"case":	189,
									"scores":	[-4.1746582005559]
								}, {
									"case":	190,
									"scores":	[-4.1746582005559]
								}, {
									"case":	191,
									"scores":	[-4.1746582005559]
								}, {
									"case":	192,
									"scores":	[-4.1746582005559]
								}, {
									"case":	193,
									"scores":	[-4.1746582005559]
								}, {
									"case":	194,
									"scores":	[-4.1746582005559]
								}, {
									"case":	195,
									"scores":	[-4.1746582005559]
								}, {
									"case":	196,
									"scores":	[-4.1746582005559]
								}, {
									"case":	197,
									"scores":	[-4.1746582005559]
								}, {
									"case":	198,
									"scores":	[-4.1746582005559]
								}, {
									"case":	199,
									"scores":	[-4.1746582005559]
								}, {
									"case":	200,
									"scores":	[-4.1746582005559]
								}, {
									"case":	201,
									"scores":	[-4.1746582005559]
								}, {
									"case":	202,
									"scores":	[-4.1746582005559]
								}, {
									"case":	203,
									"scores":	[-4.1746582005559]
								}, {
									"case":	204,
									"scores":	[-4.1746582005559]
								}, {
									"case":	205,
									"scores":	[-4.1746582005559]
								}, {
									"case":	206,
									"scores":	[-4.1746582005559]
								}, {
									"case":	207,
									"scores":	[-4.1746582005559]
								}, {
									"case":	208,
									"scores":	[-4.1746582005559]
								}, {
									"case":	209,
									"scores":	[-4.1746582005559]
								}, {
									"case":	210,
									"scores":	[-4.1746582005559]
								}, {
									"case":	211,
									"scores":	[-4.1746582005559]
								}, {
									"case":	212,
									"scores":	[-4.1746582005559]
								}, {
									"case":	213,
									"scores":	[-4.1746582005559]
								}, {
									"case":	214,
									"scores":	[-4.1746582005559]
								}, {
									"case":	215,
									"scores":	[-4.1746582005559]
								}, {
									"case":	216,
									"scores":	[-4.1746582005559]
								}, {
									"case":	217,
									"scores":	[-4.1746582005559]
								}, {
									"case":	218,
									"scores":	[-4.1746582005559]
								}, {
									"case":	219,
									"scores":	[-4.1746582005559]
								}, {
									"case":	220,
									"scores":	[-4.1746582005559]
								}, {
									"case":	221,
									"scores":	[-4.1746582005559]
								}, {
									"case":	222,
									"scores":	[-4.1746582005559]
								}, {
									"case":	223,
									"scores":	[-4.1746582005559]
								}, {
									"case":	224,
									"scores":	[-4.1746582005559]
								}, {
									"case":	225,
									"scores":	[-4.1746582005559]
								}, {
									"case":	226,
									"scores":	[-4.1746582005559]
								}, {
									"case":	227,
									"scores":	[-4.1746582005559]
								}, {
									"case":	228,
									"scores":	[-4.1746582005559]
								}, {
									"case":	229,
									"scores":	[-4.1746582005559]
								}, {
									"case":	230,
									"scores":	[-4.1746582005559]
								}, {
									"case":	231,
									"scores":	[-4.1746582005559]
								}, {
									"case":	232,
									"scores":	[-4.1746582005559]
								}, {
									"case":	233,
									"scores":	[-4.1746582005559]
								}, {
									"case":	234,
									"scores":	[-4.1746582005559]
								}, {
									"case":	235,
									"scores":	[-4.1746582005559]
								}, {
									"case":	236,
									"scores":	[-4.1746582005559]
								}, {
									"case":	237,
									"scores":	[-4.1746582005559]
								}, {
									"case":	238,
									"scores":	[-4.1746582005559]
								}, {
									"case":	239,
									"scores":	[-4.1746582005559]
								}, {
									"case":	240,
									"scores":	[-4.1746582005559]
								}, {
									"case":	241,
									"scores":	[-4.1746582005559]
								}, {
									"case":	242,
									"scores":	[-4.1746582005559]
								}, {
									"case":	243,
									"scores":	[-4.1746582005559]
								}, {
									"case":	244,
									"scores":	[-4.1746582005559]
								}, {
									"case":	245,
									"scores":	[-4.1746582005559]
								}, {
									"case":	246,
									"scores":	[-4.1746582005559]
								}, {
									"case":	247,
									"scores":	[-4.1746582005559]
								}, {
									"case":	248,
									"scores":	[-4.1746582005559]
								}, {
									"case":	249,
									"scores":	[-4.1746582005559]
								}, {
									"case":	250,
									"scores":	[-4.1746582005559]
								}, {
									"case":	251,
									"scores":	[-4.1746582005559]
								}, {
									"case":	252,
									"scores":	[-4.1746582005559]
								}, {
									"case":	253,
									"scores":	[-4.1746582005559]
								}, {
									"case":	254,
									"scores":	[-4.1746582005559]
								}, {
									"case":	255,
									"scores":	[-4.1746582005559]
								}, {
									"case":	256,
									"scores":	[-4.1746582005559]
								}, {
									"case":	257,
									"scores":	[-4.1746582005559]
								}, {
									"case":	258,
									"scores":	[-4.1746582005559]
								}, {
									"case":	259,
									"scores":	[-4.1746582005559]
								}, {
									"case":	260,
									"scores":	[-4.1746582005559]
								}, {
									"case":	261,
									"scores":	[-4.1746582005559]
								}, {
									"case":	262,
									"scores":	[-4.1746582005559]
								}, {
									"case":	263,
									"scores":	[-4.1746582005559]
								}, {
									"case":	264,
									"scores":	[-4.1746582005559]
								}, {
									"case":	265,
									"scores":	[-4.1746582005559]
								}, {
									"case":	266,
									"scores":	[-4.1746582005559]
								}, {
									"case":	267,
									"scores":	[-4.1746582005559]
								}, {
									"case":	268,
									"scores":	[-4.1746582005559]
								}, {
									"case":	269,
									"scores":	[-4.1746582005559]
								}, {
									"case":	270,
									"scores":	[-4.1746582005559]
								}, {
									"case":	271,
									"scores":	[-4.1746582005559]
								}, {
									"case":	272,
									"scores":	[-4.1746582005559]
								}, {
									"case":	273,
									"scores":	[-4.1746582005559]
								}, {
									"case":	274,
									"scores":	[-4.1746582005559]
								}, {
									"case":	275,
									"scores":	[-4.1746582005559]
								}, {
									"case":	276,
									"scores":	[-4.1746582005559]
								}, {
									"case":	277,
									"scores":	[-4.1746582005559]
								}, {
									"case":	278,
									"scores":	[-4.1746582005559]
								}, {
									"case":	279,
									"scores":	[-4.1746582005559]
								}, {
									"case":	280,
									"scores":	[-4.1746582005559]
								}, {
									"case":	281,
									"scores":	[-4.1746582005559]
								}, {
									"case":	282,
									"scores":	[-4.1746582005559]
								}, {
									"case":	283,
									"scores":	[-4.1746582005559]
								}, {
									"case":	284,
									"scores":	[-4.1746582005559]
								}, {
									"case":	285,
									"scores":	[-4.1746582005559]
								}, {
									"case":	286,
									"scores":	[-4.1746582005559]
								}, {
									"case":	287,
									"scores":	[-4.1746582005559]
								}, {
									"case":	288,
									"scores":	[-4.1746582005559]
								}, {
									"case":	289,
									"scores":	[-4.1746582005559]
								}, {
									"case":	290,
									"scores":	[-4.1746582005559]
								}, {
									"case":	291,
									"scores":	[-4.1746582005559]
								}, {
									"case":	292,
									"scores":	[-4.1746582005559]
								}, {
									"case":	293,
									"scores":	[-4.1746582005559]
								}, {
									"case":	294,
									"scores":	[-4.1746582005559]
								}, {
									"case":	295,
									"scores":	[-4.1746582005559]
								}, {
									"case":	296,
									"scores":	[-4.1746582005559]
								}, {
									"case":	297,
									"scores":	[-4.1746582005559]
								}, {
									"case":	298,
									"scores":	[-4.1746582005559]
								}, {
									"case":	299,
									"scores":	[-4.1746582005559]
								}, {
									"case":	300,
									"scores":	[-4.1746582005559]
								}, {
									"case":	301,
									"scores":	[-4.1746582005559]
								}, {
									"case":	302,
									"scores":	[-4.1746582005559]
								}, {
									"case":	303,
									"scores":	[-4.1746582005559]
								}, {
									"case":	304,
									"scores":	[-4.1746582005559]
								}, {
									"case":	305,
									"scores":	[-4.1746582005559]
								}, {
									"case":	306,
									"scores":	[-4.1746582005559]
								}, {
									"case":	307,
									"scores":	[-4.1746582005559]
								}, {
									"case":	308,
									"scores":	[-4.1746582005559]
								}, {
									"case":	309,
									"scores":	[-4.1746582005559]
								}, {
									"case":	310,
									"scores":	[-4.1746582005559]
								}, {
									"case":	311,
									"scores":	[-4.1746582005559]
								}, {
									"case":	312,
									"scores":	[-4.1746582005559]
								}, {
									"case":	313,
									"scores":	[-4.1746582005559]
								}, {
									"case":	314,
									"scores":	[-4.1746582005559]
								}, {
									"case":	315,
									"scores":	[-4.1746582005559]
								}, {
									"case":	316,
									"scores":	[-4.1746582005559]
								}, {
									"case":	317,
									"scores":	[-4.1746582005559]
								}, {
									"case":	318,
									"scores":	[-4.1746582005559]
								}, {
									"case":	319,
									"scores":	[-4.1746582005559]
								}, {
									"case":	320,
									"scores":	[-4.1746582005559]
								}, {
									"case":	321,
									"scores":	[-4.1746582005559]
								}, {
									"case":	322,
									"scores":	[-4.1746582005559]
								}, {
									"case":	323,
									"scores":	[-4.1746582005559]
								}, {
									"case":	324,
									"scores":	[-4.1746582005559]
								}, {
									"case":	325,
									"scores":	[-4.1746582005559]
								}, {
									"case":	326,
									"scores":	[-4.1746582005559]
								}, {
									"case":	327,
									"scores":	[-4.1746582005559]
								}, {
									"case":	328,
									"scores":	[-4.1746582005559]
								}, {
									"case":	329,
									"scores":	[-4.1746582005559]
								}, {
									"case":	330,
									"scores":	[-4.1746582005559]
								}, {
									"case":	331,
									"scores":	[-4.1746582005559]
								}, {
									"case":	332,
									"scores":	[-4.1746582005559]
								}, {
									"case":	333,
									"scores":	[-4.1746582005559]
								}, {
									"case":	334,
									"scores":	[-4.1746582005559]
								}, {
									"case":	335,
									"scores":	[-4.1746582005559]
								}, {
									"case":	336,
									"scores":	[-4.1746582005559]
								}, {
									"case":	337,
									"scores":	[-4.1746582005559]
								}, {
									"case":	338,
									"scores":	[-4.1746582005559]
								}, {
									"case":	339,
									"scores":	[-4.1746582005559]
								}, {
									"case":	340,
									"scores":	[-4.1746582005559]
								}, {
									"case":	341,
									"scores":	[-4.1746582005559]
								}, {
									"case":	342,
									"scores":	[-4.1746582005559]
								}, {
									"case":	343,
									"scores":	[-4.1746582005559]
								}, {
									"case":	344,
									"scores":	[-4.1746582005559]
								}, {
									"case":	345,
									"scores":	[-4.1746582005559]
								}, {
									"case":	346,
									"scores":	[-4.1746582005559]
								}, {
									"case":	347,
									"scores":	[-4.1746582005559]
								}, {
									"case":	348,
									"scores":	[-4.1746582005559]
								}, {
									"case":	349,
									"scores":	[-4.1746582005559]
								}, {
									"case":	350,
									"scores":	[-4.1746582005559]
								}, {
									"case":	351,
									"scores":	[-4.1746582005559]
								}, {
									"case":	352,
									"scores":	[-4.1746582005559]
								}, {
									"case":	353,
									"scores":	[-4.1746582005559]
								}, {
									"case":	354,
									"scores":	[-4.1746582005559]
								}, {
									"case":	355,
									"scores":	[-4.1746582005559]
								}, {
									"case":	356,
									"scores":	[-4.1746582005559]
								}, {
									"case":	357,
									"scores":	[-4.1746582005559]
								}, {
									"case":	358,
									"scores":	[-4.1746582005559]
								}, {
									"case":	359,
									"scores":	[-4.1746582005559]
								}, {
									"case":	360,
									"scores":	[-4.1746582005559]
								}, {
									"case":	361,
									"scores":	[-4.1746582005559]
								}, {
									"case":	362,
									"scores":	[-4.1746582005559]
								}, {
									"case":	363,
									"scores":	[-4.1746582005559]
								}, {
									"case":	364,
									"scores":	[-4.1746582005559]
								}, {
									"case":	365,
									"scores":	[-4.1746582005559]
								}, {
									"case":	366,
									"scores":	[-4.1746582005559]
								}, {
									"case":	367,
									"scores":	[-4.1746582005559]
								}, {
									"case":	368,
									"scores":	[-4.1746582005559]
								}, {
									"case":	369,
									"scores":	[-4.1746582005559]
								}, {
									"case":	370,
									"scores":	[-4.1746582005559]
								}, {
									"case":	371,
									"scores":	[-4.1746582005559]
								}, {
									"case":	372,
									"scores":	[-4.1746582005559]
								}, {
									"case":	373,
									"scores":	[-4.1746582005559]
								}, {
									"case":	374,
									"scores":	[-4.1746582005559]
								}, {
									"case":	375,
									"scores":	[-4.1746582005559]
								}, {
									"case":	376,
									"scores":	[-4.1746582005559]
								}, {
									"case":	377,
									"scores":	[-4.1746582005559]
								}, {
									"case":	378,
									"scores":	[-4.1746582005559]
								}, {
									"case":	379,
									"scores":	[-4.1746582005559]
								}, {
									"case":	380,
									"scores":	[-4.1746582005559]
								}, {
									"case":	381,
									"scores":	[-4.1746582005559]
								}, {
									"case":	382,
									"scores":	[-4.1746582005559]
								}, {
									"case":	383,
									"scores":	[-4.1746582005559]
								}, {
									"case":	384,
									"scores":	[-4.1746582005559]
								}, {
									"case":	385,
									"scores":	[-4.1746582005559]
								}, {
									"case":	386,
									"scores":	[-4.1746582005559]
								}, {
									"case":	387,
									"scores":	[-4.1746582005559]
								}, {
									"case":	388,
									"scores":	[-4.1746582005559]
								}, {
									"case":	389,
									"scores":	[-4.1746582005559]
								}, {
									"case":	390,
									"scores":	[-4.1746582005559]
								}, {
									"case":	391,
									"scores":	[-4.1746582005559]
								}, {
									"case":	392,
									"scores":	[-4.1746582005559]
								}, {
									"case":	393,
									"scores":	[-4.1746582005559]
								}, {
									"case":	394,
									"scores":	[-4.1746582005559]
								}, {
									"case":	395,
									"scores":	[-4.1746582005559]
								}, {
									"case":	396,
									"scores":	[-4.1746582005559]
								}, {
									"case":	397,
									"scores":	[-4.1746582005559]
								}, {
									"case":	398,
									"scores":	[-4.1746582005559]
								}, {
									"case":	399,
									"scores":	[-4.1746582005559]
								}, {
									"case":	400,
									"scores":	[-4.1746582005559]
								}, {
									"case":	401,
									"scores":	[-4.1746582005559]
								}, {
									"case":	402,
									"scores":	[-4.1746582005559]
								}, {
									"case":	403,
									"scores":	[-4.1746582005559]
								}, {
									"case":	404,
									"scores":	[-4.1746582005559]
								}, {
									"case":	405,
									"scores":	[-4.1746582005559]
								}, {
									"case":	406,
									"scores":	[-4.1746582005559]
								}, {
									"case":	407,
									"scores":	[-4.1746582005559]
								}, {
									"case":	408,
									"scores":	[-4.1746582005559]
								}, {
									"case":	409,
									"scores":	[-4.1746582005559]
								}, {
									"case":	410,
									"scores":	[-4.1746582005559]
								}, {
									"case":	411,
									"scores":	[-4.1746582005559]
								}, {
									"case":	412,
									"scores":	[-4.1746582005559]
								}, {
									"case":	413,
									"scores":	[-4.1746582005559]
								}, {
									"case":	414,
									"scores":	[-4.1746582005559]
								}, {
									"case":	415,
									"scores":	[-4.1746582005559]
								}, {
									"case":	416,
									"scores":	[-4.1746582005559]
								}, {
									"case":	417,
									"scores":	[-4.1746582005559]
								}, {
									"case":	418,
									"scores":	[-4.1746582005559]
								}, {
									"case":	419,
									"scores":	[-4.1746582005559]
								}, {
									"case":	420,
									"scores":	[-4.1746582005559]
								}, {
									"case":	421,
									"scores":	[-4.1746582005559]
								}, {
									"case":	422,
									"scores":	[-4.1746582005559]
								}, {
									"case":	423,
									"scores":	[-4.1746582005559]
								}, {
									"case":	424,
									"scores":	[-4.1746582005559]
								}, {
									"case":	425,
									"scores":	[-4.1746582005559]
								}, {
									"case":	426,
									"scores":	[-4.1746582005559]
								}, {
									"case":	427,
									"scores":	[-4.1746582005559]
								}, {
									"case":	428,
									"scores":	[-4.1746582005559]
								}, {
									"case":	429,
									"scores":	[-4.1746582005559]
								}, {
									"case":	430,
									"scores":	[-4.1746582005559]
								}, {
									"case":	431,
									"scores":	[-4.1746582005559]
								}, {
									"case":	432,
									"scores":	[-4.1746582005559]
								}, {
									"case":	433,
									"scores":	[-4.1746582005559]
								}, {
									"case":	434,
									"scores":	[-4.1746582005559]
								}, {
									"case":	435,
									"scores":	[-4.1746582005559]
								}, {
									"case":	436,
									"scores":	[-4.1746582005559]
								}, {
									"case":	437,
									"scores":	[-4.1746582005559]
								}, {
									"case":	438,
									"scores":	[-4.1746582005559]
								}, {
									"case":	439,
									"scores":	[-4.1746582005559]
								}, {
									"case":	440,
									"scores":	[-4.1746582005559]
								}, {
									"case":	441,
									"scores":	[-4.1746582005559]
								}, {
									"case":	442,
									"scores":	[-4.1746582005559]
								}, {
									"case":	443,
									"scores":	[-4.1746582005559]
								}, {
									"case":	444,
									"scores":	[-4.1746582005559]
								}, {
									"case":	445,
									"scores":	[-4.1746582005559]
								}, {
									"case":	446,
									"scores":	[-4.1746582005559]
								}, {
									"case":	447,
									"scores":	[-4.1746582005559]
								}, {
									"case":	448,
									"scores":	[-4.1746582005559]
								}, {
									"case":	449,
									"scores":	[-4.1746582005559]
								}, {
									"case":	450,
									"scores":	[-4.1746582005559]
								}, {
									"case":	451,
									"scores":	[-4.1746582005559]
								}, {
									"case":	452,
									"scores":	[-4.1746582005559]
								}, {
									"case":	453,
									"scores":	[-4.1746582005559]
								}, {
									"case":	454,
									"scores":	[-4.1746582005559]
								}, {
									"case":	455,
									"scores":	[-4.1746582005559]
								}, {
									"case":	456,
									"scores":	[-4.1746582005559]
								}, {
									"case":	457,
									"scores":	[-4.1746582005559]
								}, {
									"case":	458,
									"scores":	[-4.1746582005559]
								}, {
									"case":	459,
									"scores":	[-4.1746582005559]
								}, {
									"case":	460,
									"scores":	[-4.1746582005559]
								}, {
									"case":	461,
									"scores":	[-4.1746582005559]
								}, {
									"case":	462,
									"scores":	[-4.1746582005559]
								}, {
									"case":	463,
									"scores":	[-4.1746582005559]
								}, {
									"case":	464,
									"scores":	[-4.1746582005559]
								}, {
									"case":	465,
									"scores":	[-4.1746582005559]
								}, {
									"case":	466,
									"scores":	[-4.1746582005559]
								}, {
									"case":	467,
									"scores":	[-4.1746582005559]
								}, {
									"case":	468,
									"scores":	[-4.1746582005559]
								}, {
									"case":	469,
									"scores":	[-4.1746582005559]
								}, {
									"case":	470,
									"scores":	[-4.1746582005559]
								}, {
									"case":	471,
									"scores":	[-4.1746582005559]
								}, {
									"case":	472,
									"scores":	[-4.1746582005559]
								}, {
									"case":	473,
									"scores":	[-4.1746582005559]
								}, {
									"case":	474,
									"scores":	[-4.1746582005559]
								}, {
									"case":	475,
									"scores":	[-4.1746582005559]
								}, {
									"case":	476,
									"scores":	[-4.1746582005559]
								}, {
									"case":	477,
									"scores":	[-4.1746582005559]
								}, {
									"case":	478,
									"scores":	[-4.1746582005559]
								}, {
									"case":	479,
									"scores":	[-4.1746582005559]
								}, {
									"case":	480,
									"scores":	[-4.1746582005559]
								}, {
									"case":	481,
									"scores":	[-4.1746582005559]
								}, {
									"case":	482,
									"scores":	[-4.1746582005559]
								}, {
									"case":	483,
									"scores":	[-4.1746582005559]
								}, {
									"case":	484,
									"scores":	[-4.1746582005559]
								}, {
									"case":	485,
									"scores":	[-4.1746582005559]
								}, {
									"case":	486,
									"scores":	[-4.1746582005559]
								}, {
									"case":	487,
									"scores":	[-4.1746582005559]
								}, {
									"case":	488,
									"scores":	[-4.1746582005559]
								}, {
									"case":	489,
									"scores":	[-4.1746582005559]
								}, {
									"case":	490,
									"scores":	[-4.1746582005559]
								}, {
									"case":	491,
									"scores":	[-4.1746582005559]
								}, {
									"case":	492,
									"scores":	[-4.1746582005559]
								}, {
									"case":	493,
									"scores":	[-4.1746582005559]
								}, {
									"case":	494,
									"scores":	[-4.1746582005559]
								}, {
									"case":	495,
									"scores":	[-4.1746582005559]
								}, {
									"case":	496,
									"scores":	[-4.1746582005559]
								}, {
									"case":	497,
									"scores":	[-4.1746582005559]
								}, {
									"case":	498,
									"scores":	[-4.1746582005559]
								}, {
									"case":	499,
									"scores":	[-4.1746582005559]
								}, {
									"case":	500,
									"scores":	[-4.1746582005559]
								}, {
									"case":	501,
									"scores":	[-4.1746582005559]
								}, {
									"case":	502,
									"scores":	[-4.1746582005559]
								}, {
									"case":	503,
									"scores":	[-4.1746582005559]
								}, {
									"case":	504,
									"scores":	[-4.1746582005559]
								}, {
									"case":	505,
									"scores":	[-4.1746582005559]
								}, {
									"case":	506,
									"scores":	[-4.1746582005559]
								}, {
									"case":	507,
									"scores":	[-4.1746582005559]
								}, {
									"case":	508,
									"scores":	[-4.1746582005559]
								}, {
									"case":	509,
									"scores":	[-4.1746582005559]
								}, {
									"case":	510,
									"scores":	[-4.1746582005559]
								}, {
									"case":	511,
									"scores":	[-4.1746582005559]
								}, {
									"case":	512,
									"scores":	[-4.1746582005559]
								}, {
									"case":	513,
									"scores":	[-4.1746582005559]
								}, {
									"case":	514,
									"scores":	[-4.1746582005559]
								}, {
									"case":	515,
									"scores":	[-4.1746582005559]
								}, {
									"case":	516,
									"scores":	[-4.1746582005559]
								}, {
									"case":	517,
									"scores":	[-4.1746582005559]
								}, {
									"case":	518,
									"scores":	[-4.1746582005559]
								}, {
									"case":	519,
									"scores":	[-4.1746582005559]
								}, {
									"case":	520,
									"scores":	[-4.1746582005559]
								}, {
									"case":	521,
									"scores":	[-4.1746582005559]
								}, {
									"case":	522,
									"scores":	[-4.1746582005559]
								}, {
									"case":	523,
									"scores":	[-4.1746582005559]
								}, {
									"case":	524,
									"scores":	[-4.1746582005559]
								}, {
									"case":	525,
									"scores":	[-4.1746582005559]
								}, {
									"case":	526,
									"scores":	[-4.1746582005559]
								}, {
									"case":	527,
									"scores":	[-4.1746582005559]
								}, {
									"case":	528,
									"scores":	[-4.1746582005559]
								}, {
									"case":	529,
									"scores":	[-4.1746582005559]
								}, {
									"case":	530,
									"scores":	[-4.1746582005559]
								}, {
									"case":	531,
									"scores":	[-4.1746582005559]
								}, {
									"case":	532,
									"scores":	[-4.1746582005559]
								}, {
									"case":	533,
									"scores":	[-4.1746582005559]
								}, {
									"case":	534,
									"scores":	[-4.1746582005559]
								}, {
									"case":	535,
									"scores":	[-4.1746582005559]
								}, {
									"case":	536,
									"scores":	[-4.1746582005559]
								}, {
									"case":	537,
									"scores":	[-4.1746582005559]
								}, {
									"case":	538,
									"scores":	[-4.1746582005559]
								}, {
									"case":	539,
									"scores":	[-4.1746582005559]
								}, {
									"case":	540,
									"scores":	[-4.1746582005559]
								}, {
									"case":	541,
									"scores":	[-4.1746582005559]
								}, {
									"case":	542,
									"scores":	[-4.1746582005559]
								}, {
									"case":	543,
									"scores":	[-4.1746582005559]
								}, {
									"case":	544,
									"scores":	[-4.1746582005559]
								}, {
									"case":	545,
									"scores":	[-5.1716118725559, -6.9221436503559, -4.8156845856559, -4.5204547576559, -6.9221436503559, -4.8156845856559, -4.5204547576559, -5.8550216656559, -5.8550216656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.7646757656559, -6.4489840025559, -6.7646757656559, -6.2717211625559, -6.7646757656559, -6.2717211625559, -6.7646757656559]
								}, {
									"case":	546,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	547,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	548,
									"scores":	[-5.2715200725559, -7.0220518503559, -4.9155927856559, -4.6203629576559, -7.0220518503559, -4.9155927856559, -4.6203629576559, -5.9549298656559, -5.9549298656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.8645839656559, -6.5488922025558987, -6.8645839656559, -6.3716293625558986, -6.8645839656559, -6.3716293625558986, -6.8645839656559]
								}, {
									"case":	549,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	550,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	551,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	552,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	553,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	554,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	555,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	556,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}, {
									"case":	557,
									"scores":	[-7.5343018725559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -9.2848336503559, -7.1783745856559, -6.8831447576559, -8.2177116656559, -8.2177116656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -9.1273657656559, -8.8116740025559, -9.1273657656559, -8.6344111625559, -9.1273657656559, -8.6344111625559, -9.1273657656559]
								}]
						}, {
							"switch":	62,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1419,
							"begin_column":	2,
							"end_line":	1431,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    int inbyte;\n    for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n        continue;\n    if (inbyte == (-1)) {\n        if (verbose) {\n            if (!quiet)\n                rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        return -3;\n    }\n}\n", "if ((magic[0] == 0) || __is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    int inbyte;\n    for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n        continue;\n    if (inbyte == (-1)) {\n        if (verbose) {\n            if (!quiet)\n                rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        return -3;\n    }\n}\n", "if ((magic[0] == 0) && !__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    int inbyte;\n    for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n        continue;\n    if (inbyte == (-1)) {\n        if (verbose) {\n            if (!quiet)\n                rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        return -3;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4847154953281461, -5.3977375993281465, -4.8269037953281471, -4.5842204283281482, -5.3977375993281465, -4.8269037953281471, -4.5842204283281482, -5.7106134223281462, -5.7106134223281462, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.8480938223281465, -5.6315200223281456, -5.8480938223281465, -5.366738522328145, -5.8480938223281465, -5.366738522328145, -5.8480938223281465]
								}, {
									"case":	2,
									"scores":	[-3.2550501784281458, -3.1680722824281458, -2.5972384784281459, -2.3545551114281462, -3.1680722824281458, -2.5972384784281459, -2.3545551114281462, -3.4809481054281468, -3.4809481054281468, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.4018547054281458, -3.6184285054281458, -3.1370732054281456, -3.6184285054281458, -3.1370732054281456, -3.6184285054281458]
								}, {
									"case":	3,
									"scores":	[-3.2550501784281458, -3.1680722824281458, -2.5972384784281459, -2.3545551114281462, -3.1680722824281458, -2.5972384784281459, -2.3545551114281462, -3.4809481054281468, -3.4809481054281468, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.6184285054281458, -3.4018547054281458, -3.6184285054281458, -3.1370732054281456, -3.6184285054281458, -3.1370732054281456, -3.6184285054281458]
								}]
						}, {
							"switch":	73,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1419,
							"begin_column":	2,
							"end_line":	1431,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (magic[0] == 0) {\n        int inbyte;\n        for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n            continue;\n        if (inbyte == (-1)) {\n            if (verbose) {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n            return -3;\n        }\n    }\n", "if (!__is_neg(\"\", \"L1419\", 28, &(imagic1), sizeof (imagic1), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(method), sizeof (method), &(quiet), sizeof (quiet), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (magic[0] == 0)) {\n    int inbyte;\n    for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n        continue;\n    if (inbyte == (-1)) {\n        if (verbose) {\n            if (!quiet)\n                rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        return -3;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4110656535559, -5.3240877575558985, -4.7532539535559, -4.5105705865558985, -5.3240877575558985, -4.7532539535559, -4.5105705865558985, -5.6369635805558982, -5.6369635805558982, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.7744439805558985, -5.5578701805558985, -5.7744439805558985, -5.2930886805559, -5.7744439805558985, -5.2930886805559, -5.7744439805558985]
								}, {
									"case":	2,
									"scores":	[-4.4512106535559, -4.3642327575558983, -3.793398953555899, -3.5507155865558988, -4.3642327575558983, -3.793398953555899, -3.5507155865558988, -4.6771085805559, -4.6771085805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.8145889805559, -4.5980151805559, -4.8145889805559, -4.3332336805558986, -4.8145889805559, -4.3332336805558986, -4.8145889805559]
								}]
						}]
				}, {
					"line":	1412,
					"switches":	[{
							"switch":	59,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1413,
							"begin_column":	3,
							"end_line":	1413,
							"end_column":	3,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	2,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	3,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	4,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	5,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	6,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	7,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	8,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	9,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	10,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	11,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	12,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	13,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	14,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	15,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	16,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	17,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	18,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	19,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	20,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	21,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	22,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	23,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	24,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	25,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	26,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	27,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	28,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	29,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	30,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	31,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	32,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	33,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	34,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	35,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	36,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	37,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	38,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	39,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	40,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	41,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	42,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	43,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	44,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	45,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	46,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	47,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	48,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	49,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	50,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	51,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	52,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	53,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	54,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	55,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	56,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	57,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	58,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	59,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	60,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	61,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	62,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	63,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	64,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	65,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	66,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	67,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	68,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	69,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	70,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	71,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	72,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	73,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	74,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	75,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	76,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	77,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	78,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	79,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	80,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	81,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	82,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	83,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	84,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	85,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	86,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	87,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	88,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	89,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	90,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	91,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	92,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	93,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	94,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	95,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	96,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	97,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	98,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	99,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	100,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	101,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	102,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	103,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	104,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	105,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	106,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	107,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	108,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	109,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	110,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	111,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	112,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	113,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	114,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	115,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	116,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	117,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	118,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	119,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	120,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	121,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	122,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	123,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	124,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	125,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	126,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	127,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	128,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	129,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	130,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	131,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	132,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	133,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	134,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	135,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	136,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	137,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	138,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	139,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	140,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	141,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	142,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	143,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	144,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	145,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	146,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	147,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	148,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	149,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	150,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	151,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	152,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	153,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	154,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	155,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	156,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	157,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	158,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	159,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	160,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	161,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	162,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	163,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	164,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	165,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	166,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	167,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	168,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	169,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	170,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	171,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	172,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	173,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	174,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	175,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	176,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	177,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	178,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	179,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	180,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	181,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	182,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	183,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	184,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	185,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	186,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	187,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	188,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	189,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	190,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	191,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	192,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	193,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	194,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	195,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	196,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	197,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	198,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	199,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	200,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	201,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	202,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	203,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	204,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	205,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	206,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	207,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	208,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	209,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	210,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	211,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	212,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	213,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	214,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	215,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	216,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	217,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	218,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	219,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	220,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	221,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	222,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	223,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	224,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	225,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	226,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	227,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	228,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	229,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	230,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	231,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	232,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	233,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	234,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	235,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	236,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	237,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	238,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	239,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	240,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	241,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	242,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	243,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	244,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	245,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	246,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	247,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	248,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	249,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	250,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	251,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	252,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	253,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	254,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	255,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	256,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	257,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	258,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	259,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	260,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	261,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	262,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	263,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	264,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	265,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	266,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	267,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	268,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	269,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	270,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	271,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	272,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	273,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	274,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	275,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	276,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	277,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	278,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	279,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	280,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	281,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	282,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	283,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	284,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	285,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	286,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	287,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	288,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	289,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	290,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	291,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	292,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	293,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	294,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	295,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	296,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	297,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	298,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	299,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	300,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	301,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	302,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	303,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	304,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	305,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	306,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	307,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	308,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	309,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	310,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	311,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	312,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	313,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	314,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	315,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	316,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	317,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	318,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	319,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	320,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	321,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	322,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	323,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	324,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	325,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	326,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	327,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	328,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	329,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	330,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	331,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	332,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	333,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	334,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	335,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	336,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	337,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	338,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	339,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	340,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	341,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	342,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	343,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	344,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	345,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	346,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	347,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	348,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	349,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	350,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	351,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	352,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	353,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	354,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	355,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	356,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	357,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	358,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	359,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	360,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	361,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	362,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	363,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	364,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	365,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	366,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	367,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	368,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	369,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	370,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	371,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	372,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	373,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	374,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	375,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	376,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	377,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	378,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	379,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	380,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	381,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	382,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	383,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	384,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	385,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	386,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	387,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	388,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	389,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	390,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	391,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	392,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	393,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	394,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	395,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	396,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	397,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	398,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	399,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	400,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	401,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	402,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	403,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	404,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	405,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	406,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	407,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	408,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	409,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	410,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	411,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	412,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	413,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	414,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	415,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	416,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	417,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	418,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	419,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	420,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	421,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	422,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	423,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	424,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	425,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	426,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	427,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	428,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	429,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	430,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	431,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	432,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	433,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	434,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	435,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	436,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	437,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	438,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	439,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	440,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	441,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	442,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	443,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	444,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	445,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	446,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	447,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	448,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	449,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	450,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	451,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	452,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	453,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	454,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	455,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	456,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	457,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	458,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	459,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	460,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	461,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	462,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	463,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	464,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	465,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	466,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	467,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	468,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	469,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	470,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	471,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	472,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	473,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	474,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	475,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	476,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	477,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	478,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	479,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	480,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	481,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	482,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	483,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	484,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	485,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	486,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	487,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	488,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	489,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	490,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	491,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	492,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	493,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	494,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	495,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	496,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	497,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	498,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	499,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	500,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	501,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	502,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	503,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	504,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	505,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	506,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	507,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	508,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	509,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	510,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	511,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	512,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	513,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	514,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	515,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	516,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	517,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	518,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	519,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	520,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	521,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	522,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	523,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	524,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	525,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	526,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	527,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	528,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	529,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	530,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	531,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	532,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	533,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	534,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	535,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	536,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	537,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	538,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	539,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	540,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	541,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	542,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	543,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	544,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	545,
									"scores":	[-6.29349033217342, -5.9548143426734184, -5.08309572291342, -5.9548143426734184, -5.08309572291342, -5.29259515767342, -5.29259515767342, -5.27452196097342, -3.3049063351734187, -3.3049063351734187, -4.39902047297342, -6.6739054729734182, -6.6739054729734182, -6.504467572973418, -5.27452196097342, -5.08084157987342, -4.3148777929734186, -4.3148777929734186, -6.6739054729734182, -6.6739054729734182, -6.6739054729734182, -6.6739054729734182, -6.5487766795734181, -4.39902047297342, -4.09662883957342, -6.6739054729734182, -3.9066631480734189, -6.6739054729734182]
								}, {
									"case":	546,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	547,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	548,
									"scores":	[-6.3933985321734186, -6.05472254267342, -5.18300392291342, -6.05472254267342, -5.18300392291342, -5.39250335767342, -5.39250335767342, -5.37443016097342, -3.4048145351734185, -3.4048145351734185, -4.4989286729734186, -6.77381367297342, -6.77381367297342, -6.60437577297342, -5.37443016097342, -5.18074977987342, -4.41478599297342, -4.41478599297342, -6.77381367297342, -6.77381367297342, -6.77381367297342, -6.77381367297342, -6.64868487957342, -4.4989286729734186, -4.1965370395734185, -6.77381367297342, -4.00657134807342, -6.77381367297342]
								}, {
									"case":	549,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	550,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	551,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	552,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	553,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	554,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	555,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	556,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}, {
									"case":	557,
									"scores":	[-8.65618033217342, -8.31750434267342, -7.44578572291342, -8.31750434267342, -7.44578572291342, -7.65528515767342, -7.65528515767342, -7.63721196097342, -5.66759633517342, -5.66759633517342, -6.76171047297342, -9.03659547297342, -9.03659547297342, -8.86715757297342, -7.63721196097342, -7.44353157987342, -6.67756779297342, -6.67756779297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -9.03659547297342, -8.91146667957342, -6.76171047297342, -6.4593188395734185, -9.03659547297342, -6.26935314807342, -9.03659547297342]
								}]
						}, {
							"switch":	60,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1413,
							"begin_column":	5,
							"end_line":	1436,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    rpl_fprintf(stderr, \"\\n%s: %s: not in gzip format\\n\", program_name, ifname);\n    exit_code = 1;\n    return -1;\n} else {\n    if (magic[0] == 0) {\n        int inbyte;\n        for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n            continue;\n        if (inbyte == (-1)) {\n            if (verbose) {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n            return -3;\n        }\n    }\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing garbage ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -2;\n}\n", "if ((part_nb == 1) || __is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    rpl_fprintf(stderr, \"\\n%s: %s: not in gzip format\\n\", program_name, ifname);\n    exit_code = 1;\n    return -1;\n} else {\n    if (magic[0] == 0) {\n        int inbyte;\n        for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n            continue;\n        if (inbyte == (-1)) {\n            if (verbose) {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n            return -3;\n        }\n    }\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing garbage ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -2;\n}\n", "if ((part_nb == 1) && !__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    rpl_fprintf(stderr, \"\\n%s: %s: not in gzip format\\n\", program_name, ifname);\n    exit_code = 1;\n    return -1;\n} else {\n    if (magic[0] == 0) {\n        int inbyte;\n        for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n            continue;\n        if (inbyte == (-1)) {\n            if (verbose) {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n            return -3;\n        }\n    }\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing garbage ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -2;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7815686849281471, -6.5186659286281454, -6.606492797668146, -6.5186659286281454, -6.606492797668146, -5.6821200289281464, -5.6821200289281464, -7.3773911559281462, -5.8740315659281475, -5.8740315659281475, -6.0451583559281463, -6.7585172089281453, -6.7585172089281453, -6.0810142089281474, -7.3773911559281462, -6.3951388819281458, -4.9599521999281464, -4.9599521999281464, -6.7585172089281453, -6.7585172089281453, -6.7585172089281453, -6.7585172089281453, -6.5298707286281452, -6.0451583559281463, -5.5517303756281455, -6.7585172089281453, -5.5649305319281464, -6.7585172089281453]
								}, {
									"case":	2,
									"scores":	[-1.7889787654281464, -4.526076009128146, -4.6139028781681457, -4.526076009128146, -4.6139028781681457, -3.6895301094281461, -3.6895301094281461, -5.3848012364281459, -3.8814416464281467, -3.8814416464281467, -4.052568436428146, -4.7659272894281459, -4.7659272894281459, -4.0884242894281462, -5.3848012364281459, -4.4025489624281464, -2.9673622804281461, -2.9673622804281461, -4.7659272894281459, -4.7659272894281459, -4.7659272894281459, -4.7659272894281459, -4.5372808091281458, -4.052568436428146, -3.5591404561281461, -4.7659272894281459, -3.5723406124281456, -4.7659272894281459]
								}, {
									"case":	3,
									"scores":	[-1.7889787654281464, -4.526076009128146, -4.6139028781681457, -4.526076009128146, -4.6139028781681457, -3.6895301094281461, -3.6895301094281461, -5.3848012364281459, -3.8814416464281467, -3.8814416464281467, -4.052568436428146, -4.7659272894281459, -4.7659272894281459, -4.0884242894281462, -5.3848012364281459, -4.4025489624281464, -2.9673622804281461, -2.9673622804281461, -4.7659272894281459, -4.7659272894281459, -4.7659272894281459, -4.7659272894281459, -4.5372808091281458, -4.052568436428146, -3.5591404561281461, -4.7659272894281459, -3.5723406124281456, -4.7659272894281459]
								}]
						}, {
							"switch":	74,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1413,
							"begin_column":	5,
							"end_line":	1436,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (part_nb == 1) {\n        rpl_fprintf(stderr, \"\\n%s: %s: not in gzip format\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    } else {\n        if (magic[0] == 0) {\n            int inbyte;\n            for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n                continue;\n            if (inbyte == (-1)) {\n                if (verbose) {\n                    if (!quiet)\n                        rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n                    if (exit_code == 0)\n                        exit_code = 2;\n                }\n                ;\n                return -3;\n            }\n        }\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing garbage ignored\\n\", program_name, ifname);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        return -2;\n    }\n", "if (!__is_neg(\"\", \"L1413\", 28, &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(method), sizeof (method), &(program_name), sizeof (program_name), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (part_nb == 1)) {\n    rpl_fprintf(stderr, \"\\n%s: %s: not in gzip format\\n\", program_name, ifname);\n    exit_code = 1;\n    return -1;\n} else {\n    if (magic[0] == 0) {\n        int inbyte;\n        for (inbyte = imagic1; inbyte == 0; inbyte = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1)))\n            continue;\n        if (inbyte == (-1)) {\n            if (verbose) {\n                if (!quiet)\n                    rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing zero bytes ignored\\n\", program_name, ifname);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n            return -3;\n        }\n    }\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"\\n%s: %s: decompression OK, trailing garbage ignored\\n\", program_name, ifname);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    return -2;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.8351991838734181, -5.5722964275734181, -5.66012329661342, -5.5722964275734181, -5.66012329661342, -4.7357505278734182, -4.7357505278734182, -6.43102165487342, -4.9276620648734184, -4.9276620648734184, -5.0987888548734182, -5.8121477078734181, -5.8121477078734181, -5.1346447078734183, -6.43102165487342, -5.4487693808734186, -4.0135826988734182, -4.0135826988734182, -5.8121477078734181, -5.8121477078734181, -5.8121477078734181, -5.8121477078734181, -5.58350122757342, -5.0987888548734182, -4.6053608745734183, -5.8121477078734181, -4.6185610308734182, -5.8121477078734181]
								}, {
									"case":	2,
									"scores":	[-3.1573964708734188, -5.894493714573418, -5.9823205836134186, -5.894493714573418, -5.9823205836134186, -5.057947814873418, -5.057947814873418, -6.75321894187342, -5.2498593518734182, -5.2498593518734182, -5.420986141873418, -6.1343449948734179, -6.1343449948734179, -5.4568419948734181, -6.75321894187342, -5.7709666678734184, -4.3357799858734181, -4.3357799858734181, -6.1343449948734179, -6.1343449948734179, -6.1343449948734179, -6.1343449948734179, -5.9056985145734187, -5.420986141873418, -4.9275581615734181, -6.1343449948734179, -4.940758317873418, -6.1343449948734179]
								}]
						}]
				}, {
					"line":	1647,
					"switches":	[]
				}, {
					"line":	1648,
					"switches":	[]
				}, {
					"line":	1651,
					"switches":	[]
				}, {
					"line":	1652,
					"switches":	[{
							"switch":	75,
							"types":	[[], [], [], [], [494], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [], [], [], [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], [], [], [], [], [], []],
							"begin_line":	1653,
							"begin_column":	3,
							"end_line":	1653,
							"end_column":	3,
							"patch_codes":	["memset(&ifstat->__glibc_reserved, 0, sizeof (*(&ifstat->__glibc_reserved)))", "memset(&ifstat->__pad0, 0, sizeof (*(&ifstat->__pad0)))", "memset(&ifstat->st_atim, 0, sizeof (*(&ifstat->st_atim)))", "memset(&ifstat->st_blksize, 0, sizeof (*(&ifstat->st_blksize)))", "memset(&ifstat->st_blocks, 0, sizeof (*(&ifstat->st_blocks)))", "memset(&ifstat->st_ctim, 0, sizeof (*(&ifstat->st_ctim)))", "memset(&ifstat->st_dev, 0, sizeof (*(&ifstat->st_dev)))", "memset(&ifstat->st_gid, 0, sizeof (*(&ifstat->st_gid)))", "memset(&ifstat->st_ino, 0, sizeof (*(&ifstat->st_ino)))", "memset(&ifstat->st_mode, 0, sizeof (*(&ifstat->st_mode)))", "memset(&ifstat->st_mtim, 0, sizeof (*(&ifstat->st_mtim)))", "memset(&ifstat->st_nlink, 0, sizeof (*(&ifstat->st_nlink)))", "memset(&ifstat->st_rdev, 0, sizeof (*(&ifstat->st_rdev)))", "memset(&ifstat->st_size, 0, sizeof (*(&ifstat->st_size)))", "memset(&ifstat->st_uid, 0, sizeof (*(&ifstat->st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "memset(&timespec[1].tv_nsec, 0, sizeof (*(&timespec[1].tv_nsec)))", "memset(&timespec[1].tv_sec, 0, sizeof (*(&timespec[1].tv_sec)))", "memset(ifstat, 0, sizeof (*(ifstat)))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (3)", "bytes_in = (384)", "bytes_in = (448)", "bytes_in = (504)", "bytes_in = (511)", "bytes_in = (56)", "bytes_in = (64)", "bytes_in = (7)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (3)", "bytes_out = (384)", "bytes_out = (448)", "bytes_out = (504)", "bytes_out = (511)", "bytes_out = (56)", "bytes_out = (64)", "bytes_out = (7)", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (2)", "exit_code = (256)", "exit_code = (3)", "exit_code = (384)", "exit_code = (448)", "exit_code = (504)", "exit_code = (511)", "exit_code = (56)", "exit_code = (64)", "exit_code = (7)", "exit_code = (r)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (3)", "exiting_signal = (384)", "exiting_signal = (448)", "exiting_signal = (504)", "exiting_signal = (511)", "exiting_signal = (56)", "exiting_signal = (64)", "exiting_signal = (7)", "exiting_signal = (r)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (2)", "foreground = (256)", "foreground = (3)", "foreground = (384)", "foreground = (448)", "foreground = (504)", "foreground = (511)", "foreground = (56)", "foreground = (64)", "foreground = (7)", "foreground = (r)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (3)", "header_bytes = (384)", "header_bytes = (448)", "header_bytes = (504)", "header_bytes = (511)", "header_bytes = (56)", "header_bytes = (64)", "header_bytes = (7)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (2)", "ifd = (256)", "ifd = (3)", "ifd = (384)", "ifd = (448)", "ifd = (504)", "ifd = (511)", "ifd = (56)", "ifd = (64)", "ifd = (7)", "ifd = (r)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (3)", "ifile_size = (384)", "ifile_size = (448)", "ifile_size = (504)", "ifile_size = (511)", "ifile_size = (56)", "ifile_size = (64)", "ifile_size = (7)", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (2)", "inptr = (256)", "inptr = (3)", "inptr = (384)", "inptr = (448)", "inptr = (504)", "inptr = (511)", "inptr = (56)", "inptr = (64)", "inptr = (7)", "inptr = (mode)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (2)", "last_member = (256)", "last_member = (3)", "last_member = (384)", "last_member = (448)", "last_member = (504)", "last_member = (511)", "last_member = (56)", "last_member = (64)", "last_member = (7)", "last_member = (r)", "list = (0)", "list = (1)", "list = (128)", "list = (2)", "list = (256)", "list = (3)", "list = (384)", "list = (448)", "list = (504)", "list = (511)", "list = (56)", "list = (64)", "list = (7)", "list = (r)", "method = (0)", "method = (1)", "method = (128)", "method = (2)", "method = (256)", "method = (3)", "method = (384)", "method = (448)", "method = (504)", "method = (511)", "method = (56)", "method = (64)", "method = (7)", "method = (r)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (2)", "no_name = (256)", "no_name = (3)", "no_name = (384)", "no_name = (448)", "no_name = (504)", "no_name = (511)", "no_name = (56)", "no_name = (64)", "no_name = (7)", "no_name = (r)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (2)", "no_time = (256)", "no_time = (3)", "no_time = (384)", "no_time = (448)", "no_time = (504)", "no_time = (511)", "no_time = (56)", "no_time = (64)", "no_time = (7)", "no_time = (r)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (2)", "ofd = (256)", "ofd = (3)", "ofd = (384)", "ofd = (448)", "ofd = (504)", "ofd = (511)", "ofd = (56)", "ofd = (64)", "ofd = (7)", "ofd = (r)", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (2)", "part_nb = (256)", "part_nb = (3)", "part_nb = (384)", "part_nb = (448)", "part_nb = (504)", "part_nb = (511)", "part_nb = (56)", "part_nb = (64)", "part_nb = (7)", "part_nb = (r)", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (2)", "quiet = (256)", "quiet = (3)", "quiet = (384)", "quiet = (448)", "quiet = (504)", "quiet = (511)", "quiet = (56)", "quiet = (64)", "quiet = (7)", "quiet = (r)", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (3)", "remove_ofname_fd = (384)", "remove_ofname_fd = (448)", "remove_ofname_fd = (504)", "remove_ofname_fd = (511)", "remove_ofname_fd = (56)", "remove_ofname_fd = (64)", "remove_ofname_fd = (7)", "remove_ofname_fd = (r)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (3)", "save_orig_name = (384)", "save_orig_name = (448)", "save_orig_name = (504)", "save_orig_name = (511)", "save_orig_name = (56)", "save_orig_name = (64)", "save_orig_name = (7)", "save_orig_name = (r)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (448)", "time_stamp.tv_nsec = (504)", "time_stamp.tv_nsec = (511)", "time_stamp.tv_nsec = (56)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (7)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (448)", "time_stamp.tv_sec = (504)", "time_stamp.tv_sec = (511)", "time_stamp.tv_sec = (56)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (7)", "timespec[0] = get_stat_atime((ifstat))", "timespec[1] = get_stat_mtime((ifstat))", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (3)", "to_stdout = (384)", "to_stdout = (448)", "to_stdout = (504)", "to_stdout = (511)", "to_stdout = (56)", "to_stdout = (64)", "to_stdout = (7)", "to_stdout = (r)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (2)", "total_in = (256)", "total_in = (3)", "total_in = (384)", "total_in = (448)", "total_in = (504)", "total_in = (511)", "total_in = (56)", "total_in = (64)", "total_in = (7)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (2)", "total_out = (256)", "total_out = (3)", "total_out = (384)", "total_out = (448)", "total_out = (504)", "total_out = (511)", "total_out = (56)", "total_out = (64)", "total_out = (7)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (2)", "verbose = (256)", "verbose = (3)", "verbose = (384)", "verbose = (448)", "verbose = (504)", "verbose = (511)", "verbose = (56)", "verbose = (64)", "verbose = (7)", "verbose = (r)", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (2)", "z_len = (256)", "z_len = (3)", "z_len = (384)", "z_len = (448)", "z_len = (504)", "z_len = (511)", "z_len = (56)", "z_len = (64)", "z_len = (7)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fchown(ofd, ifstat->st_uid, ifstat->st_gid)", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "r = fchmod(ofd, mode)", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "timespec[0] = get_stat_atime(ifstat)", "timespec[1] = get_stat_mtime(ifstat)", "timespec[1] = time_stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1653\", 27, &(ifstat), sizeof (ifstat), &(decompress), sizeof (decompress), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(ifstat->st_mode), sizeof (ifstat->st_mode), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ifstat->st_uid), sizeof (ifstat->st_uid), &(ifstat->st_gid), sizeof (ifstat->st_gid), &(mode), sizeof (mode), &(r), sizeof (r), &(ifstat->st_dev), sizeof (ifstat->st_dev), &(ifstat->st_ino), sizeof (ifstat->st_ino), &(ifstat->st_nlink), sizeof (ifstat->st_nlink), &(ifstat->__pad0), sizeof (ifstat->__pad0), &(ifstat->st_rdev), sizeof (ifstat->st_rdev), &(ifstat->st_size), sizeof (ifstat->st_size), &(ifstat->st_blksize), sizeof (ifstat->st_blksize), &(ifstat->st_blocks), sizeof (ifstat->st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.58884771278226]
								}, {
									"case":	2,
									"scores":	[-5.58884771278226]
								}, {
									"case":	3,
									"scores":	[-5.58884771278226]
								}, {
									"case":	4,
									"scores":	[-5.58884771278226]
								}, {
									"case":	5,
									"scores":	[-5.58884771278226]
								}, {
									"case":	6,
									"scores":	[-5.58884771278226]
								}, {
									"case":	7,
									"scores":	[-5.58884771278226]
								}, {
									"case":	8,
									"scores":	[-5.58884771278226]
								}, {
									"case":	9,
									"scores":	[-5.58884771278226]
								}, {
									"case":	10,
									"scores":	[-5.58884771278226]
								}, {
									"case":	11,
									"scores":	[-5.58884771278226]
								}, {
									"case":	12,
									"scores":	[-5.58884771278226]
								}, {
									"case":	13,
									"scores":	[-5.58884771278226]
								}, {
									"case":	14,
									"scores":	[-5.58884771278226]
								}, {
									"case":	15,
									"scores":	[-5.58884771278226]
								}, {
									"case":	16,
									"scores":	[-5.58884771278226]
								}, {
									"case":	17,
									"scores":	[-5.58884771278226]
								}, {
									"case":	18,
									"scores":	[-5.58884771278226]
								}, {
									"case":	19,
									"scores":	[-5.58884771278226]
								}, {
									"case":	20,
									"scores":	[-5.58884771278226]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	286,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	287,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	288,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	289,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	290,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	291,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	292,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	293,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	294,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	295,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	296,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	297,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	298,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	299,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	300,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	301,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	302,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	303,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	304,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	305,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	306,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	307,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	308,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	309,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	310,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	311,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	312,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	313,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	314,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	315,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	316,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	317,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	318,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	319,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	320,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	321,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	322,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	323,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	324,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	325,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	326,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	327,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	328,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	329,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	330,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	331,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	332,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	333,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	334,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	335,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	336,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	337,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	338,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	339,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	340,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	341,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	342,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	343,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	344,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	345,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	346,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	347,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	348,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	349,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	350,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	351,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	352,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	353,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	354,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	355,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	356,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	357,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	358,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	359,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	360,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	361,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	362,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	363,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	364,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	365,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	366,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	367,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	368,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	369,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	370,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	371,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	372,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	373,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	374,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	375,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	376,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	377,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	378,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	379,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	380,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	381,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	382,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	383,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	384,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	385,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	386,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	387,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	388,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	389,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	390,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	391,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	392,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	393,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	394,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	395,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	396,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	397,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	398,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	399,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	400,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	401,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	402,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	403,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	404,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	405,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	406,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	407,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	408,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	409,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	410,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	411,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	412,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	413,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	414,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	415,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	416,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	417,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	418,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	419,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	420,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	421,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	422,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	423,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	424,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	425,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	426,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	427,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	428,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	429,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	430,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	431,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	432,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	433,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	434,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	435,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	436,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	437,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	438,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	439,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	440,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	441,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	442,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	443,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	444,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	445,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	446,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	447,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	448,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	449,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	450,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	451,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	452,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	453,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	454,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	455,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	456,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	457,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	458,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	459,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	460,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	461,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	462,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	463,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	464,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	465,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	466,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	467,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	468,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	469,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	470,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	471,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	472,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	473,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	474,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	475,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	476,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	477,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	478,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	479,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	480,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	481,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	482,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	483,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	484,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	485,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	486,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	487,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	488,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	489,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	490,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	491,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	492,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	493,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	494,
									"scores":	[-6.58092175278226, -7.95873320588226, -9.12573720278226, -9.12573720278226, -8.23916220278226, -8.32889290588226, -8.32889290588226, -8.10730420588226, -8.10730420588226, -8.19672690588226, -9.21032521968226, -7.95873320588226, -7.95873320588226, -8.19672690588226, -9.21032521968226, -8.23916220278226, -8.23916220278226, -7.46577860278226, -7.46577860278226, -8.23916220278226, -8.23916220278226, -8.23916220278226, -8.23916220278226, -8.23916220278226, -8.23916220278226, -8.23916220278226, -8.23916220278226]
								}]
						}, {
							"switch":	76,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	1653,
							"begin_column":	5,
							"end_line":	1653,
							"end_column":	41,
							"patch_codes":	["if (!__is_neg(\"\", \"L1653\", 27, &(ifstat), sizeof (ifstat), &(decompress), sizeof (decompress), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(ifstat->st_mode), sizeof (ifstat->st_mode), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ifstat->st_uid), sizeof (ifstat->st_uid), &(ifstat->st_gid), sizeof (ifstat->st_gid), &(mode), sizeof (mode), &(r), sizeof (r), &(ifstat->st_dev), sizeof (ifstat->st_dev), &(ifstat->st_ino), sizeof (ifstat->st_ino), &(ifstat->st_nlink), sizeof (ifstat->st_nlink), &(ifstat->__pad0), sizeof (ifstat->__pad0), &(ifstat->st_rdev), sizeof (ifstat->st_rdev), &(ifstat->st_size), sizeof (ifstat->st_size), &(ifstat->st_blksize), sizeof (ifstat->st_blksize), &(ifstat->st_blocks), sizeof (ifstat->st_blocks)))\n    timespec[0] = get_stat_atime(ifstat);\n", "{\n}\n", "timespec[0] = get_stat_birthtime(ifstat)", "timespec[0] = get_stat_ctime(ifstat)", "timespec[0] = get_stat_mtime(ifstat)", "timespec[0] = get_stat_atime((&ifstat))", "timespec[0] = get_stat_atime((&mode))", "timespec[0] = get_stat_atime((&r))", "timespec[0] = get_stat_atime((&timespec))", "timespec[0] = get_stat_atime((ifstat))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.89624488678226, -5.97986928278226, -7.27893868278226, -7.27893868278226, -6.26934768278226, -6.4857842827822614, -6.4857842827822614, -6.07016748278226, -6.07016748278226, -6.50713248278226, -7.02655838678226, -5.97986928278226, -5.97986928278226, -6.50713248278226, -7.02655838678226, -6.26934768278226, -6.26934768278226, -5.49851398278226, -5.49851398278226, -6.26934768278226, -6.26934768278226, -6.26934768278226, -6.26934768278226, -6.26934768278226, -6.26934768278226, -6.26934768278226, -6.26934768278226]
								}, {
									"case":	2,
									"scores":	[-5.58884771278226]
								}, {
									"case":	3,
									"scores":	[-5.58884771278226]
								}, {
									"case":	4,
									"scores":	[-5.58884771278226]
								}, {
									"case":	5,
									"scores":	[-5.58884771278226]
								}, {
									"case":	6,
									"scores":	[-5.58884771278226]
								}, {
									"case":	7,
									"scores":	[-5.58884771278226]
								}, {
									"case":	8,
									"scores":	[-5.58884771278226]
								}, {
									"case":	9,
									"scores":	[-5.58884771278226]
								}, {
									"case":	10,
									"scores":	[-5.58884771278226]
								}]
						}]
				}, {
					"line":	1653,
					"switches":	[{
							"switch":	77,
							"types":	[[], [], [], [], [495], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [], [], [], [], [], []],
							"begin_line":	1654,
							"begin_column":	3,
							"end_line":	1654,
							"end_column":	3,
							"patch_codes":	["memset(&ifstat->__glibc_reserved, 0, sizeof (*(&ifstat->__glibc_reserved)))", "memset(&ifstat->__pad0, 0, sizeof (*(&ifstat->__pad0)))", "memset(&ifstat->st_atim, 0, sizeof (*(&ifstat->st_atim)))", "memset(&ifstat->st_blksize, 0, sizeof (*(&ifstat->st_blksize)))", "memset(&ifstat->st_blocks, 0, sizeof (*(&ifstat->st_blocks)))", "memset(&ifstat->st_ctim, 0, sizeof (*(&ifstat->st_ctim)))", "memset(&ifstat->st_dev, 0, sizeof (*(&ifstat->st_dev)))", "memset(&ifstat->st_gid, 0, sizeof (*(&ifstat->st_gid)))", "memset(&ifstat->st_ino, 0, sizeof (*(&ifstat->st_ino)))", "memset(&ifstat->st_mode, 0, sizeof (*(&ifstat->st_mode)))", "memset(&ifstat->st_mtim, 0, sizeof (*(&ifstat->st_mtim)))", "memset(&ifstat->st_nlink, 0, sizeof (*(&ifstat->st_nlink)))", "memset(&ifstat->st_rdev, 0, sizeof (*(&ifstat->st_rdev)))", "memset(&ifstat->st_size, 0, sizeof (*(&ifstat->st_size)))", "memset(&ifstat->st_uid, 0, sizeof (*(&ifstat->st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "memset(&timespec[1], 0, sizeof (*(&timespec[1])))", "memset(&timespec[1].tv_nsec, 0, sizeof (*(&timespec[1].tv_nsec)))", "memset(&timespec[1].tv_sec, 0, sizeof (*(&timespec[1].tv_sec)))", "memset(ifstat, 0, sizeof (*(ifstat)))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (3)", "bytes_in = (384)", "bytes_in = (448)", "bytes_in = (504)", "bytes_in = (511)", "bytes_in = (56)", "bytes_in = (64)", "bytes_in = (7)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (3)", "bytes_out = (384)", "bytes_out = (448)", "bytes_out = (504)", "bytes_out = (511)", "bytes_out = (56)", "bytes_out = (64)", "bytes_out = (7)", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (2)", "exit_code = (256)", "exit_code = (3)", "exit_code = (384)", "exit_code = (448)", "exit_code = (504)", "exit_code = (511)", "exit_code = (56)", "exit_code = (64)", "exit_code = (7)", "exit_code = (r)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (3)", "exiting_signal = (384)", "exiting_signal = (448)", "exiting_signal = (504)", "exiting_signal = (511)", "exiting_signal = (56)", "exiting_signal = (64)", "exiting_signal = (7)", "exiting_signal = (r)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (2)", "foreground = (256)", "foreground = (3)", "foreground = (384)", "foreground = (448)", "foreground = (504)", "foreground = (511)", "foreground = (56)", "foreground = (64)", "foreground = (7)", "foreground = (r)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (3)", "header_bytes = (384)", "header_bytes = (448)", "header_bytes = (504)", "header_bytes = (511)", "header_bytes = (56)", "header_bytes = (64)", "header_bytes = (7)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (2)", "ifd = (256)", "ifd = (3)", "ifd = (384)", "ifd = (448)", "ifd = (504)", "ifd = (511)", "ifd = (56)", "ifd = (64)", "ifd = (7)", "ifd = (r)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (3)", "ifile_size = (384)", "ifile_size = (448)", "ifile_size = (504)", "ifile_size = (511)", "ifile_size = (56)", "ifile_size = (64)", "ifile_size = (7)", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (2)", "inptr = (256)", "inptr = (3)", "inptr = (384)", "inptr = (448)", "inptr = (504)", "inptr = (511)", "inptr = (56)", "inptr = (64)", "inptr = (7)", "inptr = (mode)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (2)", "last_member = (256)", "last_member = (3)", "last_member = (384)", "last_member = (448)", "last_member = (504)", "last_member = (511)", "last_member = (56)", "last_member = (64)", "last_member = (7)", "last_member = (r)", "list = (0)", "list = (1)", "list = (128)", "list = (2)", "list = (256)", "list = (3)", "list = (384)", "list = (448)", "list = (504)", "list = (511)", "list = (56)", "list = (64)", "list = (7)", "list = (r)", "method = (0)", "method = (1)", "method = (128)", "method = (2)", "method = (256)", "method = (3)", "method = (384)", "method = (448)", "method = (504)", "method = (511)", "method = (56)", "method = (64)", "method = (7)", "method = (r)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (2)", "no_name = (256)", "no_name = (3)", "no_name = (384)", "no_name = (448)", "no_name = (504)", "no_name = (511)", "no_name = (56)", "no_name = (64)", "no_name = (7)", "no_name = (r)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (2)", "no_time = (256)", "no_time = (3)", "no_time = (384)", "no_time = (448)", "no_time = (504)", "no_time = (511)", "no_time = (56)", "no_time = (64)", "no_time = (7)", "no_time = (r)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (2)", "ofd = (256)", "ofd = (3)", "ofd = (384)", "ofd = (448)", "ofd = (504)", "ofd = (511)", "ofd = (56)", "ofd = (64)", "ofd = (7)", "ofd = (r)", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (2)", "part_nb = (256)", "part_nb = (3)", "part_nb = (384)", "part_nb = (448)", "part_nb = (504)", "part_nb = (511)", "part_nb = (56)", "part_nb = (64)", "part_nb = (7)", "part_nb = (r)", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (2)", "quiet = (256)", "quiet = (3)", "quiet = (384)", "quiet = (448)", "quiet = (504)", "quiet = (511)", "quiet = (56)", "quiet = (64)", "quiet = (7)", "quiet = (r)", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (3)", "remove_ofname_fd = (384)", "remove_ofname_fd = (448)", "remove_ofname_fd = (504)", "remove_ofname_fd = (511)", "remove_ofname_fd = (56)", "remove_ofname_fd = (64)", "remove_ofname_fd = (7)", "remove_ofname_fd = (r)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (3)", "save_orig_name = (384)", "save_orig_name = (448)", "save_orig_name = (504)", "save_orig_name = (511)", "save_orig_name = (56)", "save_orig_name = (64)", "save_orig_name = (7)", "save_orig_name = (r)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (448)", "time_stamp.tv_nsec = (504)", "time_stamp.tv_nsec = (511)", "time_stamp.tv_nsec = (56)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (7)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (448)", "time_stamp.tv_sec = (504)", "time_stamp.tv_sec = (511)", "time_stamp.tv_sec = (56)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (7)", "timespec[0] = get_stat_atime((ifstat))", "timespec[1] = get_stat_mtime((ifstat))", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (3)", "to_stdout = (384)", "to_stdout = (448)", "to_stdout = (504)", "to_stdout = (511)", "to_stdout = (56)", "to_stdout = (64)", "to_stdout = (7)", "to_stdout = (r)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (2)", "total_in = (256)", "total_in = (3)", "total_in = (384)", "total_in = (448)", "total_in = (504)", "total_in = (511)", "total_in = (56)", "total_in = (64)", "total_in = (7)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (2)", "total_out = (256)", "total_out = (3)", "total_out = (384)", "total_out = (448)", "total_out = (504)", "total_out = (511)", "total_out = (56)", "total_out = (64)", "total_out = (7)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (2)", "verbose = (256)", "verbose = (3)", "verbose = (384)", "verbose = (448)", "verbose = (504)", "verbose = (511)", "verbose = (56)", "verbose = (64)", "verbose = (7)", "verbose = (r)", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (2)", "z_len = (256)", "z_len = (3)", "z_len = (384)", "z_len = (448)", "z_len = (504)", "z_len = (511)", "z_len = (56)", "z_len = (64)", "z_len = (7)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fchown(ofd, ifstat->st_uid, ifstat->st_gid)", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "r = fchmod(ofd, mode)", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "timespec[0] = get_stat_atime(ifstat)", "timespec[1] = get_stat_mtime(ifstat)", "timespec[1] = time_stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1654\", 27, &(ifstat), sizeof (ifstat), &(decompress), sizeof (decompress), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(ifstat->st_mode), sizeof (ifstat->st_mode), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ifstat->st_uid), sizeof (ifstat->st_uid), &(ifstat->st_gid), sizeof (ifstat->st_gid), &(mode), sizeof (mode), &(r), sizeof (r), &(ifstat->st_dev), sizeof (ifstat->st_dev), &(ifstat->st_ino), sizeof (ifstat->st_ino), &(ifstat->st_nlink), sizeof (ifstat->st_nlink), &(ifstat->__pad0), sizeof (ifstat->__pad0), &(ifstat->st_rdev), sizeof (ifstat->st_rdev), &(ifstat->st_size), sizeof (ifstat->st_size), &(ifstat->st_blksize), sizeof (ifstat->st_blksize), &(ifstat->st_blocks), sizeof (ifstat->st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.508036883512184]
								}, {
									"case":	2,
									"scores":	[-5.508036883512184]
								}, {
									"case":	3,
									"scores":	[-5.508036883512184]
								}, {
									"case":	4,
									"scores":	[-5.508036883512184]
								}, {
									"case":	5,
									"scores":	[-5.508036883512184]
								}, {
									"case":	6,
									"scores":	[-5.508036883512184]
								}, {
									"case":	7,
									"scores":	[-5.508036883512184]
								}, {
									"case":	8,
									"scores":	[-5.508036883512184]
								}, {
									"case":	9,
									"scores":	[-5.508036883512184]
								}, {
									"case":	10,
									"scores":	[-5.508036883512184]
								}, {
									"case":	11,
									"scores":	[-5.508036883512184]
								}, {
									"case":	12,
									"scores":	[-5.508036883512184]
								}, {
									"case":	13,
									"scores":	[-5.508036883512184]
								}, {
									"case":	14,
									"scores":	[-5.508036883512184]
								}, {
									"case":	15,
									"scores":	[-5.508036883512184]
								}, {
									"case":	16,
									"scores":	[-5.508036883512184]
								}, {
									"case":	17,
									"scores":	[-5.508036883512184]
								}, {
									"case":	18,
									"scores":	[-5.508036883512184]
								}, {
									"case":	19,
									"scores":	[-5.508036883512184]
								}, {
									"case":	20,
									"scores":	[-5.508036883512184]
								}, {
									"case":	21,
									"scores":	[-5.508036883512184]
								}, {
									"case":	22,
									"scores":	[-5.508036883512184]
								}, {
									"case":	23,
									"scores":	[-5.508036883512184]
								}, {
									"case":	24,
									"scores":	[-5.508036883512184]
								}, {
									"case":	25,
									"scores":	[-5.508036883512184]
								}, {
									"case":	26,
									"scores":	[-5.508036883512184]
								}, {
									"case":	27,
									"scores":	[-5.508036883512184]
								}, {
									"case":	28,
									"scores":	[-5.508036883512184]
								}, {
									"case":	29,
									"scores":	[-5.508036883512184]
								}, {
									"case":	30,
									"scores":	[-5.508036883512184]
								}, {
									"case":	31,
									"scores":	[-5.508036883512184]
								}, {
									"case":	32,
									"scores":	[-5.508036883512184]
								}, {
									"case":	33,
									"scores":	[-5.508036883512184]
								}, {
									"case":	34,
									"scores":	[-5.508036883512184]
								}, {
									"case":	35,
									"scores":	[-5.508036883512184]
								}, {
									"case":	36,
									"scores":	[-5.508036883512184]
								}, {
									"case":	37,
									"scores":	[-5.508036883512184]
								}, {
									"case":	38,
									"scores":	[-5.508036883512184]
								}, {
									"case":	39,
									"scores":	[-5.508036883512184]
								}, {
									"case":	40,
									"scores":	[-5.508036883512184]
								}, {
									"case":	41,
									"scores":	[-5.508036883512184]
								}, {
									"case":	42,
									"scores":	[-5.508036883512184]
								}, {
									"case":	43,
									"scores":	[-5.508036883512184]
								}, {
									"case":	44,
									"scores":	[-5.508036883512184]
								}, {
									"case":	45,
									"scores":	[-5.508036883512184]
								}, {
									"case":	46,
									"scores":	[-5.508036883512184]
								}, {
									"case":	47,
									"scores":	[-5.508036883512184]
								}, {
									"case":	48,
									"scores":	[-5.508036883512184]
								}, {
									"case":	49,
									"scores":	[-5.508036883512184]
								}, {
									"case":	50,
									"scores":	[-5.508036883512184]
								}, {
									"case":	51,
									"scores":	[-5.508036883512184]
								}, {
									"case":	52,
									"scores":	[-5.508036883512184]
								}, {
									"case":	53,
									"scores":	[-5.508036883512184]
								}, {
									"case":	54,
									"scores":	[-5.508036883512184]
								}, {
									"case":	55,
									"scores":	[-5.508036883512184]
								}, {
									"case":	56,
									"scores":	[-5.508036883512184]
								}, {
									"case":	57,
									"scores":	[-5.508036883512184]
								}, {
									"case":	58,
									"scores":	[-5.508036883512184]
								}, {
									"case":	59,
									"scores":	[-5.508036883512184]
								}, {
									"case":	60,
									"scores":	[-5.508036883512184]
								}, {
									"case":	61,
									"scores":	[-5.508036883512184]
								}, {
									"case":	62,
									"scores":	[-5.508036883512184]
								}, {
									"case":	63,
									"scores":	[-5.508036883512184]
								}, {
									"case":	64,
									"scores":	[-5.508036883512184]
								}, {
									"case":	65,
									"scores":	[-5.508036883512184]
								}, {
									"case":	66,
									"scores":	[-5.508036883512184]
								}, {
									"case":	67,
									"scores":	[-5.508036883512184]
								}, {
									"case":	68,
									"scores":	[-5.508036883512184]
								}, {
									"case":	69,
									"scores":	[-5.508036883512184]
								}, {
									"case":	70,
									"scores":	[-5.508036883512184]
								}, {
									"case":	71,
									"scores":	[-5.508036883512184]
								}, {
									"case":	72,
									"scores":	[-5.508036883512184]
								}, {
									"case":	73,
									"scores":	[-5.508036883512184]
								}, {
									"case":	74,
									"scores":	[-5.508036883512184]
								}, {
									"case":	75,
									"scores":	[-5.508036883512184]
								}, {
									"case":	76,
									"scores":	[-5.508036883512184]
								}, {
									"case":	77,
									"scores":	[-5.508036883512184]
								}, {
									"case":	78,
									"scores":	[-5.508036883512184]
								}, {
									"case":	79,
									"scores":	[-5.508036883512184]
								}, {
									"case":	80,
									"scores":	[-5.508036883512184]
								}, {
									"case":	81,
									"scores":	[-5.508036883512184]
								}, {
									"case":	82,
									"scores":	[-5.508036883512184]
								}, {
									"case":	83,
									"scores":	[-5.508036883512184]
								}, {
									"case":	84,
									"scores":	[-5.508036883512184]
								}, {
									"case":	85,
									"scores":	[-5.508036883512184]
								}, {
									"case":	86,
									"scores":	[-5.508036883512184]
								}, {
									"case":	87,
									"scores":	[-5.508036883512184]
								}, {
									"case":	88,
									"scores":	[-5.508036883512184]
								}, {
									"case":	89,
									"scores":	[-5.508036883512184]
								}, {
									"case":	90,
									"scores":	[-5.508036883512184]
								}, {
									"case":	91,
									"scores":	[-5.508036883512184]
								}, {
									"case":	92,
									"scores":	[-5.508036883512184]
								}, {
									"case":	93,
									"scores":	[-5.508036883512184]
								}, {
									"case":	94,
									"scores":	[-5.508036883512184]
								}, {
									"case":	95,
									"scores":	[-5.508036883512184]
								}, {
									"case":	96,
									"scores":	[-5.508036883512184]
								}, {
									"case":	97,
									"scores":	[-5.508036883512184]
								}, {
									"case":	98,
									"scores":	[-5.508036883512184]
								}, {
									"case":	99,
									"scores":	[-5.508036883512184]
								}, {
									"case":	100,
									"scores":	[-5.508036883512184]
								}, {
									"case":	101,
									"scores":	[-5.508036883512184]
								}, {
									"case":	102,
									"scores":	[-5.508036883512184]
								}, {
									"case":	103,
									"scores":	[-5.508036883512184]
								}, {
									"case":	104,
									"scores":	[-5.508036883512184]
								}, {
									"case":	105,
									"scores":	[-5.508036883512184]
								}, {
									"case":	106,
									"scores":	[-5.508036883512184]
								}, {
									"case":	107,
									"scores":	[-5.508036883512184]
								}, {
									"case":	108,
									"scores":	[-5.508036883512184]
								}, {
									"case":	109,
									"scores":	[-5.508036883512184]
								}, {
									"case":	110,
									"scores":	[-5.508036883512184]
								}, {
									"case":	111,
									"scores":	[-5.508036883512184]
								}, {
									"case":	112,
									"scores":	[-5.508036883512184]
								}, {
									"case":	113,
									"scores":	[-5.508036883512184]
								}, {
									"case":	114,
									"scores":	[-5.508036883512184]
								}, {
									"case":	115,
									"scores":	[-5.508036883512184]
								}, {
									"case":	116,
									"scores":	[-5.508036883512184]
								}, {
									"case":	117,
									"scores":	[-5.508036883512184]
								}, {
									"case":	118,
									"scores":	[-5.508036883512184]
								}, {
									"case":	119,
									"scores":	[-5.508036883512184]
								}, {
									"case":	120,
									"scores":	[-5.508036883512184]
								}, {
									"case":	121,
									"scores":	[-5.508036883512184]
								}, {
									"case":	122,
									"scores":	[-5.508036883512184]
								}, {
									"case":	123,
									"scores":	[-5.508036883512184]
								}, {
									"case":	124,
									"scores":	[-5.508036883512184]
								}, {
									"case":	125,
									"scores":	[-5.508036883512184]
								}, {
									"case":	126,
									"scores":	[-5.508036883512184]
								}, {
									"case":	127,
									"scores":	[-5.508036883512184]
								}, {
									"case":	128,
									"scores":	[-5.508036883512184]
								}, {
									"case":	129,
									"scores":	[-5.508036883512184]
								}, {
									"case":	130,
									"scores":	[-5.508036883512184]
								}, {
									"case":	131,
									"scores":	[-5.508036883512184]
								}, {
									"case":	132,
									"scores":	[-5.508036883512184]
								}, {
									"case":	133,
									"scores":	[-5.508036883512184]
								}, {
									"case":	134,
									"scores":	[-5.508036883512184]
								}, {
									"case":	135,
									"scores":	[-5.508036883512184]
								}, {
									"case":	136,
									"scores":	[-5.508036883512184]
								}, {
									"case":	137,
									"scores":	[-5.508036883512184]
								}, {
									"case":	138,
									"scores":	[-5.508036883512184]
								}, {
									"case":	139,
									"scores":	[-5.508036883512184]
								}, {
									"case":	140,
									"scores":	[-5.508036883512184]
								}, {
									"case":	141,
									"scores":	[-5.508036883512184]
								}, {
									"case":	142,
									"scores":	[-5.508036883512184]
								}, {
									"case":	143,
									"scores":	[-5.508036883512184]
								}, {
									"case":	144,
									"scores":	[-5.508036883512184]
								}, {
									"case":	145,
									"scores":	[-5.508036883512184]
								}, {
									"case":	146,
									"scores":	[-5.508036883512184]
								}, {
									"case":	147,
									"scores":	[-5.508036883512184]
								}, {
									"case":	148,
									"scores":	[-5.508036883512184]
								}, {
									"case":	149,
									"scores":	[-5.508036883512184]
								}, {
									"case":	150,
									"scores":	[-5.508036883512184]
								}, {
									"case":	151,
									"scores":	[-5.508036883512184]
								}, {
									"case":	152,
									"scores":	[-5.508036883512184]
								}, {
									"case":	153,
									"scores":	[-5.508036883512184]
								}, {
									"case":	154,
									"scores":	[-5.508036883512184]
								}, {
									"case":	155,
									"scores":	[-5.508036883512184]
								}, {
									"case":	156,
									"scores":	[-5.508036883512184]
								}, {
									"case":	157,
									"scores":	[-5.508036883512184]
								}, {
									"case":	158,
									"scores":	[-5.508036883512184]
								}, {
									"case":	159,
									"scores":	[-5.508036883512184]
								}, {
									"case":	160,
									"scores":	[-5.508036883512184]
								}, {
									"case":	161,
									"scores":	[-5.508036883512184]
								}, {
									"case":	162,
									"scores":	[-5.508036883512184]
								}, {
									"case":	163,
									"scores":	[-5.508036883512184]
								}, {
									"case":	164,
									"scores":	[-5.508036883512184]
								}, {
									"case":	165,
									"scores":	[-5.508036883512184]
								}, {
									"case":	166,
									"scores":	[-5.508036883512184]
								}, {
									"case":	167,
									"scores":	[-5.508036883512184]
								}, {
									"case":	168,
									"scores":	[-5.508036883512184]
								}, {
									"case":	169,
									"scores":	[-5.508036883512184]
								}, {
									"case":	170,
									"scores":	[-5.508036883512184]
								}, {
									"case":	171,
									"scores":	[-5.508036883512184]
								}, {
									"case":	172,
									"scores":	[-5.508036883512184]
								}, {
									"case":	173,
									"scores":	[-5.508036883512184]
								}, {
									"case":	174,
									"scores":	[-5.508036883512184]
								}, {
									"case":	175,
									"scores":	[-5.508036883512184]
								}, {
									"case":	176,
									"scores":	[-5.508036883512184]
								}, {
									"case":	177,
									"scores":	[-5.508036883512184]
								}, {
									"case":	178,
									"scores":	[-5.508036883512184]
								}, {
									"case":	179,
									"scores":	[-5.508036883512184]
								}, {
									"case":	180,
									"scores":	[-5.508036883512184]
								}, {
									"case":	181,
									"scores":	[-5.508036883512184]
								}, {
									"case":	182,
									"scores":	[-5.508036883512184]
								}, {
									"case":	183,
									"scores":	[-5.508036883512184]
								}, {
									"case":	184,
									"scores":	[-5.508036883512184]
								}, {
									"case":	185,
									"scores":	[-5.508036883512184]
								}, {
									"case":	186,
									"scores":	[-5.508036883512184]
								}, {
									"case":	187,
									"scores":	[-5.508036883512184]
								}, {
									"case":	188,
									"scores":	[-5.508036883512184]
								}, {
									"case":	189,
									"scores":	[-5.508036883512184]
								}, {
									"case":	190,
									"scores":	[-5.508036883512184]
								}, {
									"case":	191,
									"scores":	[-5.508036883512184]
								}, {
									"case":	192,
									"scores":	[-5.508036883512184]
								}, {
									"case":	193,
									"scores":	[-5.508036883512184]
								}, {
									"case":	194,
									"scores":	[-5.508036883512184]
								}, {
									"case":	195,
									"scores":	[-5.508036883512184]
								}, {
									"case":	196,
									"scores":	[-5.508036883512184]
								}, {
									"case":	197,
									"scores":	[-5.508036883512184]
								}, {
									"case":	198,
									"scores":	[-5.508036883512184]
								}, {
									"case":	199,
									"scores":	[-5.508036883512184]
								}, {
									"case":	200,
									"scores":	[-5.508036883512184]
								}, {
									"case":	201,
									"scores":	[-5.508036883512184]
								}, {
									"case":	202,
									"scores":	[-5.508036883512184]
								}, {
									"case":	203,
									"scores":	[-5.508036883512184]
								}, {
									"case":	204,
									"scores":	[-5.508036883512184]
								}, {
									"case":	205,
									"scores":	[-5.508036883512184]
								}, {
									"case":	206,
									"scores":	[-5.508036883512184]
								}, {
									"case":	207,
									"scores":	[-5.508036883512184]
								}, {
									"case":	208,
									"scores":	[-5.508036883512184]
								}, {
									"case":	209,
									"scores":	[-5.508036883512184]
								}, {
									"case":	210,
									"scores":	[-5.508036883512184]
								}, {
									"case":	211,
									"scores":	[-5.508036883512184]
								}, {
									"case":	212,
									"scores":	[-5.508036883512184]
								}, {
									"case":	213,
									"scores":	[-5.508036883512184]
								}, {
									"case":	214,
									"scores":	[-5.508036883512184]
								}, {
									"case":	215,
									"scores":	[-5.508036883512184]
								}, {
									"case":	216,
									"scores":	[-5.508036883512184]
								}, {
									"case":	217,
									"scores":	[-5.508036883512184]
								}, {
									"case":	218,
									"scores":	[-5.508036883512184]
								}, {
									"case":	219,
									"scores":	[-5.508036883512184]
								}, {
									"case":	220,
									"scores":	[-5.508036883512184]
								}, {
									"case":	221,
									"scores":	[-5.508036883512184]
								}, {
									"case":	222,
									"scores":	[-5.508036883512184]
								}, {
									"case":	223,
									"scores":	[-5.508036883512184]
								}, {
									"case":	224,
									"scores":	[-5.508036883512184]
								}, {
									"case":	225,
									"scores":	[-5.508036883512184]
								}, {
									"case":	226,
									"scores":	[-5.508036883512184]
								}, {
									"case":	227,
									"scores":	[-5.508036883512184]
								}, {
									"case":	228,
									"scores":	[-5.508036883512184]
								}, {
									"case":	229,
									"scores":	[-5.508036883512184]
								}, {
									"case":	230,
									"scores":	[-5.508036883512184]
								}, {
									"case":	231,
									"scores":	[-5.508036883512184]
								}, {
									"case":	232,
									"scores":	[-5.508036883512184]
								}, {
									"case":	233,
									"scores":	[-5.508036883512184]
								}, {
									"case":	234,
									"scores":	[-5.508036883512184]
								}, {
									"case":	235,
									"scores":	[-5.508036883512184]
								}, {
									"case":	236,
									"scores":	[-5.508036883512184]
								}, {
									"case":	237,
									"scores":	[-5.508036883512184]
								}, {
									"case":	238,
									"scores":	[-5.508036883512184]
								}, {
									"case":	239,
									"scores":	[-5.508036883512184]
								}, {
									"case":	240,
									"scores":	[-5.508036883512184]
								}, {
									"case":	241,
									"scores":	[-5.508036883512184]
								}, {
									"case":	242,
									"scores":	[-5.508036883512184]
								}, {
									"case":	243,
									"scores":	[-5.508036883512184]
								}, {
									"case":	244,
									"scores":	[-5.508036883512184]
								}, {
									"case":	245,
									"scores":	[-5.508036883512184]
								}, {
									"case":	246,
									"scores":	[-5.508036883512184]
								}, {
									"case":	247,
									"scores":	[-5.508036883512184]
								}, {
									"case":	248,
									"scores":	[-5.508036883512184]
								}, {
									"case":	249,
									"scores":	[-5.508036883512184]
								}, {
									"case":	250,
									"scores":	[-5.508036883512184]
								}, {
									"case":	251,
									"scores":	[-5.508036883512184]
								}, {
									"case":	252,
									"scores":	[-5.508036883512184]
								}, {
									"case":	253,
									"scores":	[-5.508036883512184]
								}, {
									"case":	254,
									"scores":	[-5.508036883512184]
								}, {
									"case":	255,
									"scores":	[-5.508036883512184]
								}, {
									"case":	256,
									"scores":	[-5.508036883512184]
								}, {
									"case":	257,
									"scores":	[-5.508036883512184]
								}, {
									"case":	258,
									"scores":	[-5.508036883512184]
								}, {
									"case":	259,
									"scores":	[-5.508036883512184]
								}, {
									"case":	260,
									"scores":	[-5.508036883512184]
								}, {
									"case":	261,
									"scores":	[-5.508036883512184]
								}, {
									"case":	262,
									"scores":	[-5.508036883512184]
								}, {
									"case":	263,
									"scores":	[-5.508036883512184]
								}, {
									"case":	264,
									"scores":	[-5.508036883512184]
								}, {
									"case":	265,
									"scores":	[-5.508036883512184]
								}, {
									"case":	266,
									"scores":	[-5.508036883512184]
								}, {
									"case":	267,
									"scores":	[-5.508036883512184]
								}, {
									"case":	268,
									"scores":	[-5.508036883512184]
								}, {
									"case":	269,
									"scores":	[-5.508036883512184]
								}, {
									"case":	270,
									"scores":	[-5.508036883512184]
								}, {
									"case":	271,
									"scores":	[-5.508036883512184]
								}, {
									"case":	272,
									"scores":	[-5.508036883512184]
								}, {
									"case":	273,
									"scores":	[-5.508036883512184]
								}, {
									"case":	274,
									"scores":	[-5.508036883512184]
								}, {
									"case":	275,
									"scores":	[-5.508036883512184]
								}, {
									"case":	276,
									"scores":	[-5.508036883512184]
								}, {
									"case":	277,
									"scores":	[-5.508036883512184]
								}, {
									"case":	278,
									"scores":	[-5.508036883512184]
								}, {
									"case":	279,
									"scores":	[-5.508036883512184]
								}, {
									"case":	280,
									"scores":	[-5.508036883512184]
								}, {
									"case":	281,
									"scores":	[-5.508036883512184]
								}, {
									"case":	282,
									"scores":	[-5.508036883512184]
								}, {
									"case":	283,
									"scores":	[-5.508036883512184]
								}, {
									"case":	284,
									"scores":	[-5.508036883512184]
								}, {
									"case":	285,
									"scores":	[-5.508036883512184]
								}, {
									"case":	286,
									"scores":	[-5.508036883512184]
								}, {
									"case":	287,
									"scores":	[-5.508036883512184]
								}, {
									"case":	288,
									"scores":	[-5.508036883512184]
								}, {
									"case":	289,
									"scores":	[-5.508036883512184]
								}, {
									"case":	290,
									"scores":	[-5.508036883512184]
								}, {
									"case":	291,
									"scores":	[-5.508036883512184]
								}, {
									"case":	292,
									"scores":	[-5.508036883512184]
								}, {
									"case":	293,
									"scores":	[-5.508036883512184]
								}, {
									"case":	294,
									"scores":	[-5.508036883512184]
								}, {
									"case":	295,
									"scores":	[-5.508036883512184]
								}, {
									"case":	296,
									"scores":	[-5.508036883512184]
								}, {
									"case":	297,
									"scores":	[-5.508036883512184]
								}, {
									"case":	298,
									"scores":	[-5.508036883512184]
								}, {
									"case":	299,
									"scores":	[-5.508036883512184]
								}, {
									"case":	300,
									"scores":	[-5.508036883512184]
								}, {
									"case":	301,
									"scores":	[-5.508036883512184]
								}, {
									"case":	302,
									"scores":	[-5.508036883512184]
								}, {
									"case":	303,
									"scores":	[-5.508036883512184]
								}, {
									"case":	304,
									"scores":	[-5.508036883512184]
								}, {
									"case":	305,
									"scores":	[-5.508036883512184]
								}, {
									"case":	306,
									"scores":	[-5.508036883512184]
								}, {
									"case":	307,
									"scores":	[-5.508036883512184]
								}, {
									"case":	308,
									"scores":	[-5.508036883512184]
								}, {
									"case":	309,
									"scores":	[-5.508036883512184]
								}, {
									"case":	310,
									"scores":	[-5.508036883512184]
								}, {
									"case":	311,
									"scores":	[-5.508036883512184]
								}, {
									"case":	312,
									"scores":	[-5.508036883512184]
								}, {
									"case":	313,
									"scores":	[-5.508036883512184]
								}, {
									"case":	314,
									"scores":	[-5.508036883512184]
								}, {
									"case":	315,
									"scores":	[-5.508036883512184]
								}, {
									"case":	316,
									"scores":	[-5.508036883512184]
								}, {
									"case":	317,
									"scores":	[-5.508036883512184]
								}, {
									"case":	318,
									"scores":	[-5.508036883512184]
								}, {
									"case":	319,
									"scores":	[-5.508036883512184]
								}, {
									"case":	320,
									"scores":	[-5.508036883512184]
								}, {
									"case":	321,
									"scores":	[-5.508036883512184]
								}, {
									"case":	322,
									"scores":	[-5.508036883512184]
								}, {
									"case":	323,
									"scores":	[-5.508036883512184]
								}, {
									"case":	324,
									"scores":	[-5.508036883512184]
								}, {
									"case":	325,
									"scores":	[-5.508036883512184]
								}, {
									"case":	326,
									"scores":	[-5.508036883512184]
								}, {
									"case":	327,
									"scores":	[-5.508036883512184]
								}, {
									"case":	328,
									"scores":	[-5.508036883512184]
								}, {
									"case":	329,
									"scores":	[-5.508036883512184]
								}, {
									"case":	330,
									"scores":	[-5.508036883512184]
								}, {
									"case":	331,
									"scores":	[-5.508036883512184]
								}, {
									"case":	332,
									"scores":	[-5.508036883512184]
								}, {
									"case":	333,
									"scores":	[-5.508036883512184]
								}, {
									"case":	334,
									"scores":	[-5.508036883512184]
								}, {
									"case":	335,
									"scores":	[-5.508036883512184]
								}, {
									"case":	336,
									"scores":	[-5.508036883512184]
								}, {
									"case":	337,
									"scores":	[-5.508036883512184]
								}, {
									"case":	338,
									"scores":	[-5.508036883512184]
								}, {
									"case":	339,
									"scores":	[-5.508036883512184]
								}, {
									"case":	340,
									"scores":	[-5.508036883512184]
								}, {
									"case":	341,
									"scores":	[-5.508036883512184]
								}, {
									"case":	342,
									"scores":	[-5.508036883512184]
								}, {
									"case":	343,
									"scores":	[-5.508036883512184]
								}, {
									"case":	344,
									"scores":	[-5.508036883512184]
								}, {
									"case":	345,
									"scores":	[-5.508036883512184]
								}, {
									"case":	346,
									"scores":	[-5.508036883512184]
								}, {
									"case":	347,
									"scores":	[-5.508036883512184]
								}, {
									"case":	348,
									"scores":	[-5.508036883512184]
								}, {
									"case":	349,
									"scores":	[-5.508036883512184]
								}, {
									"case":	350,
									"scores":	[-5.508036883512184]
								}, {
									"case":	351,
									"scores":	[-5.508036883512184]
								}, {
									"case":	352,
									"scores":	[-5.508036883512184]
								}, {
									"case":	353,
									"scores":	[-5.508036883512184]
								}, {
									"case":	354,
									"scores":	[-5.508036883512184]
								}, {
									"case":	355,
									"scores":	[-5.508036883512184]
								}, {
									"case":	356,
									"scores":	[-5.508036883512184]
								}, {
									"case":	357,
									"scores":	[-5.508036883512184]
								}, {
									"case":	358,
									"scores":	[-5.508036883512184]
								}, {
									"case":	359,
									"scores":	[-5.508036883512184]
								}, {
									"case":	360,
									"scores":	[-5.508036883512184]
								}, {
									"case":	361,
									"scores":	[-5.508036883512184]
								}, {
									"case":	362,
									"scores":	[-5.508036883512184]
								}, {
									"case":	363,
									"scores":	[-5.508036883512184]
								}, {
									"case":	364,
									"scores":	[-5.508036883512184]
								}, {
									"case":	365,
									"scores":	[-5.508036883512184]
								}, {
									"case":	366,
									"scores":	[-5.508036883512184]
								}, {
									"case":	367,
									"scores":	[-5.508036883512184]
								}, {
									"case":	368,
									"scores":	[-5.508036883512184]
								}, {
									"case":	369,
									"scores":	[-5.508036883512184]
								}, {
									"case":	370,
									"scores":	[-5.508036883512184]
								}, {
									"case":	371,
									"scores":	[-5.508036883512184]
								}, {
									"case":	372,
									"scores":	[-5.508036883512184]
								}, {
									"case":	373,
									"scores":	[-5.508036883512184]
								}, {
									"case":	374,
									"scores":	[-5.508036883512184]
								}, {
									"case":	375,
									"scores":	[-5.508036883512184]
								}, {
									"case":	376,
									"scores":	[-5.508036883512184]
								}, {
									"case":	377,
									"scores":	[-5.508036883512184]
								}, {
									"case":	378,
									"scores":	[-5.508036883512184]
								}, {
									"case":	379,
									"scores":	[-5.508036883512184]
								}, {
									"case":	380,
									"scores":	[-5.508036883512184]
								}, {
									"case":	381,
									"scores":	[-5.508036883512184]
								}, {
									"case":	382,
									"scores":	[-5.508036883512184]
								}, {
									"case":	383,
									"scores":	[-5.508036883512184]
								}, {
									"case":	384,
									"scores":	[-5.508036883512184]
								}, {
									"case":	385,
									"scores":	[-5.508036883512184]
								}, {
									"case":	386,
									"scores":	[-5.508036883512184]
								}, {
									"case":	387,
									"scores":	[-5.508036883512184]
								}, {
									"case":	388,
									"scores":	[-5.508036883512184]
								}, {
									"case":	389,
									"scores":	[-5.508036883512184]
								}, {
									"case":	390,
									"scores":	[-5.508036883512184]
								}, {
									"case":	391,
									"scores":	[-5.508036883512184]
								}, {
									"case":	392,
									"scores":	[-5.508036883512184]
								}, {
									"case":	393,
									"scores":	[-5.508036883512184]
								}, {
									"case":	394,
									"scores":	[-5.508036883512184]
								}, {
									"case":	395,
									"scores":	[-5.508036883512184]
								}, {
									"case":	396,
									"scores":	[-5.508036883512184]
								}, {
									"case":	397,
									"scores":	[-5.508036883512184]
								}, {
									"case":	398,
									"scores":	[-5.508036883512184]
								}, {
									"case":	399,
									"scores":	[-5.508036883512184]
								}, {
									"case":	400,
									"scores":	[-5.508036883512184]
								}, {
									"case":	401,
									"scores":	[-5.508036883512184]
								}, {
									"case":	402,
									"scores":	[-5.508036883512184]
								}, {
									"case":	403,
									"scores":	[-5.508036883512184]
								}, {
									"case":	404,
									"scores":	[-5.508036883512184]
								}, {
									"case":	405,
									"scores":	[-5.508036883512184]
								}, {
									"case":	406,
									"scores":	[-5.508036883512184]
								}, {
									"case":	407,
									"scores":	[-5.508036883512184]
								}, {
									"case":	408,
									"scores":	[-5.508036883512184]
								}, {
									"case":	409,
									"scores":	[-5.508036883512184]
								}, {
									"case":	410,
									"scores":	[-5.508036883512184]
								}, {
									"case":	411,
									"scores":	[-5.508036883512184]
								}, {
									"case":	412,
									"scores":	[-5.508036883512184]
								}, {
									"case":	413,
									"scores":	[-5.508036883512184]
								}, {
									"case":	414,
									"scores":	[-5.508036883512184]
								}, {
									"case":	415,
									"scores":	[-5.508036883512184]
								}, {
									"case":	416,
									"scores":	[-5.508036883512184]
								}, {
									"case":	417,
									"scores":	[-5.508036883512184]
								}, {
									"case":	418,
									"scores":	[-5.508036883512184]
								}, {
									"case":	419,
									"scores":	[-5.508036883512184]
								}, {
									"case":	420,
									"scores":	[-5.508036883512184]
								}, {
									"case":	421,
									"scores":	[-5.508036883512184]
								}, {
									"case":	422,
									"scores":	[-5.508036883512184]
								}, {
									"case":	423,
									"scores":	[-5.508036883512184]
								}, {
									"case":	424,
									"scores":	[-5.508036883512184]
								}, {
									"case":	425,
									"scores":	[-5.508036883512184]
								}, {
									"case":	426,
									"scores":	[-5.508036883512184]
								}, {
									"case":	427,
									"scores":	[-5.508036883512184]
								}, {
									"case":	428,
									"scores":	[-5.508036883512184]
								}, {
									"case":	429,
									"scores":	[-5.508036883512184]
								}, {
									"case":	430,
									"scores":	[-5.508036883512184]
								}, {
									"case":	431,
									"scores":	[-5.508036883512184]
								}, {
									"case":	432,
									"scores":	[-5.508036883512184]
								}, {
									"case":	433,
									"scores":	[-5.508036883512184]
								}, {
									"case":	434,
									"scores":	[-5.508036883512184]
								}, {
									"case":	435,
									"scores":	[-5.508036883512184]
								}, {
									"case":	436,
									"scores":	[-5.508036883512184]
								}, {
									"case":	437,
									"scores":	[-5.508036883512184]
								}, {
									"case":	438,
									"scores":	[-5.508036883512184]
								}, {
									"case":	439,
									"scores":	[-5.508036883512184]
								}, {
									"case":	440,
									"scores":	[-5.508036883512184]
								}, {
									"case":	441,
									"scores":	[-5.508036883512184]
								}, {
									"case":	442,
									"scores":	[-5.508036883512184]
								}, {
									"case":	443,
									"scores":	[-5.508036883512184]
								}, {
									"case":	444,
									"scores":	[-5.508036883512184]
								}, {
									"case":	445,
									"scores":	[-5.508036883512184]
								}, {
									"case":	446,
									"scores":	[-5.508036883512184]
								}, {
									"case":	447,
									"scores":	[-5.508036883512184]
								}, {
									"case":	448,
									"scores":	[-5.508036883512184]
								}, {
									"case":	449,
									"scores":	[-5.508036883512184]
								}, {
									"case":	450,
									"scores":	[-5.508036883512184]
								}, {
									"case":	451,
									"scores":	[-5.508036883512184]
								}, {
									"case":	452,
									"scores":	[-5.508036883512184]
								}, {
									"case":	453,
									"scores":	[-5.508036883512184]
								}, {
									"case":	454,
									"scores":	[-5.508036883512184]
								}, {
									"case":	455,
									"scores":	[-5.508036883512184]
								}, {
									"case":	456,
									"scores":	[-5.508036883512184]
								}, {
									"case":	457,
									"scores":	[-5.508036883512184]
								}, {
									"case":	458,
									"scores":	[-5.508036883512184]
								}, {
									"case":	459,
									"scores":	[-5.508036883512184]
								}, {
									"case":	460,
									"scores":	[-5.508036883512184]
								}, {
									"case":	461,
									"scores":	[-5.508036883512184]
								}, {
									"case":	462,
									"scores":	[-5.508036883512184]
								}, {
									"case":	463,
									"scores":	[-5.508036883512184]
								}, {
									"case":	464,
									"scores":	[-5.508036883512184]
								}, {
									"case":	465,
									"scores":	[-5.508036883512184]
								}, {
									"case":	466,
									"scores":	[-5.508036883512184]
								}, {
									"case":	467,
									"scores":	[-5.508036883512184]
								}, {
									"case":	468,
									"scores":	[-5.508036883512184]
								}, {
									"case":	469,
									"scores":	[-5.508036883512184]
								}, {
									"case":	470,
									"scores":	[-5.508036883512184]
								}, {
									"case":	471,
									"scores":	[-5.508036883512184]
								}, {
									"case":	472,
									"scores":	[-5.508036883512184]
								}, {
									"case":	473,
									"scores":	[-5.508036883512184]
								}, {
									"case":	474,
									"scores":	[-5.508036883512184]
								}, {
									"case":	475,
									"scores":	[-5.508036883512184]
								}, {
									"case":	476,
									"scores":	[-5.508036883512184]
								}, {
									"case":	477,
									"scores":	[-5.508036883512184]
								}, {
									"case":	478,
									"scores":	[-5.508036883512184]
								}, {
									"case":	479,
									"scores":	[-5.508036883512184]
								}, {
									"case":	480,
									"scores":	[-5.508036883512184]
								}, {
									"case":	481,
									"scores":	[-5.508036883512184]
								}, {
									"case":	482,
									"scores":	[-5.508036883512184]
								}, {
									"case":	483,
									"scores":	[-5.508036883512184]
								}, {
									"case":	484,
									"scores":	[-5.508036883512184]
								}, {
									"case":	485,
									"scores":	[-5.508036883512184]
								}, {
									"case":	486,
									"scores":	[-5.508036883512184]
								}, {
									"case":	487,
									"scores":	[-5.508036883512184]
								}, {
									"case":	488,
									"scores":	[-5.508036883512184]
								}, {
									"case":	489,
									"scores":	[-5.508036883512184]
								}, {
									"case":	490,
									"scores":	[-5.508036883512184]
								}, {
									"case":	491,
									"scores":	[-5.508036883512184]
								}, {
									"case":	492,
									"scores":	[-5.508036883512184]
								}, {
									"case":	493,
									"scores":	[-5.508036883512184]
								}, {
									"case":	494,
									"scores":	[-5.508036883512184]
								}, {
									"case":	495,
									"scores":	[-6.7017024772121836, -8.7668203766121842, -9.9338243735121843, -9.9338243735121843, -9.0472493735121837, -9.1369800766121827, -9.1369800766121827, -8.9153913766121828, -8.9153913766121828, -9.0048140766121829, -10.018412390412184, -8.7668203766121842, -8.7668203766121842, -9.0048140766121829, -10.018412390412184, -9.1958203735121842, -9.1958203735121842, -8.273865773512183, -8.273865773512183, -9.0472493735121837, -9.0472493735121837, -9.0472493735121837, -9.0472493735121837, -9.0472493735121837, -9.0472493735121837, -9.0472493735121837, -9.0472493735121837]
								}]
						}, {
							"switch":	78,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	1654,
							"begin_column":	5,
							"end_line":	1654,
							"end_column":	41,
							"patch_codes":	["if (!__is_neg(\"\", \"L1654\", 27, &(ifstat), sizeof (ifstat), &(decompress), sizeof (decompress), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(ifstat->st_mode), sizeof (ifstat->st_mode), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ifstat->st_uid), sizeof (ifstat->st_uid), &(ifstat->st_gid), sizeof (ifstat->st_gid), &(mode), sizeof (mode), &(r), sizeof (r), &(ifstat->st_dev), sizeof (ifstat->st_dev), &(ifstat->st_ino), sizeof (ifstat->st_ino), &(ifstat->st_nlink), sizeof (ifstat->st_nlink), &(ifstat->__pad0), sizeof (ifstat->__pad0), &(ifstat->st_rdev), sizeof (ifstat->st_rdev), &(ifstat->st_size), sizeof (ifstat->st_size), &(ifstat->st_blksize), sizeof (ifstat->st_blksize), &(ifstat->st_blocks), sizeof (ifstat->st_blocks)))\n    timespec[1] = get_stat_mtime(ifstat);\n", "{\n}\n", "timespec[1] = get_stat_atime(ifstat)", "timespec[1] = get_stat_birthtime(ifstat)", "timespec[1] = get_stat_ctime(ifstat)", "timespec[1] = get_stat_mtime((&ifstat))", "timespec[1] = get_stat_mtime((&mode))", "timespec[1] = get_stat_mtime((&r))", "timespec[1] = get_stat_mtime((&timespec))", "timespec[1] = get_stat_mtime((ifstat))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2908770112121841, -7.2051347535121835, -6.2870031535121838, -6.2870031535121838, -7.4946131535121836, -6.5199027535121843, -6.5199027535121843, -7.2954329535121838, -7.2954329535121838, -7.7323979535121836, -8.2518238575121838, -7.2051347535121835, -7.2051347535121835, -7.7323979535121836, -8.2518238575121838, -7.5849113535121839, -7.5849113535121839, -6.7237794535121838, -6.7237794535121838, -7.4946131535121836, -7.4946131535121836, -7.4946131535121836, -7.4946131535121836, -7.4946131535121836, -7.4946131535121836, -7.4946131535121836, -7.4946131535121836]
								}, {
									"case":	2,
									"scores":	[-5.508036883512184]
								}, {
									"case":	3,
									"scores":	[-5.508036883512184]
								}, {
									"case":	4,
									"scores":	[-5.508036883512184]
								}, {
									"case":	5,
									"scores":	[-5.508036883512184]
								}, {
									"case":	6,
									"scores":	[-5.508036883512184]
								}, {
									"case":	7,
									"scores":	[-5.508036883512184]
								}, {
									"case":	8,
									"scores":	[-5.508036883512184]
								}, {
									"case":	9,
									"scores":	[-5.508036883512184]
								}, {
									"case":	10,
									"scores":	[-5.508036883512184]
								}]
						}]
				}, {
					"line":	1655,
					"switches":	[{
							"switch":	79,
							"types":	[[], [], [], [], [495], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [], [], [], [], [], []],
							"begin_line":	1656,
							"begin_column":	3,
							"end_line":	1656,
							"end_column":	3,
							"patch_codes":	["memset(&ifstat->__glibc_reserved, 0, sizeof (*(&ifstat->__glibc_reserved)))", "memset(&ifstat->__pad0, 0, sizeof (*(&ifstat->__pad0)))", "memset(&ifstat->st_atim, 0, sizeof (*(&ifstat->st_atim)))", "memset(&ifstat->st_blksize, 0, sizeof (*(&ifstat->st_blksize)))", "memset(&ifstat->st_blocks, 0, sizeof (*(&ifstat->st_blocks)))", "memset(&ifstat->st_ctim, 0, sizeof (*(&ifstat->st_ctim)))", "memset(&ifstat->st_dev, 0, sizeof (*(&ifstat->st_dev)))", "memset(&ifstat->st_gid, 0, sizeof (*(&ifstat->st_gid)))", "memset(&ifstat->st_ino, 0, sizeof (*(&ifstat->st_ino)))", "memset(&ifstat->st_mode, 0, sizeof (*(&ifstat->st_mode)))", "memset(&ifstat->st_mtim, 0, sizeof (*(&ifstat->st_mtim)))", "memset(&ifstat->st_nlink, 0, sizeof (*(&ifstat->st_nlink)))", "memset(&ifstat->st_rdev, 0, sizeof (*(&ifstat->st_rdev)))", "memset(&ifstat->st_size, 0, sizeof (*(&ifstat->st_size)))", "memset(&ifstat->st_uid, 0, sizeof (*(&ifstat->st_uid)))", "memset(&time_stamp, 0, sizeof (*(&time_stamp)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "memset(&timespec[1], 0, sizeof (*(&timespec[1])))", "memset(&timespec[1].tv_nsec, 0, sizeof (*(&timespec[1].tv_nsec)))", "memset(&timespec[1].tv_sec, 0, sizeof (*(&timespec[1].tv_sec)))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (3)", "bytes_in = (384)", "bytes_in = (448)", "bytes_in = (504)", "bytes_in = (511)", "bytes_in = (56)", "bytes_in = (64)", "bytes_in = (7)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (3)", "bytes_out = (384)", "bytes_out = (448)", "bytes_out = (504)", "bytes_out = (511)", "bytes_out = (56)", "bytes_out = (64)", "bytes_out = (7)", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (2)", "exit_code = (256)", "exit_code = (3)", "exit_code = (384)", "exit_code = (448)", "exit_code = (504)", "exit_code = (511)", "exit_code = (56)", "exit_code = (64)", "exit_code = (7)", "exit_code = (r)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (3)", "exiting_signal = (384)", "exiting_signal = (448)", "exiting_signal = (504)", "exiting_signal = (511)", "exiting_signal = (56)", "exiting_signal = (64)", "exiting_signal = (7)", "exiting_signal = (r)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (2)", "foreground = (256)", "foreground = (3)", "foreground = (384)", "foreground = (448)", "foreground = (504)", "foreground = (511)", "foreground = (56)", "foreground = (64)", "foreground = (7)", "foreground = (r)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (3)", "header_bytes = (384)", "header_bytes = (448)", "header_bytes = (504)", "header_bytes = (511)", "header_bytes = (56)", "header_bytes = (64)", "header_bytes = (7)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (2)", "ifd = (256)", "ifd = (3)", "ifd = (384)", "ifd = (448)", "ifd = (504)", "ifd = (511)", "ifd = (56)", "ifd = (64)", "ifd = (7)", "ifd = (r)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (3)", "ifile_size = (384)", "ifile_size = (448)", "ifile_size = (504)", "ifile_size = (511)", "ifile_size = (56)", "ifile_size = (64)", "ifile_size = (7)", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (2)", "inptr = (256)", "inptr = (3)", "inptr = (384)", "inptr = (448)", "inptr = (504)", "inptr = (511)", "inptr = (56)", "inptr = (64)", "inptr = (7)", "inptr = (mode)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (2)", "last_member = (256)", "last_member = (3)", "last_member = (384)", "last_member = (448)", "last_member = (504)", "last_member = (511)", "last_member = (56)", "last_member = (64)", "last_member = (7)", "last_member = (r)", "list = (0)", "list = (1)", "list = (128)", "list = (2)", "list = (256)", "list = (3)", "list = (384)", "list = (448)", "list = (504)", "list = (511)", "list = (56)", "list = (64)", "list = (7)", "list = (r)", "method = (0)", "method = (1)", "method = (128)", "method = (2)", "method = (256)", "method = (3)", "method = (384)", "method = (448)", "method = (504)", "method = (511)", "method = (56)", "method = (64)", "method = (7)", "method = (r)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (2)", "no_name = (256)", "no_name = (3)", "no_name = (384)", "no_name = (448)", "no_name = (504)", "no_name = (511)", "no_name = (56)", "no_name = (64)", "no_name = (7)", "no_name = (r)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (2)", "no_time = (256)", "no_time = (3)", "no_time = (384)", "no_time = (448)", "no_time = (504)", "no_time = (511)", "no_time = (56)", "no_time = (64)", "no_time = (7)", "no_time = (r)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (2)", "ofd = (256)", "ofd = (3)", "ofd = (384)", "ofd = (448)", "ofd = (504)", "ofd = (511)", "ofd = (56)", "ofd = (64)", "ofd = (7)", "ofd = (r)", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (2)", "part_nb = (256)", "part_nb = (3)", "part_nb = (384)", "part_nb = (448)", "part_nb = (504)", "part_nb = (511)", "part_nb = (56)", "part_nb = (64)", "part_nb = (7)", "part_nb = (r)", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (2)", "quiet = (256)", "quiet = (3)", "quiet = (384)", "quiet = (448)", "quiet = (504)", "quiet = (511)", "quiet = (56)", "quiet = (64)", "quiet = (7)", "quiet = (r)", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (3)", "remove_ofname_fd = (384)", "remove_ofname_fd = (448)", "remove_ofname_fd = (504)", "remove_ofname_fd = (511)", "remove_ofname_fd = (56)", "remove_ofname_fd = (64)", "remove_ofname_fd = (7)", "remove_ofname_fd = (r)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (3)", "save_orig_name = (384)", "save_orig_name = (448)", "save_orig_name = (504)", "save_orig_name = (511)", "save_orig_name = (56)", "save_orig_name = (64)", "save_orig_name = (7)", "save_orig_name = (r)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (448)", "time_stamp.tv_nsec = (504)", "time_stamp.tv_nsec = (511)", "time_stamp.tv_nsec = (56)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (7)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (448)", "time_stamp.tv_sec = (504)", "time_stamp.tv_sec = (511)", "time_stamp.tv_sec = (56)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (7)", "timespec[0] = get_stat_atime((ifstat))", "timespec[1] = get_stat_mtime((ifstat))", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (3)", "to_stdout = (384)", "to_stdout = (448)", "to_stdout = (504)", "to_stdout = (511)", "to_stdout = (56)", "to_stdout = (64)", "to_stdout = (7)", "to_stdout = (r)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (2)", "total_in = (256)", "total_in = (3)", "total_in = (384)", "total_in = (448)", "total_in = (504)", "total_in = (511)", "total_in = (56)", "total_in = (64)", "total_in = (7)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (2)", "total_out = (256)", "total_out = (3)", "total_out = (384)", "total_out = (448)", "total_out = (504)", "total_out = (511)", "total_out = (56)", "total_out = (64)", "total_out = (7)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (2)", "verbose = (256)", "verbose = (3)", "verbose = (384)", "verbose = (448)", "verbose = (504)", "verbose = (511)", "verbose = (56)", "verbose = (64)", "verbose = (7)", "verbose = (r)", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (2)", "z_len = (256)", "z_len = (3)", "z_len = (384)", "z_len = (448)", "z_len = (504)", "z_len = (511)", "z_len = (56)", "z_len = (64)", "z_len = (7)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fchown(ofd, ifstat->st_uid, ifstat->st_gid)", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "r = fchmod(ofd, mode)", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "timespec[0] = get_stat_atime(ifstat)", "timespec[1] = get_stat_mtime(ifstat)", "timespec[1] = time_stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1656\", 22, &(decompress), sizeof (decompress), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(ifstat), sizeof (ifstat), &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(r), sizeof (r)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	2,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	3,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	4,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	5,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	6,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	7,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	8,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	9,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	10,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	11,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	12,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	13,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	14,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	15,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	16,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	17,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	18,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	19,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	20,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	21,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	22,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	23,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	24,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	25,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	26,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	27,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	28,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	29,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	30,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	31,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	32,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	33,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	34,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	35,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	36,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	37,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	38,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	39,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	40,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	41,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	42,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	43,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	44,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	45,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	46,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	47,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	48,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	49,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	50,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	51,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	52,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	53,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	54,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	55,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	56,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	57,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	58,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	59,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	60,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	61,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	62,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	63,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	64,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	65,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	66,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	67,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	68,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	69,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	70,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	71,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	72,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	73,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	74,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	75,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	76,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	77,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	78,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	79,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	80,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	81,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	82,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	83,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	84,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	85,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	86,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	87,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	88,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	89,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	90,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	91,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	92,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	93,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	94,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	95,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	96,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	97,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	98,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	99,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	100,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	101,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	102,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	103,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	104,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	105,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	106,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	107,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	108,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	109,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	110,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	111,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	112,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	113,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	114,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	115,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	116,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	117,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	118,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	119,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	120,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	121,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	122,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	123,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	124,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	125,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	126,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	127,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	128,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	129,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	130,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	131,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	132,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	133,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	134,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	135,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	136,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	137,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	138,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	139,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	140,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	141,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	142,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	143,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	144,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	145,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	146,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	147,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	148,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	149,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	150,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	151,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	152,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	153,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	154,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	155,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	156,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	157,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	158,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	159,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	160,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	161,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	162,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	163,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	164,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	165,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	166,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	167,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	168,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	169,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	170,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	171,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	172,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	173,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	174,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	175,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	176,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	177,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	178,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	179,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	180,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	181,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	182,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	183,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	184,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	185,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	186,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	187,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	188,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	189,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	190,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	191,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	192,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	193,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	194,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	195,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	196,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	197,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	198,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	199,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	200,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	201,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	202,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	203,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	204,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	205,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	206,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	207,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	208,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	209,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	210,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	211,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	212,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	213,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	214,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	215,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	216,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	217,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	218,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	219,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	220,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	221,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	222,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	223,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	224,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	225,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	226,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	227,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	228,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	229,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	230,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	231,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	232,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	233,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	234,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	235,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	236,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	237,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	238,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	239,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	240,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	241,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	242,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	243,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	244,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	245,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	246,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	247,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	248,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	249,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	250,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	251,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	252,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	253,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	254,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	255,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	256,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	257,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	258,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	259,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	260,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	261,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	262,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	263,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	264,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	265,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	266,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	267,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	268,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	269,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	270,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	271,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	272,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	273,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	274,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	275,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	276,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	277,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	278,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	279,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	280,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	281,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	282,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	283,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	284,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	285,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	286,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	287,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	288,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	289,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	290,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	291,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	292,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	293,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	294,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	295,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	296,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	297,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	298,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	299,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	300,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	301,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	302,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	303,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	304,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	305,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	306,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	307,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	308,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	309,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	310,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	311,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	312,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	313,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	314,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	315,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	316,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	317,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	318,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	319,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	320,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	321,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	322,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	323,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	324,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	325,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	326,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	327,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	328,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	329,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	330,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	331,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	332,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	333,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	334,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	335,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	336,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	337,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	338,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	339,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	340,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	341,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	342,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	343,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	344,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	345,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	346,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	347,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	348,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	349,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	350,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	351,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	352,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	353,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	354,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	355,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	356,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	357,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	358,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	359,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	360,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	361,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	362,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	363,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	364,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	365,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	366,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	367,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	368,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	369,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	370,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	371,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	372,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	373,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	374,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	375,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	376,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	377,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	378,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	379,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	380,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	381,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	382,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	383,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	384,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	385,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	386,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	387,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	388,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	389,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	390,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	391,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	392,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	393,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	394,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	395,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	396,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	397,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	398,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	399,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	400,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	401,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	402,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	403,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	404,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	405,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	406,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	407,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	408,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	409,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	410,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	411,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	412,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	413,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	414,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	415,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	416,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	417,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	418,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	419,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	420,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	421,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	422,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	423,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	424,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	425,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	426,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	427,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	428,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	429,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	430,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	431,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	432,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	433,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	434,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	435,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	436,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	437,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	438,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	439,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	440,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	441,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	442,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	443,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	444,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	445,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	446,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	447,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	448,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	449,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	450,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	451,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	452,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	453,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	454,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	455,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	456,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	457,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	458,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	459,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	460,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	461,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	462,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	463,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	464,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	465,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	466,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	467,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	468,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	469,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	470,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	471,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	472,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	473,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	474,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	475,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	476,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	477,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	478,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	479,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	480,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	481,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	482,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	483,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	484,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	485,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	486,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	487,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	488,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	489,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	490,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	491,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	492,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	493,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	494,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	495,
									"scores":	[-9.2300871546596266, -8.6643382615596263, -8.6643382615596263, -8.6643382615596263, -9.5132201515596257, -9.5132201515596257, -9.5132201515596257, -9.5132201515596257, -9.5804546452596249, -9.5132201515596257, -9.0589941756596257, -9.0589941756596257, -9.2911445646596267, -9.2911445646596267, -9.4680808546596253, -10.481679168459626, -9.2300871546596266, -9.2300871546596266, -9.4680808546596253, -10.481679168459626, -8.7981899615596255, -9.0312475715596268]
								}]
						}, {
							"switch":	80,
							"types":	[[7], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4, 5, 6]],
							"begin_line":	1656,
							"begin_column":	5,
							"end_line":	1664,
							"end_column":	7,
							"patch_codes":	["if (__is_neg(\"\", \"L1656\", 22, &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(decompress), sizeof (decompress), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ifstat), sizeof (ifstat), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(r), sizeof (r))) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n", "if (((decompress && 0 <= time_stamp.tv_nsec) || __is_neg(\"\", \"L1656\", 22, &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(decompress), sizeof (decompress), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ifstat), sizeof (ifstat), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(r), sizeof (r))) && !(timespec[1].tv_sec == time_stamp.tv_sec && timespec[1].tv_nsec == time_stamp.tv_nsec)) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n", "if ((decompress && 0 <= time_stamp.tv_nsec && !(timespec[1].tv_sec == time_stamp.tv_sec && timespec[1].tv_nsec == time_stamp.tv_nsec)) || __is_neg(\"\", \"L1656\", 22, &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(decompress), sizeof (decompress), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ifstat), sizeof (ifstat), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(r), sizeof (r))) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n", "if (0 <= time_stamp.tv_nsec && !(timespec[1].tv_sec == time_stamp.tv_sec && timespec[1].tv_nsec == time_stamp.tv_nsec)) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n", "if (decompress && !(timespec[1].tv_sec == time_stamp.tv_sec && timespec[1].tv_nsec == time_stamp.tv_nsec)) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n", "if (decompress && 0 <= time_stamp.tv_nsec) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n", "if ((decompress && 0 <= time_stamp.tv_nsec && !(timespec[1].tv_sec == time_stamp.tv_sec && timespec[1].tv_nsec == time_stamp.tv_nsec)) && !__is_neg(\"\", \"L1656\", 22, &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(decompress), sizeof (decompress), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ifstat), sizeof (ifstat), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(r), sizeof (r))) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.7543666974281464, -1.6151996974281464, -1.6151996974281464, -1.6151996974281464, -2.7543666974281464, -2.7543666974281464, -2.7543666974281464, -2.7543666974281464, -4.6820892974281456, -3.4909422974281465, -3.4909422974281465, -5.8857131821281463, -3.9543190974281459, -3.9543190974281459, -4.5446088974281453, -4.2317330744281465, -4.6820892974281456, -4.6820892974281456, -4.5446088974281453, -4.2317330744281465, -4.1377073974281462, -4.1672857154281457]
								}, {
									"case":	2,
									"scores":	[-2.2396811732281456, -1.1005141732281474, -1.1005141732281474, -1.1005141732281474, -2.2396811732281456, -2.2396811732281456, -2.2396811732281456, -2.2396811732281456, -4.1674037732281457, -2.9762567732281457, -2.9762567732281457, -5.3710276579281464, -3.439633573228146, -3.439633573228146, -4.0299233732281463, -3.7170475502281466, -4.1674037732281457, -4.1674037732281457, -4.0299233732281463, -3.7170475502281466, -3.6230218732281458, -3.6526001912281454]
								}, {
									"case":	3,
									"scores":	[-2.2396811732281456, -1.1005141732281474, -1.1005141732281474, -1.1005141732281474, -2.2396811732281456, -2.2396811732281456, -2.2396811732281456, -2.2396811732281456, -4.1674037732281457, -2.9762567732281457, -2.9762567732281457, -5.3710276579281464, -3.439633573228146, -3.439633573228146, -4.0299233732281463, -3.7170475502281466, -4.1674037732281457, -4.1674037732281457, -4.0299233732281463, -3.7170475502281466, -3.6230218732281458, -3.6526001912281454]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-2.2396811732281456, -1.1005141732281474, -1.1005141732281474, -1.1005141732281474, -2.2396811732281456, -2.2396811732281456, -2.2396811732281456, -2.2396811732281456, -4.1674037732281457, -2.9762567732281457, -2.9762567732281457, -5.3710276579281464, -3.439633573228146, -3.439633573228146, -4.0299233732281463, -3.7170475502281466, -4.1674037732281457, -4.1674037732281457, -4.0299233732281463, -3.7170475502281466, -3.6230218732281458, -3.6526001912281454]
								}]
						}, {
							"switch":	81,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1656,
							"begin_column":	5,
							"end_line":	1664,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L1656\", 22, &(decompress), sizeof (decompress), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(ifstat), sizeof (ifstat), &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(r), sizeof (r)))\n    if (decompress && 0 <= time_stamp.tv_nsec && !(timespec[1].tv_sec == time_stamp.tv_sec && timespec[1].tv_nsec == time_stamp.tv_nsec)) {\n        timespec[1] = time_stamp;\n        if (verbose > 1) {\n            rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n        }\n    }\n", "if (!__is_neg(\"\", \"L1656\", 22, &(decompress), sizeof (decompress), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(timespec[1].tv_sec), sizeof (timespec[1].tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(ifstat), sizeof (ifstat), &(timespec[1].tv_nsec), sizeof (timespec[1].tv_nsec), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(r), sizeof (r)) && (decompress && 0 <= time_stamp.tv_nsec && !(timespec[1].tv_sec == time_stamp.tv_sec && timespec[1].tv_nsec == time_stamp.tv_nsec))) {\n    timespec[1] = time_stamp;\n    if (verbose > 1) {\n        rpl_fprintf(stderr, \"%s: time stamp restored\\n\", ofname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8818986315596256, -3.8150090315596259, -3.8150090315596259, -3.8150090315596259, -4.9541760315596255, -4.9541760315596255, -4.9541760315596255, -4.9541760315596255, -8.0855225162596263, -4.9541760315596255, -5.6907516315596256, -5.6907516315596256, -6.1541284315596254, -6.1541284315596254, -6.7444182315596253, -6.4315424085596256, -6.8818986315596256, -6.8818986315596256, -6.7444182315596253, -6.4315424085596256, -6.3375167315596252, -6.3670950495596257]
								}, {
									"case":	2,
									"scores":	[-6.4166530093596252, -3.3497634093596256, -3.3497634093596256, -3.3497634093596256, -4.4889304093596252, -4.4889304093596252, -4.4889304093596252, -4.4889304093596252, -7.6202768940596251, -4.4889304093596252, -5.2255060093596253, -5.2255060093596253, -5.6888828093596251, -5.6888828093596251, -6.279172609359625, -5.9662967863596252, -6.4166530093596252, -6.4166530093596252, -6.279172609359625, -5.9662967863596252, -5.8722711093596258, -5.9018494273596254]
								}]
						}]
				}, {
					"line":	1665,
					"switches":	[{
							"switch":	82,
							"types":	[[], [], [], [], [493], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [], [], [], [], [], []],
							"begin_line":	1666,
							"begin_column":	3,
							"end_line":	1666,
							"end_column":	3,
							"patch_codes":	["memset(&ifstat->__glibc_reserved, 0, sizeof (*(&ifstat->__glibc_reserved)))", "memset(&ifstat->__pad0, 0, sizeof (*(&ifstat->__pad0)))", "memset(&ifstat->st_atim, 0, sizeof (*(&ifstat->st_atim)))", "memset(&ifstat->st_blksize, 0, sizeof (*(&ifstat->st_blksize)))", "memset(&ifstat->st_blocks, 0, sizeof (*(&ifstat->st_blocks)))", "memset(&ifstat->st_ctim, 0, sizeof (*(&ifstat->st_ctim)))", "memset(&ifstat->st_dev, 0, sizeof (*(&ifstat->st_dev)))", "memset(&ifstat->st_gid, 0, sizeof (*(&ifstat->st_gid)))", "memset(&ifstat->st_ino, 0, sizeof (*(&ifstat->st_ino)))", "memset(&ifstat->st_mode, 0, sizeof (*(&ifstat->st_mode)))", "memset(&ifstat->st_mtim, 0, sizeof (*(&ifstat->st_mtim)))", "memset(&ifstat->st_nlink, 0, sizeof (*(&ifstat->st_nlink)))", "memset(&ifstat->st_rdev, 0, sizeof (*(&ifstat->st_rdev)))", "memset(&ifstat->st_size, 0, sizeof (*(&ifstat->st_size)))", "memset(&ifstat->st_uid, 0, sizeof (*(&ifstat->st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "memset(&timespec[1].tv_nsec, 0, sizeof (*(&timespec[1].tv_nsec)))", "memset(&timespec[1].tv_sec, 0, sizeof (*(&timespec[1].tv_sec)))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (3)", "bytes_in = (384)", "bytes_in = (448)", "bytes_in = (504)", "bytes_in = (511)", "bytes_in = (56)", "bytes_in = (64)", "bytes_in = (7)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (3)", "bytes_out = (384)", "bytes_out = (448)", "bytes_out = (504)", "bytes_out = (511)", "bytes_out = (56)", "bytes_out = (64)", "bytes_out = (7)", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (2)", "exit_code = (256)", "exit_code = (3)", "exit_code = (384)", "exit_code = (448)", "exit_code = (504)", "exit_code = (511)", "exit_code = (56)", "exit_code = (64)", "exit_code = (7)", "exit_code = (r)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (3)", "exiting_signal = (384)", "exiting_signal = (448)", "exiting_signal = (504)", "exiting_signal = (511)", "exiting_signal = (56)", "exiting_signal = (64)", "exiting_signal = (7)", "exiting_signal = (r)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (2)", "foreground = (256)", "foreground = (3)", "foreground = (384)", "foreground = (448)", "foreground = (504)", "foreground = (511)", "foreground = (56)", "foreground = (64)", "foreground = (7)", "foreground = (r)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (3)", "header_bytes = (384)", "header_bytes = (448)", "header_bytes = (504)", "header_bytes = (511)", "header_bytes = (56)", "header_bytes = (64)", "header_bytes = (7)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (2)", "ifd = (256)", "ifd = (3)", "ifd = (384)", "ifd = (448)", "ifd = (504)", "ifd = (511)", "ifd = (56)", "ifd = (64)", "ifd = (7)", "ifd = (r)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (3)", "ifile_size = (384)", "ifile_size = (448)", "ifile_size = (504)", "ifile_size = (511)", "ifile_size = (56)", "ifile_size = (64)", "ifile_size = (7)", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (2)", "inptr = (256)", "inptr = (3)", "inptr = (384)", "inptr = (448)", "inptr = (504)", "inptr = (511)", "inptr = (56)", "inptr = (64)", "inptr = (7)", "inptr = (mode)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (2)", "last_member = (256)", "last_member = (3)", "last_member = (384)", "last_member = (448)", "last_member = (504)", "last_member = (511)", "last_member = (56)", "last_member = (64)", "last_member = (7)", "last_member = (r)", "list = (0)", "list = (1)", "list = (128)", "list = (2)", "list = (256)", "list = (3)", "list = (384)", "list = (448)", "list = (504)", "list = (511)", "list = (56)", "list = (64)", "list = (7)", "list = (r)", "method = (0)", "method = (1)", "method = (128)", "method = (2)", "method = (256)", "method = (3)", "method = (384)", "method = (448)", "method = (504)", "method = (511)", "method = (56)", "method = (64)", "method = (7)", "method = (r)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (2)", "no_name = (256)", "no_name = (3)", "no_name = (384)", "no_name = (448)", "no_name = (504)", "no_name = (511)", "no_name = (56)", "no_name = (64)", "no_name = (7)", "no_name = (r)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (2)", "no_time = (256)", "no_time = (3)", "no_time = (384)", "no_time = (448)", "no_time = (504)", "no_time = (511)", "no_time = (56)", "no_time = (64)", "no_time = (7)", "no_time = (r)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (2)", "ofd = (256)", "ofd = (3)", "ofd = (384)", "ofd = (448)", "ofd = (504)", "ofd = (511)", "ofd = (56)", "ofd = (64)", "ofd = (7)", "ofd = (r)", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (2)", "part_nb = (256)", "part_nb = (3)", "part_nb = (384)", "part_nb = (448)", "part_nb = (504)", "part_nb = (511)", "part_nb = (56)", "part_nb = (64)", "part_nb = (7)", "part_nb = (r)", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (2)", "quiet = (256)", "quiet = (3)", "quiet = (384)", "quiet = (448)", "quiet = (504)", "quiet = (511)", "quiet = (56)", "quiet = (64)", "quiet = (7)", "quiet = (r)", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (3)", "remove_ofname_fd = (384)", "remove_ofname_fd = (448)", "remove_ofname_fd = (504)", "remove_ofname_fd = (511)", "remove_ofname_fd = (56)", "remove_ofname_fd = (64)", "remove_ofname_fd = (7)", "remove_ofname_fd = (r)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (3)", "save_orig_name = (384)", "save_orig_name = (448)", "save_orig_name = (504)", "save_orig_name = (511)", "save_orig_name = (56)", "save_orig_name = (64)", "save_orig_name = (7)", "save_orig_name = (r)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (448)", "time_stamp.tv_nsec = (504)", "time_stamp.tv_nsec = (511)", "time_stamp.tv_nsec = (56)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (7)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (448)", "time_stamp.tv_sec = (504)", "time_stamp.tv_sec = (511)", "time_stamp.tv_sec = (56)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (7)", "timespec[0] = get_stat_atime((ifstat))", "timespec[1] = get_stat_mtime((ifstat))", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (3)", "to_stdout = (384)", "to_stdout = (448)", "to_stdout = (504)", "to_stdout = (511)", "to_stdout = (56)", "to_stdout = (64)", "to_stdout = (7)", "to_stdout = (r)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (2)", "total_in = (256)", "total_in = (3)", "total_in = (384)", "total_in = (448)", "total_in = (504)", "total_in = (511)", "total_in = (56)", "total_in = (64)", "total_in = (7)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (2)", "total_out = (256)", "total_out = (3)", "total_out = (384)", "total_out = (448)", "total_out = (504)", "total_out = (511)", "total_out = (56)", "total_out = (64)", "total_out = (7)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (2)", "verbose = (256)", "verbose = (3)", "verbose = (384)", "verbose = (448)", "verbose = (504)", "verbose = (511)", "verbose = (56)", "verbose = (64)", "verbose = (7)", "verbose = (r)", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (2)", "z_len = (256)", "z_len = (3)", "z_len = (384)", "z_len = (448)", "z_len = (504)", "z_len = (511)", "z_len = (56)", "z_len = (64)", "z_len = (7)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fchown(ofd, ifstat->st_uid, ifstat->st_gid)", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "r = fchmod(ofd, mode)", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "timespec[0] = get_stat_atime(ifstat)", "timespec[1] = get_stat_mtime(ifstat)", "timespec[1] = time_stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1666\", 14, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat), sizeof (ifstat), &(mode), sizeof (mode), &(r), sizeof (r)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	2,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	3,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	4,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	5,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	6,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	7,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	8,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	9,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	10,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	11,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	12,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	13,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	14,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	15,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	16,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	17,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	18,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	19,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	20,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	21,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	22,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	23,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	24,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	25,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	26,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	27,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	28,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	29,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	30,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	31,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	32,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	33,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	34,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	35,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	36,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	37,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	38,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	39,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	40,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	41,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	42,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	43,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	44,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	45,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	46,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	47,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	48,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	49,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	50,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	51,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	52,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	53,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	54,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	55,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	56,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	57,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	58,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	59,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	60,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	61,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	62,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	63,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	64,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	65,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	66,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	67,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	68,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	69,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	70,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	71,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	72,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	73,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	74,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	75,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	76,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	77,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	78,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	79,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	80,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	81,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	82,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	83,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	84,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	85,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	86,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	87,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	88,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	89,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	90,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	91,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	92,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	93,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	94,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	95,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	96,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	97,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	98,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	99,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	100,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	101,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	102,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	103,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	104,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	105,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	106,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	107,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	108,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	109,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	110,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	111,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	112,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	113,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	114,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	115,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	116,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	117,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	118,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	119,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	120,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	121,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	122,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	123,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	124,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	125,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	126,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	127,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	128,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	129,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	130,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	131,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	132,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	133,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	134,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	135,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	136,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	137,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	138,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	139,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	140,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	141,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	142,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	143,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	144,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	145,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	146,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	147,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	148,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	149,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	150,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	151,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	152,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	153,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	154,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	155,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	156,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	157,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	158,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	159,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	160,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	161,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	162,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	163,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	164,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	165,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	166,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	167,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	168,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	169,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	170,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	171,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	172,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	173,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	174,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	175,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	176,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	177,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	178,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	179,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	180,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	181,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	182,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	183,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	184,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	185,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	186,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	187,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	188,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	189,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	190,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	191,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	192,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	193,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	194,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	195,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	196,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	197,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	198,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	199,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	200,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	201,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	202,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	203,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	204,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	205,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	206,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	207,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	208,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	209,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	210,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	211,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	212,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	213,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	214,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	215,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	216,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	217,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	218,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	219,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	220,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	221,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	222,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	223,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	224,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	225,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	226,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	227,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	228,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	229,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	230,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	231,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	232,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	233,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	234,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	235,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	236,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	237,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	238,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	239,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	240,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	241,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	242,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	243,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	244,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	245,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	246,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	247,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	248,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	249,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	250,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	251,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	252,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	253,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	254,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	255,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	256,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	257,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	258,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	259,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	260,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	261,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	262,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	263,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	264,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	265,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	266,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	267,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	268,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	269,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	270,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	271,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	272,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	273,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	274,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	275,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	276,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	277,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	278,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	279,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	280,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	281,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	282,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	283,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	284,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	285,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	286,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	287,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	288,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	289,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	290,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	291,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	292,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	293,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	294,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	295,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	296,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	297,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	298,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	299,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	300,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	301,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	302,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	303,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	304,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	305,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	306,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	307,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	308,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	309,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	310,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	311,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	312,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	313,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	314,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	315,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	316,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	317,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	318,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	319,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	320,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	321,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	322,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	323,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	324,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	325,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	326,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	327,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	328,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	329,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	330,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	331,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	332,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	333,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	334,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	335,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	336,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	337,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	338,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	339,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	340,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	341,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	342,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	343,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	344,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	345,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	346,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	347,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	348,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	349,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	350,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	351,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	352,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	353,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	354,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	355,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	356,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	357,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	358,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	359,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	360,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	361,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	362,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	363,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	364,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	365,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	366,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	367,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	368,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	369,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	370,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	371,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	372,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	373,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	374,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	375,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	376,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	377,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	378,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	379,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	380,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	381,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	382,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	383,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	384,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	385,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	386,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	387,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	388,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	389,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	390,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	391,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	392,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	393,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	394,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	395,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	396,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	397,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	398,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	399,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	400,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	401,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	402,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	403,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	404,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	405,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	406,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	407,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	408,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	409,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	410,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	411,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	412,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	413,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	414,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	415,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	416,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	417,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	418,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	419,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	420,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	421,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	422,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	423,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	424,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	425,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	426,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	427,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	428,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	429,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	430,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	431,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	432,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	433,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	434,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	435,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	436,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	437,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	438,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	439,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	440,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	441,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	442,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	443,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	444,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	445,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	446,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	447,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	448,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	449,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	450,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	451,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	452,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	453,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	454,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	455,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	456,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	457,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	458,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	459,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	460,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	461,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	462,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	463,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	464,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	465,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	466,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	467,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	468,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	469,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	470,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	471,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	472,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	473,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	474,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	475,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	476,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	477,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	478,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	479,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	480,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	481,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	482,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	483,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	484,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	485,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	486,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	487,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	488,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	489,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	490,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	491,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	492,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	493,
									"scores":	[-8.79193956002459, -8.79193956002459, -8.9688758500245864, -10.035997834724586, -9.8785299500245856, -9.8785299500245856, -8.9688758500245864, -10.035997834724586, -9.4948135310245867, -9.4948135310245867, -9.8785299500245856, -10.228897440624586, -9.4466327569245863, -10.566265366924588]
								}]
						}, {
							"switch":	83,
							"types":	[[9], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8], []],
							"begin_line":	1666,
							"begin_column":	5,
							"end_line":	1675,
							"end_column":	7,
							"patch_codes":	["if (__is_neg(\"\", \"L1666\", 14, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat), sizeof (ifstat), &(mode), sizeof (mode), &(r), sizeof (r))) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if ((gl_futimens(ofd, ofname, timespec) != 0) || __is_neg(\"\", \"L1666\", 14, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat), sizeof (ifstat), &(mode), sizeof (mode), &(r), sizeof (r))) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if (__lxstat(ofd, ofname, timespec) != 0) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if (__lxstat64(ofd, ofname, timespec) != 0) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if (__xstat(ofd, ofname, timespec) != 0) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if (__xstat64(ofd, ofname, timespec) != 0) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if (dprintf(ofd, ofname, timespec) != 0) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if (vdprintf(ofd, ofname, timespec) != 0) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if ((gl_futimens(ofd, ofname, timespec) != 0) && !__is_neg(\"\", \"L1666\", 14, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat), sizeof (ifstat), &(mode), sizeof (mode), &(r), sizeof (r))) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8122185531281456, -6.8122185531281456, -7.4025083531281464, -7.0896325301281458, -7.5399887531281458, -7.5399887531281458, -7.4025083531281464, -7.0896325301281458, -6.7791137531281453, -6.7791137531281453, -7.5399887531281458, -7.9063236378281445, -6.9956068531281446, -8.0347761711281454]
								}, {
									"case":	2,
									"scores":	[-3.8804120244281459, -3.8804120244281459, -4.4707018244281462, -4.1578260014281456, -4.6081822244281456, -4.6081822244281456, -4.4707018244281462, -4.1578260014281456, -3.8473072244281461, -3.8473072244281461, -4.6081822244281456, -4.9745171091281462, -4.0638003244281462, -5.1029696424281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.8804120244281459, -3.8804120244281459, -4.4707018244281462, -4.1578260014281456, -4.6081822244281456, -4.6081822244281456, -4.4707018244281462, -4.1578260014281456, -3.8473072244281461, -3.8473072244281461, -4.6081822244281456, -4.9745171091281462, -4.0638003244281462, -5.1029696424281461]
								}]
						}, {
							"switch":	84,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1666,
							"begin_column":	5,
							"end_line":	1675,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L1666\", 14, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat), sizeof (ifstat), &(mode), sizeof (mode), &(r), sizeof (r)))\n    if (gl_futimens(ofd, ofname, timespec) != 0) {\n        int e = (*__errno_location());\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = e;\n            perror(ofname);\n        }\n    }\n", "if (!__is_neg(\"\", \"L1666\", 14, &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat), sizeof (ifstat), &(mode), sizeof (mode), &(r), sizeof (r)) && (gl_futimens(ofd, ofname, timespec) != 0)) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3567007269245863, -6.3567007269245863, -6.9469905269245862, -6.6341147039245865, -7.0844709269245865, -7.0844709269245865, -6.9469905269245862, -6.6341147039245865, -6.3235959269245861, -6.3235959269245861, -7.0844709269245865, -7.450805811624587, -6.5400890269245862, -7.5792583449245861]
								}, {
									"case":	2,
									"scores":	[-6.1338123459245857, -6.1338123459245857, -6.7241021459245864, -6.4112263229245858, -6.8615825459245858, -6.8615825459245858, -6.7241021459245864, -6.4112263229245858, -6.1007075459245863, -6.1007075459245863, -6.8615825459245858, -7.2279174306245864, -6.3172006459245864, -7.3563699639245854]
								}]
						}]
				}, {
					"line":	1679,
					"switches":	[{
							"switch":	85,
							"types":	[[], [], [], [], [494], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [], [], [], [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], [], [], [], [], [], []],
							"begin_line":	1680,
							"begin_column":	3,
							"end_line":	1680,
							"end_column":	3,
							"patch_codes":	["memset(&ifstat->__glibc_reserved, 0, sizeof (*(&ifstat->__glibc_reserved)))", "memset(&ifstat->__pad0, 0, sizeof (*(&ifstat->__pad0)))", "memset(&ifstat->st_atim, 0, sizeof (*(&ifstat->st_atim)))", "memset(&ifstat->st_blksize, 0, sizeof (*(&ifstat->st_blksize)))", "memset(&ifstat->st_blocks, 0, sizeof (*(&ifstat->st_blocks)))", "memset(&ifstat->st_ctim, 0, sizeof (*(&ifstat->st_ctim)))", "memset(&ifstat->st_dev, 0, sizeof (*(&ifstat->st_dev)))", "memset(&ifstat->st_gid, 0, sizeof (*(&ifstat->st_gid)))", "memset(&ifstat->st_ino, 0, sizeof (*(&ifstat->st_ino)))", "memset(&ifstat->st_mode, 0, sizeof (*(&ifstat->st_mode)))", "memset(&ifstat->st_mtim, 0, sizeof (*(&ifstat->st_mtim)))", "memset(&ifstat->st_nlink, 0, sizeof (*(&ifstat->st_nlink)))", "memset(&ifstat->st_rdev, 0, sizeof (*(&ifstat->st_rdev)))", "memset(&ifstat->st_size, 0, sizeof (*(&ifstat->st_size)))", "memset(&ifstat->st_uid, 0, sizeof (*(&ifstat->st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "memset(&timespec[1].tv_nsec, 0, sizeof (*(&timespec[1].tv_nsec)))", "memset(&timespec[1].tv_sec, 0, sizeof (*(&timespec[1].tv_sec)))", "memset(ifstat, 0, sizeof (*(ifstat)))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (3)", "bytes_in = (384)", "bytes_in = (448)", "bytes_in = (504)", "bytes_in = (511)", "bytes_in = (56)", "bytes_in = (64)", "bytes_in = (7)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (3)", "bytes_out = (384)", "bytes_out = (448)", "bytes_out = (504)", "bytes_out = (511)", "bytes_out = (56)", "bytes_out = (64)", "bytes_out = (7)", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (2)", "exit_code = (256)", "exit_code = (3)", "exit_code = (384)", "exit_code = (448)", "exit_code = (504)", "exit_code = (511)", "exit_code = (56)", "exit_code = (64)", "exit_code = (7)", "exit_code = (r)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (3)", "exiting_signal = (384)", "exiting_signal = (448)", "exiting_signal = (504)", "exiting_signal = (511)", "exiting_signal = (56)", "exiting_signal = (64)", "exiting_signal = (7)", "exiting_signal = (r)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (2)", "foreground = (256)", "foreground = (3)", "foreground = (384)", "foreground = (448)", "foreground = (504)", "foreground = (511)", "foreground = (56)", "foreground = (64)", "foreground = (7)", "foreground = (r)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (3)", "header_bytes = (384)", "header_bytes = (448)", "header_bytes = (504)", "header_bytes = (511)", "header_bytes = (56)", "header_bytes = (64)", "header_bytes = (7)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (2)", "ifd = (256)", "ifd = (3)", "ifd = (384)", "ifd = (448)", "ifd = (504)", "ifd = (511)", "ifd = (56)", "ifd = (64)", "ifd = (7)", "ifd = (r)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (3)", "ifile_size = (384)", "ifile_size = (448)", "ifile_size = (504)", "ifile_size = (511)", "ifile_size = (56)", "ifile_size = (64)", "ifile_size = (7)", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (2)", "inptr = (256)", "inptr = (3)", "inptr = (384)", "inptr = (448)", "inptr = (504)", "inptr = (511)", "inptr = (56)", "inptr = (64)", "inptr = (7)", "inptr = (mode)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (2)", "last_member = (256)", "last_member = (3)", "last_member = (384)", "last_member = (448)", "last_member = (504)", "last_member = (511)", "last_member = (56)", "last_member = (64)", "last_member = (7)", "last_member = (r)", "list = (0)", "list = (1)", "list = (128)", "list = (2)", "list = (256)", "list = (3)", "list = (384)", "list = (448)", "list = (504)", "list = (511)", "list = (56)", "list = (64)", "list = (7)", "list = (r)", "method = (0)", "method = (1)", "method = (128)", "method = (2)", "method = (256)", "method = (3)", "method = (384)", "method = (448)", "method = (504)", "method = (511)", "method = (56)", "method = (64)", "method = (7)", "method = (r)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (2)", "no_name = (256)", "no_name = (3)", "no_name = (384)", "no_name = (448)", "no_name = (504)", "no_name = (511)", "no_name = (56)", "no_name = (64)", "no_name = (7)", "no_name = (r)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (2)", "no_time = (256)", "no_time = (3)", "no_time = (384)", "no_time = (448)", "no_time = (504)", "no_time = (511)", "no_time = (56)", "no_time = (64)", "no_time = (7)", "no_time = (r)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (2)", "ofd = (256)", "ofd = (3)", "ofd = (384)", "ofd = (448)", "ofd = (504)", "ofd = (511)", "ofd = (56)", "ofd = (64)", "ofd = (7)", "ofd = (r)", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (2)", "part_nb = (256)", "part_nb = (3)", "part_nb = (384)", "part_nb = (448)", "part_nb = (504)", "part_nb = (511)", "part_nb = (56)", "part_nb = (64)", "part_nb = (7)", "part_nb = (r)", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (2)", "quiet = (256)", "quiet = (3)", "quiet = (384)", "quiet = (448)", "quiet = (504)", "quiet = (511)", "quiet = (56)", "quiet = (64)", "quiet = (7)", "quiet = (r)", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (3)", "remove_ofname_fd = (384)", "remove_ofname_fd = (448)", "remove_ofname_fd = (504)", "remove_ofname_fd = (511)", "remove_ofname_fd = (56)", "remove_ofname_fd = (64)", "remove_ofname_fd = (7)", "remove_ofname_fd = (r)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (3)", "save_orig_name = (384)", "save_orig_name = (448)", "save_orig_name = (504)", "save_orig_name = (511)", "save_orig_name = (56)", "save_orig_name = (64)", "save_orig_name = (7)", "save_orig_name = (r)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (448)", "time_stamp.tv_nsec = (504)", "time_stamp.tv_nsec = (511)", "time_stamp.tv_nsec = (56)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (7)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (448)", "time_stamp.tv_sec = (504)", "time_stamp.tv_sec = (511)", "time_stamp.tv_sec = (56)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (7)", "timespec[0] = get_stat_atime((ifstat))", "timespec[1] = get_stat_mtime((ifstat))", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (3)", "to_stdout = (384)", "to_stdout = (448)", "to_stdout = (504)", "to_stdout = (511)", "to_stdout = (56)", "to_stdout = (64)", "to_stdout = (7)", "to_stdout = (r)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (2)", "total_in = (256)", "total_in = (3)", "total_in = (384)", "total_in = (448)", "total_in = (504)", "total_in = (511)", "total_in = (56)", "total_in = (64)", "total_in = (7)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (2)", "total_out = (256)", "total_out = (3)", "total_out = (384)", "total_out = (448)", "total_out = (504)", "total_out = (511)", "total_out = (56)", "total_out = (64)", "total_out = (7)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (2)", "verbose = (256)", "verbose = (3)", "verbose = (384)", "verbose = (448)", "verbose = (504)", "verbose = (511)", "verbose = (56)", "verbose = (64)", "verbose = (7)", "verbose = (r)", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (2)", "z_len = (256)", "z_len = (3)", "z_len = (384)", "z_len = (448)", "z_len = (504)", "z_len = (511)", "z_len = (56)", "z_len = (64)", "z_len = (7)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fchown(ofd, ifstat->st_uid, ifstat->st_gid)", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "r = fchmod(ofd, mode)", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "timespec[0] = get_stat_atime(ifstat)", "timespec[1] = get_stat_mtime(ifstat)", "timespec[1] = time_stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1680\", 25, &(ifstat), sizeof (ifstat), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat->st_uid), sizeof (ifstat->st_uid), &(ifstat->st_gid), sizeof (ifstat->st_gid), &(mode), sizeof (mode), &(r), sizeof (r), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat->st_mode), sizeof (ifstat->st_mode), &(ifstat->st_dev), sizeof (ifstat->st_dev), &(ifstat->st_ino), sizeof (ifstat->st_ino), &(ifstat->st_nlink), sizeof (ifstat->st_nlink), &(ifstat->__pad0), sizeof (ifstat->__pad0), &(ifstat->st_rdev), sizeof (ifstat->st_rdev), &(ifstat->st_size), sizeof (ifstat->st_size), &(ifstat->st_blksize), sizeof (ifstat->st_blksize), &(ifstat->st_blocks), sizeof (ifstat->st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	2,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	3,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	4,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	5,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	6,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	7,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	8,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	9,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	10,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	11,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	12,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	13,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	14,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	15,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	16,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	17,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	18,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	19,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	20,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	21,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	22,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	23,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	24,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	25,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	26,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	27,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	28,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	29,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	30,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	31,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	32,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	33,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	34,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	35,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	36,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	37,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	38,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	39,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	40,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	41,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	42,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	43,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	44,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	45,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	46,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	47,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	48,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	49,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	50,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	51,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	52,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	53,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	54,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	55,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	56,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	57,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	58,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	59,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	60,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	61,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	62,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	63,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	64,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	65,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	66,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	67,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	68,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	69,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	70,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	71,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	72,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	73,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	74,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	75,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	76,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	77,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	78,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	79,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	80,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	81,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	82,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	83,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	84,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	85,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	86,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	87,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	88,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	89,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	90,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	91,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	92,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	93,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	94,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	95,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	96,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	97,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	98,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	99,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	100,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	101,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	102,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	103,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	104,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	105,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	106,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	107,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	108,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	109,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	110,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	111,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	112,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	113,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	114,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	115,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	116,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	117,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	118,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	119,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	120,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	121,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	122,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	123,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	124,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	125,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	126,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	127,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	128,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	129,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	130,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	131,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	132,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	133,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	134,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	135,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	136,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	137,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	138,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	139,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	140,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	141,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	142,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	143,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	144,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	145,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	146,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	147,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	148,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	149,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	150,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	151,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	152,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	153,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	154,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	155,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	156,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	157,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	158,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	159,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	160,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	161,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	162,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	163,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	164,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	165,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	166,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	167,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	168,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	169,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	170,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	171,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	172,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	173,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	174,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	175,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	176,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	177,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	178,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	179,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	180,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	181,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	182,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	183,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	184,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	185,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	186,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	187,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	188,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	189,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	190,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	191,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	192,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	193,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	194,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	195,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	196,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	197,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	198,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	199,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	200,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	201,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	202,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	203,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	204,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	205,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	206,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	207,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	208,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	209,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	210,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	211,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	212,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	213,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	214,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	215,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	216,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	217,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	218,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	219,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	220,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	221,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	222,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	223,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	224,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	225,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	226,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	227,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	228,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	229,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	230,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	231,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	232,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	233,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	234,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	235,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	236,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	237,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	238,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	239,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	240,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	241,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	242,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	243,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	244,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	245,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	246,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	247,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	248,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	249,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	250,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	251,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	252,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	253,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	254,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	255,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	256,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	257,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	258,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	259,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	260,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	261,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	262,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	263,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	264,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	265,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	266,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	267,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	268,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	269,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	270,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	271,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	272,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	273,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	274,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	275,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	276,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	277,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	278,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	279,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	280,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	281,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	282,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	283,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	284,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	285,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	286,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	287,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	288,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	289,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	290,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	291,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	292,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	293,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	294,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	295,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	296,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	297,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	298,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	299,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	300,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	301,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	302,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	303,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	304,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	305,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	306,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	307,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	308,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	309,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	310,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	311,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	312,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	313,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	314,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	315,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	316,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	317,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	318,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	319,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	320,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	321,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	322,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	323,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	324,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	325,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	326,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	327,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	328,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	329,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	330,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	331,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	332,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	333,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	334,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	335,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	336,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	337,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	338,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	339,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	340,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	341,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	342,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	343,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	344,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	345,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	346,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	347,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	348,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	349,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	350,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	351,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	352,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	353,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	354,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	355,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	356,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	357,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	358,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	359,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	360,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	361,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	362,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	363,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	364,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	365,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	366,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	367,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	368,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	369,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	370,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	371,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	372,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	373,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	374,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	375,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	376,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	377,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	378,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	379,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	380,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	381,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	382,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	383,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	384,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	385,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	386,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	387,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	388,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	389,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	390,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	391,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	392,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	393,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	394,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	395,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	396,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	397,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	398,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	399,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	400,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	401,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	402,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	403,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	404,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	405,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	406,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	407,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	408,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	409,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	410,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	411,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	412,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	413,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	414,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	415,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	416,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	417,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	418,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	419,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	420,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	421,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	422,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	423,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	424,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	425,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	426,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	427,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	428,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	429,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	430,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	431,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	432,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	433,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	434,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	435,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	436,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	437,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	438,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	439,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	440,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	441,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	442,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	443,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	444,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	445,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	446,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	447,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	448,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	449,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	450,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	451,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	452,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	453,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	454,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	455,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	456,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	457,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	458,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	459,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	460,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	461,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	462,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	463,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	464,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	465,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	466,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	467,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	468,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	469,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	470,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	471,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	472,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	473,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	474,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	475,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	476,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	477,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	478,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	479,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	480,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	481,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	482,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	483,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	484,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	485,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	486,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	487,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	488,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	489,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	490,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	491,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	492,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	493,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	494,
									"scores":	[-8.442604655496833, -8.2690182445968343, -8.2690182445968343, -8.4463978617968341, -8.4463978617968341, -8.73314847179683, -9.8527810817968344, -9.1650456648968337, -9.1650456648968337, -9.59360233459683, -8.8784567568968331, -9.59360233459683, -8.8784567568968331, -8.7813292458968331, -8.7813292458968331, -9.1650456648968337, -9.4454746617968333, -9.4454746617968333, -9.4454746617968333, -9.4454746617968333, -9.4454746617968333, -9.4454746617968333, -9.4454746617968333, -9.4454746617968333, -9.4454746617968333]
								}]
						}, {
							"switch":	86,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1680,
							"begin_column":	5,
							"end_line":	1680,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L1680\", 25, &(ifstat), sizeof (ifstat), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat->st_uid), sizeof (ifstat->st_uid), &(ifstat->st_gid), sizeof (ifstat->st_gid), &(mode), sizeof (mode), &(r), sizeof (r), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress), &(ifstat->st_mode), sizeof (ifstat->st_mode), &(ifstat->st_dev), sizeof (ifstat->st_dev), &(ifstat->st_ino), sizeof (ifstat->st_ino), &(ifstat->st_nlink), sizeof (ifstat->st_nlink), &(ifstat->__pad0), sizeof (ifstat->__pad0), &(ifstat->st_rdev), sizeof (ifstat->st_rdev), &(ifstat->st_size), sizeof (ifstat->st_size), &(ifstat->st_blksize), sizeof (ifstat->st_blksize), &(ifstat->st_blocks), sizeof (ifstat->st_blocks)))\n    fchown(ofd, ifstat->st_uid, ifstat->st_gid);\n", "{\n}\n", "fchown((0 * mode), ifstat->st_uid, ifstat->st_gid)", "fchown((0 * r), ifstat->st_uid, ifstat->st_gid)", "fchown((ifstat != 0), ifstat->st_uid, ifstat->st_gid)", "fchown((ifstat == 0), ifstat->st_uid, ifstat->st_gid)", "fchown((mode != 0), ifstat->st_uid, ifstat->st_gid)", "fchown((mode != r), ifstat->st_uid, ifstat->st_gid)", "fchown((mode * r), ifstat->st_uid, ifstat->st_gid)", "fchown((mode + 0), ifstat->st_uid, ifstat->st_gid)", "fchown((mode + r), ifstat->st_uid, ifstat->st_gid)", "fchown((mode - 0), ifstat->st_uid, ifstat->st_gid)", "fchown((mode - r), ifstat->st_uid, ifstat->st_gid)", "fchown((mode == 0), ifstat->st_uid, ifstat->st_gid)", "fchown((mode == r), ifstat->st_uid, ifstat->st_gid)", "fchown((r != 0), ifstat->st_uid, ifstat->st_gid)", "fchown((r * mode), ifstat->st_uid, ifstat->st_gid)", "fchown((r + 0), ifstat->st_uid, ifstat->st_gid)", "fchown((r - 0), ifstat->st_uid, ifstat->st_gid)", "fchown((r == 0), ifstat->st_uid, ifstat->st_gid)", "fchown((r), ifstat->st_uid, ifstat->st_gid)", "fchown((timespec != 0), ifstat->st_uid, ifstat->st_gid)", "fchown((timespec == 0), ifstat->st_uid, ifstat->st_gid)", "fchown(ofd, (&ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, (&mode)->st_uid, ifstat->st_gid)", "fchown(ofd, (&r)->st_uid, ifstat->st_gid)", "fchown(ofd, (&timespec)->st_uid, ifstat->st_gid)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (&ifstat)->st_gid)", "fchown(ofd, ifstat->st_uid, (&mode)->st_gid)", "fchown(ofd, ifstat->st_uid, (&r)->st_gid)", "fchown(ofd, ifstat->st_uid, (&timespec)->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5391080414968332, -4.7835873144968337, -4.7835873144968337, -5.6013030217968334, -5.6013030217968334, -4.3143046947968333, -6.5422483127968327, -5.9765682217968328, -5.9765682217968328, -6.4917587414968327, -7.4450329487968325, -6.4917587414968327, -7.4450329487968325, -5.2156932217968333, -5.2156932217968333, -5.9765682217968328, -6.2660466217968329, -6.2660466217968329, -6.2660466217968329, -6.2660466217968329, -6.2660466217968329, -6.2660466217968329, -6.2660466217968329, -6.2660466217968329, -6.2660466217968329]
								}, {
									"case":	2,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	3,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	4,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	5,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	6,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	7,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	8,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	9,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	10,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	11,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	12,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	13,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	14,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	15,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	16,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	17,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	18,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	19,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	20,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	21,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	22,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	23,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	24,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	25,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	26,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	27,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	28,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	29,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	30,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	31,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	32,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	33,
									"scores":	[-5.1443881517968331]
								}]
						}]
				}, {
					"line":	1687,
					"switches":	[{
							"switch":	87,
							"types":	[[], [], [], [], [493], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [], [], [], [], [], []],
							"begin_line":	1688,
							"begin_column":	3,
							"end_line":	1688,
							"end_column":	3,
							"patch_codes":	["memset(&ifstat->__glibc_reserved, 0, sizeof (*(&ifstat->__glibc_reserved)))", "memset(&ifstat->__pad0, 0, sizeof (*(&ifstat->__pad0)))", "memset(&ifstat->st_atim, 0, sizeof (*(&ifstat->st_atim)))", "memset(&ifstat->st_blksize, 0, sizeof (*(&ifstat->st_blksize)))", "memset(&ifstat->st_blocks, 0, sizeof (*(&ifstat->st_blocks)))", "memset(&ifstat->st_ctim, 0, sizeof (*(&ifstat->st_ctim)))", "memset(&ifstat->st_dev, 0, sizeof (*(&ifstat->st_dev)))", "memset(&ifstat->st_gid, 0, sizeof (*(&ifstat->st_gid)))", "memset(&ifstat->st_ino, 0, sizeof (*(&ifstat->st_ino)))", "memset(&ifstat->st_mode, 0, sizeof (*(&ifstat->st_mode)))", "memset(&ifstat->st_mtim, 0, sizeof (*(&ifstat->st_mtim)))", "memset(&ifstat->st_nlink, 0, sizeof (*(&ifstat->st_nlink)))", "memset(&ifstat->st_rdev, 0, sizeof (*(&ifstat->st_rdev)))", "memset(&ifstat->st_size, 0, sizeof (*(&ifstat->st_size)))", "memset(&ifstat->st_uid, 0, sizeof (*(&ifstat->st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "memset(&timespec[1].tv_nsec, 0, sizeof (*(&timespec[1].tv_nsec)))", "memset(&timespec[1].tv_sec, 0, sizeof (*(&timespec[1].tv_sec)))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (3)", "bytes_in = (384)", "bytes_in = (448)", "bytes_in = (504)", "bytes_in = (511)", "bytes_in = (56)", "bytes_in = (64)", "bytes_in = (7)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (3)", "bytes_out = (384)", "bytes_out = (448)", "bytes_out = (504)", "bytes_out = (511)", "bytes_out = (56)", "bytes_out = (64)", "bytes_out = (7)", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (2)", "exit_code = (256)", "exit_code = (3)", "exit_code = (384)", "exit_code = (448)", "exit_code = (504)", "exit_code = (511)", "exit_code = (56)", "exit_code = (64)", "exit_code = (7)", "exit_code = (r)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (3)", "exiting_signal = (384)", "exiting_signal = (448)", "exiting_signal = (504)", "exiting_signal = (511)", "exiting_signal = (56)", "exiting_signal = (64)", "exiting_signal = (7)", "exiting_signal = (r)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (2)", "foreground = (256)", "foreground = (3)", "foreground = (384)", "foreground = (448)", "foreground = (504)", "foreground = (511)", "foreground = (56)", "foreground = (64)", "foreground = (7)", "foreground = (r)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (3)", "header_bytes = (384)", "header_bytes = (448)", "header_bytes = (504)", "header_bytes = (511)", "header_bytes = (56)", "header_bytes = (64)", "header_bytes = (7)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (2)", "ifd = (256)", "ifd = (3)", "ifd = (384)", "ifd = (448)", "ifd = (504)", "ifd = (511)", "ifd = (56)", "ifd = (64)", "ifd = (7)", "ifd = (r)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (3)", "ifile_size = (384)", "ifile_size = (448)", "ifile_size = (504)", "ifile_size = (511)", "ifile_size = (56)", "ifile_size = (64)", "ifile_size = (7)", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (2)", "inptr = (256)", "inptr = (3)", "inptr = (384)", "inptr = (448)", "inptr = (504)", "inptr = (511)", "inptr = (56)", "inptr = (64)", "inptr = (7)", "inptr = (mode)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (2)", "last_member = (256)", "last_member = (3)", "last_member = (384)", "last_member = (448)", "last_member = (504)", "last_member = (511)", "last_member = (56)", "last_member = (64)", "last_member = (7)", "last_member = (r)", "list = (0)", "list = (1)", "list = (128)", "list = (2)", "list = (256)", "list = (3)", "list = (384)", "list = (448)", "list = (504)", "list = (511)", "list = (56)", "list = (64)", "list = (7)", "list = (r)", "method = (0)", "method = (1)", "method = (128)", "method = (2)", "method = (256)", "method = (3)", "method = (384)", "method = (448)", "method = (504)", "method = (511)", "method = (56)", "method = (64)", "method = (7)", "method = (r)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (2)", "no_name = (256)", "no_name = (3)", "no_name = (384)", "no_name = (448)", "no_name = (504)", "no_name = (511)", "no_name = (56)", "no_name = (64)", "no_name = (7)", "no_name = (r)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (2)", "no_time = (256)", "no_time = (3)", "no_time = (384)", "no_time = (448)", "no_time = (504)", "no_time = (511)", "no_time = (56)", "no_time = (64)", "no_time = (7)", "no_time = (r)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (2)", "ofd = (256)", "ofd = (3)", "ofd = (384)", "ofd = (448)", "ofd = (504)", "ofd = (511)", "ofd = (56)", "ofd = (64)", "ofd = (7)", "ofd = (r)", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (2)", "part_nb = (256)", "part_nb = (3)", "part_nb = (384)", "part_nb = (448)", "part_nb = (504)", "part_nb = (511)", "part_nb = (56)", "part_nb = (64)", "part_nb = (7)", "part_nb = (r)", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (2)", "quiet = (256)", "quiet = (3)", "quiet = (384)", "quiet = (448)", "quiet = (504)", "quiet = (511)", "quiet = (56)", "quiet = (64)", "quiet = (7)", "quiet = (r)", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (3)", "remove_ofname_fd = (384)", "remove_ofname_fd = (448)", "remove_ofname_fd = (504)", "remove_ofname_fd = (511)", "remove_ofname_fd = (56)", "remove_ofname_fd = (64)", "remove_ofname_fd = (7)", "remove_ofname_fd = (r)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (3)", "save_orig_name = (384)", "save_orig_name = (448)", "save_orig_name = (504)", "save_orig_name = (511)", "save_orig_name = (56)", "save_orig_name = (64)", "save_orig_name = (7)", "save_orig_name = (r)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (448)", "time_stamp.tv_nsec = (504)", "time_stamp.tv_nsec = (511)", "time_stamp.tv_nsec = (56)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (7)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (448)", "time_stamp.tv_sec = (504)", "time_stamp.tv_sec = (511)", "time_stamp.tv_sec = (56)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (7)", "timespec[0] = get_stat_atime((ifstat))", "timespec[1] = get_stat_mtime((ifstat))", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (3)", "to_stdout = (384)", "to_stdout = (448)", "to_stdout = (504)", "to_stdout = (511)", "to_stdout = (56)", "to_stdout = (64)", "to_stdout = (7)", "to_stdout = (r)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (2)", "total_in = (256)", "total_in = (3)", "total_in = (384)", "total_in = (448)", "total_in = (504)", "total_in = (511)", "total_in = (56)", "total_in = (64)", "total_in = (7)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (2)", "total_out = (256)", "total_out = (3)", "total_out = (384)", "total_out = (448)", "total_out = (504)", "total_out = (511)", "total_out = (56)", "total_out = (64)", "total_out = (7)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (2)", "verbose = (256)", "verbose = (3)", "verbose = (384)", "verbose = (448)", "verbose = (504)", "verbose = (511)", "verbose = (56)", "verbose = (64)", "verbose = (7)", "verbose = (r)", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (2)", "z_len = (256)", "z_len = (3)", "z_len = (384)", "z_len = (448)", "z_len = (504)", "z_len = (511)", "z_len = (56)", "z_len = (64)", "z_len = (7)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fchown(ofd, ifstat->st_uid, ifstat->st_gid)", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "r = fchmod(ofd, mode)", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "timespec[0] = get_stat_atime(ifstat)", "timespec[1] = get_stat_mtime(ifstat)", "timespec[1] = time_stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1688\", 14, &(mode), sizeof (mode), &(r), sizeof (r), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.103982737161795]
								}, {
									"case":	2,
									"scores":	[-5.103982737161795]
								}, {
									"case":	3,
									"scores":	[-5.103982737161795]
								}, {
									"case":	4,
									"scores":	[-5.103982737161795]
								}, {
									"case":	5,
									"scores":	[-5.103982737161795]
								}, {
									"case":	6,
									"scores":	[-5.103982737161795]
								}, {
									"case":	7,
									"scores":	[-5.103982737161795]
								}, {
									"case":	8,
									"scores":	[-5.103982737161795]
								}, {
									"case":	9,
									"scores":	[-5.103982737161795]
								}, {
									"case":	10,
									"scores":	[-5.103982737161795]
								}, {
									"case":	11,
									"scores":	[-5.103982737161795]
								}, {
									"case":	12,
									"scores":	[-5.103982737161795]
								}, {
									"case":	13,
									"scores":	[-5.103982737161795]
								}, {
									"case":	14,
									"scores":	[-5.103982737161795]
								}, {
									"case":	15,
									"scores":	[-5.103982737161795]
								}, {
									"case":	16,
									"scores":	[-5.103982737161795]
								}, {
									"case":	17,
									"scores":	[-5.103982737161795]
								}, {
									"case":	18,
									"scores":	[-5.103982737161795]
								}, {
									"case":	19,
									"scores":	[-5.103982737161795]
								}, {
									"case":	20,
									"scores":	[-5.103982737161795]
								}, {
									"case":	21,
									"scores":	[-5.103982737161795]
								}, {
									"case":	22,
									"scores":	[-5.103982737161795]
								}, {
									"case":	23,
									"scores":	[-5.103982737161795]
								}, {
									"case":	24,
									"scores":	[-5.103982737161795]
								}, {
									"case":	25,
									"scores":	[-5.103982737161795]
								}, {
									"case":	26,
									"scores":	[-5.103982737161795]
								}, {
									"case":	27,
									"scores":	[-5.103982737161795]
								}, {
									"case":	28,
									"scores":	[-5.103982737161795]
								}, {
									"case":	29,
									"scores":	[-5.103982737161795]
								}, {
									"case":	30,
									"scores":	[-5.103982737161795]
								}, {
									"case":	31,
									"scores":	[-5.103982737161795]
								}, {
									"case":	32,
									"scores":	[-5.103982737161795]
								}, {
									"case":	33,
									"scores":	[-5.103982737161795]
								}, {
									"case":	34,
									"scores":	[-5.103982737161795]
								}, {
									"case":	35,
									"scores":	[-5.103982737161795]
								}, {
									"case":	36,
									"scores":	[-5.103982737161795]
								}, {
									"case":	37,
									"scores":	[-5.103982737161795]
								}, {
									"case":	38,
									"scores":	[-5.103982737161795]
								}, {
									"case":	39,
									"scores":	[-5.103982737161795]
								}, {
									"case":	40,
									"scores":	[-5.103982737161795]
								}, {
									"case":	41,
									"scores":	[-5.103982737161795]
								}, {
									"case":	42,
									"scores":	[-5.103982737161795]
								}, {
									"case":	43,
									"scores":	[-5.103982737161795]
								}, {
									"case":	44,
									"scores":	[-5.103982737161795]
								}, {
									"case":	45,
									"scores":	[-5.103982737161795]
								}, {
									"case":	46,
									"scores":	[-5.103982737161795]
								}, {
									"case":	47,
									"scores":	[-5.103982737161795]
								}, {
									"case":	48,
									"scores":	[-5.103982737161795]
								}, {
									"case":	49,
									"scores":	[-5.103982737161795]
								}, {
									"case":	50,
									"scores":	[-5.103982737161795]
								}, {
									"case":	51,
									"scores":	[-5.103982737161795]
								}, {
									"case":	52,
									"scores":	[-5.103982737161795]
								}, {
									"case":	53,
									"scores":	[-5.103982737161795]
								}, {
									"case":	54,
									"scores":	[-5.103982737161795]
								}, {
									"case":	55,
									"scores":	[-5.103982737161795]
								}, {
									"case":	56,
									"scores":	[-5.103982737161795]
								}, {
									"case":	57,
									"scores":	[-5.103982737161795]
								}, {
									"case":	58,
									"scores":	[-5.103982737161795]
								}, {
									"case":	59,
									"scores":	[-5.103982737161795]
								}, {
									"case":	60,
									"scores":	[-5.103982737161795]
								}, {
									"case":	61,
									"scores":	[-5.103982737161795]
								}, {
									"case":	62,
									"scores":	[-5.103982737161795]
								}, {
									"case":	63,
									"scores":	[-5.103982737161795]
								}, {
									"case":	64,
									"scores":	[-5.103982737161795]
								}, {
									"case":	65,
									"scores":	[-5.103982737161795]
								}, {
									"case":	66,
									"scores":	[-5.103982737161795]
								}, {
									"case":	67,
									"scores":	[-5.103982737161795]
								}, {
									"case":	68,
									"scores":	[-5.103982737161795]
								}, {
									"case":	69,
									"scores":	[-5.103982737161795]
								}, {
									"case":	70,
									"scores":	[-5.103982737161795]
								}, {
									"case":	71,
									"scores":	[-5.103982737161795]
								}, {
									"case":	72,
									"scores":	[-5.103982737161795]
								}, {
									"case":	73,
									"scores":	[-5.103982737161795]
								}, {
									"case":	74,
									"scores":	[-5.103982737161795]
								}, {
									"case":	75,
									"scores":	[-5.103982737161795]
								}, {
									"case":	76,
									"scores":	[-5.103982737161795]
								}, {
									"case":	77,
									"scores":	[-5.103982737161795]
								}, {
									"case":	78,
									"scores":	[-5.103982737161795]
								}, {
									"case":	79,
									"scores":	[-5.103982737161795]
								}, {
									"case":	80,
									"scores":	[-5.103982737161795]
								}, {
									"case":	81,
									"scores":	[-5.103982737161795]
								}, {
									"case":	82,
									"scores":	[-5.103982737161795]
								}, {
									"case":	83,
									"scores":	[-5.103982737161795]
								}, {
									"case":	84,
									"scores":	[-5.103982737161795]
								}, {
									"case":	85,
									"scores":	[-5.103982737161795]
								}, {
									"case":	86,
									"scores":	[-5.103982737161795]
								}, {
									"case":	87,
									"scores":	[-5.103982737161795]
								}, {
									"case":	88,
									"scores":	[-5.103982737161795]
								}, {
									"case":	89,
									"scores":	[-5.103982737161795]
								}, {
									"case":	90,
									"scores":	[-5.103982737161795]
								}, {
									"case":	91,
									"scores":	[-5.103982737161795]
								}, {
									"case":	92,
									"scores":	[-5.103982737161795]
								}, {
									"case":	93,
									"scores":	[-5.103982737161795]
								}, {
									"case":	94,
									"scores":	[-5.103982737161795]
								}, {
									"case":	95,
									"scores":	[-5.103982737161795]
								}, {
									"case":	96,
									"scores":	[-5.103982737161795]
								}, {
									"case":	97,
									"scores":	[-5.103982737161795]
								}, {
									"case":	98,
									"scores":	[-5.103982737161795]
								}, {
									"case":	99,
									"scores":	[-5.103982737161795]
								}, {
									"case":	100,
									"scores":	[-5.103982737161795]
								}, {
									"case":	101,
									"scores":	[-5.103982737161795]
								}, {
									"case":	102,
									"scores":	[-5.103982737161795]
								}, {
									"case":	103,
									"scores":	[-5.103982737161795]
								}, {
									"case":	104,
									"scores":	[-5.103982737161795]
								}, {
									"case":	105,
									"scores":	[-5.103982737161795]
								}, {
									"case":	106,
									"scores":	[-5.103982737161795]
								}, {
									"case":	107,
									"scores":	[-5.103982737161795]
								}, {
									"case":	108,
									"scores":	[-5.103982737161795]
								}, {
									"case":	109,
									"scores":	[-5.103982737161795]
								}, {
									"case":	110,
									"scores":	[-5.103982737161795]
								}, {
									"case":	111,
									"scores":	[-5.103982737161795]
								}, {
									"case":	112,
									"scores":	[-5.103982737161795]
								}, {
									"case":	113,
									"scores":	[-5.103982737161795]
								}, {
									"case":	114,
									"scores":	[-5.103982737161795]
								}, {
									"case":	115,
									"scores":	[-5.103982737161795]
								}, {
									"case":	116,
									"scores":	[-5.103982737161795]
								}, {
									"case":	117,
									"scores":	[-5.103982737161795]
								}, {
									"case":	118,
									"scores":	[-5.103982737161795]
								}, {
									"case":	119,
									"scores":	[-5.103982737161795]
								}, {
									"case":	120,
									"scores":	[-5.103982737161795]
								}, {
									"case":	121,
									"scores":	[-5.103982737161795]
								}, {
									"case":	122,
									"scores":	[-5.103982737161795]
								}, {
									"case":	123,
									"scores":	[-5.103982737161795]
								}, {
									"case":	124,
									"scores":	[-5.103982737161795]
								}, {
									"case":	125,
									"scores":	[-5.103982737161795]
								}, {
									"case":	126,
									"scores":	[-5.103982737161795]
								}, {
									"case":	127,
									"scores":	[-5.103982737161795]
								}, {
									"case":	128,
									"scores":	[-5.103982737161795]
								}, {
									"case":	129,
									"scores":	[-5.103982737161795]
								}, {
									"case":	130,
									"scores":	[-5.103982737161795]
								}, {
									"case":	131,
									"scores":	[-5.103982737161795]
								}, {
									"case":	132,
									"scores":	[-5.103982737161795]
								}, {
									"case":	133,
									"scores":	[-5.103982737161795]
								}, {
									"case":	134,
									"scores":	[-5.103982737161795]
								}, {
									"case":	135,
									"scores":	[-5.103982737161795]
								}, {
									"case":	136,
									"scores":	[-5.103982737161795]
								}, {
									"case":	137,
									"scores":	[-5.103982737161795]
								}, {
									"case":	138,
									"scores":	[-5.103982737161795]
								}, {
									"case":	139,
									"scores":	[-5.103982737161795]
								}, {
									"case":	140,
									"scores":	[-5.103982737161795]
								}, {
									"case":	141,
									"scores":	[-5.103982737161795]
								}, {
									"case":	142,
									"scores":	[-5.103982737161795]
								}, {
									"case":	143,
									"scores":	[-5.103982737161795]
								}, {
									"case":	144,
									"scores":	[-5.103982737161795]
								}, {
									"case":	145,
									"scores":	[-5.103982737161795]
								}, {
									"case":	146,
									"scores":	[-5.103982737161795]
								}, {
									"case":	147,
									"scores":	[-5.103982737161795]
								}, {
									"case":	148,
									"scores":	[-5.103982737161795]
								}, {
									"case":	149,
									"scores":	[-5.103982737161795]
								}, {
									"case":	150,
									"scores":	[-5.103982737161795]
								}, {
									"case":	151,
									"scores":	[-5.103982737161795]
								}, {
									"case":	152,
									"scores":	[-5.103982737161795]
								}, {
									"case":	153,
									"scores":	[-5.103982737161795]
								}, {
									"case":	154,
									"scores":	[-5.103982737161795]
								}, {
									"case":	155,
									"scores":	[-5.103982737161795]
								}, {
									"case":	156,
									"scores":	[-5.103982737161795]
								}, {
									"case":	157,
									"scores":	[-5.103982737161795]
								}, {
									"case":	158,
									"scores":	[-5.103982737161795]
								}, {
									"case":	159,
									"scores":	[-5.103982737161795]
								}, {
									"case":	160,
									"scores":	[-5.103982737161795]
								}, {
									"case":	161,
									"scores":	[-5.103982737161795]
								}, {
									"case":	162,
									"scores":	[-5.103982737161795]
								}, {
									"case":	163,
									"scores":	[-5.103982737161795]
								}, {
									"case":	164,
									"scores":	[-5.103982737161795]
								}, {
									"case":	165,
									"scores":	[-5.103982737161795]
								}, {
									"case":	166,
									"scores":	[-5.103982737161795]
								}, {
									"case":	167,
									"scores":	[-5.103982737161795]
								}, {
									"case":	168,
									"scores":	[-5.103982737161795]
								}, {
									"case":	169,
									"scores":	[-5.103982737161795]
								}, {
									"case":	170,
									"scores":	[-5.103982737161795]
								}, {
									"case":	171,
									"scores":	[-5.103982737161795]
								}, {
									"case":	172,
									"scores":	[-5.103982737161795]
								}, {
									"case":	173,
									"scores":	[-5.103982737161795]
								}, {
									"case":	174,
									"scores":	[-5.103982737161795]
								}, {
									"case":	175,
									"scores":	[-5.103982737161795]
								}, {
									"case":	176,
									"scores":	[-5.103982737161795]
								}, {
									"case":	177,
									"scores":	[-5.103982737161795]
								}, {
									"case":	178,
									"scores":	[-5.103982737161795]
								}, {
									"case":	179,
									"scores":	[-5.103982737161795]
								}, {
									"case":	180,
									"scores":	[-5.103982737161795]
								}, {
									"case":	181,
									"scores":	[-5.103982737161795]
								}, {
									"case":	182,
									"scores":	[-5.103982737161795]
								}, {
									"case":	183,
									"scores":	[-5.103982737161795]
								}, {
									"case":	184,
									"scores":	[-5.103982737161795]
								}, {
									"case":	185,
									"scores":	[-5.103982737161795]
								}, {
									"case":	186,
									"scores":	[-5.103982737161795]
								}, {
									"case":	187,
									"scores":	[-5.103982737161795]
								}, {
									"case":	188,
									"scores":	[-5.103982737161795]
								}, {
									"case":	189,
									"scores":	[-5.103982737161795]
								}, {
									"case":	190,
									"scores":	[-5.103982737161795]
								}, {
									"case":	191,
									"scores":	[-5.103982737161795]
								}, {
									"case":	192,
									"scores":	[-5.103982737161795]
								}, {
									"case":	193,
									"scores":	[-5.103982737161795]
								}, {
									"case":	194,
									"scores":	[-5.103982737161795]
								}, {
									"case":	195,
									"scores":	[-5.103982737161795]
								}, {
									"case":	196,
									"scores":	[-5.103982737161795]
								}, {
									"case":	197,
									"scores":	[-5.103982737161795]
								}, {
									"case":	198,
									"scores":	[-5.103982737161795]
								}, {
									"case":	199,
									"scores":	[-5.103982737161795]
								}, {
									"case":	200,
									"scores":	[-5.103982737161795]
								}, {
									"case":	201,
									"scores":	[-5.103982737161795]
								}, {
									"case":	202,
									"scores":	[-5.103982737161795]
								}, {
									"case":	203,
									"scores":	[-5.103982737161795]
								}, {
									"case":	204,
									"scores":	[-5.103982737161795]
								}, {
									"case":	205,
									"scores":	[-5.103982737161795]
								}, {
									"case":	206,
									"scores":	[-5.103982737161795]
								}, {
									"case":	207,
									"scores":	[-5.103982737161795]
								}, {
									"case":	208,
									"scores":	[-5.103982737161795]
								}, {
									"case":	209,
									"scores":	[-5.103982737161795]
								}, {
									"case":	210,
									"scores":	[-5.103982737161795]
								}, {
									"case":	211,
									"scores":	[-5.103982737161795]
								}, {
									"case":	212,
									"scores":	[-5.103982737161795]
								}, {
									"case":	213,
									"scores":	[-5.103982737161795]
								}, {
									"case":	214,
									"scores":	[-5.103982737161795]
								}, {
									"case":	215,
									"scores":	[-5.103982737161795]
								}, {
									"case":	216,
									"scores":	[-5.103982737161795]
								}, {
									"case":	217,
									"scores":	[-5.103982737161795]
								}, {
									"case":	218,
									"scores":	[-5.103982737161795]
								}, {
									"case":	219,
									"scores":	[-5.103982737161795]
								}, {
									"case":	220,
									"scores":	[-5.103982737161795]
								}, {
									"case":	221,
									"scores":	[-5.103982737161795]
								}, {
									"case":	222,
									"scores":	[-5.103982737161795]
								}, {
									"case":	223,
									"scores":	[-5.103982737161795]
								}, {
									"case":	224,
									"scores":	[-5.103982737161795]
								}, {
									"case":	225,
									"scores":	[-5.103982737161795]
								}, {
									"case":	226,
									"scores":	[-5.103982737161795]
								}, {
									"case":	227,
									"scores":	[-5.103982737161795]
								}, {
									"case":	228,
									"scores":	[-5.103982737161795]
								}, {
									"case":	229,
									"scores":	[-5.103982737161795]
								}, {
									"case":	230,
									"scores":	[-5.103982737161795]
								}, {
									"case":	231,
									"scores":	[-5.103982737161795]
								}, {
									"case":	232,
									"scores":	[-5.103982737161795]
								}, {
									"case":	233,
									"scores":	[-5.103982737161795]
								}, {
									"case":	234,
									"scores":	[-5.103982737161795]
								}, {
									"case":	235,
									"scores":	[-5.103982737161795]
								}, {
									"case":	236,
									"scores":	[-5.103982737161795]
								}, {
									"case":	237,
									"scores":	[-5.103982737161795]
								}, {
									"case":	238,
									"scores":	[-5.103982737161795]
								}, {
									"case":	239,
									"scores":	[-5.103982737161795]
								}, {
									"case":	240,
									"scores":	[-5.103982737161795]
								}, {
									"case":	241,
									"scores":	[-5.103982737161795]
								}, {
									"case":	242,
									"scores":	[-5.103982737161795]
								}, {
									"case":	243,
									"scores":	[-5.103982737161795]
								}, {
									"case":	244,
									"scores":	[-5.103982737161795]
								}, {
									"case":	245,
									"scores":	[-5.103982737161795]
								}, {
									"case":	246,
									"scores":	[-5.103982737161795]
								}, {
									"case":	247,
									"scores":	[-5.103982737161795]
								}, {
									"case":	248,
									"scores":	[-5.103982737161795]
								}, {
									"case":	249,
									"scores":	[-5.103982737161795]
								}, {
									"case":	250,
									"scores":	[-5.103982737161795]
								}, {
									"case":	251,
									"scores":	[-5.103982737161795]
								}, {
									"case":	252,
									"scores":	[-5.103982737161795]
								}, {
									"case":	253,
									"scores":	[-5.103982737161795]
								}, {
									"case":	254,
									"scores":	[-5.103982737161795]
								}, {
									"case":	255,
									"scores":	[-5.103982737161795]
								}, {
									"case":	256,
									"scores":	[-5.103982737161795]
								}, {
									"case":	257,
									"scores":	[-5.103982737161795]
								}, {
									"case":	258,
									"scores":	[-5.103982737161795]
								}, {
									"case":	259,
									"scores":	[-5.103982737161795]
								}, {
									"case":	260,
									"scores":	[-5.103982737161795]
								}, {
									"case":	261,
									"scores":	[-5.103982737161795]
								}, {
									"case":	262,
									"scores":	[-5.103982737161795]
								}, {
									"case":	263,
									"scores":	[-5.103982737161795]
								}, {
									"case":	264,
									"scores":	[-5.103982737161795]
								}, {
									"case":	265,
									"scores":	[-5.103982737161795]
								}, {
									"case":	266,
									"scores":	[-5.103982737161795]
								}, {
									"case":	267,
									"scores":	[-5.103982737161795]
								}, {
									"case":	268,
									"scores":	[-5.103982737161795]
								}, {
									"case":	269,
									"scores":	[-5.103982737161795]
								}, {
									"case":	270,
									"scores":	[-5.103982737161795]
								}, {
									"case":	271,
									"scores":	[-5.103982737161795]
								}, {
									"case":	272,
									"scores":	[-5.103982737161795]
								}, {
									"case":	273,
									"scores":	[-5.103982737161795]
								}, {
									"case":	274,
									"scores":	[-5.103982737161795]
								}, {
									"case":	275,
									"scores":	[-5.103982737161795]
								}, {
									"case":	276,
									"scores":	[-5.103982737161795]
								}, {
									"case":	277,
									"scores":	[-5.103982737161795]
								}, {
									"case":	278,
									"scores":	[-5.103982737161795]
								}, {
									"case":	279,
									"scores":	[-5.103982737161795]
								}, {
									"case":	280,
									"scores":	[-5.103982737161795]
								}, {
									"case":	281,
									"scores":	[-5.103982737161795]
								}, {
									"case":	282,
									"scores":	[-5.103982737161795]
								}, {
									"case":	283,
									"scores":	[-5.103982737161795]
								}, {
									"case":	284,
									"scores":	[-5.103982737161795]
								}, {
									"case":	285,
									"scores":	[-5.103982737161795]
								}, {
									"case":	286,
									"scores":	[-5.103982737161795]
								}, {
									"case":	287,
									"scores":	[-5.103982737161795]
								}, {
									"case":	288,
									"scores":	[-5.103982737161795]
								}, {
									"case":	289,
									"scores":	[-5.103982737161795]
								}, {
									"case":	290,
									"scores":	[-5.103982737161795]
								}, {
									"case":	291,
									"scores":	[-5.103982737161795]
								}, {
									"case":	292,
									"scores":	[-5.103982737161795]
								}, {
									"case":	293,
									"scores":	[-5.103982737161795]
								}, {
									"case":	294,
									"scores":	[-5.103982737161795]
								}, {
									"case":	295,
									"scores":	[-5.103982737161795]
								}, {
									"case":	296,
									"scores":	[-5.103982737161795]
								}, {
									"case":	297,
									"scores":	[-5.103982737161795]
								}, {
									"case":	298,
									"scores":	[-5.103982737161795]
								}, {
									"case":	299,
									"scores":	[-5.103982737161795]
								}, {
									"case":	300,
									"scores":	[-5.103982737161795]
								}, {
									"case":	301,
									"scores":	[-5.103982737161795]
								}, {
									"case":	302,
									"scores":	[-5.103982737161795]
								}, {
									"case":	303,
									"scores":	[-5.103982737161795]
								}, {
									"case":	304,
									"scores":	[-5.103982737161795]
								}, {
									"case":	305,
									"scores":	[-5.103982737161795]
								}, {
									"case":	306,
									"scores":	[-5.103982737161795]
								}, {
									"case":	307,
									"scores":	[-5.103982737161795]
								}, {
									"case":	308,
									"scores":	[-5.103982737161795]
								}, {
									"case":	309,
									"scores":	[-5.103982737161795]
								}, {
									"case":	310,
									"scores":	[-5.103982737161795]
								}, {
									"case":	311,
									"scores":	[-5.103982737161795]
								}, {
									"case":	312,
									"scores":	[-5.103982737161795]
								}, {
									"case":	313,
									"scores":	[-5.103982737161795]
								}, {
									"case":	314,
									"scores":	[-5.103982737161795]
								}, {
									"case":	315,
									"scores":	[-5.103982737161795]
								}, {
									"case":	316,
									"scores":	[-5.103982737161795]
								}, {
									"case":	317,
									"scores":	[-5.103982737161795]
								}, {
									"case":	318,
									"scores":	[-5.103982737161795]
								}, {
									"case":	319,
									"scores":	[-5.103982737161795]
								}, {
									"case":	320,
									"scores":	[-5.103982737161795]
								}, {
									"case":	321,
									"scores":	[-5.103982737161795]
								}, {
									"case":	322,
									"scores":	[-5.103982737161795]
								}, {
									"case":	323,
									"scores":	[-5.103982737161795]
								}, {
									"case":	324,
									"scores":	[-5.103982737161795]
								}, {
									"case":	325,
									"scores":	[-5.103982737161795]
								}, {
									"case":	326,
									"scores":	[-5.103982737161795]
								}, {
									"case":	327,
									"scores":	[-5.103982737161795]
								}, {
									"case":	328,
									"scores":	[-5.103982737161795]
								}, {
									"case":	329,
									"scores":	[-5.103982737161795]
								}, {
									"case":	330,
									"scores":	[-5.103982737161795]
								}, {
									"case":	331,
									"scores":	[-5.103982737161795]
								}, {
									"case":	332,
									"scores":	[-5.103982737161795]
								}, {
									"case":	333,
									"scores":	[-5.103982737161795]
								}, {
									"case":	334,
									"scores":	[-5.103982737161795]
								}, {
									"case":	335,
									"scores":	[-5.103982737161795]
								}, {
									"case":	336,
									"scores":	[-5.103982737161795]
								}, {
									"case":	337,
									"scores":	[-5.103982737161795]
								}, {
									"case":	338,
									"scores":	[-5.103982737161795]
								}, {
									"case":	339,
									"scores":	[-5.103982737161795]
								}, {
									"case":	340,
									"scores":	[-5.103982737161795]
								}, {
									"case":	341,
									"scores":	[-5.103982737161795]
								}, {
									"case":	342,
									"scores":	[-5.103982737161795]
								}, {
									"case":	343,
									"scores":	[-5.103982737161795]
								}, {
									"case":	344,
									"scores":	[-5.103982737161795]
								}, {
									"case":	345,
									"scores":	[-5.103982737161795]
								}, {
									"case":	346,
									"scores":	[-5.103982737161795]
								}, {
									"case":	347,
									"scores":	[-5.103982737161795]
								}, {
									"case":	348,
									"scores":	[-5.103982737161795]
								}, {
									"case":	349,
									"scores":	[-5.103982737161795]
								}, {
									"case":	350,
									"scores":	[-5.103982737161795]
								}, {
									"case":	351,
									"scores":	[-5.103982737161795]
								}, {
									"case":	352,
									"scores":	[-5.103982737161795]
								}, {
									"case":	353,
									"scores":	[-5.103982737161795]
								}, {
									"case":	354,
									"scores":	[-5.103982737161795]
								}, {
									"case":	355,
									"scores":	[-5.103982737161795]
								}, {
									"case":	356,
									"scores":	[-5.103982737161795]
								}, {
									"case":	357,
									"scores":	[-5.103982737161795]
								}, {
									"case":	358,
									"scores":	[-5.103982737161795]
								}, {
									"case":	359,
									"scores":	[-5.103982737161795]
								}, {
									"case":	360,
									"scores":	[-5.103982737161795]
								}, {
									"case":	361,
									"scores":	[-5.103982737161795]
								}, {
									"case":	362,
									"scores":	[-5.103982737161795]
								}, {
									"case":	363,
									"scores":	[-5.103982737161795]
								}, {
									"case":	364,
									"scores":	[-5.103982737161795]
								}, {
									"case":	365,
									"scores":	[-5.103982737161795]
								}, {
									"case":	366,
									"scores":	[-5.103982737161795]
								}, {
									"case":	367,
									"scores":	[-5.103982737161795]
								}, {
									"case":	368,
									"scores":	[-5.103982737161795]
								}, {
									"case":	369,
									"scores":	[-5.103982737161795]
								}, {
									"case":	370,
									"scores":	[-5.103982737161795]
								}, {
									"case":	371,
									"scores":	[-5.103982737161795]
								}, {
									"case":	372,
									"scores":	[-5.103982737161795]
								}, {
									"case":	373,
									"scores":	[-5.103982737161795]
								}, {
									"case":	374,
									"scores":	[-5.103982737161795]
								}, {
									"case":	375,
									"scores":	[-5.103982737161795]
								}, {
									"case":	376,
									"scores":	[-5.103982737161795]
								}, {
									"case":	377,
									"scores":	[-5.103982737161795]
								}, {
									"case":	378,
									"scores":	[-5.103982737161795]
								}, {
									"case":	379,
									"scores":	[-5.103982737161795]
								}, {
									"case":	380,
									"scores":	[-5.103982737161795]
								}, {
									"case":	381,
									"scores":	[-5.103982737161795]
								}, {
									"case":	382,
									"scores":	[-5.103982737161795]
								}, {
									"case":	383,
									"scores":	[-5.103982737161795]
								}, {
									"case":	384,
									"scores":	[-5.103982737161795]
								}, {
									"case":	385,
									"scores":	[-5.103982737161795]
								}, {
									"case":	386,
									"scores":	[-5.103982737161795]
								}, {
									"case":	387,
									"scores":	[-5.103982737161795]
								}, {
									"case":	388,
									"scores":	[-5.103982737161795]
								}, {
									"case":	389,
									"scores":	[-5.103982737161795]
								}, {
									"case":	390,
									"scores":	[-5.103982737161795]
								}, {
									"case":	391,
									"scores":	[-5.103982737161795]
								}, {
									"case":	392,
									"scores":	[-5.103982737161795]
								}, {
									"case":	393,
									"scores":	[-5.103982737161795]
								}, {
									"case":	394,
									"scores":	[-5.103982737161795]
								}, {
									"case":	395,
									"scores":	[-5.103982737161795]
								}, {
									"case":	396,
									"scores":	[-5.103982737161795]
								}, {
									"case":	397,
									"scores":	[-5.103982737161795]
								}, {
									"case":	398,
									"scores":	[-5.103982737161795]
								}, {
									"case":	399,
									"scores":	[-5.103982737161795]
								}, {
									"case":	400,
									"scores":	[-5.103982737161795]
								}, {
									"case":	401,
									"scores":	[-5.103982737161795]
								}, {
									"case":	402,
									"scores":	[-5.103982737161795]
								}, {
									"case":	403,
									"scores":	[-5.103982737161795]
								}, {
									"case":	404,
									"scores":	[-5.103982737161795]
								}, {
									"case":	405,
									"scores":	[-5.103982737161795]
								}, {
									"case":	406,
									"scores":	[-5.103982737161795]
								}, {
									"case":	407,
									"scores":	[-5.103982737161795]
								}, {
									"case":	408,
									"scores":	[-5.103982737161795]
								}, {
									"case":	409,
									"scores":	[-5.103982737161795]
								}, {
									"case":	410,
									"scores":	[-5.103982737161795]
								}, {
									"case":	411,
									"scores":	[-5.103982737161795]
								}, {
									"case":	412,
									"scores":	[-5.103982737161795]
								}, {
									"case":	413,
									"scores":	[-5.103982737161795]
								}, {
									"case":	414,
									"scores":	[-5.103982737161795]
								}, {
									"case":	415,
									"scores":	[-5.103982737161795]
								}, {
									"case":	416,
									"scores":	[-5.103982737161795]
								}, {
									"case":	417,
									"scores":	[-5.103982737161795]
								}, {
									"case":	418,
									"scores":	[-5.103982737161795]
								}, {
									"case":	419,
									"scores":	[-5.103982737161795]
								}, {
									"case":	420,
									"scores":	[-5.103982737161795]
								}, {
									"case":	421,
									"scores":	[-5.103982737161795]
								}, {
									"case":	422,
									"scores":	[-5.103982737161795]
								}, {
									"case":	423,
									"scores":	[-5.103982737161795]
								}, {
									"case":	424,
									"scores":	[-5.103982737161795]
								}, {
									"case":	425,
									"scores":	[-5.103982737161795]
								}, {
									"case":	426,
									"scores":	[-5.103982737161795]
								}, {
									"case":	427,
									"scores":	[-5.103982737161795]
								}, {
									"case":	428,
									"scores":	[-5.103982737161795]
								}, {
									"case":	429,
									"scores":	[-5.103982737161795]
								}, {
									"case":	430,
									"scores":	[-5.103982737161795]
								}, {
									"case":	431,
									"scores":	[-5.103982737161795]
								}, {
									"case":	432,
									"scores":	[-5.103982737161795]
								}, {
									"case":	433,
									"scores":	[-5.103982737161795]
								}, {
									"case":	434,
									"scores":	[-5.103982737161795]
								}, {
									"case":	435,
									"scores":	[-5.103982737161795]
								}, {
									"case":	436,
									"scores":	[-5.103982737161795]
								}, {
									"case":	437,
									"scores":	[-5.103982737161795]
								}, {
									"case":	438,
									"scores":	[-5.103982737161795]
								}, {
									"case":	439,
									"scores":	[-5.103982737161795]
								}, {
									"case":	440,
									"scores":	[-5.103982737161795]
								}, {
									"case":	441,
									"scores":	[-5.103982737161795]
								}, {
									"case":	442,
									"scores":	[-5.103982737161795]
								}, {
									"case":	443,
									"scores":	[-5.103982737161795]
								}, {
									"case":	444,
									"scores":	[-5.103982737161795]
								}, {
									"case":	445,
									"scores":	[-5.103982737161795]
								}, {
									"case":	446,
									"scores":	[-5.103982737161795]
								}, {
									"case":	447,
									"scores":	[-5.103982737161795]
								}, {
									"case":	448,
									"scores":	[-5.103982737161795]
								}, {
									"case":	449,
									"scores":	[-5.103982737161795]
								}, {
									"case":	450,
									"scores":	[-5.103982737161795]
								}, {
									"case":	451,
									"scores":	[-5.103982737161795]
								}, {
									"case":	452,
									"scores":	[-5.103982737161795]
								}, {
									"case":	453,
									"scores":	[-5.103982737161795]
								}, {
									"case":	454,
									"scores":	[-5.103982737161795]
								}, {
									"case":	455,
									"scores":	[-5.103982737161795]
								}, {
									"case":	456,
									"scores":	[-5.103982737161795]
								}, {
									"case":	457,
									"scores":	[-5.103982737161795]
								}, {
									"case":	458,
									"scores":	[-5.103982737161795]
								}, {
									"case":	459,
									"scores":	[-5.103982737161795]
								}, {
									"case":	460,
									"scores":	[-5.103982737161795]
								}, {
									"case":	461,
									"scores":	[-5.103982737161795]
								}, {
									"case":	462,
									"scores":	[-5.103982737161795]
								}, {
									"case":	463,
									"scores":	[-5.103982737161795]
								}, {
									"case":	464,
									"scores":	[-5.103982737161795]
								}, {
									"case":	465,
									"scores":	[-5.103982737161795]
								}, {
									"case":	466,
									"scores":	[-5.103982737161795]
								}, {
									"case":	467,
									"scores":	[-5.103982737161795]
								}, {
									"case":	468,
									"scores":	[-5.103982737161795]
								}, {
									"case":	469,
									"scores":	[-5.103982737161795]
								}, {
									"case":	470,
									"scores":	[-5.103982737161795]
								}, {
									"case":	471,
									"scores":	[-5.103982737161795]
								}, {
									"case":	472,
									"scores":	[-5.103982737161795]
								}, {
									"case":	473,
									"scores":	[-5.103982737161795]
								}, {
									"case":	474,
									"scores":	[-5.103982737161795]
								}, {
									"case":	475,
									"scores":	[-5.103982737161795]
								}, {
									"case":	476,
									"scores":	[-5.103982737161795]
								}, {
									"case":	477,
									"scores":	[-5.103982737161795]
								}, {
									"case":	478,
									"scores":	[-5.103982737161795]
								}, {
									"case":	479,
									"scores":	[-5.103982737161795]
								}, {
									"case":	480,
									"scores":	[-5.103982737161795]
								}, {
									"case":	481,
									"scores":	[-5.103982737161795]
								}, {
									"case":	482,
									"scores":	[-5.103982737161795]
								}, {
									"case":	483,
									"scores":	[-5.103982737161795]
								}, {
									"case":	484,
									"scores":	[-5.103982737161795]
								}, {
									"case":	485,
									"scores":	[-5.103982737161795]
								}, {
									"case":	486,
									"scores":	[-5.103982737161795]
								}, {
									"case":	487,
									"scores":	[-5.103982737161795]
								}, {
									"case":	488,
									"scores":	[-5.103982737161795]
								}, {
									"case":	489,
									"scores":	[-5.103982737161795]
								}, {
									"case":	490,
									"scores":	[-5.103982737161795]
								}, {
									"case":	491,
									"scores":	[-5.103982737161795]
								}, {
									"case":	492,
									"scores":	[-5.103982737161795]
								}, {
									"case":	493,
									"scores":	[-6.0472874471617954, -8.5199985643617957, -6.730805019961795, -6.730805019961795, -8.8332061099617949, -8.1180605322617954, -8.4046494402617959, -8.4046494402617959, -8.8332061099617949, -8.1180605322617954, -9.045924177161794, -8.0209330212617953, -8.0209330212617953, -8.4046494402617959]
								}]
						}, {
							"switch":	88,
							"types":	[[], [], [1], [], [], [], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], [], [], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [19]],
							"begin_line":	1688,
							"begin_column":	5,
							"end_line":	1688,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L1688\", 14, &(mode), sizeof (mode), &(r), sizeof (r), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress)))\n    r = fchmod(ofd, mode);\n", "fchown(ofd, mode, 0)", "fchown(ofd, mode, 1)", "fchown(ofd, mode, 128)", "fchown(ofd, mode, 2)", "fchown(ofd, mode, 256)", "fchown(ofd, mode, 3)", "fchown(ofd, mode, 384)", "fchown(ofd, mode, 448)", "fchown(ofd, mode, 504)", "fchown(ofd, mode, 511)", "fchown(ofd, mode, 56)", "fchown(ofd, mode, 64)", "fchown(ofd, mode, 7)", "fchown(ofd, mode, inptr)", "fchown(ofd, mode, insize)", "fchown(ofd, mode, mode)", "fchown(ofd, mode, outcnt)", "{\n}\n", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "r = fchmod((0 * mode), mode)", "r = fchmod((0 * r), mode)", "r = fchmod((ifstat != 0), mode)", "r = fchmod((ifstat == 0), mode)", "r = fchmod((mode != 0), mode)", "r = fchmod((mode != r), mode)", "r = fchmod((mode * r), mode)", "r = fchmod((mode + 0), mode)", "r = fchmod((mode + r), mode)", "r = fchmod((mode - 0), mode)", "r = fchmod((mode - r), mode)", "r = fchmod((mode == 0), mode)", "r = fchmod((mode == r), mode)", "r = fchmod((r != 0), mode)", "r = fchmod((r * mode), mode)", "r = fchmod((r + 0), mode)", "r = fchmod((r - 0), mode)", "r = fchmod((r == 0), mode)", "r = fchmod((r), mode)", "r = fchmod((timespec != 0), mode)", "r = fchmod((timespec == 0), mode)", "r = fchmod(ofd, (0 * mode))", "r = fchmod(ofd, (0 * r))", "r = fchmod(ofd, (ifstat != 0))", "r = fchmod(ofd, (ifstat == 0))", "r = fchmod(ofd, (mode != 0))", "r = fchmod(ofd, (mode != r))", "r = fchmod(ofd, (mode * r))", "r = fchmod(ofd, (mode + 0))", "r = fchmod(ofd, (mode + r))", "r = fchmod(ofd, (mode - 0))", "r = fchmod(ofd, (mode - r))", "r = fchmod(ofd, (mode == 0))", "r = fchmod(ofd, (mode == r))", "r = fchmod(ofd, (mode))", "r = fchmod(ofd, (r != 0))", "r = fchmod(ofd, (r * mode))", "r = fchmod(ofd, (r + 0))", "r = fchmod(ofd, (r - 0))", "r = fchmod(ofd, (r == 0))", "r = fchmod(ofd, (timespec != 0))", "r = fchmod(ofd, (timespec == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1141355901617951, -5.0952998901617947, -5.5834182098617946, -5.5834182098617946, -6.5638194368617953, -6.6847919171617942, -6.7133725171617948, -6.7133725171617948, -6.5638194368617953, -6.6847919171617942, -7.8734215981617943, -5.9524975171617953, -5.9524975171617953, -6.7133725171617948]
								}, {
									"case":	2,
									"scores":	[-5.103982737161795]
								}, {
									"case":	3,
									"scores":	[-5.103982737161795]
								}, {
									"case":	4,
									"scores":	[-5.103982737161795]
								}, {
									"case":	5,
									"scores":	[-5.103982737161795]
								}, {
									"case":	6,
									"scores":	[-5.103982737161795]
								}, {
									"case":	7,
									"scores":	[-5.103982737161795]
								}, {
									"case":	8,
									"scores":	[-5.103982737161795]
								}, {
									"case":	9,
									"scores":	[-5.103982737161795]
								}, {
									"case":	10,
									"scores":	[-5.103982737161795]
								}, {
									"case":	11,
									"scores":	[-5.103982737161795]
								}, {
									"case":	12,
									"scores":	[-5.103982737161795]
								}, {
									"case":	13,
									"scores":	[-5.103982737161795]
								}, {
									"case":	14,
									"scores":	[-5.103982737161795]
								}, {
									"case":	15,
									"scores":	[-5.103982737161795]
								}, {
									"case":	16,
									"scores":	[-5.103982737161795]
								}, {
									"case":	17,
									"scores":	[-5.103982737161795]
								}, {
									"case":	18,
									"scores":	[-5.103982737161795]
								}, {
									"case":	19,
									"scores":	[-5.103982737161795]
								}, {
									"case":	20,
									"scores":	[-5.103982737161795]
								}, {
									"case":	21,
									"scores":	[-5.103982737161795]
								}, {
									"case":	22,
									"scores":	[-5.103982737161795]
								}, {
									"case":	23,
									"scores":	[-5.103982737161795]
								}, {
									"case":	24,
									"scores":	[-5.103982737161795]
								}, {
									"case":	25,
									"scores":	[-5.103982737161795]
								}, {
									"case":	26,
									"scores":	[-5.103982737161795]
								}, {
									"case":	27,
									"scores":	[-5.103982737161795]
								}, {
									"case":	28,
									"scores":	[-5.103982737161795]
								}, {
									"case":	29,
									"scores":	[-5.103982737161795]
								}, {
									"case":	30,
									"scores":	[-5.103982737161795]
								}, {
									"case":	31,
									"scores":	[-5.103982737161795]
								}, {
									"case":	32,
									"scores":	[-5.103982737161795]
								}, {
									"case":	33,
									"scores":	[-5.103982737161795]
								}, {
									"case":	34,
									"scores":	[-5.103982737161795]
								}, {
									"case":	35,
									"scores":	[-5.103982737161795]
								}, {
									"case":	36,
									"scores":	[-5.103982737161795]
								}, {
									"case":	37,
									"scores":	[-5.103982737161795]
								}, {
									"case":	38,
									"scores":	[-5.103982737161795]
								}, {
									"case":	39,
									"scores":	[-5.103982737161795]
								}, {
									"case":	40,
									"scores":	[-5.103982737161795]
								}, {
									"case":	41,
									"scores":	[-5.103982737161795]
								}, {
									"case":	42,
									"scores":	[-5.103982737161795]
								}, {
									"case":	43,
									"scores":	[-5.103982737161795]
								}, {
									"case":	44,
									"scores":	[-5.103982737161795]
								}, {
									"case":	45,
									"scores":	[-5.103982737161795]
								}, {
									"case":	46,
									"scores":	[-5.103982737161795]
								}, {
									"case":	47,
									"scores":	[-5.103982737161795]
								}, {
									"case":	48,
									"scores":	[-5.103982737161795]
								}, {
									"case":	49,
									"scores":	[-5.103982737161795]
								}, {
									"case":	50,
									"scores":	[-5.103982737161795]
								}, {
									"case":	51,
									"scores":	[-5.103982737161795]
								}, {
									"case":	52,
									"scores":	[-5.103982737161795]
								}, {
									"case":	53,
									"scores":	[-5.103982737161795]
								}, {
									"case":	54,
									"scores":	[-5.103982737161795]
								}, {
									"case":	55,
									"scores":	[-5.103982737161795]
								}, {
									"case":	56,
									"scores":	[-5.103982737161795]
								}, {
									"case":	57,
									"scores":	[-5.103982737161795]
								}, {
									"case":	58,
									"scores":	[-5.103982737161795]
								}, {
									"case":	59,
									"scores":	[-5.103982737161795]
								}, {
									"case":	60,
									"scores":	[-5.103982737161795]
								}, {
									"case":	61,
									"scores":	[-5.103982737161795]
								}, {
									"case":	62,
									"scores":	[-5.103982737161795]
								}, {
									"case":	63,
									"scores":	[-5.103982737161795]
								}, {
									"case":	64,
									"scores":	[-5.103982737161795]
								}, {
									"case":	65,
									"scores":	[-5.103982737161795]
								}, {
									"case":	66,
									"scores":	[-5.103982737161795]
								}, {
									"case":	67,
									"scores":	[-5.103982737161795]
								}, {
									"case":	68,
									"scores":	[-5.103982737161795]
								}, {
									"case":	69,
									"scores":	[-5.103982737161795]
								}, {
									"case":	70,
									"scores":	[-5.103982737161795]
								}, {
									"case":	71,
									"scores":	[-5.103982737161795]
								}, {
									"case":	72,
									"scores":	[-5.103982737161795]
								}, {
									"case":	73,
									"scores":	[-5.103982737161795]
								}, {
									"case":	74,
									"scores":	[-5.103982737161795]
								}, {
									"case":	75,
									"scores":	[-5.103982737161795]
								}]
						}]
				}, {
					"line":	1691,
					"switches":	[{
							"switch":	89,
							"types":	[[], [], [], [], [493], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [], [], [], [], [], []],
							"begin_line":	1692,
							"begin_column":	3,
							"end_line":	1692,
							"end_column":	3,
							"patch_codes":	["memset(&ifstat->__glibc_reserved, 0, sizeof (*(&ifstat->__glibc_reserved)))", "memset(&ifstat->__pad0, 0, sizeof (*(&ifstat->__pad0)))", "memset(&ifstat->st_atim, 0, sizeof (*(&ifstat->st_atim)))", "memset(&ifstat->st_blksize, 0, sizeof (*(&ifstat->st_blksize)))", "memset(&ifstat->st_blocks, 0, sizeof (*(&ifstat->st_blocks)))", "memset(&ifstat->st_ctim, 0, sizeof (*(&ifstat->st_ctim)))", "memset(&ifstat->st_dev, 0, sizeof (*(&ifstat->st_dev)))", "memset(&ifstat->st_gid, 0, sizeof (*(&ifstat->st_gid)))", "memset(&ifstat->st_ino, 0, sizeof (*(&ifstat->st_ino)))", "memset(&ifstat->st_mode, 0, sizeof (*(&ifstat->st_mode)))", "memset(&ifstat->st_mtim, 0, sizeof (*(&ifstat->st_mtim)))", "memset(&ifstat->st_nlink, 0, sizeof (*(&ifstat->st_nlink)))", "memset(&ifstat->st_rdev, 0, sizeof (*(&ifstat->st_rdev)))", "memset(&ifstat->st_size, 0, sizeof (*(&ifstat->st_size)))", "memset(&ifstat->st_uid, 0, sizeof (*(&ifstat->st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "memset(&timespec[1].tv_nsec, 0, sizeof (*(&timespec[1].tv_nsec)))", "memset(&timespec[1].tv_sec, 0, sizeof (*(&timespec[1].tv_sec)))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (3)", "bytes_in = (384)", "bytes_in = (448)", "bytes_in = (504)", "bytes_in = (511)", "bytes_in = (56)", "bytes_in = (64)", "bytes_in = (7)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (3)", "bytes_out = (384)", "bytes_out = (448)", "bytes_out = (504)", "bytes_out = (511)", "bytes_out = (56)", "bytes_out = (64)", "bytes_out = (7)", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (2)", "exit_code = (256)", "exit_code = (3)", "exit_code = (384)", "exit_code = (448)", "exit_code = (504)", "exit_code = (511)", "exit_code = (56)", "exit_code = (64)", "exit_code = (7)", "exit_code = (r)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (3)", "exiting_signal = (384)", "exiting_signal = (448)", "exiting_signal = (504)", "exiting_signal = (511)", "exiting_signal = (56)", "exiting_signal = (64)", "exiting_signal = (7)", "exiting_signal = (r)", "fchown(ofd, (ifstat)->st_uid, ifstat->st_gid)", "fchown(ofd, ifstat->st_uid, (ifstat)->st_gid)", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (2)", "foreground = (256)", "foreground = (3)", "foreground = (384)", "foreground = (448)", "foreground = (504)", "foreground = (511)", "foreground = (56)", "foreground = (64)", "foreground = (7)", "foreground = (r)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (3)", "header_bytes = (384)", "header_bytes = (448)", "header_bytes = (504)", "header_bytes = (511)", "header_bytes = (56)", "header_bytes = (64)", "header_bytes = (7)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (2)", "ifd = (256)", "ifd = (3)", "ifd = (384)", "ifd = (448)", "ifd = (504)", "ifd = (511)", "ifd = (56)", "ifd = (64)", "ifd = (7)", "ifd = (r)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (3)", "ifile_size = (384)", "ifile_size = (448)", "ifile_size = (504)", "ifile_size = (511)", "ifile_size = (56)", "ifile_size = (64)", "ifile_size = (7)", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (2)", "inptr = (256)", "inptr = (3)", "inptr = (384)", "inptr = (448)", "inptr = (504)", "inptr = (511)", "inptr = (56)", "inptr = (64)", "inptr = (7)", "inptr = (mode)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (2)", "last_member = (256)", "last_member = (3)", "last_member = (384)", "last_member = (448)", "last_member = (504)", "last_member = (511)", "last_member = (56)", "last_member = (64)", "last_member = (7)", "last_member = (r)", "list = (0)", "list = (1)", "list = (128)", "list = (2)", "list = (256)", "list = (3)", "list = (384)", "list = (448)", "list = (504)", "list = (511)", "list = (56)", "list = (64)", "list = (7)", "list = (r)", "method = (0)", "method = (1)", "method = (128)", "method = (2)", "method = (256)", "method = (3)", "method = (384)", "method = (448)", "method = (504)", "method = (511)", "method = (56)", "method = (64)", "method = (7)", "method = (r)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (2)", "no_name = (256)", "no_name = (3)", "no_name = (384)", "no_name = (448)", "no_name = (504)", "no_name = (511)", "no_name = (56)", "no_name = (64)", "no_name = (7)", "no_name = (r)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (2)", "no_time = (256)", "no_time = (3)", "no_time = (384)", "no_time = (448)", "no_time = (504)", "no_time = (511)", "no_time = (56)", "no_time = (64)", "no_time = (7)", "no_time = (r)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (2)", "ofd = (256)", "ofd = (3)", "ofd = (384)", "ofd = (448)", "ofd = (504)", "ofd = (511)", "ofd = (56)", "ofd = (64)", "ofd = (7)", "ofd = (r)", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (2)", "part_nb = (256)", "part_nb = (3)", "part_nb = (384)", "part_nb = (448)", "part_nb = (504)", "part_nb = (511)", "part_nb = (56)", "part_nb = (64)", "part_nb = (7)", "part_nb = (r)", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (2)", "quiet = (256)", "quiet = (3)", "quiet = (384)", "quiet = (448)", "quiet = (504)", "quiet = (511)", "quiet = (56)", "quiet = (64)", "quiet = (7)", "quiet = (r)", "r = (0)", "r = (1)", "r = (128)", "r = (2)", "r = (256)", "r = (3)", "r = (384)", "r = (448)", "r = (504)", "r = (511)", "r = (56)", "r = (64)", "r = (7)", "r = (r)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (3)", "remove_ofname_fd = (384)", "remove_ofname_fd = (448)", "remove_ofname_fd = (504)", "remove_ofname_fd = (511)", "remove_ofname_fd = (56)", "remove_ofname_fd = (64)", "remove_ofname_fd = (7)", "remove_ofname_fd = (r)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (3)", "save_orig_name = (384)", "save_orig_name = (448)", "save_orig_name = (504)", "save_orig_name = (511)", "save_orig_name = (56)", "save_orig_name = (64)", "save_orig_name = (7)", "save_orig_name = (r)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (448)", "time_stamp.tv_nsec = (504)", "time_stamp.tv_nsec = (511)", "time_stamp.tv_nsec = (56)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (7)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (448)", "time_stamp.tv_sec = (504)", "time_stamp.tv_sec = (511)", "time_stamp.tv_sec = (56)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (7)", "timespec[0] = get_stat_atime((ifstat))", "timespec[1] = get_stat_mtime((ifstat))", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (3)", "to_stdout = (384)", "to_stdout = (448)", "to_stdout = (504)", "to_stdout = (511)", "to_stdout = (56)", "to_stdout = (64)", "to_stdout = (7)", "to_stdout = (r)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (2)", "total_in = (256)", "total_in = (3)", "total_in = (384)", "total_in = (448)", "total_in = (504)", "total_in = (511)", "total_in = (56)", "total_in = (64)", "total_in = (7)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (2)", "total_out = (256)", "total_out = (3)", "total_out = (384)", "total_out = (448)", "total_out = (504)", "total_out = (511)", "total_out = (56)", "total_out = (64)", "total_out = (7)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (2)", "verbose = (256)", "verbose = (3)", "verbose = (384)", "verbose = (448)", "verbose = (504)", "verbose = (511)", "verbose = (56)", "verbose = (64)", "verbose = (7)", "verbose = (r)", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (2)", "z_len = (256)", "z_len = (3)", "z_len = (384)", "z_len = (448)", "z_len = (504)", "z_len = (511)", "z_len = (56)", "z_len = (64)", "z_len = (7)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fchown(ofd, ifstat->st_uid, ifstat->st_gid)", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "r = fchmod(ofd, mode)", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "timespec[0] = get_stat_atime(ifstat)", "timespec[1] = get_stat_mtime(ifstat)", "timespec[1] = time_stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1692\", 14, &(r), sizeof (r), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.063577322526756]
								}, {
									"case":	2,
									"scores":	[-5.063577322526756]
								}, {
									"case":	3,
									"scores":	[-5.063577322526756]
								}, {
									"case":	4,
									"scores":	[-5.063577322526756]
								}, {
									"case":	5,
									"scores":	[-5.063577322526756]
								}, {
									"case":	6,
									"scores":	[-5.063577322526756]
								}, {
									"case":	7,
									"scores":	[-5.063577322526756]
								}, {
									"case":	8,
									"scores":	[-5.063577322526756]
								}, {
									"case":	9,
									"scores":	[-5.063577322526756]
								}, {
									"case":	10,
									"scores":	[-5.063577322526756]
								}, {
									"case":	11,
									"scores":	[-5.063577322526756]
								}, {
									"case":	12,
									"scores":	[-5.063577322526756]
								}, {
									"case":	13,
									"scores":	[-5.063577322526756]
								}, {
									"case":	14,
									"scores":	[-5.063577322526756]
								}, {
									"case":	15,
									"scores":	[-5.063577322526756]
								}, {
									"case":	16,
									"scores":	[-5.063577322526756]
								}, {
									"case":	17,
									"scores":	[-5.063577322526756]
								}, {
									"case":	18,
									"scores":	[-5.063577322526756]
								}, {
									"case":	19,
									"scores":	[-5.063577322526756]
								}, {
									"case":	20,
									"scores":	[-5.063577322526756]
								}, {
									"case":	21,
									"scores":	[-5.063577322526756]
								}, {
									"case":	22,
									"scores":	[-5.063577322526756]
								}, {
									"case":	23,
									"scores":	[-5.063577322526756]
								}, {
									"case":	24,
									"scores":	[-5.063577322526756]
								}, {
									"case":	25,
									"scores":	[-5.063577322526756]
								}, {
									"case":	26,
									"scores":	[-5.063577322526756]
								}, {
									"case":	27,
									"scores":	[-5.063577322526756]
								}, {
									"case":	28,
									"scores":	[-5.063577322526756]
								}, {
									"case":	29,
									"scores":	[-5.063577322526756]
								}, {
									"case":	30,
									"scores":	[-5.063577322526756]
								}, {
									"case":	31,
									"scores":	[-5.063577322526756]
								}, {
									"case":	32,
									"scores":	[-5.063577322526756]
								}, {
									"case":	33,
									"scores":	[-5.063577322526756]
								}, {
									"case":	34,
									"scores":	[-5.063577322526756]
								}, {
									"case":	35,
									"scores":	[-5.063577322526756]
								}, {
									"case":	36,
									"scores":	[-5.063577322526756]
								}, {
									"case":	37,
									"scores":	[-5.063577322526756]
								}, {
									"case":	38,
									"scores":	[-5.063577322526756]
								}, {
									"case":	39,
									"scores":	[-5.063577322526756]
								}, {
									"case":	40,
									"scores":	[-5.063577322526756]
								}, {
									"case":	41,
									"scores":	[-5.063577322526756]
								}, {
									"case":	42,
									"scores":	[-5.063577322526756]
								}, {
									"case":	43,
									"scores":	[-5.063577322526756]
								}, {
									"case":	44,
									"scores":	[-5.063577322526756]
								}, {
									"case":	45,
									"scores":	[-5.063577322526756]
								}, {
									"case":	46,
									"scores":	[-5.063577322526756]
								}, {
									"case":	47,
									"scores":	[-5.063577322526756]
								}, {
									"case":	48,
									"scores":	[-5.063577322526756]
								}, {
									"case":	49,
									"scores":	[-5.063577322526756]
								}, {
									"case":	50,
									"scores":	[-5.063577322526756]
								}, {
									"case":	51,
									"scores":	[-5.063577322526756]
								}, {
									"case":	52,
									"scores":	[-5.063577322526756]
								}, {
									"case":	53,
									"scores":	[-5.063577322526756]
								}, {
									"case":	54,
									"scores":	[-5.063577322526756]
								}, {
									"case":	55,
									"scores":	[-5.063577322526756]
								}, {
									"case":	56,
									"scores":	[-5.063577322526756]
								}, {
									"case":	57,
									"scores":	[-5.063577322526756]
								}, {
									"case":	58,
									"scores":	[-5.063577322526756]
								}, {
									"case":	59,
									"scores":	[-5.063577322526756]
								}, {
									"case":	60,
									"scores":	[-5.063577322526756]
								}, {
									"case":	61,
									"scores":	[-5.063577322526756]
								}, {
									"case":	62,
									"scores":	[-5.063577322526756]
								}, {
									"case":	63,
									"scores":	[-5.063577322526756]
								}, {
									"case":	64,
									"scores":	[-5.063577322526756]
								}, {
									"case":	65,
									"scores":	[-5.063577322526756]
								}, {
									"case":	66,
									"scores":	[-5.063577322526756]
								}, {
									"case":	67,
									"scores":	[-5.063577322526756]
								}, {
									"case":	68,
									"scores":	[-5.063577322526756]
								}, {
									"case":	69,
									"scores":	[-5.063577322526756]
								}, {
									"case":	70,
									"scores":	[-5.063577322526756]
								}, {
									"case":	71,
									"scores":	[-5.063577322526756]
								}, {
									"case":	72,
									"scores":	[-5.063577322526756]
								}, {
									"case":	73,
									"scores":	[-5.063577322526756]
								}, {
									"case":	74,
									"scores":	[-5.063577322526756]
								}, {
									"case":	75,
									"scores":	[-5.063577322526756]
								}, {
									"case":	76,
									"scores":	[-5.063577322526756]
								}, {
									"case":	77,
									"scores":	[-5.063577322526756]
								}, {
									"case":	78,
									"scores":	[-5.063577322526756]
								}, {
									"case":	79,
									"scores":	[-5.063577322526756]
								}, {
									"case":	80,
									"scores":	[-5.063577322526756]
								}, {
									"case":	81,
									"scores":	[-5.063577322526756]
								}, {
									"case":	82,
									"scores":	[-5.063577322526756]
								}, {
									"case":	83,
									"scores":	[-5.063577322526756]
								}, {
									"case":	84,
									"scores":	[-5.063577322526756]
								}, {
									"case":	85,
									"scores":	[-5.063577322526756]
								}, {
									"case":	86,
									"scores":	[-5.063577322526756]
								}, {
									"case":	87,
									"scores":	[-5.063577322526756]
								}, {
									"case":	88,
									"scores":	[-5.063577322526756]
								}, {
									"case":	89,
									"scores":	[-5.063577322526756]
								}, {
									"case":	90,
									"scores":	[-5.063577322526756]
								}, {
									"case":	91,
									"scores":	[-5.063577322526756]
								}, {
									"case":	92,
									"scores":	[-5.063577322526756]
								}, {
									"case":	93,
									"scores":	[-5.063577322526756]
								}, {
									"case":	94,
									"scores":	[-5.063577322526756]
								}, {
									"case":	95,
									"scores":	[-5.063577322526756]
								}, {
									"case":	96,
									"scores":	[-5.063577322526756]
								}, {
									"case":	97,
									"scores":	[-5.063577322526756]
								}, {
									"case":	98,
									"scores":	[-5.063577322526756]
								}, {
									"case":	99,
									"scores":	[-5.063577322526756]
								}, {
									"case":	100,
									"scores":	[-5.063577322526756]
								}, {
									"case":	101,
									"scores":	[-5.063577322526756]
								}, {
									"case":	102,
									"scores":	[-5.063577322526756]
								}, {
									"case":	103,
									"scores":	[-5.063577322526756]
								}, {
									"case":	104,
									"scores":	[-5.063577322526756]
								}, {
									"case":	105,
									"scores":	[-5.063577322526756]
								}, {
									"case":	106,
									"scores":	[-5.063577322526756]
								}, {
									"case":	107,
									"scores":	[-5.063577322526756]
								}, {
									"case":	108,
									"scores":	[-5.063577322526756]
								}, {
									"case":	109,
									"scores":	[-5.063577322526756]
								}, {
									"case":	110,
									"scores":	[-5.063577322526756]
								}, {
									"case":	111,
									"scores":	[-5.063577322526756]
								}, {
									"case":	112,
									"scores":	[-5.063577322526756]
								}, {
									"case":	113,
									"scores":	[-5.063577322526756]
								}, {
									"case":	114,
									"scores":	[-5.063577322526756]
								}, {
									"case":	115,
									"scores":	[-5.063577322526756]
								}, {
									"case":	116,
									"scores":	[-5.063577322526756]
								}, {
									"case":	117,
									"scores":	[-5.063577322526756]
								}, {
									"case":	118,
									"scores":	[-5.063577322526756]
								}, {
									"case":	119,
									"scores":	[-5.063577322526756]
								}, {
									"case":	120,
									"scores":	[-5.063577322526756]
								}, {
									"case":	121,
									"scores":	[-5.063577322526756]
								}, {
									"case":	122,
									"scores":	[-5.063577322526756]
								}, {
									"case":	123,
									"scores":	[-5.063577322526756]
								}, {
									"case":	124,
									"scores":	[-5.063577322526756]
								}, {
									"case":	125,
									"scores":	[-5.063577322526756]
								}, {
									"case":	126,
									"scores":	[-5.063577322526756]
								}, {
									"case":	127,
									"scores":	[-5.063577322526756]
								}, {
									"case":	128,
									"scores":	[-5.063577322526756]
								}, {
									"case":	129,
									"scores":	[-5.063577322526756]
								}, {
									"case":	130,
									"scores":	[-5.063577322526756]
								}, {
									"case":	131,
									"scores":	[-5.063577322526756]
								}, {
									"case":	132,
									"scores":	[-5.063577322526756]
								}, {
									"case":	133,
									"scores":	[-5.063577322526756]
								}, {
									"case":	134,
									"scores":	[-5.063577322526756]
								}, {
									"case":	135,
									"scores":	[-5.063577322526756]
								}, {
									"case":	136,
									"scores":	[-5.063577322526756]
								}, {
									"case":	137,
									"scores":	[-5.063577322526756]
								}, {
									"case":	138,
									"scores":	[-5.063577322526756]
								}, {
									"case":	139,
									"scores":	[-5.063577322526756]
								}, {
									"case":	140,
									"scores":	[-5.063577322526756]
								}, {
									"case":	141,
									"scores":	[-5.063577322526756]
								}, {
									"case":	142,
									"scores":	[-5.063577322526756]
								}, {
									"case":	143,
									"scores":	[-5.063577322526756]
								}, {
									"case":	144,
									"scores":	[-5.063577322526756]
								}, {
									"case":	145,
									"scores":	[-5.063577322526756]
								}, {
									"case":	146,
									"scores":	[-5.063577322526756]
								}, {
									"case":	147,
									"scores":	[-5.063577322526756]
								}, {
									"case":	148,
									"scores":	[-5.063577322526756]
								}, {
									"case":	149,
									"scores":	[-5.063577322526756]
								}, {
									"case":	150,
									"scores":	[-5.063577322526756]
								}, {
									"case":	151,
									"scores":	[-5.063577322526756]
								}, {
									"case":	152,
									"scores":	[-5.063577322526756]
								}, {
									"case":	153,
									"scores":	[-5.063577322526756]
								}, {
									"case":	154,
									"scores":	[-5.063577322526756]
								}, {
									"case":	155,
									"scores":	[-5.063577322526756]
								}, {
									"case":	156,
									"scores":	[-5.063577322526756]
								}, {
									"case":	157,
									"scores":	[-5.063577322526756]
								}, {
									"case":	158,
									"scores":	[-5.063577322526756]
								}, {
									"case":	159,
									"scores":	[-5.063577322526756]
								}, {
									"case":	160,
									"scores":	[-5.063577322526756]
								}, {
									"case":	161,
									"scores":	[-5.063577322526756]
								}, {
									"case":	162,
									"scores":	[-5.063577322526756]
								}, {
									"case":	163,
									"scores":	[-5.063577322526756]
								}, {
									"case":	164,
									"scores":	[-5.063577322526756]
								}, {
									"case":	165,
									"scores":	[-5.063577322526756]
								}, {
									"case":	166,
									"scores":	[-5.063577322526756]
								}, {
									"case":	167,
									"scores":	[-5.063577322526756]
								}, {
									"case":	168,
									"scores":	[-5.063577322526756]
								}, {
									"case":	169,
									"scores":	[-5.063577322526756]
								}, {
									"case":	170,
									"scores":	[-5.063577322526756]
								}, {
									"case":	171,
									"scores":	[-5.063577322526756]
								}, {
									"case":	172,
									"scores":	[-5.063577322526756]
								}, {
									"case":	173,
									"scores":	[-5.063577322526756]
								}, {
									"case":	174,
									"scores":	[-5.063577322526756]
								}, {
									"case":	175,
									"scores":	[-5.063577322526756]
								}, {
									"case":	176,
									"scores":	[-5.063577322526756]
								}, {
									"case":	177,
									"scores":	[-5.063577322526756]
								}, {
									"case":	178,
									"scores":	[-5.063577322526756]
								}, {
									"case":	179,
									"scores":	[-5.063577322526756]
								}, {
									"case":	180,
									"scores":	[-5.063577322526756]
								}, {
									"case":	181,
									"scores":	[-5.063577322526756]
								}, {
									"case":	182,
									"scores":	[-5.063577322526756]
								}, {
									"case":	183,
									"scores":	[-5.063577322526756]
								}, {
									"case":	184,
									"scores":	[-5.063577322526756]
								}, {
									"case":	185,
									"scores":	[-5.063577322526756]
								}, {
									"case":	186,
									"scores":	[-5.063577322526756]
								}, {
									"case":	187,
									"scores":	[-5.063577322526756]
								}, {
									"case":	188,
									"scores":	[-5.063577322526756]
								}, {
									"case":	189,
									"scores":	[-5.063577322526756]
								}, {
									"case":	190,
									"scores":	[-5.063577322526756]
								}, {
									"case":	191,
									"scores":	[-5.063577322526756]
								}, {
									"case":	192,
									"scores":	[-5.063577322526756]
								}, {
									"case":	193,
									"scores":	[-5.063577322526756]
								}, {
									"case":	194,
									"scores":	[-5.063577322526756]
								}, {
									"case":	195,
									"scores":	[-5.063577322526756]
								}, {
									"case":	196,
									"scores":	[-5.063577322526756]
								}, {
									"case":	197,
									"scores":	[-5.063577322526756]
								}, {
									"case":	198,
									"scores":	[-5.063577322526756]
								}, {
									"case":	199,
									"scores":	[-5.063577322526756]
								}, {
									"case":	200,
									"scores":	[-5.063577322526756]
								}, {
									"case":	201,
									"scores":	[-5.063577322526756]
								}, {
									"case":	202,
									"scores":	[-5.063577322526756]
								}, {
									"case":	203,
									"scores":	[-5.063577322526756]
								}, {
									"case":	204,
									"scores":	[-5.063577322526756]
								}, {
									"case":	205,
									"scores":	[-5.063577322526756]
								}, {
									"case":	206,
									"scores":	[-5.063577322526756]
								}, {
									"case":	207,
									"scores":	[-5.063577322526756]
								}, {
									"case":	208,
									"scores":	[-5.063577322526756]
								}, {
									"case":	209,
									"scores":	[-5.063577322526756]
								}, {
									"case":	210,
									"scores":	[-5.063577322526756]
								}, {
									"case":	211,
									"scores":	[-5.063577322526756]
								}, {
									"case":	212,
									"scores":	[-5.063577322526756]
								}, {
									"case":	213,
									"scores":	[-5.063577322526756]
								}, {
									"case":	214,
									"scores":	[-5.063577322526756]
								}, {
									"case":	215,
									"scores":	[-5.063577322526756]
								}, {
									"case":	216,
									"scores":	[-5.063577322526756]
								}, {
									"case":	217,
									"scores":	[-5.063577322526756]
								}, {
									"case":	218,
									"scores":	[-5.063577322526756]
								}, {
									"case":	219,
									"scores":	[-5.063577322526756]
								}, {
									"case":	220,
									"scores":	[-5.063577322526756]
								}, {
									"case":	221,
									"scores":	[-5.063577322526756]
								}, {
									"case":	222,
									"scores":	[-5.063577322526756]
								}, {
									"case":	223,
									"scores":	[-5.063577322526756]
								}, {
									"case":	224,
									"scores":	[-5.063577322526756]
								}, {
									"case":	225,
									"scores":	[-5.063577322526756]
								}, {
									"case":	226,
									"scores":	[-5.063577322526756]
								}, {
									"case":	227,
									"scores":	[-5.063577322526756]
								}, {
									"case":	228,
									"scores":	[-5.063577322526756]
								}, {
									"case":	229,
									"scores":	[-5.063577322526756]
								}, {
									"case":	230,
									"scores":	[-5.063577322526756]
								}, {
									"case":	231,
									"scores":	[-5.063577322526756]
								}, {
									"case":	232,
									"scores":	[-5.063577322526756]
								}, {
									"case":	233,
									"scores":	[-5.063577322526756]
								}, {
									"case":	234,
									"scores":	[-5.063577322526756]
								}, {
									"case":	235,
									"scores":	[-5.063577322526756]
								}, {
									"case":	236,
									"scores":	[-5.063577322526756]
								}, {
									"case":	237,
									"scores":	[-5.063577322526756]
								}, {
									"case":	238,
									"scores":	[-5.063577322526756]
								}, {
									"case":	239,
									"scores":	[-5.063577322526756]
								}, {
									"case":	240,
									"scores":	[-5.063577322526756]
								}, {
									"case":	241,
									"scores":	[-5.063577322526756]
								}, {
									"case":	242,
									"scores":	[-5.063577322526756]
								}, {
									"case":	243,
									"scores":	[-5.063577322526756]
								}, {
									"case":	244,
									"scores":	[-5.063577322526756]
								}, {
									"case":	245,
									"scores":	[-5.063577322526756]
								}, {
									"case":	246,
									"scores":	[-5.063577322526756]
								}, {
									"case":	247,
									"scores":	[-5.063577322526756]
								}, {
									"case":	248,
									"scores":	[-5.063577322526756]
								}, {
									"case":	249,
									"scores":	[-5.063577322526756]
								}, {
									"case":	250,
									"scores":	[-5.063577322526756]
								}, {
									"case":	251,
									"scores":	[-5.063577322526756]
								}, {
									"case":	252,
									"scores":	[-5.063577322526756]
								}, {
									"case":	253,
									"scores":	[-5.063577322526756]
								}, {
									"case":	254,
									"scores":	[-5.063577322526756]
								}, {
									"case":	255,
									"scores":	[-5.063577322526756]
								}, {
									"case":	256,
									"scores":	[-5.063577322526756]
								}, {
									"case":	257,
									"scores":	[-5.063577322526756]
								}, {
									"case":	258,
									"scores":	[-5.063577322526756]
								}, {
									"case":	259,
									"scores":	[-5.063577322526756]
								}, {
									"case":	260,
									"scores":	[-5.063577322526756]
								}, {
									"case":	261,
									"scores":	[-5.063577322526756]
								}, {
									"case":	262,
									"scores":	[-5.063577322526756]
								}, {
									"case":	263,
									"scores":	[-5.063577322526756]
								}, {
									"case":	264,
									"scores":	[-5.063577322526756]
								}, {
									"case":	265,
									"scores":	[-5.063577322526756]
								}, {
									"case":	266,
									"scores":	[-5.063577322526756]
								}, {
									"case":	267,
									"scores":	[-5.063577322526756]
								}, {
									"case":	268,
									"scores":	[-5.063577322526756]
								}, {
									"case":	269,
									"scores":	[-5.063577322526756]
								}, {
									"case":	270,
									"scores":	[-5.063577322526756]
								}, {
									"case":	271,
									"scores":	[-5.063577322526756]
								}, {
									"case":	272,
									"scores":	[-5.063577322526756]
								}, {
									"case":	273,
									"scores":	[-5.063577322526756]
								}, {
									"case":	274,
									"scores":	[-5.063577322526756]
								}, {
									"case":	275,
									"scores":	[-5.063577322526756]
								}, {
									"case":	276,
									"scores":	[-5.063577322526756]
								}, {
									"case":	277,
									"scores":	[-5.063577322526756]
								}, {
									"case":	278,
									"scores":	[-5.063577322526756]
								}, {
									"case":	279,
									"scores":	[-5.063577322526756]
								}, {
									"case":	280,
									"scores":	[-5.063577322526756]
								}, {
									"case":	281,
									"scores":	[-5.063577322526756]
								}, {
									"case":	282,
									"scores":	[-5.063577322526756]
								}, {
									"case":	283,
									"scores":	[-5.063577322526756]
								}, {
									"case":	284,
									"scores":	[-5.063577322526756]
								}, {
									"case":	285,
									"scores":	[-5.063577322526756]
								}, {
									"case":	286,
									"scores":	[-5.063577322526756]
								}, {
									"case":	287,
									"scores":	[-5.063577322526756]
								}, {
									"case":	288,
									"scores":	[-5.063577322526756]
								}, {
									"case":	289,
									"scores":	[-5.063577322526756]
								}, {
									"case":	290,
									"scores":	[-5.063577322526756]
								}, {
									"case":	291,
									"scores":	[-5.063577322526756]
								}, {
									"case":	292,
									"scores":	[-5.063577322526756]
								}, {
									"case":	293,
									"scores":	[-5.063577322526756]
								}, {
									"case":	294,
									"scores":	[-5.063577322526756]
								}, {
									"case":	295,
									"scores":	[-5.063577322526756]
								}, {
									"case":	296,
									"scores":	[-5.063577322526756]
								}, {
									"case":	297,
									"scores":	[-5.063577322526756]
								}, {
									"case":	298,
									"scores":	[-5.063577322526756]
								}, {
									"case":	299,
									"scores":	[-5.063577322526756]
								}, {
									"case":	300,
									"scores":	[-5.063577322526756]
								}, {
									"case":	301,
									"scores":	[-5.063577322526756]
								}, {
									"case":	302,
									"scores":	[-5.063577322526756]
								}, {
									"case":	303,
									"scores":	[-5.063577322526756]
								}, {
									"case":	304,
									"scores":	[-5.063577322526756]
								}, {
									"case":	305,
									"scores":	[-5.063577322526756]
								}, {
									"case":	306,
									"scores":	[-5.063577322526756]
								}, {
									"case":	307,
									"scores":	[-5.063577322526756]
								}, {
									"case":	308,
									"scores":	[-5.063577322526756]
								}, {
									"case":	309,
									"scores":	[-5.063577322526756]
								}, {
									"case":	310,
									"scores":	[-5.063577322526756]
								}, {
									"case":	311,
									"scores":	[-5.063577322526756]
								}, {
									"case":	312,
									"scores":	[-5.063577322526756]
								}, {
									"case":	313,
									"scores":	[-5.063577322526756]
								}, {
									"case":	314,
									"scores":	[-5.063577322526756]
								}, {
									"case":	315,
									"scores":	[-5.063577322526756]
								}, {
									"case":	316,
									"scores":	[-5.063577322526756]
								}, {
									"case":	317,
									"scores":	[-5.063577322526756]
								}, {
									"case":	318,
									"scores":	[-5.063577322526756]
								}, {
									"case":	319,
									"scores":	[-5.063577322526756]
								}, {
									"case":	320,
									"scores":	[-5.063577322526756]
								}, {
									"case":	321,
									"scores":	[-5.063577322526756]
								}, {
									"case":	322,
									"scores":	[-5.063577322526756]
								}, {
									"case":	323,
									"scores":	[-5.063577322526756]
								}, {
									"case":	324,
									"scores":	[-5.063577322526756]
								}, {
									"case":	325,
									"scores":	[-5.063577322526756]
								}, {
									"case":	326,
									"scores":	[-5.063577322526756]
								}, {
									"case":	327,
									"scores":	[-5.063577322526756]
								}, {
									"case":	328,
									"scores":	[-5.063577322526756]
								}, {
									"case":	329,
									"scores":	[-5.063577322526756]
								}, {
									"case":	330,
									"scores":	[-5.063577322526756]
								}, {
									"case":	331,
									"scores":	[-5.063577322526756]
								}, {
									"case":	332,
									"scores":	[-5.063577322526756]
								}, {
									"case":	333,
									"scores":	[-5.063577322526756]
								}, {
									"case":	334,
									"scores":	[-5.063577322526756]
								}, {
									"case":	335,
									"scores":	[-5.063577322526756]
								}, {
									"case":	336,
									"scores":	[-5.063577322526756]
								}, {
									"case":	337,
									"scores":	[-5.063577322526756]
								}, {
									"case":	338,
									"scores":	[-5.063577322526756]
								}, {
									"case":	339,
									"scores":	[-5.063577322526756]
								}, {
									"case":	340,
									"scores":	[-5.063577322526756]
								}, {
									"case":	341,
									"scores":	[-5.063577322526756]
								}, {
									"case":	342,
									"scores":	[-5.063577322526756]
								}, {
									"case":	343,
									"scores":	[-5.063577322526756]
								}, {
									"case":	344,
									"scores":	[-5.063577322526756]
								}, {
									"case":	345,
									"scores":	[-5.063577322526756]
								}, {
									"case":	346,
									"scores":	[-5.063577322526756]
								}, {
									"case":	347,
									"scores":	[-5.063577322526756]
								}, {
									"case":	348,
									"scores":	[-5.063577322526756]
								}, {
									"case":	349,
									"scores":	[-5.063577322526756]
								}, {
									"case":	350,
									"scores":	[-5.063577322526756]
								}, {
									"case":	351,
									"scores":	[-5.063577322526756]
								}, {
									"case":	352,
									"scores":	[-5.063577322526756]
								}, {
									"case":	353,
									"scores":	[-5.063577322526756]
								}, {
									"case":	354,
									"scores":	[-5.063577322526756]
								}, {
									"case":	355,
									"scores":	[-5.063577322526756]
								}, {
									"case":	356,
									"scores":	[-5.063577322526756]
								}, {
									"case":	357,
									"scores":	[-5.063577322526756]
								}, {
									"case":	358,
									"scores":	[-5.063577322526756]
								}, {
									"case":	359,
									"scores":	[-5.063577322526756]
								}, {
									"case":	360,
									"scores":	[-5.063577322526756]
								}, {
									"case":	361,
									"scores":	[-5.063577322526756]
								}, {
									"case":	362,
									"scores":	[-5.063577322526756]
								}, {
									"case":	363,
									"scores":	[-5.063577322526756]
								}, {
									"case":	364,
									"scores":	[-5.063577322526756]
								}, {
									"case":	365,
									"scores":	[-5.063577322526756]
								}, {
									"case":	366,
									"scores":	[-5.063577322526756]
								}, {
									"case":	367,
									"scores":	[-5.063577322526756]
								}, {
									"case":	368,
									"scores":	[-5.063577322526756]
								}, {
									"case":	369,
									"scores":	[-5.063577322526756]
								}, {
									"case":	370,
									"scores":	[-5.063577322526756]
								}, {
									"case":	371,
									"scores":	[-5.063577322526756]
								}, {
									"case":	372,
									"scores":	[-5.063577322526756]
								}, {
									"case":	373,
									"scores":	[-5.063577322526756]
								}, {
									"case":	374,
									"scores":	[-5.063577322526756]
								}, {
									"case":	375,
									"scores":	[-5.063577322526756]
								}, {
									"case":	376,
									"scores":	[-5.063577322526756]
								}, {
									"case":	377,
									"scores":	[-5.063577322526756]
								}, {
									"case":	378,
									"scores":	[-5.063577322526756]
								}, {
									"case":	379,
									"scores":	[-5.063577322526756]
								}, {
									"case":	380,
									"scores":	[-5.063577322526756]
								}, {
									"case":	381,
									"scores":	[-5.063577322526756]
								}, {
									"case":	382,
									"scores":	[-5.063577322526756]
								}, {
									"case":	383,
									"scores":	[-5.063577322526756]
								}, {
									"case":	384,
									"scores":	[-5.063577322526756]
								}, {
									"case":	385,
									"scores":	[-5.063577322526756]
								}, {
									"case":	386,
									"scores":	[-5.063577322526756]
								}, {
									"case":	387,
									"scores":	[-5.063577322526756]
								}, {
									"case":	388,
									"scores":	[-5.063577322526756]
								}, {
									"case":	389,
									"scores":	[-5.063577322526756]
								}, {
									"case":	390,
									"scores":	[-5.063577322526756]
								}, {
									"case":	391,
									"scores":	[-5.063577322526756]
								}, {
									"case":	392,
									"scores":	[-5.063577322526756]
								}, {
									"case":	393,
									"scores":	[-5.063577322526756]
								}, {
									"case":	394,
									"scores":	[-5.063577322526756]
								}, {
									"case":	395,
									"scores":	[-5.063577322526756]
								}, {
									"case":	396,
									"scores":	[-5.063577322526756]
								}, {
									"case":	397,
									"scores":	[-5.063577322526756]
								}, {
									"case":	398,
									"scores":	[-5.063577322526756]
								}, {
									"case":	399,
									"scores":	[-5.063577322526756]
								}, {
									"case":	400,
									"scores":	[-5.063577322526756]
								}, {
									"case":	401,
									"scores":	[-5.063577322526756]
								}, {
									"case":	402,
									"scores":	[-5.063577322526756]
								}, {
									"case":	403,
									"scores":	[-5.063577322526756]
								}, {
									"case":	404,
									"scores":	[-5.063577322526756]
								}, {
									"case":	405,
									"scores":	[-5.063577322526756]
								}, {
									"case":	406,
									"scores":	[-5.063577322526756]
								}, {
									"case":	407,
									"scores":	[-5.063577322526756]
								}, {
									"case":	408,
									"scores":	[-5.063577322526756]
								}, {
									"case":	409,
									"scores":	[-5.063577322526756]
								}, {
									"case":	410,
									"scores":	[-5.063577322526756]
								}, {
									"case":	411,
									"scores":	[-5.063577322526756]
								}, {
									"case":	412,
									"scores":	[-5.063577322526756]
								}, {
									"case":	413,
									"scores":	[-5.063577322526756]
								}, {
									"case":	414,
									"scores":	[-5.063577322526756]
								}, {
									"case":	415,
									"scores":	[-5.063577322526756]
								}, {
									"case":	416,
									"scores":	[-5.063577322526756]
								}, {
									"case":	417,
									"scores":	[-5.063577322526756]
								}, {
									"case":	418,
									"scores":	[-5.063577322526756]
								}, {
									"case":	419,
									"scores":	[-5.063577322526756]
								}, {
									"case":	420,
									"scores":	[-5.063577322526756]
								}, {
									"case":	421,
									"scores":	[-5.063577322526756]
								}, {
									"case":	422,
									"scores":	[-5.063577322526756]
								}, {
									"case":	423,
									"scores":	[-5.063577322526756]
								}, {
									"case":	424,
									"scores":	[-5.063577322526756]
								}, {
									"case":	425,
									"scores":	[-5.063577322526756]
								}, {
									"case":	426,
									"scores":	[-5.063577322526756]
								}, {
									"case":	427,
									"scores":	[-5.063577322526756]
								}, {
									"case":	428,
									"scores":	[-5.063577322526756]
								}, {
									"case":	429,
									"scores":	[-5.063577322526756]
								}, {
									"case":	430,
									"scores":	[-5.063577322526756]
								}, {
									"case":	431,
									"scores":	[-5.063577322526756]
								}, {
									"case":	432,
									"scores":	[-5.063577322526756]
								}, {
									"case":	433,
									"scores":	[-5.063577322526756]
								}, {
									"case":	434,
									"scores":	[-5.063577322526756]
								}, {
									"case":	435,
									"scores":	[-5.063577322526756]
								}, {
									"case":	436,
									"scores":	[-5.063577322526756]
								}, {
									"case":	437,
									"scores":	[-5.063577322526756]
								}, {
									"case":	438,
									"scores":	[-5.063577322526756]
								}, {
									"case":	439,
									"scores":	[-5.063577322526756]
								}, {
									"case":	440,
									"scores":	[-5.063577322526756]
								}, {
									"case":	441,
									"scores":	[-5.063577322526756]
								}, {
									"case":	442,
									"scores":	[-5.063577322526756]
								}, {
									"case":	443,
									"scores":	[-5.063577322526756]
								}, {
									"case":	444,
									"scores":	[-5.063577322526756]
								}, {
									"case":	445,
									"scores":	[-5.063577322526756]
								}, {
									"case":	446,
									"scores":	[-5.063577322526756]
								}, {
									"case":	447,
									"scores":	[-5.063577322526756]
								}, {
									"case":	448,
									"scores":	[-5.063577322526756]
								}, {
									"case":	449,
									"scores":	[-5.063577322526756]
								}, {
									"case":	450,
									"scores":	[-5.063577322526756]
								}, {
									"case":	451,
									"scores":	[-5.063577322526756]
								}, {
									"case":	452,
									"scores":	[-5.063577322526756]
								}, {
									"case":	453,
									"scores":	[-5.063577322526756]
								}, {
									"case":	454,
									"scores":	[-5.063577322526756]
								}, {
									"case":	455,
									"scores":	[-5.063577322526756]
								}, {
									"case":	456,
									"scores":	[-5.063577322526756]
								}, {
									"case":	457,
									"scores":	[-5.063577322526756]
								}, {
									"case":	458,
									"scores":	[-5.063577322526756]
								}, {
									"case":	459,
									"scores":	[-5.063577322526756]
								}, {
									"case":	460,
									"scores":	[-5.063577322526756]
								}, {
									"case":	461,
									"scores":	[-5.063577322526756]
								}, {
									"case":	462,
									"scores":	[-5.063577322526756]
								}, {
									"case":	463,
									"scores":	[-5.063577322526756]
								}, {
									"case":	464,
									"scores":	[-5.063577322526756]
								}, {
									"case":	465,
									"scores":	[-5.063577322526756]
								}, {
									"case":	466,
									"scores":	[-5.063577322526756]
								}, {
									"case":	467,
									"scores":	[-5.063577322526756]
								}, {
									"case":	468,
									"scores":	[-5.063577322526756]
								}, {
									"case":	469,
									"scores":	[-5.063577322526756]
								}, {
									"case":	470,
									"scores":	[-5.063577322526756]
								}, {
									"case":	471,
									"scores":	[-5.063577322526756]
								}, {
									"case":	472,
									"scores":	[-5.063577322526756]
								}, {
									"case":	473,
									"scores":	[-5.063577322526756]
								}, {
									"case":	474,
									"scores":	[-5.063577322526756]
								}, {
									"case":	475,
									"scores":	[-5.063577322526756]
								}, {
									"case":	476,
									"scores":	[-5.063577322526756]
								}, {
									"case":	477,
									"scores":	[-5.063577322526756]
								}, {
									"case":	478,
									"scores":	[-5.063577322526756]
								}, {
									"case":	479,
									"scores":	[-5.063577322526756]
								}, {
									"case":	480,
									"scores":	[-5.063577322526756]
								}, {
									"case":	481,
									"scores":	[-5.063577322526756]
								}, {
									"case":	482,
									"scores":	[-5.063577322526756]
								}, {
									"case":	483,
									"scores":	[-5.063577322526756]
								}, {
									"case":	484,
									"scores":	[-5.063577322526756]
								}, {
									"case":	485,
									"scores":	[-5.063577322526756]
								}, {
									"case":	486,
									"scores":	[-5.063577322526756]
								}, {
									"case":	487,
									"scores":	[-5.063577322526756]
								}, {
									"case":	488,
									"scores":	[-5.063577322526756]
								}, {
									"case":	489,
									"scores":	[-5.063577322526756]
								}, {
									"case":	490,
									"scores":	[-5.063577322526756]
								}, {
									"case":	491,
									"scores":	[-5.063577322526756]
								}, {
									"case":	492,
									"scores":	[-5.063577322526756]
								}, {
									"case":	493,
									"scores":	[-6.4682573225267568, -8.5143017953267552, -7.8526798885267564, -9.233392925626756, -9.233392925626756, -8.5143017953267552, -7.8526798885267564, -8.5481002922267564, -9.0410548953267558, -9.0410548953267558, -9.8746676625267558, -9.233392925626756, -9.233392925626756, -9.233392925626756]
								}]
						}, {
							"switch":	90,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1692,
							"begin_column":	5,
							"end_line":	1699,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1692\", 14, &(r), sizeof (r), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress))) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if ((r != 0) || __is_neg(\"\", \"L1692\", 14, &(r), sizeof (r), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress))) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n", "if ((r != 0) && !__is_neg(\"\", \"L1692\", 14, &(r), sizeof (r), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress))) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1547739760281459, -8.3268378487281449, -7.4914194250281465, -8.5666891290281448, -8.5666891290281448, -8.3268378487281449, -7.4914194250281465, -7.8578314487281453, -8.3391867487281441, -8.3391867487281441, -9.7267382100281452, -8.5666891290281448, -8.5666891290281448, -8.5666891290281448]
								}, {
									"case":	2,
									"scores":	[-2.090307525428146, -5.2623713981281455, -4.4269529744281462, -5.5022226784281463, -5.5022226784281463, -5.2623713981281455, -4.4269529744281462, -4.7933649981281459, -5.2747202981281456, -5.2747202981281456, -6.6622717594281458, -5.5022226784281463, -5.5022226784281463, -5.5022226784281463]
								}, {
									"case":	3,
									"scores":	[-2.090307525428146, -5.2623713981281455, -4.4269529744281462, -5.5022226784281463, -5.5022226784281463, -5.2623713981281455, -4.4269529744281462, -4.7933649981281459, -5.2747202981281456, -5.2747202981281456, -6.6622717594281458, -5.5022226784281463, -5.5022226784281463, -5.5022226784281463]
								}]
						}, {
							"switch":	91,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1692,
							"begin_column":	5,
							"end_line":	1699,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1692\", 14, &(r), sizeof (r), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress)))\n    if (r != 0) {\n        int e = (*__errno_location());\n        {\n            if (!quiet)\n                rpl_fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = e;\n            perror(ofname);\n        }\n    }\n", "if (!__is_neg(\"\", \"L1692\", 14, &(r), sizeof (r), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(mode), sizeof (mode), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifstat), sizeof (ifstat), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(decompress), sizeof (decompress)) && (r != 0)) {\n    int e = (*__errno_location());\n    {\n        if (!quiet)\n            rpl_fprintf(stderr, \"%s: \", program_name);\n        if (exit_code == 0)\n            exit_code = 2;\n    }\n    ;\n    if (!quiet) {\n        (*__errno_location()) = e;\n        perror(ofname);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.571357469526756, -6.7434213422267559, -5.9080029185267557, -6.9832726225267558, -6.9832726225267558, -6.7434213422267559, -5.9080029185267557, -6.2744149422267554, -6.755770242226756, -6.755770242226756, -8.1433217035267553, -6.9832726225267558, -6.9832726225267558, -6.9832726225267558]
								}, {
									"case":	2,
									"scores":	[-4.0532373425267556, -7.2253012152267555, -6.3898827915267553, -7.4651524955267554, -7.4651524955267554, -7.2253012152267555, -6.3898827915267553, -6.7562948152267559, -7.2376501152267565, -7.2376501152267565, -8.6252015765267558, -7.4651524955267554, -7.4651524955267554, -7.4651524955267554]
								}]
						}]
				}, {
					"line":	1853,
					"switches":	[]
				}, {
					"line":	1854,
					"switches":	[]
				}, {
					"line":	1856,
					"switches":	[{
							"switch":	92,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1857,
							"begin_column":	1,
							"end_line":	1857,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1857\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-7.7330420359391585, -8.17464852283916]
								}]
						}, {
							"switch":	93,
							"types":	[[], [], [1], [], [], [], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [], [], [], [], [2]],
							"begin_line":	1857,
							"begin_column":	3,
							"end_line":	1857,
							"end_column":	51,
							"patch_codes":	["if (!__is_neg(\"\", \"L1857\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    sigprocmask(0, &caught_signals, &oldset);\n", "{\n}\n", "__asprintf(0, &caught_signals, &oldset)", "__const_select(0, &caught_signals, &oldset)", "__printf__(0, &caught_signals, &oldset)", "asprintf(0, &caught_signals, &oldset)", "dprintf(0, &caught_signals, &oldset)", "execl(0, &caught_signals, &oldset)", "execle(0, &caught_signals, &oldset)", "execlp(0, &caught_signals, &oldset)", "fprintf(0, &caught_signals, &oldset)", "obstack_printf(0, &caught_signals, &oldset)", "printf(0, &caught_signals, &oldset)", "pthread_sigmask(0, &caught_signals, &oldset)", "rpl_fprintf(0, &caught_signals, &oldset)", "sigandset(0, &caught_signals, &oldset)", "sigorset(0, &caught_signals, &oldset)", "sprintf(0, &caught_signals, &oldset)", "syscall(0, &caught_signals, &oldset)", "sigprocmask((0 * fd), &caught_signals, &oldset)", "sigprocmask((0), &caught_signals, &oldset)", "sigprocmask((fd != 0), &caught_signals, &oldset)", "sigprocmask((fd + 0), &caught_signals, &oldset)", "sigprocmask((fd - 0), &caught_signals, &oldset)", "sigprocmask((fd == 0), &caught_signals, &oldset)", "sigprocmask((oldset != 0), &caught_signals, &oldset)", "sigprocmask((oldset == 0), &caught_signals, &oldset)", "sigprocmask(0, &(oldset), &oldset)", "sigprocmask(0, &caught_signals, &(oldset))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8684116159391584, -4.80454844293916]
								}, {
									"case":	2,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	3,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	4,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	5,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	6,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	7,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	8,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	9,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	10,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	11,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	12,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	13,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	14,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	15,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	16,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	17,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	18,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	19,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	20,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	21,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	22,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	23,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	24,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	25,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	26,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	27,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	28,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	29,
									"scores":	[-4.9625637859391585]
								}]
						}]
				}, {
					"line":	1857,
					"switches":	[{
							"switch":	94,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1858,
							"begin_column":	1,
							"end_line":	1858,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.92215837130412]
								}, {
									"case":	2,
									"scores":	[-4.92215837130412]
								}, {
									"case":	3,
									"scores":	[-4.92215837130412]
								}, {
									"case":	4,
									"scores":	[-4.92215837130412]
								}, {
									"case":	5,
									"scores":	[-4.92215837130412]
								}, {
									"case":	6,
									"scores":	[-4.92215837130412]
								}, {
									"case":	7,
									"scores":	[-4.92215837130412]
								}, {
									"case":	8,
									"scores":	[-4.92215837130412]
								}, {
									"case":	9,
									"scores":	[-4.92215837130412]
								}, {
									"case":	10,
									"scores":	[-4.92215837130412]
								}, {
									"case":	11,
									"scores":	[-4.92215837130412]
								}, {
									"case":	12,
									"scores":	[-4.92215837130412]
								}, {
									"case":	13,
									"scores":	[-4.92215837130412]
								}, {
									"case":	14,
									"scores":	[-4.92215837130412]
								}, {
									"case":	15,
									"scores":	[-4.92215837130412]
								}, {
									"case":	16,
									"scores":	[-4.92215837130412]
								}, {
									"case":	17,
									"scores":	[-4.92215837130412]
								}, {
									"case":	18,
									"scores":	[-4.92215837130412]
								}, {
									"case":	19,
									"scores":	[-4.92215837130412]
								}, {
									"case":	20,
									"scores":	[-4.92215837130412]
								}, {
									"case":	21,
									"scores":	[-4.92215837130412]
								}, {
									"case":	22,
									"scores":	[-4.92215837130412]
								}, {
									"case":	23,
									"scores":	[-4.92215837130412]
								}, {
									"case":	24,
									"scores":	[-4.92215837130412]
								}, {
									"case":	25,
									"scores":	[-4.92215837130412]
								}, {
									"case":	26,
									"scores":	[-4.92215837130412]
								}, {
									"case":	27,
									"scores":	[-4.92215837130412]
								}, {
									"case":	28,
									"scores":	[-4.92215837130412]
								}, {
									"case":	29,
									"scores":	[-4.92215837130412]
								}, {
									"case":	30,
									"scores":	[-4.92215837130412]
								}, {
									"case":	31,
									"scores":	[-4.92215837130412]
								}, {
									"case":	32,
									"scores":	[-4.92215837130412]
								}, {
									"case":	33,
									"scores":	[-4.92215837130412]
								}, {
									"case":	34,
									"scores":	[-4.92215837130412]
								}, {
									"case":	35,
									"scores":	[-4.92215837130412]
								}, {
									"case":	36,
									"scores":	[-4.92215837130412]
								}, {
									"case":	37,
									"scores":	[-4.92215837130412]
								}, {
									"case":	38,
									"scores":	[-4.92215837130412]
								}, {
									"case":	39,
									"scores":	[-4.92215837130412]
								}, {
									"case":	40,
									"scores":	[-4.92215837130412]
								}, {
									"case":	41,
									"scores":	[-4.92215837130412]
								}, {
									"case":	42,
									"scores":	[-4.92215837130412]
								}, {
									"case":	43,
									"scores":	[-4.92215837130412]
								}, {
									"case":	44,
									"scores":	[-4.92215837130412]
								}, {
									"case":	45,
									"scores":	[-4.92215837130412]
								}, {
									"case":	46,
									"scores":	[-4.92215837130412]
								}, {
									"case":	47,
									"scores":	[-4.92215837130412]
								}, {
									"case":	48,
									"scores":	[-4.92215837130412]
								}, {
									"case":	49,
									"scores":	[-4.92215837130412]
								}, {
									"case":	50,
									"scores":	[-4.92215837130412]
								}, {
									"case":	51,
									"scores":	[-4.92215837130412]
								}, {
									"case":	52,
									"scores":	[-4.92215837130412]
								}, {
									"case":	53,
									"scores":	[-4.92215837130412]
								}, {
									"case":	54,
									"scores":	[-4.92215837130412]
								}, {
									"case":	55,
									"scores":	[-4.92215837130412]
								}, {
									"case":	56,
									"scores":	[-4.92215837130412]
								}, {
									"case":	57,
									"scores":	[-4.92215837130412]
								}, {
									"case":	58,
									"scores":	[-4.92215837130412]
								}, {
									"case":	59,
									"scores":	[-4.92215837130412]
								}, {
									"case":	60,
									"scores":	[-4.92215837130412]
								}, {
									"case":	61,
									"scores":	[-4.92215837130412]
								}, {
									"case":	62,
									"scores":	[-4.92215837130412]
								}, {
									"case":	63,
									"scores":	[-4.92215837130412]
								}, {
									"case":	64,
									"scores":	[-4.92215837130412]
								}, {
									"case":	65,
									"scores":	[-4.92215837130412]
								}, {
									"case":	66,
									"scores":	[-4.92215837130412]
								}, {
									"case":	67,
									"scores":	[-4.92215837130412]
								}, {
									"case":	68,
									"scores":	[-4.92215837130412]
								}, {
									"case":	69,
									"scores":	[-4.92215837130412]
								}, {
									"case":	70,
									"scores":	[-4.92215837130412]
								}, {
									"case":	71,
									"scores":	[-4.92215837130412]
								}, {
									"case":	72,
									"scores":	[-4.92215837130412]
								}, {
									"case":	73,
									"scores":	[-4.92215837130412]
								}, {
									"case":	74,
									"scores":	[-4.92215837130412]
								}, {
									"case":	75,
									"scores":	[-4.92215837130412]
								}, {
									"case":	76,
									"scores":	[-4.92215837130412]
								}, {
									"case":	77,
									"scores":	[-4.92215837130412]
								}, {
									"case":	78,
									"scores":	[-4.92215837130412]
								}, {
									"case":	79,
									"scores":	[-4.92215837130412]
								}, {
									"case":	80,
									"scores":	[-4.92215837130412]
								}, {
									"case":	81,
									"scores":	[-4.92215837130412]
								}, {
									"case":	82,
									"scores":	[-4.92215837130412]
								}, {
									"case":	83,
									"scores":	[-4.92215837130412]
								}, {
									"case":	84,
									"scores":	[-4.92215837130412]
								}, {
									"case":	85,
									"scores":	[-4.92215837130412]
								}, {
									"case":	86,
									"scores":	[-4.92215837130412]
								}, {
									"case":	87,
									"scores":	[-4.92215837130412]
								}, {
									"case":	88,
									"scores":	[-4.92215837130412]
								}, {
									"case":	89,
									"scores":	[-4.92215837130412]
								}, {
									"case":	90,
									"scores":	[-4.92215837130412]
								}, {
									"case":	91,
									"scores":	[-4.92215837130412]
								}, {
									"case":	92,
									"scores":	[-4.92215837130412]
								}, {
									"case":	93,
									"scores":	[-4.92215837130412]
								}, {
									"case":	94,
									"scores":	[-4.92215837130412]
								}, {
									"case":	95,
									"scores":	[-4.92215837130412]
								}, {
									"case":	96,
									"scores":	[-4.92215837130412]
								}, {
									"case":	97,
									"scores":	[-4.92215837130412]
								}, {
									"case":	98,
									"scores":	[-4.92215837130412]
								}, {
									"case":	99,
									"scores":	[-4.92215837130412]
								}, {
									"case":	100,
									"scores":	[-4.92215837130412]
								}, {
									"case":	101,
									"scores":	[-4.92215837130412]
								}, {
									"case":	102,
									"scores":	[-4.92215837130412]
								}, {
									"case":	103,
									"scores":	[-4.92215837130412]
								}, {
									"case":	104,
									"scores":	[-4.92215837130412]
								}, {
									"case":	105,
									"scores":	[-4.92215837130412]
								}, {
									"case":	106,
									"scores":	[-4.92215837130412]
								}, {
									"case":	107,
									"scores":	[-4.92215837130412]
								}, {
									"case":	108,
									"scores":	[-4.92215837130412]
								}, {
									"case":	109,
									"scores":	[-4.92215837130412]
								}, {
									"case":	110,
									"scores":	[-4.92215837130412]
								}, {
									"case":	111,
									"scores":	[-4.92215837130412]
								}, {
									"case":	112,
									"scores":	[-4.92215837130412]
								}, {
									"case":	113,
									"scores":	[-4.92215837130412]
								}, {
									"case":	114,
									"scores":	[-4.92215837130412]
								}, {
									"case":	115,
									"scores":	[-4.92215837130412]
								}, {
									"case":	116,
									"scores":	[-4.92215837130412]
								}, {
									"case":	117,
									"scores":	[-4.92215837130412]
								}, {
									"case":	118,
									"scores":	[-4.92215837130412]
								}, {
									"case":	119,
									"scores":	[-4.92215837130412]
								}, {
									"case":	120,
									"scores":	[-4.92215837130412]
								}, {
									"case":	121,
									"scores":	[-4.92215837130412]
								}, {
									"case":	122,
									"scores":	[-4.92215837130412]
								}, {
									"case":	123,
									"scores":	[-4.92215837130412]
								}, {
									"case":	124,
									"scores":	[-4.92215837130412]
								}, {
									"case":	125,
									"scores":	[-4.92215837130412]
								}, {
									"case":	126,
									"scores":	[-4.92215837130412]
								}, {
									"case":	127,
									"scores":	[-4.92215837130412]
								}, {
									"case":	128,
									"scores":	[-4.92215837130412]
								}, {
									"case":	129,
									"scores":	[-4.92215837130412]
								}, {
									"case":	130,
									"scores":	[-4.92215837130412]
								}, {
									"case":	131,
									"scores":	[-4.92215837130412]
								}, {
									"case":	132,
									"scores":	[-4.92215837130412]
								}, {
									"case":	133,
									"scores":	[-4.92215837130412]
								}, {
									"case":	134,
									"scores":	[-4.92215837130412]
								}, {
									"case":	135,
									"scores":	[-4.92215837130412]
								}, {
									"case":	136,
									"scores":	[-4.92215837130412]
								}, {
									"case":	137,
									"scores":	[-4.92215837130412]
								}, {
									"case":	138,
									"scores":	[-4.92215837130412]
								}, {
									"case":	139,
									"scores":	[-4.92215837130412]
								}, {
									"case":	140,
									"scores":	[-4.92215837130412]
								}, {
									"case":	141,
									"scores":	[-4.92215837130412]
								}, {
									"case":	142,
									"scores":	[-4.92215837130412]
								}, {
									"case":	143,
									"scores":	[-4.92215837130412]
								}, {
									"case":	144,
									"scores":	[-4.92215837130412]
								}, {
									"case":	145,
									"scores":	[-4.92215837130412]
								}, {
									"case":	146,
									"scores":	[-4.92215837130412]
								}, {
									"case":	147,
									"scores":	[-4.92215837130412]
								}, {
									"case":	148,
									"scores":	[-4.92215837130412]
								}, {
									"case":	149,
									"scores":	[-4.92215837130412]
								}, {
									"case":	150,
									"scores":	[-4.92215837130412]
								}, {
									"case":	151,
									"scores":	[-4.92215837130412]
								}, {
									"case":	152,
									"scores":	[-4.92215837130412]
								}, {
									"case":	153,
									"scores":	[-4.92215837130412]
								}, {
									"case":	154,
									"scores":	[-4.92215837130412]
								}, {
									"case":	155,
									"scores":	[-4.92215837130412]
								}, {
									"case":	156,
									"scores":	[-4.92215837130412]
								}, {
									"case":	157,
									"scores":	[-4.92215837130412]
								}, {
									"case":	158,
									"scores":	[-4.92215837130412]
								}, {
									"case":	159,
									"scores":	[-4.92215837130412]
								}, {
									"case":	160,
									"scores":	[-4.92215837130412]
								}, {
									"case":	161,
									"scores":	[-4.92215837130412]
								}, {
									"case":	162,
									"scores":	[-4.92215837130412]
								}, {
									"case":	163,
									"scores":	[-4.92215837130412]
								}, {
									"case":	164,
									"scores":	[-4.92215837130412]
								}, {
									"case":	165,
									"scores":	[-4.92215837130412]
								}, {
									"case":	166,
									"scores":	[-4.92215837130412]
								}, {
									"case":	167,
									"scores":	[-4.92215837130412]
								}, {
									"case":	168,
									"scores":	[-4.92215837130412]
								}, {
									"case":	169,
									"scores":	[-4.92215837130412]
								}, {
									"case":	170,
									"scores":	[-4.92215837130412]
								}, {
									"case":	171,
									"scores":	[-4.92215837130412]
								}, {
									"case":	172,
									"scores":	[-4.92215837130412]
								}, {
									"case":	173,
									"scores":	[-4.92215837130412]
								}, {
									"case":	174,
									"scores":	[-4.92215837130412]
								}, {
									"case":	175,
									"scores":	[-4.92215837130412]
								}, {
									"case":	176,
									"scores":	[-4.92215837130412]
								}, {
									"case":	177,
									"scores":	[-4.92215837130412]
								}, {
									"case":	178,
									"scores":	[-4.92215837130412]
								}, {
									"case":	179,
									"scores":	[-4.92215837130412]
								}, {
									"case":	180,
									"scores":	[-4.92215837130412]
								}, {
									"case":	181,
									"scores":	[-4.92215837130412]
								}, {
									"case":	182,
									"scores":	[-4.92215837130412]
								}, {
									"case":	183,
									"scores":	[-4.92215837130412]
								}, {
									"case":	184,
									"scores":	[-4.92215837130412]
								}, {
									"case":	185,
									"scores":	[-4.92215837130412]
								}, {
									"case":	186,
									"scores":	[-4.92215837130412]
								}, {
									"case":	187,
									"scores":	[-4.92215837130412]
								}, {
									"case":	188,
									"scores":	[-4.92215837130412]
								}, {
									"case":	189,
									"scores":	[-4.92215837130412]
								}, {
									"case":	190,
									"scores":	[-4.92215837130412]
								}, {
									"case":	191,
									"scores":	[-4.92215837130412]
								}, {
									"case":	192,
									"scores":	[-4.92215837130412]
								}, {
									"case":	193,
									"scores":	[-4.92215837130412]
								}, {
									"case":	194,
									"scores":	[-4.92215837130412]
								}, {
									"case":	195,
									"scores":	[-4.92215837130412]
								}, {
									"case":	196,
									"scores":	[-4.92215837130412]
								}, {
									"case":	197,
									"scores":	[-4.92215837130412]
								}, {
									"case":	198,
									"scores":	[-4.92215837130412]
								}, {
									"case":	199,
									"scores":	[-4.92215837130412]
								}, {
									"case":	200,
									"scores":	[-4.92215837130412]
								}, {
									"case":	201,
									"scores":	[-4.92215837130412]
								}, {
									"case":	202,
									"scores":	[-4.92215837130412]
								}, {
									"case":	203,
									"scores":	[-4.92215837130412]
								}, {
									"case":	204,
									"scores":	[-4.92215837130412]
								}, {
									"case":	205,
									"scores":	[-4.92215837130412]
								}, {
									"case":	206,
									"scores":	[-4.92215837130412]
								}, {
									"case":	207,
									"scores":	[-4.92215837130412]
								}, {
									"case":	208,
									"scores":	[-4.92215837130412]
								}, {
									"case":	209,
									"scores":	[-4.92215837130412]
								}, {
									"case":	210,
									"scores":	[-4.92215837130412]
								}, {
									"case":	211,
									"scores":	[-4.92215837130412]
								}, {
									"case":	212,
									"scores":	[-4.92215837130412]
								}, {
									"case":	213,
									"scores":	[-4.92215837130412]
								}, {
									"case":	214,
									"scores":	[-4.92215837130412]
								}, {
									"case":	215,
									"scores":	[-4.92215837130412]
								}, {
									"case":	216,
									"scores":	[-4.92215837130412]
								}, {
									"case":	217,
									"scores":	[-4.92215837130412]
								}, {
									"case":	218,
									"scores":	[-4.92215837130412]
								}, {
									"case":	219,
									"scores":	[-4.92215837130412]
								}, {
									"case":	220,
									"scores":	[-4.92215837130412]
								}, {
									"case":	221,
									"scores":	[-4.92215837130412]
								}, {
									"case":	222,
									"scores":	[-4.92215837130412]
								}, {
									"case":	223,
									"scores":	[-4.92215837130412]
								}, {
									"case":	224,
									"scores":	[-4.92215837130412]
								}, {
									"case":	225,
									"scores":	[-7.28354430850412, -7.51972008820412]
								}]
						}, {
							"switch":	95,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1858,
							"begin_column":	3,
							"end_line":	1858,
							"end_column":	8,
							"patch_codes":	["if (!__is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    fd = remove_ofname_fd;\n", "{\n}\n", "fd = (-1)", "fd = (0 * fd)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd != 0)", "fd = (fd + 0)", "fd = (fd - 0)", "fd = (fd == 0)", "fd = (fd)", "fd = (oldset != 0)", "fd = (oldset == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.03293438330412, -6.91282722830412]
								}, {
									"case":	2,
									"scores":	[-4.92215837130412]
								}, {
									"case":	3,
									"scores":	[-4.92215837130412]
								}, {
									"case":	4,
									"scores":	[-4.92215837130412]
								}, {
									"case":	5,
									"scores":	[-4.92215837130412]
								}, {
									"case":	6,
									"scores":	[-4.92215837130412]
								}, {
									"case":	7,
									"scores":	[-4.92215837130412]
								}, {
									"case":	8,
									"scores":	[-4.92215837130412]
								}, {
									"case":	9,
									"scores":	[-4.92215837130412]
								}, {
									"case":	10,
									"scores":	[-4.92215837130412]
								}, {
									"case":	11,
									"scores":	[-4.92215837130412]
								}, {
									"case":	12,
									"scores":	[-4.92215837130412]
								}, {
									"case":	13,
									"scores":	[-4.92215837130412]
								}, {
									"case":	14,
									"scores":	[-4.92215837130412]
								}]
						}]
				}, {
					"line":	1860,
					"switches":	[{
							"switch":	98,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1861,
							"begin_column":	5,
							"end_line":	1861,
							"end_column":	5,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1861\", 2, &(remove_ofname_fd), sizeof (remove_ofname_fd), &(fd), sizeof (fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.952428420063185]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}, {
									"case":	16,
									"scores":	[-3.952428420063185]
								}, {
									"case":	17,
									"scores":	[-3.952428420063185]
								}, {
									"case":	18,
									"scores":	[-3.952428420063185]
								}, {
									"case":	19,
									"scores":	[-3.952428420063185]
								}, {
									"case":	20,
									"scores":	[-3.952428420063185]
								}, {
									"case":	21,
									"scores":	[-3.952428420063185]
								}, {
									"case":	22,
									"scores":	[-3.952428420063185]
								}, {
									"case":	23,
									"scores":	[-3.952428420063185]
								}, {
									"case":	24,
									"scores":	[-3.952428420063185]
								}, {
									"case":	25,
									"scores":	[-3.952428420063185]
								}, {
									"case":	26,
									"scores":	[-3.952428420063185]
								}, {
									"case":	27,
									"scores":	[-3.952428420063185]
								}, {
									"case":	28,
									"scores":	[-3.952428420063185]
								}, {
									"case":	29,
									"scores":	[-3.952428420063185]
								}, {
									"case":	30,
									"scores":	[-3.952428420063185]
								}, {
									"case":	31,
									"scores":	[-3.952428420063185]
								}, {
									"case":	32,
									"scores":	[-3.952428420063185]
								}, {
									"case":	33,
									"scores":	[-3.952428420063185]
								}, {
									"case":	34,
									"scores":	[-3.952428420063185]
								}, {
									"case":	35,
									"scores":	[-3.952428420063185]
								}, {
									"case":	36,
									"scores":	[-3.952428420063185]
								}, {
									"case":	37,
									"scores":	[-3.952428420063185]
								}, {
									"case":	38,
									"scores":	[-3.952428420063185]
								}, {
									"case":	39,
									"scores":	[-3.952428420063185]
								}, {
									"case":	40,
									"scores":	[-3.952428420063185]
								}, {
									"case":	41,
									"scores":	[-3.952428420063185]
								}, {
									"case":	42,
									"scores":	[-3.952428420063185]
								}, {
									"case":	43,
									"scores":	[-3.952428420063185]
								}, {
									"case":	44,
									"scores":	[-3.952428420063185]
								}, {
									"case":	45,
									"scores":	[-3.952428420063185]
								}, {
									"case":	46,
									"scores":	[-3.952428420063185]
								}, {
									"case":	47,
									"scores":	[-3.952428420063185]
								}, {
									"case":	48,
									"scores":	[-3.952428420063185]
								}, {
									"case":	49,
									"scores":	[-3.952428420063185]
								}, {
									"case":	50,
									"scores":	[-3.952428420063185]
								}, {
									"case":	51,
									"scores":	[-3.952428420063185]
								}, {
									"case":	52,
									"scores":	[-3.952428420063185]
								}, {
									"case":	53,
									"scores":	[-3.952428420063185]
								}, {
									"case":	54,
									"scores":	[-3.952428420063185]
								}, {
									"case":	55,
									"scores":	[-3.952428420063185]
								}, {
									"case":	56,
									"scores":	[-3.952428420063185]
								}, {
									"case":	57,
									"scores":	[-3.952428420063185]
								}, {
									"case":	58,
									"scores":	[-3.952428420063185]
								}, {
									"case":	59,
									"scores":	[-3.952428420063185]
								}, {
									"case":	60,
									"scores":	[-3.952428420063185]
								}, {
									"case":	61,
									"scores":	[-3.952428420063185]
								}, {
									"case":	62,
									"scores":	[-3.952428420063185]
								}, {
									"case":	63,
									"scores":	[-3.952428420063185]
								}, {
									"case":	64,
									"scores":	[-3.952428420063185]
								}, {
									"case":	65,
									"scores":	[-3.952428420063185]
								}, {
									"case":	66,
									"scores":	[-3.952428420063185]
								}, {
									"case":	67,
									"scores":	[-3.952428420063185]
								}, {
									"case":	68,
									"scores":	[-3.952428420063185]
								}, {
									"case":	69,
									"scores":	[-3.952428420063185]
								}, {
									"case":	70,
									"scores":	[-3.952428420063185]
								}, {
									"case":	71,
									"scores":	[-3.952428420063185]
								}, {
									"case":	72,
									"scores":	[-3.952428420063185]
								}, {
									"case":	73,
									"scores":	[-3.952428420063185]
								}, {
									"case":	74,
									"scores":	[-3.952428420063185]
								}, {
									"case":	75,
									"scores":	[-3.952428420063185]
								}, {
									"case":	76,
									"scores":	[-3.952428420063185]
								}, {
									"case":	77,
									"scores":	[-3.952428420063185]
								}, {
									"case":	78,
									"scores":	[-3.952428420063185]
								}, {
									"case":	79,
									"scores":	[-3.952428420063185]
								}, {
									"case":	80,
									"scores":	[-3.952428420063185]
								}, {
									"case":	81,
									"scores":	[-3.952428420063185]
								}, {
									"case":	82,
									"scores":	[-3.952428420063185]
								}, {
									"case":	83,
									"scores":	[-3.952428420063185]
								}, {
									"case":	84,
									"scores":	[-3.952428420063185]
								}, {
									"case":	85,
									"scores":	[-3.952428420063185]
								}, {
									"case":	86,
									"scores":	[-3.952428420063185]
								}, {
									"case":	87,
									"scores":	[-3.952428420063185]
								}, {
									"case":	88,
									"scores":	[-3.952428420063185]
								}, {
									"case":	89,
									"scores":	[-3.952428420063185]
								}, {
									"case":	90,
									"scores":	[-3.952428420063185]
								}, {
									"case":	91,
									"scores":	[-3.952428420063185]
								}, {
									"case":	92,
									"scores":	[-3.952428420063185]
								}, {
									"case":	93,
									"scores":	[-3.952428420063185]
								}, {
									"case":	94,
									"scores":	[-3.952428420063185]
								}, {
									"case":	95,
									"scores":	[-3.952428420063185]
								}, {
									"case":	96,
									"scores":	[-3.952428420063185]
								}, {
									"case":	97,
									"scores":	[-3.952428420063185]
								}, {
									"case":	98,
									"scores":	[-3.952428420063185]
								}, {
									"case":	99,
									"scores":	[-3.952428420063185]
								}, {
									"case":	100,
									"scores":	[-3.952428420063185]
								}, {
									"case":	101,
									"scores":	[-3.952428420063185]
								}, {
									"case":	102,
									"scores":	[-3.952428420063185]
								}, {
									"case":	103,
									"scores":	[-3.952428420063185]
								}, {
									"case":	104,
									"scores":	[-3.952428420063185]
								}, {
									"case":	105,
									"scores":	[-3.952428420063185]
								}, {
									"case":	106,
									"scores":	[-3.952428420063185]
								}, {
									"case":	107,
									"scores":	[-3.952428420063185]
								}, {
									"case":	108,
									"scores":	[-3.952428420063185]
								}, {
									"case":	109,
									"scores":	[-3.952428420063185]
								}, {
									"case":	110,
									"scores":	[-3.952428420063185]
								}, {
									"case":	111,
									"scores":	[-3.952428420063185]
								}, {
									"case":	112,
									"scores":	[-3.952428420063185]
								}, {
									"case":	113,
									"scores":	[-3.952428420063185]
								}, {
									"case":	114,
									"scores":	[-3.952428420063185]
								}, {
									"case":	115,
									"scores":	[-3.952428420063185]
								}, {
									"case":	116,
									"scores":	[-3.952428420063185]
								}, {
									"case":	117,
									"scores":	[-3.952428420063185]
								}, {
									"case":	118,
									"scores":	[-3.952428420063185]
								}, {
									"case":	119,
									"scores":	[-3.952428420063185]
								}, {
									"case":	120,
									"scores":	[-3.952428420063185]
								}, {
									"case":	121,
									"scores":	[-3.952428420063185]
								}, {
									"case":	122,
									"scores":	[-3.952428420063185]
								}, {
									"case":	123,
									"scores":	[-3.952428420063185]
								}, {
									"case":	124,
									"scores":	[-3.952428420063185]
								}, {
									"case":	125,
									"scores":	[-3.952428420063185]
								}, {
									"case":	126,
									"scores":	[-3.952428420063185]
								}, {
									"case":	127,
									"scores":	[-3.952428420063185]
								}, {
									"case":	128,
									"scores":	[-3.952428420063185]
								}, {
									"case":	129,
									"scores":	[-3.952428420063185]
								}, {
									"case":	130,
									"scores":	[-3.952428420063185]
								}, {
									"case":	131,
									"scores":	[-3.952428420063185]
								}, {
									"case":	132,
									"scores":	[-3.952428420063185]
								}, {
									"case":	133,
									"scores":	[-3.952428420063185]
								}, {
									"case":	134,
									"scores":	[-3.952428420063185]
								}, {
									"case":	135,
									"scores":	[-3.952428420063185]
								}, {
									"case":	136,
									"scores":	[-3.952428420063185]
								}, {
									"case":	137,
									"scores":	[-3.952428420063185]
								}, {
									"case":	138,
									"scores":	[-3.952428420063185]
								}, {
									"case":	139,
									"scores":	[-3.952428420063185]
								}, {
									"case":	140,
									"scores":	[-3.952428420063185]
								}, {
									"case":	141,
									"scores":	[-3.952428420063185]
								}, {
									"case":	142,
									"scores":	[-3.952428420063185]
								}, {
									"case":	143,
									"scores":	[-3.952428420063185]
								}, {
									"case":	144,
									"scores":	[-3.952428420063185]
								}, {
									"case":	145,
									"scores":	[-3.952428420063185]
								}, {
									"case":	146,
									"scores":	[-3.952428420063185]
								}, {
									"case":	147,
									"scores":	[-3.952428420063185]
								}, {
									"case":	148,
									"scores":	[-3.952428420063185]
								}, {
									"case":	149,
									"scores":	[-3.952428420063185]
								}, {
									"case":	150,
									"scores":	[-3.952428420063185]
								}, {
									"case":	151,
									"scores":	[-3.952428420063185]
								}, {
									"case":	152,
									"scores":	[-3.952428420063185]
								}, {
									"case":	153,
									"scores":	[-3.952428420063185]
								}, {
									"case":	154,
									"scores":	[-3.952428420063185]
								}, {
									"case":	155,
									"scores":	[-3.952428420063185]
								}, {
									"case":	156,
									"scores":	[-3.952428420063185]
								}, {
									"case":	157,
									"scores":	[-3.952428420063185]
								}, {
									"case":	158,
									"scores":	[-3.952428420063185]
								}, {
									"case":	159,
									"scores":	[-3.952428420063185]
								}, {
									"case":	160,
									"scores":	[-3.952428420063185]
								}, {
									"case":	161,
									"scores":	[-3.952428420063185]
								}, {
									"case":	162,
									"scores":	[-3.952428420063185]
								}, {
									"case":	163,
									"scores":	[-3.952428420063185]
								}, {
									"case":	164,
									"scores":	[-3.952428420063185]
								}, {
									"case":	165,
									"scores":	[-3.952428420063185]
								}, {
									"case":	166,
									"scores":	[-3.952428420063185]
								}, {
									"case":	167,
									"scores":	[-3.952428420063185]
								}, {
									"case":	168,
									"scores":	[-3.952428420063185]
								}, {
									"case":	169,
									"scores":	[-3.952428420063185]
								}, {
									"case":	170,
									"scores":	[-3.952428420063185]
								}, {
									"case":	171,
									"scores":	[-3.952428420063185]
								}, {
									"case":	172,
									"scores":	[-3.952428420063185]
								}, {
									"case":	173,
									"scores":	[-3.952428420063185]
								}, {
									"case":	174,
									"scores":	[-3.952428420063185]
								}, {
									"case":	175,
									"scores":	[-3.952428420063185]
								}, {
									"case":	176,
									"scores":	[-3.952428420063185]
								}, {
									"case":	177,
									"scores":	[-3.952428420063185]
								}, {
									"case":	178,
									"scores":	[-3.952428420063185]
								}, {
									"case":	179,
									"scores":	[-3.952428420063185]
								}, {
									"case":	180,
									"scores":	[-3.952428420063185]
								}, {
									"case":	181,
									"scores":	[-3.952428420063185]
								}, {
									"case":	182,
									"scores":	[-3.952428420063185]
								}, {
									"case":	183,
									"scores":	[-3.952428420063185]
								}, {
									"case":	184,
									"scores":	[-3.952428420063185]
								}, {
									"case":	185,
									"scores":	[-3.952428420063185]
								}, {
									"case":	186,
									"scores":	[-3.952428420063185]
								}, {
									"case":	187,
									"scores":	[-3.952428420063185]
								}, {
									"case":	188,
									"scores":	[-3.952428420063185]
								}, {
									"case":	189,
									"scores":	[-3.952428420063185]
								}, {
									"case":	190,
									"scores":	[-3.952428420063185]
								}, {
									"case":	191,
									"scores":	[-3.952428420063185]
								}, {
									"case":	192,
									"scores":	[-3.952428420063185]
								}, {
									"case":	193,
									"scores":	[-3.952428420063185]
								}, {
									"case":	194,
									"scores":	[-3.952428420063185]
								}, {
									"case":	195,
									"scores":	[-3.952428420063185]
								}, {
									"case":	196,
									"scores":	[-3.952428420063185]
								}, {
									"case":	197,
									"scores":	[-3.952428420063185]
								}, {
									"case":	198,
									"scores":	[-3.952428420063185]
								}, {
									"case":	199,
									"scores":	[-3.952428420063185]
								}, {
									"case":	200,
									"scores":	[-3.952428420063185]
								}, {
									"case":	201,
									"scores":	[-3.952428420063185]
								}, {
									"case":	202,
									"scores":	[-3.952428420063185]
								}, {
									"case":	203,
									"scores":	[-3.952428420063185]
								}, {
									"case":	204,
									"scores":	[-3.952428420063185]
								}, {
									"case":	205,
									"scores":	[-3.952428420063185]
								}, {
									"case":	206,
									"scores":	[-3.952428420063185]
								}, {
									"case":	207,
									"scores":	[-3.952428420063185]
								}, {
									"case":	208,
									"scores":	[-3.952428420063185]
								}, {
									"case":	209,
									"scores":	[-3.952428420063185]
								}, {
									"case":	210,
									"scores":	[-3.952428420063185]
								}, {
									"case":	211,
									"scores":	[-3.952428420063185]
								}, {
									"case":	212,
									"scores":	[-3.952428420063185]
								}, {
									"case":	213,
									"scores":	[-3.952428420063185]
								}, {
									"case":	214,
									"scores":	[-3.952428420063185]
								}, {
									"case":	215,
									"scores":	[-3.952428420063185]
								}, {
									"case":	216,
									"scores":	[-3.952428420063185]
								}, {
									"case":	217,
									"scores":	[-3.952428420063185]
								}, {
									"case":	218,
									"scores":	[-3.952428420063185]
								}, {
									"case":	219,
									"scores":	[-3.952428420063185]
								}, {
									"case":	220,
									"scores":	[-3.952428420063185]
								}, {
									"case":	221,
									"scores":	[-3.952428420063185]
								}, {
									"case":	222,
									"scores":	[-3.952428420063185]
								}, {
									"case":	223,
									"scores":	[-3.952428420063185]
								}, {
									"case":	224,
									"scores":	[-3.952428420063185]
								}, {
									"case":	225,
									"scores":	[-5.7603810078631845, -5.2612335200631852]
								}]
						}, {
							"switch":	99,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1861,
							"begin_column":	7,
							"end_line":	1861,
							"end_column":	27,
							"patch_codes":	["if (!__is_neg(\"\", \"L1861\", 2, &(remove_ofname_fd), sizeof (remove_ofname_fd), &(fd), sizeof (fd)))\n    remove_ofname_fd = -1;\n", "{\n}\n", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "remove_ofname_fd = -(0 * fd)", "remove_ofname_fd = -(0)", "remove_ofname_fd = -(fd != 0)", "remove_ofname_fd = -(fd + 0)", "remove_ofname_fd = -(fd - 0)", "remove_ofname_fd = -(fd == 0)", "remove_ofname_fd = -(oldset != 0)", "remove_ofname_fd = -(oldset == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2997481930631851, -3.523791820063185]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}]
						}]
				}, {
					"line":	1861,
					"switches":	[{
							"switch":	100,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1862,
							"begin_column":	5,
							"end_line":	1862,
							"end_column":	5,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1862\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	51,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	52,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	53,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	54,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	55,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	56,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	57,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	58,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	59,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	60,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	61,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	62,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	63,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	64,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	65,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	66,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	67,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	68,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	69,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	70,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	71,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	72,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	73,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	74,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	75,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	76,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	77,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	78,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	79,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	80,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	81,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	82,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	83,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	84,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	85,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	86,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	87,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	88,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	89,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	90,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	91,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	92,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	93,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	94,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	95,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	96,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	97,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	98,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	99,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	100,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	101,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	102,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	103,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	104,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	105,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	106,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	107,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	108,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	109,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	110,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	111,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	112,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	113,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	114,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	115,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	116,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	117,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	118,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	119,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	120,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	121,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	122,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	123,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	124,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	125,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	126,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	127,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	128,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	129,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	130,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	131,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	132,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	133,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	134,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	135,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	136,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	137,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	138,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	139,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	140,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	141,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	142,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	143,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	144,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	145,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	146,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	147,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	148,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	149,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	150,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	151,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	152,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	153,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	154,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	155,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	156,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	157,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	158,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	159,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	160,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	161,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	162,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	163,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	164,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	165,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	166,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	167,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	168,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	169,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	170,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	171,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	172,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	173,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	174,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	175,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	176,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	177,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	178,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	179,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	180,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	181,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	182,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	183,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	184,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	185,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	186,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	187,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	188,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	189,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	190,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	191,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	192,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	193,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	194,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	195,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	196,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	197,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	198,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	199,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	200,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	201,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	202,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	203,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	204,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	205,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	206,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	207,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	208,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	209,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	210,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	211,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	212,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	213,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	214,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	215,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	216,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	217,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	218,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	219,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	220,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	221,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	222,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	223,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	224,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	225,
									"scores":	[-4.5172960327456657, -4.4705492358456658]
								}]
						}, {
							"switch":	101,
							"types":	[[], [], [1], [], [], [], [768, 769, 770, 771, 772, 773, 774, 775], [], [707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705], [], [], [706]],
							"begin_line":	1862,
							"begin_column":	7,
							"end_line":	1862,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L1862\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    close(fd);\n", "_IO_putc(fd, 0)", "__sysv_signal(fd, 0)", "__sysv_signal(fd, abort_gzip_signal)", "__sysv_signal(fd, bi_init)", "__tolower_l(fd, 0)", "__toupper_l(fd, 0)", "clock_adjtime(fd, 0)", "clock_getcpuclockid(fd, 0)", "clock_getres(fd, 0)", "clock_gettime(fd, 0)", "clock_settime(fd, 0)", "copy(fd, -1)", "copy(fd, 0)", "copy(fd, 1)", "copy(fd, 2)", "copy(fd, ascii)", "copy(fd, block_mode)", "copy(fd, decompress)", "copy(fd, decrypt)", "copy(fd, do_lzw)", "copy(fd, exit_code)", "copy(fd, exiting_signal)", "copy(fd, fd)", "copy(fd, force)", "copy(fd, foreground)", "copy(fd, ifd)", "copy(fd, last_member)", "copy(fd, level)", "copy(fd, list)", "copy(fd, maxbits)", "copy(fd, method)", "copy(fd, no_name)", "copy(fd, no_time)", "copy(fd, ofd)", "copy(fd, part_nb)", "copy(fd, quiet)", "copy(fd, recursive)", "copy(fd, remove_ofname_fd)", "copy(fd, save_orig_name)", "copy(fd, test)", "copy(fd, to_stdout)", "copy(fd, verbose)", "ct_tally(fd, -1)", "ct_tally(fd, 0)", "ct_tally(fd, 1)", "ct_tally(fd, 2)", "ct_tally(fd, ascii)", "ct_tally(fd, block_mode)", "ct_tally(fd, decompress)", "ct_tally(fd, decrypt)", "ct_tally(fd, do_lzw)", "ct_tally(fd, exit_code)", "ct_tally(fd, exiting_signal)", "ct_tally(fd, fd)", "ct_tally(fd, force)", "ct_tally(fd, foreground)", "ct_tally(fd, ifd)", "ct_tally(fd, last_member)", "ct_tally(fd, level)", "ct_tally(fd, list)", "ct_tally(fd, maxbits)", "ct_tally(fd, method)", "ct_tally(fd, no_name)", "ct_tally(fd, no_time)", "ct_tally(fd, ofd)", "ct_tally(fd, part_nb)", "ct_tally(fd, quiet)", "ct_tally(fd, recursive)", "ct_tally(fd, remove_ofname_fd)", "ct_tally(fd, save_orig_name)", "ct_tally(fd, test)", "ct_tally(fd, to_stdout)", "ct_tally(fd, verbose)", "daemon(fd, -1)", "daemon(fd, 0)", "daemon(fd, 1)", "daemon(fd, 2)", "daemon(fd, ascii)", "daemon(fd, block_mode)", "daemon(fd, decompress)", "daemon(fd, decrypt)", "daemon(fd, do_lzw)", "daemon(fd, exit_code)", "daemon(fd, exiting_signal)", "daemon(fd, fd)", "daemon(fd, force)", "daemon(fd, foreground)", "daemon(fd, ifd)", "daemon(fd, last_member)", "daemon(fd, level)", "daemon(fd, list)", "daemon(fd, maxbits)", "daemon(fd, method)", "daemon(fd, no_name)", "daemon(fd, no_time)", "daemon(fd, ofd)", "daemon(fd, part_nb)", "daemon(fd, quiet)", "daemon(fd, recursive)", "daemon(fd, remove_ofname_fd)", "daemon(fd, save_orig_name)", "daemon(fd, test)", "daemon(fd, to_stdout)", "daemon(fd, verbose)", "div(fd, -1)", "div(fd, 0)", "div(fd, 1)", "div(fd, 2)", "div(fd, ascii)", "div(fd, block_mode)", "div(fd, decompress)", "div(fd, decrypt)", "div(fd, do_lzw)", "div(fd, exit_code)", "div(fd, exiting_signal)", "div(fd, fd)", "div(fd, force)", "div(fd, foreground)", "div(fd, ifd)", "div(fd, last_member)", "div(fd, level)", "div(fd, list)", "div(fd, maxbits)", "div(fd, method)", "div(fd, no_name)", "div(fd, no_time)", "div(fd, ofd)", "div(fd, part_nb)", "div(fd, quiet)", "div(fd, recursive)", "div(fd, remove_ofname_fd)", "div(fd, save_orig_name)", "div(fd, test)", "div(fd, to_stdout)", "div(fd, verbose)", "do_list(fd, -1)", "do_list(fd, 0)", "do_list(fd, 1)", "do_list(fd, 2)", "do_list(fd, ascii)", "do_list(fd, block_mode)", "do_list(fd, decompress)", "do_list(fd, decrypt)", "do_list(fd, do_lzw)", "do_list(fd, exit_code)", "do_list(fd, exiting_signal)", "do_list(fd, fd)", "do_list(fd, force)", "do_list(fd, foreground)", "do_list(fd, ifd)", "do_list(fd, last_member)", "do_list(fd, level)", "do_list(fd, list)", "do_list(fd, maxbits)", "do_list(fd, method)", "do_list(fd, no_name)", "do_list(fd, no_time)", "do_list(fd, ofd)", "do_list(fd, part_nb)", "do_list(fd, quiet)", "do_list(fd, recursive)", "do_list(fd, remove_ofname_fd)", "do_list(fd, save_orig_name)", "do_list(fd, test)", "do_list(fd, to_stdout)", "do_list(fd, verbose)", "dup2(fd, -1)", "dup2(fd, 0)", "dup2(fd, 1)", "dup2(fd, 2)", "dup2(fd, ascii)", "dup2(fd, block_mode)", "dup2(fd, decompress)", "dup2(fd, decrypt)", "dup2(fd, do_lzw)", "dup2(fd, exit_code)", "dup2(fd, exiting_signal)", "dup2(fd, fd)", "dup2(fd, force)", "dup2(fd, foreground)", "dup2(fd, ifd)", "dup2(fd, last_member)", "dup2(fd, level)", "dup2(fd, list)", "dup2(fd, maxbits)", "dup2(fd, method)", "dup2(fd, no_name)", "dup2(fd, no_time)", "dup2(fd, ofd)", "dup2(fd, part_nb)", "dup2(fd, quiet)", "dup2(fd, recursive)", "dup2(fd, remove_ofname_fd)", "dup2(fd, save_orig_name)", "dup2(fd, test)", "dup2(fd, to_stdout)", "dup2(fd, verbose)", "fchmod(fd, -1)", "fchmod(fd, 0)", "fchmod(fd, 1)", "fchmod(fd, 2)", "fchmod(fd, inptr)", "fchmod(fd, insize)", "fchmod(fd, outcnt)", "fdopen(fd, 0)", "fpathconf(fd, -1)", "fpathconf(fd, 0)", "fpathconf(fd, 1)", "fpathconf(fd, 2)", "fpathconf(fd, ascii)", "fpathconf(fd, block_mode)", "fpathconf(fd, decompress)", "fpathconf(fd, decrypt)", "fpathconf(fd, do_lzw)", "fpathconf(fd, exit_code)", "fpathconf(fd, exiting_signal)", "fpathconf(fd, fd)", "fpathconf(fd, force)", "fpathconf(fd, foreground)", "fpathconf(fd, ifd)", "fpathconf(fd, last_member)", "fpathconf(fd, level)", "fpathconf(fd, list)", "fpathconf(fd, maxbits)", "fpathconf(fd, method)", "fpathconf(fd, no_name)", "fpathconf(fd, no_time)", "fpathconf(fd, ofd)", "fpathconf(fd, part_nb)", "fpathconf(fd, quiet)", "fpathconf(fd, recursive)", "fpathconf(fd, remove_ofname_fd)", "fpathconf(fd, save_orig_name)", "fpathconf(fd, test)", "fpathconf(fd, to_stdout)", "fpathconf(fd, verbose)", "fputc(fd, 0)", "fputc_unlocked(fd, 0)", "fstat(fd, 0)", "fstat64(fd, 0)", "ftruncate(fd, -1)", "ftruncate(fd, 0)", "ftruncate(fd, 1)", "ftruncate(fd, 2)", "ftruncate(fd, bytes_in)", "ftruncate(fd, bytes_out)", "ftruncate(fd, header_bytes)", "ftruncate(fd, ifile_size)", "ftruncate(fd, total_in)", "ftruncate(fd, total_out)", "ftruncate64(fd, -1)", "ftruncate64(fd, 0)", "ftruncate64(fd, 1)", "ftruncate64(fd, 2)", "ftruncate64(fd, bytes_in)", "ftruncate64(fd, bytes_out)", "ftruncate64(fd, header_bytes)", "ftruncate64(fd, ifile_size)", "ftruncate64(fd, total_in)", "ftruncate64(fd, total_out)", "futimens(fd, 0)", "getgroups(fd, 0)", "isalnum_l(fd, 0)", "isalpha_l(fd, 0)", "isblank_l(fd, 0)", "iscntrl_l(fd, 0)", "isctype(fd, -1)", "isctype(fd, 0)", "isctype(fd, 1)", "isctype(fd, 2)", "isctype(fd, ascii)", "isctype(fd, block_mode)", "isctype(fd, decompress)", "isctype(fd, decrypt)", "isctype(fd, do_lzw)", "isctype(fd, exit_code)", "isctype(fd, exiting_signal)", "isctype(fd, fd)", "isctype(fd, force)", "isctype(fd, foreground)", "isctype(fd, ifd)", "isctype(fd, last_member)", "isctype(fd, level)", "isctype(fd, list)", "isctype(fd, maxbits)", "isctype(fd, method)", "isctype(fd, no_name)", "isctype(fd, no_time)", "isctype(fd, ofd)", "isctype(fd, part_nb)", "isctype(fd, quiet)", "isctype(fd, recursive)", "isctype(fd, remove_ofname_fd)", "isctype(fd, save_orig_name)", "isctype(fd, test)", "isctype(fd, to_stdout)", "isctype(fd, verbose)", "isdigit_l(fd, 0)", "isgraph_l(fd, 0)", "islower_l(fd, 0)", "isprint_l(fd, 0)", "ispunct_l(fd, 0)", "isspace_l(fd, 0)", "isupper_l(fd, 0)", "isxdigit_l(fd, 0)", "kill(fd, -1)", "kill(fd, 0)", "kill(fd, 1)", "kill(fd, 2)", "kill(fd, ascii)", "kill(fd, block_mode)", "kill(fd, decompress)", "kill(fd, decrypt)", "kill(fd, do_lzw)", "kill(fd, exit_code)", "kill(fd, exiting_signal)", "kill(fd, fd)", "kill(fd, force)", "kill(fd, foreground)", "kill(fd, ifd)", "kill(fd, last_member)", "kill(fd, level)", "kill(fd, list)", "kill(fd, maxbits)", "kill(fd, method)", "kill(fd, no_name)", "kill(fd, no_time)", "kill(fd, ofd)", "kill(fd, part_nb)", "kill(fd, quiet)", "kill(fd, recursive)", "kill(fd, remove_ofname_fd)", "kill(fd, save_orig_name)", "kill(fd, test)", "kill(fd, to_stdout)", "kill(fd, verbose)", "killpg(fd, -1)", "killpg(fd, 0)", "killpg(fd, 1)", "killpg(fd, 2)", "killpg(fd, ascii)", "killpg(fd, block_mode)", "killpg(fd, decompress)", "killpg(fd, decrypt)", "killpg(fd, do_lzw)", "killpg(fd, exit_code)", "killpg(fd, exiting_signal)", "killpg(fd, fd)", "killpg(fd, force)", "killpg(fd, foreground)", "killpg(fd, ifd)", "killpg(fd, last_member)", "killpg(fd, level)", "killpg(fd, list)", "killpg(fd, maxbits)", "killpg(fd, method)", "killpg(fd, no_name)", "killpg(fd, no_time)", "killpg(fd, ofd)", "killpg(fd, part_nb)", "killpg(fd, quiet)", "killpg(fd, recursive)", "killpg(fd, remove_ofname_fd)", "killpg(fd, save_orig_name)", "killpg(fd, test)", "killpg(fd, to_stdout)", "killpg(fd, verbose)", "lm_init(fd, 0)", "lzw(fd, -1)", "lzw(fd, 0)", "lzw(fd, 1)", "lzw(fd, 2)", "lzw(fd, ascii)", "lzw(fd, block_mode)", "lzw(fd, decompress)", "lzw(fd, decrypt)", "lzw(fd, do_lzw)", "lzw(fd, exit_code)", "lzw(fd, exiting_signal)", "lzw(fd, fd)", "lzw(fd, force)", "lzw(fd, foreground)", "lzw(fd, ifd)", "lzw(fd, last_member)", "lzw(fd, level)", "lzw(fd, list)", "lzw(fd, maxbits)", "lzw(fd, method)", "lzw(fd, no_name)", "lzw(fd, no_time)", "lzw(fd, ofd)", "lzw(fd, part_nb)", "lzw(fd, quiet)", "lzw(fd, recursive)", "lzw(fd, remove_ofname_fd)", "lzw(fd, save_orig_name)", "lzw(fd, test)", "lzw(fd, to_stdout)", "lzw(fd, verbose)", "main(fd, 0)", "main(fd, args)", "psignal(fd, 0)", "putc(fd, 0)", "putc_unlocked(fd, 0)", "putw(fd, 0)", "send_bits(fd, -1)", "send_bits(fd, 0)", "send_bits(fd, 1)", "send_bits(fd, 2)", "send_bits(fd, ascii)", "send_bits(fd, block_mode)", "send_bits(fd, decompress)", "send_bits(fd, decrypt)", "send_bits(fd, do_lzw)", "send_bits(fd, exit_code)", "send_bits(fd, exiting_signal)", "send_bits(fd, fd)", "send_bits(fd, force)", "send_bits(fd, foreground)", "send_bits(fd, ifd)", "send_bits(fd, last_member)", "send_bits(fd, level)", "send_bits(fd, list)", "send_bits(fd, maxbits)", "send_bits(fd, method)", "send_bits(fd, no_name)", "send_bits(fd, no_time)", "send_bits(fd, ofd)", "send_bits(fd, part_nb)", "send_bits(fd, quiet)", "send_bits(fd, recursive)", "send_bits(fd, remove_ofname_fd)", "send_bits(fd, save_orig_name)", "send_bits(fd, test)", "send_bits(fd, to_stdout)", "send_bits(fd, verbose)", "setpgid(fd, -1)", "setpgid(fd, 0)", "setpgid(fd, 1)", "setpgid(fd, 2)", "setpgid(fd, ascii)", "setpgid(fd, block_mode)", "setpgid(fd, decompress)", "setpgid(fd, decrypt)", "setpgid(fd, do_lzw)", "setpgid(fd, exit_code)", "setpgid(fd, exiting_signal)", "setpgid(fd, fd)", "setpgid(fd, force)", "setpgid(fd, foreground)", "setpgid(fd, ifd)", "setpgid(fd, last_member)", "setpgid(fd, level)", "setpgid(fd, list)", "setpgid(fd, maxbits)", "setpgid(fd, method)", "setpgid(fd, no_name)", "setpgid(fd, no_time)", "setpgid(fd, ofd)", "setpgid(fd, part_nb)", "setpgid(fd, quiet)", "setpgid(fd, recursive)", "setpgid(fd, remove_ofname_fd)", "setpgid(fd, save_orig_name)", "setpgid(fd, test)", "setpgid(fd, to_stdout)", "setpgid(fd, verbose)", "siginterrupt(fd, -1)", "siginterrupt(fd, 0)", "siginterrupt(fd, 1)", "siginterrupt(fd, 2)", "siginterrupt(fd, ascii)", "siginterrupt(fd, block_mode)", "siginterrupt(fd, decompress)", "siginterrupt(fd, decrypt)", "siginterrupt(fd, do_lzw)", "siginterrupt(fd, exit_code)", "siginterrupt(fd, exiting_signal)", "siginterrupt(fd, fd)", "siginterrupt(fd, force)", "siginterrupt(fd, foreground)", "siginterrupt(fd, ifd)", "siginterrupt(fd, last_member)", "siginterrupt(fd, level)", "siginterrupt(fd, list)", "siginterrupt(fd, maxbits)", "siginterrupt(fd, method)", "siginterrupt(fd, no_name)", "siginterrupt(fd, no_time)", "siginterrupt(fd, ofd)", "siginterrupt(fd, part_nb)", "siginterrupt(fd, quiet)", "siginterrupt(fd, recursive)", "siginterrupt(fd, remove_ofname_fd)", "siginterrupt(fd, save_orig_name)", "siginterrupt(fd, test)", "siginterrupt(fd, to_stdout)", "siginterrupt(fd, verbose)", "signal(fd, 0)", "signal(fd, abort_gzip_signal)", "signal(fd, bi_init)", "sigset(fd, 0)", "sigset(fd, abort_gzip_signal)", "sigset(fd, bi_init)", "ssignal(fd, 0)", "ssignal(fd, abort_gzip_signal)", "ssignal(fd, bi_init)", "strerror_l(fd, 0)", "sysv_signal(fd, 0)", "sysv_signal(fd, abort_gzip_signal)", "sysv_signal(fd, bi_init)", "tcsetpgrp(fd, -1)", "tcsetpgrp(fd, 0)", "tcsetpgrp(fd, 1)", "tcsetpgrp(fd, 2)", "tcsetpgrp(fd, ascii)", "tcsetpgrp(fd, block_mode)", "tcsetpgrp(fd, decompress)", "tcsetpgrp(fd, decrypt)", "tcsetpgrp(fd, do_lzw)", "tcsetpgrp(fd, exit_code)", "tcsetpgrp(fd, exiting_signal)", "tcsetpgrp(fd, fd)", "tcsetpgrp(fd, force)", "tcsetpgrp(fd, foreground)", "tcsetpgrp(fd, ifd)", "tcsetpgrp(fd, last_member)", "tcsetpgrp(fd, level)", "tcsetpgrp(fd, list)", "tcsetpgrp(fd, maxbits)", "tcsetpgrp(fd, method)", "tcsetpgrp(fd, no_name)", "tcsetpgrp(fd, no_time)", "tcsetpgrp(fd, ofd)", "tcsetpgrp(fd, part_nb)", "tcsetpgrp(fd, quiet)", "tcsetpgrp(fd, recursive)", "tcsetpgrp(fd, remove_ofname_fd)", "tcsetpgrp(fd, save_orig_name)", "tcsetpgrp(fd, test)", "tcsetpgrp(fd, to_stdout)", "tcsetpgrp(fd, verbose)", "tolower_l(fd, 0)", "toupper_l(fd, 0)", "treat_dir(fd, 0)", "treat_dir(fd, env)", "treat_dir(fd, program_name)", "treat_dir(fd, z_suffix)", "ungetc(fd, 0)", "unlzh(fd, -1)", "unlzh(fd, 0)", "unlzh(fd, 1)", "unlzh(fd, 2)", "unlzh(fd, ascii)", "unlzh(fd, block_mode)", "unlzh(fd, decompress)", "unlzh(fd, decrypt)", "unlzh(fd, do_lzw)", "unlzh(fd, exit_code)", "unlzh(fd, exiting_signal)", "unlzh(fd, fd)", "unlzh(fd, force)", "unlzh(fd, foreground)", "unlzh(fd, ifd)", "unlzh(fd, last_member)", "unlzh(fd, level)", "unlzh(fd, list)", "unlzh(fd, maxbits)", "unlzh(fd, method)", "unlzh(fd, no_name)", "unlzh(fd, no_time)", "unlzh(fd, ofd)", "unlzh(fd, part_nb)", "unlzh(fd, quiet)", "unlzh(fd, recursive)", "unlzh(fd, remove_ofname_fd)", "unlzh(fd, save_orig_name)", "unlzh(fd, test)", "unlzh(fd, to_stdout)", "unlzh(fd, verbose)", "unlzw(fd, -1)", "unlzw(fd, 0)", "unlzw(fd, 1)", "unlzw(fd, 2)", "unlzw(fd, ascii)", "unlzw(fd, block_mode)", "unlzw(fd, decompress)", "unlzw(fd, decrypt)", "unlzw(fd, do_lzw)", "unlzw(fd, exit_code)", "unlzw(fd, exiting_signal)", "unlzw(fd, fd)", "unlzw(fd, force)", "unlzw(fd, foreground)", "unlzw(fd, ifd)", "unlzw(fd, last_member)", "unlzw(fd, level)", "unlzw(fd, list)", "unlzw(fd, maxbits)", "unlzw(fd, method)", "unlzw(fd, no_name)", "unlzw(fd, no_time)", "unlzw(fd, ofd)", "unlzw(fd, part_nb)", "unlzw(fd, quiet)", "unlzw(fd, recursive)", "unlzw(fd, remove_ofname_fd)", "unlzw(fd, save_orig_name)", "unlzw(fd, test)", "unlzw(fd, to_stdout)", "unlzw(fd, verbose)", "unpack(fd, -1)", "unpack(fd, 0)", "unpack(fd, 1)", "unpack(fd, 2)", "unpack(fd, ascii)", "unpack(fd, block_mode)", "unpack(fd, decompress)", "unpack(fd, decrypt)", "unpack(fd, do_lzw)", "unpack(fd, exit_code)", "unpack(fd, exiting_signal)", "unpack(fd, fd)", "unpack(fd, force)", "unpack(fd, foreground)", "unpack(fd, ifd)", "unpack(fd, last_member)", "unpack(fd, level)", "unpack(fd, list)", "unpack(fd, maxbits)", "unpack(fd, method)", "unpack(fd, no_name)", "unpack(fd, no_time)", "unpack(fd, ofd)", "unpack(fd, part_nb)", "unpack(fd, quiet)", "unpack(fd, recursive)", "unpack(fd, remove_ofname_fd)", "unpack(fd, save_orig_name)", "unpack(fd, test)", "unpack(fd, to_stdout)", "unpack(fd, verbose)", "unzip(fd, -1)", "unzip(fd, 0)", "unzip(fd, 1)", "unzip(fd, 2)", "unzip(fd, ascii)", "unzip(fd, block_mode)", "unzip(fd, decompress)", "unzip(fd, decrypt)", "unzip(fd, do_lzw)", "unzip(fd, exit_code)", "unzip(fd, exiting_signal)", "unzip(fd, fd)", "unzip(fd, force)", "unzip(fd, foreground)", "unzip(fd, ifd)", "unzip(fd, last_member)", "unzip(fd, level)", "unzip(fd, list)", "unzip(fd, maxbits)", "unzip(fd, method)", "unzip(fd, no_name)", "unzip(fd, no_time)", "unzip(fd, ofd)", "unzip(fd, part_nb)", "unzip(fd, quiet)", "unzip(fd, recursive)", "unzip(fd, remove_ofname_fd)", "unzip(fd, save_orig_name)", "unzip(fd, test)", "unzip(fd, to_stdout)", "unzip(fd, verbose)", "zip(fd, -1)", "zip(fd, 0)", "zip(fd, 1)", "zip(fd, 2)", "zip(fd, ascii)", "zip(fd, block_mode)", "zip(fd, decompress)", "zip(fd, decrypt)", "zip(fd, do_lzw)", "zip(fd, exit_code)", "zip(fd, exiting_signal)", "zip(fd, fd)", "zip(fd, force)", "zip(fd, foreground)", "zip(fd, ifd)", "zip(fd, last_member)", "zip(fd, level)", "zip(fd, list)", "zip(fd, maxbits)", "zip(fd, method)", "zip(fd, no_name)", "zip(fd, no_time)", "zip(fd, ofd)", "zip(fd, part_nb)", "zip(fd, quiet)", "zip(fd, recursive)", "zip(fd, remove_ofname_fd)", "zip(fd, save_orig_name)", "zip(fd, test)", "zip(fd, to_stdout)", "zip(fd, verbose)", "{\n}\n", "_Exit(fd)", "__getpgid(fd)", "_exit(fd)", "_tolower(fd)", "_toupper(fd)", "abort_gzip_signal(fd)", "abs(fd)", "bi_init(fd)", "check_zipfile(fd)", "do_exit(fd)", "dup(fd)", "dysize(fd)", "exit(fd)", "fchdir(fd)", "fdatasync(fd)", "fdopendir(fd)", "ffs(fd)", "fill_inbuf(fd)", "fsync(fd)", "get_method(fd)", "getpgid(fd)", "getsid(fd)", "grantpt(fd)", "gsignal(fd)", "isalnum(fd)", "isalpha(fd)", "isascii(fd)", "isatty(fd)", "isblank(fd)", "iscntrl(fd)", "isdigit(fd)", "isgraph(fd)", "islower(fd)", "isprint(fd)", "ispunct(fd)", "isspace(fd)", "isupper(fd)", "isxdigit(fd)", "nice(fd)", "posix_openpt(fd)", "ptsname(fd)", "putchar(fd)", "putchar_unlocked(fd)", "quick_exit(fd)", "raise(fd)", "sigblock(fd)", "sighold(fd)", "sigignore(fd)", "sigpause(fd)", "sigrelse(fd)", "sigsetmask(fd)", "strerror(fd)", "strsignal(fd)", "syncfs(fd)", "sysconf(fd)", "tcgetpgrp(fd)", "toascii(fd)", "tolower(fd)", "toupper(fd)", "ttyname(fd)", "unlockpt(fd)", "close((0 * fd))", "close((fd != 0))", "close((fd + 0))", "close((fd - 0))", "close((fd == 0))", "close((fd))", "close((oldset != 0))", "close((oldset == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7276239127456652, -5.294370959745665]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	51,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	52,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	53,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	54,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	55,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	56,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	57,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	58,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	59,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	60,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	61,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	62,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	63,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	64,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	65,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	66,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	67,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	68,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	69,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	70,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	71,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	72,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	73,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	74,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	75,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	76,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	77,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	78,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	79,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	80,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	81,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	82,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	83,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	84,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	85,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	86,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	87,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	88,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	89,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	90,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	91,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	92,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	93,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	94,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	95,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	96,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	97,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	98,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	99,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	100,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	101,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	102,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	103,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	104,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	105,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	106,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	107,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	108,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	109,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	110,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	111,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	112,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	113,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	114,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	115,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	116,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	117,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	118,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	119,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	120,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	121,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	122,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	123,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	124,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	125,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	126,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	127,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	128,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	129,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	130,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	131,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	132,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	133,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	134,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	135,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	136,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	137,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	138,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	139,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	140,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	141,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	142,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	143,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	144,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	145,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	146,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	147,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	148,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	149,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	150,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	151,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	152,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	153,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	154,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	155,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	156,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	157,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	158,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	159,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	160,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	161,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	162,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	163,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	164,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	165,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	166,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	167,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	168,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	169,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	170,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	171,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	172,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	173,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	174,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	175,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	176,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	177,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	178,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	179,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	180,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	181,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	182,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	183,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	184,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	185,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	186,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	187,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	188,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	189,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	190,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	191,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	192,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	193,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	194,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	195,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	196,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	197,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	198,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	199,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	200,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	201,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	202,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	203,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	204,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	205,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	206,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	207,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	208,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	209,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	210,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	211,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	212,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	213,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	214,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	215,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	216,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	217,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	218,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	219,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	220,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	221,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	222,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	223,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	224,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	225,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	226,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	227,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	228,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	229,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	230,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	231,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	232,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	233,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	234,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	235,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	236,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	237,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	238,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	239,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	240,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	241,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	242,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	243,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	244,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	245,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	246,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	247,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	248,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	249,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	250,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	251,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	252,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	253,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	254,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	255,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	256,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	257,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	258,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	259,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	260,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	261,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	262,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	263,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	264,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	265,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	266,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	267,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	268,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	269,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	270,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	271,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	272,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	273,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	274,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	275,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	276,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	277,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	278,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	279,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	280,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	281,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	282,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	283,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	284,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	285,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	286,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	287,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	288,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	289,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	290,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	291,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	292,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	293,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	294,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	295,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	296,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	297,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	298,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	299,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	300,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	301,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	302,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	303,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	304,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	305,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	306,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	307,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	308,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	309,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	310,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	311,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	312,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	313,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	314,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	315,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	316,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	317,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	318,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	319,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	320,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	321,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	322,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	323,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	324,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	325,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	326,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	327,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	328,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	329,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	330,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	331,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	332,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	333,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	334,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	335,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	336,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	337,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	338,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	339,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	340,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	341,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	342,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	343,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	344,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	345,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	346,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	347,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	348,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	349,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	350,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	351,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	352,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	353,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	354,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	355,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	356,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	357,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	358,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	359,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	360,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	361,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	362,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	363,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	364,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	365,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	366,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	367,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	368,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	369,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	370,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	371,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	372,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	373,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	374,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	375,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	376,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	377,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	378,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	379,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	380,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	381,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	382,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	383,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	384,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	385,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	386,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	387,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	388,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	389,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	390,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	391,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	392,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	393,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	394,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	395,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	396,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	397,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	398,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	399,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	400,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	401,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	402,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	403,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	404,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	405,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	406,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	407,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	408,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	409,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	410,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	411,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	412,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	413,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	414,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	415,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	416,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	417,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	418,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	419,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	420,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	421,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	422,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	423,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	424,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	425,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	426,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	427,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	428,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	429,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	430,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	431,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	432,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	433,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	434,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	435,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	436,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	437,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	438,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	439,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	440,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	441,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	442,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	443,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	444,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	445,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	446,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	447,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	448,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	449,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	450,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	451,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	452,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	453,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	454,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	455,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	456,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	457,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	458,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	459,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	460,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	461,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	462,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	463,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	464,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	465,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	466,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	467,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	468,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	469,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	470,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	471,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	472,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	473,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	474,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	475,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	476,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	477,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	478,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	479,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	480,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	481,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	482,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	483,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	484,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	485,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	486,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	487,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	488,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	489,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	490,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	491,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	492,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	493,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	494,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	495,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	496,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	497,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	498,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	499,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	500,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	501,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	502,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	503,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	504,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	505,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	506,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	507,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	508,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	509,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	510,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	511,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	512,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	513,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	514,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	515,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	516,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	517,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	518,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	519,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	520,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	521,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	522,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	523,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	524,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	525,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	526,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	527,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	528,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	529,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	530,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	531,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	532,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	533,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	534,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	535,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	536,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	537,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	538,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	539,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	540,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	541,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	542,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	543,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	544,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	545,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	546,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	547,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	548,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	549,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	550,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	551,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	552,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	553,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	554,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	555,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	556,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	557,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	558,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	559,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	560,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	561,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	562,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	563,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	564,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	565,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	566,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	567,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	568,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	569,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	570,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	571,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	572,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	573,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	574,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	575,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	576,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	577,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	578,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	579,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	580,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	581,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	582,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	583,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	584,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	585,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	586,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	587,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	588,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	589,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	590,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	591,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	592,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	593,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	594,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	595,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	596,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	597,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	598,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	599,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	600,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	601,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	602,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	603,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	604,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	605,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	606,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	607,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	608,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	609,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	610,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	611,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	612,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	613,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	614,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	615,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	616,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	617,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	618,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	619,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	620,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	621,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	622,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	623,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	624,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	625,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	626,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	627,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	628,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	629,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	630,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	631,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	632,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	633,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	634,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	635,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	636,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	637,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	638,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	639,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	640,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	641,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	642,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	643,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	644,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	645,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	646,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	647,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	648,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	649,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	650,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	651,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	652,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	653,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	654,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	655,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	656,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	657,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	658,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	659,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	660,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	661,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	662,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	663,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	664,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	665,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	666,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	667,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	668,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	669,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	670,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	671,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	672,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	673,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	674,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	675,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	676,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	677,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	678,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	679,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	680,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	681,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	682,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	683,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	684,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	685,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	686,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	687,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	688,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	689,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	690,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	691,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	692,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	693,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	694,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	695,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	696,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	697,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	698,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	699,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	700,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	701,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	702,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	703,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	704,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	705,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	706,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	707,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	708,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	709,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	710,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	711,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	712,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	713,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	714,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	715,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	716,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	717,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	718,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	719,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	720,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	721,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	722,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	723,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	724,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	725,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	726,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	727,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	728,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	729,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	730,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	731,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	732,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	733,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	734,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	735,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	736,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	737,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	738,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	739,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	740,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	741,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	742,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	743,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	744,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	745,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	746,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	747,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	748,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	749,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	750,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	751,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	752,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	753,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	754,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	755,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	756,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	757,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	758,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	759,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	760,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	761,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	762,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	763,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	764,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	765,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	766,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	767,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	768,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	769,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	770,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	771,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	772,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	773,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	774,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	775,
									"scores":	[-3.9322257127456655]
								}]
						}]
				}, {
					"line":	1862,
					"switches":	[{
							"switch":	102,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1863,
							"begin_column":	5,
							"end_line":	1863,
							"end_column":	5,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1863\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-5.9286660951281451, -4.6922795285281458]
								}]
						}, {
							"switch":	103,
							"types":	[[], [], [1], [], [], [], [244, 245], [], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], [], [], [222]],
							"begin_line":	1863,
							"begin_column":	7,
							"end_line":	1863,
							"end_column":	22,
							"patch_codes":	["if (!__is_neg(\"\", \"L1863\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    xunlink(ofname);\n", "__stpcpy(ofname, 0)", "encrypt(ofname, -1)", "encrypt(ofname, 0)", "encrypt(ofname, 1)", "encrypt(ofname, 2)", "encrypt(ofname, ascii)", "encrypt(ofname, block_mode)", "encrypt(ofname, decompress)", "encrypt(ofname, decrypt)", "encrypt(ofname, do_lzw)", "encrypt(ofname, exit_code)", "encrypt(ofname, exiting_signal)", "encrypt(ofname, fd)", "encrypt(ofname, force)", "encrypt(ofname, foreground)", "encrypt(ofname, ifd)", "encrypt(ofname, last_member)", "encrypt(ofname, level)", "encrypt(ofname, list)", "encrypt(ofname, maxbits)", "encrypt(ofname, method)", "encrypt(ofname, no_name)", "encrypt(ofname, no_time)", "encrypt(ofname, ofd)", "encrypt(ofname, part_nb)", "encrypt(ofname, quiet)", "encrypt(ofname, recursive)", "encrypt(ofname, remove_ofname_fd)", "encrypt(ofname, save_orig_name)", "encrypt(ofname, test)", "encrypt(ofname, to_stdout)", "encrypt(ofname, verbose)", "file_read(ofname, -1)", "file_read(ofname, 0)", "file_read(ofname, 1)", "file_read(ofname, 2)", "file_read(ofname, inptr)", "file_read(ofname, insize)", "file_read(ofname, outcnt)", "getcwd(ofname, -1)", "getcwd(ofname, 0)", "getcwd(ofname, 1)", "getcwd(ofname, 2)", "getcwd(ofname, z_len)", "getdomainname(ofname, -1)", "getdomainname(ofname, 0)", "getdomainname(ofname, 1)", "getdomainname(ofname, 2)", "getdomainname(ofname, z_len)", "gethostname(ofname, -1)", "gethostname(ofname, 0)", "gethostname(ofname, 1)", "gethostname(ofname, 2)", "gethostname(ofname, z_len)", "getlogin_r(ofname, -1)", "getlogin_r(ofname, 0)", "getlogin_r(ofname, 1)", "getlogin_r(ofname, 2)", "getlogin_r(ofname, z_len)", "mkostemp(ofname, -1)", "mkostemp(ofname, 0)", "mkostemp(ofname, 1)", "mkostemp(ofname, 2)", "mkostemp(ofname, ascii)", "mkostemp(ofname, block_mode)", "mkostemp(ofname, decompress)", "mkostemp(ofname, decrypt)", "mkostemp(ofname, do_lzw)", "mkostemp(ofname, exit_code)", "mkostemp(ofname, exiting_signal)", "mkostemp(ofname, fd)", "mkostemp(ofname, force)", "mkostemp(ofname, foreground)", "mkostemp(ofname, ifd)", "mkostemp(ofname, last_member)", "mkostemp(ofname, level)", "mkostemp(ofname, list)", "mkostemp(ofname, maxbits)", "mkostemp(ofname, method)", "mkostemp(ofname, no_name)", "mkostemp(ofname, no_time)", "mkostemp(ofname, ofd)", "mkostemp(ofname, part_nb)", "mkostemp(ofname, quiet)", "mkostemp(ofname, recursive)", "mkostemp(ofname, remove_ofname_fd)", "mkostemp(ofname, save_orig_name)", "mkostemp(ofname, test)", "mkostemp(ofname, to_stdout)", "mkostemp(ofname, verbose)", "mkostemp64(ofname, -1)", "mkostemp64(ofname, 0)", "mkostemp64(ofname, 1)", "mkostemp64(ofname, 2)", "mkostemp64(ofname, ascii)", "mkostemp64(ofname, block_mode)", "mkostemp64(ofname, decompress)", "mkostemp64(ofname, decrypt)", "mkostemp64(ofname, do_lzw)", "mkostemp64(ofname, exit_code)", "mkostemp64(ofname, exiting_signal)", "mkostemp64(ofname, fd)", "mkostemp64(ofname, force)", "mkostemp64(ofname, foreground)", "mkostemp64(ofname, ifd)", "mkostemp64(ofname, last_member)", "mkostemp64(ofname, level)", "mkostemp64(ofname, list)", "mkostemp64(ofname, maxbits)", "mkostemp64(ofname, method)", "mkostemp64(ofname, no_name)", "mkostemp64(ofname, no_time)", "mkostemp64(ofname, ofd)", "mkostemp64(ofname, part_nb)", "mkostemp64(ofname, quiet)", "mkostemp64(ofname, recursive)", "mkostemp64(ofname, remove_ofname_fd)", "mkostemp64(ofname, save_orig_name)", "mkostemp64(ofname, test)", "mkostemp64(ofname, to_stdout)", "mkostemp64(ofname, verbose)", "mkstemps(ofname, -1)", "mkstemps(ofname, 0)", "mkstemps(ofname, 1)", "mkstemps(ofname, 2)", "mkstemps(ofname, ascii)", "mkstemps(ofname, block_mode)", "mkstemps(ofname, decompress)", "mkstemps(ofname, decrypt)", "mkstemps(ofname, do_lzw)", "mkstemps(ofname, exit_code)", "mkstemps(ofname, exiting_signal)", "mkstemps(ofname, fd)", "mkstemps(ofname, force)", "mkstemps(ofname, foreground)", "mkstemps(ofname, ifd)", "mkstemps(ofname, last_member)", "mkstemps(ofname, level)", "mkstemps(ofname, list)", "mkstemps(ofname, maxbits)", "mkstemps(ofname, method)", "mkstemps(ofname, no_name)", "mkstemps(ofname, no_time)", "mkstemps(ofname, ofd)", "mkstemps(ofname, part_nb)", "mkstemps(ofname, quiet)", "mkstemps(ofname, recursive)", "mkstemps(ofname, remove_ofname_fd)", "mkstemps(ofname, save_orig_name)", "mkstemps(ofname, test)", "mkstemps(ofname, to_stdout)", "mkstemps(ofname, verbose)", "mkstemps64(ofname, -1)", "mkstemps64(ofname, 0)", "mkstemps64(ofname, 1)", "mkstemps64(ofname, 2)", "mkstemps64(ofname, ascii)", "mkstemps64(ofname, block_mode)", "mkstemps64(ofname, decompress)", "mkstemps64(ofname, decrypt)", "mkstemps64(ofname, do_lzw)", "mkstemps64(ofname, exit_code)", "mkstemps64(ofname, exiting_signal)", "mkstemps64(ofname, fd)", "mkstemps64(ofname, force)", "mkstemps64(ofname, foreground)", "mkstemps64(ofname, ifd)", "mkstemps64(ofname, last_member)", "mkstemps64(ofname, level)", "mkstemps64(ofname, list)", "mkstemps64(ofname, maxbits)", "mkstemps64(ofname, method)", "mkstemps64(ofname, no_name)", "mkstemps64(ofname, no_time)", "mkstemps64(ofname, ofd)", "mkstemps64(ofname, part_nb)", "mkstemps64(ofname, quiet)", "mkstemps64(ofname, recursive)", "mkstemps64(ofname, remove_ofname_fd)", "mkstemps64(ofname, save_orig_name)", "mkstemps64(ofname, test)", "mkstemps64(ofname, to_stdout)", "mkstemps64(ofname, verbose)", "open_input_file(ofname, 0)", "setstate_r(ofname, 0)", "stpcpy(ofname, 0)", "strcat(ofname, 0)", "strcpy(ofname, 0)", "strtok(ofname, 0)", "wctomb(ofname, -1)", "wctomb(ofname, 0)", "wctomb(ofname, 1)", "wctomb(ofname, 2)", "wctomb(ofname, ascii)", "wctomb(ofname, block_mode)", "wctomb(ofname, decompress)", "wctomb(ofname, decrypt)", "wctomb(ofname, do_lzw)", "wctomb(ofname, exit_code)", "wctomb(ofname, exiting_signal)", "wctomb(ofname, fd)", "wctomb(ofname, force)", "wctomb(ofname, foreground)", "wctomb(ofname, ifd)", "wctomb(ofname, last_member)", "wctomb(ofname, level)", "wctomb(ofname, list)", "wctomb(ofname, maxbits)", "wctomb(ofname, method)", "wctomb(ofname, no_name)", "wctomb(ofname, no_time)", "wctomb(ofname, ofd)", "wctomb(ofname, part_nb)", "wctomb(ofname, quiet)", "wctomb(ofname, recursive)", "wctomb(ofname, remove_ofname_fd)", "wctomb(ofname, save_orig_name)", "wctomb(ofname, test)", "wctomb(ofname, to_stdout)", "wctomb(ofname, verbose)", "{\n}\n", "ctermid(ofname)", "cuserid(ofname)", "get_suffix(ofname)", "getwd(ofname)", "gzip_base_name(ofname)", "gzip_error(ofname)", "make_simple_name(ofname)", "mkdtemp(ofname)", "mkstemp(ofname)", "mkstemp64(ofname)", "mktemp(ofname)", "progerror(ofname)", "putenv(ofname)", "setstate(ofname)", "shorten_name(ofname)", "strfry(ofname)", "strlwr(ofname)", "tmpnam(ofname)", "tmpnam_r(ofname)", "treat_file(ofname)", "warning(ofname)", "xunlink((&fd))", "xunlink((&oldset))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1535158251281459, -5.0675919524281454]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}]
						}]
				}, {
					"line":	1858,
					"switches":	[{
							"switch":	96,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1859,
							"begin_column":	1,
							"end_line":	1859,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1859\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.86155024935156]
								}, {
									"case":	2,
									"scores":	[-4.86155024935156]
								}, {
									"case":	3,
									"scores":	[-4.86155024935156]
								}, {
									"case":	4,
									"scores":	[-4.86155024935156]
								}, {
									"case":	5,
									"scores":	[-4.86155024935156]
								}, {
									"case":	6,
									"scores":	[-4.86155024935156]
								}, {
									"case":	7,
									"scores":	[-4.86155024935156]
								}, {
									"case":	8,
									"scores":	[-4.86155024935156]
								}, {
									"case":	9,
									"scores":	[-4.86155024935156]
								}, {
									"case":	10,
									"scores":	[-4.86155024935156]
								}, {
									"case":	11,
									"scores":	[-4.86155024935156]
								}, {
									"case":	12,
									"scores":	[-4.86155024935156]
								}, {
									"case":	13,
									"scores":	[-4.86155024935156]
								}, {
									"case":	14,
									"scores":	[-4.86155024935156]
								}, {
									"case":	15,
									"scores":	[-4.86155024935156]
								}, {
									"case":	16,
									"scores":	[-4.86155024935156]
								}, {
									"case":	17,
									"scores":	[-4.86155024935156]
								}, {
									"case":	18,
									"scores":	[-4.86155024935156]
								}, {
									"case":	19,
									"scores":	[-4.86155024935156]
								}, {
									"case":	20,
									"scores":	[-4.86155024935156]
								}, {
									"case":	21,
									"scores":	[-4.86155024935156]
								}, {
									"case":	22,
									"scores":	[-4.86155024935156]
								}, {
									"case":	23,
									"scores":	[-4.86155024935156]
								}, {
									"case":	24,
									"scores":	[-4.86155024935156]
								}, {
									"case":	25,
									"scores":	[-4.86155024935156]
								}, {
									"case":	26,
									"scores":	[-4.86155024935156]
								}, {
									"case":	27,
									"scores":	[-4.86155024935156]
								}, {
									"case":	28,
									"scores":	[-4.86155024935156]
								}, {
									"case":	29,
									"scores":	[-4.86155024935156]
								}, {
									"case":	30,
									"scores":	[-4.86155024935156]
								}, {
									"case":	31,
									"scores":	[-4.86155024935156]
								}, {
									"case":	32,
									"scores":	[-4.86155024935156]
								}, {
									"case":	33,
									"scores":	[-4.86155024935156]
								}, {
									"case":	34,
									"scores":	[-4.86155024935156]
								}, {
									"case":	35,
									"scores":	[-4.86155024935156]
								}, {
									"case":	36,
									"scores":	[-4.86155024935156]
								}, {
									"case":	37,
									"scores":	[-4.86155024935156]
								}, {
									"case":	38,
									"scores":	[-4.86155024935156]
								}, {
									"case":	39,
									"scores":	[-4.86155024935156]
								}, {
									"case":	40,
									"scores":	[-4.86155024935156]
								}, {
									"case":	41,
									"scores":	[-4.86155024935156]
								}, {
									"case":	42,
									"scores":	[-4.86155024935156]
								}, {
									"case":	43,
									"scores":	[-4.86155024935156]
								}, {
									"case":	44,
									"scores":	[-4.86155024935156]
								}, {
									"case":	45,
									"scores":	[-4.86155024935156]
								}, {
									"case":	46,
									"scores":	[-4.86155024935156]
								}, {
									"case":	47,
									"scores":	[-4.86155024935156]
								}, {
									"case":	48,
									"scores":	[-4.86155024935156]
								}, {
									"case":	49,
									"scores":	[-4.86155024935156]
								}, {
									"case":	50,
									"scores":	[-4.86155024935156]
								}, {
									"case":	51,
									"scores":	[-4.86155024935156]
								}, {
									"case":	52,
									"scores":	[-4.86155024935156]
								}, {
									"case":	53,
									"scores":	[-4.86155024935156]
								}, {
									"case":	54,
									"scores":	[-4.86155024935156]
								}, {
									"case":	55,
									"scores":	[-4.86155024935156]
								}, {
									"case":	56,
									"scores":	[-4.86155024935156]
								}, {
									"case":	57,
									"scores":	[-4.86155024935156]
								}, {
									"case":	58,
									"scores":	[-4.86155024935156]
								}, {
									"case":	59,
									"scores":	[-4.86155024935156]
								}, {
									"case":	60,
									"scores":	[-4.86155024935156]
								}, {
									"case":	61,
									"scores":	[-4.86155024935156]
								}, {
									"case":	62,
									"scores":	[-4.86155024935156]
								}, {
									"case":	63,
									"scores":	[-4.86155024935156]
								}, {
									"case":	64,
									"scores":	[-4.86155024935156]
								}, {
									"case":	65,
									"scores":	[-4.86155024935156]
								}, {
									"case":	66,
									"scores":	[-4.86155024935156]
								}, {
									"case":	67,
									"scores":	[-4.86155024935156]
								}, {
									"case":	68,
									"scores":	[-4.86155024935156]
								}, {
									"case":	69,
									"scores":	[-4.86155024935156]
								}, {
									"case":	70,
									"scores":	[-4.86155024935156]
								}, {
									"case":	71,
									"scores":	[-4.86155024935156]
								}, {
									"case":	72,
									"scores":	[-4.86155024935156]
								}, {
									"case":	73,
									"scores":	[-4.86155024935156]
								}, {
									"case":	74,
									"scores":	[-4.86155024935156]
								}, {
									"case":	75,
									"scores":	[-4.86155024935156]
								}, {
									"case":	76,
									"scores":	[-4.86155024935156]
								}, {
									"case":	77,
									"scores":	[-4.86155024935156]
								}, {
									"case":	78,
									"scores":	[-4.86155024935156]
								}, {
									"case":	79,
									"scores":	[-4.86155024935156]
								}, {
									"case":	80,
									"scores":	[-4.86155024935156]
								}, {
									"case":	81,
									"scores":	[-4.86155024935156]
								}, {
									"case":	82,
									"scores":	[-4.86155024935156]
								}, {
									"case":	83,
									"scores":	[-4.86155024935156]
								}, {
									"case":	84,
									"scores":	[-4.86155024935156]
								}, {
									"case":	85,
									"scores":	[-4.86155024935156]
								}, {
									"case":	86,
									"scores":	[-4.86155024935156]
								}, {
									"case":	87,
									"scores":	[-4.86155024935156]
								}, {
									"case":	88,
									"scores":	[-4.86155024935156]
								}, {
									"case":	89,
									"scores":	[-4.86155024935156]
								}, {
									"case":	90,
									"scores":	[-4.86155024935156]
								}, {
									"case":	91,
									"scores":	[-4.86155024935156]
								}, {
									"case":	92,
									"scores":	[-4.86155024935156]
								}, {
									"case":	93,
									"scores":	[-4.86155024935156]
								}, {
									"case":	94,
									"scores":	[-4.86155024935156]
								}, {
									"case":	95,
									"scores":	[-4.86155024935156]
								}, {
									"case":	96,
									"scores":	[-4.86155024935156]
								}, {
									"case":	97,
									"scores":	[-4.86155024935156]
								}, {
									"case":	98,
									"scores":	[-4.86155024935156]
								}, {
									"case":	99,
									"scores":	[-4.86155024935156]
								}, {
									"case":	100,
									"scores":	[-4.86155024935156]
								}, {
									"case":	101,
									"scores":	[-4.86155024935156]
								}, {
									"case":	102,
									"scores":	[-4.86155024935156]
								}, {
									"case":	103,
									"scores":	[-4.86155024935156]
								}, {
									"case":	104,
									"scores":	[-4.86155024935156]
								}, {
									"case":	105,
									"scores":	[-4.86155024935156]
								}, {
									"case":	106,
									"scores":	[-4.86155024935156]
								}, {
									"case":	107,
									"scores":	[-4.86155024935156]
								}, {
									"case":	108,
									"scores":	[-4.86155024935156]
								}, {
									"case":	109,
									"scores":	[-4.86155024935156]
								}, {
									"case":	110,
									"scores":	[-4.86155024935156]
								}, {
									"case":	111,
									"scores":	[-4.86155024935156]
								}, {
									"case":	112,
									"scores":	[-4.86155024935156]
								}, {
									"case":	113,
									"scores":	[-4.86155024935156]
								}, {
									"case":	114,
									"scores":	[-4.86155024935156]
								}, {
									"case":	115,
									"scores":	[-4.86155024935156]
								}, {
									"case":	116,
									"scores":	[-4.86155024935156]
								}, {
									"case":	117,
									"scores":	[-4.86155024935156]
								}, {
									"case":	118,
									"scores":	[-4.86155024935156]
								}, {
									"case":	119,
									"scores":	[-4.86155024935156]
								}, {
									"case":	120,
									"scores":	[-4.86155024935156]
								}, {
									"case":	121,
									"scores":	[-4.86155024935156]
								}, {
									"case":	122,
									"scores":	[-4.86155024935156]
								}, {
									"case":	123,
									"scores":	[-4.86155024935156]
								}, {
									"case":	124,
									"scores":	[-4.86155024935156]
								}, {
									"case":	125,
									"scores":	[-4.86155024935156]
								}, {
									"case":	126,
									"scores":	[-4.86155024935156]
								}, {
									"case":	127,
									"scores":	[-4.86155024935156]
								}, {
									"case":	128,
									"scores":	[-4.86155024935156]
								}, {
									"case":	129,
									"scores":	[-4.86155024935156]
								}, {
									"case":	130,
									"scores":	[-4.86155024935156]
								}, {
									"case":	131,
									"scores":	[-4.86155024935156]
								}, {
									"case":	132,
									"scores":	[-4.86155024935156]
								}, {
									"case":	133,
									"scores":	[-4.86155024935156]
								}, {
									"case":	134,
									"scores":	[-4.86155024935156]
								}, {
									"case":	135,
									"scores":	[-4.86155024935156]
								}, {
									"case":	136,
									"scores":	[-4.86155024935156]
								}, {
									"case":	137,
									"scores":	[-4.86155024935156]
								}, {
									"case":	138,
									"scores":	[-4.86155024935156]
								}, {
									"case":	139,
									"scores":	[-4.86155024935156]
								}, {
									"case":	140,
									"scores":	[-4.86155024935156]
								}, {
									"case":	141,
									"scores":	[-4.86155024935156]
								}, {
									"case":	142,
									"scores":	[-4.86155024935156]
								}, {
									"case":	143,
									"scores":	[-4.86155024935156]
								}, {
									"case":	144,
									"scores":	[-4.86155024935156]
								}, {
									"case":	145,
									"scores":	[-4.86155024935156]
								}, {
									"case":	146,
									"scores":	[-4.86155024935156]
								}, {
									"case":	147,
									"scores":	[-4.86155024935156]
								}, {
									"case":	148,
									"scores":	[-4.86155024935156]
								}, {
									"case":	149,
									"scores":	[-4.86155024935156]
								}, {
									"case":	150,
									"scores":	[-4.86155024935156]
								}, {
									"case":	151,
									"scores":	[-4.86155024935156]
								}, {
									"case":	152,
									"scores":	[-4.86155024935156]
								}, {
									"case":	153,
									"scores":	[-4.86155024935156]
								}, {
									"case":	154,
									"scores":	[-4.86155024935156]
								}, {
									"case":	155,
									"scores":	[-4.86155024935156]
								}, {
									"case":	156,
									"scores":	[-4.86155024935156]
								}, {
									"case":	157,
									"scores":	[-4.86155024935156]
								}, {
									"case":	158,
									"scores":	[-4.86155024935156]
								}, {
									"case":	159,
									"scores":	[-4.86155024935156]
								}, {
									"case":	160,
									"scores":	[-4.86155024935156]
								}, {
									"case":	161,
									"scores":	[-4.86155024935156]
								}, {
									"case":	162,
									"scores":	[-4.86155024935156]
								}, {
									"case":	163,
									"scores":	[-4.86155024935156]
								}, {
									"case":	164,
									"scores":	[-4.86155024935156]
								}, {
									"case":	165,
									"scores":	[-4.86155024935156]
								}, {
									"case":	166,
									"scores":	[-4.86155024935156]
								}, {
									"case":	167,
									"scores":	[-4.86155024935156]
								}, {
									"case":	168,
									"scores":	[-4.86155024935156]
								}, {
									"case":	169,
									"scores":	[-4.86155024935156]
								}, {
									"case":	170,
									"scores":	[-4.86155024935156]
								}, {
									"case":	171,
									"scores":	[-4.86155024935156]
								}, {
									"case":	172,
									"scores":	[-4.86155024935156]
								}, {
									"case":	173,
									"scores":	[-4.86155024935156]
								}, {
									"case":	174,
									"scores":	[-4.86155024935156]
								}, {
									"case":	175,
									"scores":	[-4.86155024935156]
								}, {
									"case":	176,
									"scores":	[-4.86155024935156]
								}, {
									"case":	177,
									"scores":	[-4.86155024935156]
								}, {
									"case":	178,
									"scores":	[-4.86155024935156]
								}, {
									"case":	179,
									"scores":	[-4.86155024935156]
								}, {
									"case":	180,
									"scores":	[-4.86155024935156]
								}, {
									"case":	181,
									"scores":	[-4.86155024935156]
								}, {
									"case":	182,
									"scores":	[-4.86155024935156]
								}, {
									"case":	183,
									"scores":	[-4.86155024935156]
								}, {
									"case":	184,
									"scores":	[-4.86155024935156]
								}, {
									"case":	185,
									"scores":	[-4.86155024935156]
								}, {
									"case":	186,
									"scores":	[-4.86155024935156]
								}, {
									"case":	187,
									"scores":	[-4.86155024935156]
								}, {
									"case":	188,
									"scores":	[-4.86155024935156]
								}, {
									"case":	189,
									"scores":	[-4.86155024935156]
								}, {
									"case":	190,
									"scores":	[-4.86155024935156]
								}, {
									"case":	191,
									"scores":	[-4.86155024935156]
								}, {
									"case":	192,
									"scores":	[-4.86155024935156]
								}, {
									"case":	193,
									"scores":	[-4.86155024935156]
								}, {
									"case":	194,
									"scores":	[-4.86155024935156]
								}, {
									"case":	195,
									"scores":	[-4.86155024935156]
								}, {
									"case":	196,
									"scores":	[-4.86155024935156]
								}, {
									"case":	197,
									"scores":	[-4.86155024935156]
								}, {
									"case":	198,
									"scores":	[-4.86155024935156]
								}, {
									"case":	199,
									"scores":	[-4.86155024935156]
								}, {
									"case":	200,
									"scores":	[-4.86155024935156]
								}, {
									"case":	201,
									"scores":	[-4.86155024935156]
								}, {
									"case":	202,
									"scores":	[-4.86155024935156]
								}, {
									"case":	203,
									"scores":	[-4.86155024935156]
								}, {
									"case":	204,
									"scores":	[-4.86155024935156]
								}, {
									"case":	205,
									"scores":	[-4.86155024935156]
								}, {
									"case":	206,
									"scores":	[-4.86155024935156]
								}, {
									"case":	207,
									"scores":	[-4.86155024935156]
								}, {
									"case":	208,
									"scores":	[-4.86155024935156]
								}, {
									"case":	209,
									"scores":	[-4.86155024935156]
								}, {
									"case":	210,
									"scores":	[-4.86155024935156]
								}, {
									"case":	211,
									"scores":	[-4.86155024935156]
								}, {
									"case":	212,
									"scores":	[-4.86155024935156]
								}, {
									"case":	213,
									"scores":	[-4.86155024935156]
								}, {
									"case":	214,
									"scores":	[-4.86155024935156]
								}, {
									"case":	215,
									"scores":	[-4.86155024935156]
								}, {
									"case":	216,
									"scores":	[-4.86155024935156]
								}, {
									"case":	217,
									"scores":	[-4.86155024935156]
								}, {
									"case":	218,
									"scores":	[-4.86155024935156]
								}, {
									"case":	219,
									"scores":	[-4.86155024935156]
								}, {
									"case":	220,
									"scores":	[-4.86155024935156]
								}, {
									"case":	221,
									"scores":	[-4.86155024935156]
								}, {
									"case":	222,
									"scores":	[-4.86155024935156]
								}, {
									"case":	223,
									"scores":	[-4.86155024935156]
								}, {
									"case":	224,
									"scores":	[-4.86155024935156]
								}, {
									"case":	225,
									"scores":	[-4.12526255935156, -8.51292373715156]
								}]
						}, {
							"switch":	97,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1859,
							"begin_column":	3,
							"end_line":	1864,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1859\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd))) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n", "if ((0 <= fd) || __is_neg(\"\", \"L1859\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd))) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n", "if ((0 <= fd) && !__is_neg(\"\", \"L1859\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd))) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.9547167601281457, -6.4580674861281455]
								}, {
									"case":	2,
									"scores":	[-1.6511134174281459, -5.1544641434281457]
								}, {
									"case":	3,
									"scores":	[-1.6511134174281459, -5.1544641434281457]
								}]
						}, {
							"switch":	104,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1859,
							"begin_column":	3,
							"end_line":	1864,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1859\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    if (0 <= fd) {\n        remove_ofname_fd = -1;\n        close(fd);\n        xunlink(ofname);\n    }\n", "if (!__is_neg(\"\", \"L1859\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)) && (0 <= fd)) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.3269615963515609, -6.83031232235156]
								}, {
									"case":	2,
									"scores":	[-2.9703061613515609, -6.47365688735156]
								}]
						}]
				}, {
					"line":	1864,
					"switches":	[{
							"switch":	105,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1865,
							"begin_column":	1,
							"end_line":	1865,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1865\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.780739420081483]
								}, {
									"case":	2,
									"scores":	[-4.780739420081483]
								}, {
									"case":	3,
									"scores":	[-4.780739420081483]
								}, {
									"case":	4,
									"scores":	[-4.780739420081483]
								}, {
									"case":	5,
									"scores":	[-4.780739420081483]
								}, {
									"case":	6,
									"scores":	[-4.780739420081483]
								}, {
									"case":	7,
									"scores":	[-4.780739420081483]
								}, {
									"case":	8,
									"scores":	[-4.780739420081483]
								}, {
									"case":	9,
									"scores":	[-4.780739420081483]
								}, {
									"case":	10,
									"scores":	[-4.780739420081483]
								}, {
									"case":	11,
									"scores":	[-4.780739420081483]
								}, {
									"case":	12,
									"scores":	[-4.780739420081483]
								}, {
									"case":	13,
									"scores":	[-4.780739420081483]
								}, {
									"case":	14,
									"scores":	[-4.780739420081483]
								}, {
									"case":	15,
									"scores":	[-4.780739420081483]
								}, {
									"case":	16,
									"scores":	[-4.780739420081483]
								}, {
									"case":	17,
									"scores":	[-4.780739420081483]
								}, {
									"case":	18,
									"scores":	[-4.780739420081483]
								}, {
									"case":	19,
									"scores":	[-4.780739420081483]
								}, {
									"case":	20,
									"scores":	[-4.780739420081483]
								}, {
									"case":	21,
									"scores":	[-4.780739420081483]
								}, {
									"case":	22,
									"scores":	[-4.780739420081483]
								}, {
									"case":	23,
									"scores":	[-4.780739420081483]
								}, {
									"case":	24,
									"scores":	[-4.780739420081483]
								}, {
									"case":	25,
									"scores":	[-4.780739420081483]
								}, {
									"case":	26,
									"scores":	[-4.780739420081483]
								}, {
									"case":	27,
									"scores":	[-4.780739420081483]
								}, {
									"case":	28,
									"scores":	[-4.780739420081483]
								}, {
									"case":	29,
									"scores":	[-4.780739420081483]
								}, {
									"case":	30,
									"scores":	[-4.780739420081483]
								}, {
									"case":	31,
									"scores":	[-4.780739420081483]
								}, {
									"case":	32,
									"scores":	[-4.780739420081483]
								}, {
									"case":	33,
									"scores":	[-4.780739420081483]
								}, {
									"case":	34,
									"scores":	[-4.780739420081483]
								}, {
									"case":	35,
									"scores":	[-4.780739420081483]
								}, {
									"case":	36,
									"scores":	[-4.780739420081483]
								}, {
									"case":	37,
									"scores":	[-4.780739420081483]
								}, {
									"case":	38,
									"scores":	[-4.780739420081483]
								}, {
									"case":	39,
									"scores":	[-4.780739420081483]
								}, {
									"case":	40,
									"scores":	[-4.780739420081483]
								}, {
									"case":	41,
									"scores":	[-4.780739420081483]
								}, {
									"case":	42,
									"scores":	[-4.780739420081483]
								}, {
									"case":	43,
									"scores":	[-4.780739420081483]
								}, {
									"case":	44,
									"scores":	[-4.780739420081483]
								}, {
									"case":	45,
									"scores":	[-4.780739420081483]
								}, {
									"case":	46,
									"scores":	[-4.780739420081483]
								}, {
									"case":	47,
									"scores":	[-4.780739420081483]
								}, {
									"case":	48,
									"scores":	[-4.780739420081483]
								}, {
									"case":	49,
									"scores":	[-4.780739420081483]
								}, {
									"case":	50,
									"scores":	[-4.780739420081483]
								}, {
									"case":	51,
									"scores":	[-4.780739420081483]
								}, {
									"case":	52,
									"scores":	[-4.780739420081483]
								}, {
									"case":	53,
									"scores":	[-4.780739420081483]
								}, {
									"case":	54,
									"scores":	[-4.780739420081483]
								}, {
									"case":	55,
									"scores":	[-4.780739420081483]
								}, {
									"case":	56,
									"scores":	[-4.780739420081483]
								}, {
									"case":	57,
									"scores":	[-4.780739420081483]
								}, {
									"case":	58,
									"scores":	[-4.780739420081483]
								}, {
									"case":	59,
									"scores":	[-4.780739420081483]
								}, {
									"case":	60,
									"scores":	[-4.780739420081483]
								}, {
									"case":	61,
									"scores":	[-4.780739420081483]
								}, {
									"case":	62,
									"scores":	[-4.780739420081483]
								}, {
									"case":	63,
									"scores":	[-4.780739420081483]
								}, {
									"case":	64,
									"scores":	[-4.780739420081483]
								}, {
									"case":	65,
									"scores":	[-4.780739420081483]
								}, {
									"case":	66,
									"scores":	[-4.780739420081483]
								}, {
									"case":	67,
									"scores":	[-4.780739420081483]
								}, {
									"case":	68,
									"scores":	[-4.780739420081483]
								}, {
									"case":	69,
									"scores":	[-4.780739420081483]
								}, {
									"case":	70,
									"scores":	[-4.780739420081483]
								}, {
									"case":	71,
									"scores":	[-4.780739420081483]
								}, {
									"case":	72,
									"scores":	[-4.780739420081483]
								}, {
									"case":	73,
									"scores":	[-4.780739420081483]
								}, {
									"case":	74,
									"scores":	[-4.780739420081483]
								}, {
									"case":	75,
									"scores":	[-4.780739420081483]
								}, {
									"case":	76,
									"scores":	[-4.780739420081483]
								}, {
									"case":	77,
									"scores":	[-4.780739420081483]
								}, {
									"case":	78,
									"scores":	[-4.780739420081483]
								}, {
									"case":	79,
									"scores":	[-4.780739420081483]
								}, {
									"case":	80,
									"scores":	[-4.780739420081483]
								}, {
									"case":	81,
									"scores":	[-4.780739420081483]
								}, {
									"case":	82,
									"scores":	[-4.780739420081483]
								}, {
									"case":	83,
									"scores":	[-4.780739420081483]
								}, {
									"case":	84,
									"scores":	[-4.780739420081483]
								}, {
									"case":	85,
									"scores":	[-4.780739420081483]
								}, {
									"case":	86,
									"scores":	[-4.780739420081483]
								}, {
									"case":	87,
									"scores":	[-4.780739420081483]
								}, {
									"case":	88,
									"scores":	[-4.780739420081483]
								}, {
									"case":	89,
									"scores":	[-4.780739420081483]
								}, {
									"case":	90,
									"scores":	[-4.780739420081483]
								}, {
									"case":	91,
									"scores":	[-4.780739420081483]
								}, {
									"case":	92,
									"scores":	[-4.780739420081483]
								}, {
									"case":	93,
									"scores":	[-4.780739420081483]
								}, {
									"case":	94,
									"scores":	[-4.780739420081483]
								}, {
									"case":	95,
									"scores":	[-4.780739420081483]
								}, {
									"case":	96,
									"scores":	[-4.780739420081483]
								}, {
									"case":	97,
									"scores":	[-4.780739420081483]
								}, {
									"case":	98,
									"scores":	[-4.780739420081483]
								}, {
									"case":	99,
									"scores":	[-4.780739420081483]
								}, {
									"case":	100,
									"scores":	[-4.780739420081483]
								}, {
									"case":	101,
									"scores":	[-4.780739420081483]
								}, {
									"case":	102,
									"scores":	[-4.780739420081483]
								}, {
									"case":	103,
									"scores":	[-4.780739420081483]
								}, {
									"case":	104,
									"scores":	[-4.780739420081483]
								}, {
									"case":	105,
									"scores":	[-4.780739420081483]
								}, {
									"case":	106,
									"scores":	[-4.780739420081483]
								}, {
									"case":	107,
									"scores":	[-4.780739420081483]
								}, {
									"case":	108,
									"scores":	[-4.780739420081483]
								}, {
									"case":	109,
									"scores":	[-4.780739420081483]
								}, {
									"case":	110,
									"scores":	[-4.780739420081483]
								}, {
									"case":	111,
									"scores":	[-4.780739420081483]
								}, {
									"case":	112,
									"scores":	[-4.780739420081483]
								}, {
									"case":	113,
									"scores":	[-4.780739420081483]
								}, {
									"case":	114,
									"scores":	[-4.780739420081483]
								}, {
									"case":	115,
									"scores":	[-4.780739420081483]
								}, {
									"case":	116,
									"scores":	[-4.780739420081483]
								}, {
									"case":	117,
									"scores":	[-4.780739420081483]
								}, {
									"case":	118,
									"scores":	[-4.780739420081483]
								}, {
									"case":	119,
									"scores":	[-4.780739420081483]
								}, {
									"case":	120,
									"scores":	[-4.780739420081483]
								}, {
									"case":	121,
									"scores":	[-4.780739420081483]
								}, {
									"case":	122,
									"scores":	[-4.780739420081483]
								}, {
									"case":	123,
									"scores":	[-4.780739420081483]
								}, {
									"case":	124,
									"scores":	[-4.780739420081483]
								}, {
									"case":	125,
									"scores":	[-4.780739420081483]
								}, {
									"case":	126,
									"scores":	[-4.780739420081483]
								}, {
									"case":	127,
									"scores":	[-4.780739420081483]
								}, {
									"case":	128,
									"scores":	[-4.780739420081483]
								}, {
									"case":	129,
									"scores":	[-4.780739420081483]
								}, {
									"case":	130,
									"scores":	[-4.780739420081483]
								}, {
									"case":	131,
									"scores":	[-4.780739420081483]
								}, {
									"case":	132,
									"scores":	[-4.780739420081483]
								}, {
									"case":	133,
									"scores":	[-4.780739420081483]
								}, {
									"case":	134,
									"scores":	[-4.780739420081483]
								}, {
									"case":	135,
									"scores":	[-4.780739420081483]
								}, {
									"case":	136,
									"scores":	[-4.780739420081483]
								}, {
									"case":	137,
									"scores":	[-4.780739420081483]
								}, {
									"case":	138,
									"scores":	[-4.780739420081483]
								}, {
									"case":	139,
									"scores":	[-4.780739420081483]
								}, {
									"case":	140,
									"scores":	[-4.780739420081483]
								}, {
									"case":	141,
									"scores":	[-4.780739420081483]
								}, {
									"case":	142,
									"scores":	[-4.780739420081483]
								}, {
									"case":	143,
									"scores":	[-4.780739420081483]
								}, {
									"case":	144,
									"scores":	[-4.780739420081483]
								}, {
									"case":	145,
									"scores":	[-4.780739420081483]
								}, {
									"case":	146,
									"scores":	[-4.780739420081483]
								}, {
									"case":	147,
									"scores":	[-4.780739420081483]
								}, {
									"case":	148,
									"scores":	[-4.780739420081483]
								}, {
									"case":	149,
									"scores":	[-4.780739420081483]
								}, {
									"case":	150,
									"scores":	[-4.780739420081483]
								}, {
									"case":	151,
									"scores":	[-4.780739420081483]
								}, {
									"case":	152,
									"scores":	[-4.780739420081483]
								}, {
									"case":	153,
									"scores":	[-4.780739420081483]
								}, {
									"case":	154,
									"scores":	[-4.780739420081483]
								}, {
									"case":	155,
									"scores":	[-4.780739420081483]
								}, {
									"case":	156,
									"scores":	[-4.780739420081483]
								}, {
									"case":	157,
									"scores":	[-4.780739420081483]
								}, {
									"case":	158,
									"scores":	[-4.780739420081483]
								}, {
									"case":	159,
									"scores":	[-4.780739420081483]
								}, {
									"case":	160,
									"scores":	[-4.780739420081483]
								}, {
									"case":	161,
									"scores":	[-4.780739420081483]
								}, {
									"case":	162,
									"scores":	[-4.780739420081483]
								}, {
									"case":	163,
									"scores":	[-4.780739420081483]
								}, {
									"case":	164,
									"scores":	[-4.780739420081483]
								}, {
									"case":	165,
									"scores":	[-4.780739420081483]
								}, {
									"case":	166,
									"scores":	[-4.780739420081483]
								}, {
									"case":	167,
									"scores":	[-4.780739420081483]
								}, {
									"case":	168,
									"scores":	[-4.780739420081483]
								}, {
									"case":	169,
									"scores":	[-4.780739420081483]
								}, {
									"case":	170,
									"scores":	[-4.780739420081483]
								}, {
									"case":	171,
									"scores":	[-4.780739420081483]
								}, {
									"case":	172,
									"scores":	[-4.780739420081483]
								}, {
									"case":	173,
									"scores":	[-4.780739420081483]
								}, {
									"case":	174,
									"scores":	[-4.780739420081483]
								}, {
									"case":	175,
									"scores":	[-4.780739420081483]
								}, {
									"case":	176,
									"scores":	[-4.780739420081483]
								}, {
									"case":	177,
									"scores":	[-4.780739420081483]
								}, {
									"case":	178,
									"scores":	[-4.780739420081483]
								}, {
									"case":	179,
									"scores":	[-4.780739420081483]
								}, {
									"case":	180,
									"scores":	[-4.780739420081483]
								}, {
									"case":	181,
									"scores":	[-4.780739420081483]
								}, {
									"case":	182,
									"scores":	[-4.780739420081483]
								}, {
									"case":	183,
									"scores":	[-4.780739420081483]
								}, {
									"case":	184,
									"scores":	[-4.780739420081483]
								}, {
									"case":	185,
									"scores":	[-4.780739420081483]
								}, {
									"case":	186,
									"scores":	[-4.780739420081483]
								}, {
									"case":	187,
									"scores":	[-4.780739420081483]
								}, {
									"case":	188,
									"scores":	[-4.780739420081483]
								}, {
									"case":	189,
									"scores":	[-4.780739420081483]
								}, {
									"case":	190,
									"scores":	[-4.780739420081483]
								}, {
									"case":	191,
									"scores":	[-4.780739420081483]
								}, {
									"case":	192,
									"scores":	[-4.780739420081483]
								}, {
									"case":	193,
									"scores":	[-4.780739420081483]
								}, {
									"case":	194,
									"scores":	[-4.780739420081483]
								}, {
									"case":	195,
									"scores":	[-4.780739420081483]
								}, {
									"case":	196,
									"scores":	[-4.780739420081483]
								}, {
									"case":	197,
									"scores":	[-4.780739420081483]
								}, {
									"case":	198,
									"scores":	[-4.780739420081483]
								}, {
									"case":	199,
									"scores":	[-4.780739420081483]
								}, {
									"case":	200,
									"scores":	[-4.780739420081483]
								}, {
									"case":	201,
									"scores":	[-4.780739420081483]
								}, {
									"case":	202,
									"scores":	[-4.780739420081483]
								}, {
									"case":	203,
									"scores":	[-4.780739420081483]
								}, {
									"case":	204,
									"scores":	[-4.780739420081483]
								}, {
									"case":	205,
									"scores":	[-4.780739420081483]
								}, {
									"case":	206,
									"scores":	[-4.780739420081483]
								}, {
									"case":	207,
									"scores":	[-4.780739420081483]
								}, {
									"case":	208,
									"scores":	[-4.780739420081483]
								}, {
									"case":	209,
									"scores":	[-4.780739420081483]
								}, {
									"case":	210,
									"scores":	[-4.780739420081483]
								}, {
									"case":	211,
									"scores":	[-4.780739420081483]
								}, {
									"case":	212,
									"scores":	[-4.780739420081483]
								}, {
									"case":	213,
									"scores":	[-4.780739420081483]
								}, {
									"case":	214,
									"scores":	[-4.780739420081483]
								}, {
									"case":	215,
									"scores":	[-4.780739420081483]
								}, {
									"case":	216,
									"scores":	[-4.780739420081483]
								}, {
									"case":	217,
									"scores":	[-4.780739420081483]
								}, {
									"case":	218,
									"scores":	[-4.780739420081483]
								}, {
									"case":	219,
									"scores":	[-4.780739420081483]
								}, {
									"case":	220,
									"scores":	[-4.780739420081483]
								}, {
									"case":	221,
									"scores":	[-4.780739420081483]
								}, {
									"case":	222,
									"scores":	[-4.780739420081483]
								}, {
									"case":	223,
									"scores":	[-4.780739420081483]
								}, {
									"case":	224,
									"scores":	[-4.780739420081483]
								}, {
									"case":	225,
									"scores":	[-5.0362946097814829, -6.2442309431814831]
								}]
						}, {
							"switch":	106,
							"types":	[[], [], [1], [], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [3, 4], [], [], [], [], [], [], [], [2]],
							"begin_line":	1865,
							"begin_column":	3,
							"end_line":	1865,
							"end_column":	42,
							"patch_codes":	["if (!__is_neg(\"\", \"L1865\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    sigprocmask(2, &oldset, ((void *)0));\n", "{\n}\n", "dprintf(2, &oldset, ((void *)0))", "pthread_sigmask(2, &oldset, ((void *)0))", "sigprocmask((0 * fd), &oldset, ((void *)0))", "sigprocmask((0), &oldset, ((void *)0))", "sigprocmask((fd != 0), &oldset, ((void *)0))", "sigprocmask((fd + 0), &oldset, ((void *)0))", "sigprocmask((fd - 0), &oldset, ((void *)0))", "sigprocmask((fd == 0), &oldset, ((void *)0))", "sigprocmask((oldset != 0), &oldset, ((void *)0))", "sigprocmask((oldset == 0), &oldset, ((void *)0))", "sigprocmask(2, &(oldset), ((void *)0))", "sigprocmask(2, &oldset, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9484193867814827, -6.2533573670814828]
								}, {
									"case":	2,
									"scores":	[-4.780739420081483]
								}, {
									"case":	3,
									"scores":	[-4.780739420081483]
								}, {
									"case":	4,
									"scores":	[-4.780739420081483]
								}, {
									"case":	5,
									"scores":	[-4.780739420081483]
								}, {
									"case":	6,
									"scores":	[-4.780739420081483]
								}, {
									"case":	7,
									"scores":	[-4.780739420081483]
								}, {
									"case":	8,
									"scores":	[-4.780739420081483]
								}, {
									"case":	9,
									"scores":	[-4.780739420081483]
								}, {
									"case":	10,
									"scores":	[-4.780739420081483]
								}, {
									"case":	11,
									"scores":	[-4.780739420081483]
								}, {
									"case":	12,
									"scores":	[-4.780739420081483]
								}, {
									"case":	13,
									"scores":	[-4.780739420081483]
								}, {
									"case":	14,
									"scores":	[-4.780739420081483]
								}]
						}]
				}, {
					"line":	1873,
					"switches":	[{
							"switch":	107,
							"types":	[[], [], [], [], [148], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	1874,
							"begin_column":	2,
							"end_line":	1874,
							"end_column":	2,
							"patch_codes":	["bytes_in = (0)", "bytes_in = (1)", "bytes_out = (0)", "bytes_out = (1)", "exit_code = (0)", "exit_code = (1)", "exiting_signal = (0)", "exiting_signal = (1)", "foreground = (0)", "foreground = (1)", "header_bytes = (0)", "header_bytes = (1)", "ifd = (0)", "ifd = (1)", "ifile_size = (0)", "ifile_size = (1)", "inptr = (0)", "inptr = (1)", "last_member = (0)", "last_member = (1)", "list = (0)", "list = (1)", "method = (0)", "method = (1)", "no_name = (0)", "no_name = (1)", "no_time = (0)", "no_time = (1)", "ofd = (0)", "ofd = (1)", "part_nb = (0)", "part_nb = (1)", "quiet = (0)", "quiet = (1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "save_orig_name = (0)", "save_orig_name = (1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "to_stdout = (0)", "to_stdout = (1)", "total_in = (0)", "total_in = (1)", "total_out = (0)", "total_out = (1)", "verbose = (0)", "verbose = (1)", "z_len = (0)", "z_len = (1)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1874\", 0))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[]
								}]
						}, {
							"switch":	108,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1874,
							"begin_column":	4,
							"end_line":	1874,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L1874\", 0))\n    remove_output_file();\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[]
								}, {
									"case":	2,
									"scores":	[-5.0837800298442755]
								}]
						}]
				}, {
					"line":	1874,
					"switches":	[{
							"switch":	109,
							"types":	[[], [], [], [], [148], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	1875,
							"begin_column":	2,
							"end_line":	1875,
							"end_column":	2,
							"patch_codes":	["bytes_in = (0)", "bytes_in = (1)", "bytes_out = (0)", "bytes_out = (1)", "exit_code = (0)", "exit_code = (1)", "exiting_signal = (0)", "exiting_signal = (1)", "foreground = (0)", "foreground = (1)", "header_bytes = (0)", "header_bytes = (1)", "ifd = (0)", "ifd = (1)", "ifile_size = (0)", "ifile_size = (1)", "inptr = (0)", "inptr = (1)", "last_member = (0)", "last_member = (1)", "list = (0)", "list = (1)", "method = (0)", "method = (1)", "no_name = (0)", "no_name = (1)", "no_time = (0)", "no_time = (1)", "ofd = (0)", "ofd = (1)", "part_nb = (0)", "part_nb = (1)", "quiet = (0)", "quiet = (1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "save_orig_name = (0)", "save_orig_name = (1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "to_stdout = (0)", "to_stdout = (1)", "total_in = (0)", "total_in = (1)", "total_out = (0)", "total_out = (1)", "verbose = (0)", "verbose = (1)", "z_len = (0)", "z_len = (1)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1875\", 0))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	2,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	3,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	4,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	5,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	6,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	7,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	8,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	9,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	10,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	11,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	12,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	13,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	14,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	15,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	16,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	17,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	18,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	19,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	20,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	21,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	22,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	23,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	24,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	25,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	26,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	27,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	28,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	29,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	30,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	31,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	32,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	33,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	34,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	35,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	36,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	37,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	38,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	39,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	40,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	41,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	42,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	43,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	44,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	45,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	46,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	47,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	48,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	49,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	50,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	51,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	52,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	53,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	54,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	55,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	56,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	57,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	58,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	59,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	60,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	61,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	62,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	63,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	64,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	65,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	66,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	67,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	68,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	69,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	70,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	71,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	72,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	73,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	74,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	75,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	76,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	77,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	78,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	79,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	80,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	81,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	82,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	83,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	84,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	85,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	86,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	87,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	88,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	89,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	90,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	91,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	92,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	93,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	94,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	95,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	96,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	97,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	98,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	99,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	100,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	101,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	102,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	103,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	104,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	105,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	106,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	107,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	108,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	109,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	110,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	111,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	112,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	113,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	114,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	115,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	116,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	117,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	118,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	119,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	120,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	121,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	122,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	123,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	124,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	125,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	126,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	127,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	128,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	129,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	130,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	131,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	132,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	133,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	134,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	135,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	136,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	137,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	138,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	139,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	140,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	141,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	142,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	143,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	144,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	145,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	146,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	147,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	148,
									"scores":	[]
								}]
						}, {
							"switch":	110,
							"types":	[[], [], [1], [], [], [], [703], [], [641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639], [], [], [640]],
							"begin_line":	1875,
							"begin_column":	4,
							"end_line":	1875,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L1875\", 0))\n    do_exit(1);\n", "_IO_putc(1, 0)", "__sysv_signal(1, 0)", "__sysv_signal(1, abort_gzip_signal)", "__sysv_signal(1, bi_init)", "__tolower_l(1, 0)", "__toupper_l(1, 0)", "clock_adjtime(1, 0)", "clock_getcpuclockid(1, 0)", "clock_getres(1, 0)", "clock_gettime(1, 0)", "clock_settime(1, 0)", "copy(1, 0)", "copy(1, 1)", "copy(1, ascii)", "copy(1, block_mode)", "copy(1, decompress)", "copy(1, decrypt)", "copy(1, do_lzw)", "copy(1, exit_code)", "copy(1, exiting_signal)", "copy(1, force)", "copy(1, foreground)", "copy(1, ifd)", "copy(1, last_member)", "copy(1, level)", "copy(1, list)", "copy(1, maxbits)", "copy(1, method)", "copy(1, no_name)", "copy(1, no_time)", "copy(1, ofd)", "copy(1, part_nb)", "copy(1, quiet)", "copy(1, recursive)", "copy(1, remove_ofname_fd)", "copy(1, save_orig_name)", "copy(1, test)", "copy(1, to_stdout)", "copy(1, verbose)", "ct_tally(1, 0)", "ct_tally(1, 1)", "ct_tally(1, ascii)", "ct_tally(1, block_mode)", "ct_tally(1, decompress)", "ct_tally(1, decrypt)", "ct_tally(1, do_lzw)", "ct_tally(1, exit_code)", "ct_tally(1, exiting_signal)", "ct_tally(1, force)", "ct_tally(1, foreground)", "ct_tally(1, ifd)", "ct_tally(1, last_member)", "ct_tally(1, level)", "ct_tally(1, list)", "ct_tally(1, maxbits)", "ct_tally(1, method)", "ct_tally(1, no_name)", "ct_tally(1, no_time)", "ct_tally(1, ofd)", "ct_tally(1, part_nb)", "ct_tally(1, quiet)", "ct_tally(1, recursive)", "ct_tally(1, remove_ofname_fd)", "ct_tally(1, save_orig_name)", "ct_tally(1, test)", "ct_tally(1, to_stdout)", "ct_tally(1, verbose)", "daemon(1, 0)", "daemon(1, 1)", "daemon(1, ascii)", "daemon(1, block_mode)", "daemon(1, decompress)", "daemon(1, decrypt)", "daemon(1, do_lzw)", "daemon(1, exit_code)", "daemon(1, exiting_signal)", "daemon(1, force)", "daemon(1, foreground)", "daemon(1, ifd)", "daemon(1, last_member)", "daemon(1, level)", "daemon(1, list)", "daemon(1, maxbits)", "daemon(1, method)", "daemon(1, no_name)", "daemon(1, no_time)", "daemon(1, ofd)", "daemon(1, part_nb)", "daemon(1, quiet)", "daemon(1, recursive)", "daemon(1, remove_ofname_fd)", "daemon(1, save_orig_name)", "daemon(1, test)", "daemon(1, to_stdout)", "daemon(1, verbose)", "div(1, 0)", "div(1, 1)", "div(1, ascii)", "div(1, block_mode)", "div(1, decompress)", "div(1, decrypt)", "div(1, do_lzw)", "div(1, exit_code)", "div(1, exiting_signal)", "div(1, force)", "div(1, foreground)", "div(1, ifd)", "div(1, last_member)", "div(1, level)", "div(1, list)", "div(1, maxbits)", "div(1, method)", "div(1, no_name)", "div(1, no_time)", "div(1, ofd)", "div(1, part_nb)", "div(1, quiet)", "div(1, recursive)", "div(1, remove_ofname_fd)", "div(1, save_orig_name)", "div(1, test)", "div(1, to_stdout)", "div(1, verbose)", "do_list(1, 0)", "do_list(1, 1)", "do_list(1, ascii)", "do_list(1, block_mode)", "do_list(1, decompress)", "do_list(1, decrypt)", "do_list(1, do_lzw)", "do_list(1, exit_code)", "do_list(1, exiting_signal)", "do_list(1, force)", "do_list(1, foreground)", "do_list(1, ifd)", "do_list(1, last_member)", "do_list(1, level)", "do_list(1, list)", "do_list(1, maxbits)", "do_list(1, method)", "do_list(1, no_name)", "do_list(1, no_time)", "do_list(1, ofd)", "do_list(1, part_nb)", "do_list(1, quiet)", "do_list(1, recursive)", "do_list(1, remove_ofname_fd)", "do_list(1, save_orig_name)", "do_list(1, test)", "do_list(1, to_stdout)", "do_list(1, verbose)", "dup2(1, 0)", "dup2(1, 1)", "dup2(1, ascii)", "dup2(1, block_mode)", "dup2(1, decompress)", "dup2(1, decrypt)", "dup2(1, do_lzw)", "dup2(1, exit_code)", "dup2(1, exiting_signal)", "dup2(1, force)", "dup2(1, foreground)", "dup2(1, ifd)", "dup2(1, last_member)", "dup2(1, level)", "dup2(1, list)", "dup2(1, maxbits)", "dup2(1, method)", "dup2(1, no_name)", "dup2(1, no_time)", "dup2(1, ofd)", "dup2(1, part_nb)", "dup2(1, quiet)", "dup2(1, recursive)", "dup2(1, remove_ofname_fd)", "dup2(1, save_orig_name)", "dup2(1, test)", "dup2(1, to_stdout)", "dup2(1, verbose)", "fchmod(1, 0)", "fchmod(1, 1)", "fchmod(1, inptr)", "fchmod(1, insize)", "fchmod(1, outcnt)", "fdopen(1, 0)", "fpathconf(1, 0)", "fpathconf(1, 1)", "fpathconf(1, ascii)", "fpathconf(1, block_mode)", "fpathconf(1, decompress)", "fpathconf(1, decrypt)", "fpathconf(1, do_lzw)", "fpathconf(1, exit_code)", "fpathconf(1, exiting_signal)", "fpathconf(1, force)", "fpathconf(1, foreground)", "fpathconf(1, ifd)", "fpathconf(1, last_member)", "fpathconf(1, level)", "fpathconf(1, list)", "fpathconf(1, maxbits)", "fpathconf(1, method)", "fpathconf(1, no_name)", "fpathconf(1, no_time)", "fpathconf(1, ofd)", "fpathconf(1, part_nb)", "fpathconf(1, quiet)", "fpathconf(1, recursive)", "fpathconf(1, remove_ofname_fd)", "fpathconf(1, save_orig_name)", "fpathconf(1, test)", "fpathconf(1, to_stdout)", "fpathconf(1, verbose)", "fputc(1, 0)", "fputc_unlocked(1, 0)", "fstat(1, 0)", "fstat64(1, 0)", "ftruncate(1, 0)", "ftruncate(1, 1)", "ftruncate(1, bytes_in)", "ftruncate(1, bytes_out)", "ftruncate(1, header_bytes)", "ftruncate(1, ifile_size)", "ftruncate(1, total_in)", "ftruncate(1, total_out)", "ftruncate64(1, 0)", "ftruncate64(1, 1)", "ftruncate64(1, bytes_in)", "ftruncate64(1, bytes_out)", "ftruncate64(1, header_bytes)", "ftruncate64(1, ifile_size)", "ftruncate64(1, total_in)", "ftruncate64(1, total_out)", "futimens(1, 0)", "getgroups(1, 0)", "isalnum_l(1, 0)", "isalpha_l(1, 0)", "isblank_l(1, 0)", "iscntrl_l(1, 0)", "isctype(1, 0)", "isctype(1, 1)", "isctype(1, ascii)", "isctype(1, block_mode)", "isctype(1, decompress)", "isctype(1, decrypt)", "isctype(1, do_lzw)", "isctype(1, exit_code)", "isctype(1, exiting_signal)", "isctype(1, force)", "isctype(1, foreground)", "isctype(1, ifd)", "isctype(1, last_member)", "isctype(1, level)", "isctype(1, list)", "isctype(1, maxbits)", "isctype(1, method)", "isctype(1, no_name)", "isctype(1, no_time)", "isctype(1, ofd)", "isctype(1, part_nb)", "isctype(1, quiet)", "isctype(1, recursive)", "isctype(1, remove_ofname_fd)", "isctype(1, save_orig_name)", "isctype(1, test)", "isctype(1, to_stdout)", "isctype(1, verbose)", "isdigit_l(1, 0)", "isgraph_l(1, 0)", "islower_l(1, 0)", "isprint_l(1, 0)", "ispunct_l(1, 0)", "isspace_l(1, 0)", "isupper_l(1, 0)", "isxdigit_l(1, 0)", "kill(1, 0)", "kill(1, 1)", "kill(1, ascii)", "kill(1, block_mode)", "kill(1, decompress)", "kill(1, decrypt)", "kill(1, do_lzw)", "kill(1, exit_code)", "kill(1, exiting_signal)", "kill(1, force)", "kill(1, foreground)", "kill(1, ifd)", "kill(1, last_member)", "kill(1, level)", "kill(1, list)", "kill(1, maxbits)", "kill(1, method)", "kill(1, no_name)", "kill(1, no_time)", "kill(1, ofd)", "kill(1, part_nb)", "kill(1, quiet)", "kill(1, recursive)", "kill(1, remove_ofname_fd)", "kill(1, save_orig_name)", "kill(1, test)", "kill(1, to_stdout)", "kill(1, verbose)", "killpg(1, 0)", "killpg(1, 1)", "killpg(1, ascii)", "killpg(1, block_mode)", "killpg(1, decompress)", "killpg(1, decrypt)", "killpg(1, do_lzw)", "killpg(1, exit_code)", "killpg(1, exiting_signal)", "killpg(1, force)", "killpg(1, foreground)", "killpg(1, ifd)", "killpg(1, last_member)", "killpg(1, level)", "killpg(1, list)", "killpg(1, maxbits)", "killpg(1, method)", "killpg(1, no_name)", "killpg(1, no_time)", "killpg(1, ofd)", "killpg(1, part_nb)", "killpg(1, quiet)", "killpg(1, recursive)", "killpg(1, remove_ofname_fd)", "killpg(1, save_orig_name)", "killpg(1, test)", "killpg(1, to_stdout)", "killpg(1, verbose)", "lm_init(1, 0)", "lzw(1, 0)", "lzw(1, 1)", "lzw(1, ascii)", "lzw(1, block_mode)", "lzw(1, decompress)", "lzw(1, decrypt)", "lzw(1, do_lzw)", "lzw(1, exit_code)", "lzw(1, exiting_signal)", "lzw(1, force)", "lzw(1, foreground)", "lzw(1, ifd)", "lzw(1, last_member)", "lzw(1, level)", "lzw(1, list)", "lzw(1, maxbits)", "lzw(1, method)", "lzw(1, no_name)", "lzw(1, no_time)", "lzw(1, ofd)", "lzw(1, part_nb)", "lzw(1, quiet)", "lzw(1, recursive)", "lzw(1, remove_ofname_fd)", "lzw(1, save_orig_name)", "lzw(1, test)", "lzw(1, to_stdout)", "lzw(1, verbose)", "main(1, 0)", "main(1, args)", "psignal(1, 0)", "putc(1, 0)", "putc_unlocked(1, 0)", "putw(1, 0)", "send_bits(1, 0)", "send_bits(1, 1)", "send_bits(1, ascii)", "send_bits(1, block_mode)", "send_bits(1, decompress)", "send_bits(1, decrypt)", "send_bits(1, do_lzw)", "send_bits(1, exit_code)", "send_bits(1, exiting_signal)", "send_bits(1, force)", "send_bits(1, foreground)", "send_bits(1, ifd)", "send_bits(1, last_member)", "send_bits(1, level)", "send_bits(1, list)", "send_bits(1, maxbits)", "send_bits(1, method)", "send_bits(1, no_name)", "send_bits(1, no_time)", "send_bits(1, ofd)", "send_bits(1, part_nb)", "send_bits(1, quiet)", "send_bits(1, recursive)", "send_bits(1, remove_ofname_fd)", "send_bits(1, save_orig_name)", "send_bits(1, test)", "send_bits(1, to_stdout)", "send_bits(1, verbose)", "setpgid(1, 0)", "setpgid(1, 1)", "setpgid(1, ascii)", "setpgid(1, block_mode)", "setpgid(1, decompress)", "setpgid(1, decrypt)", "setpgid(1, do_lzw)", "setpgid(1, exit_code)", "setpgid(1, exiting_signal)", "setpgid(1, force)", "setpgid(1, foreground)", "setpgid(1, ifd)", "setpgid(1, last_member)", "setpgid(1, level)", "setpgid(1, list)", "setpgid(1, maxbits)", "setpgid(1, method)", "setpgid(1, no_name)", "setpgid(1, no_time)", "setpgid(1, ofd)", "setpgid(1, part_nb)", "setpgid(1, quiet)", "setpgid(1, recursive)", "setpgid(1, remove_ofname_fd)", "setpgid(1, save_orig_name)", "setpgid(1, test)", "setpgid(1, to_stdout)", "setpgid(1, verbose)", "siginterrupt(1, 0)", "siginterrupt(1, 1)", "siginterrupt(1, ascii)", "siginterrupt(1, block_mode)", "siginterrupt(1, decompress)", "siginterrupt(1, decrypt)", "siginterrupt(1, do_lzw)", "siginterrupt(1, exit_code)", "siginterrupt(1, exiting_signal)", "siginterrupt(1, force)", "siginterrupt(1, foreground)", "siginterrupt(1, ifd)", "siginterrupt(1, last_member)", "siginterrupt(1, level)", "siginterrupt(1, list)", "siginterrupt(1, maxbits)", "siginterrupt(1, method)", "siginterrupt(1, no_name)", "siginterrupt(1, no_time)", "siginterrupt(1, ofd)", "siginterrupt(1, part_nb)", "siginterrupt(1, quiet)", "siginterrupt(1, recursive)", "siginterrupt(1, remove_ofname_fd)", "siginterrupt(1, save_orig_name)", "siginterrupt(1, test)", "siginterrupt(1, to_stdout)", "siginterrupt(1, verbose)", "signal(1, 0)", "signal(1, abort_gzip_signal)", "signal(1, bi_init)", "sigset(1, 0)", "sigset(1, abort_gzip_signal)", "sigset(1, bi_init)", "ssignal(1, 0)", "ssignal(1, abort_gzip_signal)", "ssignal(1, bi_init)", "strerror_l(1, 0)", "sysv_signal(1, 0)", "sysv_signal(1, abort_gzip_signal)", "sysv_signal(1, bi_init)", "tcsetpgrp(1, 0)", "tcsetpgrp(1, 1)", "tcsetpgrp(1, ascii)", "tcsetpgrp(1, block_mode)", "tcsetpgrp(1, decompress)", "tcsetpgrp(1, decrypt)", "tcsetpgrp(1, do_lzw)", "tcsetpgrp(1, exit_code)", "tcsetpgrp(1, exiting_signal)", "tcsetpgrp(1, force)", "tcsetpgrp(1, foreground)", "tcsetpgrp(1, ifd)", "tcsetpgrp(1, last_member)", "tcsetpgrp(1, level)", "tcsetpgrp(1, list)", "tcsetpgrp(1, maxbits)", "tcsetpgrp(1, method)", "tcsetpgrp(1, no_name)", "tcsetpgrp(1, no_time)", "tcsetpgrp(1, ofd)", "tcsetpgrp(1, part_nb)", "tcsetpgrp(1, quiet)", "tcsetpgrp(1, recursive)", "tcsetpgrp(1, remove_ofname_fd)", "tcsetpgrp(1, save_orig_name)", "tcsetpgrp(1, test)", "tcsetpgrp(1, to_stdout)", "tcsetpgrp(1, verbose)", "tolower_l(1, 0)", "toupper_l(1, 0)", "treat_dir(1, 0)", "treat_dir(1, env)", "treat_dir(1, program_name)", "treat_dir(1, z_suffix)", "ungetc(1, 0)", "unlzh(1, 0)", "unlzh(1, 1)", "unlzh(1, ascii)", "unlzh(1, block_mode)", "unlzh(1, decompress)", "unlzh(1, decrypt)", "unlzh(1, do_lzw)", "unlzh(1, exit_code)", "unlzh(1, exiting_signal)", "unlzh(1, force)", "unlzh(1, foreground)", "unlzh(1, ifd)", "unlzh(1, last_member)", "unlzh(1, level)", "unlzh(1, list)", "unlzh(1, maxbits)", "unlzh(1, method)", "unlzh(1, no_name)", "unlzh(1, no_time)", "unlzh(1, ofd)", "unlzh(1, part_nb)", "unlzh(1, quiet)", "unlzh(1, recursive)", "unlzh(1, remove_ofname_fd)", "unlzh(1, save_orig_name)", "unlzh(1, test)", "unlzh(1, to_stdout)", "unlzh(1, verbose)", "unlzw(1, 0)", "unlzw(1, 1)", "unlzw(1, ascii)", "unlzw(1, block_mode)", "unlzw(1, decompress)", "unlzw(1, decrypt)", "unlzw(1, do_lzw)", "unlzw(1, exit_code)", "unlzw(1, exiting_signal)", "unlzw(1, force)", "unlzw(1, foreground)", "unlzw(1, ifd)", "unlzw(1, last_member)", "unlzw(1, level)", "unlzw(1, list)", "unlzw(1, maxbits)", "unlzw(1, method)", "unlzw(1, no_name)", "unlzw(1, no_time)", "unlzw(1, ofd)", "unlzw(1, part_nb)", "unlzw(1, quiet)", "unlzw(1, recursive)", "unlzw(1, remove_ofname_fd)", "unlzw(1, save_orig_name)", "unlzw(1, test)", "unlzw(1, to_stdout)", "unlzw(1, verbose)", "unpack(1, 0)", "unpack(1, 1)", "unpack(1, ascii)", "unpack(1, block_mode)", "unpack(1, decompress)", "unpack(1, decrypt)", "unpack(1, do_lzw)", "unpack(1, exit_code)", "unpack(1, exiting_signal)", "unpack(1, force)", "unpack(1, foreground)", "unpack(1, ifd)", "unpack(1, last_member)", "unpack(1, level)", "unpack(1, list)", "unpack(1, maxbits)", "unpack(1, method)", "unpack(1, no_name)", "unpack(1, no_time)", "unpack(1, ofd)", "unpack(1, part_nb)", "unpack(1, quiet)", "unpack(1, recursive)", "unpack(1, remove_ofname_fd)", "unpack(1, save_orig_name)", "unpack(1, test)", "unpack(1, to_stdout)", "unpack(1, verbose)", "unzip(1, 0)", "unzip(1, 1)", "unzip(1, ascii)", "unzip(1, block_mode)", "unzip(1, decompress)", "unzip(1, decrypt)", "unzip(1, do_lzw)", "unzip(1, exit_code)", "unzip(1, exiting_signal)", "unzip(1, force)", "unzip(1, foreground)", "unzip(1, ifd)", "unzip(1, last_member)", "unzip(1, level)", "unzip(1, list)", "unzip(1, maxbits)", "unzip(1, method)", "unzip(1, no_name)", "unzip(1, no_time)", "unzip(1, ofd)", "unzip(1, part_nb)", "unzip(1, quiet)", "unzip(1, recursive)", "unzip(1, remove_ofname_fd)", "unzip(1, save_orig_name)", "unzip(1, test)", "unzip(1, to_stdout)", "unzip(1, verbose)", "zip(1, 0)", "zip(1, 1)", "zip(1, ascii)", "zip(1, block_mode)", "zip(1, decompress)", "zip(1, decrypt)", "zip(1, do_lzw)", "zip(1, exit_code)", "zip(1, exiting_signal)", "zip(1, force)", "zip(1, foreground)", "zip(1, ifd)", "zip(1, last_member)", "zip(1, level)", "zip(1, list)", "zip(1, maxbits)", "zip(1, method)", "zip(1, no_name)", "zip(1, no_time)", "zip(1, ofd)", "zip(1, part_nb)", "zip(1, quiet)", "zip(1, recursive)", "zip(1, remove_ofname_fd)", "zip(1, save_orig_name)", "zip(1, test)", "zip(1, to_stdout)", "zip(1, verbose)", "{\n}\n", "_Exit(1)", "__getpgid(1)", "_exit(1)", "_tolower(1)", "_toupper(1)", "abort_gzip_signal(1)", "abs(1)", "bi_init(1)", "check_zipfile(1)", "close(1)", "do_exit(1)", "dup(1)", "dysize(1)", "exit(1)", "fchdir(1)", "fdatasync(1)", "fdopendir(1)", "ffs(1)", "fill_inbuf(1)", "fsync(1)", "get_method(1)", "getpgid(1)", "getsid(1)", "grantpt(1)", "gsignal(1)", "isalnum(1)", "isalpha(1)", "isascii(1)", "isatty(1)", "isblank(1)", "iscntrl(1)", "isdigit(1)", "isgraph(1)", "islower(1)", "isprint(1)", "ispunct(1)", "isspace(1)", "isupper(1)", "isxdigit(1)", "nice(1)", "posix_openpt(1)", "ptsname(1)", "putchar(1)", "putchar_unlocked(1)", "quick_exit(1)", "raise(1)", "sigblock(1)", "sighold(1)", "sigignore(1)", "sigpause(1)", "sigrelse(1)", "sigsetmask(1)", "strerror(1)", "strsignal(1)", "syncfs(1)", "sysconf(1)", "tcgetpgrp(1)", "toascii(1)", "tolower(1)", "toupper(1)", "ttyname(1)", "unlockpt(1)", "do_exit((0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[]
								}, {
									"case":	2,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	3,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	4,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	5,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	6,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	7,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	8,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	9,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	10,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	11,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	12,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	13,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	14,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	15,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	16,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	17,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	18,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	19,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	20,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	21,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	22,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	23,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	24,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	25,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	26,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	27,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	28,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	29,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	30,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	31,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	32,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	33,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	34,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	35,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	36,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	37,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	38,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	39,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	40,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	41,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	42,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	43,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	44,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	45,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	46,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	47,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	48,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	49,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	50,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	51,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	52,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	53,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	54,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	55,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	56,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	57,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	58,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	59,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	60,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	61,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	62,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	63,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	64,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	65,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	66,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	67,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	68,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	69,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	70,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	71,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	72,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	73,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	74,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	75,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	76,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	77,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	78,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	79,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	80,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	81,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	82,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	83,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	84,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	85,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	86,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	87,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	88,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	89,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	90,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	91,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	92,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	93,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	94,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	95,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	96,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	97,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	98,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	99,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	100,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	101,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	102,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	103,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	104,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	105,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	106,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	107,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	108,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	109,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	110,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	111,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	112,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	113,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	114,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	115,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	116,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	117,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	118,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	119,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	120,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	121,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	122,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	123,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	124,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	125,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	126,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	127,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	128,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	129,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	130,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	131,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	132,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	133,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	134,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	135,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	136,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	137,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	138,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	139,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	140,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	141,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	142,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	143,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	144,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	145,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	146,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	147,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	148,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	149,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	150,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	151,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	152,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	153,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	154,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	155,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	156,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	157,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	158,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	159,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	160,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	161,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	162,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	163,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	164,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	165,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	166,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	167,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	168,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	169,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	170,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	171,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	172,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	173,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	174,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	175,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	176,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	177,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	178,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	179,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	180,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	181,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	182,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	183,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	184,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	185,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	186,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	187,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	188,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	189,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	190,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	191,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	192,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	193,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	194,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	195,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	196,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	197,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	198,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	199,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	200,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	201,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	202,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	203,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	204,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	205,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	206,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	207,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	208,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	209,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	210,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	211,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	212,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	213,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	214,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	215,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	216,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	217,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	218,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	219,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	220,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	221,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	222,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	223,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	224,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	225,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	226,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	227,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	228,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	229,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	230,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	231,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	232,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	233,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	234,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	235,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	236,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	237,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	238,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	239,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	240,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	241,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	242,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	243,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	244,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	245,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	246,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	247,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	248,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	249,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	250,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	251,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	252,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	253,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	254,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	255,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	256,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	257,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	258,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	259,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	260,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	261,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	262,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	263,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	264,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	265,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	266,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	267,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	268,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	269,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	270,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	271,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	272,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	273,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	274,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	275,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	276,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	277,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	278,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	279,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	280,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	281,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	282,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	283,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	284,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	285,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	286,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	287,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	288,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	289,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	290,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	291,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	292,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	293,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	294,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	295,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	296,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	297,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	298,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	299,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	300,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	301,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	302,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	303,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	304,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	305,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	306,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	307,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	308,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	309,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	310,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	311,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	312,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	313,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	314,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	315,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	316,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	317,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	318,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	319,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	320,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	321,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	322,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	323,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	324,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	325,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	326,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	327,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	328,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	329,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	330,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	331,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	332,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	333,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	334,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	335,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	336,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	337,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	338,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	339,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	340,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	341,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	342,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	343,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	344,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	345,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	346,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	347,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	348,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	349,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	350,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	351,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	352,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	353,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	354,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	355,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	356,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	357,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	358,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	359,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	360,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	361,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	362,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	363,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	364,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	365,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	366,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	367,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	368,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	369,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	370,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	371,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	372,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	373,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	374,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	375,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	376,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	377,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	378,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	379,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	380,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	381,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	382,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	383,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	384,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	385,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	386,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	387,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	388,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	389,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	390,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	391,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	392,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	393,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	394,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	395,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	396,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	397,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	398,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	399,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	400,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	401,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	402,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	403,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	404,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	405,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	406,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	407,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	408,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	409,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	410,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	411,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	412,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	413,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	414,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	415,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	416,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	417,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	418,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	419,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	420,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	421,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	422,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	423,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	424,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	425,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	426,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	427,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	428,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	429,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	430,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	431,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	432,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	433,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	434,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	435,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	436,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	437,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	438,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	439,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	440,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	441,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	442,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	443,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	444,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	445,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	446,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	447,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	448,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	449,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	450,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	451,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	452,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	453,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	454,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	455,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	456,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	457,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	458,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	459,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	460,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	461,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	462,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	463,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	464,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	465,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	466,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	467,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	468,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	469,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	470,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	471,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	472,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	473,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	474,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	475,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	476,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	477,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	478,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	479,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	480,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	481,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	482,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	483,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	484,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	485,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	486,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	487,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	488,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	489,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	490,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	491,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	492,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	493,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	494,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	495,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	496,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	497,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	498,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	499,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	500,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	501,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	502,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	503,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	504,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	505,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	506,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	507,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	508,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	509,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	510,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	511,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	512,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	513,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	514,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	515,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	516,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	517,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	518,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	519,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	520,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	521,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	522,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	523,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	524,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	525,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	526,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	527,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	528,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	529,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	530,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	531,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	532,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	533,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	534,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	535,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	536,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	537,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	538,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	539,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	540,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	541,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	542,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	543,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	544,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	545,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	546,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	547,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	548,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	549,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	550,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	551,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	552,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	553,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	554,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	555,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	556,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	557,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	558,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	559,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	560,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	561,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	562,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	563,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	564,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	565,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	566,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	567,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	568,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	569,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	570,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	571,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	572,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	573,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	574,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	575,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	576,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	577,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	578,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	579,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	580,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	581,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	582,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	583,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	584,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	585,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	586,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	587,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	588,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	589,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	590,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	591,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	592,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	593,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	594,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	595,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	596,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	597,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	598,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	599,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	600,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	601,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	602,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	603,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	604,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	605,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	606,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	607,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	608,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	609,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	610,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	611,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	612,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	613,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	614,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	615,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	616,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	617,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	618,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	619,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	620,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	621,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	622,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	623,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	624,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	625,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	626,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	627,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	628,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	629,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	630,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	631,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	632,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	633,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	634,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	635,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	636,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	637,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	638,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	639,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	640,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	641,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	642,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	643,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	644,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	645,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	646,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	647,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	648,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	649,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	650,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	651,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	652,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	653,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	654,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	655,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	656,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	657,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	658,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	659,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	660,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	661,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	662,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	663,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	664,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	665,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	666,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	667,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	668,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	669,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	670,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	671,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	672,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	673,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	674,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	675,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	676,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	677,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	678,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	679,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	680,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	681,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	682,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	683,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	684,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	685,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	686,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	687,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	688,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	689,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	690,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	691,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	692,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	693,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	694,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	695,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	696,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	697,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	698,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	699,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	700,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	701,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	702,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	703,
									"scores":	[-4.7605367127639635]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	200,
			"size":	6
		}, {
			"switch":	0,
			"case":	201,
			"size":	6
		}, {
			"switch":	0,
			"case":	202,
			"size":	6
		}, {
			"switch":	0,
			"case":	203,
			"size":	6
		}, {
			"switch":	1,
			"case":	1,
			"size":	6
		}, {
			"switch":	2,
			"case":	395,
			"size":	37
		}, {
			"switch":	2,
			"case":	396,
			"size":	37
		}, {
			"switch":	3,
			"case":	1,
			"size":	37
		}, {
			"switch":	4,
			"case":	395,
			"size":	37
		}, {
			"switch":	4,
			"case":	396,
			"size":	37
		}, {
			"switch":	5,
			"case":	1,
			"size":	37
		}, {
			"switch":	5,
			"case":	2,
			"size":	37
		}, {
			"switch":	5,
			"case":	3,
			"size":	37
		}, {
			"switch":	6,
			"case":	395,
			"size":	37
		}, {
			"switch":	6,
			"case":	396,
			"size":	37
		}, {
			"switch":	7,
			"case":	1,
			"size":	37
		}, {
			"switch":	8,
			"case":	1,
			"size":	37
		}, {
			"switch":	10,
			"case":	1,
			"size":	37
		}, {
			"switch":	10,
			"case":	2,
			"size":	37
		}, {
			"switch":	11,
			"case":	426,
			"size":	60
		}, {
			"switch":	12,
			"case":	1,
			"size":	60
		}, {
			"switch":	13,
			"case":	425,
			"size":	60
		}, {
			"switch":	14,
			"case":	1,
			"size":	60
		}, {
			"switch":	14,
			"case":	2,
			"size":	60
		}, {
			"switch":	14,
			"case":	51,
			"size":	60
		}, {
			"switch":	15,
			"case":	1,
			"size":	60
		}, {
			"switch":	15,
			"case":	2,
			"size":	60
		}, {
			"switch":	16,
			"case":	425,
			"size":	38
		}, {
			"switch":	17,
			"case":	1,
			"size":	38
		}, {
			"switch":	18,
			"case":	425,
			"size":	38
		}, {
			"switch":	19,
			"case":	1,
			"size":	38
		}, {
			"switch":	20,
			"case":	425,
			"size":	38
		}, {
			"switch":	21,
			"case":	1,
			"size":	38
		}, {
			"switch":	22,
			"case":	425,
			"size":	38
		}, {
			"switch":	23,
			"case":	1,
			"size":	38
		}, {
			"switch":	24,
			"case":	425,
			"size":	38
		}, {
			"switch":	25,
			"case":	1,
			"size":	38
		}, {
			"switch":	25,
			"case":	2,
			"size":	38
		}, {
			"switch":	25,
			"case":	3,
			"size":	38
		}, {
			"switch":	26,
			"case":	1,
			"size":	38
		}, {
			"switch":	26,
			"case":	2,
			"size":	38
		}, {
			"switch":	28,
			"case":	1,
			"size":	6
		}, {
			"switch":	28,
			"case":	34,
			"size":	6
		}, {
			"switch":	29,
			"case":	379,
			"size":	6
		}, {
			"switch":	29,
			"case":	380,
			"size":	6
		}, {
			"switch":	30,
			"case":	1,
			"size":	6
		}, {
			"switch":	32,
			"case":	1,
			"size":	19
		}, {
			"switch":	32,
			"case":	2,
			"size":	19
		}, {
			"switch":	33,
			"case":	172,
			"size":	19
		}, {
			"switch":	33,
			"case":	173,
			"size":	19
		}, {
			"switch":	33,
			"case":	174,
			"size":	19
		}, {
			"switch":	34,
			"case":	1,
			"size":	19
		}, {
			"switch":	34,
			"case":	2,
			"size":	19
		}, {
			"switch":	34,
			"case":	3,
			"size":	19
		}, {
			"switch":	35,
			"case":	1,
			"size":	19
		}, {
			"switch":	35,
			"case":	2,
			"size":	19
		}, {
			"switch":	36,
			"case":	172,
			"size":	19
		}, {
			"switch":	36,
			"case":	173,
			"size":	19
		}, {
			"switch":	36,
			"case":	174,
			"size":	19
		}, {
			"switch":	37,
			"case":	1,
			"size":	19
		}, {
			"switch":	38,
			"case":	172,
			"size":	19
		}, {
			"switch":	38,
			"case":	173,
			"size":	19
		}, {
			"switch":	38,
			"case":	174,
			"size":	19
		}, {
			"switch":	39,
			"case":	1,
			"size":	19
		}, {
			"switch":	39,
			"case":	2,
			"size":	19
		}, {
			"switch":	39,
			"case":	61,
			"size":	19
		}, {
			"switch":	40,
			"case":	172,
			"size":	19
		}, {
			"switch":	40,
			"case":	173,
			"size":	19
		}, {
			"switch":	40,
			"case":	174,
			"size":	19
		}, {
			"switch":	41,
			"case":	1,
			"size":	19
		}, {
			"switch":	42,
			"case":	1,
			"size":	19
		}, {
			"switch":	42,
			"case":	2,
			"size":	19
		}, {
			"switch":	43,
			"case":	1,
			"size":	28
		}, {
			"switch":	43,
			"case":	2,
			"size":	28
		}, {
			"switch":	44,
			"case":	545,
			"size":	28
		}, {
			"switch":	44,
			"case":	546,
			"size":	28
		}, {
			"switch":	44,
			"case":	547,
			"size":	28
		}, {
			"switch":	44,
			"case":	548,
			"size":	28
		}, {
			"switch":	44,
			"case":	549,
			"size":	28
		}, {
			"switch":	44,
			"case":	550,
			"size":	28
		}, {
			"switch":	44,
			"case":	551,
			"size":	28
		}, {
			"switch":	44,
			"case":	552,
			"size":	28
		}, {
			"switch":	44,
			"case":	553,
			"size":	28
		}, {
			"switch":	44,
			"case":	554,
			"size":	28
		}, {
			"switch":	44,
			"case":	555,
			"size":	28
		}, {
			"switch":	44,
			"case":	556,
			"size":	28
		}, {
			"switch":	44,
			"case":	557,
			"size":	28
		}, {
			"switch":	45,
			"case":	1,
			"size":	28
		}, {
			"switch":	45,
			"case":	2,
			"size":	28
		}, {
			"switch":	45,
			"case":	3,
			"size":	28
		}, {
			"switch":	45,
			"case":	14,
			"size":	28
		}, {
			"switch":	46,
			"case":	545,
			"size":	28
		}, {
			"switch":	46,
			"case":	546,
			"size":	28
		}, {
			"switch":	46,
			"case":	547,
			"size":	28
		}, {
			"switch":	46,
			"case":	548,
			"size":	28
		}, {
			"switch":	46,
			"case":	549,
			"size":	28
		}, {
			"switch":	46,
			"case":	550,
			"size":	28
		}, {
			"switch":	46,
			"case":	551,
			"size":	28
		}, {
			"switch":	46,
			"case":	552,
			"size":	28
		}, {
			"switch":	46,
			"case":	553,
			"size":	28
		}, {
			"switch":	46,
			"case":	554,
			"size":	28
		}, {
			"switch":	46,
			"case":	555,
			"size":	28
		}, {
			"switch":	46,
			"case":	556,
			"size":	28
		}, {
			"switch":	46,
			"case":	557,
			"size":	28
		}, {
			"switch":	47,
			"case":	1,
			"size":	28
		}, {
			"switch":	47,
			"case":	2,
			"size":	28
		}, {
			"switch":	47,
			"case":	7,
			"size":	28
		}, {
			"switch":	48,
			"case":	545,
			"size":	28
		}, {
			"switch":	48,
			"case":	546,
			"size":	28
		}, {
			"switch":	48,
			"case":	547,
			"size":	28
		}, {
			"switch":	48,
			"case":	548,
			"size":	28
		}, {
			"switch":	48,
			"case":	549,
			"size":	28
		}, {
			"switch":	48,
			"case":	550,
			"size":	28
		}, {
			"switch":	48,
			"case":	551,
			"size":	28
		}, {
			"switch":	48,
			"case":	552,
			"size":	28
		}, {
			"switch":	48,
			"case":	553,
			"size":	28
		}, {
			"switch":	48,
			"case":	554,
			"size":	28
		}, {
			"switch":	48,
			"case":	555,
			"size":	28
		}, {
			"switch":	48,
			"case":	556,
			"size":	28
		}, {
			"switch":	48,
			"case":	557,
			"size":	28
		}, {
			"switch":	49,
			"case":	1,
			"size":	28
		}, {
			"switch":	49,
			"case":	2,
			"size":	28
		}, {
			"switch":	49,
			"case":	7,
			"size":	28
		}, {
			"switch":	50,
			"case":	545,
			"size":	28
		}, {
			"switch":	50,
			"case":	546,
			"size":	28
		}, {
			"switch":	50,
			"case":	547,
			"size":	28
		}, {
			"switch":	50,
			"case":	548,
			"size":	28
		}, {
			"switch":	50,
			"case":	549,
			"size":	28
		}, {
			"switch":	50,
			"case":	550,
			"size":	28
		}, {
			"switch":	50,
			"case":	551,
			"size":	28
		}, {
			"switch":	50,
			"case":	552,
			"size":	28
		}, {
			"switch":	50,
			"case":	553,
			"size":	28
		}, {
			"switch":	50,
			"case":	554,
			"size":	28
		}, {
			"switch":	50,
			"case":	555,
			"size":	28
		}, {
			"switch":	50,
			"case":	556,
			"size":	28
		}, {
			"switch":	50,
			"case":	557,
			"size":	28
		}, {
			"switch":	51,
			"case":	1,
			"size":	28
		}, {
			"switch":	51,
			"case":	2,
			"size":	28
		}, {
			"switch":	51,
			"case":	7,
			"size":	28
		}, {
			"switch":	52,
			"case":	545,
			"size":	28
		}, {
			"switch":	52,
			"case":	546,
			"size":	28
		}, {
			"switch":	52,
			"case":	547,
			"size":	28
		}, {
			"switch":	52,
			"case":	548,
			"size":	28
		}, {
			"switch":	52,
			"case":	549,
			"size":	28
		}, {
			"switch":	52,
			"case":	550,
			"size":	28
		}, {
			"switch":	52,
			"case":	551,
			"size":	28
		}, {
			"switch":	52,
			"case":	552,
			"size":	28
		}, {
			"switch":	52,
			"case":	553,
			"size":	28
		}, {
			"switch":	52,
			"case":	554,
			"size":	28
		}, {
			"switch":	52,
			"case":	555,
			"size":	28
		}, {
			"switch":	52,
			"case":	556,
			"size":	28
		}, {
			"switch":	52,
			"case":	557,
			"size":	28
		}, {
			"switch":	53,
			"case":	1,
			"size":	28
		}, {
			"switch":	53,
			"case":	2,
			"size":	28
		}, {
			"switch":	53,
			"case":	3,
			"size":	28
		}, {
			"switch":	53,
			"case":	7,
			"size":	28
		}, {
			"switch":	54,
			"case":	1,
			"size":	28
		}, {
			"switch":	55,
			"case":	1,
			"size":	28
		}, {
			"switch":	55,
			"case":	2,
			"size":	28
		}, {
			"switch":	56,
			"case":	1,
			"size":	28
		}, {
			"switch":	56,
			"case":	2,
			"size":	28
		}, {
			"switch":	57,
			"case":	1,
			"size":	28
		}, {
			"switch":	57,
			"case":	2,
			"size":	28
		}, {
			"switch":	58,
			"case":	1,
			"size":	28
		}, {
			"switch":	58,
			"case":	2,
			"size":	28
		}, {
			"switch":	59,
			"case":	545,
			"size":	28
		}, {
			"switch":	59,
			"case":	546,
			"size":	28
		}, {
			"switch":	59,
			"case":	547,
			"size":	28
		}, {
			"switch":	59,
			"case":	548,
			"size":	28
		}, {
			"switch":	59,
			"case":	549,
			"size":	28
		}, {
			"switch":	59,
			"case":	550,
			"size":	28
		}, {
			"switch":	59,
			"case":	551,
			"size":	28
		}, {
			"switch":	59,
			"case":	552,
			"size":	28
		}, {
			"switch":	59,
			"case":	553,
			"size":	28
		}, {
			"switch":	59,
			"case":	554,
			"size":	28
		}, {
			"switch":	59,
			"case":	555,
			"size":	28
		}, {
			"switch":	59,
			"case":	556,
			"size":	28
		}, {
			"switch":	59,
			"case":	557,
			"size":	28
		}, {
			"switch":	60,
			"case":	1,
			"size":	28
		}, {
			"switch":	60,
			"case":	2,
			"size":	28
		}, {
			"switch":	60,
			"case":	3,
			"size":	28
		}, {
			"switch":	61,
			"case":	545,
			"size":	28
		}, {
			"switch":	61,
			"case":	546,
			"size":	28
		}, {
			"switch":	61,
			"case":	547,
			"size":	28
		}, {
			"switch":	61,
			"case":	548,
			"size":	28
		}, {
			"switch":	61,
			"case":	549,
			"size":	28
		}, {
			"switch":	61,
			"case":	550,
			"size":	28
		}, {
			"switch":	61,
			"case":	551,
			"size":	28
		}, {
			"switch":	61,
			"case":	552,
			"size":	28
		}, {
			"switch":	61,
			"case":	553,
			"size":	28
		}, {
			"switch":	61,
			"case":	554,
			"size":	28
		}, {
			"switch":	61,
			"case":	555,
			"size":	28
		}, {
			"switch":	61,
			"case":	556,
			"size":	28
		}, {
			"switch":	61,
			"case":	557,
			"size":	28
		}, {
			"switch":	62,
			"case":	1,
			"size":	28
		}, {
			"switch":	62,
			"case":	2,
			"size":	28
		}, {
			"switch":	62,
			"case":	3,
			"size":	28
		}, {
			"switch":	63,
			"case":	562,
			"size":	29
		}, {
			"switch":	63,
			"case":	563,
			"size":	29
		}, {
			"switch":	63,
			"case":	564,
			"size":	29
		}, {
			"switch":	63,
			"case":	565,
			"size":	29
		}, {
			"switch":	63,
			"case":	566,
			"size":	29
		}, {
			"switch":	63,
			"case":	567,
			"size":	29
		}, {
			"switch":	63,
			"case":	568,
			"size":	29
		}, {
			"switch":	63,
			"case":	569,
			"size":	29
		}, {
			"switch":	63,
			"case":	570,
			"size":	29
		}, {
			"switch":	63,
			"case":	571,
			"size":	29
		}, {
			"switch":	63,
			"case":	572,
			"size":	29
		}, {
			"switch":	63,
			"case":	573,
			"size":	29
		}, {
			"switch":	63,
			"case":	574,
			"size":	29
		}, {
			"switch":	64,
			"case":	1,
			"size":	29
		}, {
			"switch":	65,
			"case":	562,
			"size":	29
		}, {
			"switch":	65,
			"case":	563,
			"size":	29
		}, {
			"switch":	65,
			"case":	564,
			"size":	29
		}, {
			"switch":	65,
			"case":	565,
			"size":	29
		}, {
			"switch":	65,
			"case":	566,
			"size":	29
		}, {
			"switch":	65,
			"case":	567,
			"size":	29
		}, {
			"switch":	65,
			"case":	568,
			"size":	29
		}, {
			"switch":	65,
			"case":	569,
			"size":	29
		}, {
			"switch":	65,
			"case":	570,
			"size":	29
		}, {
			"switch":	65,
			"case":	571,
			"size":	29
		}, {
			"switch":	65,
			"case":	572,
			"size":	29
		}, {
			"switch":	65,
			"case":	573,
			"size":	29
		}, {
			"switch":	65,
			"case":	574,
			"size":	29
		}, {
			"switch":	66,
			"case":	1,
			"size":	29
		}, {
			"switch":	66,
			"case":	2,
			"size":	29
		}, {
			"switch":	66,
			"case":	3,
			"size":	29
		}, {
			"switch":	67,
			"case":	562,
			"size":	29
		}, {
			"switch":	67,
			"case":	563,
			"size":	29
		}, {
			"switch":	67,
			"case":	564,
			"size":	29
		}, {
			"switch":	67,
			"case":	565,
			"size":	29
		}, {
			"switch":	67,
			"case":	566,
			"size":	29
		}, {
			"switch":	67,
			"case":	567,
			"size":	29
		}, {
			"switch":	67,
			"case":	568,
			"size":	29
		}, {
			"switch":	67,
			"case":	569,
			"size":	29
		}, {
			"switch":	67,
			"case":	570,
			"size":	29
		}, {
			"switch":	67,
			"case":	571,
			"size":	29
		}, {
			"switch":	67,
			"case":	572,
			"size":	29
		}, {
			"switch":	67,
			"case":	573,
			"size":	29
		}, {
			"switch":	67,
			"case":	574,
			"size":	29
		}, {
			"switch":	68,
			"case":	1,
			"size":	29
		}, {
			"switch":	68,
			"case":	2,
			"size":	29
		}, {
			"switch":	68,
			"case":	3,
			"size":	29
		}, {
			"switch":	69,
			"case":	1,
			"size":	29
		}, {
			"switch":	69,
			"case":	2,
			"size":	29
		}, {
			"switch":	70,
			"case":	562,
			"size":	29
		}, {
			"switch":	70,
			"case":	563,
			"size":	29
		}, {
			"switch":	70,
			"case":	564,
			"size":	29
		}, {
			"switch":	70,
			"case":	565,
			"size":	29
		}, {
			"switch":	70,
			"case":	566,
			"size":	29
		}, {
			"switch":	70,
			"case":	567,
			"size":	29
		}, {
			"switch":	70,
			"case":	568,
			"size":	29
		}, {
			"switch":	70,
			"case":	569,
			"size":	29
		}, {
			"switch":	70,
			"case":	570,
			"size":	29
		}, {
			"switch":	70,
			"case":	571,
			"size":	29
		}, {
			"switch":	70,
			"case":	572,
			"size":	29
		}, {
			"switch":	70,
			"case":	573,
			"size":	29
		}, {
			"switch":	70,
			"case":	574,
			"size":	29
		}, {
			"switch":	71,
			"case":	1,
			"size":	29
		}, {
			"switch":	72,
			"case":	1,
			"size":	29
		}, {
			"switch":	72,
			"case":	2,
			"size":	29
		}, {
			"switch":	73,
			"case":	1,
			"size":	28
		}, {
			"switch":	73,
			"case":	2,
			"size":	28
		}, {
			"switch":	74,
			"case":	1,
			"size":	28
		}, {
			"switch":	74,
			"case":	2,
			"size":	28
		}, {
			"switch":	75,
			"case":	494,
			"size":	27
		}, {
			"switch":	76,
			"case":	1,
			"size":	27
		}, {
			"switch":	77,
			"case":	495,
			"size":	27
		}, {
			"switch":	78,
			"case":	1,
			"size":	27
		}, {
			"switch":	79,
			"case":	495,
			"size":	22
		}, {
			"switch":	80,
			"case":	1,
			"size":	22
		}, {
			"switch":	80,
			"case":	2,
			"size":	22
		}, {
			"switch":	80,
			"case":	3,
			"size":	22
		}, {
			"switch":	80,
			"case":	7,
			"size":	22
		}, {
			"switch":	81,
			"case":	1,
			"size":	22
		}, {
			"switch":	81,
			"case":	2,
			"size":	22
		}, {
			"switch":	82,
			"case":	493,
			"size":	14
		}, {
			"switch":	83,
			"case":	1,
			"size":	14
		}, {
			"switch":	83,
			"case":	2,
			"size":	14
		}, {
			"switch":	83,
			"case":	9,
			"size":	14
		}, {
			"switch":	84,
			"case":	1,
			"size":	14
		}, {
			"switch":	84,
			"case":	2,
			"size":	14
		}, {
			"switch":	85,
			"case":	494,
			"size":	25
		}, {
			"switch":	86,
			"case":	1,
			"size":	25
		}, {
			"switch":	87,
			"case":	493,
			"size":	14
		}, {
			"switch":	88,
			"case":	1,
			"size":	14
		}, {
			"switch":	89,
			"case":	493,
			"size":	14
		}, {
			"switch":	90,
			"case":	1,
			"size":	14
		}, {
			"switch":	90,
			"case":	2,
			"size":	14
		}, {
			"switch":	90,
			"case":	3,
			"size":	14
		}, {
			"switch":	91,
			"case":	1,
			"size":	14
		}, {
			"switch":	91,
			"case":	2,
			"size":	14
		}, {
			"switch":	92,
			"case":	225,
			"size":	2
		}, {
			"switch":	93,
			"case":	1,
			"size":	2
		}, {
			"switch":	94,
			"case":	225,
			"size":	2
		}, {
			"switch":	95,
			"case":	1,
			"size":	2
		}, {
			"switch":	96,
			"case":	225,
			"size":	2
		}, {
			"switch":	97,
			"case":	1,
			"size":	2
		}, {
			"switch":	97,
			"case":	2,
			"size":	2
		}, {
			"switch":	97,
			"case":	3,
			"size":	2
		}, {
			"switch":	98,
			"case":	225,
			"size":	2
		}, {
			"switch":	99,
			"case":	1,
			"size":	2
		}, {
			"switch":	100,
			"case":	225,
			"size":	2
		}, {
			"switch":	101,
			"case":	1,
			"size":	2
		}, {
			"switch":	102,
			"case":	225,
			"size":	2
		}, {
			"switch":	103,
			"case":	1,
			"size":	2
		}, {
			"switch":	104,
			"case":	1,
			"size":	2
		}, {
			"switch":	104,
			"case":	2,
			"size":	2
		}, {
			"switch":	105,
			"case":	225,
			"size":	2
		}, {
			"switch":	106,
			"case":	1,
			"size":	2
		}, {
			"switch":	107,
			"case":	148,
			"size":	0
		}, {
			"switch":	108,
			"case":	1,
			"size":	0
		}, {
			"switch":	109,
			"case":	148,
			"size":	0
		}, {
			"switch":	110,
			"case":	1,
			"size":	0
		}],
	"func_locations":	[{
			"file":	"gzip.c",
			"functions":	[{
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"abort_gzip",
					"begin":	1871,
					"end":	1876
				}, {
					"function":	"abort_gzip_signal",
					"begin":	1881,
					"end":	1892
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"check_ofname",
					"begin":	1616,
					"end":	1638
				}, {
					"function":	"copy_stat",
					"begin":	1645,
					"end":	1700
				}, {
					"function":	"create_outfile",
					"begin":	907,
					"end":	958
				}, {
					"function":	"do_exit",
					"begin":	1824,
					"end":	1846
				}, {
					"function":	"do_list",
					"begin":	1444,
					"end":	1546
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstat64",
					"begin":	511,
					"end":	515
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"fstatat64",
					"begin":	518,
					"end":	523
				}, {
					"function":	"get_method",
					"begin":	1252,
					"end":	1437
				}, {
					"function":	"get_stat_atime",
					"begin":	103,
					"end":	114
				}, {
					"function":	"get_stat_atime_ns",
					"begin":	49,
					"end":	59
				}, {
					"function":	"get_stat_birthtime",
					"begin":	146,
					"end":	185
				}, {
					"function":	"get_stat_birthtime_ns",
					"begin":	88,
					"end":	100
				}, {
					"function":	"get_stat_ctime",
					"begin":	117,
					"end":	128
				}, {
					"function":	"get_stat_ctime_ns",
					"begin":	62,
					"end":	72
				}, {
					"function":	"get_stat_mtime",
					"begin":	131,
					"end":	142
				}, {
					"function":	"get_stat_mtime_ns",
					"begin":	75,
					"end":	85
				}, {
					"function":	"get_suffix",
					"begin":	972,
					"end":	1012
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"getline",
					"begin":	114,
					"end":	118
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"help",
					"begin":	329,
					"end":	376
				}, {
					"function":	"input_eof",
					"begin":	586,
					"end":	602
				}, {
					"function":	"install_signal_handlers",
					"begin":	1781,
					"end":	1819
				}, {
					"function":	"license",
					"begin":	379,
					"end":	385
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"lstat64",
					"begin":	504,
					"end":	508
				}, {
					"function":	"main",
					"begin":	406,
					"end":	583
				}, {
					"function":	"make_ofname",
					"begin":	1163,
					"end":	1238
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"open_and_stat",
					"begin":	1018,
					"end":	1051
				}, {
					"function":	"open_input_file",
					"begin":	1061,
					"end":	1157
				}, {
					"function":	"progerror",
					"begin":	395,
					"end":	403
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"remove_output_file",
					"begin":	1851,
					"end":	1866
				}, {
					"function":	"shorten_name",
					"begin":	1557,
					"end":	1610
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"stat64",
					"begin":	497,
					"end":	501
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"treat_dir",
					"begin":	1707,
					"end":	1776
				}, {
					"function":	"treat_file",
					"begin":	699,
					"end":	896
				}, {
					"function":	"treat_stdin",
					"begin":	607,
					"end":	694
				}, {
					"function":	"try_help",
					"begin":	320,
					"end":	326
				}, {
					"function":	"version",
					"begin":	388,
					"end":	393
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}]
		}]
}
