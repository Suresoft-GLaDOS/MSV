{
	"switch_num":	109,
	"case_num":	[330, 2, 329, 2, 203, 3, 203, 52, 203, 1, 2, 2, 203, 1, 243, 79, 2, 243, 4, 1, 243, 8, 1, 243, 178, 243, 178, 244, 61, 2, 244, 41, 244, 8, 245, 4, 245, 5, 2, 243, 2, 243, 7, 243, 7, 243, 67, 243, 3, 243, 632, 243, 3, 2, 2, 243, 3, 2, 243, 244, 69, 2, 244, 3, 244, 2, 244, 632, 244, 3, 1, 244, 7, 1, 243, 3, 2, 544, 3, 557, 777, 557, 1063, 557, 16, 10, 557, 14, 557, 7, 557, 7, 557, 7, 557, 7, 557, 75, 557, 2, 557, 73, 557, 75, 1, 2, 2, 2, 2],
	"switch_cluster":	[[3, 9, 10, 11, 13, 16, 19, 22, 24, 26, 29, 31, 33, 37, 38, 40, 42, 44, 46, 50, 53, 54, 57, 61, 65, 67, 70, 72, 73, 76, 80, 82, 84, 97, 99, 101, 103, 104, 105, 106, 107, 108], [1, 5, 7, 15, 18, 21, 28, 35, 48, 52, 56, 60, 63, 69, 75, 78, 85, 87, 89, 91, 93, 95], [0, 2, 4, 6, 8, 12, 14, 17, 20, 23, 25, 27, 30, 32, 34, 36, 39, 41, 43, 45, 47, 49, 51, 55, 58, 59, 62, 64, 66, 68, 71, 74, 77, 79, 81, 83, 86, 88, 90, 92, 94, 96, 98, 100, 102], []],
	"priority":	[{
			"file":	"bits.c",
			"line":	110,
			"primary_score":	999995,
			"second_score":	11717
		}, {
			"file":	"bits.c",
			"line":	111,
			"primary_score":	999995,
			"second_score":	11716
		}, {
			"file":	"bits.c",
			"line":	112,
			"primary_score":	999995,
			"second_score":	11715
		}, {
			"file":	"bits.c",
			"line":	120,
			"primary_score":	999995,
			"second_score":	11714
		}, {
			"file":	"bits.c",
			"line":	121,
			"primary_score":	999995,
			"second_score":	11713
		}, {
			"file":	"bits.c",
			"line":	142,
			"primary_score":	999995,
			"second_score":	108
		}, {
			"file":	"bits.c",
			"line":	143,
			"primary_score":	999995,
			"second_score":	119
		}, {
			"file":	"bits.c",
			"line":	144,
			"primary_score":	999995,
			"second_score":	118
		}, {
			"file":	"bits.c",
			"line":	145,
			"primary_score":	999995,
			"second_score":	113
		}, {
			"file":	"bits.c",
			"line":	146,
			"primary_score":	999995,
			"second_score":	112
		}, {
			"file":	"bits.c",
			"line":	148,
			"primary_score":	999995,
			"second_score":	107
		}, {
			"file":	"bits.c",
			"line":	149,
			"primary_score":	999995,
			"second_score":	106
		}, {
			"file":	"bits.c",
			"line":	162,
			"primary_score":	999995,
			"second_score":	197
		}, {
			"file":	"bits.c",
			"line":	163,
			"primary_score":	999995,
			"second_score":	196
		}, {
			"file":	"bits.c",
			"line":	164,
			"primary_score":	999995,
			"second_score":	193
		}, {
			"file":	"bits.c",
			"line":	165,
			"primary_score":	999995,
			"second_score":	192
		}, {
			"file":	"bits.c",
			"line":	167,
			"primary_score":	999995,
			"second_score":	191
		}, {
			"file":	"bits.c",
			"line":	175,
			"primary_score":	999995,
			"second_score":	90
		}, {
			"file":	"bits.c",
			"line":	176,
			"primary_score":	999996,
			"second_score":	89
		}, {
			"file":	"bits.c",
			"line":	180,
			"primary_score":	999995,
			"second_score":	84
		}, {
			"file":	"bits.c",
			"line":	181,
			"primary_score":	999995,
			"second_score":	83
		}, {
			"file":	"deflate.c",
			"line":	297,
			"primary_score":	999995,
			"second_score":	3518
		}, {
			"file":	"deflate.c",
			"line":	299,
			"primary_score":	999995,
			"second_score":	3517
		}, {
			"file":	"deflate.c",
			"line":	300,
			"primary_score":	999995,
			"second_score":	3516
		}, {
			"file":	"deflate.c",
			"line":	306,
			"primary_score":	999995,
			"second_score":	3515
		}, {
			"file":	"deflate.c",
			"line":	312,
			"primary_score":	999995,
			"second_score":	3514
		}, {
			"file":	"deflate.c",
			"line":	313,
			"primary_score":	999995,
			"second_score":	3513
		}, {
			"file":	"deflate.c",
			"line":	315,
			"primary_score":	999995,
			"second_score":	3512
		}, {
			"file":	"deflate.c",
			"line":	317,
			"primary_score":	999995,
			"second_score":	3511
		}, {
			"file":	"deflate.c",
			"line":	318,
			"primary_score":	999995,
			"second_score":	3510
		}, {
			"file":	"deflate.c",
			"line":	320,
			"primary_score":	999995,
			"second_score":	3509
		}, {
			"file":	"deflate.c",
			"line":	325,
			"primary_score":	999995,
			"second_score":	3508
		}, {
			"file":	"deflate.c",
			"line":	326,
			"primary_score":	999995,
			"second_score":	3507
		}, {
			"file":	"deflate.c",
			"line":	331,
			"primary_score":	999995,
			"second_score":	3506
		}, {
			"file":	"deflate.c",
			"line":	334,
			"primary_score":	999995,
			"second_score":	3483
		}, {
			"file":	"deflate.c",
			"line":	338,
			"primary_score":	999995,
			"second_score":	3482
		}, {
			"file":	"deflate.c",
			"line":	342,
			"primary_score":	999995,
			"second_score":	3481
		}, {
			"file":	"deflate.c",
			"line":	344,
			"primary_score":	999995,
			"second_score":	3465
		}, {
			"file":	"deflate.c",
			"line":	345,
			"primary_score":	999995,
			"second_score":	3464
		}, {
			"file":	"deflate.c",
			"line":	525,
			"primary_score":	999995,
			"second_score":	3480
		}, {
			"file":	"deflate.c",
			"line":	526,
			"primary_score":	999995,
			"second_score":	3479
		}, {
			"file":	"deflate.c",
			"line":	532,
			"primary_score":	999995,
			"second_score":	3478
		}, {
			"file":	"deflate.c",
			"line":	537,
			"primary_score":	999995,
			"second_score":	3477
		}, {
			"file":	"deflate.c",
			"line":	563,
			"primary_score":	999995,
			"second_score":	3476
		}, {
			"file":	"deflate.c",
			"line":	564,
			"primary_score":	999995,
			"second_score":	3475
		}, {
			"file":	"deflate.c",
			"line":	565,
			"primary_score":	999995,
			"second_score":	3467
		}, {
			"file":	"deflate.c",
			"line":	566,
			"primary_score":	999995,
			"second_score":	3466
		}, {
			"file":	"deflate.c",
			"line":	671,
			"primary_score":	999995,
			"second_score":	3452
		}, {
			"file":	"deflate.c",
			"line":	672,
			"primary_score":	999995,
			"second_score":	3451
		}, {
			"file":	"deflate.c",
			"line":	673,
			"primary_score":	999995,
			"second_score":	3450
		}, {
			"file":	"deflate.c",
			"line":	674,
			"primary_score":	999995,
			"second_score":	3449
		}, {
			"file":	"deflate.c",
			"line":	675,
			"primary_score":	999995,
			"second_score":	3448
		}, {
			"file":	"deflate.c",
			"line":	677,
			"primary_score":	999995,
			"second_score":	3447
		}, {
			"file":	"deflate.c",
			"line":	680,
			"primary_score":	999995,
			"second_score":	3446
		}, {
			"file":	"deflate.c",
			"line":	684,
			"primary_score":	999995,
			"second_score":	3396
		}, {
			"file":	"deflate.c",
			"line":	688,
			"primary_score":	999995,
			"second_score":	3395
		}, {
			"file":	"deflate.c",
			"line":	689,
			"primary_score":	999995,
			"second_score":	3394
		}, {
			"file":	"deflate.c",
			"line":	691,
			"primary_score":	999995,
			"second_score":	3393
		}, {
			"file":	"deflate.c",
			"line":	713,
			"primary_score":	999995,
			"second_score":	3392
		}, {
			"file":	"deflate.c",
			"line":	738,
			"primary_score":	999995,
			"second_score":	3391
		}, {
			"file":	"deflate.c",
			"line":	743,
			"primary_score":	999996,
			"second_score":	3390
		}, {
			"file":	"deflate.c",
			"line":	744,
			"primary_score":	999996,
			"second_score":	3389
		}, {
			"file":	"deflate.c",
			"line":	747,
			"primary_score":	999996,
			"second_score":	3381
		}, {
			"file":	"deflate.c",
			"line":	748,
			"primary_score":	999996,
			"second_score":	3380
		}, {
			"file":	"deflate.c",
			"line":	753,
			"primary_score":	999995,
			"second_score":	3439
		}, {
			"file":	"deflate.c",
			"line":	754,
			"primary_score":	999995,
			"second_score":	3438
		}, {
			"file":	"deflate.c",
			"line":	755,
			"primary_score":	999995,
			"second_score":	3437
		}, {
			"file":	"deflate.c",
			"line":	757,
			"primary_score":	999995,
			"second_score":	3379
		}, {
			"file":	"deflate.c",
			"line":	764,
			"primary_score":	999995,
			"second_score":	3378
		}, {
			"file":	"deflate.c",
			"line":	766,
			"primary_score":	999996,
			"second_score":	3376
		}, {
			"file":	"deflate.c",
			"line":	768,
			"primary_score":	999995,
			"second_score":	3368
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	58,
			"primary_score":	999993,
			"second_score":	6
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	59,
			"primary_score":	999993,
			"second_score":	5
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	60,
			"primary_score":	999993,
			"second_score":	4
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	70,
			"primary_score":	999993,
			"second_score":	3
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	77,
			"primary_score":	999993,
			"second_score":	2
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	81,
			"primary_score":	999993,
			"second_score":	25
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	86,
			"primary_score":	999993,
			"second_score":	24
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	93,
			"primary_score":	999993,
			"second_score":	21
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	95,
			"primary_score":	999993,
			"second_score":	15
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	107,
			"primary_score":	999993,
			"second_score":	14
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	109,
			"primary_score":	999993,
			"second_score":	1
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	109,
			"primary_score":	999993,
			"second_score":	13
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	122,
			"primary_score":	999993,
			"second_score":	7
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	29,
			"primary_score":	999993,
			"second_score":	23
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	31,
			"primary_score":	999993,
			"second_score":	22
		}, {
			"file":	"gnulib/lib/stat-time.h",
			"line":	135,
			"primary_score":	999995,
			"second_score":	11775
		}, {
			"file":	"gzip.c",
			"line":	396,
			"primary_score":	999993,
			"second_score":	16357
		}, {
			"file":	"gzip.c",
			"line":	397,
			"primary_score":	999993,
			"second_score":	16356
		}, {
			"file":	"gzip.c",
			"line":	399,
			"primary_score":	999993,
			"second_score":	16355
		}, {
			"file":	"gzip.c",
			"line":	401,
			"primary_score":	999993,
			"second_score":	16354
		}, {
			"file":	"gzip.c",
			"line":	402,
			"primary_score":	999993,
			"second_score":	16349
		}, {
			"file":	"gzip.c",
			"line":	404,
			"primary_score":	999993,
			"second_score":	16348
		}, {
			"file":	"gzip.c",
			"line":	407,
			"primary_score":	999993,
			"second_score":	16347
		}, {
			"file":	"gzip.c",
			"line":	411,
			"primary_score":	999993,
			"second_score":	16346
		}, {
			"file":	"gzip.c",
			"line":	412,
			"primary_score":	999993,
			"second_score":	16336
		}, {
			"file":	"gzip.c",
			"line":	433,
			"primary_score":	999993,
			"second_score":	16335
		}, {
			"file":	"gzip.c",
			"line":	434,
			"primary_score":	999993,
			"second_score":	16334
		}, {
			"file":	"gzip.c",
			"line":	436,
			"primary_score":	999993,
			"second_score":	16333
		}, {
			"file":	"gzip.c",
			"line":	438,
			"primary_score":	999993,
			"second_score":	16328
		}, {
			"file":	"gzip.c",
			"line":	452,
			"primary_score":	999994,
			"second_score":	16331
		}, {
			"file":	"gzip.c",
			"line":	454,
			"primary_score":	999993,
			"second_score":	16329
		}, {
			"file":	"gzip.c",
			"line":	456,
			"primary_score":	999999,
			"second_score":	16327
		}, {
			"file":	"gzip.c",
			"line":	518,
			"primary_score":	999993,
			"second_score":	16326
		}, {
			"file":	"gzip.c",
			"line":	519,
			"primary_score":	999993,
			"second_score":	16324
		}, {
			"file":	"gzip.c",
			"line":	521,
			"primary_score":	999993,
			"second_score":	16322
		}, {
			"file":	"gzip.c",
			"line":	525,
			"primary_score":	999993,
			"second_score":	16321
		}, {
			"file":	"gzip.c",
			"line":	530,
			"primary_score":	999993,
			"second_score":	16320
		}, {
			"file":	"gzip.c",
			"line":	535,
			"primary_score":	999993,
			"second_score":	16319
		}, {
			"file":	"gzip.c",
			"line":	538,
			"primary_score":	999993,
			"second_score":	16318
		}, {
			"file":	"gzip.c",
			"line":	539,
			"primary_score":	999993,
			"second_score":	16317
		}, {
			"file":	"gzip.c",
			"line":	540,
			"primary_score":	999993,
			"second_score":	16316
		}, {
			"file":	"gzip.c",
			"line":	541,
			"primary_score":	999993,
			"second_score":	16315
		}, {
			"file":	"gzip.c",
			"line":	543,
			"primary_score":	999993,
			"second_score":	16314
		}, {
			"file":	"gzip.c",
			"line":	549,
			"primary_score":	999993,
			"second_score":	16313
		}, {
			"file":	"gzip.c",
			"line":	550,
			"primary_score":	999993,
			"second_score":	16312
		}, {
			"file":	"gzip.c",
			"line":	553,
			"primary_score":	999993,
			"second_score":	16277
		}, {
			"file":	"gzip.c",
			"line":	561,
			"primary_score":	999996,
			"second_score":	16276
		}, {
			"file":	"gzip.c",
			"line":	563,
			"primary_score":	999994,
			"second_score":	40
		}, {
			"file":	"gzip.c",
			"line":	566,
			"primary_score":	999994,
			"second_score":	39
		}, {
			"file":	"gzip.c",
			"line":	574,
			"primary_score":	999994,
			"second_score":	46
		}, {
			"file":	"gzip.c",
			"line":	575,
			"primary_score":	999994,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	577,
			"primary_score":	999995,
			"second_score":	89
		}, {
			"file":	"gzip.c",
			"line":	579,
			"primary_score":	999996,
			"second_score":	44
		}, {
			"file":	"gzip.c",
			"line":	580,
			"primary_score":	999996,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	586,
			"primary_score":	999999,
			"second_score":	8140
		}, {
			"file":	"gzip.c",
			"line":	594,
			"primary_score":	999996,
			"second_score":	16275
		}, {
			"file":	"gzip.c",
			"line":	616,
			"primary_score":	999996,
			"second_score":	16274
		}, {
			"file":	"gzip.c",
			"line":	617,
			"primary_score":	999996,
			"second_score":	16273
		}, {
			"file":	"gzip.c",
			"line":	619,
			"primary_score":	999996,
			"second_score":	16272
		}, {
			"file":	"gzip.c",
			"line":	620,
			"primary_score":	999996,
			"second_score":	16271
		}, {
			"file":	"gzip.c",
			"line":	622,
			"primary_score":	999996,
			"second_score":	16270
		}, {
			"file":	"gzip.c",
			"line":	623,
			"primary_score":	999996,
			"second_score":	16269
		}, {
			"file":	"gzip.c",
			"line":	626,
			"primary_score":	999996,
			"second_score":	16268
		}, {
			"file":	"gzip.c",
			"line":	631,
			"primary_score":	999996,
			"second_score":	16266
		}, {
			"file":	"gzip.c",
			"line":	632,
			"primary_score":	999996,
			"second_score":	16265
		}, {
			"file":	"gzip.c",
			"line":	633,
			"primary_score":	999996,
			"second_score":	16264
		}, {
			"file":	"gzip.c",
			"line":	634,
			"primary_score":	999996,
			"second_score":	11776
		}, {
			"file":	"gzip.c",
			"line":	636,
			"primary_score":	999996,
			"second_score":	16263
		}, {
			"file":	"gzip.c",
			"line":	637,
			"primary_score":	999996,
			"second_score":	16259
		}, {
			"file":	"gzip.c",
			"line":	638,
			"primary_score":	999996,
			"second_score":	16258
		}, {
			"file":	"gzip.c",
			"line":	639,
			"primary_score":	999996,
			"second_score":	16257
		}, {
			"file":	"gzip.c",
			"line":	641,
			"primary_score":	999996,
			"second_score":	16256
		}, {
			"file":	"gzip.c",
			"line":	642,
			"primary_score":	999999,
			"second_score":	16255
		}, {
			"file":	"gzip.c",
			"line":	643,
			"primary_score":	999999,
			"second_score":	16201
		}, {
			"file":	"gzip.c",
			"line":	647,
			"primary_score":	999996,
			"second_score":	16200
		}, {
			"file":	"gzip.c",
			"line":	654,
			"primary_score":	999996,
			"second_score":	16199
		}, {
			"file":	"gzip.c",
			"line":	655,
			"primary_score":	999996,
			"second_score":	11764
		}, {
			"file":	"gzip.c",
			"line":	657,
			"primary_score":	999996,
			"second_score":	47
		}, {
			"file":	"gzip.c",
			"line":	658,
			"primary_score":	999996,
			"second_score":	42
		}, {
			"file":	"gzip.c",
			"line":	660,
			"primary_score":	1000000,
			"second_score":	8139
		}, {
			"file":	"gzip.c",
			"line":	661,
			"primary_score":	1000000,
			"second_score":	8104
		}, {
			"file":	"gzip.c",
			"line":	662,
			"primary_score":	1000000,
			"second_score":	8103
		}, {
			"file":	"gzip.c",
			"line":	665,
			"primary_score":	999996,
			"second_score":	41
		}, {
			"file":	"gzip.c",
			"line":	1240,
			"primary_score":	999993,
			"second_score":	8138
		}, {
			"file":	"gzip.c",
			"line":	1241,
			"primary_score":	999993,
			"second_score":	8137
		}, {
			"file":	"gzip.c",
			"line":	1242,
			"primary_score":	999993,
			"second_score":	8136
		}, {
			"file":	"gzip.c",
			"line":	1243,
			"primary_score":	999993,
			"second_score":	8135
		}, {
			"file":	"gzip.c",
			"line":	1248,
			"primary_score":	999993,
			"second_score":	8134
		}, {
			"file":	"gzip.c",
			"line":	1249,
			"primary_score":	999999,
			"second_score":	8133
		}, {
			"file":	"gzip.c",
			"line":	1250,
			"primary_score":	999999,
			"second_score":	8132
		}, {
			"file":	"gzip.c",
			"line":	1251,
			"primary_score":	999999,
			"second_score":	8131
		}, {
			"file":	"gzip.c",
			"line":	1263,
			"primary_score":	999993,
			"second_score":	8130
		}, {
			"file":	"gzip.c",
			"line":	1264,
			"primary_score":	999993,
			"second_score":	8129
		}, {
			"file":	"gzip.c",
			"line":	1265,
			"primary_score":	999993,
			"second_score":	8128
		}, {
			"file":	"gzip.c",
			"line":	1266,
			"primary_score":	999993,
			"second_score":	8127
		}, {
			"file":	"gzip.c",
			"line":	1269,
			"primary_score":	999993,
			"second_score":	8126
		}, {
			"file":	"gzip.c",
			"line":	1272,
			"primary_score":	999994,
			"second_score":	8171
		}, {
			"file":	"gzip.c",
			"line":	1273,
			"primary_score":	999994,
			"second_score":	8170
		}, {
			"file":	"gzip.c",
			"line":	1280,
			"primary_score":	999994,
			"second_score":	8169
		}, {
			"file":	"gzip.c",
			"line":	1281,
			"primary_score":	999994,
			"second_score":	8168
		}, {
			"file":	"gzip.c",
			"line":	1283,
			"primary_score":	999994,
			"second_score":	8167
		}, {
			"file":	"gzip.c",
			"line":	1290,
			"primary_score":	999994,
			"second_score":	8166
		}, {
			"file":	"gzip.c",
			"line":	1297,
			"primary_score":	999994,
			"second_score":	8165
		}, {
			"file":	"gzip.c",
			"line":	1304,
			"primary_score":	999994,
			"second_score":	8164
		}, {
			"file":	"gzip.c",
			"line":	1305,
			"primary_score":	999994,
			"second_score":	8163
		}, {
			"file":	"gzip.c",
			"line":	1306,
			"primary_score":	999994,
			"second_score":	8162
		}, {
			"file":	"gzip.c",
			"line":	1307,
			"primary_score":	999994,
			"second_score":	8161
		}, {
			"file":	"gzip.c",
			"line":	1308,
			"primary_score":	999994,
			"second_score":	8160
		}, {
			"file":	"gzip.c",
			"line":	1314,
			"primary_score":	999994,
			"second_score":	8159
		}, {
			"file":	"gzip.c",
			"line":	1315,
			"primary_score":	999994,
			"second_score":	8158
		}, {
			"file":	"gzip.c",
			"line":	1317,
			"primary_score":	999994,
			"second_score":	8157
		}, {
			"file":	"gzip.c",
			"line":	1325,
			"primary_score":	999994,
			"second_score":	8156
		}, {
			"file":	"gzip.c",
			"line":	1336,
			"primary_score":	999994,
			"second_score":	8155
		}, {
			"file":	"gzip.c",
			"line":	1363,
			"primary_score":	999994,
			"second_score":	8154
		}, {
			"file":	"gzip.c",
			"line":	1366,
			"primary_score":	999994,
			"second_score":	8153
		}, {
			"file":	"gzip.c",
			"line":	1367,
			"primary_score":	999994,
			"second_score":	16204
		}, {
			"file":	"gzip.c",
			"line":	1370,
			"primary_score":	999998,
			"second_score":	110
		}, {
			"file":	"gzip.c",
			"line":	1381,
			"primary_score":	999998,
			"second_score":	109
		}, {
			"file":	"gzip.c",
			"line":	1385,
			"primary_score":	999998,
			"second_score":	108
		}, {
			"file":	"gzip.c",
			"line":	1390,
			"primary_score":	999999,
			"second_score":	107
		}, {
			"file":	"gzip.c",
			"line":	1395,
			"primary_score":	999999,
			"second_score":	106
		}, {
			"file":	"gzip.c",
			"line":	1396,
			"primary_score":	1000000,
			"second_score":	105
		}, {
			"file":	"gzip.c",
			"line":	1397,
			"primary_score":	1000000,
			"second_score":	104
		}, {
			"file":	"gzip.c",
			"line":	1398,
			"primary_score":	1000000,
			"second_score":	103
		}, {
			"file":	"gzip.c",
			"line":	1399,
			"primary_score":	1000000,
			"second_score":	102
		}, {
			"file":	"gzip.c",
			"line":	1401,
			"primary_score":	999993,
			"second_score":	8106
		}, {
			"file":	"gzip.c",
			"line":	1768,
			"primary_score":	999993,
			"second_score":	16311
		}, {
			"file":	"gzip.c",
			"line":	1769,
			"primary_score":	999993,
			"second_score":	16310
		}, {
			"file":	"gzip.c",
			"line":	1772,
			"primary_score":	999993,
			"second_score":	16309
		}, {
			"file":	"gzip.c",
			"line":	1774,
			"primary_score":	999993,
			"second_score":	16308
		}, {
			"file":	"gzip.c",
			"line":	1775,
			"primary_score":	999993,
			"second_score":	16307
		}, {
			"file":	"gzip.c",
			"line":	1777,
			"primary_score":	999993,
			"second_score":	16292
		}, {
			"file":	"gzip.c",
			"line":	1778,
			"primary_score":	999993,
			"second_score":	16291
		}, {
			"file":	"gzip.c",
			"line":	1779,
			"primary_score":	999993,
			"second_score":	16293
		}, {
			"file":	"gzip.c",
			"line":	1782,
			"primary_score":	999993,
			"second_score":	16290
		}, {
			"file":	"gzip.c",
			"line":	1783,
			"primary_score":	999993,
			"second_score":	16289
		}, {
			"file":	"gzip.c",
			"line":	1784,
			"primary_score":	999993,
			"second_score":	16288
		}, {
			"file":	"gzip.c",
			"line":	1786,
			"primary_score":	999993,
			"second_score":	16287
		}, {
			"file":	"gzip.c",
			"line":	1789,
			"primary_score":	999993,
			"second_score":	16279
		}, {
			"file":	"gzip.c",
			"line":	1790,
			"primary_score":	999993,
			"second_score":	16285
		}, {
			"file":	"gzip.c",
			"line":	1791,
			"primary_score":	999993,
			"second_score":	16278
		}, {
			"file":	"gzip.c",
			"line":	1811,
			"primary_score":	999993,
			"second_score":	38
		}, {
			"file":	"gzip.c",
			"line":	1813,
			"primary_score":	999993,
			"second_score":	37
		}, {
			"file":	"gzip.c",
			"line":	1814,
			"primary_score":	999993,
			"second_score":	36
		}, {
			"file":	"gzip.c",
			"line":	1815,
			"primary_score":	999993,
			"second_score":	35
		}, {
			"file":	"gzip.c",
			"line":	1816,
			"primary_score":	999993,
			"second_score":	34
		}, {
			"file":	"gzip.c",
			"line":	1817,
			"primary_score":	999993,
			"second_score":	33
		}, {
			"file":	"gzip.c",
			"line":	1818,
			"primary_score":	999993,
			"second_score":	32
		}, {
			"file":	"gzip.c",
			"line":	1819,
			"primary_score":	999993,
			"second_score":	31
		}, {
			"file":	"gzip.c",
			"line":	1820,
			"primary_score":	999993,
			"second_score":	30
		}, {
			"file":	"gzip.c",
			"line":	1821,
			"primary_score":	999993,
			"second_score":	29
		}, {
			"file":	"gzip.c",
			"line":	1822,
			"primary_score":	999993,
			"second_score":	28
		}, {
			"file":	"gzip.c",
			"line":	1824,
			"primary_score":	999993,
			"second_score":	27
		}, {
			"file":	"gzip.c",
			"line":	1829,
			"primary_score":	999993,
			"second_score":	26
		}, {
			"file":	"inflate.c",
			"line":	300,
			"primary_score":	999994,
			"second_score":	1153
		}, {
			"file":	"inflate.c",
			"line":	301,
			"primary_score":	999994,
			"second_score":	1152
		}, {
			"file":	"inflate.c",
			"line":	302,
			"primary_score":	999994,
			"second_score":	1151
		}, {
			"file":	"inflate.c",
			"line":	303,
			"primary_score":	999994,
			"second_score":	1150
		}, {
			"file":	"inflate.c",
			"line":	304,
			"primary_score":	999994,
			"second_score":	1149
		}, {
			"file":	"inflate.c",
			"line":	305,
			"primary_score":	999994,
			"second_score":	1148
		}, {
			"file":	"inflate.c",
			"line":	306,
			"primary_score":	999994,
			"second_score":	1147
		}, {
			"file":	"inflate.c",
			"line":	307,
			"primary_score":	999994,
			"second_score":	1146
		}, {
			"file":	"inflate.c",
			"line":	308,
			"primary_score":	999994,
			"second_score":	1145
		}, {
			"file":	"inflate.c",
			"line":	309,
			"primary_score":	999994,
			"second_score":	1144
		}, {
			"file":	"inflate.c",
			"line":	310,
			"primary_score":	999994,
			"second_score":	1143
		}, {
			"file":	"inflate.c",
			"line":	311,
			"primary_score":	999994,
			"second_score":	1142
		}, {
			"file":	"inflate.c",
			"line":	312,
			"primary_score":	999994,
			"second_score":	1141
		}, {
			"file":	"inflate.c",
			"line":	313,
			"primary_score":	999994,
			"second_score":	1140
		}, {
			"file":	"inflate.c",
			"line":	314,
			"primary_score":	999994,
			"second_score":	1139
		}, {
			"file":	"inflate.c",
			"line":	315,
			"primary_score":	999994,
			"second_score":	1138
		}, {
			"file":	"inflate.c",
			"line":	316,
			"primary_score":	999994,
			"second_score":	1137
		}, {
			"file":	"inflate.c",
			"line":	317,
			"primary_score":	999994,
			"second_score":	1136
		}, {
			"file":	"inflate.c",
			"line":	318,
			"primary_score":	999994,
			"second_score":	1135
		}, {
			"file":	"inflate.c",
			"line":	322,
			"primary_score":	999994,
			"second_score":	1134
		}, {
			"file":	"inflate.c",
			"line":	323,
			"primary_score":	999994,
			"second_score":	1133
		}, {
			"file":	"inflate.c",
			"line":	324,
			"primary_score":	999994,
			"second_score":	1131
		}, {
			"file":	"inflate.c",
			"line":	326,
			"primary_score":	999994,
			"second_score":	1043
		}, {
			"file":	"inflate.c",
			"line":	327,
			"primary_score":	999994,
			"second_score":	1042
		}, {
			"file":	"inflate.c",
			"line":	328,
			"primary_score":	999994,
			"second_score":	1041
		}, {
			"file":	"inflate.c",
			"line":	330,
			"primary_score":	999994,
			"second_score":	1040
		}, {
			"file":	"inflate.c",
			"line":	348,
			"primary_score":	999994,
			"second_score":	1039
		}, {
			"file":	"inflate.c",
			"line":	349,
			"primary_score":	999994,
			"second_score":	1038
		}, {
			"file":	"inflate.c",
			"line":	351,
			"primary_score":	999994,
			"second_score":	1037
		}, {
			"file":	"inflate.c",
			"line":	352,
			"primary_score":	999994,
			"second_score":	1036
		}, {
			"file":	"inflate.c",
			"line":	353,
			"primary_score":	999994,
			"second_score":	1035
		}, {
			"file":	"inflate.c",
			"line":	355,
			"primary_score":	999994,
			"second_score":	1034
		}, {
			"file":	"inflate.c",
			"line":	357,
			"primary_score":	999994,
			"second_score":	1033
		}, {
			"file":	"inflate.c",
			"line":	358,
			"primary_score":	999994,
			"second_score":	1032
		}, {
			"file":	"inflate.c",
			"line":	359,
			"primary_score":	999994,
			"second_score":	1031
		}, {
			"file":	"inflate.c",
			"line":	361,
			"primary_score":	999994,
			"second_score":	1030
		}, {
			"file":	"inflate.c",
			"line":	365,
			"primary_score":	999994,
			"second_score":	1029
		}, {
			"file":	"inflate.c",
			"line":	368,
			"primary_score":	999994,
			"second_score":	1028
		}, {
			"file":	"inflate.c",
			"line":	370,
			"primary_score":	999994,
			"second_score":	1027
		}, {
			"file":	"inflate.c",
			"line":	374,
			"primary_score":	999994,
			"second_score":	1026
		}, {
			"file":	"inflate.c",
			"line":	375,
			"primary_score":	999994,
			"second_score":	1025
		}, {
			"file":	"inflate.c",
			"line":	376,
			"primary_score":	999994,
			"second_score":	1023
		}, {
			"file":	"inflate.c",
			"line":	377,
			"primary_score":	999995,
			"second_score":	1019
		}, {
			"file":	"inflate.c",
			"line":	382,
			"primary_score":	999994,
			"second_score":	1018
		}, {
			"file":	"inflate.c",
			"line":	383,
			"primary_score":	999994,
			"second_score":	1016
		}, {
			"file":	"inflate.c",
			"line":	384,
			"primary_score":	999994,
			"second_score":	957
		}, {
			"file":	"inflate.c",
			"line":	385,
			"primary_score":	999994,
			"second_score":	956
		}, {
			"file":	"inflate.c",
			"line":	387,
			"primary_score":	999994,
			"second_score":	955
		}, {
			"file":	"inflate.c",
			"line":	391,
			"primary_score":	999994,
			"second_score":	954
		}, {
			"file":	"inflate.c",
			"line":	392,
			"primary_score":	999994,
			"second_score":	953
		}, {
			"file":	"inflate.c",
			"line":	393,
			"primary_score":	999994,
			"second_score":	952
		}, {
			"file":	"inflate.c",
			"line":	394,
			"primary_score":	999994,
			"second_score":	951
		}, {
			"file":	"inflate.c",
			"line":	395,
			"primary_score":	999994,
			"second_score":	950
		}, {
			"file":	"inflate.c",
			"line":	396,
			"primary_score":	999994,
			"second_score":	949
		}, {
			"file":	"inflate.c",
			"line":	397,
			"primary_score":	999994,
			"second_score":	948
		}, {
			"file":	"inflate.c",
			"line":	400,
			"primary_score":	999994,
			"second_score":	947
		}, {
			"file":	"inflate.c",
			"line":	402,
			"primary_score":	999994,
			"second_score":	946
		}, {
			"file":	"inflate.c",
			"line":	403,
			"primary_score":	999994,
			"second_score":	945
		}, {
			"file":	"inflate.c",
			"line":	407,
			"primary_score":	999994,
			"second_score":	594
		}, {
			"file":	"inflate.c",
			"line":	409,
			"primary_score":	999994,
			"second_score":	943
		}, {
			"file":	"inflate.c",
			"line":	410,
			"primary_score":	999994,
			"second_score":	942
		}, {
			"file":	"inflate.c",
			"line":	413,
			"primary_score":	999994,
			"second_score":	941
		}, {
			"file":	"inflate.c",
			"line":	414,
			"primary_score":	999994,
			"second_score":	940
		}, {
			"file":	"inflate.c",
			"line":	416,
			"primary_score":	999995,
			"second_score":	6571
		}, {
			"file":	"inflate.c",
			"line":	417,
			"primary_score":	999995,
			"second_score":	6570
		}, {
			"file":	"inflate.c",
			"line":	418,
			"primary_score":	999995,
			"second_score":	6569
		}, {
			"file":	"inflate.c",
			"line":	426,
			"primary_score":	999994,
			"second_score":	939
		}, {
			"file":	"inflate.c",
			"line":	429,
			"primary_score":	999994,
			"second_score":	938
		}, {
			"file":	"inflate.c",
			"line":	436,
			"primary_score":	999994,
			"second_score":	937
		}, {
			"file":	"inflate.c",
			"line":	437,
			"primary_score":	999994,
			"second_score":	936
		}, {
			"file":	"inflate.c",
			"line":	438,
			"primary_score":	999994,
			"second_score":	935
		}, {
			"file":	"inflate.c",
			"line":	439,
			"primary_score":	999994,
			"second_score":	934
		}, {
			"file":	"inflate.c",
			"line":	442,
			"primary_score":	999994,
			"second_score":	933
		}, {
			"file":	"inflate.c",
			"line":	444,
			"primary_score":	999997,
			"second_score":	1212
		}, {
			"file":	"inflate.c",
			"line":	445,
			"primary_score":	999997,
			"second_score":	1211
		}, {
			"file":	"inflate.c",
			"line":	446,
			"primary_score":	999997,
			"second_score":	1210
		}, {
			"file":	"inflate.c",
			"line":	447,
			"primary_score":	999997,
			"second_score":	1209
		}, {
			"file":	"inflate.c",
			"line":	448,
			"primary_score":	999997,
			"second_score":	1208
		}, {
			"file":	"inflate.c",
			"line":	449,
			"primary_score":	999997,
			"second_score":	1207
		}, {
			"file":	"inflate.c",
			"line":	454,
			"primary_score":	999994,
			"second_score":	593
		}, {
			"file":	"inflate.c",
			"line":	455,
			"primary_score":	999994,
			"second_score":	592
		}, {
			"file":	"inflate.c",
			"line":	456,
			"primary_score":	999996,
			"second_score":	591
		}, {
			"file":	"inflate.c",
			"line":	457,
			"primary_score":	999994,
			"second_score":	611
		}, {
			"file":	"inflate.c",
			"line":	459,
			"primary_score":	999994,
			"second_score":	1167
		}, {
			"file":	"inflate.c",
			"line":	460,
			"primary_score":	999994,
			"second_score":	1166
		}, {
			"file":	"inflate.c",
			"line":	461,
			"primary_score":	999994,
			"second_score":	1165
		}, {
			"file":	"inflate.c",
			"line":	465,
			"primary_score":	999995,
			"second_score":	610
		}, {
			"file":	"inflate.c",
			"line":	466,
			"primary_score":	999995,
			"second_score":	609
		}, {
			"file":	"inflate.c",
			"line":	470,
			"primary_score":	999994,
			"second_score":	590
		}, {
			"file":	"inflate.c",
			"line":	471,
			"primary_score":	999994,
			"second_score":	589
		}, {
			"file":	"inflate.c",
			"line":	475,
			"primary_score":	999994,
			"second_score":	588
		}, {
			"file":	"inflate.c",
			"line":	477,
			"primary_score":	999994,
			"second_score":	587
		}, {
			"file":	"inflate.c",
			"line":	480,
			"primary_score":	999994,
			"second_score":	586
		}, {
			"file":	"inflate.c",
			"line":	482,
			"primary_score":	999997,
			"second_score":	1159
		}, {
			"file":	"inflate.c",
			"line":	483,
			"primary_score":	999997,
			"second_score":	1158
		}, {
			"file":	"inflate.c",
			"line":	490,
			"primary_score":	999994,
			"second_score":	585
		}, {
			"file":	"inflate.c",
			"line":	501,
			"primary_score":	999994,
			"second_score":	154
		}, {
			"file":	"inflate.c",
			"line":	505,
			"primary_score":	999994,
			"second_score":	153
		}, {
			"file":	"inflate.c",
			"line":	506,
			"primary_score":	999994,
			"second_score":	152
		}, {
			"file":	"inflate.c",
			"line":	508,
			"primary_score":	999994,
			"second_score":	151
		}, {
			"file":	"inflate.c",
			"line":	509,
			"primary_score":	999994,
			"second_score":	150
		}, {
			"file":	"inflate.c",
			"line":	510,
			"primary_score":	999994,
			"second_score":	149
		}, {
			"file":	"inflate.c",
			"line":	512,
			"primary_score":	999994,
			"second_score":	148
		}, {
			"file":	"inflate.c",
			"line":	522,
			"primary_score":	999994,
			"second_score":	583
		}, {
			"file":	"inflate.c",
			"line":	523,
			"primary_score":	999994,
			"second_score":	582
		}, {
			"file":	"inflate.c",
			"line":	524,
			"primary_score":	999994,
			"second_score":	581
		}, {
			"file":	"inflate.c",
			"line":	525,
			"primary_score":	999994,
			"second_score":	580
		}, {
			"file":	"inflate.c",
			"line":	526,
			"primary_score":	999994,
			"second_score":	579
		}, {
			"file":	"inflate.c",
			"line":	527,
			"primary_score":	999994,
			"second_score":	578
		}, {
			"file":	"inflate.c",
			"line":	528,
			"primary_score":	999994,
			"second_score":	577
		}, {
			"file":	"inflate.c",
			"line":	532,
			"primary_score":	999994,
			"second_score":	576
		}, {
			"file":	"inflate.c",
			"line":	533,
			"primary_score":	999994,
			"second_score":	575
		}, {
			"file":	"inflate.c",
			"line":	534,
			"primary_score":	999994,
			"second_score":	574
		}, {
			"file":	"inflate.c",
			"line":	537,
			"primary_score":	999994,
			"second_score":	573
		}, {
			"file":	"inflate.c",
			"line":	538,
			"primary_score":	999994,
			"second_score":	572
		}, {
			"file":	"inflate.c",
			"line":	539,
			"primary_score":	999994,
			"second_score":	571
		}, {
			"file":	"inflate.c",
			"line":	541,
			"primary_score":	999995,
			"second_score":	488
		}, {
			"file":	"inflate.c",
			"line":	542,
			"primary_score":	999994,
			"second_score":	486
		}, {
			"file":	"inflate.c",
			"line":	543,
			"primary_score":	999996,
			"second_score":	505
		}, {
			"file":	"inflate.c",
			"line":	544,
			"primary_score":	999996,
			"second_score":	504
		}, {
			"file":	"inflate.c",
			"line":	546,
			"primary_score":	999997,
			"second_score":	503
		}, {
			"file":	"inflate.c",
			"line":	547,
			"primary_score":	999997,
			"second_score":	500
		}, {
			"file":	"inflate.c",
			"line":	548,
			"primary_score":	999997,
			"second_score":	499
		}, {
			"file":	"inflate.c",
			"line":	550,
			"primary_score":	999995,
			"second_score":	485
		}, {
			"file":	"inflate.c",
			"line":	551,
			"primary_score":	999995,
			"second_score":	482
		}, {
			"file":	"inflate.c",
			"line":	553,
			"primary_score":	999995,
			"second_score":	493
		}, {
			"file":	"inflate.c",
			"line":	554,
			"primary_score":	999995,
			"second_score":	492
		}, {
			"file":	"inflate.c",
			"line":	555,
			"primary_score":	999995,
			"second_score":	491
		}, {
			"file":	"inflate.c",
			"line":	564,
			"primary_score":	999995,
			"second_score":	481
		}, {
			"file":	"inflate.c",
			"line":	565,
			"primary_score":	999995,
			"second_score":	480
		}, {
			"file":	"inflate.c",
			"line":	616,
			"primary_score":	999995,
			"second_score":	479
		}, {
			"file":	"inflate.c",
			"line":	617,
			"primary_score":	999995,
			"second_score":	478
		}, {
			"file":	"inflate.c",
			"line":	618,
			"primary_score":	999995,
			"second_score":	477
		}, {
			"file":	"inflate.c",
			"line":	621,
			"primary_score":	999995,
			"second_score":	476
		}, {
			"file":	"inflate.c",
			"line":	684,
			"primary_score":	999997,
			"second_score":	8091
		}, {
			"file":	"inflate.c",
			"line":	685,
			"primary_score":	999997,
			"second_score":	8090
		}, {
			"file":	"inflate.c",
			"line":	686,
			"primary_score":	999997,
			"second_score":	8089
		}, {
			"file":	"inflate.c",
			"line":	687,
			"primary_score":	999997,
			"second_score":	8088
		}, {
			"file":	"inflate.c",
			"line":	688,
			"primary_score":	999997,
			"second_score":	8087
		}, {
			"file":	"inflate.c",
			"line":	689,
			"primary_score":	999997,
			"second_score":	8086
		}, {
			"file":	"inflate.c",
			"line":	693,
			"primary_score":	999997,
			"second_score":	8085
		}, {
			"file":	"inflate.c",
			"line":	695,
			"primary_score":	999997,
			"second_score":	8084
		}, {
			"file":	"inflate.c",
			"line":	697,
			"primary_score":	999997,
			"second_score":	8083
		}, {
			"file":	"inflate.c",
			"line":	699,
			"primary_score":	999997,
			"second_score":	8082
		}, {
			"file":	"inflate.c",
			"line":	701,
			"primary_score":	999997,
			"second_score":	8081
		}, {
			"file":	"inflate.c",
			"line":	702,
			"primary_score":	999997,
			"second_score":	8080
		}, {
			"file":	"inflate.c",
			"line":	707,
			"primary_score":	999997,
			"second_score":	1156
		}, {
			"file":	"inflate.c",
			"line":	709,
			"primary_score":	999997,
			"second_score":	1155
		}, {
			"file":	"inflate.c",
			"line":	710,
			"primary_score":	999997,
			"second_score":	1154
		}, {
			"file":	"inflate.c",
			"line":	718,
			"primary_score":	999997,
			"second_score":	584
		}, {
			"file":	"inflate.c",
			"line":	723,
			"primary_score":	999997,
			"second_score":	475
		}, {
			"file":	"inflate.c",
			"line":	724,
			"primary_score":	999997,
			"second_score":	155
		}, {
			"file":	"inflate.c",
			"line":	725,
			"primary_score":	999997,
			"second_score":	147
		}, {
			"file":	"inflate.c",
			"line":	903,
			"primary_score":	999994,
			"second_score":	8118
		}, {
			"file":	"inflate.c",
			"line":	904,
			"primary_score":	999994,
			"second_score":	8117
		}, {
			"file":	"inflate.c",
			"line":	905,
			"primary_score":	999994,
			"second_score":	8116
		}, {
			"file":	"inflate.c",
			"line":	906,
			"primary_score":	999994,
			"second_score":	8115
		}, {
			"file":	"inflate.c",
			"line":	910,
			"primary_score":	999994,
			"second_score":	8114
		}, {
			"file":	"inflate.c",
			"line":	911,
			"primary_score":	999994,
			"second_score":	8113
		}, {
			"file":	"inflate.c",
			"line":	912,
			"primary_score":	999994,
			"second_score":	8112
		}, {
			"file":	"inflate.c",
			"line":	916,
			"primary_score":	999994,
			"second_score":	8111
		}, {
			"file":	"inflate.c",
			"line":	917,
			"primary_score":	999994,
			"second_score":	8107
		}, {
			"file":	"inflate.c",
			"line":	918,
			"primary_score":	999994,
			"second_score":	8106
		}, {
			"file":	"inflate.c",
			"line":	922,
			"primary_score":	999994,
			"second_score":	8103
		}, {
			"file":	"inflate.c",
			"line":	923,
			"primary_score":	999994,
			"second_score":	8101
		}, {
			"file":	"inflate.c",
			"line":	924,
			"primary_score":	999994,
			"second_score":	8100
		}, {
			"file":	"inflate.c",
			"line":	928,
			"primary_score":	999994,
			"second_score":	8097
		}, {
			"file":	"inflate.c",
			"line":	929,
			"primary_score":	999994,
			"second_score":	8096
		}, {
			"file":	"inflate.c",
			"line":	933,
			"primary_score":	999994,
			"second_score":	8095
		}, {
			"file":	"inflate.c",
			"line":	935,
			"primary_score":	999997,
			"second_score":	8094
		}, {
			"file":	"inflate.c",
			"line":	937,
			"primary_score":	999997,
			"second_score":	8093
		}, {
			"file":	"inflate.c",
			"line":	938,
			"primary_score":	999997,
			"second_score":	8092
		}, {
			"file":	"inflate.c",
			"line":	950,
			"primary_score":	999994,
			"second_score":	8128
		}, {
			"file":	"inflate.c",
			"line":	951,
			"primary_score":	999994,
			"second_score":	8127
		}, {
			"file":	"inflate.c",
			"line":	952,
			"primary_score":	999994,
			"second_score":	8126
		}, {
			"file":	"inflate.c",
			"line":	956,
			"primary_score":	999994,
			"second_score":	8125
		}, {
			"file":	"inflate.c",
			"line":	957,
			"primary_score":	999994,
			"second_score":	8124
		}, {
			"file":	"inflate.c",
			"line":	958,
			"primary_score":	999994,
			"second_score":	8123
		}, {
			"file":	"inflate.c",
			"line":	962,
			"primary_score":	999994,
			"second_score":	8122
		}, {
			"file":	"inflate.c",
			"line":	963,
			"primary_score":	999994,
			"second_score":	8121
		}, {
			"file":	"inflate.c",
			"line":	964,
			"primary_score":	999994,
			"second_score":	8120
		}, {
			"file":	"inflate.c",
			"line":	965,
			"primary_score":	999994,
			"second_score":	8119
		}, {
			"file":	"inflate.c",
			"line":	967,
			"primary_score":	999995,
			"second_score":	146
		}, {
			"file":	"inflate.c",
			"line":	968,
			"primary_score":	999995,
			"second_score":	145
		}, {
			"file":	"inflate.c",
			"line":	974,
			"primary_score":	999995,
			"second_score":	144
		}, {
			"file":	"inflate.c",
			"line":	980,
			"primary_score":	999995,
			"second_score":	143
		}, {
			"file":	"inflate.c",
			"line":	984,
			"primary_score":	999995,
			"second_score":	120
		}, {
			"file":	"inflate.c",
			"line":	985,
			"primary_score":	999995,
			"second_score":	119
		}, {
			"file":	"trees.c",
			"line":	345,
			"primary_score":	999995,
			"second_score":	11711
		}, {
			"file":	"trees.c",
			"line":	346,
			"primary_score":	999995,
			"second_score":	11710
		}, {
			"file":	"trees.c",
			"line":	347,
			"primary_score":	999995,
			"second_score":	11709
		}, {
			"file":	"trees.c",
			"line":	348,
			"primary_score":	999995,
			"second_score":	11708
		}, {
			"file":	"trees.c",
			"line":	349,
			"primary_score":	999995,
			"second_score":	11707
		}, {
			"file":	"trees.c",
			"line":	351,
			"primary_score":	999995,
			"second_score":	11706
		}, {
			"file":	"trees.c",
			"line":	352,
			"primary_score":	999995,
			"second_score":	11705
		}, {
			"file":	"trees.c",
			"line":	353,
			"primary_score":	999995,
			"second_score":	11704
		}, {
			"file":	"trees.c",
			"line":	355,
			"primary_score":	999995,
			"second_score":	11703
		}, {
			"file":	"trees.c",
			"line":	358,
			"primary_score":	999995,
			"second_score":	11702
		}, {
			"file":	"trees.c",
			"line":	359,
			"primary_score":	999995,
			"second_score":	11701
		}, {
			"file":	"trees.c",
			"line":	360,
			"primary_score":	999995,
			"second_score":	11422
		}, {
			"file":	"trees.c",
			"line":	361,
			"primary_score":	999995,
			"second_score":	11421
		}, {
			"file":	"trees.c",
			"line":	362,
			"primary_score":	999995,
			"second_score":	11389
		}, {
			"file":	"trees.c",
			"line":	365,
			"primary_score":	999995,
			"second_score":	11388
		}, {
			"file":	"trees.c",
			"line":	370,
			"primary_score":	999995,
			"second_score":	11387
		}, {
			"file":	"trees.c",
			"line":	373,
			"primary_score":	999995,
			"second_score":	11386
		}, {
			"file":	"trees.c",
			"line":	374,
			"primary_score":	999995,
			"second_score":	11385
		}, {
			"file":	"trees.c",
			"line":	375,
			"primary_score":	999995,
			"second_score":	11162
		}, {
			"file":	"trees.c",
			"line":	376,
			"primary_score":	999995,
			"second_score":	11161
		}, {
			"file":	"trees.c",
			"line":	377,
			"primary_score":	999995,
			"second_score":	11097
		}, {
			"file":	"trees.c",
			"line":	380,
			"primary_score":	999995,
			"second_score":	11096
		}, {
			"file":	"trees.c",
			"line":	381,
			"primary_score":	999995,
			"second_score":	11095
		}, {
			"file":	"trees.c",
			"line":	382,
			"primary_score":	999995,
			"second_score":	11094
		}, {
			"file":	"trees.c",
			"line":	383,
			"primary_score":	999995,
			"second_score":	10877
		}, {
			"file":	"trees.c",
			"line":	384,
			"primary_score":	999995,
			"second_score":	10876
		}, {
			"file":	"trees.c",
			"line":	385,
			"primary_score":	999995,
			"second_score":	10812
		}, {
			"file":	"trees.c",
			"line":	388,
			"primary_score":	999995,
			"second_score":	10811
		}, {
			"file":	"trees.c",
			"line":	391,
			"primary_score":	999995,
			"second_score":	10810
		}, {
			"file":	"trees.c",
			"line":	392,
			"primary_score":	999995,
			"second_score":	10809
		}, {
			"file":	"trees.c",
			"line":	393,
			"primary_score":	999995,
			"second_score":	10808
		}, {
			"file":	"trees.c",
			"line":	394,
			"primary_score":	999995,
			"second_score":	10807
		}, {
			"file":	"trees.c",
			"line":	395,
			"primary_score":	999995,
			"second_score":	10806
		}, {
			"file":	"trees.c",
			"line":	396,
			"primary_score":	999995,
			"second_score":	10805
		}, {
			"file":	"trees.c",
			"line":	401,
			"primary_score":	999995,
			"second_score":	10804
		}, {
			"file":	"trees.c",
			"line":	404,
			"primary_score":	999995,
			"second_score":	3980
		}, {
			"file":	"trees.c",
			"line":	405,
			"primary_score":	999995,
			"second_score":	3544
		}, {
			"file":	"trees.c",
			"line":	406,
			"primary_score":	999995,
			"second_score":	3543
		}, {
			"file":	"trees.c",
			"line":	410,
			"primary_score":	999995,
			"second_score":	3529
		}, {
			"file":	"trees.c",
			"line":	418,
			"primary_score":	999995,
			"second_score":	102
		}, {
			"file":	"trees.c",
			"line":	421,
			"primary_score":	999995,
			"second_score":	101
		}, {
			"file":	"trees.c",
			"line":	422,
			"primary_score":	999995,
			"second_score":	100
		}, {
			"file":	"trees.c",
			"line":	423,
			"primary_score":	999995,
			"second_score":	99
		}, {
			"file":	"trees.c",
			"line":	425,
			"primary_score":	999995,
			"second_score":	98
		}, {
			"file":	"trees.c",
			"line":	426,
			"primary_score":	999995,
			"second_score":	97
		}, {
			"file":	"trees.c",
			"line":	427,
			"primary_score":	999995,
			"second_score":	96
		}, {
			"file":	"trees.c",
			"line":	428,
			"primary_score":	999995,
			"second_score":	95
		}, {
			"file":	"trees.c",
			"line":	464,
			"primary_score":	999995,
			"second_score":	385
		}, {
			"file":	"trees.c",
			"line":	465,
			"primary_score":	999995,
			"second_score":	384
		}, {
			"file":	"trees.c",
			"line":	466,
			"primary_score":	999995,
			"second_score":	383
		}, {
			"file":	"trees.c",
			"line":	468,
			"primary_score":	999996,
			"second_score":	467
		}, {
			"file":	"trees.c",
			"line":	471,
			"primary_score":	999995,
			"second_score":	422
		}, {
			"file":	"trees.c",
			"line":	474,
			"primary_score":	999995,
			"second_score":	406
		}, {
			"file":	"trees.c",
			"line":	477,
			"primary_score":	999995,
			"second_score":	404
		}, {
			"file":	"trees.c",
			"line":	479,
			"primary_score":	999995,
			"second_score":	382
		}, {
			"file":	"trees.c",
			"line":	495,
			"primary_score":	999995,
			"second_score":	379
		}, {
			"file":	"trees.c",
			"line":	496,
			"primary_score":	999995,
			"second_score":	378
		}, {
			"file":	"trees.c",
			"line":	497,
			"primary_score":	999995,
			"second_score":	377
		}, {
			"file":	"trees.c",
			"line":	498,
			"primary_score":	999995,
			"second_score":	376
		}, {
			"file":	"trees.c",
			"line":	499,
			"primary_score":	999995,
			"second_score":	375
		}, {
			"file":	"trees.c",
			"line":	500,
			"primary_score":	999995,
			"second_score":	374
		}, {
			"file":	"trees.c",
			"line":	501,
			"primary_score":	999995,
			"second_score":	373
		}, {
			"file":	"trees.c",
			"line":	502,
			"primary_score":	999995,
			"second_score":	372
		}, {
			"file":	"trees.c",
			"line":	503,
			"primary_score":	999995,
			"second_score":	371
		}, {
			"file":	"trees.c",
			"line":	504,
			"primary_score":	999995,
			"second_score":	370
		}, {
			"file":	"trees.c",
			"line":	505,
			"primary_score":	999995,
			"second_score":	369
		}, {
			"file":	"trees.c",
			"line":	506,
			"primary_score":	999995,
			"second_score":	368
		}, {
			"file":	"trees.c",
			"line":	508,
			"primary_score":	999995,
			"second_score":	367
		}, {
			"file":	"trees.c",
			"line":	513,
			"primary_score":	999995,
			"second_score":	366
		}, {
			"file":	"trees.c",
			"line":	515,
			"primary_score":	999995,
			"second_score":	365
		}, {
			"file":	"trees.c",
			"line":	516,
			"primary_score":	999995,
			"second_score":	316
		}, {
			"file":	"trees.c",
			"line":	517,
			"primary_score":	999995,
			"second_score":	315
		}, {
			"file":	"trees.c",
			"line":	518,
			"primary_score":	999995,
			"second_score":	314
		}, {
			"file":	"trees.c",
			"line":	519,
			"primary_score":	999995,
			"second_score":	313
		}, {
			"file":	"trees.c",
			"line":	522,
			"primary_score":	999996,
			"second_score":	353
		}, {
			"file":	"trees.c",
			"line":	524,
			"primary_score":	999995,
			"second_score":	311
		}, {
			"file":	"trees.c",
			"line":	525,
			"primary_score":	999995,
			"second_score":	310
		}, {
			"file":	"trees.c",
			"line":	526,
			"primary_score":	999995,
			"second_score":	309
		}, {
			"file":	"trees.c",
			"line":	527,
			"primary_score":	999995,
			"second_score":	307
		}, {
			"file":	"trees.c",
			"line":	528,
			"primary_score":	999995,
			"second_score":	306
		}, {
			"file":	"trees.c",
			"line":	529,
			"primary_score":	999995,
			"second_score":	1685
		}, {
			"file":	"trees.c",
			"line":	531,
			"primary_score":	999995,
			"second_score":	304
		}, {
			"file":	"trees.c",
			"line":	581,
			"primary_score":	999995,
			"second_score":	301
		}, {
			"file":	"trees.c",
			"line":	582,
			"primary_score":	999995,
			"second_score":	300
		}, {
			"file":	"trees.c",
			"line":	583,
			"primary_score":	999995,
			"second_score":	299
		}, {
			"file":	"trees.c",
			"line":	584,
			"primary_score":	999995,
			"second_score":	298
		}, {
			"file":	"trees.c",
			"line":	589,
			"primary_score":	999995,
			"second_score":	297
		}, {
			"file":	"trees.c",
			"line":	590,
			"primary_score":	999995,
			"second_score":	282
		}, {
			"file":	"trees.c",
			"line":	596,
			"primary_score":	999995,
			"second_score":	281
		}, {
			"file":	"trees.c",
			"line":	597,
			"primary_score":	999995,
			"second_score":	280
		}, {
			"file":	"trees.c",
			"line":	599,
			"primary_score":	999995,
			"second_score":	279
		}, {
			"file":	"trees.c",
			"line":	600,
			"primary_score":	999995,
			"second_score":	200
		}, {
			"file":	"trees.c",
			"line":	601,
			"primary_score":	999995,
			"second_score":	212
		}, {
			"file":	"trees.c",
			"line":	603,
			"primary_score":	999995,
			"second_score":	198
		}, {
			"file":	"trees.c",
			"line":	606,
			"primary_score":	999995,
			"second_score":	190
		}, {
			"file":	"trees.c",
			"line":	621,
			"primary_score":	999995,
			"second_score":	531
		}, {
			"file":	"trees.c",
			"line":	622,
			"primary_score":	999995,
			"second_score":	530
		}, {
			"file":	"trees.c",
			"line":	623,
			"primary_score":	999995,
			"second_score":	529
		}, {
			"file":	"trees.c",
			"line":	624,
			"primary_score":	999995,
			"second_score":	528
		}, {
			"file":	"trees.c",
			"line":	625,
			"primary_score":	999995,
			"second_score":	527
		}, {
			"file":	"trees.c",
			"line":	626,
			"primary_score":	999995,
			"second_score":	526
		}, {
			"file":	"trees.c",
			"line":	632,
			"primary_score":	999995,
			"second_score":	525
		}, {
			"file":	"trees.c",
			"line":	634,
			"primary_score":	999995,
			"second_score":	524
		}, {
			"file":	"trees.c",
			"line":	635,
			"primary_score":	999995,
			"second_score":	484
		}, {
			"file":	"trees.c",
			"line":	636,
			"primary_score":	999995,
			"second_score":	483
		}, {
			"file":	"trees.c",
			"line":	637,
			"primary_score":	999995,
			"second_score":	482
		}, {
			"file":	"trees.c",
			"line":	639,
			"primary_score":	999995,
			"second_score":	488
		}, {
			"file":	"trees.c",
			"line":	648,
			"primary_score":	999995,
			"second_score":	481
		}, {
			"file":	"trees.c",
			"line":	649,
			"primary_score":	999995,
			"second_score":	1764
		}, {
			"file":	"trees.c",
			"line":	650,
			"primary_score":	999995,
			"second_score":	1763
		}, {
			"file":	"trees.c",
			"line":	651,
			"primary_score":	999995,
			"second_score":	1762
		}, {
			"file":	"trees.c",
			"line":	652,
			"primary_score":	999995,
			"second_score":	1761
		}, {
			"file":	"trees.c",
			"line":	655,
			"primary_score":	999995,
			"second_score":	480
		}, {
			"file":	"trees.c",
			"line":	660,
			"primary_score":	999995,
			"second_score":	479
		}, {
			"file":	"trees.c",
			"line":	665,
			"primary_score":	999995,
			"second_score":	461
		}, {
			"file":	"trees.c",
			"line":	666,
			"primary_score":	999995,
			"second_score":	402
		}, {
			"file":	"trees.c",
			"line":	667,
			"primary_score":	999995,
			"second_score":	393
		}, {
			"file":	"trees.c",
			"line":	669,
			"primary_score":	999995,
			"second_score":	392
		}, {
			"file":	"trees.c",
			"line":	670,
			"primary_score":	999995,
			"second_score":	391
		}, {
			"file":	"trees.c",
			"line":	673,
			"primary_score":	999995,
			"second_score":	390
		}, {
			"file":	"trees.c",
			"line":	674,
			"primary_score":	999995,
			"second_score":	389
		}, {
			"file":	"trees.c",
			"line":	675,
			"primary_score":	999995,
			"second_score":	388
		}, {
			"file":	"trees.c",
			"line":	683,
			"primary_score":	999995,
			"second_score":	387
		}, {
			"file":	"trees.c",
			"line":	684,
			"primary_score":	999995,
			"second_score":	386
		}, {
			"file":	"trees.c",
			"line":	688,
			"primary_score":	999995,
			"second_score":	381
		}, {
			"file":	"trees.c",
			"line":	693,
			"primary_score":	999995,
			"second_score":	380
		}, {
			"file":	"trees.c",
			"line":	696,
			"primary_score":	999995,
			"second_score":	302
		}, {
			"file":	"trees.c",
			"line":	709,
			"primary_score":	999995,
			"second_score":	556
		}, {
			"file":	"trees.c",
			"line":	710,
			"primary_score":	999995,
			"second_score":	555
		}, {
			"file":	"trees.c",
			"line":	711,
			"primary_score":	999995,
			"second_score":	554
		}, {
			"file":	"trees.c",
			"line":	712,
			"primary_score":	999995,
			"second_score":	553
		}, {
			"file":	"trees.c",
			"line":	713,
			"primary_score":	999995,
			"second_score":	552
		}, {
			"file":	"trees.c",
			"line":	714,
			"primary_score":	999995,
			"second_score":	551
		}, {
			"file":	"trees.c",
			"line":	715,
			"primary_score":	999995,
			"second_score":	550
		}, {
			"file":	"trees.c",
			"line":	717,
			"primary_score":	999995,
			"second_score":	1628
		}, {
			"file":	"trees.c",
			"line":	718,
			"primary_score":	999995,
			"second_score":	548
		}, {
			"file":	"trees.c",
			"line":	720,
			"primary_score":	999995,
			"second_score":	547
		}, {
			"file":	"trees.c",
			"line":	721,
			"primary_score":	999995,
			"second_score":	542
		}, {
			"file":	"trees.c",
			"line":	722,
			"primary_score":	999995,
			"second_score":	540
		}, {
			"file":	"trees.c",
			"line":	723,
			"primary_score":	999995,
			"second_score":	543
		}, {
			"file":	"trees.c",
			"line":	724,
			"primary_score":	999995,
			"second_score":	539
		}, {
			"file":	"trees.c",
			"line":	725,
			"primary_score":	999995,
			"second_score":	538
		}, {
			"file":	"trees.c",
			"line":	726,
			"primary_score":	999995,
			"second_score":	575
		}, {
			"file":	"trees.c",
			"line":	729,
			"primary_score":	999995,
			"second_score":	574
		}, {
			"file":	"trees.c",
			"line":	730,
			"primary_score":	999997,
			"second_score":	1583
		}, {
			"file":	"trees.c",
			"line":	732,
			"primary_score":	999995,
			"second_score":	573
		}, {
			"file":	"trees.c",
			"line":	734,
			"primary_score":	999995,
			"second_score":	537
		}, {
			"file":	"trees.c",
			"line":	735,
			"primary_score":	999995,
			"second_score":	535
		}, {
			"file":	"trees.c",
			"line":	736,
			"primary_score":	999995,
			"second_score":	1116
		}, {
			"file":	"trees.c",
			"line":	737,
			"primary_score":	999995,
			"second_score":	534
		}, {
			"file":	"trees.c",
			"line":	740,
			"primary_score":	999995,
			"second_score":	533
		}, {
			"file":	"trees.c",
			"line":	801,
			"primary_score":	999995,
			"second_score":	1638
		}, {
			"file":	"trees.c",
			"line":	804,
			"primary_score":	999995,
			"second_score":	1637
		}, {
			"file":	"trees.c",
			"line":	805,
			"primary_score":	999995,
			"second_score":	557
		}, {
			"file":	"trees.c",
			"line":	808,
			"primary_score":	999995,
			"second_score":	532
		}, {
			"file":	"trees.c",
			"line":	817,
			"primary_score":	999995,
			"second_score":	189
		}, {
			"file":	"trees.c",
			"line":	818,
			"primary_score":	999995,
			"second_score":	187
		}, {
			"file":	"trees.c",
			"line":	821,
			"primary_score":	999995,
			"second_score":	185
		}, {
			"file":	"trees.c",
			"line":	822,
			"primary_score":	999995,
			"second_score":	184
		}, {
			"file":	"trees.c",
			"line":	824,
			"primary_score":	999995,
			"second_score":	183
		}, {
			"file":	"trees.c",
			"line":	864,
			"primary_score":	999995,
			"second_score":	3367
		}, {
			"file":	"trees.c",
			"line":	865,
			"primary_score":	999995,
			"second_score":	3366
		}, {
			"file":	"trees.c",
			"line":	867,
			"primary_score":	999995,
			"second_score":	3365
		}, {
			"file":	"trees.c",
			"line":	870,
			"primary_score":	999995,
			"second_score":	3364
		}, {
			"file":	"trees.c",
			"line":	873,
			"primary_score":	999995,
			"second_score":	3363
		}, {
			"file":	"trees.c",
			"line":	874,
			"primary_score":	999995,
			"second_score":	1841
		}, {
			"file":	"trees.c",
			"line":	876,
			"primary_score":	999995,
			"second_score":	1840
		}, {
			"file":	"trees.c",
			"line":	877,
			"primary_score":	999995,
			"second_score":	1640
		}, {
			"file":	"trees.c",
			"line":	885,
			"primary_score":	999995,
			"second_score":	1639
		}, {
			"file":	"trees.c",
			"line":	888,
			"primary_score":	999995,
			"second_score":	182
		}, {
			"file":	"trees.c",
			"line":	889,
			"primary_score":	999995,
			"second_score":	181
		}, {
			"file":	"trees.c",
			"line":	890,
			"primary_score":	999995,
			"second_score":	180
		}, {
			"file":	"trees.c",
			"line":	894,
			"primary_score":	999995,
			"second_score":	179
		}, {
			"file":	"trees.c",
			"line":	896,
			"primary_score":	999996,
			"second_score":	177
		}, {
			"file":	"trees.c",
			"line":	905,
			"primary_score":	999995,
			"second_score":	176
		}, {
			"file":	"trees.c",
			"line":	918,
			"primary_score":	999995,
			"second_score":	175
		}, {
			"file":	"trees.c",
			"line":	936,
			"primary_score":	999995,
			"second_score":	174
		}, {
			"file":	"trees.c",
			"line":	938,
			"primary_score":	999996,
			"second_score":	173
		}, {
			"file":	"trees.c",
			"line":	939,
			"primary_score":	999996,
			"second_score":	169
		}, {
			"file":	"trees.c",
			"line":	940,
			"primary_score":	999996,
			"second_score":	105
		}, {
			"file":	"trees.c",
			"line":	947,
			"primary_score":	999995,
			"second_score":	104
		}, {
			"file":	"trees.c",
			"line":	948,
			"primary_score":	999995,
			"second_score":	103
		}, {
			"file":	"trees.c",
			"line":	950,
			"primary_score":	999995,
			"second_score":	93
		}, {
			"file":	"trees.c",
			"line":	951,
			"primary_score":	999995,
			"second_score":	92
		}, {
			"file":	"trees.c",
			"line":	952,
			"primary_score":	999995,
			"second_score":	91
		}, {
			"file":	"trees.c",
			"line":	953,
			"primary_score":	999995,
			"second_score":	82
		}, {
			"file":	"trees.c",
			"line":	956,
			"primary_score":	999995,
			"second_score":	81
		}, {
			"file":	"trees.c",
			"line":	967,
			"primary_score":	999995,
			"second_score":	3375
		}, {
			"file":	"trees.c",
			"line":	968,
			"primary_score":	999995,
			"second_score":	3374
		}, {
			"file":	"trees.c",
			"line":	970,
			"primary_score":	999995,
			"second_score":	3373
		}, {
			"file":	"trees.c",
			"line":	984,
			"primary_score":	999995,
			"second_score":	3372
		}, {
			"file":	"trees.c",
			"line":	987,
			"primary_score":	999995,
			"second_score":	3371
		}, {
			"file":	"trees.c",
			"line":	992,
			"primary_score":	999995,
			"second_score":	3370
		}, {
			"file":	"trees.c",
			"line":	1006,
			"primary_score":	999995,
			"second_score":	3369
		}, {
			"file":	"trees.c",
			"line":	1020,
			"primary_score":	999995,
			"second_score":	168
		}, {
			"file":	"trees.c",
			"line":	1021,
			"primary_score":	999995,
			"second_score":	167
		}, {
			"file":	"trees.c",
			"line":	1022,
			"primary_score":	999995,
			"second_score":	166
		}, {
			"file":	"trees.c",
			"line":	1023,
			"primary_score":	999995,
			"second_score":	165
		}, {
			"file":	"trees.c",
			"line":	1024,
			"primary_score":	999995,
			"second_score":	164
		}, {
			"file":	"trees.c",
			"line":	1025,
			"primary_score":	999995,
			"second_score":	163
		}, {
			"file":	"trees.c",
			"line":	1026,
			"primary_score":	999995,
			"second_score":	162
		}, {
			"file":	"trees.c",
			"line":	1027,
			"primary_score":	999995,
			"second_score":	161
		}, {
			"file":	"trees.c",
			"line":	1029,
			"primary_score":	999995,
			"second_score":	160
		}, {
			"file":	"trees.c",
			"line":	1030,
			"primary_score":	999995,
			"second_score":	157
		}, {
			"file":	"trees.c",
			"line":	1031,
			"primary_score":	999995,
			"second_score":	123
		}, {
			"file":	"trees.c",
			"line":	1032,
			"primary_score":	999995,
			"second_score":	122
		}, {
			"file":	"trees.c",
			"line":	1033,
			"primary_score":	999995,
			"second_score":	121
		}, {
			"file":	"trees.c",
			"line":	1034,
			"primary_score":	999995,
			"second_score":	111
		}, {
			"file":	"trees.c",
			"line":	1056,
			"primary_score":	999995,
			"second_score":	110
		}, {
			"file":	"trees.c",
			"line":	1059,
			"primary_score":	999995,
			"second_score":	109
		}, {
			"file":	"unzip.c",
			"line":	115,
			"primary_score":	999994,
			"second_score":	8145
		}, {
			"file":	"unzip.c",
			"line":	116,
			"primary_score":	999994,
			"second_score":	8144
		}, {
			"file":	"unzip.c",
			"line":	117,
			"primary_score":	999994,
			"second_score":	8143
		}, {
			"file":	"unzip.c",
			"line":	118,
			"primary_score":	999994,
			"second_score":	8142
		}, {
			"file":	"unzip.c",
			"line":	119,
			"primary_score":	999994,
			"second_score":	8141
		}, {
			"file":	"unzip.c",
			"line":	121,
			"primary_score":	999994,
			"second_score":	8140
		}, {
			"file":	"unzip.c",
			"line":	122,
			"primary_score":	999994,
			"second_score":	8139
		}, {
			"file":	"unzip.c",
			"line":	124,
			"primary_score":	999994,
			"second_score":	8138
		}, {
			"file":	"unzip.c",
			"line":	126,
			"primary_score":	999994,
			"second_score":	8131
		}, {
			"file":	"unzip.c",
			"line":	132,
			"primary_score":	999994,
			"second_score":	8130
		}, {
			"file":	"unzip.c",
			"line":	134,
			"primary_score":	999994,
			"second_score":	8129
		}, {
			"file":	"unzip.c",
			"line":	136,
			"primary_score":	999994,
			"second_score":	118
		}, {
			"file":	"unzip.c",
			"line":	138,
			"primary_score":	999994,
			"second_score":	117
		}, {
			"file":	"unzip.c",
			"line":	161,
			"primary_score":	999995,
			"second_score":	116
		}, {
			"file":	"unzip.c",
			"line":	165,
			"primary_score":	999995,
			"second_score":	115
		}, {
			"file":	"unzip.c",
			"line":	166,
			"primary_score":	999995,
			"second_score":	107
		}, {
			"file":	"unzip.c",
			"line":	168,
			"primary_score":	999995,
			"second_score":	106
		}, {
			"file":	"unzip.c",
			"line":	169,
			"primary_score":	999995,
			"second_score":	105
		}, {
			"file":	"unzip.c",
			"line":	185,
			"primary_score":	999995,
			"second_score":	104
		}, {
			"file":	"unzip.c",
			"line":	190,
			"primary_score":	999995,
			"second_score":	96
		}, {
			"file":	"unzip.c",
			"line":	197,
			"primary_score":	999995,
			"second_score":	95
		}, {
			"file":	"unzip.c",
			"line":	210,
			"primary_score":	999995,
			"second_score":	94
		}, {
			"file":	"unzip.c",
			"line":	211,
			"primary_score":	999995,
			"second_score":	93
		}, {
			"file":	"util.c",
			"line":	52,
			"primary_score":	1000000,
			"second_score":	95
		}, {
			"file":	"util.c",
			"line":	53,
			"primary_score":	1000000,
			"second_score":	94
		}, {
			"file":	"util.c",
			"line":	54,
			"primary_score":	1000000,
			"second_score":	57
		}, {
			"file":	"util.c",
			"line":	55,
			"primary_score":	1000000,
			"second_score":	52
		}, {
			"file":	"util.c",
			"line":	56,
			"primary_score":	1000000,
			"second_score":	51
		}, {
			"file":	"util.c",
			"line":	58,
			"primary_score":	1000000,
			"second_score":	48
		}, {
			"file":	"util.c",
			"line":	61,
			"primary_score":	1000000,
			"second_score":	47
		}, {
			"file":	"util.c",
			"line":	62,
			"primary_score":	1000000,
			"second_score":	46
		}, {
			"file":	"util.c",
			"line":	74,
			"primary_score":	999994,
			"second_score":	3497
		}, {
			"file":	"util.c",
			"line":	76,
			"primary_score":	999994,
			"second_score":	3496
		}, {
			"file":	"util.c",
			"line":	78,
			"primary_score":	999994,
			"second_score":	3495
		}, {
			"file":	"util.c",
			"line":	79,
			"primary_score":	999994,
			"second_score":	11721
		}, {
			"file":	"util.c",
			"line":	81,
			"primary_score":	999995,
			"second_score":	3494
		}, {
			"file":	"util.c",
			"line":	82,
			"primary_score":	999995,
			"second_score":	3493
		}, {
			"file":	"util.c",
			"line":	83,
			"primary_score":	999995,
			"second_score":	3488
		}, {
			"file":	"util.c",
			"line":	86,
			"primary_score":	999994,
			"second_score":	3487
		}, {
			"file":	"util.c",
			"line":	87,
			"primary_score":	999994,
			"second_score":	3486
		}, {
			"file":	"util.c",
			"line":	95,
			"primary_score":	999993,
			"second_score":	16262
		}, {
			"file":	"util.c",
			"line":	96,
			"primary_score":	999993,
			"second_score":	16261
		}, {
			"file":	"util.c",
			"line":	97,
			"primary_score":	999993,
			"second_score":	16260
		}, {
			"file":	"util.c",
			"line":	106,
			"primary_score":	999993,
			"second_score":	16248
		}, {
			"file":	"util.c",
			"line":	109,
			"primary_score":	999993,
			"second_score":	16247
		}, {
			"file":	"util.c",
			"line":	110,
			"primary_score":	999993,
			"second_score":	16246
		}, {
			"file":	"util.c",
			"line":	111,
			"primary_score":	999993,
			"second_score":	16239
		}, {
			"file":	"util.c",
			"line":	112,
			"primary_score":	999993,
			"second_score":	16236
		}, {
			"file":	"util.c",
			"line":	113,
			"primary_score":	999993,
			"second_score":	16241
		}, {
			"file":	"util.c",
			"line":	117,
			"primary_score":	999993,
			"second_score":	16240
		}, {
			"file":	"util.c",
			"line":	120,
			"primary_score":	999993,
			"second_score":	16234
		}, {
			"file":	"util.c",
			"line":	121,
			"primary_score":	999999,
			"second_score":	73
		}, {
			"file":	"util.c",
			"line":	126,
			"primary_score":	999993,
			"second_score":	16233
		}, {
			"file":	"util.c",
			"line":	127,
			"primary_score":	999993,
			"second_score":	16232
		}, {
			"file":	"util.c",
			"line":	128,
			"primary_score":	999993,
			"second_score":	16231
		}, {
			"file":	"util.c",
			"line":	139,
			"primary_score":	999993,
			"second_score":	16238
		}, {
			"file":	"util.c",
			"line":	141,
			"primary_score":	999993,
			"second_score":	16237
		}, {
			"file":	"util.c",
			"line":	151,
			"primary_score":	999994,
			"second_score":	80
		}, {
			"file":	"util.c",
			"line":	153,
			"primary_score":	999994,
			"second_score":	79
		}, {
			"file":	"util.c",
			"line":	162,
			"primary_score":	999995,
			"second_score":	54
		}, {
			"file":	"util.c",
			"line":	164,
			"primary_score":	999995,
			"second_score":	53
		}, {
			"file":	"util.c",
			"line":	165,
			"primary_score":	999995,
			"second_score":	48
		}, {
			"file":	"util.c",
			"line":	166,
			"primary_score":	999995,
			"second_score":	47
		}, {
			"file":	"util.c",
			"line":	175,
			"primary_score":	999995,
			"second_score":	142
		}, {
			"file":	"util.c",
			"line":	176,
			"primary_score":	999995,
			"second_score":	141
		}, {
			"file":	"util.c",
			"line":	178,
			"primary_score":	999995,
			"second_score":	128
		}, {
			"file":	"util.c",
			"line":	179,
			"primary_score":	999995,
			"second_score":	127
		}, {
			"file":	"util.c",
			"line":	181,
			"primary_score":	999995,
			"second_score":	122
		}, {
			"file":	"util.c",
			"line":	182,
			"primary_score":	999995,
			"second_score":	121
		}, {
			"file":	"util.c",
			"line":	194,
			"primary_score":	999994,
			"second_score":	82
		}, {
			"file":	"util.c",
			"line":	196,
			"primary_score":	999994,
			"second_score":	81
		}, {
			"file":	"util.c",
			"line":	226,
			"primary_score":	999993,
			"second_score":	16353
		}, {
			"file":	"util.c",
			"line":	228,
			"primary_score":	999993,
			"second_score":	16352
		}, {
			"file":	"util.c",
			"line":	238,
			"primary_score":	999993,
			"second_score":	16351
		}, {
			"file":	"util.c",
			"line":	239,
			"primary_score":	999993,
			"second_score":	16350
		}, {
			"file":	"util.c",
			"line":	298,
			"primary_score":	999993,
			"second_score":	16345
		}, {
			"file":	"util.c",
			"line":	299,
			"primary_score":	999993,
			"second_score":	16344
		}, {
			"file":	"util.c",
			"line":	300,
			"primary_score":	999993,
			"second_score":	16343
		}, {
			"file":	"util.c",
			"line":	301,
			"primary_score":	999993,
			"second_score":	16342
		}, {
			"file":	"util.c",
			"line":	302,
			"primary_score":	999993,
			"second_score":	16341
		}, {
			"file":	"util.c",
			"line":	303,
			"primary_score":	999993,
			"second_score":	16340
		}, {
			"file":	"util.c",
			"line":	305,
			"primary_score":	999993,
			"second_score":	16339
		}, {
			"file":	"util.c",
			"line":	306,
			"primary_score":	999993,
			"second_score":	16338
		}, {
			"file":	"zip.c",
			"line":	41,
			"primary_score":	999995,
			"second_score":	11763
		}, {
			"file":	"zip.c",
			"line":	42,
			"primary_score":	999995,
			"second_score":	11762
		}, {
			"file":	"zip.c",
			"line":	43,
			"primary_score":	999995,
			"second_score":	11761
		}, {
			"file":	"zip.c",
			"line":	44,
			"primary_score":	999995,
			"second_score":	11760
		}, {
			"file":	"zip.c",
			"line":	46,
			"primary_score":	999995,
			"second_score":	11759
		}, {
			"file":	"zip.c",
			"line":	47,
			"primary_score":	999995,
			"second_score":	11758
		}, {
			"file":	"zip.c",
			"line":	48,
			"primary_score":	999995,
			"second_score":	11757
		}, {
			"file":	"zip.c",
			"line":	52,
			"primary_score":	999995,
			"second_score":	11756
		}, {
			"file":	"zip.c",
			"line":	53,
			"primary_score":	999995,
			"second_score":	11755
		}, {
			"file":	"zip.c",
			"line":	54,
			"primary_score":	999995,
			"second_score":	11751
		}, {
			"file":	"zip.c",
			"line":	55,
			"primary_score":	999995,
			"second_score":	11747
		}, {
			"file":	"zip.c",
			"line":	57,
			"primary_score":	999995,
			"second_score":	11743
		}, {
			"file":	"zip.c",
			"line":	60,
			"primary_score":	999995,
			"second_score":	11742
		}, {
			"file":	"zip.c",
			"line":	61,
			"primary_score":	999995,
			"second_score":	11738
		}, {
			"file":	"zip.c",
			"line":	64,
			"primary_score":	999995,
			"second_score":	11737
		}, {
			"file":	"zip.c",
			"line":	67,
			"primary_score":	999995,
			"second_score":	11725
		}, {
			"file":	"zip.c",
			"line":	69,
			"primary_score":	999995,
			"second_score":	11718
		}, {
			"file":	"zip.c",
			"line":	70,
			"primary_score":	999995,
			"second_score":	11712
		}, {
			"file":	"zip.c",
			"line":	71,
			"primary_score":	999995,
			"second_score":	3519
		}, {
			"file":	"zip.c",
			"line":	73,
			"primary_score":	999995,
			"second_score":	3463
		}, {
			"file":	"zip.c",
			"line":	74,
			"primary_score":	999995,
			"second_score":	3459
		}, {
			"file":	"zip.c",
			"line":	76,
			"primary_score":	999995,
			"second_score":	3455
		}, {
			"file":	"zip.c",
			"line":	82,
			"primary_score":	999995,
			"second_score":	3454
		}, {
			"file":	"zip.c",
			"line":	84,
			"primary_score":	999995,
			"second_score":	3453
		}, {
			"file":	"zip.c",
			"line":	97,
			"primary_score":	999995,
			"second_score":	80
		}, {
			"file":	"zip.c",
			"line":	98,
			"primary_score":	999995,
			"second_score":	68
		}, {
			"file":	"zip.c",
			"line":	99,
			"primary_score":	999995,
			"second_score":	56
		}, {
			"file":	"zip.c",
			"line":	101,
			"primary_score":	999995,
			"second_score":	55
		}, {
			"file":	"zip.c",
			"line":	102,
			"primary_score":	999995,
			"second_score":	46
		}, {
			"file":	"zip.c",
			"line":	115,
			"primary_score":	999995,
			"second_score":	3474
		}, {
			"file":	"zip.c",
			"line":	117,
			"primary_score":	999995,
			"second_score":	3473
		}, {
			"file":	"zip.c",
			"line":	119,
			"primary_score":	999995,
			"second_score":	3472
		}, {
			"file":	"zip.c",
			"line":	120,
			"primary_score":	999995,
			"second_score":	3469
		}, {
			"file":	"zip.c",
			"line":	121,
			"primary_score":	999995,
			"second_score":	3499
		}, {
			"file":	"zip.c",
			"line":	126,
			"primary_score":	999995,
			"second_score":	3498
		}, {
			"file":	"zip.c",
			"line":	127,
			"primary_score":	999995,
			"second_score":	3485
		}, {
			"file":	"zip.c",
			"line":	128,
			"primary_score":	999995,
			"second_score":	3484
		}],
	"mutation_info":	[{
			"file":	"gzip.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"gzip.c",
			"lines":	[{
					"line":	456,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [324, 325, 326, 327, 328, 329, 330], [], [], [], [], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [], [], []],
							"begin_line":	457,
							"begin_column":	20,
							"end_line":	457,
							"end_column":	20,
							"patch_codes":	["args = (argv)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "env = add_envopt(&argc, &(argv), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "program_name = gzip_base_name((argv)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L457\", 35, &(force), sizeof (force), &(decompress), sizeof (decompress), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(recursive), sizeof (recursive), &(test), sizeof (test), &(test), sizeof (test), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    break;\n", "if (__is_neg(\"\", \"L457\", 35, &(force), sizeof (force), &(decompress), sizeof (decompress), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(recursive), sizeof (recursive), &(test), sizeof (test), &(test), sizeof (test), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return -1;\n", "if (__is_neg(\"\", \"L457\", 35, &(force), sizeof (force), &(decompress), sizeof (decompress), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(recursive), sizeof (recursive), &(test), sizeof (test), &(test), sizeof (test), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L457\", 35, &(force), sizeof (force), &(decompress), sizeof (decompress), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(recursive), sizeof (recursive), &(test), sizeof (test), &(test), sizeof (test), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 13;\n", "if (__is_neg(\"\", \"L457\", 35, &(force), sizeof (force), &(decompress), sizeof (decompress), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(recursive), sizeof (recursive), &(test), sizeof (test), &(test), sizeof (test), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L457\", 35, &(force), sizeof (force), &(decompress), sizeof (decompress), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(recursive), sizeof (recursive), &(test), sizeof (test), &(test), sizeof (test), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 30;\n", "if (__is_neg(\"\", \"L457\", 35, &(force), sizeof (force), &(decompress), sizeof (decompress), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(recursive), sizeof (recursive), &(test), sizeof (test), &(test), sizeof (test), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	2,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	3,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	4,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	5,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	6,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	7,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	8,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	9,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	10,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	11,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	12,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	13,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	14,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	15,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	16,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	17,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	18,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	19,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	20,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	21,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	22,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	23,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	24,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	25,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	26,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	27,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	28,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	29,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	30,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	31,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	32,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	33,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	34,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	35,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	36,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	37,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	38,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	39,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	40,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	41,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	42,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	43,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	44,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	45,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	46,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	47,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	48,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	49,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	50,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	51,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	52,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	53,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	54,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	55,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	56,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	57,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	58,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	59,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	60,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	61,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	62,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	63,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	64,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	65,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	66,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	67,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	68,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	69,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	70,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	71,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	72,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	73,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	74,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	75,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	76,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	77,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	78,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	79,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	80,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	81,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	82,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	83,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	84,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	85,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	86,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	87,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	88,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	89,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	90,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	91,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	92,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	93,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	94,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	95,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	96,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	97,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	98,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	99,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	100,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	101,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	102,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	103,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	104,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	105,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	106,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	107,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	108,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	109,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	110,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	111,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	112,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	113,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	114,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	115,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	116,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	117,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	118,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	119,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	120,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	121,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	122,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	123,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	124,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	125,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	126,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	127,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	128,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	129,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	130,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	131,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	132,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	133,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	134,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	135,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	136,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	137,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	138,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	139,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	140,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	141,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	142,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	143,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	144,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	145,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	146,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	147,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	148,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	149,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	150,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	151,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	152,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	153,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	154,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	155,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	156,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	157,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	158,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	159,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	160,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	161,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	162,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	163,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	164,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	165,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	166,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	167,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	168,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	169,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	170,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	171,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	172,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	173,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	174,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	175,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	176,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	177,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	178,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	179,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	180,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	181,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	182,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	183,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	184,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	185,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	186,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	187,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	188,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	189,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	190,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	191,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	192,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	193,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	194,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	195,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	196,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	197,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	198,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	199,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	200,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	201,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	202,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	203,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	204,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	205,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	206,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	207,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	208,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	209,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	210,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	211,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	212,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	213,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	214,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	215,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	216,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	217,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	218,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	219,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	220,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	221,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	222,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	223,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	224,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	225,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	226,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	227,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	228,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	229,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	230,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	231,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	232,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	233,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	234,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	235,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	236,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	237,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	238,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	239,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	240,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	241,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	242,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	243,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	244,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	245,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	246,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	247,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	248,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	249,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	250,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	251,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	252,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	253,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	254,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	255,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	256,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	257,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	258,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	259,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	260,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	261,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	262,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	263,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	264,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	265,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	266,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	267,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	268,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	269,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	270,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	271,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	272,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	273,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	274,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	275,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	276,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	277,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	278,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	279,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	280,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	281,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	282,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	283,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	284,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	285,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	286,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	287,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	288,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	289,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	290,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	291,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	292,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	293,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	294,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	295,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	296,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	297,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	298,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	299,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	300,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	301,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	302,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	303,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	304,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	305,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	306,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	307,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	308,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	309,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	310,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	311,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	312,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	313,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	314,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	315,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	316,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	317,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	318,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	319,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	320,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	321,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	322,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	323,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	324,
									"scores":	[-6.2551739044661332, -5.2811668004661332, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.9093677004661327, -6.9093677004661327, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.3269903973661332, -6.5042532373661324, -6.5936759373661324, -6.9093677004661327, -6.3638340004661327, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.9093677004661327, -6.9093677004661327, -5.8708793973661324, -6.8199450004661326, -6.8199450004661326, -6.3269903973661332, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326, -6.8199450004661326]
								}, {
									"case":	325,
									"scores":	[-8.6178639044661338, -7.6438568004661329, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -8.866943237366133, -8.9563659373661331, -9.2720577004661333, -8.7265240004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -8.23356939736613, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332]
								}, {
									"case":	326,
									"scores":	[-6.355082104466133, -5.381075000466133, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -7.0092759004661334, -7.0092759004661334, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.426898597366133, -6.604161437366133, -6.6935841373661331, -7.0092759004661334, -6.4637422004661325, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -7.0092759004661334, -7.0092759004661334, -5.9707875973661331, -6.9198532004661333, -6.9198532004661333, -6.426898597366133, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333, -6.9198532004661333]
								}, {
									"case":	327,
									"scores":	[-8.6178639044661338, -7.6438568004661329, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -8.866943237366133, -8.9563659373661331, -9.2720577004661333, -8.7265240004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -8.23356939736613, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332]
								}, {
									"case":	328,
									"scores":	[-8.6178639044661338, -7.6438568004661329, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -8.866943237366133, -8.9563659373661331, -9.2720577004661333, -8.7265240004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -8.23356939736613, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332]
								}, {
									"case":	329,
									"scores":	[-8.6178639044661338, -7.6438568004661329, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -8.866943237366133, -8.9563659373661331, -9.2720577004661333, -8.7265240004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -8.23356939736613, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332]
								}, {
									"case":	330,
									"scores":	[-8.6178639044661338, -7.6438568004661329, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -8.866943237366133, -8.9563659373661331, -9.2720577004661333, -8.7265240004661333, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.2720577004661333, -9.2720577004661333, -8.23356939736613, -9.1826350004661332, -9.1826350004661332, -8.68968039736613, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332, -9.1826350004661332]
								}]
						}]
				}, {
					"line":	561,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [324, 325, 326, 327, 328, 329], [], [], [], [], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [], [], []],
							"begin_line":	562,
							"begin_column":	7,
							"end_line":	562,
							"end_column":	7,
							"patch_codes":	["args = (argv)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "env = add_envopt(&argc, &(argv), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "program_name = gzip_base_name((argv)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L562\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return -1;\n", "if (__is_neg(\"\", \"L562\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 0;\n", "if (__is_neg(\"\", \"L562\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 13;\n", "if (__is_neg(\"\", \"L562\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 1;\n", "if (__is_neg(\"\", \"L562\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 30;\n", "if (__is_neg(\"\", \"L562\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	2,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	3,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	4,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	5,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	6,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	7,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	8,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	9,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	10,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	11,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	12,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	13,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	14,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	15,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	16,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	17,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	18,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	19,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	20,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	21,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	22,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	23,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	24,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	25,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	26,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	27,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	28,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	29,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	30,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	31,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	32,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	33,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	34,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	35,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	36,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	37,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	38,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	39,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	40,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	41,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	42,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	43,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	44,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	45,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	46,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	47,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	48,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	49,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	50,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	51,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	52,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	53,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	54,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	55,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	56,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	57,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	58,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	59,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	60,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	61,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	62,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	63,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	64,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	65,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	66,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	67,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	68,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	69,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	70,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	71,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	72,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	73,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	74,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	75,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	76,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	77,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	78,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	79,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	80,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	81,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	82,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	83,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	84,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	85,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	86,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	87,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	88,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	89,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	90,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	91,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	92,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	93,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	94,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	95,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	96,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	97,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	98,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	99,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	100,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	101,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	102,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	103,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	104,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	105,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	106,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	107,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	108,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	109,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	110,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	111,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	112,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	113,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	114,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	115,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	116,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	117,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	118,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	119,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	120,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	121,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	122,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	123,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	124,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	125,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	126,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	127,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	128,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	129,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	130,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	131,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	132,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	133,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	134,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	135,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	136,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	137,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	138,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	139,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	140,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	141,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	142,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	143,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	144,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	145,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	146,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	147,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	148,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	149,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	150,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	151,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	152,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	153,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	154,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	155,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	156,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	157,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	158,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	159,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	160,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	161,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	162,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	163,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	164,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	165,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	166,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	167,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	168,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	169,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	170,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	171,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	172,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	173,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	174,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	175,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	176,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	177,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	178,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	179,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	180,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	181,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	182,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	183,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	184,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	185,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	186,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	187,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	188,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	189,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	190,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	191,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	192,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	193,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	194,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	195,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	196,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	197,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	198,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	199,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	200,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	201,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	202,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	203,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	204,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	205,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	206,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	207,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	208,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	209,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	210,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	211,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	212,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	213,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	214,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	215,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	216,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	217,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	218,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	219,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	220,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	221,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	222,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	223,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	224,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	225,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	226,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	227,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	228,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	229,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	230,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	231,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	232,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	233,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	234,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	235,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	236,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	237,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	238,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	239,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	240,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	241,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	242,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	243,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	244,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	245,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	246,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	247,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	248,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	249,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	250,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	251,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	252,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	253,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	254,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	255,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	256,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	257,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	258,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	259,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	260,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	261,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	262,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	263,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	264,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	265,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	266,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	267,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	268,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	269,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	270,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	271,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	272,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	273,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	274,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	275,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	276,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	277,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	278,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	279,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	280,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	281,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	282,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	283,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	284,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	285,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	286,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	287,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	288,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	289,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	290,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	291,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	292,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	293,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	294,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	295,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	296,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	297,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	298,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	299,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	300,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	301,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	302,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	303,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	304,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	305,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	306,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	307,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	308,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	309,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	310,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	311,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	312,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	313,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	314,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	315,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	316,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	317,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	318,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	319,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	320,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	321,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	322,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	323,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	324,
									"scores":	[-9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.249597470355287, -10.160174770355287, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -10.565289233455289, -10.019755533455289, -10.475866533455289, -10.475866533455289, -9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -9.52680093035529]
								}, {
									"case":	325,
									"scores":	[-7.7201301303552876, -8.21308473345529, -8.21308473345529, -8.21308473345529, -7.9868156703552877, -7.8973929703552876, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.30250743345529, -8.30250743345529, -8.30250743345529, -7.756973733455288, -8.21308473345529, -8.21308473345529, -7.7201301303552876, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.21308473345529, -8.30250743345529, -8.30250743345529, -7.2640191303552877]
								}, {
									"case":	326,
									"scores":	[-9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.249597470355287, -10.160174770355287, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -10.565289233455289, -10.019755533455289, -10.475866533455289, -10.475866533455289, -9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -9.52680093035529]
								}, {
									"case":	327,
									"scores":	[-9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.249597470355287, -10.160174770355287, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -10.565289233455289, -10.019755533455289, -10.475866533455289, -10.475866533455289, -9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -9.52680093035529]
								}, {
									"case":	328,
									"scores":	[-9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.249597470355287, -10.160174770355287, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -10.565289233455289, -10.019755533455289, -10.475866533455289, -10.475866533455289, -9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -9.52680093035529]
								}, {
									"case":	329,
									"scores":	[-9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.249597470355287, -10.160174770355287, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -10.565289233455289, -10.019755533455289, -10.475866533455289, -10.475866533455289, -9.98291193035529, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.475866533455289, -10.565289233455289, -10.565289233455289, -9.52680093035529]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	562,
							"begin_column":	9,
							"end_line":	562,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L562\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    treat_stdin();\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8473163103552874, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.5490628103552879, -7.1120978103552872, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.765636610355287, -7.765636610355287, -7.765636610355287, -7.084744740355287, -7.3286716103552871, -7.3286716103552871, -6.8473163103552874, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.3286716103552871, -7.765636610355287, -7.765636610355287, -6.6033894403552873]
								}, {
									"case":	2,
									"scores":	[-6.1343208103552875]
								}]
						}]
				}, {
					"line":	553,
					"switches":	[{
							"switch":	1,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	554,
							"begin_column":	5,
							"end_line":	563,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L554\", 35, &(file_count), sizeof (file_count), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(argc), sizeof (argc), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exiting_signal), sizeof (exiting_signal), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    if (to_stdout && !test && !list && (!decompress || !ascii)) {\n        ;\n    }\n    while (optind < argc)\n        {\n            treat_file(argv[optind++]);\n        }\n} else {\n    treat_stdin();\n}\n", "if ((file_count != 0) || __is_neg(\"\", \"L554\", 35, &(file_count), sizeof (file_count), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(argc), sizeof (argc), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(exiting_signal), sizeof (exiting_signal), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    if (to_stdout && !test && !list && (!decompress || !ascii)) {\n        ;\n    }\n    while (optind < argc)\n        {\n            treat_file(argv[optind++]);\n        }\n} else {\n    treat_stdin();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.3601421514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -2.7681576514281461, -3.3373537514281457, -3.3373537514281457, -2.8394245984281454, -2.1391736514281443, -3.3833536934281456, -3.3833536934281456, -3.5527834514281453, -3.5527834514281453, -3.9897484514281456, -3.9897484514281456, -3.9897484514281456, -3.3088565814281456, -3.5527834514281453, -3.5527834514281453, -3.0714281514281456, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.5527834514281453, -3.9897484514281456, -3.9897484514281456, -2.8275012814281455]
								}, {
									"case":	2,
									"scores":	[-3.8547485054281458, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -5.2627640054281457, -5.8319601054281458, -5.8319601054281458, -5.3340309524281455, -4.6337800054281457, -5.8779600474281457, -5.8779600474281457, -6.0473898054281463, -6.0473898054281463, -6.4843548054281452, -6.4843548054281452, -6.4843548054281452, -5.8034629354281453, -6.0473898054281463, -6.0473898054281463, -5.5660345054281457, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.0473898054281463, -6.4843548054281452, -6.4843548054281452, -5.3221076354281456]
								}]
						}]
				}, {
					"line":	580,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	581,
							"begin_column":	7,
							"end_line":	581,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L581\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L581\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L581\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L581\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.28580710301947]
								}, {
									"case":	2,
									"scores":	[-5.28580710301947]
								}, {
									"case":	3,
									"scores":	[-5.28580710301947]
								}, {
									"case":	4,
									"scores":	[-5.28580710301947]
								}, {
									"case":	5,
									"scores":	[-5.28580710301947]
								}, {
									"case":	6,
									"scores":	[-5.28580710301947]
								}, {
									"case":	7,
									"scores":	[-5.28580710301947]
								}, {
									"case":	8,
									"scores":	[-5.28580710301947]
								}, {
									"case":	9,
									"scores":	[-5.28580710301947]
								}, {
									"case":	10,
									"scores":	[-5.28580710301947]
								}, {
									"case":	11,
									"scores":	[-5.28580710301947]
								}, {
									"case":	12,
									"scores":	[-5.28580710301947]
								}, {
									"case":	13,
									"scores":	[-5.28580710301947]
								}, {
									"case":	14,
									"scores":	[-5.28580710301947]
								}, {
									"case":	15,
									"scores":	[-5.28580710301947]
								}, {
									"case":	16,
									"scores":	[-5.28580710301947]
								}, {
									"case":	17,
									"scores":	[-5.28580710301947]
								}, {
									"case":	18,
									"scores":	[-5.28580710301947]
								}, {
									"case":	19,
									"scores":	[-5.28580710301947]
								}, {
									"case":	20,
									"scores":	[-5.28580710301947]
								}, {
									"case":	21,
									"scores":	[-5.28580710301947]
								}, {
									"case":	22,
									"scores":	[-5.28580710301947]
								}, {
									"case":	23,
									"scores":	[-5.28580710301947]
								}, {
									"case":	24,
									"scores":	[-5.28580710301947]
								}, {
									"case":	25,
									"scores":	[-5.28580710301947]
								}, {
									"case":	26,
									"scores":	[-5.28580710301947]
								}, {
									"case":	27,
									"scores":	[-5.28580710301947]
								}, {
									"case":	28,
									"scores":	[-5.28580710301947]
								}, {
									"case":	29,
									"scores":	[-5.28580710301947]
								}, {
									"case":	30,
									"scores":	[-5.28580710301947]
								}, {
									"case":	31,
									"scores":	[-5.28580710301947]
								}, {
									"case":	32,
									"scores":	[-5.28580710301947]
								}, {
									"case":	33,
									"scores":	[-5.28580710301947]
								}, {
									"case":	34,
									"scores":	[-5.28580710301947]
								}, {
									"case":	35,
									"scores":	[-5.28580710301947]
								}, {
									"case":	36,
									"scores":	[-5.28580710301947]
								}, {
									"case":	37,
									"scores":	[-5.28580710301947]
								}, {
									"case":	38,
									"scores":	[-5.28580710301947]
								}, {
									"case":	39,
									"scores":	[-5.28580710301947]
								}, {
									"case":	40,
									"scores":	[-5.28580710301947]
								}, {
									"case":	41,
									"scores":	[-5.28580710301947]
								}, {
									"case":	42,
									"scores":	[-5.28580710301947]
								}, {
									"case":	43,
									"scores":	[-5.28580710301947]
								}, {
									"case":	44,
									"scores":	[-5.28580710301947]
								}, {
									"case":	45,
									"scores":	[-5.28580710301947]
								}, {
									"case":	46,
									"scores":	[-5.28580710301947]
								}, {
									"case":	47,
									"scores":	[-5.28580710301947]
								}, {
									"case":	48,
									"scores":	[-5.28580710301947]
								}, {
									"case":	49,
									"scores":	[-5.28580710301947]
								}, {
									"case":	50,
									"scores":	[-5.28580710301947]
								}, {
									"case":	51,
									"scores":	[-5.28580710301947]
								}, {
									"case":	52,
									"scores":	[-5.28580710301947]
								}, {
									"case":	53,
									"scores":	[-5.28580710301947]
								}, {
									"case":	54,
									"scores":	[-5.28580710301947]
								}, {
									"case":	55,
									"scores":	[-5.28580710301947]
								}, {
									"case":	56,
									"scores":	[-5.28580710301947]
								}, {
									"case":	57,
									"scores":	[-5.28580710301947]
								}, {
									"case":	58,
									"scores":	[-5.28580710301947]
								}, {
									"case":	59,
									"scores":	[-5.28580710301947]
								}, {
									"case":	60,
									"scores":	[-5.28580710301947]
								}, {
									"case":	61,
									"scores":	[-5.28580710301947]
								}, {
									"case":	62,
									"scores":	[-5.28580710301947]
								}, {
									"case":	63,
									"scores":	[-5.28580710301947]
								}, {
									"case":	64,
									"scores":	[-5.28580710301947]
								}, {
									"case":	65,
									"scores":	[-5.28580710301947]
								}, {
									"case":	66,
									"scores":	[-5.28580710301947]
								}, {
									"case":	67,
									"scores":	[-5.28580710301947]
								}, {
									"case":	68,
									"scores":	[-5.28580710301947]
								}, {
									"case":	69,
									"scores":	[-5.28580710301947]
								}, {
									"case":	70,
									"scores":	[-5.28580710301947]
								}, {
									"case":	71,
									"scores":	[-5.28580710301947]
								}, {
									"case":	72,
									"scores":	[-5.28580710301947]
								}, {
									"case":	73,
									"scores":	[-5.28580710301947]
								}, {
									"case":	74,
									"scores":	[-5.28580710301947]
								}, {
									"case":	75,
									"scores":	[-5.28580710301947]
								}, {
									"case":	76,
									"scores":	[-5.28580710301947]
								}, {
									"case":	77,
									"scores":	[-5.28580710301947]
								}, {
									"case":	78,
									"scores":	[-5.28580710301947]
								}, {
									"case":	79,
									"scores":	[-5.28580710301947]
								}, {
									"case":	80,
									"scores":	[-5.28580710301947]
								}, {
									"case":	81,
									"scores":	[-5.28580710301947]
								}, {
									"case":	82,
									"scores":	[-5.28580710301947]
								}, {
									"case":	83,
									"scores":	[-5.28580710301947]
								}, {
									"case":	84,
									"scores":	[-5.28580710301947]
								}, {
									"case":	85,
									"scores":	[-5.28580710301947]
								}, {
									"case":	86,
									"scores":	[-5.28580710301947]
								}, {
									"case":	87,
									"scores":	[-5.28580710301947]
								}, {
									"case":	88,
									"scores":	[-5.28580710301947]
								}, {
									"case":	89,
									"scores":	[-5.28580710301947]
								}, {
									"case":	90,
									"scores":	[-5.28580710301947]
								}, {
									"case":	91,
									"scores":	[-5.28580710301947]
								}, {
									"case":	92,
									"scores":	[-5.28580710301947]
								}, {
									"case":	93,
									"scores":	[-5.28580710301947]
								}, {
									"case":	94,
									"scores":	[-5.28580710301947]
								}, {
									"case":	95,
									"scores":	[-5.28580710301947]
								}, {
									"case":	96,
									"scores":	[-5.28580710301947]
								}, {
									"case":	97,
									"scores":	[-5.28580710301947]
								}, {
									"case":	98,
									"scores":	[-5.28580710301947]
								}, {
									"case":	99,
									"scores":	[-5.28580710301947]
								}, {
									"case":	100,
									"scores":	[-5.28580710301947]
								}, {
									"case":	101,
									"scores":	[-5.28580710301947]
								}, {
									"case":	102,
									"scores":	[-5.28580710301947]
								}, {
									"case":	103,
									"scores":	[-5.28580710301947]
								}, {
									"case":	104,
									"scores":	[-5.28580710301947]
								}, {
									"case":	105,
									"scores":	[-5.28580710301947]
								}, {
									"case":	106,
									"scores":	[-5.28580710301947]
								}, {
									"case":	107,
									"scores":	[-5.28580710301947]
								}, {
									"case":	108,
									"scores":	[-5.28580710301947]
								}, {
									"case":	109,
									"scores":	[-5.28580710301947]
								}, {
									"case":	110,
									"scores":	[-5.28580710301947]
								}, {
									"case":	111,
									"scores":	[-5.28580710301947]
								}, {
									"case":	112,
									"scores":	[-5.28580710301947]
								}, {
									"case":	113,
									"scores":	[-5.28580710301947]
								}, {
									"case":	114,
									"scores":	[-5.28580710301947]
								}, {
									"case":	115,
									"scores":	[-5.28580710301947]
								}, {
									"case":	116,
									"scores":	[-5.28580710301947]
								}, {
									"case":	117,
									"scores":	[-5.28580710301947]
								}, {
									"case":	118,
									"scores":	[-5.28580710301947]
								}, {
									"case":	119,
									"scores":	[-5.28580710301947]
								}, {
									"case":	120,
									"scores":	[-5.28580710301947]
								}, {
									"case":	121,
									"scores":	[-5.28580710301947]
								}, {
									"case":	122,
									"scores":	[-5.28580710301947]
								}, {
									"case":	123,
									"scores":	[-5.28580710301947]
								}, {
									"case":	124,
									"scores":	[-5.28580710301947]
								}, {
									"case":	125,
									"scores":	[-5.28580710301947]
								}, {
									"case":	126,
									"scores":	[-5.28580710301947]
								}, {
									"case":	127,
									"scores":	[-5.28580710301947]
								}, {
									"case":	128,
									"scores":	[-5.28580710301947]
								}, {
									"case":	129,
									"scores":	[-5.28580710301947]
								}, {
									"case":	130,
									"scores":	[-5.28580710301947]
								}, {
									"case":	131,
									"scores":	[-5.28580710301947]
								}, {
									"case":	132,
									"scores":	[-5.28580710301947]
								}, {
									"case":	133,
									"scores":	[-5.28580710301947]
								}, {
									"case":	134,
									"scores":	[-5.28580710301947]
								}, {
									"case":	135,
									"scores":	[-5.28580710301947]
								}, {
									"case":	136,
									"scores":	[-5.28580710301947]
								}, {
									"case":	137,
									"scores":	[-5.28580710301947]
								}, {
									"case":	138,
									"scores":	[-5.28580710301947]
								}, {
									"case":	139,
									"scores":	[-5.28580710301947]
								}, {
									"case":	140,
									"scores":	[-5.28580710301947]
								}, {
									"case":	141,
									"scores":	[-5.28580710301947]
								}, {
									"case":	142,
									"scores":	[-5.28580710301947]
								}, {
									"case":	143,
									"scores":	[-5.28580710301947]
								}, {
									"case":	144,
									"scores":	[-5.28580710301947]
								}, {
									"case":	145,
									"scores":	[-5.28580710301947]
								}, {
									"case":	146,
									"scores":	[-5.28580710301947]
								}, {
									"case":	147,
									"scores":	[-5.28580710301947]
								}, {
									"case":	148,
									"scores":	[-5.28580710301947]
								}, {
									"case":	149,
									"scores":	[-5.28580710301947]
								}, {
									"case":	150,
									"scores":	[-5.28580710301947]
								}, {
									"case":	151,
									"scores":	[-5.28580710301947]
								}, {
									"case":	152,
									"scores":	[-5.28580710301947]
								}, {
									"case":	153,
									"scores":	[-5.28580710301947]
								}, {
									"case":	154,
									"scores":	[-5.28580710301947]
								}, {
									"case":	155,
									"scores":	[-5.28580710301947]
								}, {
									"case":	156,
									"scores":	[-5.28580710301947]
								}, {
									"case":	157,
									"scores":	[-5.28580710301947]
								}, {
									"case":	158,
									"scores":	[-5.28580710301947]
								}, {
									"case":	159,
									"scores":	[-5.28580710301947]
								}, {
									"case":	160,
									"scores":	[-5.28580710301947]
								}, {
									"case":	161,
									"scores":	[-5.28580710301947]
								}, {
									"case":	162,
									"scores":	[-5.28580710301947]
								}, {
									"case":	163,
									"scores":	[-5.28580710301947]
								}, {
									"case":	164,
									"scores":	[-5.28580710301947]
								}, {
									"case":	165,
									"scores":	[-5.28580710301947]
								}, {
									"case":	166,
									"scores":	[-5.28580710301947]
								}, {
									"case":	167,
									"scores":	[-5.28580710301947]
								}, {
									"case":	168,
									"scores":	[-5.28580710301947]
								}, {
									"case":	169,
									"scores":	[-5.28580710301947]
								}, {
									"case":	170,
									"scores":	[-5.28580710301947]
								}, {
									"case":	171,
									"scores":	[-5.28580710301947]
								}, {
									"case":	172,
									"scores":	[-5.28580710301947]
								}, {
									"case":	173,
									"scores":	[-5.28580710301947]
								}, {
									"case":	174,
									"scores":	[-5.28580710301947]
								}, {
									"case":	175,
									"scores":	[-5.28580710301947]
								}, {
									"case":	176,
									"scores":	[-5.28580710301947]
								}, {
									"case":	177,
									"scores":	[-5.28580710301947]
								}, {
									"case":	178,
									"scores":	[-5.28580710301947]
								}, {
									"case":	179,
									"scores":	[-5.28580710301947]
								}, {
									"case":	180,
									"scores":	[-5.28580710301947]
								}, {
									"case":	181,
									"scores":	[-5.28580710301947]
								}, {
									"case":	182,
									"scores":	[-5.28580710301947]
								}, {
									"case":	183,
									"scores":	[-5.28580710301947]
								}, {
									"case":	184,
									"scores":	[-5.28580710301947]
								}, {
									"case":	185,
									"scores":	[-5.28580710301947]
								}, {
									"case":	186,
									"scores":	[-5.28580710301947]
								}, {
									"case":	187,
									"scores":	[-5.28580710301947]
								}, {
									"case":	188,
									"scores":	[-5.28580710301947]
								}, {
									"case":	189,
									"scores":	[-5.28580710301947]
								}, {
									"case":	190,
									"scores":	[-5.28580710301947]
								}, {
									"case":	191,
									"scores":	[-5.28580710301947]
								}, {
									"case":	192,
									"scores":	[-5.28580710301947]
								}, {
									"case":	193,
									"scores":	[-5.28580710301947]
								}, {
									"case":	194,
									"scores":	[-5.28580710301947]
								}, {
									"case":	195,
									"scores":	[-5.28580710301947]
								}, {
									"case":	196,
									"scores":	[-5.28580710301947]
								}, {
									"case":	197,
									"scores":	[-5.28580710301947]
								}, {
									"case":	198,
									"scores":	[-5.28580710301947]
								}, {
									"case":	199,
									"scores":	[-5.28580710301947]
								}, {
									"case":	200,
									"scores":	[-9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947]
								}, {
									"case":	201,
									"scores":	[-6.86044961511947, -6.86044961511947, -6.86044961511947, -6.86044961511947, -6.86044961511947, -6.86044961511947]
								}, {
									"case":	202,
									"scores":	[-9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947]
								}, {
									"case":	203,
									"scores":	[-9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947, -9.12323141511947]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	581,
							"begin_column":	9,
							"end_line":	581,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L581\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.16298970601947, -6.16298970601947, -6.16298970601947, -6.16298970601947, -6.16298970601947, -6.16298970601947]
								}]
						}]
				}, {
					"line":	579,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	580,
							"begin_column":	5,
							"end_line":	580,
							"end_column":	5,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.30600981033699]
								}, {
									"case":	2,
									"scores":	[-5.30600981033699]
								}, {
									"case":	3,
									"scores":	[-5.30600981033699]
								}, {
									"case":	4,
									"scores":	[-5.30600981033699]
								}, {
									"case":	5,
									"scores":	[-5.30600981033699]
								}, {
									"case":	6,
									"scores":	[-5.30600981033699]
								}, {
									"case":	7,
									"scores":	[-5.30600981033699]
								}, {
									"case":	8,
									"scores":	[-5.30600981033699]
								}, {
									"case":	9,
									"scores":	[-5.30600981033699]
								}, {
									"case":	10,
									"scores":	[-5.30600981033699]
								}, {
									"case":	11,
									"scores":	[-5.30600981033699]
								}, {
									"case":	12,
									"scores":	[-5.30600981033699]
								}, {
									"case":	13,
									"scores":	[-5.30600981033699]
								}, {
									"case":	14,
									"scores":	[-5.30600981033699]
								}, {
									"case":	15,
									"scores":	[-5.30600981033699]
								}, {
									"case":	16,
									"scores":	[-5.30600981033699]
								}, {
									"case":	17,
									"scores":	[-5.30600981033699]
								}, {
									"case":	18,
									"scores":	[-5.30600981033699]
								}, {
									"case":	19,
									"scores":	[-5.30600981033699]
								}, {
									"case":	20,
									"scores":	[-5.30600981033699]
								}, {
									"case":	21,
									"scores":	[-5.30600981033699]
								}, {
									"case":	22,
									"scores":	[-5.30600981033699]
								}, {
									"case":	23,
									"scores":	[-5.30600981033699]
								}, {
									"case":	24,
									"scores":	[-5.30600981033699]
								}, {
									"case":	25,
									"scores":	[-5.30600981033699]
								}, {
									"case":	26,
									"scores":	[-5.30600981033699]
								}, {
									"case":	27,
									"scores":	[-5.30600981033699]
								}, {
									"case":	28,
									"scores":	[-5.30600981033699]
								}, {
									"case":	29,
									"scores":	[-5.30600981033699]
								}, {
									"case":	30,
									"scores":	[-5.30600981033699]
								}, {
									"case":	31,
									"scores":	[-5.30600981033699]
								}, {
									"case":	32,
									"scores":	[-5.30600981033699]
								}, {
									"case":	33,
									"scores":	[-5.30600981033699]
								}, {
									"case":	34,
									"scores":	[-5.30600981033699]
								}, {
									"case":	35,
									"scores":	[-5.30600981033699]
								}, {
									"case":	36,
									"scores":	[-5.30600981033699]
								}, {
									"case":	37,
									"scores":	[-5.30600981033699]
								}, {
									"case":	38,
									"scores":	[-5.30600981033699]
								}, {
									"case":	39,
									"scores":	[-5.30600981033699]
								}, {
									"case":	40,
									"scores":	[-5.30600981033699]
								}, {
									"case":	41,
									"scores":	[-5.30600981033699]
								}, {
									"case":	42,
									"scores":	[-5.30600981033699]
								}, {
									"case":	43,
									"scores":	[-5.30600981033699]
								}, {
									"case":	44,
									"scores":	[-5.30600981033699]
								}, {
									"case":	45,
									"scores":	[-5.30600981033699]
								}, {
									"case":	46,
									"scores":	[-5.30600981033699]
								}, {
									"case":	47,
									"scores":	[-5.30600981033699]
								}, {
									"case":	48,
									"scores":	[-5.30600981033699]
								}, {
									"case":	49,
									"scores":	[-5.30600981033699]
								}, {
									"case":	50,
									"scores":	[-5.30600981033699]
								}, {
									"case":	51,
									"scores":	[-5.30600981033699]
								}, {
									"case":	52,
									"scores":	[-5.30600981033699]
								}, {
									"case":	53,
									"scores":	[-5.30600981033699]
								}, {
									"case":	54,
									"scores":	[-5.30600981033699]
								}, {
									"case":	55,
									"scores":	[-5.30600981033699]
								}, {
									"case":	56,
									"scores":	[-5.30600981033699]
								}, {
									"case":	57,
									"scores":	[-5.30600981033699]
								}, {
									"case":	58,
									"scores":	[-5.30600981033699]
								}, {
									"case":	59,
									"scores":	[-5.30600981033699]
								}, {
									"case":	60,
									"scores":	[-5.30600981033699]
								}, {
									"case":	61,
									"scores":	[-5.30600981033699]
								}, {
									"case":	62,
									"scores":	[-5.30600981033699]
								}, {
									"case":	63,
									"scores":	[-5.30600981033699]
								}, {
									"case":	64,
									"scores":	[-5.30600981033699]
								}, {
									"case":	65,
									"scores":	[-5.30600981033699]
								}, {
									"case":	66,
									"scores":	[-5.30600981033699]
								}, {
									"case":	67,
									"scores":	[-5.30600981033699]
								}, {
									"case":	68,
									"scores":	[-5.30600981033699]
								}, {
									"case":	69,
									"scores":	[-5.30600981033699]
								}, {
									"case":	70,
									"scores":	[-5.30600981033699]
								}, {
									"case":	71,
									"scores":	[-5.30600981033699]
								}, {
									"case":	72,
									"scores":	[-5.30600981033699]
								}, {
									"case":	73,
									"scores":	[-5.30600981033699]
								}, {
									"case":	74,
									"scores":	[-5.30600981033699]
								}, {
									"case":	75,
									"scores":	[-5.30600981033699]
								}, {
									"case":	76,
									"scores":	[-5.30600981033699]
								}, {
									"case":	77,
									"scores":	[-5.30600981033699]
								}, {
									"case":	78,
									"scores":	[-5.30600981033699]
								}, {
									"case":	79,
									"scores":	[-5.30600981033699]
								}, {
									"case":	80,
									"scores":	[-5.30600981033699]
								}, {
									"case":	81,
									"scores":	[-5.30600981033699]
								}, {
									"case":	82,
									"scores":	[-5.30600981033699]
								}, {
									"case":	83,
									"scores":	[-5.30600981033699]
								}, {
									"case":	84,
									"scores":	[-5.30600981033699]
								}, {
									"case":	85,
									"scores":	[-5.30600981033699]
								}, {
									"case":	86,
									"scores":	[-5.30600981033699]
								}, {
									"case":	87,
									"scores":	[-5.30600981033699]
								}, {
									"case":	88,
									"scores":	[-5.30600981033699]
								}, {
									"case":	89,
									"scores":	[-5.30600981033699]
								}, {
									"case":	90,
									"scores":	[-5.30600981033699]
								}, {
									"case":	91,
									"scores":	[-5.30600981033699]
								}, {
									"case":	92,
									"scores":	[-5.30600981033699]
								}, {
									"case":	93,
									"scores":	[-5.30600981033699]
								}, {
									"case":	94,
									"scores":	[-5.30600981033699]
								}, {
									"case":	95,
									"scores":	[-5.30600981033699]
								}, {
									"case":	96,
									"scores":	[-5.30600981033699]
								}, {
									"case":	97,
									"scores":	[-5.30600981033699]
								}, {
									"case":	98,
									"scores":	[-5.30600981033699]
								}, {
									"case":	99,
									"scores":	[-5.30600981033699]
								}, {
									"case":	100,
									"scores":	[-5.30600981033699]
								}, {
									"case":	101,
									"scores":	[-5.30600981033699]
								}, {
									"case":	102,
									"scores":	[-5.30600981033699]
								}, {
									"case":	103,
									"scores":	[-5.30600981033699]
								}, {
									"case":	104,
									"scores":	[-5.30600981033699]
								}, {
									"case":	105,
									"scores":	[-5.30600981033699]
								}, {
									"case":	106,
									"scores":	[-5.30600981033699]
								}, {
									"case":	107,
									"scores":	[-5.30600981033699]
								}, {
									"case":	108,
									"scores":	[-5.30600981033699]
								}, {
									"case":	109,
									"scores":	[-5.30600981033699]
								}, {
									"case":	110,
									"scores":	[-5.30600981033699]
								}, {
									"case":	111,
									"scores":	[-5.30600981033699]
								}, {
									"case":	112,
									"scores":	[-5.30600981033699]
								}, {
									"case":	113,
									"scores":	[-5.30600981033699]
								}, {
									"case":	114,
									"scores":	[-5.30600981033699]
								}, {
									"case":	115,
									"scores":	[-5.30600981033699]
								}, {
									"case":	116,
									"scores":	[-5.30600981033699]
								}, {
									"case":	117,
									"scores":	[-5.30600981033699]
								}, {
									"case":	118,
									"scores":	[-5.30600981033699]
								}, {
									"case":	119,
									"scores":	[-5.30600981033699]
								}, {
									"case":	120,
									"scores":	[-5.30600981033699]
								}, {
									"case":	121,
									"scores":	[-5.30600981033699]
								}, {
									"case":	122,
									"scores":	[-5.30600981033699]
								}, {
									"case":	123,
									"scores":	[-5.30600981033699]
								}, {
									"case":	124,
									"scores":	[-5.30600981033699]
								}, {
									"case":	125,
									"scores":	[-5.30600981033699]
								}, {
									"case":	126,
									"scores":	[-5.30600981033699]
								}, {
									"case":	127,
									"scores":	[-5.30600981033699]
								}, {
									"case":	128,
									"scores":	[-5.30600981033699]
								}, {
									"case":	129,
									"scores":	[-5.30600981033699]
								}, {
									"case":	130,
									"scores":	[-5.30600981033699]
								}, {
									"case":	131,
									"scores":	[-5.30600981033699]
								}, {
									"case":	132,
									"scores":	[-5.30600981033699]
								}, {
									"case":	133,
									"scores":	[-5.30600981033699]
								}, {
									"case":	134,
									"scores":	[-5.30600981033699]
								}, {
									"case":	135,
									"scores":	[-5.30600981033699]
								}, {
									"case":	136,
									"scores":	[-5.30600981033699]
								}, {
									"case":	137,
									"scores":	[-5.30600981033699]
								}, {
									"case":	138,
									"scores":	[-5.30600981033699]
								}, {
									"case":	139,
									"scores":	[-5.30600981033699]
								}, {
									"case":	140,
									"scores":	[-5.30600981033699]
								}, {
									"case":	141,
									"scores":	[-5.30600981033699]
								}, {
									"case":	142,
									"scores":	[-5.30600981033699]
								}, {
									"case":	143,
									"scores":	[-5.30600981033699]
								}, {
									"case":	144,
									"scores":	[-5.30600981033699]
								}, {
									"case":	145,
									"scores":	[-5.30600981033699]
								}, {
									"case":	146,
									"scores":	[-5.30600981033699]
								}, {
									"case":	147,
									"scores":	[-5.30600981033699]
								}, {
									"case":	148,
									"scores":	[-5.30600981033699]
								}, {
									"case":	149,
									"scores":	[-5.30600981033699]
								}, {
									"case":	150,
									"scores":	[-5.30600981033699]
								}, {
									"case":	151,
									"scores":	[-5.30600981033699]
								}, {
									"case":	152,
									"scores":	[-5.30600981033699]
								}, {
									"case":	153,
									"scores":	[-5.30600981033699]
								}, {
									"case":	154,
									"scores":	[-5.30600981033699]
								}, {
									"case":	155,
									"scores":	[-5.30600981033699]
								}, {
									"case":	156,
									"scores":	[-5.30600981033699]
								}, {
									"case":	157,
									"scores":	[-5.30600981033699]
								}, {
									"case":	158,
									"scores":	[-5.30600981033699]
								}, {
									"case":	159,
									"scores":	[-5.30600981033699]
								}, {
									"case":	160,
									"scores":	[-5.30600981033699]
								}, {
									"case":	161,
									"scores":	[-5.30600981033699]
								}, {
									"case":	162,
									"scores":	[-5.30600981033699]
								}, {
									"case":	163,
									"scores":	[-5.30600981033699]
								}, {
									"case":	164,
									"scores":	[-5.30600981033699]
								}, {
									"case":	165,
									"scores":	[-5.30600981033699]
								}, {
									"case":	166,
									"scores":	[-5.30600981033699]
								}, {
									"case":	167,
									"scores":	[-5.30600981033699]
								}, {
									"case":	168,
									"scores":	[-5.30600981033699]
								}, {
									"case":	169,
									"scores":	[-5.30600981033699]
								}, {
									"case":	170,
									"scores":	[-5.30600981033699]
								}, {
									"case":	171,
									"scores":	[-5.30600981033699]
								}, {
									"case":	172,
									"scores":	[-5.30600981033699]
								}, {
									"case":	173,
									"scores":	[-5.30600981033699]
								}, {
									"case":	174,
									"scores":	[-5.30600981033699]
								}, {
									"case":	175,
									"scores":	[-5.30600981033699]
								}, {
									"case":	176,
									"scores":	[-5.30600981033699]
								}, {
									"case":	177,
									"scores":	[-5.30600981033699]
								}, {
									"case":	178,
									"scores":	[-5.30600981033699]
								}, {
									"case":	179,
									"scores":	[-5.30600981033699]
								}, {
									"case":	180,
									"scores":	[-5.30600981033699]
								}, {
									"case":	181,
									"scores":	[-5.30600981033699]
								}, {
									"case":	182,
									"scores":	[-5.30600981033699]
								}, {
									"case":	183,
									"scores":	[-5.30600981033699]
								}, {
									"case":	184,
									"scores":	[-5.30600981033699]
								}, {
									"case":	185,
									"scores":	[-5.30600981033699]
								}, {
									"case":	186,
									"scores":	[-5.30600981033699]
								}, {
									"case":	187,
									"scores":	[-5.30600981033699]
								}, {
									"case":	188,
									"scores":	[-5.30600981033699]
								}, {
									"case":	189,
									"scores":	[-5.30600981033699]
								}, {
									"case":	190,
									"scores":	[-5.30600981033699]
								}, {
									"case":	191,
									"scores":	[-5.30600981033699]
								}, {
									"case":	192,
									"scores":	[-5.30600981033699]
								}, {
									"case":	193,
									"scores":	[-5.30600981033699]
								}, {
									"case":	194,
									"scores":	[-5.30600981033699]
								}, {
									"case":	195,
									"scores":	[-5.30600981033699]
								}, {
									"case":	196,
									"scores":	[-5.30600981033699]
								}, {
									"case":	197,
									"scores":	[-5.30600981033699]
								}, {
									"case":	198,
									"scores":	[-5.30600981033699]
								}, {
									"case":	199,
									"scores":	[-5.30600981033699]
								}, {
									"case":	200,
									"scores":	[-10.570777413436989, -10.570777413436989, -10.967588578236988, -10.967588578236988, -10.568073413436988, -10.568073413436988]
								}, {
									"case":	201,
									"scores":	[-8.30799561343699, -8.30799561343699, -8.70480677823699, -8.70480677823699, -8.30529161343699, -8.30529161343699]
								}, {
									"case":	202,
									"scores":	[-10.570777413436989, -10.570777413436989, -10.967588578236988, -10.967588578236988, -10.568073413436988, -10.568073413436988]
								}, {
									"case":	203,
									"scores":	[-10.570777413436989, -10.570777413436989, -10.967588578236988, -10.967588578236988, -10.568073413436988, -10.568073413436988]
								}]
						}, {
							"switch":	7,
							"types":	[[52], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [3]],
							"begin_line":	580,
							"begin_column":	7,
							"end_line":	581,
							"end_column":	16,
							"patch_codes":	["if (__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if ((insize != 32768 || fill_inbuf(1) == (-1)) || __is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (insize != 32768)\n    return 1;\n", "if (insize != 32768 || __getpgid(1) == (-1))\n    return 1;\n", "if (insize != 32768 || _tolower(1) == (-1))\n    return 1;\n", "if (insize != 32768 || _toupper(1) == (-1))\n    return 1;\n", "if (insize != 32768 || abs(1) == (-1))\n    return 1;\n", "if (insize != 32768 || check_zipfile(1) == (-1))\n    return 1;\n", "if (insize != 32768 || close(1) == (-1))\n    return 1;\n", "if (insize != 32768 || dup(1) == (-1))\n    return 1;\n", "if (insize != 32768 || dysize(1) == (-1))\n    return 1;\n", "if (insize != 32768 || fchdir(1) == (-1))\n    return 1;\n", "if (insize != 32768 || fdatasync(1) == (-1))\n    return 1;\n", "if (insize != 32768 || ffs(1) == (-1))\n    return 1;\n", "if (insize != 32768 || fsync(1) == (-1))\n    return 1;\n", "if (insize != 32768 || get_method(1) == (-1))\n    return 1;\n", "if (insize != 32768 || getpgid(1) == (-1))\n    return 1;\n", "if (insize != 32768 || getsid(1) == (-1))\n    return 1;\n", "if (insize != 32768 || grantpt(1) == (-1))\n    return 1;\n", "if (insize != 32768 || gsignal(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isalnum(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isalpha(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isascii(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isatty(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isblank(1) == (-1))\n    return 1;\n", "if (insize != 32768 || iscntrl(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isdigit(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isgraph(1) == (-1))\n    return 1;\n", "if (insize != 32768 || islower(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isprint(1) == (-1))\n    return 1;\n", "if (insize != 32768 || ispunct(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isspace(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isupper(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isxdigit(1) == (-1))\n    return 1;\n", "if (insize != 32768 || nice(1) == (-1))\n    return 1;\n", "if (insize != 32768 || posix_openpt(1) == (-1))\n    return 1;\n", "if (insize != 32768 || putchar(1) == (-1))\n    return 1;\n", "if (insize != 32768 || putchar_unlocked(1) == (-1))\n    return 1;\n", "if (insize != 32768 || raise(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigblock(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sighold(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigignore(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigpause(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigrelse(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigsetmask(1) == (-1))\n    return 1;\n", "if (insize != 32768 || syncfs(1) == (-1))\n    return 1;\n", "if (insize != 32768 || tcgetpgrp(1) == (-1))\n    return 1;\n", "if (insize != 32768 || toascii(1) == (-1))\n    return 1;\n", "if (insize != 32768 || tolower(1) == (-1))\n    return 1;\n", "if (insize != 32768 || toupper(1) == (-1))\n    return 1;\n", "if (insize != 32768 || unlockpt(1) == (-1))\n    return 1;\n", "if ((insize != 32768 || fill_inbuf(1) == (-1)) && !__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.5942885054281457, -1.5942885054281457, -4.7929542124281461, -4.7929542124281461, -3.8114895054281459, -3.8114895054281459]
								}, {
									"case":	2,
									"scores":	[-0.2348989094281464, -0.2348989094281464, -3.4335646164281455, -3.4335646164281455, -2.4520999094281457, -2.4520999094281457]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-0.2348989094281464, -0.2348989094281464, -3.4335646164281455, -3.4335646164281455, -2.4520999094281457, -2.4520999094281457]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	580,
							"begin_column":	7,
							"end_line":	581,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n", "if (!__is_neg(\"\", \"L580\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)) && (insize != 32768 || fill_inbuf(1) == (-1)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.26945711033699, -4.26945711033699, -7.4681228173369885, -7.4681228173369885, -6.48665811033699, -6.48665811033699]
								}, {
									"case":	2,
									"scores":	[-2.9109368173369887, -2.9109368173369887, -6.10960252433699, -6.10960252433699, -5.12813781733699, -5.12813781733699]
								}]
						}]
				}, {
					"line":	577,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	578,
							"begin_column":	1,
							"end_line":	578,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	2,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	3,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	4,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	5,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	6,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	7,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	8,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	9,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	10,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	11,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	12,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	13,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	14,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	15,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	16,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	17,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	18,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	19,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	20,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	21,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	22,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	23,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	24,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	25,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	26,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	27,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	28,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	29,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	30,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	31,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	32,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	33,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	34,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	35,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	36,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	37,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	38,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	39,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	40,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	41,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	42,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	43,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	44,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	45,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	46,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	47,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	48,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	49,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	50,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	51,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	52,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	53,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	54,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	55,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	56,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	57,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	58,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	59,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	60,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	61,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	62,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	63,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	64,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	65,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	66,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	67,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	68,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	69,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	70,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	71,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	72,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	73,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	74,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	75,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	76,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	77,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	78,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	79,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	80,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	81,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	82,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	83,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	84,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	85,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	86,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	87,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	88,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	89,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	90,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	91,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	92,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	93,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	94,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	95,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	96,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	97,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	98,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	99,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	100,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	101,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	102,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	103,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	104,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	105,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	106,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	107,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	108,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	109,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	110,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	111,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	112,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	113,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	114,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	115,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	116,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	117,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	118,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	119,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	120,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	121,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	122,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	123,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	124,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	125,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	126,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	127,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	128,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	129,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	130,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	131,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	132,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	133,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	134,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	135,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	136,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	137,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	138,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	139,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	140,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	141,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	142,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	143,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	144,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	145,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	146,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	147,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	148,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	149,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	150,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	151,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	152,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	153,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	154,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	155,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	156,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	157,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	158,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	159,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	160,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	161,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	162,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	163,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	164,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	165,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	166,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	167,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	168,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	169,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	170,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	171,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	172,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	173,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	174,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	175,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	176,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	177,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	178,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	179,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	180,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	181,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	182,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	183,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	184,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	185,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	186,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	187,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	188,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	189,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	190,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	191,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	192,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	193,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	194,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	195,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	196,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	197,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	198,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	199,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	200,
									"scores":	[-12.785226218345832, -13.093648751045832, -12.785226218345832, -13.093648751045832, -12.782522218345832, -12.782522218345832]
								}, {
									"case":	201,
									"scores":	[-10.522444418345831, -10.830866951045831, -10.522444418345831, -10.830866951045831, -10.519740418345831, -10.519740418345831]
								}, {
									"case":	202,
									"scores":	[-12.785226218345832, -13.093648751045832, -12.785226218345832, -13.093648751045832, -12.782522218345832, -12.782522218345832]
								}, {
									"case":	203,
									"scores":	[-12.785226218345832, -13.093648751045832, -12.785226218345832, -13.093648751045832, -12.782522218345832, -12.782522218345832]
								}]
						}, {
							"switch":	5,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	578,
							"begin_column":	3,
							"end_line":	585,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member))) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n", "if ((inptr == insize) || __is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member))) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n", "if ((inptr == insize) && !__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member))) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.2998944931281455, -3.2081229661281458, -2.2998944931281455, -3.2081229661281458, -4.5170954931281457, -4.5170954931281457]
								}, {
									"case":	2,
									"scores":	[-1.7063931721281462, -2.6146216451281461, -1.7063931721281462, -2.6146216451281461, -3.923594172128146, -3.923594172128146]
								}, {
									"case":	3,
									"scores":	[-1.7063931721281462, -2.6146216451281461, -1.7063931721281462, -2.6146216451281461, -3.923594172128146, -3.923594172128146]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	578,
							"begin_column":	3,
							"end_line":	585,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    if (inptr == insize) {\n        if (insize != 32768 || fill_inbuf(1) == (-1))\n            return 1;\n        inptr = 0;\n    }\n", "if (!__is_neg(\"\", \"L578\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)) && (inptr == insize)) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1006532182458315, -7.0088816912458318, -6.1006532182458315, -7.0088816912458318, -8.31785421824583, -8.31785421824583]
								}, {
									"case":	2,
									"scores":	[-5.7124986849458317, -6.62072715794583, -5.7124986849458317, -6.62072715794583, -7.92969968494583, -7.92969968494583]
								}]
						}]
				}, {
					"line":	586,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	587,
							"begin_column":	1,
							"end_line":	587,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L587\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L587\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L587\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L587\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	2,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	3,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	4,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	5,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	6,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	7,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	8,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	9,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	10,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	11,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	12,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	13,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	14,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	15,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	16,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	17,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	18,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	19,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	20,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	21,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	22,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	23,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	24,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	25,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	26,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	27,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	28,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	29,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	30,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	31,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	32,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	33,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	34,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	35,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	36,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	37,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	38,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	39,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	40,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	41,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	42,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	43,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	44,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	45,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	46,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	47,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	48,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	49,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	50,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	51,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	52,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	53,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	54,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	55,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	56,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	57,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	58,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	59,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	60,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	61,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	62,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	63,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	64,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	65,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	66,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	67,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	68,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	69,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	70,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	71,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	72,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	73,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	74,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	75,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	76,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	77,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	78,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	79,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	80,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	81,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	82,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	83,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	84,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	85,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	86,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	87,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	88,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	89,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	90,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	91,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	92,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	93,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	94,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	95,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	96,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	97,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	98,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	99,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	100,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	101,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	102,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	103,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	104,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	105,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	106,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	107,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	108,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	109,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	110,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	111,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	112,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	113,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	114,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	115,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	116,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	117,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	118,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	119,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	120,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	121,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	122,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	123,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	124,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	125,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	126,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	127,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	128,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	129,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	130,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	131,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	132,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	133,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	134,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	135,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	136,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	137,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	138,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	139,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	140,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	141,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	142,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	143,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	144,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	145,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	146,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	147,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	148,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	149,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	150,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	151,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	152,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	153,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	154,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	155,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	156,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	157,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	158,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	159,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	160,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	161,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	162,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	163,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	164,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	165,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	166,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	167,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	168,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	169,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	170,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	171,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	172,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	173,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	174,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	175,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	176,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	177,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	178,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	179,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	180,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	181,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	182,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	183,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	184,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	185,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	186,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	187,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	188,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	189,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	190,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	191,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	192,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	193,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	194,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	195,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	196,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	197,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	198,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	199,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	200,
									"scores":	[-7.4783556447135755, -7.4783556447135755, -8.8777391567135737, -8.8777391567135737, -8.8771418785135747, -8.8771418785135747]
								}, {
									"case":	201,
									"scores":	[-5.2155738447135747, -5.2155738447135747, -6.6149573567135747, -6.6149573567135747, -6.6143600785135748, -6.6143600785135748]
								}, {
									"case":	202,
									"scores":	[-7.4783556447135755, -7.4783556447135755, -8.8777391567135737, -8.8777391567135737, -8.8771418785135747, -8.8771418785135747]
								}, {
									"case":	203,
									"scores":	[-7.4783556447135755, -7.4783556447135755, -8.8777391567135737, -8.8777391567135737, -8.8771418785135747, -8.8771418785135747]
								}]
						}, {
							"switch":	13,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	587,
							"begin_column":	3,
							"end_line":	587,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L587\", 6, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(insize), sizeof (insize), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1707155924135746, -6.1707155924135746, -5.5518416454135746, -5.5518416454135746, -5.550714169413574, -5.550714169413574]
								}]
						}]
				}, {
					"line":	594,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	595,
							"begin_column":	3,
							"end_line":	595,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L595\", 28, &(force), sizeof (force), &(list), sizeof (list), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ascii), sizeof (ascii), &(test), sizeof (test), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.114118103037768]
								}, {
									"case":	2,
									"scores":	[-6.114118103037768]
								}, {
									"case":	3,
									"scores":	[-6.114118103037768]
								}, {
									"case":	4,
									"scores":	[-6.114118103037768]
								}, {
									"case":	5,
									"scores":	[-6.114118103037768]
								}, {
									"case":	6,
									"scores":	[-6.114118103037768]
								}, {
									"case":	7,
									"scores":	[-6.114118103037768]
								}, {
									"case":	8,
									"scores":	[-6.114118103037768]
								}, {
									"case":	9,
									"scores":	[-6.114118103037768]
								}, {
									"case":	10,
									"scores":	[-6.114118103037768]
								}, {
									"case":	11,
									"scores":	[-6.114118103037768]
								}, {
									"case":	12,
									"scores":	[-6.114118103037768]
								}, {
									"case":	13,
									"scores":	[-6.114118103037768]
								}, {
									"case":	14,
									"scores":	[-6.114118103037768]
								}, {
									"case":	15,
									"scores":	[-6.114118103037768]
								}, {
									"case":	16,
									"scores":	[-6.114118103037768]
								}, {
									"case":	17,
									"scores":	[-6.114118103037768]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-9.10176010613777, -9.10176010613777, -9.08583290613777, -8.19210600613777, -8.19210600613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777, -9.10176010613777]
								}]
						}, {
							"switch":	15,
							"types":	[[79], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [], [4, 5, 6]],
							"begin_line":	595,
							"begin_column":	5,
							"end_line":	615,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L595\", 28, &(decompress), sizeof (decompress), &(force), sizeof (force), &(list), sizeof (list), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ascii), sizeof (ascii), &(test), sizeof (test), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if ((!force && !list && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) || __is_neg(\"\", \"L595\", 28, &(decompress), sizeof (decompress), &(force), sizeof (force), &(list), sizeof (list), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ascii), sizeof (ascii), &(test), sizeof (test), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (((!force && !list) || __is_neg(\"\", \"L595\", 28, &(decompress), sizeof (decompress), &(force), sizeof (force), &(list), sizeof (list), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ascii), sizeof (ascii), &(test), sizeof (test), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!list && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && __getpgid(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && _tolower(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && _toupper(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && abs(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && check_zipfile(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && close(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && dup(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && dysize(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && fchdir(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && fdatasync(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && ffs(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && fill_inbuf(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && fsync(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && get_method(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && getpgid(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && getsid(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && grantpt(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && gsignal(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isalnum(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isalpha(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isascii(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(_IO_feof((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(_IO_ferror((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(_IO_ftrylockfile((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(_IO_getc((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(_IO_peekc_locked((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(__uflow((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(__underflow((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(fclose((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(feof((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(feof_unlocked((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(ferror((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(ferror_unlocked((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(fflush((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(fflush_unlocked((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(fgetc((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(fgetc_unlocked((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(fileno_unlocked((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(fpurge((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(ftrylockfile((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(getc((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(getc_unlocked((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(getw((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(pclose((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isatty(rpl_fflush((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isblank(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && iscntrl(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isdigit(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isgraph(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && islower(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isprint(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && ispunct(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isspace(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isupper(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && isxdigit(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && nice(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && posix_openpt(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && putchar(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && putchar_unlocked(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && raise(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && sigblock(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && sighold(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && sigignore(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && sigpause(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && sigrelse(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && sigsetmask(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && syncfs(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && tcgetpgrp(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && toascii(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && tolower(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && toupper(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if (!force && !list && unlockpt(fileno((FILE *)(decompress ? stdin : stdout)))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n", "if ((!force && !list && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) && !__is_neg(\"\", \"L595\", 28, &(decompress), sizeof (decompress), &(force), sizeof (force), &(list), sizeof (list), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ascii), sizeof (ascii), &(test), sizeof (test), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2217729744281458, -5.0901039744281453, -5.0901039744281453, -4.8623253744281456, -4.8623253744281456, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453, -5.0901039744281453]
								}, {
									"case":	2,
									"scores":	[-4.2750176554281456, -5.1433486554281451, -5.1433486554281451, -4.9155700554281463, -4.9155700554281463, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451]
								}, {
									"case":	3,
									"scores":	[-4.2750176554281456, -5.1433486554281451, -5.1433486554281451, -4.9155700554281463, -4.9155700554281463, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-4.2750176554281456, -5.1433486554281451, -5.1433486554281451, -4.9155700554281463, -4.9155700554281463, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451, -5.1433486554281451]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	595,
							"begin_column":	5,
							"end_line":	615,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L595\", 28, &(force), sizeof (force), &(list), sizeof (list), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ascii), sizeof (ascii), &(test), sizeof (test), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    if (!force && !list && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) {\n        rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n        rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n        do_exit(1);\n    }\n", "if (!__is_neg(\"\", \"L595\", 28, &(force), sizeof (force), &(list), sizeof (list), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ascii), sizeof (ascii), &(test), sizeof (test), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)) && (!force && !list && isatty(fileno((FILE *)(decompress ? stdin : stdout))))) {\n    rpl_fprintf(stderr, \"%s: compressed data not %s a terminal. Use -f to force %scompression.\\n\", program_name, decompress ? \"read from\" : \"written to\", decompress ? \"de\" : \"\");\n    rpl_fprintf(stderr, \"For help, type: %s -h\\n\", program_name);\n    do_exit(1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6072451830377679, -7.6072451830377679, -6.7389141830377683, -7.3794665830377681, -7.3794665830377681, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679, -7.6072451830377679]
								}, {
									"case":	2,
									"scores":	[-8.29950073303777, -8.29950073303777, -7.431169733037768, -8.0717221330377669, -8.0717221330377669, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777, -8.29950073303777]
								}]
						}]
				}, {
					"line":	616,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	617,
							"begin_column":	3,
							"end_line":	617,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L617\", 28, &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	2,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	3,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	4,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	5,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	6,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	7,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	8,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	9,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	10,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	11,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	12,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	13,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	14,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	15,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	16,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	17,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	18,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	19,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	20,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	21,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	22,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	23,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	24,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	25,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	26,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	27,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	28,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	29,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	30,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	31,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	32,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	33,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	34,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	35,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	36,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	37,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	38,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	39,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	40,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	41,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	42,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	43,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	44,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	45,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	46,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	47,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	48,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	49,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	50,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	51,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	52,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	53,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	54,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	55,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	56,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	57,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	58,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	59,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	60,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	61,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	62,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	63,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	64,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	65,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	66,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	67,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	68,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	69,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	70,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	71,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	72,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	73,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	74,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	75,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	76,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	77,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	78,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	79,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	80,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	81,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	82,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	83,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	84,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	85,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	86,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	87,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	88,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	89,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	90,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	91,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	92,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	93,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	94,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	95,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	96,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	97,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	98,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	99,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	100,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	101,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	102,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	103,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	104,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	105,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	106,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	107,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	108,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	109,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	110,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	111,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	112,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	113,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	114,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	115,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	116,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	117,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	118,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	119,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	120,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	121,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	122,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	123,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	124,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	125,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	126,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	127,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	128,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	129,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	130,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	131,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	132,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	133,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	134,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	135,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	136,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	137,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	138,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	139,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	140,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	141,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	142,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	143,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	144,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	145,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	146,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	147,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	148,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	149,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	150,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	151,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	152,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	153,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	154,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	155,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	156,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	157,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	158,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	159,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	160,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	161,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	162,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	163,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	164,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	165,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	166,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	167,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	168,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	169,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	170,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	171,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	172,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	173,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	174,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	175,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	176,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	177,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	178,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	179,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	180,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	181,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	182,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	183,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	184,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	185,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	186,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	187,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	188,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	189,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	190,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	191,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	192,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	193,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	194,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	195,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	196,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	197,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	198,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	199,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	200,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	201,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	202,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	203,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	204,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	205,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	206,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	207,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	208,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	209,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	210,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	211,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	212,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	213,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	214,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	215,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	216,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	217,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	218,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	219,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	220,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	221,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	222,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	223,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	224,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	225,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	226,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	227,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	228,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	229,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	230,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	231,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	232,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	233,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	234,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	235,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	236,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	237,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	238,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	239,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	240,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	241,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	242,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	243,
									"scores":	[-10.153576998820249, -10.308255798820248, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.433562668520249, -10.433562668520249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249, -10.153576998820249]
								}]
						}, {
							"switch":	18,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	617,
							"begin_column":	5,
							"end_line":	619,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L617\", 28, &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    ;\n}\n", "if ((decompress || !ascii) || __is_neg(\"\", \"L617\", 28, &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    ;\n}\n", "if (decompress) {\n    ;\n}\n", "if ((decompress || !ascii) && !__is_neg(\"\", \"L617\", 28, &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7117216054281457, -4.7744868554281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -5.1366139251281462, -5.1366139251281462, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457]
								}, {
									"case":	2,
									"scores":	[-4.7117216054281457, -4.7744868554281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -5.1366139251281462, -5.1366139251281462, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-4.7117216054281457, -4.7744868554281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -5.1366139251281462, -5.1366139251281462, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457, -4.7117216054281457]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	617,
							"begin_column":	5,
							"end_line":	619,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L617\", 28, &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(test), sizeof (test), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    if (decompress || !ascii) {\n        ;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.25523747572025, -8.31800272572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.68012979542025, -8.68012979542025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025, -8.25523747572025]
								}]
						}]
				}, {
					"line":	619,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	620,
							"begin_column":	3,
							"end_line":	620,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L620\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.05350998108521]
								}, {
									"case":	2,
									"scores":	[-6.05350998108521]
								}, {
									"case":	3,
									"scores":	[-6.05350998108521]
								}, {
									"case":	4,
									"scores":	[-6.05350998108521]
								}, {
									"case":	5,
									"scores":	[-6.05350998108521]
								}, {
									"case":	6,
									"scores":	[-6.05350998108521]
								}, {
									"case":	7,
									"scores":	[-6.05350998108521]
								}, {
									"case":	8,
									"scores":	[-6.05350998108521]
								}, {
									"case":	9,
									"scores":	[-6.05350998108521]
								}, {
									"case":	10,
									"scores":	[-6.05350998108521]
								}, {
									"case":	11,
									"scores":	[-6.05350998108521]
								}, {
									"case":	12,
									"scores":	[-6.05350998108521]
								}, {
									"case":	13,
									"scores":	[-6.05350998108521]
								}, {
									"case":	14,
									"scores":	[-6.05350998108521]
								}, {
									"case":	15,
									"scores":	[-6.05350998108521]
								}, {
									"case":	16,
									"scores":	[-6.05350998108521]
								}, {
									"case":	17,
									"scores":	[-6.05350998108521]
								}, {
									"case":	18,
									"scores":	[-6.05350998108521]
								}, {
									"case":	19,
									"scores":	[-6.05350998108521]
								}, {
									"case":	20,
									"scores":	[-6.05350998108521]
								}, {
									"case":	21,
									"scores":	[-6.05350998108521]
								}, {
									"case":	22,
									"scores":	[-6.05350998108521]
								}, {
									"case":	23,
									"scores":	[-6.05350998108521]
								}, {
									"case":	24,
									"scores":	[-6.05350998108521]
								}, {
									"case":	25,
									"scores":	[-6.05350998108521]
								}, {
									"case":	26,
									"scores":	[-6.05350998108521]
								}, {
									"case":	27,
									"scores":	[-6.05350998108521]
								}, {
									"case":	28,
									"scores":	[-6.05350998108521]
								}, {
									"case":	29,
									"scores":	[-6.05350998108521]
								}, {
									"case":	30,
									"scores":	[-6.05350998108521]
								}, {
									"case":	31,
									"scores":	[-6.05350998108521]
								}, {
									"case":	32,
									"scores":	[-6.05350998108521]
								}, {
									"case":	33,
									"scores":	[-6.05350998108521]
								}, {
									"case":	34,
									"scores":	[-6.05350998108521]
								}, {
									"case":	35,
									"scores":	[-6.05350998108521]
								}, {
									"case":	36,
									"scores":	[-6.05350998108521]
								}, {
									"case":	37,
									"scores":	[-6.05350998108521]
								}, {
									"case":	38,
									"scores":	[-6.05350998108521]
								}, {
									"case":	39,
									"scores":	[-6.05350998108521]
								}, {
									"case":	40,
									"scores":	[-6.05350998108521]
								}, {
									"case":	41,
									"scores":	[-6.05350998108521]
								}, {
									"case":	42,
									"scores":	[-6.05350998108521]
								}, {
									"case":	43,
									"scores":	[-6.05350998108521]
								}, {
									"case":	44,
									"scores":	[-6.05350998108521]
								}, {
									"case":	45,
									"scores":	[-6.05350998108521]
								}, {
									"case":	46,
									"scores":	[-6.05350998108521]
								}, {
									"case":	47,
									"scores":	[-6.05350998108521]
								}, {
									"case":	48,
									"scores":	[-6.05350998108521]
								}, {
									"case":	49,
									"scores":	[-6.05350998108521]
								}, {
									"case":	50,
									"scores":	[-6.05350998108521]
								}, {
									"case":	51,
									"scores":	[-6.05350998108521]
								}, {
									"case":	52,
									"scores":	[-6.05350998108521]
								}, {
									"case":	53,
									"scores":	[-6.05350998108521]
								}, {
									"case":	54,
									"scores":	[-6.05350998108521]
								}, {
									"case":	55,
									"scores":	[-6.05350998108521]
								}, {
									"case":	56,
									"scores":	[-6.05350998108521]
								}, {
									"case":	57,
									"scores":	[-6.05350998108521]
								}, {
									"case":	58,
									"scores":	[-6.05350998108521]
								}, {
									"case":	59,
									"scores":	[-6.05350998108521]
								}, {
									"case":	60,
									"scores":	[-6.05350998108521]
								}, {
									"case":	61,
									"scores":	[-6.05350998108521]
								}, {
									"case":	62,
									"scores":	[-6.05350998108521]
								}, {
									"case":	63,
									"scores":	[-6.05350998108521]
								}, {
									"case":	64,
									"scores":	[-6.05350998108521]
								}, {
									"case":	65,
									"scores":	[-6.05350998108521]
								}, {
									"case":	66,
									"scores":	[-6.05350998108521]
								}, {
									"case":	67,
									"scores":	[-6.05350998108521]
								}, {
									"case":	68,
									"scores":	[-6.05350998108521]
								}, {
									"case":	69,
									"scores":	[-6.05350998108521]
								}, {
									"case":	70,
									"scores":	[-6.05350998108521]
								}, {
									"case":	71,
									"scores":	[-6.05350998108521]
								}, {
									"case":	72,
									"scores":	[-6.05350998108521]
								}, {
									"case":	73,
									"scores":	[-6.05350998108521]
								}, {
									"case":	74,
									"scores":	[-6.05350998108521]
								}, {
									"case":	75,
									"scores":	[-6.05350998108521]
								}, {
									"case":	76,
									"scores":	[-6.05350998108521]
								}, {
									"case":	77,
									"scores":	[-6.05350998108521]
								}, {
									"case":	78,
									"scores":	[-6.05350998108521]
								}, {
									"case":	79,
									"scores":	[-6.05350998108521]
								}, {
									"case":	80,
									"scores":	[-6.05350998108521]
								}, {
									"case":	81,
									"scores":	[-6.05350998108521]
								}, {
									"case":	82,
									"scores":	[-6.05350998108521]
								}, {
									"case":	83,
									"scores":	[-6.05350998108521]
								}, {
									"case":	84,
									"scores":	[-6.05350998108521]
								}, {
									"case":	85,
									"scores":	[-6.05350998108521]
								}, {
									"case":	86,
									"scores":	[-6.05350998108521]
								}, {
									"case":	87,
									"scores":	[-6.05350998108521]
								}, {
									"case":	88,
									"scores":	[-6.05350998108521]
								}, {
									"case":	89,
									"scores":	[-6.05350998108521]
								}, {
									"case":	90,
									"scores":	[-6.05350998108521]
								}, {
									"case":	91,
									"scores":	[-6.05350998108521]
								}, {
									"case":	92,
									"scores":	[-6.05350998108521]
								}, {
									"case":	93,
									"scores":	[-6.05350998108521]
								}, {
									"case":	94,
									"scores":	[-6.05350998108521]
								}, {
									"case":	95,
									"scores":	[-6.05350998108521]
								}, {
									"case":	96,
									"scores":	[-6.05350998108521]
								}, {
									"case":	97,
									"scores":	[-6.05350998108521]
								}, {
									"case":	98,
									"scores":	[-6.05350998108521]
								}, {
									"case":	99,
									"scores":	[-6.05350998108521]
								}, {
									"case":	100,
									"scores":	[-6.05350998108521]
								}, {
									"case":	101,
									"scores":	[-6.05350998108521]
								}, {
									"case":	102,
									"scores":	[-6.05350998108521]
								}, {
									"case":	103,
									"scores":	[-6.05350998108521]
								}, {
									"case":	104,
									"scores":	[-6.05350998108521]
								}, {
									"case":	105,
									"scores":	[-6.05350998108521]
								}, {
									"case":	106,
									"scores":	[-6.05350998108521]
								}, {
									"case":	107,
									"scores":	[-6.05350998108521]
								}, {
									"case":	108,
									"scores":	[-6.05350998108521]
								}, {
									"case":	109,
									"scores":	[-6.05350998108521]
								}, {
									"case":	110,
									"scores":	[-6.05350998108521]
								}, {
									"case":	111,
									"scores":	[-6.05350998108521]
								}, {
									"case":	112,
									"scores":	[-6.05350998108521]
								}, {
									"case":	113,
									"scores":	[-6.05350998108521]
								}, {
									"case":	114,
									"scores":	[-6.05350998108521]
								}, {
									"case":	115,
									"scores":	[-6.05350998108521]
								}, {
									"case":	116,
									"scores":	[-6.05350998108521]
								}, {
									"case":	117,
									"scores":	[-6.05350998108521]
								}, {
									"case":	118,
									"scores":	[-6.05350998108521]
								}, {
									"case":	119,
									"scores":	[-6.05350998108521]
								}, {
									"case":	120,
									"scores":	[-6.05350998108521]
								}, {
									"case":	121,
									"scores":	[-6.05350998108521]
								}, {
									"case":	122,
									"scores":	[-6.05350998108521]
								}, {
									"case":	123,
									"scores":	[-6.05350998108521]
								}, {
									"case":	124,
									"scores":	[-6.05350998108521]
								}, {
									"case":	125,
									"scores":	[-6.05350998108521]
								}, {
									"case":	126,
									"scores":	[-6.05350998108521]
								}, {
									"case":	127,
									"scores":	[-6.05350998108521]
								}, {
									"case":	128,
									"scores":	[-6.05350998108521]
								}, {
									"case":	129,
									"scores":	[-6.05350998108521]
								}, {
									"case":	130,
									"scores":	[-6.05350998108521]
								}, {
									"case":	131,
									"scores":	[-6.05350998108521]
								}, {
									"case":	132,
									"scores":	[-6.05350998108521]
								}, {
									"case":	133,
									"scores":	[-6.05350998108521]
								}, {
									"case":	134,
									"scores":	[-6.05350998108521]
								}, {
									"case":	135,
									"scores":	[-6.05350998108521]
								}, {
									"case":	136,
									"scores":	[-6.05350998108521]
								}, {
									"case":	137,
									"scores":	[-6.05350998108521]
								}, {
									"case":	138,
									"scores":	[-6.05350998108521]
								}, {
									"case":	139,
									"scores":	[-6.05350998108521]
								}, {
									"case":	140,
									"scores":	[-6.05350998108521]
								}, {
									"case":	141,
									"scores":	[-6.05350998108521]
								}, {
									"case":	142,
									"scores":	[-6.05350998108521]
								}, {
									"case":	143,
									"scores":	[-6.05350998108521]
								}, {
									"case":	144,
									"scores":	[-6.05350998108521]
								}, {
									"case":	145,
									"scores":	[-6.05350998108521]
								}, {
									"case":	146,
									"scores":	[-6.05350998108521]
								}, {
									"case":	147,
									"scores":	[-6.05350998108521]
								}, {
									"case":	148,
									"scores":	[-6.05350998108521]
								}, {
									"case":	149,
									"scores":	[-6.05350998108521]
								}, {
									"case":	150,
									"scores":	[-6.05350998108521]
								}, {
									"case":	151,
									"scores":	[-6.05350998108521]
								}, {
									"case":	152,
									"scores":	[-6.05350998108521]
								}, {
									"case":	153,
									"scores":	[-6.05350998108521]
								}, {
									"case":	154,
									"scores":	[-6.05350998108521]
								}, {
									"case":	155,
									"scores":	[-6.05350998108521]
								}, {
									"case":	156,
									"scores":	[-6.05350998108521]
								}, {
									"case":	157,
									"scores":	[-6.05350998108521]
								}, {
									"case":	158,
									"scores":	[-6.05350998108521]
								}, {
									"case":	159,
									"scores":	[-6.05350998108521]
								}, {
									"case":	160,
									"scores":	[-6.05350998108521]
								}, {
									"case":	161,
									"scores":	[-6.05350998108521]
								}, {
									"case":	162,
									"scores":	[-6.05350998108521]
								}, {
									"case":	163,
									"scores":	[-6.05350998108521]
								}, {
									"case":	164,
									"scores":	[-6.05350998108521]
								}, {
									"case":	165,
									"scores":	[-6.05350998108521]
								}, {
									"case":	166,
									"scores":	[-6.05350998108521]
								}, {
									"case":	167,
									"scores":	[-6.05350998108521]
								}, {
									"case":	168,
									"scores":	[-6.05350998108521]
								}, {
									"case":	169,
									"scores":	[-6.05350998108521]
								}, {
									"case":	170,
									"scores":	[-6.05350998108521]
								}, {
									"case":	171,
									"scores":	[-6.05350998108521]
								}, {
									"case":	172,
									"scores":	[-6.05350998108521]
								}, {
									"case":	173,
									"scores":	[-6.05350998108521]
								}, {
									"case":	174,
									"scores":	[-6.05350998108521]
								}, {
									"case":	175,
									"scores":	[-6.05350998108521]
								}, {
									"case":	176,
									"scores":	[-6.05350998108521]
								}, {
									"case":	177,
									"scores":	[-6.05350998108521]
								}, {
									"case":	178,
									"scores":	[-6.05350998108521]
								}, {
									"case":	179,
									"scores":	[-6.05350998108521]
								}, {
									"case":	180,
									"scores":	[-6.05350998108521]
								}, {
									"case":	181,
									"scores":	[-6.05350998108521]
								}, {
									"case":	182,
									"scores":	[-6.05350998108521]
								}, {
									"case":	183,
									"scores":	[-6.05350998108521]
								}, {
									"case":	184,
									"scores":	[-6.05350998108521]
								}, {
									"case":	185,
									"scores":	[-6.05350998108521]
								}, {
									"case":	186,
									"scores":	[-6.05350998108521]
								}, {
									"case":	187,
									"scores":	[-6.05350998108521]
								}, {
									"case":	188,
									"scores":	[-6.05350998108521]
								}, {
									"case":	189,
									"scores":	[-6.05350998108521]
								}, {
									"case":	190,
									"scores":	[-6.05350998108521]
								}, {
									"case":	191,
									"scores":	[-6.05350998108521]
								}, {
									"case":	192,
									"scores":	[-6.05350998108521]
								}, {
									"case":	193,
									"scores":	[-6.05350998108521]
								}, {
									"case":	194,
									"scores":	[-6.05350998108521]
								}, {
									"case":	195,
									"scores":	[-6.05350998108521]
								}, {
									"case":	196,
									"scores":	[-6.05350998108521]
								}, {
									"case":	197,
									"scores":	[-6.05350998108521]
								}, {
									"case":	198,
									"scores":	[-6.05350998108521]
								}, {
									"case":	199,
									"scores":	[-6.05350998108521]
								}, {
									"case":	200,
									"scores":	[-6.05350998108521]
								}, {
									"case":	201,
									"scores":	[-6.05350998108521]
								}, {
									"case":	202,
									"scores":	[-6.05350998108521]
								}, {
									"case":	203,
									"scores":	[-6.05350998108521]
								}, {
									"case":	204,
									"scores":	[-6.05350998108521]
								}, {
									"case":	205,
									"scores":	[-6.05350998108521]
								}, {
									"case":	206,
									"scores":	[-6.05350998108521]
								}, {
									"case":	207,
									"scores":	[-6.05350998108521]
								}, {
									"case":	208,
									"scores":	[-6.05350998108521]
								}, {
									"case":	209,
									"scores":	[-6.05350998108521]
								}, {
									"case":	210,
									"scores":	[-6.05350998108521]
								}, {
									"case":	211,
									"scores":	[-6.05350998108521]
								}, {
									"case":	212,
									"scores":	[-6.05350998108521]
								}, {
									"case":	213,
									"scores":	[-6.05350998108521]
								}, {
									"case":	214,
									"scores":	[-6.05350998108521]
								}, {
									"case":	215,
									"scores":	[-6.05350998108521]
								}, {
									"case":	216,
									"scores":	[-6.05350998108521]
								}, {
									"case":	217,
									"scores":	[-6.05350998108521]
								}, {
									"case":	218,
									"scores":	[-6.05350998108521]
								}, {
									"case":	219,
									"scores":	[-6.05350998108521]
								}, {
									"case":	220,
									"scores":	[-6.05350998108521]
								}, {
									"case":	221,
									"scores":	[-6.05350998108521]
								}, {
									"case":	222,
									"scores":	[-6.05350998108521]
								}, {
									"case":	223,
									"scores":	[-6.05350998108521]
								}, {
									"case":	224,
									"scores":	[-6.05350998108521]
								}, {
									"case":	225,
									"scores":	[-6.05350998108521]
								}, {
									"case":	226,
									"scores":	[-6.05350998108521]
								}, {
									"case":	227,
									"scores":	[-6.05350998108521]
								}, {
									"case":	228,
									"scores":	[-6.05350998108521]
								}, {
									"case":	229,
									"scores":	[-6.05350998108521]
								}, {
									"case":	230,
									"scores":	[-6.05350998108521]
								}, {
									"case":	231,
									"scores":	[-6.05350998108521]
								}, {
									"case":	232,
									"scores":	[-6.05350998108521]
								}, {
									"case":	233,
									"scores":	[-6.05350998108521]
								}, {
									"case":	234,
									"scores":	[-6.05350998108521]
								}, {
									"case":	235,
									"scores":	[-6.05350998108521]
								}, {
									"case":	236,
									"scores":	[-6.05350998108521]
								}, {
									"case":	237,
									"scores":	[-6.05350998108521]
								}, {
									"case":	238,
									"scores":	[-6.05350998108521]
								}, {
									"case":	239,
									"scores":	[-6.05350998108521]
								}, {
									"case":	240,
									"scores":	[-6.05350998108521]
								}, {
									"case":	241,
									"scores":	[-6.05350998108521]
								}, {
									"case":	242,
									"scores":	[-6.05350998108521]
								}, {
									"case":	243,
									"scores":	[-10.11317158418521, -10.11317158418521, -10.267850384185209, -10.11317158418521, -10.11317158418521, -10.39315725388521, -10.39315725388521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521, -10.11317158418521]
								}]
						}, {
							"switch":	21,
							"types":	[[8], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4, 5, 6, 7]],
							"begin_line":	620,
							"begin_column":	5,
							"end_line":	622,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L620\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    ;\n}\n", "if ((!test && !list && (!decompress || !ascii)) || __is_neg(\"\", \"L620\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    ;\n}\n", "if (((!test && !list) || __is_neg(\"\", \"L620\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) && (!decompress || !ascii)) {\n    ;\n}\n", "if (!list && (!decompress || !ascii)) {\n    ;\n}\n", "if (!test && !list) {\n    ;\n}\n", "if (!test && (!decompress || !ascii)) {\n    ;\n}\n", "if ((!test && !list && !decompress) || !ascii) {\n    ;\n}\n", "if ((!test && !list && (!decompress || !ascii)) && !__is_neg(\"\", \"L620\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9364636054281457, -4.9364636054281457, -4.9992288554281457, -4.9364636054281457, -4.9364636054281457, -5.3613559251281462, -5.3613559251281462, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457]
								}, {
									"case":	2,
									"scores":	[-4.9364636054281457, -4.9364636054281457, -4.9992288554281457, -4.9364636054281457, -4.9364636054281457, -5.3613559251281462, -5.3613559251281462, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457]
								}, {
									"case":	3,
									"scores":	[-4.9364636054281457, -4.9364636054281457, -4.9992288554281457, -4.9364636054281457, -4.9364636054281457, -5.3613559251281462, -5.3613559251281462, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-4.9364636054281457, -4.9364636054281457, -4.9992288554281457, -4.9364636054281457, -4.9364636054281457, -5.3613559251281462, -5.3613559251281462, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457, -4.9364636054281457]
								}]
						}, {
							"switch":	22,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	620,
							"begin_column":	5,
							"end_line":	622,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L620\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    if (!test && !list && (!decompress || !ascii)) {\n        ;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.13514756108521, -8.13514756108521, -8.19791281108521, -8.13514756108521, -8.13514756108521, -8.56003988078521, -8.56003988078521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521, -8.13514756108521]
								}]
						}]
				}, {
					"line":	622,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	623,
							"begin_column":	3,
							"end_line":	623,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L623\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.01310456645017]
								}, {
									"case":	2,
									"scores":	[-6.01310456645017]
								}, {
									"case":	3,
									"scores":	[-6.01310456645017]
								}, {
									"case":	4,
									"scores":	[-6.01310456645017]
								}, {
									"case":	5,
									"scores":	[-6.01310456645017]
								}, {
									"case":	6,
									"scores":	[-6.01310456645017]
								}, {
									"case":	7,
									"scores":	[-6.01310456645017]
								}, {
									"case":	8,
									"scores":	[-6.01310456645017]
								}, {
									"case":	9,
									"scores":	[-6.01310456645017]
								}, {
									"case":	10,
									"scores":	[-6.01310456645017]
								}, {
									"case":	11,
									"scores":	[-6.01310456645017]
								}, {
									"case":	12,
									"scores":	[-6.01310456645017]
								}, {
									"case":	13,
									"scores":	[-6.01310456645017]
								}, {
									"case":	14,
									"scores":	[-6.01310456645017]
								}, {
									"case":	15,
									"scores":	[-6.01310456645017]
								}, {
									"case":	16,
									"scores":	[-6.01310456645017]
								}, {
									"case":	17,
									"scores":	[-6.01310456645017]
								}, {
									"case":	18,
									"scores":	[-6.01310456645017]
								}, {
									"case":	19,
									"scores":	[-6.01310456645017]
								}, {
									"case":	20,
									"scores":	[-6.01310456645017]
								}, {
									"case":	21,
									"scores":	[-6.01310456645017]
								}, {
									"case":	22,
									"scores":	[-6.01310456645017]
								}, {
									"case":	23,
									"scores":	[-6.01310456645017]
								}, {
									"case":	24,
									"scores":	[-6.01310456645017]
								}, {
									"case":	25,
									"scores":	[-6.01310456645017]
								}, {
									"case":	26,
									"scores":	[-6.01310456645017]
								}, {
									"case":	27,
									"scores":	[-6.01310456645017]
								}, {
									"case":	28,
									"scores":	[-6.01310456645017]
								}, {
									"case":	29,
									"scores":	[-6.01310456645017]
								}, {
									"case":	30,
									"scores":	[-6.01310456645017]
								}, {
									"case":	31,
									"scores":	[-6.01310456645017]
								}, {
									"case":	32,
									"scores":	[-6.01310456645017]
								}, {
									"case":	33,
									"scores":	[-6.01310456645017]
								}, {
									"case":	34,
									"scores":	[-6.01310456645017]
								}, {
									"case":	35,
									"scores":	[-6.01310456645017]
								}, {
									"case":	36,
									"scores":	[-6.01310456645017]
								}, {
									"case":	37,
									"scores":	[-6.01310456645017]
								}, {
									"case":	38,
									"scores":	[-6.01310456645017]
								}, {
									"case":	39,
									"scores":	[-6.01310456645017]
								}, {
									"case":	40,
									"scores":	[-6.01310456645017]
								}, {
									"case":	41,
									"scores":	[-6.01310456645017]
								}, {
									"case":	42,
									"scores":	[-6.01310456645017]
								}, {
									"case":	43,
									"scores":	[-6.01310456645017]
								}, {
									"case":	44,
									"scores":	[-6.01310456645017]
								}, {
									"case":	45,
									"scores":	[-6.01310456645017]
								}, {
									"case":	46,
									"scores":	[-6.01310456645017]
								}, {
									"case":	47,
									"scores":	[-6.01310456645017]
								}, {
									"case":	48,
									"scores":	[-6.01310456645017]
								}, {
									"case":	49,
									"scores":	[-6.01310456645017]
								}, {
									"case":	50,
									"scores":	[-6.01310456645017]
								}, {
									"case":	51,
									"scores":	[-6.01310456645017]
								}, {
									"case":	52,
									"scores":	[-6.01310456645017]
								}, {
									"case":	53,
									"scores":	[-6.01310456645017]
								}, {
									"case":	54,
									"scores":	[-6.01310456645017]
								}, {
									"case":	55,
									"scores":	[-6.01310456645017]
								}, {
									"case":	56,
									"scores":	[-6.01310456645017]
								}, {
									"case":	57,
									"scores":	[-6.01310456645017]
								}, {
									"case":	58,
									"scores":	[-6.01310456645017]
								}, {
									"case":	59,
									"scores":	[-6.01310456645017]
								}, {
									"case":	60,
									"scores":	[-6.01310456645017]
								}, {
									"case":	61,
									"scores":	[-6.01310456645017]
								}, {
									"case":	62,
									"scores":	[-6.01310456645017]
								}, {
									"case":	63,
									"scores":	[-6.01310456645017]
								}, {
									"case":	64,
									"scores":	[-6.01310456645017]
								}, {
									"case":	65,
									"scores":	[-6.01310456645017]
								}, {
									"case":	66,
									"scores":	[-6.01310456645017]
								}, {
									"case":	67,
									"scores":	[-6.01310456645017]
								}, {
									"case":	68,
									"scores":	[-6.01310456645017]
								}, {
									"case":	69,
									"scores":	[-6.01310456645017]
								}, {
									"case":	70,
									"scores":	[-6.01310456645017]
								}, {
									"case":	71,
									"scores":	[-6.01310456645017]
								}, {
									"case":	72,
									"scores":	[-6.01310456645017]
								}, {
									"case":	73,
									"scores":	[-6.01310456645017]
								}, {
									"case":	74,
									"scores":	[-6.01310456645017]
								}, {
									"case":	75,
									"scores":	[-6.01310456645017]
								}, {
									"case":	76,
									"scores":	[-6.01310456645017]
								}, {
									"case":	77,
									"scores":	[-6.01310456645017]
								}, {
									"case":	78,
									"scores":	[-6.01310456645017]
								}, {
									"case":	79,
									"scores":	[-6.01310456645017]
								}, {
									"case":	80,
									"scores":	[-6.01310456645017]
								}, {
									"case":	81,
									"scores":	[-6.01310456645017]
								}, {
									"case":	82,
									"scores":	[-6.01310456645017]
								}, {
									"case":	83,
									"scores":	[-6.01310456645017]
								}, {
									"case":	84,
									"scores":	[-6.01310456645017]
								}, {
									"case":	85,
									"scores":	[-6.01310456645017]
								}, {
									"case":	86,
									"scores":	[-6.01310456645017]
								}, {
									"case":	87,
									"scores":	[-6.01310456645017]
								}, {
									"case":	88,
									"scores":	[-6.01310456645017]
								}, {
									"case":	89,
									"scores":	[-6.01310456645017]
								}, {
									"case":	90,
									"scores":	[-6.01310456645017]
								}, {
									"case":	91,
									"scores":	[-6.01310456645017]
								}, {
									"case":	92,
									"scores":	[-6.01310456645017]
								}, {
									"case":	93,
									"scores":	[-6.01310456645017]
								}, {
									"case":	94,
									"scores":	[-6.01310456645017]
								}, {
									"case":	95,
									"scores":	[-6.01310456645017]
								}, {
									"case":	96,
									"scores":	[-6.01310456645017]
								}, {
									"case":	97,
									"scores":	[-6.01310456645017]
								}, {
									"case":	98,
									"scores":	[-6.01310456645017]
								}, {
									"case":	99,
									"scores":	[-6.01310456645017]
								}, {
									"case":	100,
									"scores":	[-6.01310456645017]
								}, {
									"case":	101,
									"scores":	[-6.01310456645017]
								}, {
									"case":	102,
									"scores":	[-6.01310456645017]
								}, {
									"case":	103,
									"scores":	[-6.01310456645017]
								}, {
									"case":	104,
									"scores":	[-6.01310456645017]
								}, {
									"case":	105,
									"scores":	[-6.01310456645017]
								}, {
									"case":	106,
									"scores":	[-6.01310456645017]
								}, {
									"case":	107,
									"scores":	[-6.01310456645017]
								}, {
									"case":	108,
									"scores":	[-6.01310456645017]
								}, {
									"case":	109,
									"scores":	[-6.01310456645017]
								}, {
									"case":	110,
									"scores":	[-6.01310456645017]
								}, {
									"case":	111,
									"scores":	[-6.01310456645017]
								}, {
									"case":	112,
									"scores":	[-6.01310456645017]
								}, {
									"case":	113,
									"scores":	[-6.01310456645017]
								}, {
									"case":	114,
									"scores":	[-6.01310456645017]
								}, {
									"case":	115,
									"scores":	[-6.01310456645017]
								}, {
									"case":	116,
									"scores":	[-6.01310456645017]
								}, {
									"case":	117,
									"scores":	[-6.01310456645017]
								}, {
									"case":	118,
									"scores":	[-6.01310456645017]
								}, {
									"case":	119,
									"scores":	[-6.01310456645017]
								}, {
									"case":	120,
									"scores":	[-6.01310456645017]
								}, {
									"case":	121,
									"scores":	[-6.01310456645017]
								}, {
									"case":	122,
									"scores":	[-6.01310456645017]
								}, {
									"case":	123,
									"scores":	[-6.01310456645017]
								}, {
									"case":	124,
									"scores":	[-6.01310456645017]
								}, {
									"case":	125,
									"scores":	[-6.01310456645017]
								}, {
									"case":	126,
									"scores":	[-6.01310456645017]
								}, {
									"case":	127,
									"scores":	[-6.01310456645017]
								}, {
									"case":	128,
									"scores":	[-6.01310456645017]
								}, {
									"case":	129,
									"scores":	[-6.01310456645017]
								}, {
									"case":	130,
									"scores":	[-6.01310456645017]
								}, {
									"case":	131,
									"scores":	[-6.01310456645017]
								}, {
									"case":	132,
									"scores":	[-6.01310456645017]
								}, {
									"case":	133,
									"scores":	[-6.01310456645017]
								}, {
									"case":	134,
									"scores":	[-6.01310456645017]
								}, {
									"case":	135,
									"scores":	[-6.01310456645017]
								}, {
									"case":	136,
									"scores":	[-6.01310456645017]
								}, {
									"case":	137,
									"scores":	[-6.01310456645017]
								}, {
									"case":	138,
									"scores":	[-6.01310456645017]
								}, {
									"case":	139,
									"scores":	[-6.01310456645017]
								}, {
									"case":	140,
									"scores":	[-6.01310456645017]
								}, {
									"case":	141,
									"scores":	[-6.01310456645017]
								}, {
									"case":	142,
									"scores":	[-6.01310456645017]
								}, {
									"case":	143,
									"scores":	[-6.01310456645017]
								}, {
									"case":	144,
									"scores":	[-6.01310456645017]
								}, {
									"case":	145,
									"scores":	[-6.01310456645017]
								}, {
									"case":	146,
									"scores":	[-6.01310456645017]
								}, {
									"case":	147,
									"scores":	[-6.01310456645017]
								}, {
									"case":	148,
									"scores":	[-6.01310456645017]
								}, {
									"case":	149,
									"scores":	[-6.01310456645017]
								}, {
									"case":	150,
									"scores":	[-6.01310456645017]
								}, {
									"case":	151,
									"scores":	[-6.01310456645017]
								}, {
									"case":	152,
									"scores":	[-6.01310456645017]
								}, {
									"case":	153,
									"scores":	[-6.01310456645017]
								}, {
									"case":	154,
									"scores":	[-6.01310456645017]
								}, {
									"case":	155,
									"scores":	[-6.01310456645017]
								}, {
									"case":	156,
									"scores":	[-6.01310456645017]
								}, {
									"case":	157,
									"scores":	[-6.01310456645017]
								}, {
									"case":	158,
									"scores":	[-6.01310456645017]
								}, {
									"case":	159,
									"scores":	[-6.01310456645017]
								}, {
									"case":	160,
									"scores":	[-6.01310456645017]
								}, {
									"case":	161,
									"scores":	[-6.01310456645017]
								}, {
									"case":	162,
									"scores":	[-6.01310456645017]
								}, {
									"case":	163,
									"scores":	[-6.01310456645017]
								}, {
									"case":	164,
									"scores":	[-6.01310456645017]
								}, {
									"case":	165,
									"scores":	[-6.01310456645017]
								}, {
									"case":	166,
									"scores":	[-6.01310456645017]
								}, {
									"case":	167,
									"scores":	[-6.01310456645017]
								}, {
									"case":	168,
									"scores":	[-6.01310456645017]
								}, {
									"case":	169,
									"scores":	[-6.01310456645017]
								}, {
									"case":	170,
									"scores":	[-6.01310456645017]
								}, {
									"case":	171,
									"scores":	[-6.01310456645017]
								}, {
									"case":	172,
									"scores":	[-6.01310456645017]
								}, {
									"case":	173,
									"scores":	[-6.01310456645017]
								}, {
									"case":	174,
									"scores":	[-6.01310456645017]
								}, {
									"case":	175,
									"scores":	[-6.01310456645017]
								}, {
									"case":	176,
									"scores":	[-6.01310456645017]
								}, {
									"case":	177,
									"scores":	[-6.01310456645017]
								}, {
									"case":	178,
									"scores":	[-6.01310456645017]
								}, {
									"case":	179,
									"scores":	[-6.01310456645017]
								}, {
									"case":	180,
									"scores":	[-6.01310456645017]
								}, {
									"case":	181,
									"scores":	[-6.01310456645017]
								}, {
									"case":	182,
									"scores":	[-6.01310456645017]
								}, {
									"case":	183,
									"scores":	[-6.01310456645017]
								}, {
									"case":	184,
									"scores":	[-6.01310456645017]
								}, {
									"case":	185,
									"scores":	[-6.01310456645017]
								}, {
									"case":	186,
									"scores":	[-6.01310456645017]
								}, {
									"case":	187,
									"scores":	[-6.01310456645017]
								}, {
									"case":	188,
									"scores":	[-6.01310456645017]
								}, {
									"case":	189,
									"scores":	[-6.01310456645017]
								}, {
									"case":	190,
									"scores":	[-6.01310456645017]
								}, {
									"case":	191,
									"scores":	[-6.01310456645017]
								}, {
									"case":	192,
									"scores":	[-6.01310456645017]
								}, {
									"case":	193,
									"scores":	[-6.01310456645017]
								}, {
									"case":	194,
									"scores":	[-6.01310456645017]
								}, {
									"case":	195,
									"scores":	[-6.01310456645017]
								}, {
									"case":	196,
									"scores":	[-6.01310456645017]
								}, {
									"case":	197,
									"scores":	[-6.01310456645017]
								}, {
									"case":	198,
									"scores":	[-6.01310456645017]
								}, {
									"case":	199,
									"scores":	[-6.01310456645017]
								}, {
									"case":	200,
									"scores":	[-6.01310456645017]
								}, {
									"case":	201,
									"scores":	[-6.01310456645017]
								}, {
									"case":	202,
									"scores":	[-6.01310456645017]
								}, {
									"case":	203,
									"scores":	[-6.01310456645017]
								}, {
									"case":	204,
									"scores":	[-6.01310456645017]
								}, {
									"case":	205,
									"scores":	[-6.01310456645017]
								}, {
									"case":	206,
									"scores":	[-6.01310456645017]
								}, {
									"case":	207,
									"scores":	[-6.01310456645017]
								}, {
									"case":	208,
									"scores":	[-6.01310456645017]
								}, {
									"case":	209,
									"scores":	[-6.01310456645017]
								}, {
									"case":	210,
									"scores":	[-6.01310456645017]
								}, {
									"case":	211,
									"scores":	[-6.01310456645017]
								}, {
									"case":	212,
									"scores":	[-6.01310456645017]
								}, {
									"case":	213,
									"scores":	[-6.01310456645017]
								}, {
									"case":	214,
									"scores":	[-6.01310456645017]
								}, {
									"case":	215,
									"scores":	[-6.01310456645017]
								}, {
									"case":	216,
									"scores":	[-6.01310456645017]
								}, {
									"case":	217,
									"scores":	[-6.01310456645017]
								}, {
									"case":	218,
									"scores":	[-6.01310456645017]
								}, {
									"case":	219,
									"scores":	[-6.01310456645017]
								}, {
									"case":	220,
									"scores":	[-6.01310456645017]
								}, {
									"case":	221,
									"scores":	[-6.01310456645017]
								}, {
									"case":	222,
									"scores":	[-6.01310456645017]
								}, {
									"case":	223,
									"scores":	[-6.01310456645017]
								}, {
									"case":	224,
									"scores":	[-6.01310456645017]
								}, {
									"case":	225,
									"scores":	[-6.01310456645017]
								}, {
									"case":	226,
									"scores":	[-6.01310456645017]
								}, {
									"case":	227,
									"scores":	[-6.01310456645017]
								}, {
									"case":	228,
									"scores":	[-6.01310456645017]
								}, {
									"case":	229,
									"scores":	[-6.01310456645017]
								}, {
									"case":	230,
									"scores":	[-6.01310456645017]
								}, {
									"case":	231,
									"scores":	[-6.01310456645017]
								}, {
									"case":	232,
									"scores":	[-6.01310456645017]
								}, {
									"case":	233,
									"scores":	[-6.01310456645017]
								}, {
									"case":	234,
									"scores":	[-6.01310456645017]
								}, {
									"case":	235,
									"scores":	[-6.01310456645017]
								}, {
									"case":	236,
									"scores":	[-6.01310456645017]
								}, {
									"case":	237,
									"scores":	[-6.01310456645017]
								}, {
									"case":	238,
									"scores":	[-6.01310456645017]
								}, {
									"case":	239,
									"scores":	[-6.01310456645017]
								}, {
									"case":	240,
									"scores":	[-6.01310456645017]
								}, {
									"case":	241,
									"scores":	[-6.01310456645017]
								}, {
									"case":	242,
									"scores":	[-6.01310456645017]
								}, {
									"case":	243,
									"scores":	[-9.77822428955017, -9.77822428955017, -9.93290308955017, -9.77822428955017, -9.77822428955017, -10.07233930955017, -10.07233930955017, -10.058209959250171, -10.058209959250171, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017, -9.77822428955017]
								}]
						}, {
							"switch":	24,
							"types":	[[], [], [1], [], [], [], [177, 178], [], [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], [], [], [139]],
							"begin_line":	623,
							"begin_column":	5,
							"end_line":	623,
							"end_column":	27,
							"patch_codes":	["if (!__is_neg(\"\", \"L623\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(no_time), sizeof (no_time), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    strcpy(ifname, \"stdin\");\n", "_IO_vfprintf(ifname, \"stdin\", 0)", "__stpncpy(ifname, \"stdin\", -1)", "__stpncpy(ifname, \"stdin\", 0)", "__stpncpy(ifname, \"stdin\", 1)", "__stpncpy(ifname, \"stdin\", 32768)", "__stpncpy(ifname, \"stdin\", 61440)", "__stpncpy(ifname, \"stdin\", z_len)", "__strtok_r(ifname, \"stdin\", 0)", "__trident_output(ifname, \"stdin\", -1)", "__trident_output(ifname, \"stdin\", 0)", "__trident_output(ifname, \"stdin\", 1)", "__trident_output(ifname, \"stdin\", 32768)", "__trident_output(ifname, \"stdin\", 61440)", "__trident_output(ifname, \"stdin\", _gl_warn_on_use)", "__trident_output(ifname, \"stdin\", ascii)", "__trident_output(ifname, \"stdin\", block_mode)", "__trident_output(ifname, \"stdin\", decompress)", "__trident_output(ifname, \"stdin\", decrypt)", "__trident_output(ifname, \"stdin\", do_lzw)", "__trident_output(ifname, \"stdin\", exit_code)", "__trident_output(ifname, \"stdin\", exiting_signal)", "__trident_output(ifname, \"stdin\", force)", "__trident_output(ifname, \"stdin\", foreground)", "__trident_output(ifname, \"stdin\", ifd)", "__trident_output(ifname, \"stdin\", last_member)", "__trident_output(ifname, \"stdin\", level)", "__trident_output(ifname, \"stdin\", list)", "__trident_output(ifname, \"stdin\", maxbits)", "__trident_output(ifname, \"stdin\", method)", "__trident_output(ifname, \"stdin\", no_name)", "__trident_output(ifname, \"stdin\", no_time)", "__trident_output(ifname, \"stdin\", ofd)", "__trident_output(ifname, \"stdin\", part_nb)", "__trident_output(ifname, \"stdin\", quiet)", "__trident_output(ifname, \"stdin\", recursive)", "__trident_output(ifname, \"stdin\", remove_ofname_fd)", "__trident_output(ifname, \"stdin\", save_orig_name)", "__trident_output(ifname, \"stdin\", test)", "__trident_output(ifname, \"stdin\", to_stdout)", "__trident_output(ifname, \"stdin\", verbose)", "freopen(ifname, \"stdin\", 0)", "freopen64(ifname, \"stdin\", 0)", "mbstowcs(ifname, \"stdin\", -1)", "mbstowcs(ifname, \"stdin\", 0)", "mbstowcs(ifname, \"stdin\", 1)", "mbstowcs(ifname, \"stdin\", 32768)", "mbstowcs(ifname, \"stdin\", 61440)", "mbstowcs(ifname, \"stdin\", z_len)", "mbtowc(ifname, \"stdin\", -1)", "mbtowc(ifname, \"stdin\", 0)", "mbtowc(ifname, \"stdin\", 1)", "mbtowc(ifname, \"stdin\", 32768)", "mbtowc(ifname, \"stdin\", 61440)", "mbtowc(ifname, \"stdin\", z_len)", "obstack_vprintf(ifname, \"stdin\", 0)", "rpl_vfprintf(ifname, \"stdin\", 0)", "setenv(ifname, \"stdin\", -1)", "setenv(ifname, \"stdin\", 0)", "setenv(ifname, \"stdin\", 1)", "setenv(ifname, \"stdin\", 32768)", "setenv(ifname, \"stdin\", 61440)", "setenv(ifname, \"stdin\", _gl_warn_on_use)", "setenv(ifname, \"stdin\", ascii)", "setenv(ifname, \"stdin\", block_mode)", "setenv(ifname, \"stdin\", decompress)", "setenv(ifname, \"stdin\", decrypt)", "setenv(ifname, \"stdin\", do_lzw)", "setenv(ifname, \"stdin\", exit_code)", "setenv(ifname, \"stdin\", exiting_signal)", "setenv(ifname, \"stdin\", force)", "setenv(ifname, \"stdin\", foreground)", "setenv(ifname, \"stdin\", ifd)", "setenv(ifname, \"stdin\", last_member)", "setenv(ifname, \"stdin\", level)", "setenv(ifname, \"stdin\", list)", "setenv(ifname, \"stdin\", maxbits)", "setenv(ifname, \"stdin\", method)", "setenv(ifname, \"stdin\", no_name)", "setenv(ifname, \"stdin\", no_time)", "setenv(ifname, \"stdin\", ofd)", "setenv(ifname, \"stdin\", part_nb)", "setenv(ifname, \"stdin\", quiet)", "setenv(ifname, \"stdin\", recursive)", "setenv(ifname, \"stdin\", remove_ofname_fd)", "setenv(ifname, \"stdin\", save_orig_name)", "setenv(ifname, \"stdin\", test)", "setenv(ifname, \"stdin\", to_stdout)", "setenv(ifname, \"stdin\", verbose)", "stpncpy(ifname, \"stdin\", -1)", "stpncpy(ifname, \"stdin\", 0)", "stpncpy(ifname, \"stdin\", 1)", "stpncpy(ifname, \"stdin\", 32768)", "stpncpy(ifname, \"stdin\", 61440)", "stpncpy(ifname, \"stdin\", z_len)", "strcasecmp_l(ifname, \"stdin\", 0)", "strcoll_l(ifname, \"stdin\", 0)", "strncasecmp(ifname, \"stdin\", -1)", "strncasecmp(ifname, \"stdin\", 0)", "strncasecmp(ifname, \"stdin\", 1)", "strncasecmp(ifname, \"stdin\", 32768)", "strncasecmp(ifname, \"stdin\", 61440)", "strncasecmp(ifname, \"stdin\", z_len)", "strncat(ifname, \"stdin\", -1)", "strncat(ifname, \"stdin\", 0)", "strncat(ifname, \"stdin\", 1)", "strncat(ifname, \"stdin\", 32768)", "strncat(ifname, \"stdin\", 61440)", "strncat(ifname, \"stdin\", z_len)", "strncmp(ifname, \"stdin\", -1)", "strncmp(ifname, \"stdin\", 0)", "strncmp(ifname, \"stdin\", 1)", "strncmp(ifname, \"stdin\", 32768)", "strncmp(ifname, \"stdin\", 61440)", "strncmp(ifname, \"stdin\", z_len)", "strncpy(ifname, \"stdin\", -1)", "strncpy(ifname, \"stdin\", 0)", "strncpy(ifname, \"stdin\", 1)", "strncpy(ifname, \"stdin\", 32768)", "strncpy(ifname, \"stdin\", 61440)", "strncpy(ifname, \"stdin\", z_len)", "strptime(ifname, \"stdin\", 0)", "strtok_r(ifname, \"stdin\", 0)", "strxfrm(ifname, \"stdin\", -1)", "strxfrm(ifname, \"stdin\", 0)", "strxfrm(ifname, \"stdin\", 1)", "strxfrm(ifname, \"stdin\", 32768)", "strxfrm(ifname, \"stdin\", 61440)", "strxfrm(ifname, \"stdin\", z_len)", "vasprintf(ifname, \"stdin\", 0)", "vfprintf(ifname, \"stdin\", 0)", "vsprintf(ifname, \"stdin\", 0)", "wcstombs(ifname, \"stdin\", -1)", "wcstombs(ifname, \"stdin\", 0)", "wcstombs(ifname, \"stdin\", 1)", "wcstombs(ifname, \"stdin\", 32768)", "wcstombs(ifname, \"stdin\", 61440)", "wcstombs(ifname, \"stdin\", z_len)", "{\n}\n", "__asprintf(ifname, \"stdin\")", "__printf__(ifname, \"stdin\")", "__stpcpy(ifname, \"stdin\")", "asprintf(ifname, \"stdin\")", "crypt(ifname, \"stdin\")", "execl(ifname, \"stdin\")", "execle(ifname, \"stdin\")", "execlp(ifname, \"stdin\")", "fopen(ifname, \"stdin\")", "fopen64(ifname, \"stdin\")", "fprintf(ifname, \"stdin\")", "link(ifname, \"stdin\")", "obstack_printf(ifname, \"stdin\")", "open_input_file(ifname, \"stdin\")", "popen(ifname, \"stdin\")", "printf(ifname, \"stdin\")", "psiginfo(ifname, \"stdin\")", "rename(ifname, \"stdin\")", "rpl_fprintf(ifname, \"stdin\")", "setstate_r(ifname, \"stdin\")", "sprintf(ifname, \"stdin\")", "stpcpy(ifname, \"stdin\")", "strcasecmp(ifname, \"stdin\")", "strcasestr(ifname, \"stdin\")", "strcat(ifname, \"stdin\")", "strcmp(ifname, \"stdin\")", "strcoll(ifname, \"stdin\")", "strcpy(ifname, \"stdin\")", "strcspn(ifname, \"stdin\")", "strpbrk(ifname, \"stdin\")", "strsep(ifname, \"stdin\")", "strspn(ifname, \"stdin\")", "strstr(ifname, \"stdin\")", "strtok(ifname, \"stdin\")", "strverscmp(ifname, \"stdin\")", "symlink(ifname, \"stdin\")", "tempnam(ifname, \"stdin\")", "strcpy(ifname, \"stdin or the directory does not exist\")", "strcpy(ifname, (0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.93353414645017, -6.93353414645017, -6.99629939645017, -6.93353414645017, -6.93353414645017, -6.90008586445017, -6.90008586445017, -7.35842646615017, -7.35842646615017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017, -6.93353414645017]
								}, {
									"case":	2,
									"scores":	[-6.01310456645017]
								}, {
									"case":	3,
									"scores":	[-6.01310456645017]
								}, {
									"case":	4,
									"scores":	[-6.01310456645017]
								}, {
									"case":	5,
									"scores":	[-6.01310456645017]
								}, {
									"case":	6,
									"scores":	[-6.01310456645017]
								}, {
									"case":	7,
									"scores":	[-6.01310456645017]
								}, {
									"case":	8,
									"scores":	[-6.01310456645017]
								}, {
									"case":	9,
									"scores":	[-6.01310456645017]
								}, {
									"case":	10,
									"scores":	[-6.01310456645017]
								}, {
									"case":	11,
									"scores":	[-6.01310456645017]
								}, {
									"case":	12,
									"scores":	[-6.01310456645017]
								}, {
									"case":	13,
									"scores":	[-6.01310456645017]
								}, {
									"case":	14,
									"scores":	[-6.01310456645017]
								}, {
									"case":	15,
									"scores":	[-6.01310456645017]
								}, {
									"case":	16,
									"scores":	[-6.01310456645017]
								}, {
									"case":	17,
									"scores":	[-6.01310456645017]
								}, {
									"case":	18,
									"scores":	[-6.01310456645017]
								}, {
									"case":	19,
									"scores":	[-6.01310456645017]
								}, {
									"case":	20,
									"scores":	[-6.01310456645017]
								}, {
									"case":	21,
									"scores":	[-6.01310456645017]
								}, {
									"case":	22,
									"scores":	[-6.01310456645017]
								}, {
									"case":	23,
									"scores":	[-6.01310456645017]
								}, {
									"case":	24,
									"scores":	[-6.01310456645017]
								}, {
									"case":	25,
									"scores":	[-6.01310456645017]
								}, {
									"case":	26,
									"scores":	[-6.01310456645017]
								}, {
									"case":	27,
									"scores":	[-6.01310456645017]
								}, {
									"case":	28,
									"scores":	[-6.01310456645017]
								}, {
									"case":	29,
									"scores":	[-6.01310456645017]
								}, {
									"case":	30,
									"scores":	[-6.01310456645017]
								}, {
									"case":	31,
									"scores":	[-6.01310456645017]
								}, {
									"case":	32,
									"scores":	[-6.01310456645017]
								}, {
									"case":	33,
									"scores":	[-6.01310456645017]
								}, {
									"case":	34,
									"scores":	[-6.01310456645017]
								}, {
									"case":	35,
									"scores":	[-6.01310456645017]
								}, {
									"case":	36,
									"scores":	[-6.01310456645017]
								}, {
									"case":	37,
									"scores":	[-6.01310456645017]
								}, {
									"case":	38,
									"scores":	[-6.01310456645017]
								}, {
									"case":	39,
									"scores":	[-6.01310456645017]
								}, {
									"case":	40,
									"scores":	[-6.01310456645017]
								}, {
									"case":	41,
									"scores":	[-6.01310456645017]
								}, {
									"case":	42,
									"scores":	[-6.01310456645017]
								}, {
									"case":	43,
									"scores":	[-6.01310456645017]
								}, {
									"case":	44,
									"scores":	[-6.01310456645017]
								}, {
									"case":	45,
									"scores":	[-6.01310456645017]
								}, {
									"case":	46,
									"scores":	[-6.01310456645017]
								}, {
									"case":	47,
									"scores":	[-6.01310456645017]
								}, {
									"case":	48,
									"scores":	[-6.01310456645017]
								}, {
									"case":	49,
									"scores":	[-6.01310456645017]
								}, {
									"case":	50,
									"scores":	[-6.01310456645017]
								}, {
									"case":	51,
									"scores":	[-6.01310456645017]
								}, {
									"case":	52,
									"scores":	[-6.01310456645017]
								}, {
									"case":	53,
									"scores":	[-6.01310456645017]
								}, {
									"case":	54,
									"scores":	[-6.01310456645017]
								}, {
									"case":	55,
									"scores":	[-6.01310456645017]
								}, {
									"case":	56,
									"scores":	[-6.01310456645017]
								}, {
									"case":	57,
									"scores":	[-6.01310456645017]
								}, {
									"case":	58,
									"scores":	[-6.01310456645017]
								}, {
									"case":	59,
									"scores":	[-6.01310456645017]
								}, {
									"case":	60,
									"scores":	[-6.01310456645017]
								}, {
									"case":	61,
									"scores":	[-6.01310456645017]
								}, {
									"case":	62,
									"scores":	[-6.01310456645017]
								}, {
									"case":	63,
									"scores":	[-6.01310456645017]
								}, {
									"case":	64,
									"scores":	[-6.01310456645017]
								}, {
									"case":	65,
									"scores":	[-6.01310456645017]
								}, {
									"case":	66,
									"scores":	[-6.01310456645017]
								}, {
									"case":	67,
									"scores":	[-6.01310456645017]
								}, {
									"case":	68,
									"scores":	[-6.01310456645017]
								}, {
									"case":	69,
									"scores":	[-6.01310456645017]
								}, {
									"case":	70,
									"scores":	[-6.01310456645017]
								}, {
									"case":	71,
									"scores":	[-6.01310456645017]
								}, {
									"case":	72,
									"scores":	[-6.01310456645017]
								}, {
									"case":	73,
									"scores":	[-6.01310456645017]
								}, {
									"case":	74,
									"scores":	[-6.01310456645017]
								}, {
									"case":	75,
									"scores":	[-6.01310456645017]
								}, {
									"case":	76,
									"scores":	[-6.01310456645017]
								}, {
									"case":	77,
									"scores":	[-6.01310456645017]
								}, {
									"case":	78,
									"scores":	[-6.01310456645017]
								}, {
									"case":	79,
									"scores":	[-6.01310456645017]
								}, {
									"case":	80,
									"scores":	[-6.01310456645017]
								}, {
									"case":	81,
									"scores":	[-6.01310456645017]
								}, {
									"case":	82,
									"scores":	[-6.01310456645017]
								}, {
									"case":	83,
									"scores":	[-6.01310456645017]
								}, {
									"case":	84,
									"scores":	[-6.01310456645017]
								}, {
									"case":	85,
									"scores":	[-6.01310456645017]
								}, {
									"case":	86,
									"scores":	[-6.01310456645017]
								}, {
									"case":	87,
									"scores":	[-6.01310456645017]
								}, {
									"case":	88,
									"scores":	[-6.01310456645017]
								}, {
									"case":	89,
									"scores":	[-6.01310456645017]
								}, {
									"case":	90,
									"scores":	[-6.01310456645017]
								}, {
									"case":	91,
									"scores":	[-6.01310456645017]
								}, {
									"case":	92,
									"scores":	[-6.01310456645017]
								}, {
									"case":	93,
									"scores":	[-6.01310456645017]
								}, {
									"case":	94,
									"scores":	[-6.01310456645017]
								}, {
									"case":	95,
									"scores":	[-6.01310456645017]
								}, {
									"case":	96,
									"scores":	[-6.01310456645017]
								}, {
									"case":	97,
									"scores":	[-6.01310456645017]
								}, {
									"case":	98,
									"scores":	[-6.01310456645017]
								}, {
									"case":	99,
									"scores":	[-6.01310456645017]
								}, {
									"case":	100,
									"scores":	[-6.01310456645017]
								}, {
									"case":	101,
									"scores":	[-6.01310456645017]
								}, {
									"case":	102,
									"scores":	[-6.01310456645017]
								}, {
									"case":	103,
									"scores":	[-6.01310456645017]
								}, {
									"case":	104,
									"scores":	[-6.01310456645017]
								}, {
									"case":	105,
									"scores":	[-6.01310456645017]
								}, {
									"case":	106,
									"scores":	[-6.01310456645017]
								}, {
									"case":	107,
									"scores":	[-6.01310456645017]
								}, {
									"case":	108,
									"scores":	[-6.01310456645017]
								}, {
									"case":	109,
									"scores":	[-6.01310456645017]
								}, {
									"case":	110,
									"scores":	[-6.01310456645017]
								}, {
									"case":	111,
									"scores":	[-6.01310456645017]
								}, {
									"case":	112,
									"scores":	[-6.01310456645017]
								}, {
									"case":	113,
									"scores":	[-6.01310456645017]
								}, {
									"case":	114,
									"scores":	[-6.01310456645017]
								}, {
									"case":	115,
									"scores":	[-6.01310456645017]
								}, {
									"case":	116,
									"scores":	[-6.01310456645017]
								}, {
									"case":	117,
									"scores":	[-6.01310456645017]
								}, {
									"case":	118,
									"scores":	[-6.01310456645017]
								}, {
									"case":	119,
									"scores":	[-6.01310456645017]
								}, {
									"case":	120,
									"scores":	[-6.01310456645017]
								}, {
									"case":	121,
									"scores":	[-6.01310456645017]
								}, {
									"case":	122,
									"scores":	[-6.01310456645017]
								}, {
									"case":	123,
									"scores":	[-6.01310456645017]
								}, {
									"case":	124,
									"scores":	[-6.01310456645017]
								}, {
									"case":	125,
									"scores":	[-6.01310456645017]
								}, {
									"case":	126,
									"scores":	[-6.01310456645017]
								}, {
									"case":	127,
									"scores":	[-6.01310456645017]
								}, {
									"case":	128,
									"scores":	[-6.01310456645017]
								}, {
									"case":	129,
									"scores":	[-6.01310456645017]
								}, {
									"case":	130,
									"scores":	[-6.01310456645017]
								}, {
									"case":	131,
									"scores":	[-6.01310456645017]
								}, {
									"case":	132,
									"scores":	[-6.01310456645017]
								}, {
									"case":	133,
									"scores":	[-6.01310456645017]
								}, {
									"case":	134,
									"scores":	[-6.01310456645017]
								}, {
									"case":	135,
									"scores":	[-6.01310456645017]
								}, {
									"case":	136,
									"scores":	[-6.01310456645017]
								}, {
									"case":	137,
									"scores":	[-6.01310456645017]
								}, {
									"case":	138,
									"scores":	[-6.01310456645017]
								}, {
									"case":	139,
									"scores":	[-6.01310456645017]
								}, {
									"case":	140,
									"scores":	[-6.01310456645017]
								}, {
									"case":	141,
									"scores":	[-6.01310456645017]
								}, {
									"case":	142,
									"scores":	[-6.01310456645017]
								}, {
									"case":	143,
									"scores":	[-6.01310456645017]
								}, {
									"case":	144,
									"scores":	[-6.01310456645017]
								}, {
									"case":	145,
									"scores":	[-6.01310456645017]
								}, {
									"case":	146,
									"scores":	[-6.01310456645017]
								}, {
									"case":	147,
									"scores":	[-6.01310456645017]
								}, {
									"case":	148,
									"scores":	[-6.01310456645017]
								}, {
									"case":	149,
									"scores":	[-6.01310456645017]
								}, {
									"case":	150,
									"scores":	[-6.01310456645017]
								}, {
									"case":	151,
									"scores":	[-6.01310456645017]
								}, {
									"case":	152,
									"scores":	[-6.01310456645017]
								}, {
									"case":	153,
									"scores":	[-6.01310456645017]
								}, {
									"case":	154,
									"scores":	[-6.01310456645017]
								}, {
									"case":	155,
									"scores":	[-6.01310456645017]
								}, {
									"case":	156,
									"scores":	[-6.01310456645017]
								}, {
									"case":	157,
									"scores":	[-6.01310456645017]
								}, {
									"case":	158,
									"scores":	[-6.01310456645017]
								}, {
									"case":	159,
									"scores":	[-6.01310456645017]
								}, {
									"case":	160,
									"scores":	[-6.01310456645017]
								}, {
									"case":	161,
									"scores":	[-6.01310456645017]
								}, {
									"case":	162,
									"scores":	[-6.01310456645017]
								}, {
									"case":	163,
									"scores":	[-6.01310456645017]
								}, {
									"case":	164,
									"scores":	[-6.01310456645017]
								}, {
									"case":	165,
									"scores":	[-6.01310456645017]
								}, {
									"case":	166,
									"scores":	[-6.01310456645017]
								}, {
									"case":	167,
									"scores":	[-6.01310456645017]
								}, {
									"case":	168,
									"scores":	[-6.01310456645017]
								}, {
									"case":	169,
									"scores":	[-6.01310456645017]
								}, {
									"case":	170,
									"scores":	[-6.01310456645017]
								}, {
									"case":	171,
									"scores":	[-6.01310456645017]
								}, {
									"case":	172,
									"scores":	[-6.01310456645017]
								}, {
									"case":	173,
									"scores":	[-6.01310456645017]
								}, {
									"case":	174,
									"scores":	[-6.01310456645017]
								}, {
									"case":	175,
									"scores":	[-6.01310456645017]
								}, {
									"case":	176,
									"scores":	[-6.01310456645017]
								}, {
									"case":	177,
									"scores":	[-6.01310456645017]
								}, {
									"case":	178,
									"scores":	[-6.01310456645017]
								}]
						}]
				}, {
					"line":	623,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	624,
							"begin_column":	3,
							"end_line":	624,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L624\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.99290185913265]
								}, {
									"case":	2,
									"scores":	[-5.99290185913265]
								}, {
									"case":	3,
									"scores":	[-5.99290185913265]
								}, {
									"case":	4,
									"scores":	[-5.99290185913265]
								}, {
									"case":	5,
									"scores":	[-5.99290185913265]
								}, {
									"case":	6,
									"scores":	[-5.99290185913265]
								}, {
									"case":	7,
									"scores":	[-5.99290185913265]
								}, {
									"case":	8,
									"scores":	[-5.99290185913265]
								}, {
									"case":	9,
									"scores":	[-5.99290185913265]
								}, {
									"case":	10,
									"scores":	[-5.99290185913265]
								}, {
									"case":	11,
									"scores":	[-5.99290185913265]
								}, {
									"case":	12,
									"scores":	[-5.99290185913265]
								}, {
									"case":	13,
									"scores":	[-5.99290185913265]
								}, {
									"case":	14,
									"scores":	[-5.99290185913265]
								}, {
									"case":	15,
									"scores":	[-5.99290185913265]
								}, {
									"case":	16,
									"scores":	[-5.99290185913265]
								}, {
									"case":	17,
									"scores":	[-5.99290185913265]
								}, {
									"case":	18,
									"scores":	[-5.99290185913265]
								}, {
									"case":	19,
									"scores":	[-5.99290185913265]
								}, {
									"case":	20,
									"scores":	[-5.99290185913265]
								}, {
									"case":	21,
									"scores":	[-5.99290185913265]
								}, {
									"case":	22,
									"scores":	[-5.99290185913265]
								}, {
									"case":	23,
									"scores":	[-5.99290185913265]
								}, {
									"case":	24,
									"scores":	[-5.99290185913265]
								}, {
									"case":	25,
									"scores":	[-5.99290185913265]
								}, {
									"case":	26,
									"scores":	[-5.99290185913265]
								}, {
									"case":	27,
									"scores":	[-5.99290185913265]
								}, {
									"case":	28,
									"scores":	[-5.99290185913265]
								}, {
									"case":	29,
									"scores":	[-5.99290185913265]
								}, {
									"case":	30,
									"scores":	[-5.99290185913265]
								}, {
									"case":	31,
									"scores":	[-5.99290185913265]
								}, {
									"case":	32,
									"scores":	[-5.99290185913265]
								}, {
									"case":	33,
									"scores":	[-5.99290185913265]
								}, {
									"case":	34,
									"scores":	[-5.99290185913265]
								}, {
									"case":	35,
									"scores":	[-5.99290185913265]
								}, {
									"case":	36,
									"scores":	[-5.99290185913265]
								}, {
									"case":	37,
									"scores":	[-5.99290185913265]
								}, {
									"case":	38,
									"scores":	[-5.99290185913265]
								}, {
									"case":	39,
									"scores":	[-5.99290185913265]
								}, {
									"case":	40,
									"scores":	[-5.99290185913265]
								}, {
									"case":	41,
									"scores":	[-5.99290185913265]
								}, {
									"case":	42,
									"scores":	[-5.99290185913265]
								}, {
									"case":	43,
									"scores":	[-5.99290185913265]
								}, {
									"case":	44,
									"scores":	[-5.99290185913265]
								}, {
									"case":	45,
									"scores":	[-5.99290185913265]
								}, {
									"case":	46,
									"scores":	[-5.99290185913265]
								}, {
									"case":	47,
									"scores":	[-5.99290185913265]
								}, {
									"case":	48,
									"scores":	[-5.99290185913265]
								}, {
									"case":	49,
									"scores":	[-5.99290185913265]
								}, {
									"case":	50,
									"scores":	[-5.99290185913265]
								}, {
									"case":	51,
									"scores":	[-5.99290185913265]
								}, {
									"case":	52,
									"scores":	[-5.99290185913265]
								}, {
									"case":	53,
									"scores":	[-5.99290185913265]
								}, {
									"case":	54,
									"scores":	[-5.99290185913265]
								}, {
									"case":	55,
									"scores":	[-5.99290185913265]
								}, {
									"case":	56,
									"scores":	[-5.99290185913265]
								}, {
									"case":	57,
									"scores":	[-5.99290185913265]
								}, {
									"case":	58,
									"scores":	[-5.99290185913265]
								}, {
									"case":	59,
									"scores":	[-5.99290185913265]
								}, {
									"case":	60,
									"scores":	[-5.99290185913265]
								}, {
									"case":	61,
									"scores":	[-5.99290185913265]
								}, {
									"case":	62,
									"scores":	[-5.99290185913265]
								}, {
									"case":	63,
									"scores":	[-5.99290185913265]
								}, {
									"case":	64,
									"scores":	[-5.99290185913265]
								}, {
									"case":	65,
									"scores":	[-5.99290185913265]
								}, {
									"case":	66,
									"scores":	[-5.99290185913265]
								}, {
									"case":	67,
									"scores":	[-5.99290185913265]
								}, {
									"case":	68,
									"scores":	[-5.99290185913265]
								}, {
									"case":	69,
									"scores":	[-5.99290185913265]
								}, {
									"case":	70,
									"scores":	[-5.99290185913265]
								}, {
									"case":	71,
									"scores":	[-5.99290185913265]
								}, {
									"case":	72,
									"scores":	[-5.99290185913265]
								}, {
									"case":	73,
									"scores":	[-5.99290185913265]
								}, {
									"case":	74,
									"scores":	[-5.99290185913265]
								}, {
									"case":	75,
									"scores":	[-5.99290185913265]
								}, {
									"case":	76,
									"scores":	[-5.99290185913265]
								}, {
									"case":	77,
									"scores":	[-5.99290185913265]
								}, {
									"case":	78,
									"scores":	[-5.99290185913265]
								}, {
									"case":	79,
									"scores":	[-5.99290185913265]
								}, {
									"case":	80,
									"scores":	[-5.99290185913265]
								}, {
									"case":	81,
									"scores":	[-5.99290185913265]
								}, {
									"case":	82,
									"scores":	[-5.99290185913265]
								}, {
									"case":	83,
									"scores":	[-5.99290185913265]
								}, {
									"case":	84,
									"scores":	[-5.99290185913265]
								}, {
									"case":	85,
									"scores":	[-5.99290185913265]
								}, {
									"case":	86,
									"scores":	[-5.99290185913265]
								}, {
									"case":	87,
									"scores":	[-5.99290185913265]
								}, {
									"case":	88,
									"scores":	[-5.99290185913265]
								}, {
									"case":	89,
									"scores":	[-5.99290185913265]
								}, {
									"case":	90,
									"scores":	[-5.99290185913265]
								}, {
									"case":	91,
									"scores":	[-5.99290185913265]
								}, {
									"case":	92,
									"scores":	[-5.99290185913265]
								}, {
									"case":	93,
									"scores":	[-5.99290185913265]
								}, {
									"case":	94,
									"scores":	[-5.99290185913265]
								}, {
									"case":	95,
									"scores":	[-5.99290185913265]
								}, {
									"case":	96,
									"scores":	[-5.99290185913265]
								}, {
									"case":	97,
									"scores":	[-5.99290185913265]
								}, {
									"case":	98,
									"scores":	[-5.99290185913265]
								}, {
									"case":	99,
									"scores":	[-5.99290185913265]
								}, {
									"case":	100,
									"scores":	[-5.99290185913265]
								}, {
									"case":	101,
									"scores":	[-5.99290185913265]
								}, {
									"case":	102,
									"scores":	[-5.99290185913265]
								}, {
									"case":	103,
									"scores":	[-5.99290185913265]
								}, {
									"case":	104,
									"scores":	[-5.99290185913265]
								}, {
									"case":	105,
									"scores":	[-5.99290185913265]
								}, {
									"case":	106,
									"scores":	[-5.99290185913265]
								}, {
									"case":	107,
									"scores":	[-5.99290185913265]
								}, {
									"case":	108,
									"scores":	[-5.99290185913265]
								}, {
									"case":	109,
									"scores":	[-5.99290185913265]
								}, {
									"case":	110,
									"scores":	[-5.99290185913265]
								}, {
									"case":	111,
									"scores":	[-5.99290185913265]
								}, {
									"case":	112,
									"scores":	[-5.99290185913265]
								}, {
									"case":	113,
									"scores":	[-5.99290185913265]
								}, {
									"case":	114,
									"scores":	[-5.99290185913265]
								}, {
									"case":	115,
									"scores":	[-5.99290185913265]
								}, {
									"case":	116,
									"scores":	[-5.99290185913265]
								}, {
									"case":	117,
									"scores":	[-5.99290185913265]
								}, {
									"case":	118,
									"scores":	[-5.99290185913265]
								}, {
									"case":	119,
									"scores":	[-5.99290185913265]
								}, {
									"case":	120,
									"scores":	[-5.99290185913265]
								}, {
									"case":	121,
									"scores":	[-5.99290185913265]
								}, {
									"case":	122,
									"scores":	[-5.99290185913265]
								}, {
									"case":	123,
									"scores":	[-5.99290185913265]
								}, {
									"case":	124,
									"scores":	[-5.99290185913265]
								}, {
									"case":	125,
									"scores":	[-5.99290185913265]
								}, {
									"case":	126,
									"scores":	[-5.99290185913265]
								}, {
									"case":	127,
									"scores":	[-5.99290185913265]
								}, {
									"case":	128,
									"scores":	[-5.99290185913265]
								}, {
									"case":	129,
									"scores":	[-5.99290185913265]
								}, {
									"case":	130,
									"scores":	[-5.99290185913265]
								}, {
									"case":	131,
									"scores":	[-5.99290185913265]
								}, {
									"case":	132,
									"scores":	[-5.99290185913265]
								}, {
									"case":	133,
									"scores":	[-5.99290185913265]
								}, {
									"case":	134,
									"scores":	[-5.99290185913265]
								}, {
									"case":	135,
									"scores":	[-5.99290185913265]
								}, {
									"case":	136,
									"scores":	[-5.99290185913265]
								}, {
									"case":	137,
									"scores":	[-5.99290185913265]
								}, {
									"case":	138,
									"scores":	[-5.99290185913265]
								}, {
									"case":	139,
									"scores":	[-5.99290185913265]
								}, {
									"case":	140,
									"scores":	[-5.99290185913265]
								}, {
									"case":	141,
									"scores":	[-5.99290185913265]
								}, {
									"case":	142,
									"scores":	[-5.99290185913265]
								}, {
									"case":	143,
									"scores":	[-5.99290185913265]
								}, {
									"case":	144,
									"scores":	[-5.99290185913265]
								}, {
									"case":	145,
									"scores":	[-5.99290185913265]
								}, {
									"case":	146,
									"scores":	[-5.99290185913265]
								}, {
									"case":	147,
									"scores":	[-5.99290185913265]
								}, {
									"case":	148,
									"scores":	[-5.99290185913265]
								}, {
									"case":	149,
									"scores":	[-5.99290185913265]
								}, {
									"case":	150,
									"scores":	[-5.99290185913265]
								}, {
									"case":	151,
									"scores":	[-5.99290185913265]
								}, {
									"case":	152,
									"scores":	[-5.99290185913265]
								}, {
									"case":	153,
									"scores":	[-5.99290185913265]
								}, {
									"case":	154,
									"scores":	[-5.99290185913265]
								}, {
									"case":	155,
									"scores":	[-5.99290185913265]
								}, {
									"case":	156,
									"scores":	[-5.99290185913265]
								}, {
									"case":	157,
									"scores":	[-5.99290185913265]
								}, {
									"case":	158,
									"scores":	[-5.99290185913265]
								}, {
									"case":	159,
									"scores":	[-5.99290185913265]
								}, {
									"case":	160,
									"scores":	[-5.99290185913265]
								}, {
									"case":	161,
									"scores":	[-5.99290185913265]
								}, {
									"case":	162,
									"scores":	[-5.99290185913265]
								}, {
									"case":	163,
									"scores":	[-5.99290185913265]
								}, {
									"case":	164,
									"scores":	[-5.99290185913265]
								}, {
									"case":	165,
									"scores":	[-5.99290185913265]
								}, {
									"case":	166,
									"scores":	[-5.99290185913265]
								}, {
									"case":	167,
									"scores":	[-5.99290185913265]
								}, {
									"case":	168,
									"scores":	[-5.99290185913265]
								}, {
									"case":	169,
									"scores":	[-5.99290185913265]
								}, {
									"case":	170,
									"scores":	[-5.99290185913265]
								}, {
									"case":	171,
									"scores":	[-5.99290185913265]
								}, {
									"case":	172,
									"scores":	[-5.99290185913265]
								}, {
									"case":	173,
									"scores":	[-5.99290185913265]
								}, {
									"case":	174,
									"scores":	[-5.99290185913265]
								}, {
									"case":	175,
									"scores":	[-5.99290185913265]
								}, {
									"case":	176,
									"scores":	[-5.99290185913265]
								}, {
									"case":	177,
									"scores":	[-5.99290185913265]
								}, {
									"case":	178,
									"scores":	[-5.99290185913265]
								}, {
									"case":	179,
									"scores":	[-5.99290185913265]
								}, {
									"case":	180,
									"scores":	[-5.99290185913265]
								}, {
									"case":	181,
									"scores":	[-5.99290185913265]
								}, {
									"case":	182,
									"scores":	[-5.99290185913265]
								}, {
									"case":	183,
									"scores":	[-5.99290185913265]
								}, {
									"case":	184,
									"scores":	[-5.99290185913265]
								}, {
									"case":	185,
									"scores":	[-5.99290185913265]
								}, {
									"case":	186,
									"scores":	[-5.99290185913265]
								}, {
									"case":	187,
									"scores":	[-5.99290185913265]
								}, {
									"case":	188,
									"scores":	[-5.99290185913265]
								}, {
									"case":	189,
									"scores":	[-5.99290185913265]
								}, {
									"case":	190,
									"scores":	[-5.99290185913265]
								}, {
									"case":	191,
									"scores":	[-5.99290185913265]
								}, {
									"case":	192,
									"scores":	[-5.99290185913265]
								}, {
									"case":	193,
									"scores":	[-5.99290185913265]
								}, {
									"case":	194,
									"scores":	[-5.99290185913265]
								}, {
									"case":	195,
									"scores":	[-5.99290185913265]
								}, {
									"case":	196,
									"scores":	[-5.99290185913265]
								}, {
									"case":	197,
									"scores":	[-5.99290185913265]
								}, {
									"case":	198,
									"scores":	[-5.99290185913265]
								}, {
									"case":	199,
									"scores":	[-5.99290185913265]
								}, {
									"case":	200,
									"scores":	[-5.99290185913265]
								}, {
									"case":	201,
									"scores":	[-5.99290185913265]
								}, {
									"case":	202,
									"scores":	[-5.99290185913265]
								}, {
									"case":	203,
									"scores":	[-5.99290185913265]
								}, {
									"case":	204,
									"scores":	[-5.99290185913265]
								}, {
									"case":	205,
									"scores":	[-5.99290185913265]
								}, {
									"case":	206,
									"scores":	[-5.99290185913265]
								}, {
									"case":	207,
									"scores":	[-5.99290185913265]
								}, {
									"case":	208,
									"scores":	[-5.99290185913265]
								}, {
									"case":	209,
									"scores":	[-5.99290185913265]
								}, {
									"case":	210,
									"scores":	[-5.99290185913265]
								}, {
									"case":	211,
									"scores":	[-5.99290185913265]
								}, {
									"case":	212,
									"scores":	[-5.99290185913265]
								}, {
									"case":	213,
									"scores":	[-5.99290185913265]
								}, {
									"case":	214,
									"scores":	[-5.99290185913265]
								}, {
									"case":	215,
									"scores":	[-5.99290185913265]
								}, {
									"case":	216,
									"scores":	[-5.99290185913265]
								}, {
									"case":	217,
									"scores":	[-5.99290185913265]
								}, {
									"case":	218,
									"scores":	[-5.99290185913265]
								}, {
									"case":	219,
									"scores":	[-5.99290185913265]
								}, {
									"case":	220,
									"scores":	[-5.99290185913265]
								}, {
									"case":	221,
									"scores":	[-5.99290185913265]
								}, {
									"case":	222,
									"scores":	[-5.99290185913265]
								}, {
									"case":	223,
									"scores":	[-5.99290185913265]
								}, {
									"case":	224,
									"scores":	[-5.99290185913265]
								}, {
									"case":	225,
									"scores":	[-5.99290185913265]
								}, {
									"case":	226,
									"scores":	[-5.99290185913265]
								}, {
									"case":	227,
									"scores":	[-5.99290185913265]
								}, {
									"case":	228,
									"scores":	[-5.99290185913265]
								}, {
									"case":	229,
									"scores":	[-5.99290185913265]
								}, {
									"case":	230,
									"scores":	[-5.99290185913265]
								}, {
									"case":	231,
									"scores":	[-5.99290185913265]
								}, {
									"case":	232,
									"scores":	[-5.99290185913265]
								}, {
									"case":	233,
									"scores":	[-5.99290185913265]
								}, {
									"case":	234,
									"scores":	[-5.99290185913265]
								}, {
									"case":	235,
									"scores":	[-5.99290185913265]
								}, {
									"case":	236,
									"scores":	[-5.99290185913265]
								}, {
									"case":	237,
									"scores":	[-5.99290185913265]
								}, {
									"case":	238,
									"scores":	[-5.99290185913265]
								}, {
									"case":	239,
									"scores":	[-5.99290185913265]
								}, {
									"case":	240,
									"scores":	[-5.99290185913265]
								}, {
									"case":	241,
									"scores":	[-5.99290185913265]
								}, {
									"case":	242,
									"scores":	[-5.99290185913265]
								}, {
									"case":	243,
									"scores":	[-9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -10.05925260223265, -10.05925260223265, -9.76513758223265, -9.85456028223265, -9.85456028223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265, -9.76513758223265]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [], [], [], [177, 178], [], [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], [], [], [139]],
							"begin_line":	624,
							"begin_column":	5,
							"end_line":	624,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L624\", 28, &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(list), sizeof (list), &(test), sizeof (test), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    strcpy(ofname, \"stdout\");\n", "_IO_vfprintf(ofname, \"stdout\", 0)", "__stpncpy(ofname, \"stdout\", -1)", "__stpncpy(ofname, \"stdout\", 0)", "__stpncpy(ofname, \"stdout\", 1)", "__stpncpy(ofname, \"stdout\", 32768)", "__stpncpy(ofname, \"stdout\", 61440)", "__stpncpy(ofname, \"stdout\", z_len)", "__strtok_r(ofname, \"stdout\", 0)", "__trident_output(ofname, \"stdout\", -1)", "__trident_output(ofname, \"stdout\", 0)", "__trident_output(ofname, \"stdout\", 1)", "__trident_output(ofname, \"stdout\", 32768)", "__trident_output(ofname, \"stdout\", 61440)", "__trident_output(ofname, \"stdout\", _gl_warn_on_use)", "__trident_output(ofname, \"stdout\", ascii)", "__trident_output(ofname, \"stdout\", block_mode)", "__trident_output(ofname, \"stdout\", decompress)", "__trident_output(ofname, \"stdout\", decrypt)", "__trident_output(ofname, \"stdout\", do_lzw)", "__trident_output(ofname, \"stdout\", exit_code)", "__trident_output(ofname, \"stdout\", exiting_signal)", "__trident_output(ofname, \"stdout\", force)", "__trident_output(ofname, \"stdout\", foreground)", "__trident_output(ofname, \"stdout\", ifd)", "__trident_output(ofname, \"stdout\", last_member)", "__trident_output(ofname, \"stdout\", level)", "__trident_output(ofname, \"stdout\", list)", "__trident_output(ofname, \"stdout\", maxbits)", "__trident_output(ofname, \"stdout\", method)", "__trident_output(ofname, \"stdout\", no_name)", "__trident_output(ofname, \"stdout\", no_time)", "__trident_output(ofname, \"stdout\", ofd)", "__trident_output(ofname, \"stdout\", part_nb)", "__trident_output(ofname, \"stdout\", quiet)", "__trident_output(ofname, \"stdout\", recursive)", "__trident_output(ofname, \"stdout\", remove_ofname_fd)", "__trident_output(ofname, \"stdout\", save_orig_name)", "__trident_output(ofname, \"stdout\", test)", "__trident_output(ofname, \"stdout\", to_stdout)", "__trident_output(ofname, \"stdout\", verbose)", "freopen(ofname, \"stdout\", 0)", "freopen64(ofname, \"stdout\", 0)", "mbstowcs(ofname, \"stdout\", -1)", "mbstowcs(ofname, \"stdout\", 0)", "mbstowcs(ofname, \"stdout\", 1)", "mbstowcs(ofname, \"stdout\", 32768)", "mbstowcs(ofname, \"stdout\", 61440)", "mbstowcs(ofname, \"stdout\", z_len)", "mbtowc(ofname, \"stdout\", -1)", "mbtowc(ofname, \"stdout\", 0)", "mbtowc(ofname, \"stdout\", 1)", "mbtowc(ofname, \"stdout\", 32768)", "mbtowc(ofname, \"stdout\", 61440)", "mbtowc(ofname, \"stdout\", z_len)", "obstack_vprintf(ofname, \"stdout\", 0)", "rpl_vfprintf(ofname, \"stdout\", 0)", "setenv(ofname, \"stdout\", -1)", "setenv(ofname, \"stdout\", 0)", "setenv(ofname, \"stdout\", 1)", "setenv(ofname, \"stdout\", 32768)", "setenv(ofname, \"stdout\", 61440)", "setenv(ofname, \"stdout\", _gl_warn_on_use)", "setenv(ofname, \"stdout\", ascii)", "setenv(ofname, \"stdout\", block_mode)", "setenv(ofname, \"stdout\", decompress)", "setenv(ofname, \"stdout\", decrypt)", "setenv(ofname, \"stdout\", do_lzw)", "setenv(ofname, \"stdout\", exit_code)", "setenv(ofname, \"stdout\", exiting_signal)", "setenv(ofname, \"stdout\", force)", "setenv(ofname, \"stdout\", foreground)", "setenv(ofname, \"stdout\", ifd)", "setenv(ofname, \"stdout\", last_member)", "setenv(ofname, \"stdout\", level)", "setenv(ofname, \"stdout\", list)", "setenv(ofname, \"stdout\", maxbits)", "setenv(ofname, \"stdout\", method)", "setenv(ofname, \"stdout\", no_name)", "setenv(ofname, \"stdout\", no_time)", "setenv(ofname, \"stdout\", ofd)", "setenv(ofname, \"stdout\", part_nb)", "setenv(ofname, \"stdout\", quiet)", "setenv(ofname, \"stdout\", recursive)", "setenv(ofname, \"stdout\", remove_ofname_fd)", "setenv(ofname, \"stdout\", save_orig_name)", "setenv(ofname, \"stdout\", test)", "setenv(ofname, \"stdout\", to_stdout)", "setenv(ofname, \"stdout\", verbose)", "stpncpy(ofname, \"stdout\", -1)", "stpncpy(ofname, \"stdout\", 0)", "stpncpy(ofname, \"stdout\", 1)", "stpncpy(ofname, \"stdout\", 32768)", "stpncpy(ofname, \"stdout\", 61440)", "stpncpy(ofname, \"stdout\", z_len)", "strcasecmp_l(ofname, \"stdout\", 0)", "strcoll_l(ofname, \"stdout\", 0)", "strncasecmp(ofname, \"stdout\", -1)", "strncasecmp(ofname, \"stdout\", 0)", "strncasecmp(ofname, \"stdout\", 1)", "strncasecmp(ofname, \"stdout\", 32768)", "strncasecmp(ofname, \"stdout\", 61440)", "strncasecmp(ofname, \"stdout\", z_len)", "strncat(ofname, \"stdout\", -1)", "strncat(ofname, \"stdout\", 0)", "strncat(ofname, \"stdout\", 1)", "strncat(ofname, \"stdout\", 32768)", "strncat(ofname, \"stdout\", 61440)", "strncat(ofname, \"stdout\", z_len)", "strncmp(ofname, \"stdout\", -1)", "strncmp(ofname, \"stdout\", 0)", "strncmp(ofname, \"stdout\", 1)", "strncmp(ofname, \"stdout\", 32768)", "strncmp(ofname, \"stdout\", 61440)", "strncmp(ofname, \"stdout\", z_len)", "strncpy(ofname, \"stdout\", -1)", "strncpy(ofname, \"stdout\", 0)", "strncpy(ofname, \"stdout\", 1)", "strncpy(ofname, \"stdout\", 32768)", "strncpy(ofname, \"stdout\", 61440)", "strncpy(ofname, \"stdout\", z_len)", "strptime(ofname, \"stdout\", 0)", "strtok_r(ofname, \"stdout\", 0)", "strxfrm(ofname, \"stdout\", -1)", "strxfrm(ofname, \"stdout\", 0)", "strxfrm(ofname, \"stdout\", 1)", "strxfrm(ofname, \"stdout\", 32768)", "strxfrm(ofname, \"stdout\", 61440)", "strxfrm(ofname, \"stdout\", z_len)", "vasprintf(ofname, \"stdout\", 0)", "vfprintf(ofname, \"stdout\", 0)", "vsprintf(ofname, \"stdout\", 0)", "wcstombs(ofname, \"stdout\", -1)", "wcstombs(ofname, \"stdout\", 0)", "wcstombs(ofname, \"stdout\", 1)", "wcstombs(ofname, \"stdout\", 32768)", "wcstombs(ofname, \"stdout\", 61440)", "wcstombs(ofname, \"stdout\", z_len)", "{\n}\n", "__asprintf(ofname, \"stdout\")", "__printf__(ofname, \"stdout\")", "__stpcpy(ofname, \"stdout\")", "asprintf(ofname, \"stdout\")", "crypt(ofname, \"stdout\")", "execl(ofname, \"stdout\")", "execle(ofname, \"stdout\")", "execlp(ofname, \"stdout\")", "fopen(ofname, \"stdout\")", "fopen64(ofname, \"stdout\")", "fprintf(ofname, \"stdout\")", "link(ofname, \"stdout\")", "obstack_printf(ofname, \"stdout\")", "open_input_file(ofname, \"stdout\")", "popen(ofname, \"stdout\")", "printf(ofname, \"stdout\")", "psiginfo(ofname, \"stdout\")", "rename(ofname, \"stdout\")", "rpl_fprintf(ofname, \"stdout\")", "setstate_r(ofname, \"stdout\")", "sprintf(ofname, \"stdout\")", "stpcpy(ofname, \"stdout\")", "strcasecmp(ofname, \"stdout\")", "strcasestr(ofname, \"stdout\")", "strcat(ofname, \"stdout\")", "strcmp(ofname, \"stdout\")", "strcoll(ofname, \"stdout\")", "strcpy(ofname, \"stdout\")", "strcspn(ofname, \"stdout\")", "strpbrk(ofname, \"stdout\")", "strsep(ofname, \"stdout\")", "strspn(ofname, \"stdout\")", "strstr(ofname, \"stdout\")", "strtok(ofname, \"stdout\")", "strverscmp(ofname, \"stdout\")", "symlink(ofname, \"stdout\")", "tempnam(ofname, \"stdout\")", "strcpy(ofname, \"stdout or the directory does not exist\")", "strcpy(ofname, (0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.22653085713265, -7.22653085713265, -7.25997913913265, -7.69694413913265, -7.69694413913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265, -7.25997913913265]
								}, {
									"case":	2,
									"scores":	[-5.99290185913265]
								}, {
									"case":	3,
									"scores":	[-5.99290185913265]
								}, {
									"case":	4,
									"scores":	[-5.99290185913265]
								}, {
									"case":	5,
									"scores":	[-5.99290185913265]
								}, {
									"case":	6,
									"scores":	[-5.99290185913265]
								}, {
									"case":	7,
									"scores":	[-5.99290185913265]
								}, {
									"case":	8,
									"scores":	[-5.99290185913265]
								}, {
									"case":	9,
									"scores":	[-5.99290185913265]
								}, {
									"case":	10,
									"scores":	[-5.99290185913265]
								}, {
									"case":	11,
									"scores":	[-5.99290185913265]
								}, {
									"case":	12,
									"scores":	[-5.99290185913265]
								}, {
									"case":	13,
									"scores":	[-5.99290185913265]
								}, {
									"case":	14,
									"scores":	[-5.99290185913265]
								}, {
									"case":	15,
									"scores":	[-5.99290185913265]
								}, {
									"case":	16,
									"scores":	[-5.99290185913265]
								}, {
									"case":	17,
									"scores":	[-5.99290185913265]
								}, {
									"case":	18,
									"scores":	[-5.99290185913265]
								}, {
									"case":	19,
									"scores":	[-5.99290185913265]
								}, {
									"case":	20,
									"scores":	[-5.99290185913265]
								}, {
									"case":	21,
									"scores":	[-5.99290185913265]
								}, {
									"case":	22,
									"scores":	[-5.99290185913265]
								}, {
									"case":	23,
									"scores":	[-5.99290185913265]
								}, {
									"case":	24,
									"scores":	[-5.99290185913265]
								}, {
									"case":	25,
									"scores":	[-5.99290185913265]
								}, {
									"case":	26,
									"scores":	[-5.99290185913265]
								}, {
									"case":	27,
									"scores":	[-5.99290185913265]
								}, {
									"case":	28,
									"scores":	[-5.99290185913265]
								}, {
									"case":	29,
									"scores":	[-5.99290185913265]
								}, {
									"case":	30,
									"scores":	[-5.99290185913265]
								}, {
									"case":	31,
									"scores":	[-5.99290185913265]
								}, {
									"case":	32,
									"scores":	[-5.99290185913265]
								}, {
									"case":	33,
									"scores":	[-5.99290185913265]
								}, {
									"case":	34,
									"scores":	[-5.99290185913265]
								}, {
									"case":	35,
									"scores":	[-5.99290185913265]
								}, {
									"case":	36,
									"scores":	[-5.99290185913265]
								}, {
									"case":	37,
									"scores":	[-5.99290185913265]
								}, {
									"case":	38,
									"scores":	[-5.99290185913265]
								}, {
									"case":	39,
									"scores":	[-5.99290185913265]
								}, {
									"case":	40,
									"scores":	[-5.99290185913265]
								}, {
									"case":	41,
									"scores":	[-5.99290185913265]
								}, {
									"case":	42,
									"scores":	[-5.99290185913265]
								}, {
									"case":	43,
									"scores":	[-5.99290185913265]
								}, {
									"case":	44,
									"scores":	[-5.99290185913265]
								}, {
									"case":	45,
									"scores":	[-5.99290185913265]
								}, {
									"case":	46,
									"scores":	[-5.99290185913265]
								}, {
									"case":	47,
									"scores":	[-5.99290185913265]
								}, {
									"case":	48,
									"scores":	[-5.99290185913265]
								}, {
									"case":	49,
									"scores":	[-5.99290185913265]
								}, {
									"case":	50,
									"scores":	[-5.99290185913265]
								}, {
									"case":	51,
									"scores":	[-5.99290185913265]
								}, {
									"case":	52,
									"scores":	[-5.99290185913265]
								}, {
									"case":	53,
									"scores":	[-5.99290185913265]
								}, {
									"case":	54,
									"scores":	[-5.99290185913265]
								}, {
									"case":	55,
									"scores":	[-5.99290185913265]
								}, {
									"case":	56,
									"scores":	[-5.99290185913265]
								}, {
									"case":	57,
									"scores":	[-5.99290185913265]
								}, {
									"case":	58,
									"scores":	[-5.99290185913265]
								}, {
									"case":	59,
									"scores":	[-5.99290185913265]
								}, {
									"case":	60,
									"scores":	[-5.99290185913265]
								}, {
									"case":	61,
									"scores":	[-5.99290185913265]
								}, {
									"case":	62,
									"scores":	[-5.99290185913265]
								}, {
									"case":	63,
									"scores":	[-5.99290185913265]
								}, {
									"case":	64,
									"scores":	[-5.99290185913265]
								}, {
									"case":	65,
									"scores":	[-5.99290185913265]
								}, {
									"case":	66,
									"scores":	[-5.99290185913265]
								}, {
									"case":	67,
									"scores":	[-5.99290185913265]
								}, {
									"case":	68,
									"scores":	[-5.99290185913265]
								}, {
									"case":	69,
									"scores":	[-5.99290185913265]
								}, {
									"case":	70,
									"scores":	[-5.99290185913265]
								}, {
									"case":	71,
									"scores":	[-5.99290185913265]
								}, {
									"case":	72,
									"scores":	[-5.99290185913265]
								}, {
									"case":	73,
									"scores":	[-5.99290185913265]
								}, {
									"case":	74,
									"scores":	[-5.99290185913265]
								}, {
									"case":	75,
									"scores":	[-5.99290185913265]
								}, {
									"case":	76,
									"scores":	[-5.99290185913265]
								}, {
									"case":	77,
									"scores":	[-5.99290185913265]
								}, {
									"case":	78,
									"scores":	[-5.99290185913265]
								}, {
									"case":	79,
									"scores":	[-5.99290185913265]
								}, {
									"case":	80,
									"scores":	[-5.99290185913265]
								}, {
									"case":	81,
									"scores":	[-5.99290185913265]
								}, {
									"case":	82,
									"scores":	[-5.99290185913265]
								}, {
									"case":	83,
									"scores":	[-5.99290185913265]
								}, {
									"case":	84,
									"scores":	[-5.99290185913265]
								}, {
									"case":	85,
									"scores":	[-5.99290185913265]
								}, {
									"case":	86,
									"scores":	[-5.99290185913265]
								}, {
									"case":	87,
									"scores":	[-5.99290185913265]
								}, {
									"case":	88,
									"scores":	[-5.99290185913265]
								}, {
									"case":	89,
									"scores":	[-5.99290185913265]
								}, {
									"case":	90,
									"scores":	[-5.99290185913265]
								}, {
									"case":	91,
									"scores":	[-5.99290185913265]
								}, {
									"case":	92,
									"scores":	[-5.99290185913265]
								}, {
									"case":	93,
									"scores":	[-5.99290185913265]
								}, {
									"case":	94,
									"scores":	[-5.99290185913265]
								}, {
									"case":	95,
									"scores":	[-5.99290185913265]
								}, {
									"case":	96,
									"scores":	[-5.99290185913265]
								}, {
									"case":	97,
									"scores":	[-5.99290185913265]
								}, {
									"case":	98,
									"scores":	[-5.99290185913265]
								}, {
									"case":	99,
									"scores":	[-5.99290185913265]
								}, {
									"case":	100,
									"scores":	[-5.99290185913265]
								}, {
									"case":	101,
									"scores":	[-5.99290185913265]
								}, {
									"case":	102,
									"scores":	[-5.99290185913265]
								}, {
									"case":	103,
									"scores":	[-5.99290185913265]
								}, {
									"case":	104,
									"scores":	[-5.99290185913265]
								}, {
									"case":	105,
									"scores":	[-5.99290185913265]
								}, {
									"case":	106,
									"scores":	[-5.99290185913265]
								}, {
									"case":	107,
									"scores":	[-5.99290185913265]
								}, {
									"case":	108,
									"scores":	[-5.99290185913265]
								}, {
									"case":	109,
									"scores":	[-5.99290185913265]
								}, {
									"case":	110,
									"scores":	[-5.99290185913265]
								}, {
									"case":	111,
									"scores":	[-5.99290185913265]
								}, {
									"case":	112,
									"scores":	[-5.99290185913265]
								}, {
									"case":	113,
									"scores":	[-5.99290185913265]
								}, {
									"case":	114,
									"scores":	[-5.99290185913265]
								}, {
									"case":	115,
									"scores":	[-5.99290185913265]
								}, {
									"case":	116,
									"scores":	[-5.99290185913265]
								}, {
									"case":	117,
									"scores":	[-5.99290185913265]
								}, {
									"case":	118,
									"scores":	[-5.99290185913265]
								}, {
									"case":	119,
									"scores":	[-5.99290185913265]
								}, {
									"case":	120,
									"scores":	[-5.99290185913265]
								}, {
									"case":	121,
									"scores":	[-5.99290185913265]
								}, {
									"case":	122,
									"scores":	[-5.99290185913265]
								}, {
									"case":	123,
									"scores":	[-5.99290185913265]
								}, {
									"case":	124,
									"scores":	[-5.99290185913265]
								}, {
									"case":	125,
									"scores":	[-5.99290185913265]
								}, {
									"case":	126,
									"scores":	[-5.99290185913265]
								}, {
									"case":	127,
									"scores":	[-5.99290185913265]
								}, {
									"case":	128,
									"scores":	[-5.99290185913265]
								}, {
									"case":	129,
									"scores":	[-5.99290185913265]
								}, {
									"case":	130,
									"scores":	[-5.99290185913265]
								}, {
									"case":	131,
									"scores":	[-5.99290185913265]
								}, {
									"case":	132,
									"scores":	[-5.99290185913265]
								}, {
									"case":	133,
									"scores":	[-5.99290185913265]
								}, {
									"case":	134,
									"scores":	[-5.99290185913265]
								}, {
									"case":	135,
									"scores":	[-5.99290185913265]
								}, {
									"case":	136,
									"scores":	[-5.99290185913265]
								}, {
									"case":	137,
									"scores":	[-5.99290185913265]
								}, {
									"case":	138,
									"scores":	[-5.99290185913265]
								}, {
									"case":	139,
									"scores":	[-5.99290185913265]
								}, {
									"case":	140,
									"scores":	[-5.99290185913265]
								}, {
									"case":	141,
									"scores":	[-5.99290185913265]
								}, {
									"case":	142,
									"scores":	[-5.99290185913265]
								}, {
									"case":	143,
									"scores":	[-5.99290185913265]
								}, {
									"case":	144,
									"scores":	[-5.99290185913265]
								}, {
									"case":	145,
									"scores":	[-5.99290185913265]
								}, {
									"case":	146,
									"scores":	[-5.99290185913265]
								}, {
									"case":	147,
									"scores":	[-5.99290185913265]
								}, {
									"case":	148,
									"scores":	[-5.99290185913265]
								}, {
									"case":	149,
									"scores":	[-5.99290185913265]
								}, {
									"case":	150,
									"scores":	[-5.99290185913265]
								}, {
									"case":	151,
									"scores":	[-5.99290185913265]
								}, {
									"case":	152,
									"scores":	[-5.99290185913265]
								}, {
									"case":	153,
									"scores":	[-5.99290185913265]
								}, {
									"case":	154,
									"scores":	[-5.99290185913265]
								}, {
									"case":	155,
									"scores":	[-5.99290185913265]
								}, {
									"case":	156,
									"scores":	[-5.99290185913265]
								}, {
									"case":	157,
									"scores":	[-5.99290185913265]
								}, {
									"case":	158,
									"scores":	[-5.99290185913265]
								}, {
									"case":	159,
									"scores":	[-5.99290185913265]
								}, {
									"case":	160,
									"scores":	[-5.99290185913265]
								}, {
									"case":	161,
									"scores":	[-5.99290185913265]
								}, {
									"case":	162,
									"scores":	[-5.99290185913265]
								}, {
									"case":	163,
									"scores":	[-5.99290185913265]
								}, {
									"case":	164,
									"scores":	[-5.99290185913265]
								}, {
									"case":	165,
									"scores":	[-5.99290185913265]
								}, {
									"case":	166,
									"scores":	[-5.99290185913265]
								}, {
									"case":	167,
									"scores":	[-5.99290185913265]
								}, {
									"case":	168,
									"scores":	[-5.99290185913265]
								}, {
									"case":	169,
									"scores":	[-5.99290185913265]
								}, {
									"case":	170,
									"scores":	[-5.99290185913265]
								}, {
									"case":	171,
									"scores":	[-5.99290185913265]
								}, {
									"case":	172,
									"scores":	[-5.99290185913265]
								}, {
									"case":	173,
									"scores":	[-5.99290185913265]
								}, {
									"case":	174,
									"scores":	[-5.99290185913265]
								}, {
									"case":	175,
									"scores":	[-5.99290185913265]
								}, {
									"case":	176,
									"scores":	[-5.99290185913265]
								}, {
									"case":	177,
									"scores":	[-5.99290185913265]
								}, {
									"case":	178,
									"scores":	[-5.99290185913265]
								}]
						}]
				}, {
					"line":	626,
					"switches":	[{
							"switch":	27,
							"types":	[[], [], [], [], [244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	627,
							"begin_column":	3,
							"end_line":	627,
							"end_column":	3,
							"patch_codes":	["memset(&istat, 0, sizeof (*(&istat)))", "memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L627\", 50, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(force), sizeof (force), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	2,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	3,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	4,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	5,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	6,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	7,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	8,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	9,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	10,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	11,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	12,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	13,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	14,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	15,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	16,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	17,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	18,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	19,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	20,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	21,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	22,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	23,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	24,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	25,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	26,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	27,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	28,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	29,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	30,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	31,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	32,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	33,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	34,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	35,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	36,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	37,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	38,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	39,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	40,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	41,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	42,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	43,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	44,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	45,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	46,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	47,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	48,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	49,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	50,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	51,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	52,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	53,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	54,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	55,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	56,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	57,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	58,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	59,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	60,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	61,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	62,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	63,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	64,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	65,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	66,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	67,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	68,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	69,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	70,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	71,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	72,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	73,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	74,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	75,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	76,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	77,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	78,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	79,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	80,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	81,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	82,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	83,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	84,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	85,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	86,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	87,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	88,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	89,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	90,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	91,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	92,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	93,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	94,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	95,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	96,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	97,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	98,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	99,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	100,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	101,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	102,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	103,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	104,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	105,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	106,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	107,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	108,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	109,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	110,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	111,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	112,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	113,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	114,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	115,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	116,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	117,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	118,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	119,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	120,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	121,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	122,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	123,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	124,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	125,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	126,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	127,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	128,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	129,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	130,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	131,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	132,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	133,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	134,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	135,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	136,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	137,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	138,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	139,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	140,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	141,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	142,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	143,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	144,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	145,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	146,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	147,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	148,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	149,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	150,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	151,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	152,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	153,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	154,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	155,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	156,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	157,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	158,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	159,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	160,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	161,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	162,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	163,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	164,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	165,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	166,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	167,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	168,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	169,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	170,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	171,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	172,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	173,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	174,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	175,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	176,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	177,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	178,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	179,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	180,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	181,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	182,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	183,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	184,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	185,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	186,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	187,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	188,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	189,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	190,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	191,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	192,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	193,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	194,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	195,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	196,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	197,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	198,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	199,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	200,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	201,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	202,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	203,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	204,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	205,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	206,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	207,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	208,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	209,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	210,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	211,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	212,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	213,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	214,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	215,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	216,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	217,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	218,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	219,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	220,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	221,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	222,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	223,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	224,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	225,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	226,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	227,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	228,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	229,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	230,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	231,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	232,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	233,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	234,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	235,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	236,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	237,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	238,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	239,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	240,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	241,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	242,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	243,
									"scores":	[-5.9726991518151316]
								}, {
									"case":	244,
									"scores":	[-10.085742564915131, -10.085742564915131, -9.9845429518151327, -9.9845429518151327, -9.9845429518151327, -9.9845429518151327, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.88105024491513, -9.88105024491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -9.79162754491513, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133, -10.072056541815133]
								}]
						}, {
							"switch":	28,
							"types":	[[61], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], []],
							"begin_line":	627,
							"begin_column":	5,
							"end_line":	631,
							"end_column":	7,
							"patch_codes":	["if (__is_neg(\"\", \"L627\", 50, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(force), sizeof (force), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks))) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if ((fstat(fileno(stdin), &istat) != 0) || __is_neg(\"\", \"L627\", 50, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(force), sizeof (force), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks))) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (_IO_putc(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (__tolower_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (__toupper_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (clock_adjtime(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (clock_getcpuclockid(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (clock_getres(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (clock_gettime(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (clock_settime(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (dprintf(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fputc(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fputc_unlocked(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(_IO_feof(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(_IO_ferror(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(_IO_ftrylockfile(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(_IO_getc(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(_IO_peekc_locked(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(__uflow(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(__underflow(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fclose(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(feof(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(feof_unlocked(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(ferror(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(ferror_unlocked(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fflush(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fflush_unlocked(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fgetc(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fgetc_unlocked(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fileno_unlocked(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(fpurge(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(ftrylockfile(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(getc(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(getc_unlocked(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(getw(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(pclose(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat(rpl_fflush(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (fstat64(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (futimens(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (getgroups(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isalnum_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isalpha_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isblank_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (iscntrl_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isdigit_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isgraph_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (islower_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isprint_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (ispunct_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isspace_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isupper_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (isxdigit_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (main(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (putc(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (putc_unlocked(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (putw(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (tolower_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (toupper_l(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if (ungetc(fileno(stdin), &istat) != 0) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n", "if ((fstat(fileno(stdin), &istat) != 0) && !__is_neg(\"\", \"L627\", 50, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(force), sizeof (force), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks))) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.654330555428146, -4.654330555428146, -4.2999017374281463, -4.2999017374281463, -4.2999017374281463, -4.2999017374281463, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -5.0538511644281456, -5.0538511644281456, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.6168861644281458, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459, -4.9063645644281459]
								}, {
									"case":	2,
									"scores":	[-4.1783380864281465, -4.1783380864281465, -3.8239092684281473, -3.8239092684281473, -3.8239092684281473, -3.8239092684281473, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.5778586954281462, -4.5778586954281462, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-4.1783380864281465, -4.1783380864281465, -3.8239092684281473, -3.8239092684281473, -3.8239092684281473, -3.8239092684281473, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.5778586954281462, -4.5778586954281462, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.1408936954281463, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465, -4.4303720954281465]
								}]
						}, {
							"switch":	29,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	627,
							"begin_column":	5,
							"end_line":	631,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L627\", 50, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(force), sizeof (force), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    if (fstat(fileno(stdin), &istat) != 0) {\n        progerror(\"standard input\");\n        do_exit(1);\n    }\n", "if (!__is_neg(\"\", \"L627\", 50, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(test), sizeof (test), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(force), sizeof (force), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)) && (fstat(fileno(stdin), &istat) != 0)) {\n    progerror(\"standard input\");\n    do_exit(1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.24075311281513, -7.24075311281513, -6.8863242948151315, -6.8863242948151315, -6.8863242948151315, -6.8863242948151315, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.64027372181513, -7.64027372181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.20330872181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513, -7.49278712181513]
								}, {
									"case":	2,
									"scores":	[-6.4367732128151314, -6.4367732128151314, -6.0823443948151317, -6.0823443948151317, -6.0823443948151317, -6.0823443948151317, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.8362938218151319, -6.8362938218151319, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.3993288218151321, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322, -6.6888072218151322]
								}]
						}]
				}, {
					"line":	631,
					"switches":	[{
							"switch":	30,
							"types":	[[], [], [], [], [244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	632,
							"begin_column":	3,
							"end_line":	632,
							"end_column":	3,
							"patch_codes":	["memset(&istat, 0, sizeof (*(&istat)))", "memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L632\", 56, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(no_time), sizeof (no_time), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(force), sizeof (force), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	2,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	3,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	4,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	5,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	6,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	7,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	8,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	9,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	10,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	11,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	12,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	13,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	14,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	15,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	16,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	17,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	18,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	19,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	20,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	21,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	22,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	23,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	24,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	25,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	26,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	27,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	28,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	29,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	30,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	31,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	32,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	33,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	34,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	35,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	36,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	37,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	38,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	39,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	40,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	41,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	42,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	43,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	44,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	45,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	46,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	47,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	48,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	49,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	50,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	51,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	52,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	53,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	54,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	55,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	56,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	57,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	58,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	59,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	60,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	61,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	62,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	63,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	64,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	65,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	66,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	67,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	68,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	69,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	70,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	71,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	72,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	73,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	74,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	75,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	76,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	77,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	78,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	79,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	80,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	81,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	82,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	83,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	84,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	85,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	86,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	87,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	88,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	89,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	90,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	91,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	92,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	93,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	94,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	95,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	96,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	97,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	98,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	99,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	100,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	101,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	102,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	103,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	104,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	105,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	106,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	107,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	108,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	109,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	110,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	111,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	112,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	113,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	114,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	115,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	116,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	117,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	118,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	119,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	120,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	121,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	122,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	123,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	124,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	125,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	126,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	127,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	128,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	129,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	130,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	131,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	132,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	133,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	134,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	135,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	136,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	137,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	138,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	139,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	140,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	141,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	142,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	143,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	144,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	145,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	146,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	147,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	148,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	149,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	150,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	151,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	152,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	153,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	154,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	155,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	156,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	157,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	158,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	159,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	160,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	161,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	162,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	163,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	164,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	165,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	166,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	167,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	168,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	169,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	170,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	171,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	172,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	173,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	174,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	175,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	176,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	177,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	178,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	179,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	180,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	181,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	182,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	183,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	184,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	185,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	186,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	187,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	188,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	189,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	190,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	191,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	192,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	193,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	194,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	195,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	196,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	197,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	198,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	199,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	200,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	201,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	202,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	203,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	204,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	205,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	206,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	207,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	208,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	209,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	210,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	211,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	212,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	213,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	214,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	215,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	216,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	217,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	218,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	219,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	220,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	221,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	222,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	223,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	224,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	225,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	226,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	227,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	228,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	229,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	230,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	231,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	232,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	233,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	234,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	235,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	236,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	237,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	238,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	239,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	240,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	241,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	242,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	243,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	244,
									"scores":	[-9.36220866479761, -9.36220866479761, -9.05557834449761, -9.05557834449761, -9.05557834449761, -9.05557834449761, -10.285925948297614, -10.285925948297614, -10.285925948297614, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.729902637597613, -9.729902637597613, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.6404799375976129, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761, -9.92090893449761]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	632,
							"begin_column":	5,
							"end_line":	632,
							"end_column":	61,
							"patch_codes":	["if (!__is_neg(\"\", \"L632\", 56, &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(no_time), sizeof (no_time), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(force), sizeof (force), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1;\n", "{\n}\n", "ifile_size = ((((istat.st_mode)) & (0)) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == ((0))) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (ascii != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (bytes_in != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (bytes_out != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (decompress != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (exit_code != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (force != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (header_bytes != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (ifd != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (ifile_size != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.__pad0 != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_blksize != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_blocks != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_dev != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_gid != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_ino != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_mode != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_nlink != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_rdev != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_size != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (istat.st_uid != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (list != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (method != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (no_time != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (part_nb != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (program_name != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (test != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (time_stamp.tv_nsec != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (time_stamp.tv_sec != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (to_stdout != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (verbose != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? (work != 0) : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -(0)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4070319874976125, -6.4070319874976125, -6.1724796874976118, -6.1724796874976118, -6.1724796874976118, -6.1724796874976118, -7.3828714914976121, -7.3828714914976121, -7.3828714914976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.773104314497612, -6.773104314497612, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.3361393144976121, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123, -6.6256177144976123]
								}, {
									"case":	2,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	3,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	4,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	5,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	6,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	7,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	8,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	9,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	10,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	11,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	12,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	13,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	14,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	15,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	16,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	17,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	18,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	19,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	20,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	21,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	22,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	23,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	24,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	25,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	26,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	27,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	28,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	29,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	30,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	31,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	32,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	33,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	34,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	35,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	36,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	37,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	38,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	39,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	40,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	41,
									"scores":	[-5.9524964444976121]
								}]
						}]
				}, {
					"line":	632,
					"switches":	[{
							"switch":	32,
							"types":	[[], [], [], [], [244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	633,
							"begin_column":	3,
							"end_line":	633,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp, 0, sizeof (*(&time_stamp)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L633\", 56, &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(force), sizeof (force), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	2,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	3,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	4,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	5,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	6,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	7,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	8,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	9,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	10,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	11,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	12,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	13,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	14,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	15,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	16,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	17,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	18,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	19,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	20,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	21,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	22,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	23,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	24,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	25,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	26,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	27,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	28,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	29,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	30,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	31,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	32,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	33,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	34,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	35,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	36,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	37,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	38,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	39,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	40,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	41,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	42,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	43,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	44,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	45,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	46,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	47,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	48,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	49,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	50,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	51,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	52,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	53,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	54,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	55,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	56,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	57,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	58,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	59,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	60,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	61,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	62,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	63,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	64,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	65,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	66,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	67,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	68,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	69,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	70,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	71,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	72,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	73,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	74,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	75,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	76,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	77,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	78,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	79,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	80,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	81,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	82,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	83,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	84,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	85,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	86,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	87,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	88,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	89,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	90,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	91,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	92,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	93,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	94,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	95,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	96,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	97,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	98,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	99,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	100,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	101,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	102,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	103,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	104,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	105,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	106,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	107,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	108,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	109,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	110,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	111,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	112,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	113,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	114,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	115,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	116,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	117,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	118,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	119,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	120,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	121,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	122,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	123,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	124,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	125,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	126,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	127,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	128,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	129,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	130,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	131,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	132,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	133,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	134,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	135,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	136,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	137,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	138,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	139,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	140,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	141,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	142,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	143,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	144,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	145,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	146,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	147,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	148,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	149,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	150,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	151,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	152,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	153,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	154,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	155,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	156,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	157,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	158,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	159,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	160,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	161,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	162,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	163,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	164,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	165,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	166,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	167,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	168,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	169,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	170,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	171,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	172,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	173,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	174,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	175,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	176,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	177,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	178,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	179,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	180,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	181,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	182,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	183,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	184,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	185,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	186,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	187,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	188,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	189,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	190,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	191,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	192,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	193,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	194,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	195,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	196,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	197,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	198,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	199,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	200,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	201,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	202,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	203,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	204,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	205,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	206,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	207,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	208,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	209,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	210,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	211,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	212,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	213,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	214,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	215,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	216,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	217,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	218,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	219,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	220,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	221,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	222,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	223,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	224,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	225,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	226,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	227,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	228,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	229,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	230,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	231,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	232,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	233,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	234,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	235,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	236,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	237,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	238,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	239,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	240,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	241,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	242,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	243,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	244,
									"scores":	[-10.551438111880092, -10.551438111880092, -10.551438111880092, -7.8413602302800927, -10.116245230280093, -10.116245230280093, -7.8413602302800927, -10.013773227180092, -10.013773227180092, -10.013773227180092, -10.013773227180092, -10.481262244080092, -10.481262244080092, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.205667930280093, -10.205667930280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.116245230280093, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092, -10.396674227180092]
								}]
						}, {
							"switch":	33,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	633,
							"begin_column":	5,
							"end_line":	633,
							"end_column":	27,
							"patch_codes":	["if (!__is_neg(\"\", \"L633\", 56, &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(force), sizeof (force), &(bytes_in), sizeof (bytes_in), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    time_stamp.tv_nsec = -1;\n", "{\n}\n", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_nsec = -(0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.31740568018009, -8.31740568018009, -8.31740568018009, -6.5944127541800928, -7.3077716071800927, -7.3077716071800927, -6.5944127541800928, -7.3818203071800923, -7.3818203071800923, -7.3818203071800923, -7.3818203071800923, -7.3448697111800918, -7.3448697111800918, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.7447366071800925, -7.7447366071800925, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.3077716071800927, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928, -7.5972500071800928]
								}, {
									"case":	2,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	3,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	4,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	5,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	6,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	7,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	8,
									"scores":	[-5.9322937371800926]
								}]
						}]
				}, {
					"line":	634,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [245], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [], [], [], [], [], []],
							"begin_line":	635,
							"begin_column":	5,
							"end_line":	635,
							"end_column":	5,
							"patch_codes":	["memset(&istat, 0, sizeof (*(&istat)))", "memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp, 0, sizeof (*(&time_stamp)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L635\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	28,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	29,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	30,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	31,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	32,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	33,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	34,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	35,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	36,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	37,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	38,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	39,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	40,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	41,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	42,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	43,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	44,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	45,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	46,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	47,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	48,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	49,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	50,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	51,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	52,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	53,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	54,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	55,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	56,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	57,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	58,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	59,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	60,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	61,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	62,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	63,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	64,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	65,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	66,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	67,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	68,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	69,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	70,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	71,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	72,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	73,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	74,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	75,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	76,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	77,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	78,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	79,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	80,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	81,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	82,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	83,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	84,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	85,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	86,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	87,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	88,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	89,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	90,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	91,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	92,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	93,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	94,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	95,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	96,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	97,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	98,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	99,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	100,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	101,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	102,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	103,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	104,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	105,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	106,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	107,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	108,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	109,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	110,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	111,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	112,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	113,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	114,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	115,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	116,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	117,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	118,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	119,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	120,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	121,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	122,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	123,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	124,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	125,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	126,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	127,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	128,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	129,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	130,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	131,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	132,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	133,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	134,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	135,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	136,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	137,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	138,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	139,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	140,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	141,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	142,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	143,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	144,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	145,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	146,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	147,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	148,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	149,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	150,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	151,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	152,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	153,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	154,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	155,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	156,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	157,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	158,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	159,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	160,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	161,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	162,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	163,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	164,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	165,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	166,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	167,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	168,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	169,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	170,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	171,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	172,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	173,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	174,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	175,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	176,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	177,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	178,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	179,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	180,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	181,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	182,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	183,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	184,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	185,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	186,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	187,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	188,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	189,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	190,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	191,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	192,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	193,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	194,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	195,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	196,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	197,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	198,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	199,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	200,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	201,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	202,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	203,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	204,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	205,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	206,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	207,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	208,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	209,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	210,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	211,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	212,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	213,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	214,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	215,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	216,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	217,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	218,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	219,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	220,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	221,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	222,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	223,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	224,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	225,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	226,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	227,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	228,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	229,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	230,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	231,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	232,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	233,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	234,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	235,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	236,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	237,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	238,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	239,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	240,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	241,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	242,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	243,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	244,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	245,
									"scores":	[-7.005114864422417, -7.005114864422417, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.0945375644224171, -7.0945375644224171, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.005114864422417, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166, -7.2855438613224166]
								}]
						}, {
							"switch":	37,
							"types":	[[], [], [1], [], [], [], [], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	635,
							"begin_column":	7,
							"end_line":	635,
							"end_column":	42,
							"patch_codes":	["if (!__is_neg(\"\", \"L635\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    time_stamp = get_stat_mtime(&istat);\n", "{\n}\n", "time_stamp = get_stat_atime(&istat)", "time_stamp = get_stat_birthtime(&istat)", "time_stamp = get_stat_ctime(&istat)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5106304613224175, -6.5106304613224175, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.9475954613224173, -6.9475954613224173, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.5106304613224175, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168, -6.8001088613224168]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}]
						}]
				}, {
					"line":	633,
					"switches":	[{
							"switch":	34,
							"types":	[[], [], [], [], [245], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [], [], [], [], [], []],
							"begin_line":	634,
							"begin_column":	3,
							"end_line":	634,
							"end_column":	3,
							"patch_codes":	["memset(&istat, 0, sizeof (*(&istat)))", "memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp, 0, sizeof (*(&time_stamp)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L634\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	2,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	3,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	4,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	5,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	6,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	7,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	8,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	9,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	10,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	11,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	12,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	13,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	14,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	15,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	16,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	17,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	18,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	19,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	20,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	21,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	22,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	23,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	24,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	25,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	26,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	27,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	28,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	29,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	30,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	31,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	32,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	33,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	34,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	35,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	36,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	37,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	38,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	39,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	40,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	41,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	42,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	43,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	44,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	45,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	46,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	47,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	48,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	49,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	50,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	51,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	52,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	53,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	54,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	55,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	56,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	57,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	58,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	59,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	60,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	61,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	62,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	63,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	64,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	65,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	66,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	67,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	68,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	69,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	70,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	71,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	72,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	73,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	74,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	75,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	76,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	77,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	78,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	79,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	80,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	81,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	82,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	83,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	84,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	85,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	86,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	87,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	88,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	89,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	90,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	91,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	92,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	93,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	94,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	95,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	96,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	97,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	98,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	99,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	100,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	101,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	102,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	103,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	104,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	105,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	106,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	107,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	108,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	109,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	110,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	111,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	112,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	113,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	114,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	115,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	116,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	117,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	118,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	119,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	120,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	121,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	122,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	123,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	124,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	125,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	126,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	127,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	128,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	129,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	130,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	131,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	132,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	133,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	134,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	135,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	136,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	137,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	138,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	139,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	140,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	141,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	142,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	143,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	144,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	145,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	146,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	147,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	148,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	149,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	150,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	151,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	152,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	153,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	154,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	155,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	156,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	157,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	158,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	159,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	160,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	161,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	162,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	163,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	164,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	165,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	166,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	167,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	168,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	169,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	170,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	171,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	172,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	173,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	174,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	175,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	176,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	177,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	178,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	179,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	180,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	181,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	182,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	183,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	184,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	185,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	186,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	187,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	188,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	189,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	190,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	191,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	192,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	193,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	194,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	195,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	196,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	197,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	198,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	199,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	200,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	201,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	202,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	203,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	204,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	205,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	206,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	207,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	208,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	209,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	210,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	211,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	212,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	213,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	214,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	215,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	216,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	217,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	218,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	219,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	220,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	221,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	222,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	223,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	224,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	225,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	226,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	227,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	228,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	229,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	230,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	231,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	232,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	233,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	234,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	235,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	236,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	237,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	238,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	239,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	240,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	241,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	242,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	243,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	244,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	245,
									"scores":	[-10.377984422962573, -10.377984422962573, -9.1196352198625732, -9.1196352198625732, -9.1196352198625732, -8.1030994229625737, -8.1030994229625737, -10.275512419862574, -10.275512419862574, -10.275512419862574, -10.275512419862574, -10.743001436762572, -10.743001436762572, -10.777499587762573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.467407122962573, -10.467407122962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.377984422962573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573, -10.658413419862573]
								}]
						}, {
							"switch":	35,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	634,
							"begin_column":	5,
							"end_line":	635,
							"end_column":	42,
							"patch_codes":	["if (__is_neg(\"\", \"L634\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    time_stamp = get_stat_mtime(&istat);\n", "if ((!no_time || list) || __is_neg(\"\", \"L634\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    time_stamp = get_stat_mtime(&istat);\n", "if (!no_time)\n    time_stamp = get_stat_mtime(&istat);\n", "if ((!no_time || list) && !__is_neg(\"\", \"L634\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    time_stamp = get_stat_mtime(&istat);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7530595184281452, -5.7530595184281452, -6.4631860654281468, -6.4631860654281468, -6.4631860654281468, -5.0397006654281462, -5.0397006654281462, -5.8271082184281457, -5.8271082184281457, -5.8271082184281457, -5.8271082184281457, -5.7901576224281452, -5.7901576224281452, -5.8262957524281465, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -6.1900245184281459, -6.1900245184281459, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -5.7530595184281452, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454, -6.0425379184281454]
								}, {
									"case":	2,
									"scores":	[-4.6823973954281461, -4.6823973954281461, -5.3925239424281459, -5.3925239424281459, -5.3925239424281459, -3.9690385424281458, -3.9690385424281458, -4.7564460954281458, -4.7564460954281458, -4.7564460954281458, -4.7564460954281458, -4.7194954994281462, -4.7194954994281462, -4.7556336294281465, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -5.119362395428146, -5.119362395428146, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-4.6823973954281461, -4.6823973954281461, -5.3925239424281459, -5.3925239424281459, -5.3925239424281459, -3.9690385424281458, -3.9690385424281458, -4.7564460954281458, -4.7564460954281458, -4.7564460954281458, -4.7564460954281458, -4.7194954994281462, -4.7194954994281462, -4.7556336294281465, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -5.119362395428146, -5.119362395428146, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.6823973954281461, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463, -4.9718757954281463]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	634,
							"begin_column":	5,
							"end_line":	635,
							"end_column":	42,
							"patch_codes":	["if (!__is_neg(\"\", \"L634\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)))\n    if (!no_time || list)\n        time_stamp = get_stat_mtime(&istat);\n", "if (!__is_neg(\"\", \"L634\", 56, &(no_time), sizeof (no_time), &(list), sizeof (list), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(time_stamp.tv_nsec), sizeof (time_stamp.tv_nsec), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(istat.st_mode), sizeof (istat.st_mode), &(istat.st_size), sizeof (istat.st_size), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(time_stamp.tv_sec), sizeof (time_stamp.tv_sec), &(istat.st_dev), sizeof (istat.st_dev), &(istat.st_ino), sizeof (istat.st_ino), &(istat.st_nlink), sizeof (istat.st_nlink), &(istat.st_uid), sizeof (istat.st_uid), &(istat.st_gid), sizeof (istat.st_gid), &(istat.__pad0), sizeof (istat.__pad0), &(istat.st_rdev), sizeof (istat.st_rdev), &(istat.st_blksize), sizeof (istat.st_blksize), &(istat.st_blocks), sizeof (istat.st_blocks)) && (!no_time || list))\n    time_stamp = get_stat_mtime(&istat);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5798979198625727, -7.5798979198625727, -8.29002446686257, -8.29002446686257, -8.29002446686257, -6.8665390668625728, -6.8665390668625728, -7.6539466198625732, -7.6539466198625732, -7.6539466198625732, -7.6539466198625732, -7.6169960238625727, -7.6169960238625727, -7.653134153862573, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -8.0168629198625734, -8.0168629198625734, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.5798979198625727, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728, -7.8693763198625728]
								}, {
									"case":	2,
									"scores":	[-7.4693589198625725, -7.4693589198625725, -8.1794854668625732, -8.1794854668625732, -8.1794854668625732, -6.7560000668625726, -6.7560000668625726, -7.543407619862573, -7.543407619862573, -7.543407619862573, -7.543407619862573, -7.5064570238625725, -7.5064570238625725, -7.5425951538625728, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.9063239198625723, -7.9063239198625723, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.4693589198625725, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726, -7.7588373198625726]
								}]
						}]
				}, {
					"line":	636,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	637,
							"begin_column":	3,
							"end_line":	637,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L637\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(no_time), sizeof (no_time), &(list), sizeof (list), &(ifd), sizeof (ifd), &(ifile_size), sizeof (ifile_size), &(decompress), sizeof (decompress), &(ifile_size), sizeof (ifile_size), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	2,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	3,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	4,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	5,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	6,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	7,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	8,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	9,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	10,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	11,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	12,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	13,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	14,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	15,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	16,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	17,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	18,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	19,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	20,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	21,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	22,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	23,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	24,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	25,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	26,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	27,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	28,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	29,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	30,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	31,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	32,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	33,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	34,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	35,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	36,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	37,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	38,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	39,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	40,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	41,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	42,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	43,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	44,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	45,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	46,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	47,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	48,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	49,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	50,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	51,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	52,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	53,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	54,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	55,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	56,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	57,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	58,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	59,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	60,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	61,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	62,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	63,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	64,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	65,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	66,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	67,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	68,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	69,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	70,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	71,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	72,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	73,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	74,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	75,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	76,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	77,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	78,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	79,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	80,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	81,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	82,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	83,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	84,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	85,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	86,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	87,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	88,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	89,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	90,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	91,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	92,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	93,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	94,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	95,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	96,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	97,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	98,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	99,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	100,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	101,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	102,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	103,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	104,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	105,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	106,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	107,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	108,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	109,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	110,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	111,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	112,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	113,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	114,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	115,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	116,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	117,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	118,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	119,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	120,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	121,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	122,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	123,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	124,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	125,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	126,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	127,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	128,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	129,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	130,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	131,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	132,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	133,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	134,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	135,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	136,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	137,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	138,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	139,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	140,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	141,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	142,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	143,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	144,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	145,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	146,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	147,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	148,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	149,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	150,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	151,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	152,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	153,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	154,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	155,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	156,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	157,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	158,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	159,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	160,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	161,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	162,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	163,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	164,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	165,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	166,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	167,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	168,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	169,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	170,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	171,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	172,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	173,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	174,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	175,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	176,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	177,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	178,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	179,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	180,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	181,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	182,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	183,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	184,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	185,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	186,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	187,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	188,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	189,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	190,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	191,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	192,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	193,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	194,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	195,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	196,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	197,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	198,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	199,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	200,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	201,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	202,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	203,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	204,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	205,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	206,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	207,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	208,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	209,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	210,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	211,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	212,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	213,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	214,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	215,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	216,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	217,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	218,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	219,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	220,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	221,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	222,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	223,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	224,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	225,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	226,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	227,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	228,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	229,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	230,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	231,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	232,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	233,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	234,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	235,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	236,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	237,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	238,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	239,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	240,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	241,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	242,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	243,
									"scores":	[-9.16793605944505, -9.16793605944505, -9.2024342104450536, -9.0970340656450528, -8.8029190456450532, -8.8029190456450532, -9.0970340656450528, -6.5280340456450539, -8.8029190456450532, -6.5280340456450539, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8923417456450533, -8.8923417456450533, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532, -8.8029190456450532]
								}]
						}, {
							"switch":	40,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	637,
							"begin_column":	5,
							"end_line":	637,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L637\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(no_time), sizeof (no_time), &(list), sizeof (list), &(ifd), sizeof (ifd), &(ifile_size), sizeof (ifile_size), &(decompress), sizeof (decompress), &(ifile_size), sizeof (ifile_size), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    clear_bufs();\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4829078995450535, -7.4829078995450535, -6.7988903565450531, -6.6922058405450535, -6.7256541225450537, -6.7256541225450537, -6.6922058405450535, -6.0122952695450538, -6.7256541225450537, -6.0122952695450538, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -7.1626191225450535, -7.1626191225450535, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537, -6.7256541225450537]
								}, {
									"case":	2,
									"scores":	[-5.8918883225450536]
								}]
						}]
				}, {
					"line":	637,
					"switches":	[{
							"switch":	41,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	638,
							"begin_column":	3,
							"end_line":	638,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L638\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	2,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	3,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	4,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	5,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	6,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	7,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	8,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	9,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	10,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	11,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	12,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	13,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	14,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	15,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	16,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	17,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	18,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	19,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	20,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	21,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	22,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	23,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	24,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	25,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	26,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	27,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	28,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	29,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	30,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	31,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	32,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	33,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	34,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	35,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	36,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	37,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	38,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	39,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	40,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	41,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	42,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	43,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	44,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	45,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	46,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	47,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	48,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	49,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	50,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	51,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	52,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	53,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	54,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	55,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	56,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	57,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	58,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	59,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	60,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	61,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	62,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	63,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	64,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	65,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	66,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	67,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	68,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	69,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	70,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	71,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	72,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	73,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	74,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	75,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	76,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	77,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	78,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	79,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	80,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	81,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	82,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	83,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	84,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	85,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	86,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	87,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	88,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	89,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	90,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	91,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	92,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	93,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	94,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	95,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	96,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	97,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	98,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	99,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	100,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	101,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	102,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	103,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	104,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	105,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	106,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	107,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	108,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	109,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	110,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	111,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	112,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	113,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	114,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	115,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	116,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	117,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	118,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	119,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	120,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	121,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	122,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	123,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	124,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	125,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	126,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	127,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	128,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	129,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	130,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	131,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	132,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	133,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	134,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	135,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	136,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	137,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	138,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	139,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	140,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	141,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	142,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	143,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	144,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	145,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	146,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	147,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	148,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	149,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	150,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	151,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	152,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	153,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	154,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	155,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	156,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	157,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	158,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	159,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	160,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	161,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	162,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	163,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	164,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	165,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	166,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	167,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	168,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	169,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	170,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	171,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	172,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	173,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	174,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	175,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	176,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	177,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	178,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	179,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	180,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	181,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	182,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	183,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	184,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	185,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	186,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	187,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	188,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	189,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	190,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	191,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	192,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	193,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	194,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	195,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	196,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	197,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	198,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	199,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	200,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	201,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	202,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	203,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	204,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	205,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	206,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	207,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	208,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	209,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	210,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	211,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	212,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	213,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	214,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	215,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	216,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	217,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	218,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	219,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	220,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	221,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	222,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	223,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	224,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	225,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	226,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	227,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	228,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	229,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	230,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	231,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	232,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	233,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	234,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	235,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	236,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	237,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	238,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	239,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	240,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	241,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	242,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	243,
									"scores":	[-9.823084203027534, -9.823084203027534, -10.067835483127533, -10.111006338327535, -10.111006338327535, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.9361144483275332, -9.9361144483275332, -9.6683203183275346, -9.6683203183275346, -9.816891318327535, -9.816891318327535, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.7577430183275347, -9.7577430183275347, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346, -9.6683203183275346]
								}]
						}, {
							"switch":	42,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	638,
							"begin_column":	5,
							"end_line":	638,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L638\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(no_time), sizeof (no_time), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    to_stdout = 1;\n", "{\n}\n", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2438170682275338, -7.2438170682275338, -7.5051261022275337, -6.5805113132275341, -6.5805113132275341, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.491649072227534, -6.491649072227534, -6.523661395227534, -6.523661395227534, -6.6139595952275343, -6.6139595952275343, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.9606263952275338, -6.9606263952275338, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.523661395227534, -6.523661395227534]
								}, {
									"case":	2,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	3,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	4,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	5,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	6,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	7,
									"scores":	[-5.8716856152275341]
								}]
						}]
				}, {
					"line":	638,
					"switches":	[{
							"switch":	43,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	639,
							"begin_column":	3,
							"end_line":	639,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L639\", 28, &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(no_time), sizeof (no_time), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	2,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	3,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	4,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	5,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	6,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	7,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	8,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	9,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	10,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	11,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	12,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	13,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	14,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	15,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	16,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	17,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	18,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	19,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	20,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	21,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	22,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	23,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	24,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	25,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	26,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	27,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	28,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	29,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	30,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	31,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	32,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	33,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	34,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	35,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	36,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	37,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	38,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	39,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	40,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	41,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	42,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	43,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	44,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	45,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	46,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	47,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	48,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	49,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	50,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	51,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	52,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	53,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	54,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	55,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	56,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	57,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	58,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	59,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	60,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	61,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	62,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	63,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	64,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	65,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	66,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	67,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	68,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	69,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	70,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	71,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	72,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	73,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	74,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	75,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	76,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	77,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	78,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	79,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	80,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	81,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	82,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	83,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	84,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	85,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	86,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	87,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	88,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	89,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	90,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	91,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	92,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	93,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	94,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	95,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	96,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	97,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	98,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	99,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	100,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	101,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	102,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	103,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	104,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	105,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	106,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	107,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	108,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	109,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	110,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	111,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	112,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	113,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	114,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	115,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	116,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	117,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	118,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	119,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	120,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	121,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	122,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	123,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	124,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	125,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	126,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	127,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	128,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	129,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	130,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	131,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	132,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	133,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	134,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	135,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	136,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	137,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	138,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	139,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	140,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	141,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	142,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	143,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	144,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	145,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	146,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	147,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	148,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	149,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	150,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	151,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	152,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	153,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	154,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	155,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	156,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	157,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	158,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	159,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	160,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	161,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	162,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	163,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	164,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	165,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	166,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	167,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	168,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	169,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	170,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	171,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	172,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	173,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	174,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	175,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	176,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	177,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	178,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	179,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	180,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	181,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	182,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	183,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	184,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	185,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	186,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	187,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	188,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	189,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	190,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	191,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	192,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	193,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	194,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	195,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	196,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	197,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	198,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	199,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	200,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	201,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	202,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	203,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	204,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	205,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	206,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	207,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	208,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	209,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	210,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	211,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	212,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	213,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	214,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	215,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	216,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	217,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	218,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	219,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	220,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	221,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	222,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	223,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	224,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	225,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	226,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	227,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	228,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	229,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	230,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	231,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	232,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	233,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	234,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	235,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	236,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	237,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	238,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	239,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	240,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	241,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	242,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	243,
									"scores":	[-9.9565401437100132, -10.090803631010015, -8.1093394110100157, -8.1093394110100157, -10.090803631010015, -9.6481176110100151, -10.064482741010014, -10.064482741010014, -9.6481176110100151, -9.6481176110100151, -9.7966886110100155, -9.7966886110100155, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.7375403110100152, -9.7375403110100152, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151, -9.6481176110100151]
								}]
						}, {
							"switch":	44,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	639,
							"begin_column":	5,
							"end_line":	639,
							"end_column":	15,
							"patch_codes":	["if (!__is_neg(\"\", \"L639\", 28, &(part_nb), sizeof (part_nb), &(ifd), sizeof (ifd), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(no_time), sizeof (no_time), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    part_nb = 0;\n", "{\n}\n", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4116871609100148, -6.6312012789100141, -6.924106834910015, -6.924106834910015, -6.6312012789100141, -6.5034586879100145, -6.5617445649100148, -6.5617445649100148, -6.5034586879100145, -6.5034586879100145, -6.5937568879100148, -6.5937568879100148, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.9404236879100143, -6.9404236879100143, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145, -6.5034586879100145]
								}, {
									"case":	2,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	3,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	4,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	5,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	6,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	7,
									"scores":	[-5.8514829079100146]
								}]
						}]
				}, {
					"line":	639,
					"switches":	[{
							"switch":	45,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	640,
							"begin_column":	3,
							"end_line":	640,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L640\", 28, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(no_time), sizeof (no_time), &(list), sizeof (list), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	68,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	69,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	70,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	71,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	72,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	73,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	74,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	75,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	76,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	77,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	78,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	79,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	80,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	81,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	82,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	83,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	84,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	85,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	86,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	87,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	88,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	89,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	90,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	91,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	92,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	93,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	94,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	95,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	96,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	97,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	98,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	99,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	100,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	101,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	102,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	103,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	104,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	105,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	106,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	107,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	108,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	109,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	110,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	111,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	112,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	113,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	114,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	115,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	116,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	117,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	118,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	119,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	120,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	121,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	122,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	123,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	124,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	125,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	126,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	127,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	128,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	129,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	130,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	131,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	132,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	133,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	134,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	135,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	136,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	137,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	138,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	139,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	140,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	141,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	142,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	143,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	144,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	145,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	146,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	147,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	148,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	149,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	150,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	151,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	152,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	153,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	154,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	155,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	156,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	157,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	158,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	159,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	160,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	161,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	162,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	163,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	164,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	165,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	166,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	167,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	168,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	169,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	170,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	171,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	172,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	173,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	174,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	175,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	176,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	177,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	178,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	179,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	180,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	181,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	182,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	183,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	184,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	185,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	186,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	187,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	188,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	189,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	190,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	191,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	192,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	193,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	194,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	195,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	196,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	197,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	198,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	199,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	200,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	201,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	202,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	203,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	204,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	205,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	206,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	207,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	208,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	209,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	210,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	211,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	212,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	213,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	214,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	215,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	216,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	217,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	218,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	219,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	220,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	221,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	222,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	223,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	224,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	225,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	226,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	227,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	228,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	229,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	230,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	231,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	232,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	233,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	234,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	235,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	236,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	237,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	238,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	239,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	240,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	241,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	242,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	243,
									"scores":	[-8.8143261088924945, -8.8143261088924945, -7.5446428696924954, -7.4052481816924951, -7.4052481816924951, -8.9440263816924954, -9.3603915116924945, -9.3603915116924945, -9.0925973816924941, -9.0925973816924941, -8.9440263816924954, -8.9440263816924954, -8.9440263816924954, -8.9440263816924954, -9.612839976692495, -8.9440263816924954, -8.9440263816924954, -8.9440263816924954, -9.343541546492494, -9.343541546492494, -8.9440263816924954, -8.9440263816924954, -9.0334490816924955, -9.0334490816924955, -8.9440263816924954, -8.9440263816924954, -8.9440263816924954, -8.9440263816924954]
								}]
						}, {
							"switch":	46,
							"types":	[[], [], [1], [], [], [], [63, 64, 65, 66, 67], [], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [], [], [38]],
							"begin_line":	640,
							"begin_column":	5,
							"end_line":	640,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L640\", 28, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(no_time), sizeof (no_time), &(list), sizeof (list), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    ifd = fileno(stdin);\n", "__overflow(stdin, -1)", "__overflow(stdin, 0)", "__overflow(stdin, 1)", "__overflow(stdin, 32768)", "__overflow(stdin, 61440)", "__overflow(stdin, _gl_warn_on_use)", "__overflow(stdin, ascii)", "__overflow(stdin, block_mode)", "__overflow(stdin, decompress)", "__overflow(stdin, decrypt)", "__overflow(stdin, do_lzw)", "__overflow(stdin, exit_code)", "__overflow(stdin, exiting_signal)", "__overflow(stdin, force)", "__overflow(stdin, foreground)", "__overflow(stdin, ifd)", "__overflow(stdin, last_member)", "__overflow(stdin, level)", "__overflow(stdin, list)", "__overflow(stdin, maxbits)", "__overflow(stdin, method)", "__overflow(stdin, no_name)", "__overflow(stdin, no_time)", "__overflow(stdin, ofd)", "__overflow(stdin, part_nb)", "__overflow(stdin, quiet)", "__overflow(stdin, recursive)", "__overflow(stdin, remove_ofname_fd)", "__overflow(stdin, save_orig_name)", "__overflow(stdin, test)", "__overflow(stdin, to_stdout)", "__overflow(stdin, verbose)", "fgetpos(stdin, 0)", "fgetpos64(stdin, 0)", "fsetpos(stdin, 0)", "fsetpos64(stdin, 0)", "{\n}\n", "ifd = _IO_feof(stdin)", "ifd = _IO_ferror(stdin)", "ifd = _IO_ftrylockfile(stdin)", "ifd = _IO_getc(stdin)", "ifd = _IO_peekc_locked(stdin)", "ifd = __uflow(stdin)", "ifd = __underflow(stdin)", "ifd = fclose(stdin)", "ifd = feof(stdin)", "ifd = feof_unlocked(stdin)", "ifd = ferror(stdin)", "ifd = ferror_unlocked(stdin)", "ifd = fflush(stdin)", "ifd = fflush_unlocked(stdin)", "ifd = fgetc(stdin)", "ifd = fgetc_unlocked(stdin)", "ifd = fileno_unlocked(stdin)", "ifd = fpurge(stdin)", "ifd = ftrylockfile(stdin)", "ifd = getc(stdin)", "ifd = getc_unlocked(stdin)", "ifd = getw(stdin)", "ifd = pclose(stdin)", "ifd = rpl_fflush(stdin)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1853704535924949, -6.1853704535924949, -7.4611219275924947, -7.2628961275924944, -7.2628961275924944, -6.8422479805924947, -5.8322595305924949, -5.8322595305924949, -6.2678025805924946, -6.2678025805924946, -6.8422479805924947, -6.8422479805924947, -6.8422479805924947, -6.8422479805924947, -7.6450544805924947, -6.8422479805924947, -6.8422479805924947, -6.8422479805924947, -6.9154842145924951, -6.9154842145924951, -6.8422479805924947, -6.8422479805924947, -7.2792129805924954, -7.2792129805924954, -6.8422479805924947, -6.8422479805924947, -6.8422479805924947, -6.8422479805924947]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}]
						}]
				}, {
					"line":	642,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	643,
							"begin_column":	7,
							"end_line":	643,
							"end_column":	7,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L643\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(test), sizeof (test), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	2,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	3,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	4,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	5,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	6,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	7,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	8,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	9,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	10,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	11,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	12,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	13,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	14,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	15,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	16,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	17,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	18,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	19,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	20,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	21,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	22,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	23,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	24,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	25,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	26,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	27,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	28,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	29,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	30,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	31,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	32,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	33,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	34,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	35,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	36,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	37,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	38,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	39,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	40,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	41,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	42,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	43,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	44,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	45,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	46,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	47,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	48,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	49,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	50,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	51,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	52,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	53,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	54,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	55,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	56,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	57,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	58,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	59,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	60,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	61,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	62,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	63,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	64,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	65,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	66,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	67,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	68,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	69,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	70,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	71,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	72,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	73,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	74,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	75,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	76,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	77,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	78,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	79,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	80,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	81,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	82,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	83,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	84,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	85,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	86,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	87,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	88,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	89,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	90,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	91,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	92,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	93,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	94,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	95,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	96,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	97,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	98,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	99,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	100,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	101,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	102,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	103,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	104,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	105,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	106,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	107,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	108,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	109,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	110,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	111,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	112,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	113,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	114,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	115,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	116,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	117,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	118,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	119,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	120,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	121,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	122,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	123,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	124,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	125,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	126,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	127,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	128,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	129,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	130,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	131,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	132,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	133,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	134,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	135,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	136,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	137,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	138,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	139,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	140,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	141,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	142,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	143,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	144,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	145,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	146,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	147,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	148,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	149,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	150,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	151,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	152,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	153,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	154,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	155,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	156,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	157,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	158,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	159,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	160,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	161,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	162,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	163,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	164,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	165,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	166,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	167,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	168,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	169,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	170,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	171,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	172,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	173,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	174,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	175,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	176,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	177,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	178,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	179,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	180,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	181,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	182,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	183,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	184,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	185,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	186,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	187,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	188,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	189,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	190,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	191,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	192,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	193,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	194,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	195,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	196,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	197,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	198,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	199,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	200,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	201,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	202,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	203,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	204,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	205,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	206,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	207,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	208,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	209,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	210,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	211,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	212,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	213,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	214,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	215,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	216,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	217,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	218,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	219,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	220,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	221,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	222,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	223,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	224,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	225,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	226,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	227,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	228,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	229,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	230,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	231,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	232,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	233,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	234,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	235,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	236,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	237,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	238,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	239,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	240,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	241,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	242,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	243,
									"scores":	[-6.4677945213486137, -4.9079792941486131, -6.4677945213486137, -4.9079792941486131, -6.7723866841486133, -6.9209576841486129, -6.9209576841486129, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.7723866841486133, -6.8618093841486134, -6.8618093841486134, -6.7723866841486133]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [628, 629, 630, 631, 632], [], [579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577], [], [], [578]],
							"begin_line":	643,
							"begin_column":	9,
							"end_line":	643,
							"end_column":	32,
							"patch_codes":	["if (!__is_neg(\"\", \"L643\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(test), sizeof (test), &(ascii), sizeof (ascii), &(verbose), sizeof (verbose), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    method = get_method(ifd);\n", "_IO_putc(ifd, 0)", "__tolower_l(ifd, 0)", "__toupper_l(ifd, 0)", "clock_adjtime(ifd, 0)", "clock_getcpuclockid(ifd, 0)", "clock_getres(ifd, 0)", "clock_gettime(ifd, 0)", "clock_settime(ifd, 0)", "copy(ifd, -1)", "copy(ifd, 0)", "copy(ifd, 1)", "copy(ifd, 32768)", "copy(ifd, 61440)", "copy(ifd, _gl_warn_on_use)", "copy(ifd, ascii)", "copy(ifd, block_mode)", "copy(ifd, decompress)", "copy(ifd, decrypt)", "copy(ifd, do_lzw)", "copy(ifd, exit_code)", "copy(ifd, exiting_signal)", "copy(ifd, force)", "copy(ifd, foreground)", "copy(ifd, ifd)", "copy(ifd, last_member)", "copy(ifd, level)", "copy(ifd, list)", "copy(ifd, maxbits)", "copy(ifd, method)", "copy(ifd, no_name)", "copy(ifd, no_time)", "copy(ifd, ofd)", "copy(ifd, part_nb)", "copy(ifd, quiet)", "copy(ifd, recursive)", "copy(ifd, remove_ofname_fd)", "copy(ifd, save_orig_name)", "copy(ifd, test)", "copy(ifd, to_stdout)", "copy(ifd, verbose)", "ct_tally(ifd, -1)", "ct_tally(ifd, 0)", "ct_tally(ifd, 1)", "ct_tally(ifd, 32768)", "ct_tally(ifd, 61440)", "ct_tally(ifd, _gl_warn_on_use)", "ct_tally(ifd, ascii)", "ct_tally(ifd, block_mode)", "ct_tally(ifd, decompress)", "ct_tally(ifd, decrypt)", "ct_tally(ifd, do_lzw)", "ct_tally(ifd, exit_code)", "ct_tally(ifd, exiting_signal)", "ct_tally(ifd, force)", "ct_tally(ifd, foreground)", "ct_tally(ifd, ifd)", "ct_tally(ifd, last_member)", "ct_tally(ifd, level)", "ct_tally(ifd, list)", "ct_tally(ifd, maxbits)", "ct_tally(ifd, method)", "ct_tally(ifd, no_name)", "ct_tally(ifd, no_time)", "ct_tally(ifd, ofd)", "ct_tally(ifd, part_nb)", "ct_tally(ifd, quiet)", "ct_tally(ifd, recursive)", "ct_tally(ifd, remove_ofname_fd)", "ct_tally(ifd, save_orig_name)", "ct_tally(ifd, test)", "ct_tally(ifd, to_stdout)", "ct_tally(ifd, verbose)", "daemon(ifd, -1)", "daemon(ifd, 0)", "daemon(ifd, 1)", "daemon(ifd, 32768)", "daemon(ifd, 61440)", "daemon(ifd, _gl_warn_on_use)", "daemon(ifd, ascii)", "daemon(ifd, block_mode)", "daemon(ifd, decompress)", "daemon(ifd, decrypt)", "daemon(ifd, do_lzw)", "daemon(ifd, exit_code)", "daemon(ifd, exiting_signal)", "daemon(ifd, force)", "daemon(ifd, foreground)", "daemon(ifd, ifd)", "daemon(ifd, last_member)", "daemon(ifd, level)", "daemon(ifd, list)", "daemon(ifd, maxbits)", "daemon(ifd, method)", "daemon(ifd, no_name)", "daemon(ifd, no_time)", "daemon(ifd, ofd)", "daemon(ifd, part_nb)", "daemon(ifd, quiet)", "daemon(ifd, recursive)", "daemon(ifd, remove_ofname_fd)", "daemon(ifd, save_orig_name)", "daemon(ifd, test)", "daemon(ifd, to_stdout)", "daemon(ifd, verbose)", "dup2(ifd, -1)", "dup2(ifd, 0)", "dup2(ifd, 1)", "dup2(ifd, 32768)", "dup2(ifd, 61440)", "dup2(ifd, _gl_warn_on_use)", "dup2(ifd, ascii)", "dup2(ifd, block_mode)", "dup2(ifd, decompress)", "dup2(ifd, decrypt)", "dup2(ifd, do_lzw)", "dup2(ifd, exit_code)", "dup2(ifd, exiting_signal)", "dup2(ifd, force)", "dup2(ifd, foreground)", "dup2(ifd, ifd)", "dup2(ifd, last_member)", "dup2(ifd, level)", "dup2(ifd, list)", "dup2(ifd, maxbits)", "dup2(ifd, method)", "dup2(ifd, no_name)", "dup2(ifd, no_time)", "dup2(ifd, ofd)", "dup2(ifd, part_nb)", "dup2(ifd, quiet)", "dup2(ifd, recursive)", "dup2(ifd, remove_ofname_fd)", "dup2(ifd, save_orig_name)", "dup2(ifd, test)", "dup2(ifd, to_stdout)", "dup2(ifd, verbose)", "fchmod(ifd, -1)", "fchmod(ifd, 0)", "fchmod(ifd, 1)", "fchmod(ifd, 32768)", "fchmod(ifd, 61440)", "fchmod(ifd, inptr)", "fchmod(ifd, insize)", "fchmod(ifd, outcnt)", "fputc(ifd, 0)", "fputc_unlocked(ifd, 0)", "fstat(ifd, 0)", "fstat64(ifd, 0)", "ftruncate(ifd, -1)", "ftruncate(ifd, 0)", "ftruncate(ifd, 1)", "ftruncate(ifd, 32768)", "ftruncate(ifd, 61440)", "ftruncate(ifd, bytes_in)", "ftruncate(ifd, bytes_out)", "ftruncate(ifd, header_bytes)", "ftruncate(ifd, ifile_size)", "ftruncate(ifd, total_in)", "ftruncate(ifd, total_out)", "ftruncate64(ifd, -1)", "ftruncate64(ifd, 0)", "ftruncate64(ifd, 1)", "ftruncate64(ifd, 32768)", "ftruncate64(ifd, 61440)", "ftruncate64(ifd, bytes_in)", "ftruncate64(ifd, bytes_out)", "ftruncate64(ifd, header_bytes)", "ftruncate64(ifd, ifile_size)", "ftruncate64(ifd, total_in)", "ftruncate64(ifd, total_out)", "futimens(ifd, 0)", "getgroups(ifd, 0)", "isalnum_l(ifd, 0)", "isalpha_l(ifd, 0)", "isblank_l(ifd, 0)", "iscntrl_l(ifd, 0)", "isctype(ifd, -1)", "isctype(ifd, 0)", "isctype(ifd, 1)", "isctype(ifd, 32768)", "isctype(ifd, 61440)", "isctype(ifd, _gl_warn_on_use)", "isctype(ifd, ascii)", "isctype(ifd, block_mode)", "isctype(ifd, decompress)", "isctype(ifd, decrypt)", "isctype(ifd, do_lzw)", "isctype(ifd, exit_code)", "isctype(ifd, exiting_signal)", "isctype(ifd, force)", "isctype(ifd, foreground)", "isctype(ifd, ifd)", "isctype(ifd, last_member)", "isctype(ifd, level)", "isctype(ifd, list)", "isctype(ifd, maxbits)", "isctype(ifd, method)", "isctype(ifd, no_name)", "isctype(ifd, no_time)", "isctype(ifd, ofd)", "isctype(ifd, part_nb)", "isctype(ifd, quiet)", "isctype(ifd, recursive)", "isctype(ifd, remove_ofname_fd)", "isctype(ifd, save_orig_name)", "isctype(ifd, test)", "isctype(ifd, to_stdout)", "isctype(ifd, verbose)", "isdigit_l(ifd, 0)", "isgraph_l(ifd, 0)", "islower_l(ifd, 0)", "isprint_l(ifd, 0)", "ispunct_l(ifd, 0)", "isspace_l(ifd, 0)", "isupper_l(ifd, 0)", "isxdigit_l(ifd, 0)", "kill(ifd, -1)", "kill(ifd, 0)", "kill(ifd, 1)", "kill(ifd, 32768)", "kill(ifd, 61440)", "kill(ifd, _gl_warn_on_use)", "kill(ifd, ascii)", "kill(ifd, block_mode)", "kill(ifd, decompress)", "kill(ifd, decrypt)", "kill(ifd, do_lzw)", "kill(ifd, exit_code)", "kill(ifd, exiting_signal)", "kill(ifd, force)", "kill(ifd, foreground)", "kill(ifd, ifd)", "kill(ifd, last_member)", "kill(ifd, level)", "kill(ifd, list)", "kill(ifd, maxbits)", "kill(ifd, method)", "kill(ifd, no_name)", "kill(ifd, no_time)", "kill(ifd, ofd)", "kill(ifd, part_nb)", "kill(ifd, quiet)", "kill(ifd, recursive)", "kill(ifd, remove_ofname_fd)", "kill(ifd, save_orig_name)", "kill(ifd, test)", "kill(ifd, to_stdout)", "kill(ifd, verbose)", "killpg(ifd, -1)", "killpg(ifd, 0)", "killpg(ifd, 1)", "killpg(ifd, 32768)", "killpg(ifd, 61440)", "killpg(ifd, _gl_warn_on_use)", "killpg(ifd, ascii)", "killpg(ifd, block_mode)", "killpg(ifd, decompress)", "killpg(ifd, decrypt)", "killpg(ifd, do_lzw)", "killpg(ifd, exit_code)", "killpg(ifd, exiting_signal)", "killpg(ifd, force)", "killpg(ifd, foreground)", "killpg(ifd, ifd)", "killpg(ifd, last_member)", "killpg(ifd, level)", "killpg(ifd, list)", "killpg(ifd, maxbits)", "killpg(ifd, method)", "killpg(ifd, no_name)", "killpg(ifd, no_time)", "killpg(ifd, ofd)", "killpg(ifd, part_nb)", "killpg(ifd, quiet)", "killpg(ifd, recursive)", "killpg(ifd, remove_ofname_fd)", "killpg(ifd, save_orig_name)", "killpg(ifd, test)", "killpg(ifd, to_stdout)", "killpg(ifd, verbose)", "lzw(ifd, -1)", "lzw(ifd, 0)", "lzw(ifd, 1)", "lzw(ifd, 32768)", "lzw(ifd, 61440)", "lzw(ifd, _gl_warn_on_use)", "lzw(ifd, ascii)", "lzw(ifd, block_mode)", "lzw(ifd, decompress)", "lzw(ifd, decrypt)", "lzw(ifd, do_lzw)", "lzw(ifd, exit_code)", "lzw(ifd, exiting_signal)", "lzw(ifd, force)", "lzw(ifd, foreground)", "lzw(ifd, ifd)", "lzw(ifd, last_member)", "lzw(ifd, level)", "lzw(ifd, list)", "lzw(ifd, maxbits)", "lzw(ifd, method)", "lzw(ifd, no_name)", "lzw(ifd, no_time)", "lzw(ifd, ofd)", "lzw(ifd, part_nb)", "lzw(ifd, quiet)", "lzw(ifd, recursive)", "lzw(ifd, remove_ofname_fd)", "lzw(ifd, save_orig_name)", "lzw(ifd, test)", "lzw(ifd, to_stdout)", "lzw(ifd, verbose)", "main(ifd, 0)", "main(ifd, args)", "putc(ifd, 0)", "putc_unlocked(ifd, 0)", "putw(ifd, 0)", "setpgid(ifd, -1)", "setpgid(ifd, 0)", "setpgid(ifd, 1)", "setpgid(ifd, 32768)", "setpgid(ifd, 61440)", "setpgid(ifd, _gl_warn_on_use)", "setpgid(ifd, ascii)", "setpgid(ifd, block_mode)", "setpgid(ifd, decompress)", "setpgid(ifd, decrypt)", "setpgid(ifd, do_lzw)", "setpgid(ifd, exit_code)", "setpgid(ifd, exiting_signal)", "setpgid(ifd, force)", "setpgid(ifd, foreground)", "setpgid(ifd, ifd)", "setpgid(ifd, last_member)", "setpgid(ifd, level)", "setpgid(ifd, list)", "setpgid(ifd, maxbits)", "setpgid(ifd, method)", "setpgid(ifd, no_name)", "setpgid(ifd, no_time)", "setpgid(ifd, ofd)", "setpgid(ifd, part_nb)", "setpgid(ifd, quiet)", "setpgid(ifd, recursive)", "setpgid(ifd, remove_ofname_fd)", "setpgid(ifd, save_orig_name)", "setpgid(ifd, test)", "setpgid(ifd, to_stdout)", "setpgid(ifd, verbose)", "siginterrupt(ifd, -1)", "siginterrupt(ifd, 0)", "siginterrupt(ifd, 1)", "siginterrupt(ifd, 32768)", "siginterrupt(ifd, 61440)", "siginterrupt(ifd, _gl_warn_on_use)", "siginterrupt(ifd, ascii)", "siginterrupt(ifd, block_mode)", "siginterrupt(ifd, decompress)", "siginterrupt(ifd, decrypt)", "siginterrupt(ifd, do_lzw)", "siginterrupt(ifd, exit_code)", "siginterrupt(ifd, exiting_signal)", "siginterrupt(ifd, force)", "siginterrupt(ifd, foreground)", "siginterrupt(ifd, ifd)", "siginterrupt(ifd, last_member)", "siginterrupt(ifd, level)", "siginterrupt(ifd, list)", "siginterrupt(ifd, maxbits)", "siginterrupt(ifd, method)", "siginterrupt(ifd, no_name)", "siginterrupt(ifd, no_time)", "siginterrupt(ifd, ofd)", "siginterrupt(ifd, part_nb)", "siginterrupt(ifd, quiet)", "siginterrupt(ifd, recursive)", "siginterrupt(ifd, remove_ofname_fd)", "siginterrupt(ifd, save_orig_name)", "siginterrupt(ifd, test)", "siginterrupt(ifd, to_stdout)", "siginterrupt(ifd, verbose)", "tcsetpgrp(ifd, -1)", "tcsetpgrp(ifd, 0)", "tcsetpgrp(ifd, 1)", "tcsetpgrp(ifd, 32768)", "tcsetpgrp(ifd, 61440)", "tcsetpgrp(ifd, _gl_warn_on_use)", "tcsetpgrp(ifd, ascii)", "tcsetpgrp(ifd, block_mode)", "tcsetpgrp(ifd, decompress)", "tcsetpgrp(ifd, decrypt)", "tcsetpgrp(ifd, do_lzw)", "tcsetpgrp(ifd, exit_code)", "tcsetpgrp(ifd, exiting_signal)", "tcsetpgrp(ifd, force)", "tcsetpgrp(ifd, foreground)", "tcsetpgrp(ifd, ifd)", "tcsetpgrp(ifd, last_member)", "tcsetpgrp(ifd, level)", "tcsetpgrp(ifd, list)", "tcsetpgrp(ifd, maxbits)", "tcsetpgrp(ifd, method)", "tcsetpgrp(ifd, no_name)", "tcsetpgrp(ifd, no_time)", "tcsetpgrp(ifd, ofd)", "tcsetpgrp(ifd, part_nb)", "tcsetpgrp(ifd, quiet)", "tcsetpgrp(ifd, recursive)", "tcsetpgrp(ifd, remove_ofname_fd)", "tcsetpgrp(ifd, save_orig_name)", "tcsetpgrp(ifd, test)", "tcsetpgrp(ifd, to_stdout)", "tcsetpgrp(ifd, verbose)", "tolower_l(ifd, 0)", "toupper_l(ifd, 0)", "ungetc(ifd, 0)", "unlzh(ifd, -1)", "unlzh(ifd, 0)", "unlzh(ifd, 1)", "unlzh(ifd, 32768)", "unlzh(ifd, 61440)", "unlzh(ifd, _gl_warn_on_use)", "unlzh(ifd, ascii)", "unlzh(ifd, block_mode)", "unlzh(ifd, decompress)", "unlzh(ifd, decrypt)", "unlzh(ifd, do_lzw)", "unlzh(ifd, exit_code)", "unlzh(ifd, exiting_signal)", "unlzh(ifd, force)", "unlzh(ifd, foreground)", "unlzh(ifd, ifd)", "unlzh(ifd, last_member)", "unlzh(ifd, level)", "unlzh(ifd, list)", "unlzh(ifd, maxbits)", "unlzh(ifd, method)", "unlzh(ifd, no_name)", "unlzh(ifd, no_time)", "unlzh(ifd, ofd)", "unlzh(ifd, part_nb)", "unlzh(ifd, quiet)", "unlzh(ifd, recursive)", "unlzh(ifd, remove_ofname_fd)", "unlzh(ifd, save_orig_name)", "unlzh(ifd, test)", "unlzh(ifd, to_stdout)", "unlzh(ifd, verbose)", "unlzw(ifd, -1)", "unlzw(ifd, 0)", "unlzw(ifd, 1)", "unlzw(ifd, 32768)", "unlzw(ifd, 61440)", "unlzw(ifd, _gl_warn_on_use)", "unlzw(ifd, ascii)", "unlzw(ifd, block_mode)", "unlzw(ifd, decompress)", "unlzw(ifd, decrypt)", "unlzw(ifd, do_lzw)", "unlzw(ifd, exit_code)", "unlzw(ifd, exiting_signal)", "unlzw(ifd, force)", "unlzw(ifd, foreground)", "unlzw(ifd, ifd)", "unlzw(ifd, last_member)", "unlzw(ifd, level)", "unlzw(ifd, list)", "unlzw(ifd, maxbits)", "unlzw(ifd, method)", "unlzw(ifd, no_name)", "unlzw(ifd, no_time)", "unlzw(ifd, ofd)", "unlzw(ifd, part_nb)", "unlzw(ifd, quiet)", "unlzw(ifd, recursive)", "unlzw(ifd, remove_ofname_fd)", "unlzw(ifd, save_orig_name)", "unlzw(ifd, test)", "unlzw(ifd, to_stdout)", "unlzw(ifd, verbose)", "unpack(ifd, -1)", "unpack(ifd, 0)", "unpack(ifd, 1)", "unpack(ifd, 32768)", "unpack(ifd, 61440)", "unpack(ifd, _gl_warn_on_use)", "unpack(ifd, ascii)", "unpack(ifd, block_mode)", "unpack(ifd, decompress)", "unpack(ifd, decrypt)", "unpack(ifd, do_lzw)", "unpack(ifd, exit_code)", "unpack(ifd, exiting_signal)", "unpack(ifd, force)", "unpack(ifd, foreground)", "unpack(ifd, ifd)", "unpack(ifd, last_member)", "unpack(ifd, level)", "unpack(ifd, list)", "unpack(ifd, maxbits)", "unpack(ifd, method)", "unpack(ifd, no_name)", "unpack(ifd, no_time)", "unpack(ifd, ofd)", "unpack(ifd, part_nb)", "unpack(ifd, quiet)", "unpack(ifd, recursive)", "unpack(ifd, remove_ofname_fd)", "unpack(ifd, save_orig_name)", "unpack(ifd, test)", "unpack(ifd, to_stdout)", "unpack(ifd, verbose)", "unzip(ifd, -1)", "unzip(ifd, 0)", "unzip(ifd, 1)", "unzip(ifd, 32768)", "unzip(ifd, 61440)", "unzip(ifd, _gl_warn_on_use)", "unzip(ifd, ascii)", "unzip(ifd, block_mode)", "unzip(ifd, decompress)", "unzip(ifd, decrypt)", "unzip(ifd, do_lzw)", "unzip(ifd, exit_code)", "unzip(ifd, exiting_signal)", "unzip(ifd, force)", "unzip(ifd, foreground)", "unzip(ifd, ifd)", "unzip(ifd, last_member)", "unzip(ifd, level)", "unzip(ifd, list)", "unzip(ifd, maxbits)", "unzip(ifd, method)", "unzip(ifd, no_name)", "unzip(ifd, no_time)", "unzip(ifd, ofd)", "unzip(ifd, part_nb)", "unzip(ifd, quiet)", "unzip(ifd, recursive)", "unzip(ifd, remove_ofname_fd)", "unzip(ifd, save_orig_name)", "unzip(ifd, test)", "unzip(ifd, to_stdout)", "unzip(ifd, verbose)", "zip(ifd, -1)", "zip(ifd, 0)", "zip(ifd, 1)", "zip(ifd, 32768)", "zip(ifd, 61440)", "zip(ifd, _gl_warn_on_use)", "zip(ifd, ascii)", "zip(ifd, block_mode)", "zip(ifd, decompress)", "zip(ifd, decrypt)", "zip(ifd, do_lzw)", "zip(ifd, exit_code)", "zip(ifd, exiting_signal)", "zip(ifd, force)", "zip(ifd, foreground)", "zip(ifd, ifd)", "zip(ifd, last_member)", "zip(ifd, level)", "zip(ifd, list)", "zip(ifd, maxbits)", "zip(ifd, method)", "zip(ifd, no_name)", "zip(ifd, no_time)", "zip(ifd, ofd)", "zip(ifd, part_nb)", "zip(ifd, quiet)", "zip(ifd, recursive)", "zip(ifd, remove_ofname_fd)", "zip(ifd, save_orig_name)", "zip(ifd, test)", "zip(ifd, to_stdout)", "zip(ifd, verbose)", "{\n}\n", "method = __getpgid(ifd)", "method = _tolower(ifd)", "method = _toupper(ifd)", "method = abs(ifd)", "method = check_zipfile(ifd)", "method = close(ifd)", "method = dup(ifd)", "method = dysize(ifd)", "method = fchdir(ifd)", "method = fdatasync(ifd)", "method = ffs(ifd)", "method = fill_inbuf(ifd)", "method = fsync(ifd)", "method = get_method(ifd)", "method = getpgid(ifd)", "method = getsid(ifd)", "method = grantpt(ifd)", "method = gsignal(ifd)", "method = isalnum(ifd)", "method = isalpha(ifd)", "method = isascii(ifd)", "method = isatty(ifd)", "method = isblank(ifd)", "method = iscntrl(ifd)", "method = isdigit(ifd)", "method = isgraph(ifd)", "method = islower(ifd)", "method = isprint(ifd)", "method = ispunct(ifd)", "method = isspace(ifd)", "method = isupper(ifd)", "method = isxdigit(ifd)", "method = nice(ifd)", "method = posix_openpt(ifd)", "method = putchar(ifd)", "method = putchar_unlocked(ifd)", "method = raise(ifd)", "method = sigblock(ifd)", "method = sighold(ifd)", "method = sigignore(ifd)", "method = sigpause(ifd)", "method = sigrelse(ifd)", "method = sigsetmask(ifd)", "method = syncfs(ifd)", "method = tcgetpgrp(ifd)", "method = toascii(ifd)", "method = tolower(ifd)", "method = toupper(ifd)", "method = unlockpt(ifd)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8878923930486131, -4.8368491340486131, -4.8878923930486131, -4.8368491340486131, -5.9547307610486131, -5.380285361048613, -5.380285361048613, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -5.9547307610486131, -6.3916957610486129, -6.3916957610486129, -5.9547307610486131]
								}, {
									"case":	2,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	3,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	4,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	5,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	6,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	7,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	8,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	9,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	10,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	11,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	12,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	13,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	14,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	15,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	16,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	17,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	18,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	19,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	20,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	21,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	22,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	23,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	24,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	25,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	26,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	27,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	28,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	29,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	30,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	31,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	32,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	33,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	34,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	35,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	36,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	37,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	38,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	39,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	40,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	41,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	42,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	43,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	44,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	45,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	46,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	47,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	48,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	49,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	50,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	51,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	52,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	53,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	54,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	55,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	56,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	57,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	58,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	59,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	60,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	61,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	62,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	63,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	64,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	65,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	66,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	67,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	68,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	69,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	70,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	71,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	72,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	73,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	74,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	75,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	76,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	77,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	78,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	79,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	80,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	81,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	82,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	83,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	84,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	85,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	86,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	87,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	88,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	89,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	90,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	91,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	92,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	93,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	94,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	95,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	96,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	97,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	98,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	99,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	100,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	101,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	102,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	103,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	104,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	105,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	106,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	107,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	108,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	109,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	110,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	111,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	112,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	113,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	114,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	115,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	116,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	117,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	118,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	119,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	120,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	121,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	122,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	123,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	124,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	125,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	126,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	127,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	128,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	129,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	130,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	131,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	132,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	133,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	134,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	135,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	136,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	137,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	138,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	139,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	140,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	141,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	142,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	143,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	144,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	145,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	146,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	147,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	148,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	149,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	150,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	151,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	152,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	153,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	154,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	155,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	156,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	157,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	158,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	159,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	160,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	161,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	162,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	163,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	164,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	165,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	166,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	167,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	168,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	169,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	170,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	171,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	172,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	173,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	174,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	175,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	176,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	177,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	178,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	179,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	180,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	181,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	182,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	183,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	184,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	185,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	186,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	187,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	188,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	189,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	190,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	191,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	192,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	193,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	194,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	195,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	196,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	197,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	198,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	199,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	200,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	201,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	202,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	203,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	204,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	205,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	206,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	207,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	208,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	209,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	210,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	211,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	212,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	213,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	214,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	215,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	216,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	217,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	218,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	219,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	220,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	221,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	222,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	223,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	224,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	225,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	226,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	227,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	228,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	229,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	230,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	231,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	232,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	233,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	234,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	235,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	236,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	237,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	238,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	239,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	240,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	241,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	242,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	243,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	244,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	245,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	246,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	247,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	248,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	249,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	250,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	251,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	252,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	253,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	254,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	255,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	256,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	257,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	258,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	259,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	260,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	261,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	262,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	263,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	264,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	265,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	266,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	267,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	268,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	269,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	270,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	271,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	272,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	273,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	274,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	275,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	276,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	277,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	278,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	279,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	280,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	281,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	282,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	283,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	284,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	285,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	286,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	287,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	288,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	289,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	290,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	291,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	292,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	293,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	294,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	295,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	296,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	297,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	298,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	299,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	300,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	301,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	302,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	303,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	304,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	305,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	306,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	307,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	308,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	309,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	310,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	311,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	312,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	313,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	314,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	315,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	316,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	317,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	318,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	319,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	320,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	321,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	322,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	323,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	324,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	325,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	326,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	327,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	328,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	329,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	330,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	331,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	332,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	333,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	334,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	335,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	336,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	337,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	338,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	339,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	340,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	341,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	342,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	343,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	344,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	345,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	346,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	347,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	348,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	349,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	350,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	351,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	352,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	353,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	354,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	355,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	356,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	357,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	358,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	359,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	360,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	361,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	362,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	363,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	364,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	365,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	366,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	367,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	368,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	369,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	370,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	371,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	372,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	373,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	374,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	375,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	376,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	377,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	378,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	379,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	380,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	381,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	382,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	383,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	384,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	385,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	386,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	387,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	388,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	389,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	390,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	391,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	392,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	393,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	394,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	395,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	396,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	397,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	398,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	399,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	400,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	401,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	402,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	403,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	404,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	405,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	406,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	407,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	408,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	409,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	410,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	411,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	412,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	413,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	414,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	415,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	416,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	417,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	418,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	419,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	420,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	421,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	422,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	423,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	424,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	425,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	426,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	427,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	428,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	429,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	430,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	431,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	432,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	433,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	434,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	435,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	436,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	437,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	438,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	439,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	440,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	441,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	442,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	443,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	444,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	445,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	446,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	447,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	448,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	449,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	450,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	451,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	452,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	453,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	454,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	455,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	456,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	457,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	458,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	459,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	460,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	461,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	462,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	463,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	464,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	465,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	466,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	467,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	468,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	469,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	470,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	471,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	472,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	473,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	474,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	475,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	476,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	477,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	478,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	479,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	480,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	481,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	482,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	483,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	484,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	485,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	486,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	487,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	488,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	489,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	490,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	491,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	492,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	493,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	494,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	495,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	496,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	497,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	498,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	499,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	500,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	501,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	502,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	503,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	504,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	505,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	506,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	507,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	508,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	509,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	510,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	511,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	512,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	513,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	514,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	515,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	516,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	517,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	518,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	519,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	520,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	521,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	522,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	523,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	524,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	525,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	526,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	527,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	528,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	529,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	530,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	531,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	532,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	533,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	534,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	535,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	536,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	537,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	538,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	539,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	540,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	541,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	542,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	543,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	544,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	545,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	546,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	547,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	548,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	549,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	550,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	551,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	552,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	553,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	554,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	555,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	556,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	557,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	558,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	559,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	560,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	561,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	562,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	563,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	564,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	565,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	566,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	567,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	568,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	569,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	570,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	571,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	572,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	573,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	574,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	575,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	576,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	577,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	578,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	579,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	580,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	581,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	582,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	583,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	584,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	585,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	586,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	587,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	588,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	589,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	590,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	591,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	592,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	593,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	594,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	595,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	596,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	597,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	598,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	599,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	600,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	601,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	602,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	603,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	604,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	605,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	606,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	607,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	608,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	609,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	610,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	611,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	612,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	613,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	614,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	615,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	616,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	617,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	618,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	619,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	620,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	621,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	622,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	623,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	624,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	625,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	626,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	627,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	628,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	629,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	630,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	631,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	632,
									"scores":	[-4.3968879810486134]
								}]
						}]
				}, {
					"line":	643,
					"switches":	[{
							"switch":	51,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	644,
							"begin_column":	7,
							"end_line":	644,
							"end_column":	7,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L644\", 28, &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(ascii), sizeof (ascii), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.376685273731094]
								}, {
									"case":	2,
									"scores":	[-4.376685273731094]
								}, {
									"case":	3,
									"scores":	[-4.376685273731094]
								}, {
									"case":	4,
									"scores":	[-4.376685273731094]
								}, {
									"case":	5,
									"scores":	[-4.376685273731094]
								}, {
									"case":	6,
									"scores":	[-4.376685273731094]
								}, {
									"case":	7,
									"scores":	[-4.376685273731094]
								}, {
									"case":	8,
									"scores":	[-4.376685273731094]
								}, {
									"case":	9,
									"scores":	[-4.376685273731094]
								}, {
									"case":	10,
									"scores":	[-4.376685273731094]
								}, {
									"case":	11,
									"scores":	[-4.376685273731094]
								}, {
									"case":	12,
									"scores":	[-4.376685273731094]
								}, {
									"case":	13,
									"scores":	[-4.376685273731094]
								}, {
									"case":	14,
									"scores":	[-4.376685273731094]
								}, {
									"case":	15,
									"scores":	[-4.376685273731094]
								}, {
									"case":	16,
									"scores":	[-4.376685273731094]
								}, {
									"case":	17,
									"scores":	[-4.376685273731094]
								}, {
									"case":	18,
									"scores":	[-4.376685273731094]
								}, {
									"case":	19,
									"scores":	[-4.376685273731094]
								}, {
									"case":	20,
									"scores":	[-4.376685273731094]
								}, {
									"case":	21,
									"scores":	[-4.376685273731094]
								}, {
									"case":	22,
									"scores":	[-4.376685273731094]
								}, {
									"case":	23,
									"scores":	[-4.376685273731094]
								}, {
									"case":	24,
									"scores":	[-4.376685273731094]
								}, {
									"case":	25,
									"scores":	[-4.376685273731094]
								}, {
									"case":	26,
									"scores":	[-4.376685273731094]
								}, {
									"case":	27,
									"scores":	[-4.376685273731094]
								}, {
									"case":	28,
									"scores":	[-4.376685273731094]
								}, {
									"case":	29,
									"scores":	[-4.376685273731094]
								}, {
									"case":	30,
									"scores":	[-4.376685273731094]
								}, {
									"case":	31,
									"scores":	[-4.376685273731094]
								}, {
									"case":	32,
									"scores":	[-4.376685273731094]
								}, {
									"case":	33,
									"scores":	[-4.376685273731094]
								}, {
									"case":	34,
									"scores":	[-4.376685273731094]
								}, {
									"case":	35,
									"scores":	[-4.376685273731094]
								}, {
									"case":	36,
									"scores":	[-4.376685273731094]
								}, {
									"case":	37,
									"scores":	[-4.376685273731094]
								}, {
									"case":	38,
									"scores":	[-4.376685273731094]
								}, {
									"case":	39,
									"scores":	[-4.376685273731094]
								}, {
									"case":	40,
									"scores":	[-4.376685273731094]
								}, {
									"case":	41,
									"scores":	[-4.376685273731094]
								}, {
									"case":	42,
									"scores":	[-4.376685273731094]
								}, {
									"case":	43,
									"scores":	[-4.376685273731094]
								}, {
									"case":	44,
									"scores":	[-4.376685273731094]
								}, {
									"case":	45,
									"scores":	[-4.376685273731094]
								}, {
									"case":	46,
									"scores":	[-4.376685273731094]
								}, {
									"case":	47,
									"scores":	[-4.376685273731094]
								}, {
									"case":	48,
									"scores":	[-4.376685273731094]
								}, {
									"case":	49,
									"scores":	[-4.376685273731094]
								}, {
									"case":	50,
									"scores":	[-4.376685273731094]
								}, {
									"case":	51,
									"scores":	[-4.376685273731094]
								}, {
									"case":	52,
									"scores":	[-4.376685273731094]
								}, {
									"case":	53,
									"scores":	[-4.376685273731094]
								}, {
									"case":	54,
									"scores":	[-4.376685273731094]
								}, {
									"case":	55,
									"scores":	[-4.376685273731094]
								}, {
									"case":	56,
									"scores":	[-4.376685273731094]
								}, {
									"case":	57,
									"scores":	[-4.376685273731094]
								}, {
									"case":	58,
									"scores":	[-4.376685273731094]
								}, {
									"case":	59,
									"scores":	[-4.376685273731094]
								}, {
									"case":	60,
									"scores":	[-4.376685273731094]
								}, {
									"case":	61,
									"scores":	[-4.376685273731094]
								}, {
									"case":	62,
									"scores":	[-4.376685273731094]
								}, {
									"case":	63,
									"scores":	[-4.376685273731094]
								}, {
									"case":	64,
									"scores":	[-4.376685273731094]
								}, {
									"case":	65,
									"scores":	[-4.376685273731094]
								}, {
									"case":	66,
									"scores":	[-4.376685273731094]
								}, {
									"case":	67,
									"scores":	[-4.376685273731094]
								}, {
									"case":	68,
									"scores":	[-4.376685273731094]
								}, {
									"case":	69,
									"scores":	[-4.376685273731094]
								}, {
									"case":	70,
									"scores":	[-4.376685273731094]
								}, {
									"case":	71,
									"scores":	[-4.376685273731094]
								}, {
									"case":	72,
									"scores":	[-4.376685273731094]
								}, {
									"case":	73,
									"scores":	[-4.376685273731094]
								}, {
									"case":	74,
									"scores":	[-4.376685273731094]
								}, {
									"case":	75,
									"scores":	[-4.376685273731094]
								}, {
									"case":	76,
									"scores":	[-4.376685273731094]
								}, {
									"case":	77,
									"scores":	[-4.376685273731094]
								}, {
									"case":	78,
									"scores":	[-4.376685273731094]
								}, {
									"case":	79,
									"scores":	[-4.376685273731094]
								}, {
									"case":	80,
									"scores":	[-4.376685273731094]
								}, {
									"case":	81,
									"scores":	[-4.376685273731094]
								}, {
									"case":	82,
									"scores":	[-4.376685273731094]
								}, {
									"case":	83,
									"scores":	[-4.376685273731094]
								}, {
									"case":	84,
									"scores":	[-4.376685273731094]
								}, {
									"case":	85,
									"scores":	[-4.376685273731094]
								}, {
									"case":	86,
									"scores":	[-4.376685273731094]
								}, {
									"case":	87,
									"scores":	[-4.376685273731094]
								}, {
									"case":	88,
									"scores":	[-4.376685273731094]
								}, {
									"case":	89,
									"scores":	[-4.376685273731094]
								}, {
									"case":	90,
									"scores":	[-4.376685273731094]
								}, {
									"case":	91,
									"scores":	[-4.376685273731094]
								}, {
									"case":	92,
									"scores":	[-4.376685273731094]
								}, {
									"case":	93,
									"scores":	[-4.376685273731094]
								}, {
									"case":	94,
									"scores":	[-4.376685273731094]
								}, {
									"case":	95,
									"scores":	[-4.376685273731094]
								}, {
									"case":	96,
									"scores":	[-4.376685273731094]
								}, {
									"case":	97,
									"scores":	[-4.376685273731094]
								}, {
									"case":	98,
									"scores":	[-4.376685273731094]
								}, {
									"case":	99,
									"scores":	[-4.376685273731094]
								}, {
									"case":	100,
									"scores":	[-4.376685273731094]
								}, {
									"case":	101,
									"scores":	[-4.376685273731094]
								}, {
									"case":	102,
									"scores":	[-4.376685273731094]
								}, {
									"case":	103,
									"scores":	[-4.376685273731094]
								}, {
									"case":	104,
									"scores":	[-4.376685273731094]
								}, {
									"case":	105,
									"scores":	[-4.376685273731094]
								}, {
									"case":	106,
									"scores":	[-4.376685273731094]
								}, {
									"case":	107,
									"scores":	[-4.376685273731094]
								}, {
									"case":	108,
									"scores":	[-4.376685273731094]
								}, {
									"case":	109,
									"scores":	[-4.376685273731094]
								}, {
									"case":	110,
									"scores":	[-4.376685273731094]
								}, {
									"case":	111,
									"scores":	[-4.376685273731094]
								}, {
									"case":	112,
									"scores":	[-4.376685273731094]
								}, {
									"case":	113,
									"scores":	[-4.376685273731094]
								}, {
									"case":	114,
									"scores":	[-4.376685273731094]
								}, {
									"case":	115,
									"scores":	[-4.376685273731094]
								}, {
									"case":	116,
									"scores":	[-4.376685273731094]
								}, {
									"case":	117,
									"scores":	[-4.376685273731094]
								}, {
									"case":	118,
									"scores":	[-4.376685273731094]
								}, {
									"case":	119,
									"scores":	[-4.376685273731094]
								}, {
									"case":	120,
									"scores":	[-4.376685273731094]
								}, {
									"case":	121,
									"scores":	[-4.376685273731094]
								}, {
									"case":	122,
									"scores":	[-4.376685273731094]
								}, {
									"case":	123,
									"scores":	[-4.376685273731094]
								}, {
									"case":	124,
									"scores":	[-4.376685273731094]
								}, {
									"case":	125,
									"scores":	[-4.376685273731094]
								}, {
									"case":	126,
									"scores":	[-4.376685273731094]
								}, {
									"case":	127,
									"scores":	[-4.376685273731094]
								}, {
									"case":	128,
									"scores":	[-4.376685273731094]
								}, {
									"case":	129,
									"scores":	[-4.376685273731094]
								}, {
									"case":	130,
									"scores":	[-4.376685273731094]
								}, {
									"case":	131,
									"scores":	[-4.376685273731094]
								}, {
									"case":	132,
									"scores":	[-4.376685273731094]
								}, {
									"case":	133,
									"scores":	[-4.376685273731094]
								}, {
									"case":	134,
									"scores":	[-4.376685273731094]
								}, {
									"case":	135,
									"scores":	[-4.376685273731094]
								}, {
									"case":	136,
									"scores":	[-4.376685273731094]
								}, {
									"case":	137,
									"scores":	[-4.376685273731094]
								}, {
									"case":	138,
									"scores":	[-4.376685273731094]
								}, {
									"case":	139,
									"scores":	[-4.376685273731094]
								}, {
									"case":	140,
									"scores":	[-4.376685273731094]
								}, {
									"case":	141,
									"scores":	[-4.376685273731094]
								}, {
									"case":	142,
									"scores":	[-4.376685273731094]
								}, {
									"case":	143,
									"scores":	[-4.376685273731094]
								}, {
									"case":	144,
									"scores":	[-4.376685273731094]
								}, {
									"case":	145,
									"scores":	[-4.376685273731094]
								}, {
									"case":	146,
									"scores":	[-4.376685273731094]
								}, {
									"case":	147,
									"scores":	[-4.376685273731094]
								}, {
									"case":	148,
									"scores":	[-4.376685273731094]
								}, {
									"case":	149,
									"scores":	[-4.376685273731094]
								}, {
									"case":	150,
									"scores":	[-4.376685273731094]
								}, {
									"case":	151,
									"scores":	[-4.376685273731094]
								}, {
									"case":	152,
									"scores":	[-4.376685273731094]
								}, {
									"case":	153,
									"scores":	[-4.376685273731094]
								}, {
									"case":	154,
									"scores":	[-4.376685273731094]
								}, {
									"case":	155,
									"scores":	[-4.376685273731094]
								}, {
									"case":	156,
									"scores":	[-4.376685273731094]
								}, {
									"case":	157,
									"scores":	[-4.376685273731094]
								}, {
									"case":	158,
									"scores":	[-4.376685273731094]
								}, {
									"case":	159,
									"scores":	[-4.376685273731094]
								}, {
									"case":	160,
									"scores":	[-4.376685273731094]
								}, {
									"case":	161,
									"scores":	[-4.376685273731094]
								}, {
									"case":	162,
									"scores":	[-4.376685273731094]
								}, {
									"case":	163,
									"scores":	[-4.376685273731094]
								}, {
									"case":	164,
									"scores":	[-4.376685273731094]
								}, {
									"case":	165,
									"scores":	[-4.376685273731094]
								}, {
									"case":	166,
									"scores":	[-4.376685273731094]
								}, {
									"case":	167,
									"scores":	[-4.376685273731094]
								}, {
									"case":	168,
									"scores":	[-4.376685273731094]
								}, {
									"case":	169,
									"scores":	[-4.376685273731094]
								}, {
									"case":	170,
									"scores":	[-4.376685273731094]
								}, {
									"case":	171,
									"scores":	[-4.376685273731094]
								}, {
									"case":	172,
									"scores":	[-4.376685273731094]
								}, {
									"case":	173,
									"scores":	[-4.376685273731094]
								}, {
									"case":	174,
									"scores":	[-4.376685273731094]
								}, {
									"case":	175,
									"scores":	[-4.376685273731094]
								}, {
									"case":	176,
									"scores":	[-4.376685273731094]
								}, {
									"case":	177,
									"scores":	[-4.376685273731094]
								}, {
									"case":	178,
									"scores":	[-4.376685273731094]
								}, {
									"case":	179,
									"scores":	[-4.376685273731094]
								}, {
									"case":	180,
									"scores":	[-4.376685273731094]
								}, {
									"case":	181,
									"scores":	[-4.376685273731094]
								}, {
									"case":	182,
									"scores":	[-4.376685273731094]
								}, {
									"case":	183,
									"scores":	[-4.376685273731094]
								}, {
									"case":	184,
									"scores":	[-4.376685273731094]
								}, {
									"case":	185,
									"scores":	[-4.376685273731094]
								}, {
									"case":	186,
									"scores":	[-4.376685273731094]
								}, {
									"case":	187,
									"scores":	[-4.376685273731094]
								}, {
									"case":	188,
									"scores":	[-4.376685273731094]
								}, {
									"case":	189,
									"scores":	[-4.376685273731094]
								}, {
									"case":	190,
									"scores":	[-4.376685273731094]
								}, {
									"case":	191,
									"scores":	[-4.376685273731094]
								}, {
									"case":	192,
									"scores":	[-4.376685273731094]
								}, {
									"case":	193,
									"scores":	[-4.376685273731094]
								}, {
									"case":	194,
									"scores":	[-4.376685273731094]
								}, {
									"case":	195,
									"scores":	[-4.376685273731094]
								}, {
									"case":	196,
									"scores":	[-4.376685273731094]
								}, {
									"case":	197,
									"scores":	[-4.376685273731094]
								}, {
									"case":	198,
									"scores":	[-4.376685273731094]
								}, {
									"case":	199,
									"scores":	[-4.376685273731094]
								}, {
									"case":	200,
									"scores":	[-4.376685273731094]
								}, {
									"case":	201,
									"scores":	[-4.376685273731094]
								}, {
									"case":	202,
									"scores":	[-4.376685273731094]
								}, {
									"case":	203,
									"scores":	[-4.376685273731094]
								}, {
									"case":	204,
									"scores":	[-4.376685273731094]
								}, {
									"case":	205,
									"scores":	[-4.376685273731094]
								}, {
									"case":	206,
									"scores":	[-4.376685273731094]
								}, {
									"case":	207,
									"scores":	[-4.376685273731094]
								}, {
									"case":	208,
									"scores":	[-4.376685273731094]
								}, {
									"case":	209,
									"scores":	[-4.376685273731094]
								}, {
									"case":	210,
									"scores":	[-4.376685273731094]
								}, {
									"case":	211,
									"scores":	[-4.376685273731094]
								}, {
									"case":	212,
									"scores":	[-4.376685273731094]
								}, {
									"case":	213,
									"scores":	[-4.376685273731094]
								}, {
									"case":	214,
									"scores":	[-4.376685273731094]
								}, {
									"case":	215,
									"scores":	[-4.376685273731094]
								}, {
									"case":	216,
									"scores":	[-4.376685273731094]
								}, {
									"case":	217,
									"scores":	[-4.376685273731094]
								}, {
									"case":	218,
									"scores":	[-4.376685273731094]
								}, {
									"case":	219,
									"scores":	[-4.376685273731094]
								}, {
									"case":	220,
									"scores":	[-4.376685273731094]
								}, {
									"case":	221,
									"scores":	[-4.376685273731094]
								}, {
									"case":	222,
									"scores":	[-4.376685273731094]
								}, {
									"case":	223,
									"scores":	[-4.376685273731094]
								}, {
									"case":	224,
									"scores":	[-4.376685273731094]
								}, {
									"case":	225,
									"scores":	[-4.376685273731094]
								}, {
									"case":	226,
									"scores":	[-4.376685273731094]
								}, {
									"case":	227,
									"scores":	[-4.376685273731094]
								}, {
									"case":	228,
									"scores":	[-4.376685273731094]
								}, {
									"case":	229,
									"scores":	[-4.376685273731094]
								}, {
									"case":	230,
									"scores":	[-4.376685273731094]
								}, {
									"case":	231,
									"scores":	[-4.376685273731094]
								}, {
									"case":	232,
									"scores":	[-4.376685273731094]
								}, {
									"case":	233,
									"scores":	[-4.376685273731094]
								}, {
									"case":	234,
									"scores":	[-4.376685273731094]
								}, {
									"case":	235,
									"scores":	[-4.376685273731094]
								}, {
									"case":	236,
									"scores":	[-4.376685273731094]
								}, {
									"case":	237,
									"scores":	[-4.376685273731094]
								}, {
									"case":	238,
									"scores":	[-4.376685273731094]
								}, {
									"case":	239,
									"scores":	[-4.376685273731094]
								}, {
									"case":	240,
									"scores":	[-4.376685273731094]
								}, {
									"case":	241,
									"scores":	[-4.376685273731094]
								}, {
									"case":	242,
									"scores":	[-4.376685273731094]
								}, {
									"case":	243,
									"scores":	[-4.497565986831094, -4.497565986831094, -7.4289948465310935, -6.6222560768310945, -6.6222560768310945, -7.4289948465310935, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.6213328768310937, -7.7107555768310938, -7.7107555768310938, -7.6213328768310937]
								}]
						}, {
							"switch":	52,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	644,
							"begin_column":	9,
							"end_line":	646,
							"end_column":	9,
							"patch_codes":	["if (__is_neg(\"\", \"L644\", 28, &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(ascii), sizeof (ascii), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    do_exit(exit_code);\n}\n", "if ((method < 0) || __is_neg(\"\", \"L644\", 28, &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(ascii), sizeof (ascii), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    do_exit(exit_code);\n}\n", "if ((method < 0) && !__is_neg(\"\", \"L644\", 28, &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(ascii), sizeof (ascii), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    do_exit(exit_code);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.9334541914281465, -2.9334541914281465, -4.5584776641281461, -4.1212364444281464, -4.1212364444281464, -4.5584776641281461, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -4.785980044428146, -5.2229450444281458, -5.2229450444281458, -4.785980044428146]
								}, {
									"case":	2,
									"scores":	[-2.4794341964281461, -2.4794341964281461, -4.1044576691281458, -3.6672164494281461, -3.6672164494281461, -4.1044576691281458, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.7689250494281463, -4.7689250494281463, -4.3319600494281456]
								}, {
									"case":	3,
									"scores":	[-2.4794341964281461, -2.4794341964281461, -4.1044576691281458, -3.6672164494281461, -3.6672164494281461, -4.1044576691281458, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.3319600494281456, -4.7689250494281463, -4.7689250494281463, -4.3319600494281456]
								}]
						}, {
							"switch":	53,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	644,
							"begin_column":	9,
							"end_line":	646,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L644\", 28, &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(ascii), sizeof (ascii), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (method < 0) {\n        do_exit(exit_code);\n    }\n", "if (!__is_neg(\"\", \"L644\", 28, &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(ascii), sizeof (ascii), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (method < 0)) {\n    do_exit(exit_code);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3923077207310941, -4.3923077207310941, -6.0173311934310938, -5.5800899737310941, -5.5800899737310941, -6.0173311934310938, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.2448335737310936, -6.6817985737310934, -6.6817985737310934, -6.2448335737310936]
								}, {
									"case":	2,
									"scores":	[-4.1625369647310935, -4.1625369647310935, -5.7875604374310941, -5.3503192177310943, -5.3503192177310943, -5.7875604374310941, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.0150628177310939, -6.4520278177310937, -6.4520278177310937, -6.0150628177310939]
								}]
						}]
				}, {
					"line":	641,
					"switches":	[{
							"switch":	47,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	642,
							"begin_column":	3,
							"end_line":	642,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L642\", 28, &(decompress), sizeof (decompress), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	2,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	3,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	4,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	5,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	6,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	7,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	8,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	9,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	10,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	11,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	12,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	13,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	14,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	15,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	16,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	17,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	18,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	19,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	20,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	21,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	22,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	23,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	24,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	25,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	26,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	27,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	28,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	29,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	30,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	31,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	32,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	33,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	34,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	35,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	36,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	37,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	38,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	39,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	40,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	41,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	42,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	43,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	44,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	45,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	46,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	47,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	48,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	49,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	50,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	51,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	52,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	53,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	54,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	55,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	56,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	57,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	58,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	59,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	60,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	61,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	62,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	63,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	64,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	65,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	66,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	67,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	68,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	69,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	70,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	71,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	72,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	73,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	74,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	75,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	76,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	77,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	78,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	79,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	80,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	81,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	82,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	83,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	84,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	85,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	86,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	87,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	88,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	89,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	90,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	91,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	92,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	93,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	94,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	95,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	96,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	97,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	98,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	99,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	100,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	101,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	102,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	103,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	104,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	105,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	106,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	107,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	108,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	109,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	110,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	111,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	112,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	113,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	114,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	115,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	116,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	117,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	118,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	119,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	120,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	121,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	122,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	123,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	124,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	125,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	126,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	127,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	128,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	129,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	130,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	131,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	132,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	133,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	134,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	135,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	136,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	137,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	138,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	139,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	140,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	141,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	142,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	143,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	144,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	145,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	146,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	147,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	148,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	149,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	150,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	151,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	152,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	153,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	154,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	155,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	156,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	157,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	158,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	159,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	160,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	161,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	162,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	163,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	164,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	165,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	166,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	167,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	168,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	169,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	170,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	171,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	172,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	173,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	174,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	175,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	176,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	177,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	178,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	179,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	180,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	181,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	182,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	183,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	184,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	185,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	186,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	187,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	188,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	189,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	190,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	191,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	192,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	193,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	194,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	195,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	196,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	197,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	198,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	199,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	200,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	201,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	202,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	203,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	204,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	205,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	206,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	207,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	208,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	209,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	210,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	211,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	212,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	213,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	214,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	215,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	216,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	217,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	218,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	219,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	220,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	221,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	222,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	223,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	224,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	225,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	226,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	227,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	228,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	229,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	230,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	231,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	232,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	233,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	234,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	235,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	236,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	237,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	238,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	239,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	240,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	241,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	242,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	243,
									"scores":	[-9.0550715743749759, -8.0764894115749755, -4.9157791843749763, -8.0764894115749755, -4.9157791843749763, -8.0559947743749767, -8.0559947743749767, -7.6556880623749759, -7.5162933743749765, -7.5162933743749765, -9.0550715743749759, -9.0550715743749759, -9.0550715743749759, -9.0550715743749759, -9.7238851693749755, -9.6988509391749762, -9.6988509391749762, -9.0550715743749759, -9.0550715743749759, -9.0550715743749759, -9.0550715743749759, -9.0550715743749759, -8.8968287743749759, -9.2993357743749758, -9.144494274374976, -9.144494274374976, -8.8968287743749759, -9.0550715743749759]
								}]
						}, {
							"switch":	48,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	642,
							"begin_column":	5,
							"end_line":	647,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L642\", 28, &(decompress), sizeof (decompress), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force))) {\n    method = get_method(ifd);\n    if (method < 0) {\n        do_exit(exit_code);\n    }\n}\n", "if ((decompress) || __is_neg(\"\", \"L642\", 28, &(decompress), sizeof (decompress), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force))) {\n    method = get_method(ifd);\n    if (method < 0) {\n        do_exit(exit_code);\n    }\n}\n", "if ((decompress) && !__is_neg(\"\", \"L642\", 28, &(decompress), sizeof (decompress), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force))) {\n    method = get_method(ifd);\n    if (method < 0) {\n        do_exit(exit_code);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0102096506281466, -4.3354776006281472, -4.1159425706281461, -4.3354776006281472, -4.1159425706281461, -5.3454660506281453, -5.3454660506281453, -6.6290835976281466, -6.4308577976281462, -6.4308577976281462, -6.0102096506281466, -6.0102096506281466, -6.0102096506281466, -6.0102096506281466, -6.8130161506281466, -6.5166257846281468, -6.5166257846281468, -6.0102096506281466, -6.0102096506281466, -6.0102096506281466, -6.0102096506281466, -6.0102096506281466, -6.0899312506281458, -6.4433895506281464, -6.4471746506281455, -6.4471746506281455, -6.0899312506281458, -6.0102096506281466]
								}, {
									"case":	2,
									"scores":	[-4.8178873054281457, -3.1431552554281463, -2.9236202254281469, -3.1431552554281463, -2.9236202254281469, -4.1531437054281461, -4.1531437054281461, -5.4367612524281457, -5.2385354524281453, -5.2385354524281453, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -5.6206938054281457, -5.3243034394281459, -5.3243034394281459, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8976089054281458, -5.2510672054281455, -5.2548523054281464, -5.2548523054281464, -4.8976089054281458, -4.8178873054281457]
								}, {
									"case":	3,
									"scores":	[-4.8178873054281457, -3.1431552554281463, -2.9236202254281469, -3.1431552554281463, -2.9236202254281469, -4.1531437054281461, -4.1531437054281461, -5.4367612524281457, -5.2385354524281453, -5.2385354524281453, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -5.6206938054281457, -5.3243034394281459, -5.3243034394281459, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8178873054281457, -4.8976089054281458, -5.2510672054281455, -5.2548523054281464, -5.2548523054281464, -4.8976089054281458, -4.8178873054281457]
								}]
						}, {
							"switch":	54,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	642,
							"begin_column":	5,
							"end_line":	647,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L642\", 28, &(decompress), sizeof (decompress), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)))\n    if (decompress) {\n        method = get_method(ifd);\n        if (method < 0) {\n            do_exit(exit_code);\n        }\n    }\n", "if (!__is_neg(\"\", \"L642\", 28, &(decompress), sizeof (decompress), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(bytes_in), sizeof (bytes_in), &(force), sizeof (force)) && (decompress)) {\n    method = get_method(ifd);\n    if (method < 0) {\n        do_exit(exit_code);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1980862732749751, -5.5233542232749757, -5.3038191932749754, -5.5233542232749757, -5.3038191932749754, -6.5333426732749755, -6.5333426732749755, -7.8169602202749751, -7.6187344202749756, -7.6187344202749756, -7.1980862732749751, -7.1980862732749751, -7.1980862732749751, -7.1980862732749751, -8.0008927732749768, -7.7045024072749753, -7.7045024072749753, -7.1980862732749751, -7.1980862732749751, -7.1980862732749751, -7.1980862732749751, -7.1980862732749751, -7.2778078732749751, -7.6312661732749758, -7.6350512732749749, -7.6350512732749749, -7.2778078732749751, -7.1980862732749751]
								}, {
									"case":	2,
									"scores":	[-7.0875472732749749, -5.4128152232749756, -5.1932801932749753, -5.4128152232749756, -5.1932801932749753, -6.4228036732749754, -6.4228036732749754, -7.7064212202749758, -7.5081954202749754, -7.5081954202749754, -7.0875472732749749, -7.0875472732749749, -7.0875472732749749, -7.0875472732749749, -7.8903537732749758, -7.5939634072749751, -7.5939634072749751, -7.0875472732749749, -7.0875472732749749, -7.0875472732749749, -7.0875472732749749, -7.0875472732749749, -7.167268873274975, -7.5207271732749756, -7.5245122732749756, -7.5245122732749756, -7.167268873274975, -7.0875472732749749]
								}]
						}]
				}, {
					"line":	647,
					"switches":	[{
							"switch":	55,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	648,
							"begin_column":	3,
							"end_line":	648,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L648\", 28, &(list), sizeof (list), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(work), sizeof (work), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	2,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	3,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	4,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	5,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	6,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	7,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	8,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	9,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	10,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	11,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	12,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	13,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	14,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	15,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	16,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	17,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	18,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	19,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	20,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	21,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	22,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	23,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	24,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	25,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	26,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	27,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	28,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	29,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	30,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	31,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	32,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	33,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	34,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	35,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	36,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	37,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	38,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	39,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	40,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	41,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	42,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	43,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	44,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	45,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	46,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	47,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	48,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	49,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	50,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	51,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	52,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	53,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	54,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	55,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	56,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	57,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	58,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	59,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	60,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	61,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	62,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	63,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	64,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	65,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	66,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	67,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	68,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	69,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	70,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	71,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	72,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	73,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	74,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	75,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	76,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	77,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	78,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	79,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	80,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	81,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	82,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	83,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	84,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	85,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	86,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	87,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	88,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	89,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	90,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	91,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	92,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	93,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	94,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	95,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	96,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	97,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	98,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	99,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	100,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	101,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	102,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	103,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	104,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	105,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	106,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	107,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	108,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	109,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	110,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	111,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	112,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	113,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	114,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	115,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	116,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	117,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	118,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	119,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	120,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	121,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	122,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	123,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	124,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	125,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	126,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	127,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	128,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	129,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	130,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	131,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	132,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	133,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	134,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	135,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	136,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	137,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	138,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	139,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	140,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	141,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	142,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	143,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	144,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	145,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	146,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	147,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	148,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	149,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	150,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	151,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	152,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	153,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	154,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	155,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	156,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	157,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	158,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	159,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	160,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	161,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	162,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	163,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	164,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	165,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	166,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	167,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	168,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	169,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	170,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	171,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	172,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	173,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	174,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	175,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	176,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	177,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	178,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	179,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	180,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	181,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	182,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	183,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	184,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	185,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	186,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	187,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	188,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	189,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	190,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	191,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	192,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	193,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	194,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	195,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	196,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	197,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	198,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	199,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	200,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	201,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	202,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	203,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	204,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	205,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	206,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	207,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	208,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	209,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	210,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	211,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	212,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	213,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	214,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	215,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	216,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	217,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	218,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	219,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	220,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	221,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	222,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	223,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	224,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	225,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	226,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	227,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	228,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	229,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	230,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	231,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	232,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	233,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	234,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	235,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	236,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	237,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	238,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	239,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	240,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	241,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	242,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	243,
									"scores":	[-9.7181038670574562, -6.5424982970574561, -6.5471914467574566, -6.5424982970574561, -6.5471914467574566, -9.9086668367574546, -9.9086668367574546, -9.7181038670574562, -10.386917462057456, -8.3187203550574562, -9.7181038670574562, -9.7181038670574562, -9.7181038670574562, -10.361883231857455, -10.361883231857455, -9.7181038670574562, -9.7181038670574562, -9.7181038670574562, -9.7181038670574562, -9.7181038670574562, -9.7181038670574562, -9.5598610670574562, -9.9623680670574561, -9.5598610670574562, -9.7181038670574562, -9.8075265670574563, -9.8075265670574563, -9.7181038670574562]
								}]
						}, {
							"switch":	56,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	648,
							"begin_column":	5,
							"end_line":	651,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L648\", 28, &(list), sizeof (list), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(work), sizeof (work), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    do_list(ifd, method);\n    return;\n}\n", "if ((list) || __is_neg(\"\", \"L648\", 28, &(list), sizeof (list), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(work), sizeof (work), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    do_list(ifd, method);\n    return;\n}\n", "if ((list) && !__is_neg(\"\", \"L648\", 28, &(list), sizeof (list), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(work), sizeof (work), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    do_list(ifd, method);\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0784781034281457, -2.9225860004281463, -4.1721383431281458, -2.9225860004281463, -4.1721383431281458, -6.0664054231281455, -6.0664054231281455, -6.0784781034281457, -5.247283603428146, -6.6973520504281456, -6.0784781034281457, -6.0784781034281457, -6.0784781034281457, -7.4931227104281461, -7.4931227104281461, -6.0784781034281457, -6.0784781034281457, -6.0784781034281457, -6.0784781034281457, -6.0784781034281457, -6.0784781034281457, -6.1581997034281457, -6.5116580034281455, -6.1581997034281457, -6.0784781034281457, -6.5154431034281455, -6.5154431034281455, -6.0784781034281457]
								}, {
									"case":	2,
									"scores":	[-5.3739675054281459, -2.2180754024281457, -3.4676277451281461, -2.2180754024281457, -3.4676277451281461, -5.3618948251281457, -5.3618948251281457, -5.3739675054281459, -4.5427730054281463, -5.9928414524281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -6.7886121124281456, -6.7886121124281456, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.453689105428146, -5.8071474054281458, -5.453689105428146, -5.3739675054281459, -5.8109325054281458, -5.8109325054281458, -5.3739675054281459]
								}, {
									"case":	3,
									"scores":	[-5.3739675054281459, -2.2180754024281457, -3.4676277451281461, -2.2180754024281457, -3.4676277451281461, -5.3618948251281457, -5.3618948251281457, -5.3739675054281459, -4.5427730054281463, -5.9928414524281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -6.7886121124281456, -6.7886121124281456, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.3739675054281459, -5.453689105428146, -5.8071474054281458, -5.453689105428146, -5.3739675054281459, -5.8109325054281458, -5.8109325054281458, -5.3739675054281459]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	648,
							"begin_column":	5,
							"end_line":	651,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L648\", 28, &(list), sizeof (list), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(work), sizeof (work), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (list) {\n        do_list(ifd, method);\n        return;\n    }\n", "if (!__is_neg(\"\", \"L648\", 28, &(list), sizeof (list), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(work), sizeof (work), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (list)) {\n    do_list(ifd, method);\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7907515659574562, -4.634859462957456, -5.8844118056574564, -4.634859462957456, -5.8844118056574564, -7.778678885657456, -7.778678885657456, -7.7907515659574562, -6.9595570659574566, -8.4096255129574562, -7.7907515659574562, -7.7907515659574562, -7.7907515659574562, -9.2053961729574567, -9.2053961729574567, -7.7907515659574562, -7.7907515659574562, -7.7907515659574562, -7.7907515659574562, -7.7907515659574562, -7.7907515659574562, -7.8704731659574563, -8.2239314659574561, -7.8704731659574563, -7.7907515659574562, -8.227716565957456, -8.227716565957456, -7.7907515659574562]
								}, {
									"case":	2,
									"scores":	[-7.7119363689574563, -4.556044265957456, -5.8055966086574564, -4.556044265957456, -5.8055966086574564, -7.6998636886574561, -7.6998636886574561, -7.7119363689574563, -6.8807418689574558, -8.3308103159574571, -7.7119363689574563, -7.7119363689574563, -7.7119363689574563, -9.1265809759574559, -9.1265809759574559, -7.7119363689574563, -7.7119363689574563, -7.7119363689574563, -7.7119363689574563, -7.7119363689574563, -7.7119363689574563, -7.7916579689574563, -8.1451162689574552, -7.7916579689574563, -7.7119363689574563, -8.148901368957457, -8.148901368957457, -7.7119363689574563]
								}]
						}]
				}, {
					"line":	655,
					"switches":	[{
							"switch":	59,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	656,
							"begin_column":	7,
							"end_line":	656,
							"end_column":	7,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L656\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(list), sizeof (list), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L656\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(list), sizeof (list), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	2,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	3,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	4,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	5,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	6,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	7,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	8,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	9,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	10,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	11,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	12,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	13,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	14,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	15,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	16,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	17,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	18,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	19,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	20,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	21,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	22,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	23,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	24,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	25,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	26,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	27,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	28,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	29,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	30,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	31,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	32,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	33,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	34,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	35,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	36,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	37,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	38,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	39,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	40,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	41,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	42,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	43,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	44,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	45,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	46,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	47,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	48,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	49,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	50,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	51,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	52,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	53,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	54,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	55,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	56,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	57,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	58,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	59,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	60,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	61,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	62,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	63,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	64,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	65,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	66,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	67,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	68,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	69,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	70,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	71,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	72,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	73,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	74,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	75,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	76,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	77,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	78,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	79,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	80,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	81,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	82,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	83,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	84,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	85,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	86,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	87,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	88,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	89,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	90,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	91,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	92,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	93,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	94,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	95,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	96,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	97,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	98,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	99,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	100,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	101,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	102,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	103,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	104,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	105,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	106,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	107,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	108,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	109,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	110,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	111,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	112,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	113,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	114,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	115,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	116,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	117,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	118,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	119,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	120,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	121,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	122,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	123,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	124,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	125,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	126,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	127,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	128,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	129,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	130,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	131,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	132,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	133,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	134,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	135,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	136,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	137,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	138,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	139,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	140,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	141,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	142,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	143,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	144,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	145,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	146,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	147,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	148,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	149,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	150,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	151,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	152,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	153,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	154,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	155,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	156,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	157,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	158,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	159,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	160,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	161,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	162,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	163,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	164,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	165,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	166,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	167,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	168,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	169,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	170,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	171,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	172,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	173,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	174,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	175,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	176,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	177,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	178,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	179,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	180,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	181,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	182,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	183,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	184,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	185,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	186,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	187,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	188,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	189,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	190,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	191,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	192,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	193,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	194,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	195,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	196,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	197,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	198,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	199,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	200,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	201,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	202,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	203,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	204,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	205,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	206,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	207,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	208,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	209,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	210,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	211,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	212,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	213,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	214,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	215,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	216,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	217,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	218,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	219,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	220,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	221,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	222,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	223,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	224,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	225,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	226,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	227,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	228,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	229,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	230,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	231,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	232,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	233,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	234,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	235,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	236,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	237,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	238,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	239,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	240,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	241,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	242,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	243,
									"scores":	[-7.9817456621048972, -8.897434397104897, -8.6906976771048967, -8.897434397104897, -8.6906976771048967, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.7190629671048967, -8.7190629671048967, -8.6296402671048966]
								}, {
									"case":	244,
									"scores":	[-7.9817456621048972, -8.897434397104897, -8.6906976771048967, -8.897434397104897, -8.6906976771048967, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.6296402671048966, -8.7190629671048967, -8.7190629671048967, -8.6296402671048966]
								}]
						}, {
							"switch":	60,
							"types":	[[69], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], []],
							"begin_line":	656,
							"begin_column":	9,
							"end_line":	656,
							"end_column":	59,
							"patch_codes":	["if (__is_neg(\"\", \"L656\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(list), sizeof (list), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n", "if (((*work)(fileno(stdin), fileno(stdout)) != 0) || __is_neg(\"\", \"L656\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(list), sizeof (list), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n", "if ((*work)(_IO_feof(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(_IO_ferror(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(_IO_ftrylockfile(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(_IO_getc(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(_IO_peekc_locked(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(__uflow(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(__underflow(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(fclose(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(feof(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(feof_unlocked(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(ferror(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(ferror_unlocked(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(fflush(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(fflush_unlocked(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(fgetc(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(fgetc_unlocked(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), _IO_feof(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), _IO_ferror(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), _IO_ftrylockfile(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), _IO_getc(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), _IO_peekc_locked(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), __uflow(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), __underflow(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), fclose(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), feof(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), feof_unlocked(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), ferror(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), ferror_unlocked(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), fflush(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), fflush_unlocked(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), fgetc(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), fgetc_unlocked(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), fileno_unlocked(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), fpurge(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), ftrylockfile(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), getc(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), getc_unlocked(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), getw(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), pclose(stdout)) != 0)\n    return;\n", "if ((*work)(fileno(stdin), rpl_fflush(stdout)) != 0)\n    return;\n", "if ((*work)(fileno_unlocked(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(fpurge(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(ftrylockfile(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(getc(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(getc_unlocked(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(getw(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(pclose(stdin), fileno(stdout)) != 0)\n    return;\n", "if ((*work)(rpl_fflush(stdin), fileno(stdout)) != 0)\n    return;\n", "if (copy(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (ct_tally(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (daemon(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (dup2(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (fcntl(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (isctype(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (kill(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (killpg(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (lzw(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (rpl_fcntl(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (setpgid(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (siginterrupt(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (tcsetpgrp(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (unlzh(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (unlzw(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (unpack(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (unzip(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (zip(fileno(stdin), fileno(stdout)) != 0)\n    return;\n", "if (((*work)(fileno(stdin), fileno(stdout)) != 0) && !__is_neg(\"\", \"L656\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(list), sizeof (list), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.3205485054281461, -3.9225371824281456, -3.8915229054281459, -3.9225371824281456, -3.8915229054281459, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -3.9545495054281461, -4.3915145054281464, -4.3915145054281464, -3.9545495054281461]
								}, {
									"case":	2,
									"scores":	[-3.1336499554281469, -4.7356386324281461, -4.7046243554281464, -4.7356386324281461, -4.7046243554281464, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -5.2046159554281459, -5.2046159554281459, -4.7676509554281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.1336499554281469, -4.7356386324281461, -4.7046243554281464, -4.7356386324281461, -4.7046243554281464, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -4.7676509554281461, -5.2046159554281459, -5.2046159554281459, -4.7676509554281461]
								}]
						}, {
							"switch":	61,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	656,
							"begin_column":	9,
							"end_line":	656,
							"end_column":	59,
							"patch_codes":	["if (!__is_neg(\"\", \"L656\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(list), sizeof (list), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if ((*work)(fileno(stdin), fileno(stdout)) != 0)\n        return;\n", "if (!__is_neg(\"\", \"L656\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(list), sizeof (list), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(exit_code), sizeof (exit_code), &(test), sizeof (test), &(test), sizeof (test), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && ((*work)(fileno(stdin), fileno(stdout)) != 0))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3914804440048973, -6.9934691210048978, -6.9624548440048972, -6.9934691210048978, -6.9624548440048972, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.0254814440048978, -7.4624464440048968, -7.4624464440048968, -7.0254814440048978]
								}, {
									"case":	2,
									"scores":	[-6.2054511970048978, -7.8074398740048974, -7.7764255970048968, -7.8074398740048974, -7.7764255970048968, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -7.8394521970048974, -8.2764171970049, -8.2764171970049, -7.8394521970048974]
								}]
						}]
				}, {
					"line":	658,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	659,
							"begin_column":	9,
							"end_line":	659,
							"end_column":	9,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L659\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L659\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.26560439570195]
								}, {
									"case":	2,
									"scores":	[-5.26560439570195]
								}, {
									"case":	3,
									"scores":	[-5.26560439570195]
								}, {
									"case":	4,
									"scores":	[-5.26560439570195]
								}, {
									"case":	5,
									"scores":	[-5.26560439570195]
								}, {
									"case":	6,
									"scores":	[-5.26560439570195]
								}, {
									"case":	7,
									"scores":	[-5.26560439570195]
								}, {
									"case":	8,
									"scores":	[-5.26560439570195]
								}, {
									"case":	9,
									"scores":	[-5.26560439570195]
								}, {
									"case":	10,
									"scores":	[-5.26560439570195]
								}, {
									"case":	11,
									"scores":	[-5.26560439570195]
								}, {
									"case":	12,
									"scores":	[-5.26560439570195]
								}, {
									"case":	13,
									"scores":	[-5.26560439570195]
								}, {
									"case":	14,
									"scores":	[-5.26560439570195]
								}, {
									"case":	15,
									"scores":	[-5.26560439570195]
								}, {
									"case":	16,
									"scores":	[-5.26560439570195]
								}, {
									"case":	17,
									"scores":	[-5.26560439570195]
								}, {
									"case":	18,
									"scores":	[-5.26560439570195]
								}, {
									"case":	19,
									"scores":	[-5.26560439570195]
								}, {
									"case":	20,
									"scores":	[-5.26560439570195]
								}, {
									"case":	21,
									"scores":	[-5.26560439570195]
								}, {
									"case":	22,
									"scores":	[-5.26560439570195]
								}, {
									"case":	23,
									"scores":	[-5.26560439570195]
								}, {
									"case":	24,
									"scores":	[-5.26560439570195]
								}, {
									"case":	25,
									"scores":	[-5.26560439570195]
								}, {
									"case":	26,
									"scores":	[-5.26560439570195]
								}, {
									"case":	27,
									"scores":	[-5.26560439570195]
								}, {
									"case":	28,
									"scores":	[-5.26560439570195]
								}, {
									"case":	29,
									"scores":	[-5.26560439570195]
								}, {
									"case":	30,
									"scores":	[-5.26560439570195]
								}, {
									"case":	31,
									"scores":	[-5.26560439570195]
								}, {
									"case":	32,
									"scores":	[-5.26560439570195]
								}, {
									"case":	33,
									"scores":	[-5.26560439570195]
								}, {
									"case":	34,
									"scores":	[-5.26560439570195]
								}, {
									"case":	35,
									"scores":	[-5.26560439570195]
								}, {
									"case":	36,
									"scores":	[-5.26560439570195]
								}, {
									"case":	37,
									"scores":	[-5.26560439570195]
								}, {
									"case":	38,
									"scores":	[-5.26560439570195]
								}, {
									"case":	39,
									"scores":	[-5.26560439570195]
								}, {
									"case":	40,
									"scores":	[-5.26560439570195]
								}, {
									"case":	41,
									"scores":	[-5.26560439570195]
								}, {
									"case":	42,
									"scores":	[-5.26560439570195]
								}, {
									"case":	43,
									"scores":	[-5.26560439570195]
								}, {
									"case":	44,
									"scores":	[-5.26560439570195]
								}, {
									"case":	45,
									"scores":	[-5.26560439570195]
								}, {
									"case":	46,
									"scores":	[-5.26560439570195]
								}, {
									"case":	47,
									"scores":	[-5.26560439570195]
								}, {
									"case":	48,
									"scores":	[-5.26560439570195]
								}, {
									"case":	49,
									"scores":	[-5.26560439570195]
								}, {
									"case":	50,
									"scores":	[-5.26560439570195]
								}, {
									"case":	51,
									"scores":	[-5.26560439570195]
								}, {
									"case":	52,
									"scores":	[-5.26560439570195]
								}, {
									"case":	53,
									"scores":	[-5.26560439570195]
								}, {
									"case":	54,
									"scores":	[-5.26560439570195]
								}, {
									"case":	55,
									"scores":	[-5.26560439570195]
								}, {
									"case":	56,
									"scores":	[-5.26560439570195]
								}, {
									"case":	57,
									"scores":	[-5.26560439570195]
								}, {
									"case":	58,
									"scores":	[-5.26560439570195]
								}, {
									"case":	59,
									"scores":	[-5.26560439570195]
								}, {
									"case":	60,
									"scores":	[-5.26560439570195]
								}, {
									"case":	61,
									"scores":	[-5.26560439570195]
								}, {
									"case":	62,
									"scores":	[-5.26560439570195]
								}, {
									"case":	63,
									"scores":	[-5.26560439570195]
								}, {
									"case":	64,
									"scores":	[-5.26560439570195]
								}, {
									"case":	65,
									"scores":	[-5.26560439570195]
								}, {
									"case":	66,
									"scores":	[-5.26560439570195]
								}, {
									"case":	67,
									"scores":	[-5.26560439570195]
								}, {
									"case":	68,
									"scores":	[-5.26560439570195]
								}, {
									"case":	69,
									"scores":	[-5.26560439570195]
								}, {
									"case":	70,
									"scores":	[-5.26560439570195]
								}, {
									"case":	71,
									"scores":	[-5.26560439570195]
								}, {
									"case":	72,
									"scores":	[-5.26560439570195]
								}, {
									"case":	73,
									"scores":	[-5.26560439570195]
								}, {
									"case":	74,
									"scores":	[-5.26560439570195]
								}, {
									"case":	75,
									"scores":	[-5.26560439570195]
								}, {
									"case":	76,
									"scores":	[-5.26560439570195]
								}, {
									"case":	77,
									"scores":	[-5.26560439570195]
								}, {
									"case":	78,
									"scores":	[-5.26560439570195]
								}, {
									"case":	79,
									"scores":	[-5.26560439570195]
								}, {
									"case":	80,
									"scores":	[-5.26560439570195]
								}, {
									"case":	81,
									"scores":	[-5.26560439570195]
								}, {
									"case":	82,
									"scores":	[-5.26560439570195]
								}, {
									"case":	83,
									"scores":	[-5.26560439570195]
								}, {
									"case":	84,
									"scores":	[-5.26560439570195]
								}, {
									"case":	85,
									"scores":	[-5.26560439570195]
								}, {
									"case":	86,
									"scores":	[-5.26560439570195]
								}, {
									"case":	87,
									"scores":	[-5.26560439570195]
								}, {
									"case":	88,
									"scores":	[-5.26560439570195]
								}, {
									"case":	89,
									"scores":	[-5.26560439570195]
								}, {
									"case":	90,
									"scores":	[-5.26560439570195]
								}, {
									"case":	91,
									"scores":	[-5.26560439570195]
								}, {
									"case":	92,
									"scores":	[-5.26560439570195]
								}, {
									"case":	93,
									"scores":	[-5.26560439570195]
								}, {
									"case":	94,
									"scores":	[-5.26560439570195]
								}, {
									"case":	95,
									"scores":	[-5.26560439570195]
								}, {
									"case":	96,
									"scores":	[-5.26560439570195]
								}, {
									"case":	97,
									"scores":	[-5.26560439570195]
								}, {
									"case":	98,
									"scores":	[-5.26560439570195]
								}, {
									"case":	99,
									"scores":	[-5.26560439570195]
								}, {
									"case":	100,
									"scores":	[-5.26560439570195]
								}, {
									"case":	101,
									"scores":	[-5.26560439570195]
								}, {
									"case":	102,
									"scores":	[-5.26560439570195]
								}, {
									"case":	103,
									"scores":	[-5.26560439570195]
								}, {
									"case":	104,
									"scores":	[-5.26560439570195]
								}, {
									"case":	105,
									"scores":	[-5.26560439570195]
								}, {
									"case":	106,
									"scores":	[-5.26560439570195]
								}, {
									"case":	107,
									"scores":	[-5.26560439570195]
								}, {
									"case":	108,
									"scores":	[-5.26560439570195]
								}, {
									"case":	109,
									"scores":	[-5.26560439570195]
								}, {
									"case":	110,
									"scores":	[-5.26560439570195]
								}, {
									"case":	111,
									"scores":	[-5.26560439570195]
								}, {
									"case":	112,
									"scores":	[-5.26560439570195]
								}, {
									"case":	113,
									"scores":	[-5.26560439570195]
								}, {
									"case":	114,
									"scores":	[-5.26560439570195]
								}, {
									"case":	115,
									"scores":	[-5.26560439570195]
								}, {
									"case":	116,
									"scores":	[-5.26560439570195]
								}, {
									"case":	117,
									"scores":	[-5.26560439570195]
								}, {
									"case":	118,
									"scores":	[-5.26560439570195]
								}, {
									"case":	119,
									"scores":	[-5.26560439570195]
								}, {
									"case":	120,
									"scores":	[-5.26560439570195]
								}, {
									"case":	121,
									"scores":	[-5.26560439570195]
								}, {
									"case":	122,
									"scores":	[-5.26560439570195]
								}, {
									"case":	123,
									"scores":	[-5.26560439570195]
								}, {
									"case":	124,
									"scores":	[-5.26560439570195]
								}, {
									"case":	125,
									"scores":	[-5.26560439570195]
								}, {
									"case":	126,
									"scores":	[-5.26560439570195]
								}, {
									"case":	127,
									"scores":	[-5.26560439570195]
								}, {
									"case":	128,
									"scores":	[-5.26560439570195]
								}, {
									"case":	129,
									"scores":	[-5.26560439570195]
								}, {
									"case":	130,
									"scores":	[-5.26560439570195]
								}, {
									"case":	131,
									"scores":	[-5.26560439570195]
								}, {
									"case":	132,
									"scores":	[-5.26560439570195]
								}, {
									"case":	133,
									"scores":	[-5.26560439570195]
								}, {
									"case":	134,
									"scores":	[-5.26560439570195]
								}, {
									"case":	135,
									"scores":	[-5.26560439570195]
								}, {
									"case":	136,
									"scores":	[-5.26560439570195]
								}, {
									"case":	137,
									"scores":	[-5.26560439570195]
								}, {
									"case":	138,
									"scores":	[-5.26560439570195]
								}, {
									"case":	139,
									"scores":	[-5.26560439570195]
								}, {
									"case":	140,
									"scores":	[-5.26560439570195]
								}, {
									"case":	141,
									"scores":	[-5.26560439570195]
								}, {
									"case":	142,
									"scores":	[-5.26560439570195]
								}, {
									"case":	143,
									"scores":	[-5.26560439570195]
								}, {
									"case":	144,
									"scores":	[-5.26560439570195]
								}, {
									"case":	145,
									"scores":	[-5.26560439570195]
								}, {
									"case":	146,
									"scores":	[-5.26560439570195]
								}, {
									"case":	147,
									"scores":	[-5.26560439570195]
								}, {
									"case":	148,
									"scores":	[-5.26560439570195]
								}, {
									"case":	149,
									"scores":	[-5.26560439570195]
								}, {
									"case":	150,
									"scores":	[-5.26560439570195]
								}, {
									"case":	151,
									"scores":	[-5.26560439570195]
								}, {
									"case":	152,
									"scores":	[-5.26560439570195]
								}, {
									"case":	153,
									"scores":	[-5.26560439570195]
								}, {
									"case":	154,
									"scores":	[-5.26560439570195]
								}, {
									"case":	155,
									"scores":	[-5.26560439570195]
								}, {
									"case":	156,
									"scores":	[-5.26560439570195]
								}, {
									"case":	157,
									"scores":	[-5.26560439570195]
								}, {
									"case":	158,
									"scores":	[-5.26560439570195]
								}, {
									"case":	159,
									"scores":	[-5.26560439570195]
								}, {
									"case":	160,
									"scores":	[-5.26560439570195]
								}, {
									"case":	161,
									"scores":	[-5.26560439570195]
								}, {
									"case":	162,
									"scores":	[-5.26560439570195]
								}, {
									"case":	163,
									"scores":	[-5.26560439570195]
								}, {
									"case":	164,
									"scores":	[-5.26560439570195]
								}, {
									"case":	165,
									"scores":	[-5.26560439570195]
								}, {
									"case":	166,
									"scores":	[-5.26560439570195]
								}, {
									"case":	167,
									"scores":	[-5.26560439570195]
								}, {
									"case":	168,
									"scores":	[-5.26560439570195]
								}, {
									"case":	169,
									"scores":	[-5.26560439570195]
								}, {
									"case":	170,
									"scores":	[-5.26560439570195]
								}, {
									"case":	171,
									"scores":	[-5.26560439570195]
								}, {
									"case":	172,
									"scores":	[-5.26560439570195]
								}, {
									"case":	173,
									"scores":	[-5.26560439570195]
								}, {
									"case":	174,
									"scores":	[-5.26560439570195]
								}, {
									"case":	175,
									"scores":	[-5.26560439570195]
								}, {
									"case":	176,
									"scores":	[-5.26560439570195]
								}, {
									"case":	177,
									"scores":	[-5.26560439570195]
								}, {
									"case":	178,
									"scores":	[-5.26560439570195]
								}, {
									"case":	179,
									"scores":	[-5.26560439570195]
								}, {
									"case":	180,
									"scores":	[-5.26560439570195]
								}, {
									"case":	181,
									"scores":	[-5.26560439570195]
								}, {
									"case":	182,
									"scores":	[-5.26560439570195]
								}, {
									"case":	183,
									"scores":	[-5.26560439570195]
								}, {
									"case":	184,
									"scores":	[-5.26560439570195]
								}, {
									"case":	185,
									"scores":	[-5.26560439570195]
								}, {
									"case":	186,
									"scores":	[-5.26560439570195]
								}, {
									"case":	187,
									"scores":	[-5.26560439570195]
								}, {
									"case":	188,
									"scores":	[-5.26560439570195]
								}, {
									"case":	189,
									"scores":	[-5.26560439570195]
								}, {
									"case":	190,
									"scores":	[-5.26560439570195]
								}, {
									"case":	191,
									"scores":	[-5.26560439570195]
								}, {
									"case":	192,
									"scores":	[-5.26560439570195]
								}, {
									"case":	193,
									"scores":	[-5.26560439570195]
								}, {
									"case":	194,
									"scores":	[-5.26560439570195]
								}, {
									"case":	195,
									"scores":	[-5.26560439570195]
								}, {
									"case":	196,
									"scores":	[-5.26560439570195]
								}, {
									"case":	197,
									"scores":	[-5.26560439570195]
								}, {
									"case":	198,
									"scores":	[-5.26560439570195]
								}, {
									"case":	199,
									"scores":	[-5.26560439570195]
								}, {
									"case":	200,
									"scores":	[-5.26560439570195]
								}, {
									"case":	201,
									"scores":	[-5.26560439570195]
								}, {
									"case":	202,
									"scores":	[-5.26560439570195]
								}, {
									"case":	203,
									"scores":	[-5.26560439570195]
								}, {
									"case":	204,
									"scores":	[-5.26560439570195]
								}, {
									"case":	205,
									"scores":	[-5.26560439570195]
								}, {
									"case":	206,
									"scores":	[-5.26560439570195]
								}, {
									"case":	207,
									"scores":	[-5.26560439570195]
								}, {
									"case":	208,
									"scores":	[-5.26560439570195]
								}, {
									"case":	209,
									"scores":	[-5.26560439570195]
								}, {
									"case":	210,
									"scores":	[-5.26560439570195]
								}, {
									"case":	211,
									"scores":	[-5.26560439570195]
								}, {
									"case":	212,
									"scores":	[-5.26560439570195]
								}, {
									"case":	213,
									"scores":	[-5.26560439570195]
								}, {
									"case":	214,
									"scores":	[-5.26560439570195]
								}, {
									"case":	215,
									"scores":	[-5.26560439570195]
								}, {
									"case":	216,
									"scores":	[-5.26560439570195]
								}, {
									"case":	217,
									"scores":	[-5.26560439570195]
								}, {
									"case":	218,
									"scores":	[-5.26560439570195]
								}, {
									"case":	219,
									"scores":	[-5.26560439570195]
								}, {
									"case":	220,
									"scores":	[-5.26560439570195]
								}, {
									"case":	221,
									"scores":	[-5.26560439570195]
								}, {
									"case":	222,
									"scores":	[-5.26560439570195]
								}, {
									"case":	223,
									"scores":	[-5.26560439570195]
								}, {
									"case":	224,
									"scores":	[-5.26560439570195]
								}, {
									"case":	225,
									"scores":	[-5.26560439570195]
								}, {
									"case":	226,
									"scores":	[-5.26560439570195]
								}, {
									"case":	227,
									"scores":	[-5.26560439570195]
								}, {
									"case":	228,
									"scores":	[-5.26560439570195]
								}, {
									"case":	229,
									"scores":	[-5.26560439570195]
								}, {
									"case":	230,
									"scores":	[-5.26560439570195]
								}, {
									"case":	231,
									"scores":	[-5.26560439570195]
								}, {
									"case":	232,
									"scores":	[-5.26560439570195]
								}, {
									"case":	233,
									"scores":	[-5.26560439570195]
								}, {
									"case":	234,
									"scores":	[-5.26560439570195]
								}, {
									"case":	235,
									"scores":	[-5.26560439570195]
								}, {
									"case":	236,
									"scores":	[-5.26560439570195]
								}, {
									"case":	237,
									"scores":	[-5.26560439570195]
								}, {
									"case":	238,
									"scores":	[-5.26560439570195]
								}, {
									"case":	239,
									"scores":	[-5.26560439570195]
								}, {
									"case":	240,
									"scores":	[-5.26560439570195]
								}, {
									"case":	241,
									"scores":	[-5.26560439570195]
								}, {
									"case":	242,
									"scores":	[-5.26560439570195]
								}, {
									"case":	243,
									"scores":	[-6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.82976140780195, -6.82976140780195, -6.74033870780195]
								}, {
									"case":	244,
									"scores":	[-6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.74033870780195, -6.82976140780195, -6.82976140780195, -6.74033870780195]
								}]
						}]
				}, {
					"line":	657,
					"switches":	[{
							"switch":	62,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	658,
							"begin_column":	7,
							"end_line":	658,
							"end_column":	7,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L658\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L658\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	2,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	3,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	4,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	5,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	6,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	7,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	8,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	9,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	10,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	11,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	12,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	13,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	14,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	15,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	16,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	17,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	18,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	19,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	20,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	21,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	22,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	23,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	24,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	25,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	26,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	27,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	28,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	29,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	30,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	31,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	32,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	33,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	34,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	35,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	36,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	37,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	38,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	39,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	40,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	41,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	42,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	43,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	44,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	45,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	46,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	47,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	48,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	49,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	50,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	51,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	52,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	53,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	54,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	55,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	56,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	57,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	58,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	59,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	60,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	61,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	62,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	63,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	64,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	65,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	66,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	67,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	68,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	69,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	70,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	71,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	72,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	73,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	74,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	75,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	76,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	77,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	78,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	79,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	80,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	81,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	82,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	83,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	84,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	85,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	86,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	87,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	88,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	89,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	90,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	91,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	92,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	93,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	94,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	95,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	96,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	97,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	98,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	99,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	100,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	101,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	102,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	103,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	104,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	105,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	106,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	107,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	108,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	109,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	110,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	111,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	112,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	113,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	114,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	115,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	116,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	117,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	118,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	119,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	120,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	121,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	122,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	123,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	124,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	125,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	126,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	127,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	128,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	129,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	130,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	131,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	132,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	133,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	134,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	135,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	136,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	137,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	138,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	139,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	140,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	141,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	142,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	143,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	144,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	145,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	146,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	147,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	148,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	149,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	150,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	151,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	152,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	153,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	154,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	155,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	156,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	157,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	158,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	159,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	160,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	161,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	162,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	163,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	164,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	165,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	166,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	167,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	168,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	169,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	170,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	171,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	172,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	173,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	174,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	175,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	176,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	177,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	178,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	179,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	180,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	181,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	182,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	183,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	184,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	185,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	186,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	187,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	188,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	189,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	190,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	191,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	192,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	193,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	194,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	195,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	196,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	197,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	198,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	199,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	200,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	201,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	202,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	203,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	204,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	205,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	206,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	207,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	208,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	209,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	210,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	211,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	212,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	213,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	214,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	215,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	216,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	217,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	218,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	219,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	220,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	221,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	222,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	223,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	224,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	225,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	226,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	227,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	228,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	229,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	230,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	231,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	232,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	233,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	234,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	235,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	236,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	237,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	238,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	239,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	240,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	241,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	242,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	243,
									"scores":	[-9.46406792075451, -9.17661525075451, -8.96987853075451, -9.17661525075451, -8.96987853075451, -9.30833628555451, -9.30833628555451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.99824382075451, -8.99824382075451, -8.90882112075451]
								}, {
									"case":	244,
									"scores":	[-9.46406792075451, -9.17661525075451, -8.96987853075451, -9.17661525075451, -8.96987853075451, -9.30833628555451, -9.30833628555451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.90882112075451, -8.99824382075451, -8.99824382075451, -8.90882112075451]
								}]
						}, {
							"switch":	63,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	658,
							"begin_column":	9,
							"end_line":	659,
							"end_column":	11,
							"patch_codes":	["if (__is_neg(\"\", \"L658\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if ((input_eof()) || __is_neg(\"\", \"L658\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if ((input_eof()) && !__is_neg(\"\", \"L658\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7225486554281462, -4.3426428554281458, -3.1228542784281466, -4.3426428554281458, -3.1228542784281466, -4.3769987394281458, -4.3769987394281458, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.7407275054281461, -4.7407275054281461, -4.3037625054281463]
								}, {
									"case":	2,
									"scores":	[-4.4687642454281455, -4.088858445428146, -2.8690698684281468, -4.088858445428146, -2.8690698684281468, -4.123214329428146, -4.123214329428146, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.4869430954281455, -4.4869430954281455, -4.0499780954281457]
								}, {
									"case":	3,
									"scores":	[-4.4687642454281455, -4.088858445428146, -2.8690698684281468, -4.088858445428146, -2.8690698684281468, -4.123214329428146, -4.123214329428146, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.4869430954281455, -4.4869430954281455, -4.0499780954281457]
								}]
						}, {
							"switch":	65,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	658,
							"begin_column":	9,
							"end_line":	659,
							"end_column":	11,
							"patch_codes":	["if (!__is_neg(\"\", \"L658\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (input_eof())\n        break;\n", "if (!__is_neg(\"\", \"L658\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (input_eof()))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2467234476545084, -6.866817647654508, -5.64702907065451, -6.866817647654508, -5.64702907065451, -6.901173531654508, -6.901173531654508, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -6.8279372976545085, -7.2649022976545083, -7.2649022976545083, -6.8279372976545085]
								}, {
									"case":	2,
									"scores":	[-6.9938083406545086, -6.6139025406545082, -5.3941139636545081, -6.6139025406545082, -5.3941139636545081, -6.6482584246545082, -6.6482584246545082, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -6.5750221906545079, -7.0119871906545086, -7.0119871906545086, -6.5750221906545079]
								}]
						}]
				}, {
					"line":	660,
					"switches":	[{
							"switch":	66,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	661,
							"begin_column":	7,
							"end_line":	661,
							"end_column":	7,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L661\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(work), sizeof (work), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L661\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(work), sizeof (work), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	2,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	3,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	4,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	5,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	6,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	7,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	8,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	9,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	10,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	11,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	12,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	13,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	14,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	15,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	16,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	17,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	18,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	19,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	20,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	21,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	22,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	23,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	24,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	25,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	26,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	27,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	28,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	29,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	30,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	31,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	32,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	33,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	34,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	35,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	36,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	37,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	38,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	39,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	40,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	41,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	42,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	43,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	44,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	45,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	46,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	47,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	48,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	49,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	50,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	51,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	52,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	53,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	54,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	55,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	56,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	57,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	58,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	59,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	60,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	61,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	62,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	63,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	64,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	65,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	66,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	67,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	68,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	69,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	70,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	71,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	72,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	73,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	74,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	75,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	76,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	77,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	78,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	79,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	80,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	81,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	82,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	83,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	84,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	85,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	86,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	87,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	88,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	89,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	90,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	91,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	92,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	93,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	94,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	95,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	96,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	97,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	98,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	99,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	100,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	101,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	102,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	103,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	104,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	105,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	106,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	107,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	108,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	109,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	110,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	111,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	112,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	113,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	114,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	115,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	116,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	117,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	118,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	119,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	120,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	121,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	122,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	123,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	124,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	125,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	126,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	127,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	128,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	129,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	130,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	131,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	132,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	133,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	134,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	135,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	136,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	137,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	138,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	139,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	140,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	141,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	142,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	143,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	144,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	145,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	146,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	147,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	148,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	149,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	150,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	151,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	152,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	153,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	154,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	155,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	156,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	157,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	158,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	159,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	160,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	161,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	162,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	163,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	164,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	165,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	166,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	167,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	168,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	169,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	170,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	171,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	172,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	173,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	174,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	175,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	176,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	177,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	178,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	179,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	180,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	181,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	182,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	183,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	184,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	185,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	186,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	187,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	188,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	189,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	190,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	191,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	192,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	193,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	194,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	195,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	196,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	197,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	198,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	199,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	200,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	201,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	202,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	203,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	204,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	205,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	206,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	207,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	208,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	209,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	210,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	211,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	212,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	213,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	214,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	215,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	216,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	217,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	218,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	219,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	220,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	221,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	222,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	223,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	224,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	225,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	226,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	227,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	228,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	229,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	230,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	231,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	232,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	233,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	234,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	235,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	236,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	237,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	238,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	239,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	240,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	241,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	242,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	243,
									"scores":	[-6.9490024481734185, -5.38918722097342, -6.9490024481734185, -5.38918722097342, -7.6531097757734177, -7.6531097757734177, -7.25359461097342, -7.25359461097342, -7.8088414109734181, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.34301731097342, -7.34301731097342, -7.25359461097342]
								}, {
									"case":	244,
									"scores":	[-6.9490024481734185, -5.38918722097342, -6.9490024481734185, -5.38918722097342, -7.6531097757734177, -7.6531097757734177, -7.25359461097342, -7.25359461097342, -7.8088414109734181, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.25359461097342, -7.34301731097342, -7.34301731097342, -7.25359461097342]
								}]
						}, {
							"switch":	67,
							"types":	[[], [], [1], [], [], [], [628, 629, 630, 631, 632], [], [579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577], [], [], [578]],
							"begin_line":	661,
							"begin_column":	9,
							"end_line":	661,
							"end_column":	32,
							"patch_codes":	["if (!__is_neg(\"\", \"L661\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(work), sizeof (work), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    method = get_method(ifd);\n", "_IO_putc(ifd, 0)", "__tolower_l(ifd, 0)", "__toupper_l(ifd, 0)", "clock_adjtime(ifd, 0)", "clock_getcpuclockid(ifd, 0)", "clock_getres(ifd, 0)", "clock_gettime(ifd, 0)", "clock_settime(ifd, 0)", "copy(ifd, -1)", "copy(ifd, 0)", "copy(ifd, 1)", "copy(ifd, 32768)", "copy(ifd, 61440)", "copy(ifd, _gl_warn_on_use)", "copy(ifd, ascii)", "copy(ifd, block_mode)", "copy(ifd, decompress)", "copy(ifd, decrypt)", "copy(ifd, do_lzw)", "copy(ifd, exit_code)", "copy(ifd, exiting_signal)", "copy(ifd, force)", "copy(ifd, foreground)", "copy(ifd, ifd)", "copy(ifd, last_member)", "copy(ifd, level)", "copy(ifd, list)", "copy(ifd, maxbits)", "copy(ifd, method)", "copy(ifd, no_name)", "copy(ifd, no_time)", "copy(ifd, ofd)", "copy(ifd, part_nb)", "copy(ifd, quiet)", "copy(ifd, recursive)", "copy(ifd, remove_ofname_fd)", "copy(ifd, save_orig_name)", "copy(ifd, test)", "copy(ifd, to_stdout)", "copy(ifd, verbose)", "ct_tally(ifd, -1)", "ct_tally(ifd, 0)", "ct_tally(ifd, 1)", "ct_tally(ifd, 32768)", "ct_tally(ifd, 61440)", "ct_tally(ifd, _gl_warn_on_use)", "ct_tally(ifd, ascii)", "ct_tally(ifd, block_mode)", "ct_tally(ifd, decompress)", "ct_tally(ifd, decrypt)", "ct_tally(ifd, do_lzw)", "ct_tally(ifd, exit_code)", "ct_tally(ifd, exiting_signal)", "ct_tally(ifd, force)", "ct_tally(ifd, foreground)", "ct_tally(ifd, ifd)", "ct_tally(ifd, last_member)", "ct_tally(ifd, level)", "ct_tally(ifd, list)", "ct_tally(ifd, maxbits)", "ct_tally(ifd, method)", "ct_tally(ifd, no_name)", "ct_tally(ifd, no_time)", "ct_tally(ifd, ofd)", "ct_tally(ifd, part_nb)", "ct_tally(ifd, quiet)", "ct_tally(ifd, recursive)", "ct_tally(ifd, remove_ofname_fd)", "ct_tally(ifd, save_orig_name)", "ct_tally(ifd, test)", "ct_tally(ifd, to_stdout)", "ct_tally(ifd, verbose)", "daemon(ifd, -1)", "daemon(ifd, 0)", "daemon(ifd, 1)", "daemon(ifd, 32768)", "daemon(ifd, 61440)", "daemon(ifd, _gl_warn_on_use)", "daemon(ifd, ascii)", "daemon(ifd, block_mode)", "daemon(ifd, decompress)", "daemon(ifd, decrypt)", "daemon(ifd, do_lzw)", "daemon(ifd, exit_code)", "daemon(ifd, exiting_signal)", "daemon(ifd, force)", "daemon(ifd, foreground)", "daemon(ifd, ifd)", "daemon(ifd, last_member)", "daemon(ifd, level)", "daemon(ifd, list)", "daemon(ifd, maxbits)", "daemon(ifd, method)", "daemon(ifd, no_name)", "daemon(ifd, no_time)", "daemon(ifd, ofd)", "daemon(ifd, part_nb)", "daemon(ifd, quiet)", "daemon(ifd, recursive)", "daemon(ifd, remove_ofname_fd)", "daemon(ifd, save_orig_name)", "daemon(ifd, test)", "daemon(ifd, to_stdout)", "daemon(ifd, verbose)", "dup2(ifd, -1)", "dup2(ifd, 0)", "dup2(ifd, 1)", "dup2(ifd, 32768)", "dup2(ifd, 61440)", "dup2(ifd, _gl_warn_on_use)", "dup2(ifd, ascii)", "dup2(ifd, block_mode)", "dup2(ifd, decompress)", "dup2(ifd, decrypt)", "dup2(ifd, do_lzw)", "dup2(ifd, exit_code)", "dup2(ifd, exiting_signal)", "dup2(ifd, force)", "dup2(ifd, foreground)", "dup2(ifd, ifd)", "dup2(ifd, last_member)", "dup2(ifd, level)", "dup2(ifd, list)", "dup2(ifd, maxbits)", "dup2(ifd, method)", "dup2(ifd, no_name)", "dup2(ifd, no_time)", "dup2(ifd, ofd)", "dup2(ifd, part_nb)", "dup2(ifd, quiet)", "dup2(ifd, recursive)", "dup2(ifd, remove_ofname_fd)", "dup2(ifd, save_orig_name)", "dup2(ifd, test)", "dup2(ifd, to_stdout)", "dup2(ifd, verbose)", "fchmod(ifd, -1)", "fchmod(ifd, 0)", "fchmod(ifd, 1)", "fchmod(ifd, 32768)", "fchmod(ifd, 61440)", "fchmod(ifd, inptr)", "fchmod(ifd, insize)", "fchmod(ifd, outcnt)", "fputc(ifd, 0)", "fputc_unlocked(ifd, 0)", "fstat(ifd, 0)", "fstat64(ifd, 0)", "ftruncate(ifd, -1)", "ftruncate(ifd, 0)", "ftruncate(ifd, 1)", "ftruncate(ifd, 32768)", "ftruncate(ifd, 61440)", "ftruncate(ifd, bytes_in)", "ftruncate(ifd, bytes_out)", "ftruncate(ifd, header_bytes)", "ftruncate(ifd, ifile_size)", "ftruncate(ifd, total_in)", "ftruncate(ifd, total_out)", "ftruncate64(ifd, -1)", "ftruncate64(ifd, 0)", "ftruncate64(ifd, 1)", "ftruncate64(ifd, 32768)", "ftruncate64(ifd, 61440)", "ftruncate64(ifd, bytes_in)", "ftruncate64(ifd, bytes_out)", "ftruncate64(ifd, header_bytes)", "ftruncate64(ifd, ifile_size)", "ftruncate64(ifd, total_in)", "ftruncate64(ifd, total_out)", "futimens(ifd, 0)", "getgroups(ifd, 0)", "isalnum_l(ifd, 0)", "isalpha_l(ifd, 0)", "isblank_l(ifd, 0)", "iscntrl_l(ifd, 0)", "isctype(ifd, -1)", "isctype(ifd, 0)", "isctype(ifd, 1)", "isctype(ifd, 32768)", "isctype(ifd, 61440)", "isctype(ifd, _gl_warn_on_use)", "isctype(ifd, ascii)", "isctype(ifd, block_mode)", "isctype(ifd, decompress)", "isctype(ifd, decrypt)", "isctype(ifd, do_lzw)", "isctype(ifd, exit_code)", "isctype(ifd, exiting_signal)", "isctype(ifd, force)", "isctype(ifd, foreground)", "isctype(ifd, ifd)", "isctype(ifd, last_member)", "isctype(ifd, level)", "isctype(ifd, list)", "isctype(ifd, maxbits)", "isctype(ifd, method)", "isctype(ifd, no_name)", "isctype(ifd, no_time)", "isctype(ifd, ofd)", "isctype(ifd, part_nb)", "isctype(ifd, quiet)", "isctype(ifd, recursive)", "isctype(ifd, remove_ofname_fd)", "isctype(ifd, save_orig_name)", "isctype(ifd, test)", "isctype(ifd, to_stdout)", "isctype(ifd, verbose)", "isdigit_l(ifd, 0)", "isgraph_l(ifd, 0)", "islower_l(ifd, 0)", "isprint_l(ifd, 0)", "ispunct_l(ifd, 0)", "isspace_l(ifd, 0)", "isupper_l(ifd, 0)", "isxdigit_l(ifd, 0)", "kill(ifd, -1)", "kill(ifd, 0)", "kill(ifd, 1)", "kill(ifd, 32768)", "kill(ifd, 61440)", "kill(ifd, _gl_warn_on_use)", "kill(ifd, ascii)", "kill(ifd, block_mode)", "kill(ifd, decompress)", "kill(ifd, decrypt)", "kill(ifd, do_lzw)", "kill(ifd, exit_code)", "kill(ifd, exiting_signal)", "kill(ifd, force)", "kill(ifd, foreground)", "kill(ifd, ifd)", "kill(ifd, last_member)", "kill(ifd, level)", "kill(ifd, list)", "kill(ifd, maxbits)", "kill(ifd, method)", "kill(ifd, no_name)", "kill(ifd, no_time)", "kill(ifd, ofd)", "kill(ifd, part_nb)", "kill(ifd, quiet)", "kill(ifd, recursive)", "kill(ifd, remove_ofname_fd)", "kill(ifd, save_orig_name)", "kill(ifd, test)", "kill(ifd, to_stdout)", "kill(ifd, verbose)", "killpg(ifd, -1)", "killpg(ifd, 0)", "killpg(ifd, 1)", "killpg(ifd, 32768)", "killpg(ifd, 61440)", "killpg(ifd, _gl_warn_on_use)", "killpg(ifd, ascii)", "killpg(ifd, block_mode)", "killpg(ifd, decompress)", "killpg(ifd, decrypt)", "killpg(ifd, do_lzw)", "killpg(ifd, exit_code)", "killpg(ifd, exiting_signal)", "killpg(ifd, force)", "killpg(ifd, foreground)", "killpg(ifd, ifd)", "killpg(ifd, last_member)", "killpg(ifd, level)", "killpg(ifd, list)", "killpg(ifd, maxbits)", "killpg(ifd, method)", "killpg(ifd, no_name)", "killpg(ifd, no_time)", "killpg(ifd, ofd)", "killpg(ifd, part_nb)", "killpg(ifd, quiet)", "killpg(ifd, recursive)", "killpg(ifd, remove_ofname_fd)", "killpg(ifd, save_orig_name)", "killpg(ifd, test)", "killpg(ifd, to_stdout)", "killpg(ifd, verbose)", "lzw(ifd, -1)", "lzw(ifd, 0)", "lzw(ifd, 1)", "lzw(ifd, 32768)", "lzw(ifd, 61440)", "lzw(ifd, _gl_warn_on_use)", "lzw(ifd, ascii)", "lzw(ifd, block_mode)", "lzw(ifd, decompress)", "lzw(ifd, decrypt)", "lzw(ifd, do_lzw)", "lzw(ifd, exit_code)", "lzw(ifd, exiting_signal)", "lzw(ifd, force)", "lzw(ifd, foreground)", "lzw(ifd, ifd)", "lzw(ifd, last_member)", "lzw(ifd, level)", "lzw(ifd, list)", "lzw(ifd, maxbits)", "lzw(ifd, method)", "lzw(ifd, no_name)", "lzw(ifd, no_time)", "lzw(ifd, ofd)", "lzw(ifd, part_nb)", "lzw(ifd, quiet)", "lzw(ifd, recursive)", "lzw(ifd, remove_ofname_fd)", "lzw(ifd, save_orig_name)", "lzw(ifd, test)", "lzw(ifd, to_stdout)", "lzw(ifd, verbose)", "main(ifd, 0)", "main(ifd, args)", "putc(ifd, 0)", "putc_unlocked(ifd, 0)", "putw(ifd, 0)", "setpgid(ifd, -1)", "setpgid(ifd, 0)", "setpgid(ifd, 1)", "setpgid(ifd, 32768)", "setpgid(ifd, 61440)", "setpgid(ifd, _gl_warn_on_use)", "setpgid(ifd, ascii)", "setpgid(ifd, block_mode)", "setpgid(ifd, decompress)", "setpgid(ifd, decrypt)", "setpgid(ifd, do_lzw)", "setpgid(ifd, exit_code)", "setpgid(ifd, exiting_signal)", "setpgid(ifd, force)", "setpgid(ifd, foreground)", "setpgid(ifd, ifd)", "setpgid(ifd, last_member)", "setpgid(ifd, level)", "setpgid(ifd, list)", "setpgid(ifd, maxbits)", "setpgid(ifd, method)", "setpgid(ifd, no_name)", "setpgid(ifd, no_time)", "setpgid(ifd, ofd)", "setpgid(ifd, part_nb)", "setpgid(ifd, quiet)", "setpgid(ifd, recursive)", "setpgid(ifd, remove_ofname_fd)", "setpgid(ifd, save_orig_name)", "setpgid(ifd, test)", "setpgid(ifd, to_stdout)", "setpgid(ifd, verbose)", "siginterrupt(ifd, -1)", "siginterrupt(ifd, 0)", "siginterrupt(ifd, 1)", "siginterrupt(ifd, 32768)", "siginterrupt(ifd, 61440)", "siginterrupt(ifd, _gl_warn_on_use)", "siginterrupt(ifd, ascii)", "siginterrupt(ifd, block_mode)", "siginterrupt(ifd, decompress)", "siginterrupt(ifd, decrypt)", "siginterrupt(ifd, do_lzw)", "siginterrupt(ifd, exit_code)", "siginterrupt(ifd, exiting_signal)", "siginterrupt(ifd, force)", "siginterrupt(ifd, foreground)", "siginterrupt(ifd, ifd)", "siginterrupt(ifd, last_member)", "siginterrupt(ifd, level)", "siginterrupt(ifd, list)", "siginterrupt(ifd, maxbits)", "siginterrupt(ifd, method)", "siginterrupt(ifd, no_name)", "siginterrupt(ifd, no_time)", "siginterrupt(ifd, ofd)", "siginterrupt(ifd, part_nb)", "siginterrupt(ifd, quiet)", "siginterrupt(ifd, recursive)", "siginterrupt(ifd, remove_ofname_fd)", "siginterrupt(ifd, save_orig_name)", "siginterrupt(ifd, test)", "siginterrupt(ifd, to_stdout)", "siginterrupt(ifd, verbose)", "tcsetpgrp(ifd, -1)", "tcsetpgrp(ifd, 0)", "tcsetpgrp(ifd, 1)", "tcsetpgrp(ifd, 32768)", "tcsetpgrp(ifd, 61440)", "tcsetpgrp(ifd, _gl_warn_on_use)", "tcsetpgrp(ifd, ascii)", "tcsetpgrp(ifd, block_mode)", "tcsetpgrp(ifd, decompress)", "tcsetpgrp(ifd, decrypt)", "tcsetpgrp(ifd, do_lzw)", "tcsetpgrp(ifd, exit_code)", "tcsetpgrp(ifd, exiting_signal)", "tcsetpgrp(ifd, force)", "tcsetpgrp(ifd, foreground)", "tcsetpgrp(ifd, ifd)", "tcsetpgrp(ifd, last_member)", "tcsetpgrp(ifd, level)", "tcsetpgrp(ifd, list)", "tcsetpgrp(ifd, maxbits)", "tcsetpgrp(ifd, method)", "tcsetpgrp(ifd, no_name)", "tcsetpgrp(ifd, no_time)", "tcsetpgrp(ifd, ofd)", "tcsetpgrp(ifd, part_nb)", "tcsetpgrp(ifd, quiet)", "tcsetpgrp(ifd, recursive)", "tcsetpgrp(ifd, remove_ofname_fd)", "tcsetpgrp(ifd, save_orig_name)", "tcsetpgrp(ifd, test)", "tcsetpgrp(ifd, to_stdout)", "tcsetpgrp(ifd, verbose)", "tolower_l(ifd, 0)", "toupper_l(ifd, 0)", "ungetc(ifd, 0)", "unlzh(ifd, -1)", "unlzh(ifd, 0)", "unlzh(ifd, 1)", "unlzh(ifd, 32768)", "unlzh(ifd, 61440)", "unlzh(ifd, _gl_warn_on_use)", "unlzh(ifd, ascii)", "unlzh(ifd, block_mode)", "unlzh(ifd, decompress)", "unlzh(ifd, decrypt)", "unlzh(ifd, do_lzw)", "unlzh(ifd, exit_code)", "unlzh(ifd, exiting_signal)", "unlzh(ifd, force)", "unlzh(ifd, foreground)", "unlzh(ifd, ifd)", "unlzh(ifd, last_member)", "unlzh(ifd, level)", "unlzh(ifd, list)", "unlzh(ifd, maxbits)", "unlzh(ifd, method)", "unlzh(ifd, no_name)", "unlzh(ifd, no_time)", "unlzh(ifd, ofd)", "unlzh(ifd, part_nb)", "unlzh(ifd, quiet)", "unlzh(ifd, recursive)", "unlzh(ifd, remove_ofname_fd)", "unlzh(ifd, save_orig_name)", "unlzh(ifd, test)", "unlzh(ifd, to_stdout)", "unlzh(ifd, verbose)", "unlzw(ifd, -1)", "unlzw(ifd, 0)", "unlzw(ifd, 1)", "unlzw(ifd, 32768)", "unlzw(ifd, 61440)", "unlzw(ifd, _gl_warn_on_use)", "unlzw(ifd, ascii)", "unlzw(ifd, block_mode)", "unlzw(ifd, decompress)", "unlzw(ifd, decrypt)", "unlzw(ifd, do_lzw)", "unlzw(ifd, exit_code)", "unlzw(ifd, exiting_signal)", "unlzw(ifd, force)", "unlzw(ifd, foreground)", "unlzw(ifd, ifd)", "unlzw(ifd, last_member)", "unlzw(ifd, level)", "unlzw(ifd, list)", "unlzw(ifd, maxbits)", "unlzw(ifd, method)", "unlzw(ifd, no_name)", "unlzw(ifd, no_time)", "unlzw(ifd, ofd)", "unlzw(ifd, part_nb)", "unlzw(ifd, quiet)", "unlzw(ifd, recursive)", "unlzw(ifd, remove_ofname_fd)", "unlzw(ifd, save_orig_name)", "unlzw(ifd, test)", "unlzw(ifd, to_stdout)", "unlzw(ifd, verbose)", "unpack(ifd, -1)", "unpack(ifd, 0)", "unpack(ifd, 1)", "unpack(ifd, 32768)", "unpack(ifd, 61440)", "unpack(ifd, _gl_warn_on_use)", "unpack(ifd, ascii)", "unpack(ifd, block_mode)", "unpack(ifd, decompress)", "unpack(ifd, decrypt)", "unpack(ifd, do_lzw)", "unpack(ifd, exit_code)", "unpack(ifd, exiting_signal)", "unpack(ifd, force)", "unpack(ifd, foreground)", "unpack(ifd, ifd)", "unpack(ifd, last_member)", "unpack(ifd, level)", "unpack(ifd, list)", "unpack(ifd, maxbits)", "unpack(ifd, method)", "unpack(ifd, no_name)", "unpack(ifd, no_time)", "unpack(ifd, ofd)", "unpack(ifd, part_nb)", "unpack(ifd, quiet)", "unpack(ifd, recursive)", "unpack(ifd, remove_ofname_fd)", "unpack(ifd, save_orig_name)", "unpack(ifd, test)", "unpack(ifd, to_stdout)", "unpack(ifd, verbose)", "unzip(ifd, -1)", "unzip(ifd, 0)", "unzip(ifd, 1)", "unzip(ifd, 32768)", "unzip(ifd, 61440)", "unzip(ifd, _gl_warn_on_use)", "unzip(ifd, ascii)", "unzip(ifd, block_mode)", "unzip(ifd, decompress)", "unzip(ifd, decrypt)", "unzip(ifd, do_lzw)", "unzip(ifd, exit_code)", "unzip(ifd, exiting_signal)", "unzip(ifd, force)", "unzip(ifd, foreground)", "unzip(ifd, ifd)", "unzip(ifd, last_member)", "unzip(ifd, level)", "unzip(ifd, list)", "unzip(ifd, maxbits)", "unzip(ifd, method)", "unzip(ifd, no_name)", "unzip(ifd, no_time)", "unzip(ifd, ofd)", "unzip(ifd, part_nb)", "unzip(ifd, quiet)", "unzip(ifd, recursive)", "unzip(ifd, remove_ofname_fd)", "unzip(ifd, save_orig_name)", "unzip(ifd, test)", "unzip(ifd, to_stdout)", "unzip(ifd, verbose)", "zip(ifd, -1)", "zip(ifd, 0)", "zip(ifd, 1)", "zip(ifd, 32768)", "zip(ifd, 61440)", "zip(ifd, _gl_warn_on_use)", "zip(ifd, ascii)", "zip(ifd, block_mode)", "zip(ifd, decompress)", "zip(ifd, decrypt)", "zip(ifd, do_lzw)", "zip(ifd, exit_code)", "zip(ifd, exiting_signal)", "zip(ifd, force)", "zip(ifd, foreground)", "zip(ifd, ifd)", "zip(ifd, last_member)", "zip(ifd, level)", "zip(ifd, list)", "zip(ifd, maxbits)", "zip(ifd, method)", "zip(ifd, no_name)", "zip(ifd, no_time)", "zip(ifd, ofd)", "zip(ifd, part_nb)", "zip(ifd, quiet)", "zip(ifd, recursive)", "zip(ifd, remove_ofname_fd)", "zip(ifd, save_orig_name)", "zip(ifd, test)", "zip(ifd, to_stdout)", "zip(ifd, verbose)", "{\n}\n", "method = __getpgid(ifd)", "method = _tolower(ifd)", "method = _toupper(ifd)", "method = abs(ifd)", "method = check_zipfile(ifd)", "method = close(ifd)", "method = dup(ifd)", "method = dysize(ifd)", "method = fchdir(ifd)", "method = fdatasync(ifd)", "method = ffs(ifd)", "method = fill_inbuf(ifd)", "method = fsync(ifd)", "method = get_method(ifd)", "method = getpgid(ifd)", "method = getsid(ifd)", "method = grantpt(ifd)", "method = gsignal(ifd)", "method = isalnum(ifd)", "method = isalpha(ifd)", "method = isascii(ifd)", "method = isatty(ifd)", "method = isblank(ifd)", "method = iscntrl(ifd)", "method = isdigit(ifd)", "method = isgraph(ifd)", "method = islower(ifd)", "method = isprint(ifd)", "method = ispunct(ifd)", "method = isspace(ifd)", "method = isupper(ifd)", "method = isxdigit(ifd)", "method = nice(ifd)", "method = posix_openpt(ifd)", "method = putchar(ifd)", "method = putchar_unlocked(ifd)", "method = raise(ifd)", "method = sigblock(ifd)", "method = sighold(ifd)", "method = sigignore(ifd)", "method = sigpause(ifd)", "method = sigrelse(ifd)", "method = sigsetmask(ifd)", "method = syncfs(ifd)", "method = tcgetpgrp(ifd)", "method = toascii(ifd)", "method = tolower(ifd)", "method = toupper(ifd)", "method = unlockpt(ifd)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6297473198734185, -4.5787040608734184, -4.6297473198734185, -4.5787040608734184, -5.7698219218734179, -5.7698219218734179, -5.6965856878734185, -5.6965856878734185, -6.1153718378734183, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -5.6965856878734185, -6.1335506878734183, -6.1335506878734183, -5.6965856878734185]
								}, {
									"case":	2,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	3,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	4,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	5,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	6,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	7,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	8,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	9,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	10,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	11,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	12,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	13,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	14,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	15,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	16,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	17,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	18,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	19,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	20,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	21,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	22,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	23,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	24,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	25,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	26,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	27,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	28,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	29,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	30,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	31,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	32,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	33,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	34,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	35,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	36,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	37,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	38,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	39,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	40,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	41,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	42,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	43,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	44,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	45,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	46,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	47,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	48,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	49,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	50,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	51,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	52,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	53,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	54,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	55,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	56,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	57,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	58,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	59,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	60,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	61,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	62,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	63,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	64,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	65,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	66,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	67,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	68,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	69,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	70,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	71,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	72,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	73,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	74,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	75,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	76,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	77,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	78,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	79,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	80,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	81,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	82,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	83,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	84,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	85,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	86,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	87,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	88,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	89,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	90,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	91,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	92,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	93,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	94,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	95,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	96,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	97,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	98,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	99,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	100,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	101,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	102,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	103,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	104,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	105,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	106,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	107,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	108,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	109,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	110,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	111,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	112,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	113,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	114,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	115,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	116,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	117,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	118,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	119,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	120,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	121,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	122,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	123,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	124,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	125,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	126,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	127,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	128,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	129,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	130,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	131,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	132,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	133,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	134,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	135,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	136,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	137,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	138,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	139,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	140,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	141,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	142,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	143,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	144,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	145,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	146,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	147,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	148,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	149,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	150,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	151,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	152,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	153,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	154,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	155,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	156,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	157,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	158,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	159,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	160,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	161,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	162,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	163,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	164,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	165,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	166,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	167,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	168,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	169,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	170,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	171,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	172,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	173,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	174,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	175,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	176,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	177,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	178,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	179,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	180,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	181,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	182,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	183,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	184,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	185,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	186,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	187,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	188,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	189,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	190,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	191,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	192,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	193,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	194,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	195,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	196,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	197,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	198,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	199,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	200,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	201,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	202,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	203,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	204,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	205,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	206,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	207,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	208,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	209,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	210,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	211,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	212,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	213,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	214,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	215,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	216,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	217,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	218,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	219,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	220,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	221,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	222,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	223,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	224,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	225,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	226,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	227,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	228,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	229,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	230,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	231,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	232,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	233,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	234,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	235,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	236,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	237,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	238,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	239,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	240,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	241,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	242,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	243,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	244,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	245,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	246,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	247,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	248,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	249,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	250,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	251,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	252,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	253,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	254,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	255,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	256,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	257,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	258,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	259,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	260,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	261,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	262,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	263,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	264,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	265,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	266,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	267,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	268,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	269,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	270,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	271,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	272,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	273,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	274,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	275,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	276,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	277,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	278,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	279,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	280,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	281,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	282,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	283,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	284,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	285,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	286,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	287,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	288,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	289,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	290,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	291,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	292,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	293,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	294,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	295,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	296,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	297,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	298,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	299,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	300,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	301,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	302,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	303,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	304,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	305,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	306,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	307,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	308,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	309,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	310,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	311,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	312,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	313,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	314,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	315,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	316,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	317,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	318,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	319,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	320,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	321,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	322,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	323,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	324,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	325,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	326,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	327,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	328,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	329,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	330,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	331,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	332,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	333,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	334,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	335,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	336,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	337,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	338,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	339,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	340,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	341,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	342,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	343,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	344,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	345,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	346,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	347,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	348,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	349,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	350,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	351,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	352,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	353,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	354,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	355,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	356,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	357,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	358,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	359,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	360,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	361,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	362,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	363,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	364,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	365,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	366,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	367,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	368,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	369,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	370,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	371,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	372,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	373,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	374,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	375,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	376,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	377,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	378,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	379,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	380,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	381,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	382,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	383,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	384,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	385,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	386,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	387,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	388,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	389,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	390,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	391,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	392,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	393,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	394,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	395,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	396,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	397,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	398,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	399,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	400,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	401,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	402,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	403,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	404,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	405,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	406,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	407,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	408,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	409,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	410,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	411,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	412,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	413,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	414,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	415,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	416,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	417,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	418,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	419,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	420,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	421,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	422,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	423,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	424,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	425,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	426,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	427,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	428,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	429,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	430,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	431,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	432,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	433,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	434,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	435,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	436,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	437,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	438,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	439,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	440,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	441,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	442,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	443,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	444,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	445,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	446,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	447,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	448,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	449,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	450,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	451,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	452,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	453,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	454,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	455,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	456,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	457,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	458,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	459,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	460,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	461,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	462,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	463,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	464,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	465,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	466,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	467,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	468,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	469,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	470,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	471,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	472,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	473,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	474,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	475,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	476,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	477,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	478,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	479,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	480,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	481,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	482,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	483,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	484,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	485,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	486,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	487,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	488,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	489,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	490,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	491,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	492,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	493,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	494,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	495,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	496,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	497,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	498,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	499,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	500,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	501,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	502,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	503,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	504,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	505,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	506,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	507,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	508,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	509,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	510,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	511,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	512,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	513,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	514,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	515,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	516,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	517,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	518,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	519,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	520,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	521,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	522,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	523,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	524,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	525,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	526,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	527,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	528,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	529,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	530,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	531,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	532,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	533,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	534,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	535,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	536,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	537,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	538,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	539,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	540,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	541,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	542,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	543,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	544,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	545,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	546,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	547,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	548,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	549,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	550,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	551,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	552,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	553,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	554,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	555,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	556,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	557,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	558,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	559,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	560,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	561,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	562,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	563,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	564,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	565,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	566,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	567,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	568,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	569,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	570,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	571,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	572,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	573,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	574,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	575,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	576,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	577,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	578,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	579,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	580,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	581,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	582,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	583,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	584,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	585,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	586,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	587,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	588,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	589,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	590,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	591,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	592,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	593,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	594,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	595,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	596,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	597,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	598,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	599,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	600,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	601,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	602,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	603,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	604,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	605,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	606,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	607,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	608,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	609,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	610,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	611,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	612,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	613,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	614,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	615,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	616,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	617,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	618,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	619,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	620,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	621,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	622,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	623,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	624,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	625,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	626,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	627,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	628,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	629,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	630,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	631,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	632,
									"scores":	[-4.1948609078734185]
								}]
						}]
				}, {
					"line":	661,
					"switches":	[{
							"switch":	68,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	662,
							"begin_column":	7,
							"end_line":	662,
							"end_column":	7,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L662\", 28, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L662\", 28, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1746582005559]
								}, {
									"case":	2,
									"scores":	[-4.1746582005559]
								}, {
									"case":	3,
									"scores":	[-4.1746582005559]
								}, {
									"case":	4,
									"scores":	[-4.1746582005559]
								}, {
									"case":	5,
									"scores":	[-4.1746582005559]
								}, {
									"case":	6,
									"scores":	[-4.1746582005559]
								}, {
									"case":	7,
									"scores":	[-4.1746582005559]
								}, {
									"case":	8,
									"scores":	[-4.1746582005559]
								}, {
									"case":	9,
									"scores":	[-4.1746582005559]
								}, {
									"case":	10,
									"scores":	[-4.1746582005559]
								}, {
									"case":	11,
									"scores":	[-4.1746582005559]
								}, {
									"case":	12,
									"scores":	[-4.1746582005559]
								}, {
									"case":	13,
									"scores":	[-4.1746582005559]
								}, {
									"case":	14,
									"scores":	[-4.1746582005559]
								}, {
									"case":	15,
									"scores":	[-4.1746582005559]
								}, {
									"case":	16,
									"scores":	[-4.1746582005559]
								}, {
									"case":	17,
									"scores":	[-4.1746582005559]
								}, {
									"case":	18,
									"scores":	[-4.1746582005559]
								}, {
									"case":	19,
									"scores":	[-4.1746582005559]
								}, {
									"case":	20,
									"scores":	[-4.1746582005559]
								}, {
									"case":	21,
									"scores":	[-4.1746582005559]
								}, {
									"case":	22,
									"scores":	[-4.1746582005559]
								}, {
									"case":	23,
									"scores":	[-4.1746582005559]
								}, {
									"case":	24,
									"scores":	[-4.1746582005559]
								}, {
									"case":	25,
									"scores":	[-4.1746582005559]
								}, {
									"case":	26,
									"scores":	[-4.1746582005559]
								}, {
									"case":	27,
									"scores":	[-4.1746582005559]
								}, {
									"case":	28,
									"scores":	[-4.1746582005559]
								}, {
									"case":	29,
									"scores":	[-4.1746582005559]
								}, {
									"case":	30,
									"scores":	[-4.1746582005559]
								}, {
									"case":	31,
									"scores":	[-4.1746582005559]
								}, {
									"case":	32,
									"scores":	[-4.1746582005559]
								}, {
									"case":	33,
									"scores":	[-4.1746582005559]
								}, {
									"case":	34,
									"scores":	[-4.1746582005559]
								}, {
									"case":	35,
									"scores":	[-4.1746582005559]
								}, {
									"case":	36,
									"scores":	[-4.1746582005559]
								}, {
									"case":	37,
									"scores":	[-4.1746582005559]
								}, {
									"case":	38,
									"scores":	[-4.1746582005559]
								}, {
									"case":	39,
									"scores":	[-4.1746582005559]
								}, {
									"case":	40,
									"scores":	[-4.1746582005559]
								}, {
									"case":	41,
									"scores":	[-4.1746582005559]
								}, {
									"case":	42,
									"scores":	[-4.1746582005559]
								}, {
									"case":	43,
									"scores":	[-4.1746582005559]
								}, {
									"case":	44,
									"scores":	[-4.1746582005559]
								}, {
									"case":	45,
									"scores":	[-4.1746582005559]
								}, {
									"case":	46,
									"scores":	[-4.1746582005559]
								}, {
									"case":	47,
									"scores":	[-4.1746582005559]
								}, {
									"case":	48,
									"scores":	[-4.1746582005559]
								}, {
									"case":	49,
									"scores":	[-4.1746582005559]
								}, {
									"case":	50,
									"scores":	[-4.1746582005559]
								}, {
									"case":	51,
									"scores":	[-4.1746582005559]
								}, {
									"case":	52,
									"scores":	[-4.1746582005559]
								}, {
									"case":	53,
									"scores":	[-4.1746582005559]
								}, {
									"case":	54,
									"scores":	[-4.1746582005559]
								}, {
									"case":	55,
									"scores":	[-4.1746582005559]
								}, {
									"case":	56,
									"scores":	[-4.1746582005559]
								}, {
									"case":	57,
									"scores":	[-4.1746582005559]
								}, {
									"case":	58,
									"scores":	[-4.1746582005559]
								}, {
									"case":	59,
									"scores":	[-4.1746582005559]
								}, {
									"case":	60,
									"scores":	[-4.1746582005559]
								}, {
									"case":	61,
									"scores":	[-4.1746582005559]
								}, {
									"case":	62,
									"scores":	[-4.1746582005559]
								}, {
									"case":	63,
									"scores":	[-4.1746582005559]
								}, {
									"case":	64,
									"scores":	[-4.1746582005559]
								}, {
									"case":	65,
									"scores":	[-4.1746582005559]
								}, {
									"case":	66,
									"scores":	[-4.1746582005559]
								}, {
									"case":	67,
									"scores":	[-4.1746582005559]
								}, {
									"case":	68,
									"scores":	[-4.1746582005559]
								}, {
									"case":	69,
									"scores":	[-4.1746582005559]
								}, {
									"case":	70,
									"scores":	[-4.1746582005559]
								}, {
									"case":	71,
									"scores":	[-4.1746582005559]
								}, {
									"case":	72,
									"scores":	[-4.1746582005559]
								}, {
									"case":	73,
									"scores":	[-4.1746582005559]
								}, {
									"case":	74,
									"scores":	[-4.1746582005559]
								}, {
									"case":	75,
									"scores":	[-4.1746582005559]
								}, {
									"case":	76,
									"scores":	[-4.1746582005559]
								}, {
									"case":	77,
									"scores":	[-4.1746582005559]
								}, {
									"case":	78,
									"scores":	[-4.1746582005559]
								}, {
									"case":	79,
									"scores":	[-4.1746582005559]
								}, {
									"case":	80,
									"scores":	[-4.1746582005559]
								}, {
									"case":	81,
									"scores":	[-4.1746582005559]
								}, {
									"case":	82,
									"scores":	[-4.1746582005559]
								}, {
									"case":	83,
									"scores":	[-4.1746582005559]
								}, {
									"case":	84,
									"scores":	[-4.1746582005559]
								}, {
									"case":	85,
									"scores":	[-4.1746582005559]
								}, {
									"case":	86,
									"scores":	[-4.1746582005559]
								}, {
									"case":	87,
									"scores":	[-4.1746582005559]
								}, {
									"case":	88,
									"scores":	[-4.1746582005559]
								}, {
									"case":	89,
									"scores":	[-4.1746582005559]
								}, {
									"case":	90,
									"scores":	[-4.1746582005559]
								}, {
									"case":	91,
									"scores":	[-4.1746582005559]
								}, {
									"case":	92,
									"scores":	[-4.1746582005559]
								}, {
									"case":	93,
									"scores":	[-4.1746582005559]
								}, {
									"case":	94,
									"scores":	[-4.1746582005559]
								}, {
									"case":	95,
									"scores":	[-4.1746582005559]
								}, {
									"case":	96,
									"scores":	[-4.1746582005559]
								}, {
									"case":	97,
									"scores":	[-4.1746582005559]
								}, {
									"case":	98,
									"scores":	[-4.1746582005559]
								}, {
									"case":	99,
									"scores":	[-4.1746582005559]
								}, {
									"case":	100,
									"scores":	[-4.1746582005559]
								}, {
									"case":	101,
									"scores":	[-4.1746582005559]
								}, {
									"case":	102,
									"scores":	[-4.1746582005559]
								}, {
									"case":	103,
									"scores":	[-4.1746582005559]
								}, {
									"case":	104,
									"scores":	[-4.1746582005559]
								}, {
									"case":	105,
									"scores":	[-4.1746582005559]
								}, {
									"case":	106,
									"scores":	[-4.1746582005559]
								}, {
									"case":	107,
									"scores":	[-4.1746582005559]
								}, {
									"case":	108,
									"scores":	[-4.1746582005559]
								}, {
									"case":	109,
									"scores":	[-4.1746582005559]
								}, {
									"case":	110,
									"scores":	[-4.1746582005559]
								}, {
									"case":	111,
									"scores":	[-4.1746582005559]
								}, {
									"case":	112,
									"scores":	[-4.1746582005559]
								}, {
									"case":	113,
									"scores":	[-4.1746582005559]
								}, {
									"case":	114,
									"scores":	[-4.1746582005559]
								}, {
									"case":	115,
									"scores":	[-4.1746582005559]
								}, {
									"case":	116,
									"scores":	[-4.1746582005559]
								}, {
									"case":	117,
									"scores":	[-4.1746582005559]
								}, {
									"case":	118,
									"scores":	[-4.1746582005559]
								}, {
									"case":	119,
									"scores":	[-4.1746582005559]
								}, {
									"case":	120,
									"scores":	[-4.1746582005559]
								}, {
									"case":	121,
									"scores":	[-4.1746582005559]
								}, {
									"case":	122,
									"scores":	[-4.1746582005559]
								}, {
									"case":	123,
									"scores":	[-4.1746582005559]
								}, {
									"case":	124,
									"scores":	[-4.1746582005559]
								}, {
									"case":	125,
									"scores":	[-4.1746582005559]
								}, {
									"case":	126,
									"scores":	[-4.1746582005559]
								}, {
									"case":	127,
									"scores":	[-4.1746582005559]
								}, {
									"case":	128,
									"scores":	[-4.1746582005559]
								}, {
									"case":	129,
									"scores":	[-4.1746582005559]
								}, {
									"case":	130,
									"scores":	[-4.1746582005559]
								}, {
									"case":	131,
									"scores":	[-4.1746582005559]
								}, {
									"case":	132,
									"scores":	[-4.1746582005559]
								}, {
									"case":	133,
									"scores":	[-4.1746582005559]
								}, {
									"case":	134,
									"scores":	[-4.1746582005559]
								}, {
									"case":	135,
									"scores":	[-4.1746582005559]
								}, {
									"case":	136,
									"scores":	[-4.1746582005559]
								}, {
									"case":	137,
									"scores":	[-4.1746582005559]
								}, {
									"case":	138,
									"scores":	[-4.1746582005559]
								}, {
									"case":	139,
									"scores":	[-4.1746582005559]
								}, {
									"case":	140,
									"scores":	[-4.1746582005559]
								}, {
									"case":	141,
									"scores":	[-4.1746582005559]
								}, {
									"case":	142,
									"scores":	[-4.1746582005559]
								}, {
									"case":	143,
									"scores":	[-4.1746582005559]
								}, {
									"case":	144,
									"scores":	[-4.1746582005559]
								}, {
									"case":	145,
									"scores":	[-4.1746582005559]
								}, {
									"case":	146,
									"scores":	[-4.1746582005559]
								}, {
									"case":	147,
									"scores":	[-4.1746582005559]
								}, {
									"case":	148,
									"scores":	[-4.1746582005559]
								}, {
									"case":	149,
									"scores":	[-4.1746582005559]
								}, {
									"case":	150,
									"scores":	[-4.1746582005559]
								}, {
									"case":	151,
									"scores":	[-4.1746582005559]
								}, {
									"case":	152,
									"scores":	[-4.1746582005559]
								}, {
									"case":	153,
									"scores":	[-4.1746582005559]
								}, {
									"case":	154,
									"scores":	[-4.1746582005559]
								}, {
									"case":	155,
									"scores":	[-4.1746582005559]
								}, {
									"case":	156,
									"scores":	[-4.1746582005559]
								}, {
									"case":	157,
									"scores":	[-4.1746582005559]
								}, {
									"case":	158,
									"scores":	[-4.1746582005559]
								}, {
									"case":	159,
									"scores":	[-4.1746582005559]
								}, {
									"case":	160,
									"scores":	[-4.1746582005559]
								}, {
									"case":	161,
									"scores":	[-4.1746582005559]
								}, {
									"case":	162,
									"scores":	[-4.1746582005559]
								}, {
									"case":	163,
									"scores":	[-4.1746582005559]
								}, {
									"case":	164,
									"scores":	[-4.1746582005559]
								}, {
									"case":	165,
									"scores":	[-4.1746582005559]
								}, {
									"case":	166,
									"scores":	[-4.1746582005559]
								}, {
									"case":	167,
									"scores":	[-4.1746582005559]
								}, {
									"case":	168,
									"scores":	[-4.1746582005559]
								}, {
									"case":	169,
									"scores":	[-4.1746582005559]
								}, {
									"case":	170,
									"scores":	[-4.1746582005559]
								}, {
									"case":	171,
									"scores":	[-4.1746582005559]
								}, {
									"case":	172,
									"scores":	[-4.1746582005559]
								}, {
									"case":	173,
									"scores":	[-4.1746582005559]
								}, {
									"case":	174,
									"scores":	[-4.1746582005559]
								}, {
									"case":	175,
									"scores":	[-4.1746582005559]
								}, {
									"case":	176,
									"scores":	[-4.1746582005559]
								}, {
									"case":	177,
									"scores":	[-4.1746582005559]
								}, {
									"case":	178,
									"scores":	[-4.1746582005559]
								}, {
									"case":	179,
									"scores":	[-4.1746582005559]
								}, {
									"case":	180,
									"scores":	[-4.1746582005559]
								}, {
									"case":	181,
									"scores":	[-4.1746582005559]
								}, {
									"case":	182,
									"scores":	[-4.1746582005559]
								}, {
									"case":	183,
									"scores":	[-4.1746582005559]
								}, {
									"case":	184,
									"scores":	[-4.1746582005559]
								}, {
									"case":	185,
									"scores":	[-4.1746582005559]
								}, {
									"case":	186,
									"scores":	[-4.1746582005559]
								}, {
									"case":	187,
									"scores":	[-4.1746582005559]
								}, {
									"case":	188,
									"scores":	[-4.1746582005559]
								}, {
									"case":	189,
									"scores":	[-4.1746582005559]
								}, {
									"case":	190,
									"scores":	[-4.1746582005559]
								}, {
									"case":	191,
									"scores":	[-4.1746582005559]
								}, {
									"case":	192,
									"scores":	[-4.1746582005559]
								}, {
									"case":	193,
									"scores":	[-4.1746582005559]
								}, {
									"case":	194,
									"scores":	[-4.1746582005559]
								}, {
									"case":	195,
									"scores":	[-4.1746582005559]
								}, {
									"case":	196,
									"scores":	[-4.1746582005559]
								}, {
									"case":	197,
									"scores":	[-4.1746582005559]
								}, {
									"case":	198,
									"scores":	[-4.1746582005559]
								}, {
									"case":	199,
									"scores":	[-4.1746582005559]
								}, {
									"case":	200,
									"scores":	[-4.1746582005559]
								}, {
									"case":	201,
									"scores":	[-4.1746582005559]
								}, {
									"case":	202,
									"scores":	[-4.1746582005559]
								}, {
									"case":	203,
									"scores":	[-4.1746582005559]
								}, {
									"case":	204,
									"scores":	[-4.1746582005559]
								}, {
									"case":	205,
									"scores":	[-4.1746582005559]
								}, {
									"case":	206,
									"scores":	[-4.1746582005559]
								}, {
									"case":	207,
									"scores":	[-4.1746582005559]
								}, {
									"case":	208,
									"scores":	[-4.1746582005559]
								}, {
									"case":	209,
									"scores":	[-4.1746582005559]
								}, {
									"case":	210,
									"scores":	[-4.1746582005559]
								}, {
									"case":	211,
									"scores":	[-4.1746582005559]
								}, {
									"case":	212,
									"scores":	[-4.1746582005559]
								}, {
									"case":	213,
									"scores":	[-4.1746582005559]
								}, {
									"case":	214,
									"scores":	[-4.1746582005559]
								}, {
									"case":	215,
									"scores":	[-4.1746582005559]
								}, {
									"case":	216,
									"scores":	[-4.1746582005559]
								}, {
									"case":	217,
									"scores":	[-4.1746582005559]
								}, {
									"case":	218,
									"scores":	[-4.1746582005559]
								}, {
									"case":	219,
									"scores":	[-4.1746582005559]
								}, {
									"case":	220,
									"scores":	[-4.1746582005559]
								}, {
									"case":	221,
									"scores":	[-4.1746582005559]
								}, {
									"case":	222,
									"scores":	[-4.1746582005559]
								}, {
									"case":	223,
									"scores":	[-4.1746582005559]
								}, {
									"case":	224,
									"scores":	[-4.1746582005559]
								}, {
									"case":	225,
									"scores":	[-4.1746582005559]
								}, {
									"case":	226,
									"scores":	[-4.1746582005559]
								}, {
									"case":	227,
									"scores":	[-4.1746582005559]
								}, {
									"case":	228,
									"scores":	[-4.1746582005559]
								}, {
									"case":	229,
									"scores":	[-4.1746582005559]
								}, {
									"case":	230,
									"scores":	[-4.1746582005559]
								}, {
									"case":	231,
									"scores":	[-4.1746582005559]
								}, {
									"case":	232,
									"scores":	[-4.1746582005559]
								}, {
									"case":	233,
									"scores":	[-4.1746582005559]
								}, {
									"case":	234,
									"scores":	[-4.1746582005559]
								}, {
									"case":	235,
									"scores":	[-4.1746582005559]
								}, {
									"case":	236,
									"scores":	[-4.1746582005559]
								}, {
									"case":	237,
									"scores":	[-4.1746582005559]
								}, {
									"case":	238,
									"scores":	[-4.1746582005559]
								}, {
									"case":	239,
									"scores":	[-4.1746582005559]
								}, {
									"case":	240,
									"scores":	[-4.1746582005559]
								}, {
									"case":	241,
									"scores":	[-4.1746582005559]
								}, {
									"case":	242,
									"scores":	[-4.1746582005559]
								}, {
									"case":	243,
									"scores":	[-5.1294679136559, -5.1294679136559, -8.6527499684559, -8.0608967733559, -8.6527499684559, -8.0608967733559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.8084816036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.3426575036559, -8.3426575036559, -8.2532348036559]
								}, {
									"case":	244,
									"scores":	[-5.1294679136559, -5.1294679136559, -8.6527499684559, -8.0608967733559, -8.6527499684559, -8.0608967733559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.8084816036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.2532348036559, -8.3426575036559, -8.3426575036559, -8.2532348036559]
								}]
						}, {
							"switch":	69,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	662,
							"begin_column":	9,
							"end_line":	662,
							"end_column":	25,
							"patch_codes":	["if (__is_neg(\"\", \"L662\", 28, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n", "if ((method < 0) || __is_neg(\"\", \"L662\", 28, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n", "if ((method < 0) && !__is_neg(\"\", \"L662\", 28, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.4793466524281458, -2.4793466524281458, -5.3133372124281459, -4.1043701251281455, -5.3133372124281459, -4.1043701251281455, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.750658655428146, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.3318725054281462, -4.768837505428146, -4.768837505428146, -4.3318725054281462]
								}, {
									"case":	2,
									"scores":	[-2.329260396428146, -2.329260396428146, -5.1632509564281461, -3.9542838691281461, -5.1632509564281461, -3.9542838691281461, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.6005723994281462, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.6187512494281462, -4.6187512494281462, -4.1817862494281464]
								}, {
									"case":	3,
									"scores":	[-2.329260396428146, -2.329260396428146, -5.1632509564281461, -3.9542838691281461, -5.1632509564281461, -3.9542838691281461, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.6005723994281462, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.1817862494281464, -4.6187512494281462, -4.6187512494281462, -4.1817862494281464]
								}]
						}, {
							"switch":	70,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	662,
							"begin_column":	9,
							"end_line":	662,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L662\", 28, &(method), sizeof (method), &(method), sizeof (method), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(work), sizeof (work), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (method < 0)\n        return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0236236475558984, -4.0236236475558984, -6.8576142075558986, -5.6486471202559, -6.8576142075558986, -5.6486471202559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -6.2949356505558987, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -5.8761495005559, -6.3131145005558986, -6.3131145005558986, -5.8761495005559]
								}]
						}]
				}, {
					"line":	662,
					"switches":	[{
							"switch":	71,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	663,
							"begin_column":	7,
							"end_line":	663,
							"end_column":	7,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L663\", 28, &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(work), sizeof (work), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L663\", 28, &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(work), sizeof (work), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.15445549323838]
								}, {
									"case":	2,
									"scores":	[-4.15445549323838]
								}, {
									"case":	3,
									"scores":	[-4.15445549323838]
								}, {
									"case":	4,
									"scores":	[-4.15445549323838]
								}, {
									"case":	5,
									"scores":	[-4.15445549323838]
								}, {
									"case":	6,
									"scores":	[-4.15445549323838]
								}, {
									"case":	7,
									"scores":	[-4.15445549323838]
								}, {
									"case":	8,
									"scores":	[-4.15445549323838]
								}, {
									"case":	9,
									"scores":	[-4.15445549323838]
								}, {
									"case":	10,
									"scores":	[-4.15445549323838]
								}, {
									"case":	11,
									"scores":	[-4.15445549323838]
								}, {
									"case":	12,
									"scores":	[-4.15445549323838]
								}, {
									"case":	13,
									"scores":	[-4.15445549323838]
								}, {
									"case":	14,
									"scores":	[-4.15445549323838]
								}, {
									"case":	15,
									"scores":	[-4.15445549323838]
								}, {
									"case":	16,
									"scores":	[-4.15445549323838]
								}, {
									"case":	17,
									"scores":	[-4.15445549323838]
								}, {
									"case":	18,
									"scores":	[-4.15445549323838]
								}, {
									"case":	19,
									"scores":	[-4.15445549323838]
								}, {
									"case":	20,
									"scores":	[-4.15445549323838]
								}, {
									"case":	21,
									"scores":	[-4.15445549323838]
								}, {
									"case":	22,
									"scores":	[-4.15445549323838]
								}, {
									"case":	23,
									"scores":	[-4.15445549323838]
								}, {
									"case":	24,
									"scores":	[-4.15445549323838]
								}, {
									"case":	25,
									"scores":	[-4.15445549323838]
								}, {
									"case":	26,
									"scores":	[-4.15445549323838]
								}, {
									"case":	27,
									"scores":	[-4.15445549323838]
								}, {
									"case":	28,
									"scores":	[-4.15445549323838]
								}, {
									"case":	29,
									"scores":	[-4.15445549323838]
								}, {
									"case":	30,
									"scores":	[-4.15445549323838]
								}, {
									"case":	31,
									"scores":	[-4.15445549323838]
								}, {
									"case":	32,
									"scores":	[-4.15445549323838]
								}, {
									"case":	33,
									"scores":	[-4.15445549323838]
								}, {
									"case":	34,
									"scores":	[-4.15445549323838]
								}, {
									"case":	35,
									"scores":	[-4.15445549323838]
								}, {
									"case":	36,
									"scores":	[-4.15445549323838]
								}, {
									"case":	37,
									"scores":	[-4.15445549323838]
								}, {
									"case":	38,
									"scores":	[-4.15445549323838]
								}, {
									"case":	39,
									"scores":	[-4.15445549323838]
								}, {
									"case":	40,
									"scores":	[-4.15445549323838]
								}, {
									"case":	41,
									"scores":	[-4.15445549323838]
								}, {
									"case":	42,
									"scores":	[-4.15445549323838]
								}, {
									"case":	43,
									"scores":	[-4.15445549323838]
								}, {
									"case":	44,
									"scores":	[-4.15445549323838]
								}, {
									"case":	45,
									"scores":	[-4.15445549323838]
								}, {
									"case":	46,
									"scores":	[-4.15445549323838]
								}, {
									"case":	47,
									"scores":	[-4.15445549323838]
								}, {
									"case":	48,
									"scores":	[-4.15445549323838]
								}, {
									"case":	49,
									"scores":	[-4.15445549323838]
								}, {
									"case":	50,
									"scores":	[-4.15445549323838]
								}, {
									"case":	51,
									"scores":	[-4.15445549323838]
								}, {
									"case":	52,
									"scores":	[-4.15445549323838]
								}, {
									"case":	53,
									"scores":	[-4.15445549323838]
								}, {
									"case":	54,
									"scores":	[-4.15445549323838]
								}, {
									"case":	55,
									"scores":	[-4.15445549323838]
								}, {
									"case":	56,
									"scores":	[-4.15445549323838]
								}, {
									"case":	57,
									"scores":	[-4.15445549323838]
								}, {
									"case":	58,
									"scores":	[-4.15445549323838]
								}, {
									"case":	59,
									"scores":	[-4.15445549323838]
								}, {
									"case":	60,
									"scores":	[-4.15445549323838]
								}, {
									"case":	61,
									"scores":	[-4.15445549323838]
								}, {
									"case":	62,
									"scores":	[-4.15445549323838]
								}, {
									"case":	63,
									"scores":	[-4.15445549323838]
								}, {
									"case":	64,
									"scores":	[-4.15445549323838]
								}, {
									"case":	65,
									"scores":	[-4.15445549323838]
								}, {
									"case":	66,
									"scores":	[-4.15445549323838]
								}, {
									"case":	67,
									"scores":	[-4.15445549323838]
								}, {
									"case":	68,
									"scores":	[-4.15445549323838]
								}, {
									"case":	69,
									"scores":	[-4.15445549323838]
								}, {
									"case":	70,
									"scores":	[-4.15445549323838]
								}, {
									"case":	71,
									"scores":	[-4.15445549323838]
								}, {
									"case":	72,
									"scores":	[-4.15445549323838]
								}, {
									"case":	73,
									"scores":	[-4.15445549323838]
								}, {
									"case":	74,
									"scores":	[-4.15445549323838]
								}, {
									"case":	75,
									"scores":	[-4.15445549323838]
								}, {
									"case":	76,
									"scores":	[-4.15445549323838]
								}, {
									"case":	77,
									"scores":	[-4.15445549323838]
								}, {
									"case":	78,
									"scores":	[-4.15445549323838]
								}, {
									"case":	79,
									"scores":	[-4.15445549323838]
								}, {
									"case":	80,
									"scores":	[-4.15445549323838]
								}, {
									"case":	81,
									"scores":	[-4.15445549323838]
								}, {
									"case":	82,
									"scores":	[-4.15445549323838]
								}, {
									"case":	83,
									"scores":	[-4.15445549323838]
								}, {
									"case":	84,
									"scores":	[-4.15445549323838]
								}, {
									"case":	85,
									"scores":	[-4.15445549323838]
								}, {
									"case":	86,
									"scores":	[-4.15445549323838]
								}, {
									"case":	87,
									"scores":	[-4.15445549323838]
								}, {
									"case":	88,
									"scores":	[-4.15445549323838]
								}, {
									"case":	89,
									"scores":	[-4.15445549323838]
								}, {
									"case":	90,
									"scores":	[-4.15445549323838]
								}, {
									"case":	91,
									"scores":	[-4.15445549323838]
								}, {
									"case":	92,
									"scores":	[-4.15445549323838]
								}, {
									"case":	93,
									"scores":	[-4.15445549323838]
								}, {
									"case":	94,
									"scores":	[-4.15445549323838]
								}, {
									"case":	95,
									"scores":	[-4.15445549323838]
								}, {
									"case":	96,
									"scores":	[-4.15445549323838]
								}, {
									"case":	97,
									"scores":	[-4.15445549323838]
								}, {
									"case":	98,
									"scores":	[-4.15445549323838]
								}, {
									"case":	99,
									"scores":	[-4.15445549323838]
								}, {
									"case":	100,
									"scores":	[-4.15445549323838]
								}, {
									"case":	101,
									"scores":	[-4.15445549323838]
								}, {
									"case":	102,
									"scores":	[-4.15445549323838]
								}, {
									"case":	103,
									"scores":	[-4.15445549323838]
								}, {
									"case":	104,
									"scores":	[-4.15445549323838]
								}, {
									"case":	105,
									"scores":	[-4.15445549323838]
								}, {
									"case":	106,
									"scores":	[-4.15445549323838]
								}, {
									"case":	107,
									"scores":	[-4.15445549323838]
								}, {
									"case":	108,
									"scores":	[-4.15445549323838]
								}, {
									"case":	109,
									"scores":	[-4.15445549323838]
								}, {
									"case":	110,
									"scores":	[-4.15445549323838]
								}, {
									"case":	111,
									"scores":	[-4.15445549323838]
								}, {
									"case":	112,
									"scores":	[-4.15445549323838]
								}, {
									"case":	113,
									"scores":	[-4.15445549323838]
								}, {
									"case":	114,
									"scores":	[-4.15445549323838]
								}, {
									"case":	115,
									"scores":	[-4.15445549323838]
								}, {
									"case":	116,
									"scores":	[-4.15445549323838]
								}, {
									"case":	117,
									"scores":	[-4.15445549323838]
								}, {
									"case":	118,
									"scores":	[-4.15445549323838]
								}, {
									"case":	119,
									"scores":	[-4.15445549323838]
								}, {
									"case":	120,
									"scores":	[-4.15445549323838]
								}, {
									"case":	121,
									"scores":	[-4.15445549323838]
								}, {
									"case":	122,
									"scores":	[-4.15445549323838]
								}, {
									"case":	123,
									"scores":	[-4.15445549323838]
								}, {
									"case":	124,
									"scores":	[-4.15445549323838]
								}, {
									"case":	125,
									"scores":	[-4.15445549323838]
								}, {
									"case":	126,
									"scores":	[-4.15445549323838]
								}, {
									"case":	127,
									"scores":	[-4.15445549323838]
								}, {
									"case":	128,
									"scores":	[-4.15445549323838]
								}, {
									"case":	129,
									"scores":	[-4.15445549323838]
								}, {
									"case":	130,
									"scores":	[-4.15445549323838]
								}, {
									"case":	131,
									"scores":	[-4.15445549323838]
								}, {
									"case":	132,
									"scores":	[-4.15445549323838]
								}, {
									"case":	133,
									"scores":	[-4.15445549323838]
								}, {
									"case":	134,
									"scores":	[-4.15445549323838]
								}, {
									"case":	135,
									"scores":	[-4.15445549323838]
								}, {
									"case":	136,
									"scores":	[-4.15445549323838]
								}, {
									"case":	137,
									"scores":	[-4.15445549323838]
								}, {
									"case":	138,
									"scores":	[-4.15445549323838]
								}, {
									"case":	139,
									"scores":	[-4.15445549323838]
								}, {
									"case":	140,
									"scores":	[-4.15445549323838]
								}, {
									"case":	141,
									"scores":	[-4.15445549323838]
								}, {
									"case":	142,
									"scores":	[-4.15445549323838]
								}, {
									"case":	143,
									"scores":	[-4.15445549323838]
								}, {
									"case":	144,
									"scores":	[-4.15445549323838]
								}, {
									"case":	145,
									"scores":	[-4.15445549323838]
								}, {
									"case":	146,
									"scores":	[-4.15445549323838]
								}, {
									"case":	147,
									"scores":	[-4.15445549323838]
								}, {
									"case":	148,
									"scores":	[-4.15445549323838]
								}, {
									"case":	149,
									"scores":	[-4.15445549323838]
								}, {
									"case":	150,
									"scores":	[-4.15445549323838]
								}, {
									"case":	151,
									"scores":	[-4.15445549323838]
								}, {
									"case":	152,
									"scores":	[-4.15445549323838]
								}, {
									"case":	153,
									"scores":	[-4.15445549323838]
								}, {
									"case":	154,
									"scores":	[-4.15445549323838]
								}, {
									"case":	155,
									"scores":	[-4.15445549323838]
								}, {
									"case":	156,
									"scores":	[-4.15445549323838]
								}, {
									"case":	157,
									"scores":	[-4.15445549323838]
								}, {
									"case":	158,
									"scores":	[-4.15445549323838]
								}, {
									"case":	159,
									"scores":	[-4.15445549323838]
								}, {
									"case":	160,
									"scores":	[-4.15445549323838]
								}, {
									"case":	161,
									"scores":	[-4.15445549323838]
								}, {
									"case":	162,
									"scores":	[-4.15445549323838]
								}, {
									"case":	163,
									"scores":	[-4.15445549323838]
								}, {
									"case":	164,
									"scores":	[-4.15445549323838]
								}, {
									"case":	165,
									"scores":	[-4.15445549323838]
								}, {
									"case":	166,
									"scores":	[-4.15445549323838]
								}, {
									"case":	167,
									"scores":	[-4.15445549323838]
								}, {
									"case":	168,
									"scores":	[-4.15445549323838]
								}, {
									"case":	169,
									"scores":	[-4.15445549323838]
								}, {
									"case":	170,
									"scores":	[-4.15445549323838]
								}, {
									"case":	171,
									"scores":	[-4.15445549323838]
								}, {
									"case":	172,
									"scores":	[-4.15445549323838]
								}, {
									"case":	173,
									"scores":	[-4.15445549323838]
								}, {
									"case":	174,
									"scores":	[-4.15445549323838]
								}, {
									"case":	175,
									"scores":	[-4.15445549323838]
								}, {
									"case":	176,
									"scores":	[-4.15445549323838]
								}, {
									"case":	177,
									"scores":	[-4.15445549323838]
								}, {
									"case":	178,
									"scores":	[-4.15445549323838]
								}, {
									"case":	179,
									"scores":	[-4.15445549323838]
								}, {
									"case":	180,
									"scores":	[-4.15445549323838]
								}, {
									"case":	181,
									"scores":	[-4.15445549323838]
								}, {
									"case":	182,
									"scores":	[-4.15445549323838]
								}, {
									"case":	183,
									"scores":	[-4.15445549323838]
								}, {
									"case":	184,
									"scores":	[-4.15445549323838]
								}, {
									"case":	185,
									"scores":	[-4.15445549323838]
								}, {
									"case":	186,
									"scores":	[-4.15445549323838]
								}, {
									"case":	187,
									"scores":	[-4.15445549323838]
								}, {
									"case":	188,
									"scores":	[-4.15445549323838]
								}, {
									"case":	189,
									"scores":	[-4.15445549323838]
								}, {
									"case":	190,
									"scores":	[-4.15445549323838]
								}, {
									"case":	191,
									"scores":	[-4.15445549323838]
								}, {
									"case":	192,
									"scores":	[-4.15445549323838]
								}, {
									"case":	193,
									"scores":	[-4.15445549323838]
								}, {
									"case":	194,
									"scores":	[-4.15445549323838]
								}, {
									"case":	195,
									"scores":	[-4.15445549323838]
								}, {
									"case":	196,
									"scores":	[-4.15445549323838]
								}, {
									"case":	197,
									"scores":	[-4.15445549323838]
								}, {
									"case":	198,
									"scores":	[-4.15445549323838]
								}, {
									"case":	199,
									"scores":	[-4.15445549323838]
								}, {
									"case":	200,
									"scores":	[-4.15445549323838]
								}, {
									"case":	201,
									"scores":	[-4.15445549323838]
								}, {
									"case":	202,
									"scores":	[-4.15445549323838]
								}, {
									"case":	203,
									"scores":	[-4.15445549323838]
								}, {
									"case":	204,
									"scores":	[-4.15445549323838]
								}, {
									"case":	205,
									"scores":	[-4.15445549323838]
								}, {
									"case":	206,
									"scores":	[-4.15445549323838]
								}, {
									"case":	207,
									"scores":	[-4.15445549323838]
								}, {
									"case":	208,
									"scores":	[-4.15445549323838]
								}, {
									"case":	209,
									"scores":	[-4.15445549323838]
								}, {
									"case":	210,
									"scores":	[-4.15445549323838]
								}, {
									"case":	211,
									"scores":	[-4.15445549323838]
								}, {
									"case":	212,
									"scores":	[-4.15445549323838]
								}, {
									"case":	213,
									"scores":	[-4.15445549323838]
								}, {
									"case":	214,
									"scores":	[-4.15445549323838]
								}, {
									"case":	215,
									"scores":	[-4.15445549323838]
								}, {
									"case":	216,
									"scores":	[-4.15445549323838]
								}, {
									"case":	217,
									"scores":	[-4.15445549323838]
								}, {
									"case":	218,
									"scores":	[-4.15445549323838]
								}, {
									"case":	219,
									"scores":	[-4.15445549323838]
								}, {
									"case":	220,
									"scores":	[-4.15445549323838]
								}, {
									"case":	221,
									"scores":	[-4.15445549323838]
								}, {
									"case":	222,
									"scores":	[-4.15445549323838]
								}, {
									"case":	223,
									"scores":	[-4.15445549323838]
								}, {
									"case":	224,
									"scores":	[-4.15445549323838]
								}, {
									"case":	225,
									"scores":	[-4.15445549323838]
								}, {
									"case":	226,
									"scores":	[-4.15445549323838]
								}, {
									"case":	227,
									"scores":	[-4.15445549323838]
								}, {
									"case":	228,
									"scores":	[-4.15445549323838]
								}, {
									"case":	229,
									"scores":	[-4.15445549323838]
								}, {
									"case":	230,
									"scores":	[-4.15445549323838]
								}, {
									"case":	231,
									"scores":	[-4.15445549323838]
								}, {
									"case":	232,
									"scores":	[-4.15445549323838]
								}, {
									"case":	233,
									"scores":	[-4.15445549323838]
								}, {
									"case":	234,
									"scores":	[-4.15445549323838]
								}, {
									"case":	235,
									"scores":	[-4.15445549323838]
								}, {
									"case":	236,
									"scores":	[-4.15445549323838]
								}, {
									"case":	237,
									"scores":	[-4.15445549323838]
								}, {
									"case":	238,
									"scores":	[-4.15445549323838]
								}, {
									"case":	239,
									"scores":	[-4.15445549323838]
								}, {
									"case":	240,
									"scores":	[-4.15445549323838]
								}, {
									"case":	241,
									"scores":	[-4.15445549323838]
								}, {
									"case":	242,
									"scores":	[-4.15445549323838]
								}, {
									"case":	243,
									"scores":	[-6.90233972903838, -6.90233972903838, -4.14959429633838, -4.14959429633838, -6.40157916603838, -6.40157916603838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.68333989633838, -6.68333989633838, -6.59391719633838]
								}, {
									"case":	244,
									"scores":	[-6.90233972903838, -6.90233972903838, -4.14959429633838, -4.14959429633838, -6.40157916603838, -6.40157916603838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.59391719633838, -6.68333989633838, -6.68333989633838, -6.59391719633838]
								}]
						}, {
							"switch":	72,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	663,
							"begin_column":	9,
							"end_line":	663,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L663\", 28, &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(work), sizeof (work), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    bytes_out = 0;\n", "{\n}\n", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.34930126623838, -6.34930126623838, -4.05021094023838, -4.05021094023838, -5.21357041293838, -5.21357041293838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.44107279323838, -5.87803779323838, -5.87803779323838, -5.44107279323838]
								}, {
									"case":	2,
									"scores":	[-4.15445549323838]
								}, {
									"case":	3,
									"scores":	[-4.15445549323838]
								}, {
									"case":	4,
									"scores":	[-4.15445549323838]
								}, {
									"case":	5,
									"scores":	[-4.15445549323838]
								}, {
									"case":	6,
									"scores":	[-4.15445549323838]
								}, {
									"case":	7,
									"scores":	[-4.15445549323838]
								}]
						}]
				}, {
					"line":	654,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	655,
							"begin_column":	3,
							"end_line":	655,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L655\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(list), sizeof (list), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	2,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	3,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	4,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	5,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	6,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	7,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	8,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	9,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	10,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	11,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	12,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	13,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	14,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	15,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	16,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	17,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	18,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	19,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	20,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	21,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	22,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	23,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	24,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	25,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	26,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	27,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	28,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	29,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	30,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	31,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	32,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	33,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	34,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	35,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	36,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	37,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	38,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	39,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	40,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	41,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	42,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	43,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	44,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	45,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	46,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	47,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	48,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	49,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	50,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	51,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	52,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	53,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	54,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	55,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	56,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	57,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	58,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	59,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	60,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	61,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	62,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	63,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	64,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	65,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	66,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	67,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	68,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	69,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	70,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	71,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	72,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	73,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	74,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	75,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	76,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	77,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	78,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	79,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	80,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	81,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	82,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	83,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	84,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	85,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	86,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	87,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	88,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	89,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	90,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	91,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	92,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	93,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	94,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	95,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	96,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	97,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	98,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	99,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	100,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	101,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	102,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	103,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	104,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	105,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	106,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	107,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	108,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	109,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	110,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	111,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	112,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	113,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	114,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	115,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	116,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	117,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	118,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	119,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	120,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	121,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	122,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	123,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	124,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	125,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	126,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	127,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	128,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	129,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	130,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	131,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	132,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	133,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	134,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	135,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	136,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	137,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	138,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	139,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	140,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	141,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	142,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	143,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	144,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	145,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	146,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	147,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	148,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	149,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	150,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	151,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	152,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	153,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	154,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	155,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	156,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	157,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	158,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	159,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	160,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	161,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	162,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	163,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	164,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	165,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	166,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	167,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	168,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	169,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	170,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	171,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	172,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	173,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	174,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	175,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	176,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	177,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	178,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	179,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	180,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	181,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	182,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	183,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	184,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	185,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	186,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	187,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	188,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	189,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	190,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	191,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	192,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	193,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	194,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	195,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	196,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	197,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	198,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	199,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	200,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	201,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	202,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	203,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	204,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	205,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	206,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	207,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	208,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	209,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	210,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	211,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	212,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	213,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	214,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	215,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	216,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	217,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	218,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	219,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	220,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	221,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	222,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	223,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	224,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	225,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	226,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	227,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	228,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	229,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	230,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	231,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	232,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	233,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	234,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	235,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	236,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	237,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	238,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	239,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	240,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	241,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	242,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	243,
									"scores":	[-8.60407703873994, -5.8710585506399369, -5.3032422234399368, -5.8710585506399369, -5.3032422234399368, -9.2519716437399371, -9.8046583764399351, -9.8046583764399351, -9.4425346134399355, -9.4425346134399355, -9.2519716437399371, -9.2519716437399371, -9.2519716437399371, -9.2519716437399371, -9.2519716437399371, -9.0937288437399371, -9.496235843739937, -9.2519716437399371, -9.0937288437399371, -9.2519716437399371, -9.2519716437399371, -9.2519716437399371, -9.2519716437399371, -9.2519716437399371, -9.2519716437399371, -9.3413943437399372, -9.3413943437399372, -9.2519716437399371]
								}]
						}, {
							"switch":	73,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	655,
							"begin_column":	5,
							"end_line":	664,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L655\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(list), sizeof (list), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    for (;;) {\n        if ((*work)(fileno(stdin), fileno(stdout)) != 0)\n            return;\n        if (input_eof())\n            break;\n        method = get_method(ifd);\n        if (method < 0)\n            return;\n        bytes_out = 0;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6217148586399368, -5.7845069983399364, -6.4124026983399371, -5.7845069983399364, -6.4124026983399371, -8.2557158586399364, -8.5142505316399362, -8.5142505316399362, -8.2436431783399371, -8.2436431783399371, -8.2557158586399364, -8.2557158586399364, -8.2557158586399364, -8.2557158586399364, -8.2557158586399364, -7.456151158639936, -7.6060220586399367, -8.2557158586399364, -7.456151158639936, -8.2557158586399364, -8.2557158586399364, -8.2557158586399364, -8.2557158586399364, -8.2557158586399364, -8.2557158586399364, -8.6926808586399371, -8.6926808586399371, -8.2557158586399364]
								}]
						}]
				}, {
					"line":	665,
					"switches":	[{
							"switch":	74,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	666,
							"begin_column":	3,
							"end_line":	666,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L666\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.24540168838443]
								}, {
									"case":	2,
									"scores":	[-5.24540168838443]
								}, {
									"case":	3,
									"scores":	[-5.24540168838443]
								}, {
									"case":	4,
									"scores":	[-5.24540168838443]
								}, {
									"case":	5,
									"scores":	[-5.24540168838443]
								}, {
									"case":	6,
									"scores":	[-5.24540168838443]
								}, {
									"case":	7,
									"scores":	[-5.24540168838443]
								}, {
									"case":	8,
									"scores":	[-5.24540168838443]
								}, {
									"case":	9,
									"scores":	[-5.24540168838443]
								}, {
									"case":	10,
									"scores":	[-5.24540168838443]
								}, {
									"case":	11,
									"scores":	[-5.24540168838443]
								}, {
									"case":	12,
									"scores":	[-5.24540168838443]
								}, {
									"case":	13,
									"scores":	[-5.24540168838443]
								}, {
									"case":	14,
									"scores":	[-5.24540168838443]
								}, {
									"case":	15,
									"scores":	[-5.24540168838443]
								}, {
									"case":	16,
									"scores":	[-5.24540168838443]
								}, {
									"case":	17,
									"scores":	[-5.24540168838443]
								}, {
									"case":	18,
									"scores":	[-5.24540168838443]
								}, {
									"case":	19,
									"scores":	[-5.24540168838443]
								}, {
									"case":	20,
									"scores":	[-5.24540168838443]
								}, {
									"case":	21,
									"scores":	[-5.24540168838443]
								}, {
									"case":	22,
									"scores":	[-5.24540168838443]
								}, {
									"case":	23,
									"scores":	[-5.24540168838443]
								}, {
									"case":	24,
									"scores":	[-5.24540168838443]
								}, {
									"case":	25,
									"scores":	[-5.24540168838443]
								}, {
									"case":	26,
									"scores":	[-5.24540168838443]
								}, {
									"case":	27,
									"scores":	[-5.24540168838443]
								}, {
									"case":	28,
									"scores":	[-5.24540168838443]
								}, {
									"case":	29,
									"scores":	[-5.24540168838443]
								}, {
									"case":	30,
									"scores":	[-5.24540168838443]
								}, {
									"case":	31,
									"scores":	[-5.24540168838443]
								}, {
									"case":	32,
									"scores":	[-5.24540168838443]
								}, {
									"case":	33,
									"scores":	[-5.24540168838443]
								}, {
									"case":	34,
									"scores":	[-5.24540168838443]
								}, {
									"case":	35,
									"scores":	[-5.24540168838443]
								}, {
									"case":	36,
									"scores":	[-5.24540168838443]
								}, {
									"case":	37,
									"scores":	[-5.24540168838443]
								}, {
									"case":	38,
									"scores":	[-5.24540168838443]
								}, {
									"case":	39,
									"scores":	[-5.24540168838443]
								}, {
									"case":	40,
									"scores":	[-5.24540168838443]
								}, {
									"case":	41,
									"scores":	[-5.24540168838443]
								}, {
									"case":	42,
									"scores":	[-5.24540168838443]
								}, {
									"case":	43,
									"scores":	[-5.24540168838443]
								}, {
									"case":	44,
									"scores":	[-5.24540168838443]
								}, {
									"case":	45,
									"scores":	[-5.24540168838443]
								}, {
									"case":	46,
									"scores":	[-5.24540168838443]
								}, {
									"case":	47,
									"scores":	[-5.24540168838443]
								}, {
									"case":	48,
									"scores":	[-5.24540168838443]
								}, {
									"case":	49,
									"scores":	[-5.24540168838443]
								}, {
									"case":	50,
									"scores":	[-5.24540168838443]
								}, {
									"case":	51,
									"scores":	[-5.24540168838443]
								}, {
									"case":	52,
									"scores":	[-5.24540168838443]
								}, {
									"case":	53,
									"scores":	[-5.24540168838443]
								}, {
									"case":	54,
									"scores":	[-5.24540168838443]
								}, {
									"case":	55,
									"scores":	[-5.24540168838443]
								}, {
									"case":	56,
									"scores":	[-5.24540168838443]
								}, {
									"case":	57,
									"scores":	[-5.24540168838443]
								}, {
									"case":	58,
									"scores":	[-5.24540168838443]
								}, {
									"case":	59,
									"scores":	[-5.24540168838443]
								}, {
									"case":	60,
									"scores":	[-5.24540168838443]
								}, {
									"case":	61,
									"scores":	[-5.24540168838443]
								}, {
									"case":	62,
									"scores":	[-5.24540168838443]
								}, {
									"case":	63,
									"scores":	[-5.24540168838443]
								}, {
									"case":	64,
									"scores":	[-5.24540168838443]
								}, {
									"case":	65,
									"scores":	[-5.24540168838443]
								}, {
									"case":	66,
									"scores":	[-5.24540168838443]
								}, {
									"case":	67,
									"scores":	[-5.24540168838443]
								}, {
									"case":	68,
									"scores":	[-5.24540168838443]
								}, {
									"case":	69,
									"scores":	[-5.24540168838443]
								}, {
									"case":	70,
									"scores":	[-5.24540168838443]
								}, {
									"case":	71,
									"scores":	[-5.24540168838443]
								}, {
									"case":	72,
									"scores":	[-5.24540168838443]
								}, {
									"case":	73,
									"scores":	[-5.24540168838443]
								}, {
									"case":	74,
									"scores":	[-5.24540168838443]
								}, {
									"case":	75,
									"scores":	[-5.24540168838443]
								}, {
									"case":	76,
									"scores":	[-5.24540168838443]
								}, {
									"case":	77,
									"scores":	[-5.24540168838443]
								}, {
									"case":	78,
									"scores":	[-5.24540168838443]
								}, {
									"case":	79,
									"scores":	[-5.24540168838443]
								}, {
									"case":	80,
									"scores":	[-5.24540168838443]
								}, {
									"case":	81,
									"scores":	[-5.24540168838443]
								}, {
									"case":	82,
									"scores":	[-5.24540168838443]
								}, {
									"case":	83,
									"scores":	[-5.24540168838443]
								}, {
									"case":	84,
									"scores":	[-5.24540168838443]
								}, {
									"case":	85,
									"scores":	[-5.24540168838443]
								}, {
									"case":	86,
									"scores":	[-5.24540168838443]
								}, {
									"case":	87,
									"scores":	[-5.24540168838443]
								}, {
									"case":	88,
									"scores":	[-5.24540168838443]
								}, {
									"case":	89,
									"scores":	[-5.24540168838443]
								}, {
									"case":	90,
									"scores":	[-5.24540168838443]
								}, {
									"case":	91,
									"scores":	[-5.24540168838443]
								}, {
									"case":	92,
									"scores":	[-5.24540168838443]
								}, {
									"case":	93,
									"scores":	[-5.24540168838443]
								}, {
									"case":	94,
									"scores":	[-5.24540168838443]
								}, {
									"case":	95,
									"scores":	[-5.24540168838443]
								}, {
									"case":	96,
									"scores":	[-5.24540168838443]
								}, {
									"case":	97,
									"scores":	[-5.24540168838443]
								}, {
									"case":	98,
									"scores":	[-5.24540168838443]
								}, {
									"case":	99,
									"scores":	[-5.24540168838443]
								}, {
									"case":	100,
									"scores":	[-5.24540168838443]
								}, {
									"case":	101,
									"scores":	[-5.24540168838443]
								}, {
									"case":	102,
									"scores":	[-5.24540168838443]
								}, {
									"case":	103,
									"scores":	[-5.24540168838443]
								}, {
									"case":	104,
									"scores":	[-5.24540168838443]
								}, {
									"case":	105,
									"scores":	[-5.24540168838443]
								}, {
									"case":	106,
									"scores":	[-5.24540168838443]
								}, {
									"case":	107,
									"scores":	[-5.24540168838443]
								}, {
									"case":	108,
									"scores":	[-5.24540168838443]
								}, {
									"case":	109,
									"scores":	[-5.24540168838443]
								}, {
									"case":	110,
									"scores":	[-5.24540168838443]
								}, {
									"case":	111,
									"scores":	[-5.24540168838443]
								}, {
									"case":	112,
									"scores":	[-5.24540168838443]
								}, {
									"case":	113,
									"scores":	[-5.24540168838443]
								}, {
									"case":	114,
									"scores":	[-5.24540168838443]
								}, {
									"case":	115,
									"scores":	[-5.24540168838443]
								}, {
									"case":	116,
									"scores":	[-5.24540168838443]
								}, {
									"case":	117,
									"scores":	[-5.24540168838443]
								}, {
									"case":	118,
									"scores":	[-5.24540168838443]
								}, {
									"case":	119,
									"scores":	[-5.24540168838443]
								}, {
									"case":	120,
									"scores":	[-5.24540168838443]
								}, {
									"case":	121,
									"scores":	[-5.24540168838443]
								}, {
									"case":	122,
									"scores":	[-5.24540168838443]
								}, {
									"case":	123,
									"scores":	[-5.24540168838443]
								}, {
									"case":	124,
									"scores":	[-5.24540168838443]
								}, {
									"case":	125,
									"scores":	[-5.24540168838443]
								}, {
									"case":	126,
									"scores":	[-5.24540168838443]
								}, {
									"case":	127,
									"scores":	[-5.24540168838443]
								}, {
									"case":	128,
									"scores":	[-5.24540168838443]
								}, {
									"case":	129,
									"scores":	[-5.24540168838443]
								}, {
									"case":	130,
									"scores":	[-5.24540168838443]
								}, {
									"case":	131,
									"scores":	[-5.24540168838443]
								}, {
									"case":	132,
									"scores":	[-5.24540168838443]
								}, {
									"case":	133,
									"scores":	[-5.24540168838443]
								}, {
									"case":	134,
									"scores":	[-5.24540168838443]
								}, {
									"case":	135,
									"scores":	[-5.24540168838443]
								}, {
									"case":	136,
									"scores":	[-5.24540168838443]
								}, {
									"case":	137,
									"scores":	[-5.24540168838443]
								}, {
									"case":	138,
									"scores":	[-5.24540168838443]
								}, {
									"case":	139,
									"scores":	[-5.24540168838443]
								}, {
									"case":	140,
									"scores":	[-5.24540168838443]
								}, {
									"case":	141,
									"scores":	[-5.24540168838443]
								}, {
									"case":	142,
									"scores":	[-5.24540168838443]
								}, {
									"case":	143,
									"scores":	[-5.24540168838443]
								}, {
									"case":	144,
									"scores":	[-5.24540168838443]
								}, {
									"case":	145,
									"scores":	[-5.24540168838443]
								}, {
									"case":	146,
									"scores":	[-5.24540168838443]
								}, {
									"case":	147,
									"scores":	[-5.24540168838443]
								}, {
									"case":	148,
									"scores":	[-5.24540168838443]
								}, {
									"case":	149,
									"scores":	[-5.24540168838443]
								}, {
									"case":	150,
									"scores":	[-5.24540168838443]
								}, {
									"case":	151,
									"scores":	[-5.24540168838443]
								}, {
									"case":	152,
									"scores":	[-5.24540168838443]
								}, {
									"case":	153,
									"scores":	[-5.24540168838443]
								}, {
									"case":	154,
									"scores":	[-5.24540168838443]
								}, {
									"case":	155,
									"scores":	[-5.24540168838443]
								}, {
									"case":	156,
									"scores":	[-5.24540168838443]
								}, {
									"case":	157,
									"scores":	[-5.24540168838443]
								}, {
									"case":	158,
									"scores":	[-5.24540168838443]
								}, {
									"case":	159,
									"scores":	[-5.24540168838443]
								}, {
									"case":	160,
									"scores":	[-5.24540168838443]
								}, {
									"case":	161,
									"scores":	[-5.24540168838443]
								}, {
									"case":	162,
									"scores":	[-5.24540168838443]
								}, {
									"case":	163,
									"scores":	[-5.24540168838443]
								}, {
									"case":	164,
									"scores":	[-5.24540168838443]
								}, {
									"case":	165,
									"scores":	[-5.24540168838443]
								}, {
									"case":	166,
									"scores":	[-5.24540168838443]
								}, {
									"case":	167,
									"scores":	[-5.24540168838443]
								}, {
									"case":	168,
									"scores":	[-5.24540168838443]
								}, {
									"case":	169,
									"scores":	[-5.24540168838443]
								}, {
									"case":	170,
									"scores":	[-5.24540168838443]
								}, {
									"case":	171,
									"scores":	[-5.24540168838443]
								}, {
									"case":	172,
									"scores":	[-5.24540168838443]
								}, {
									"case":	173,
									"scores":	[-5.24540168838443]
								}, {
									"case":	174,
									"scores":	[-5.24540168838443]
								}, {
									"case":	175,
									"scores":	[-5.24540168838443]
								}, {
									"case":	176,
									"scores":	[-5.24540168838443]
								}, {
									"case":	177,
									"scores":	[-5.24540168838443]
								}, {
									"case":	178,
									"scores":	[-5.24540168838443]
								}, {
									"case":	179,
									"scores":	[-5.24540168838443]
								}, {
									"case":	180,
									"scores":	[-5.24540168838443]
								}, {
									"case":	181,
									"scores":	[-5.24540168838443]
								}, {
									"case":	182,
									"scores":	[-5.24540168838443]
								}, {
									"case":	183,
									"scores":	[-5.24540168838443]
								}, {
									"case":	184,
									"scores":	[-5.24540168838443]
								}, {
									"case":	185,
									"scores":	[-5.24540168838443]
								}, {
									"case":	186,
									"scores":	[-5.24540168838443]
								}, {
									"case":	187,
									"scores":	[-5.24540168838443]
								}, {
									"case":	188,
									"scores":	[-5.24540168838443]
								}, {
									"case":	189,
									"scores":	[-5.24540168838443]
								}, {
									"case":	190,
									"scores":	[-5.24540168838443]
								}, {
									"case":	191,
									"scores":	[-5.24540168838443]
								}, {
									"case":	192,
									"scores":	[-5.24540168838443]
								}, {
									"case":	193,
									"scores":	[-5.24540168838443]
								}, {
									"case":	194,
									"scores":	[-5.24540168838443]
								}, {
									"case":	195,
									"scores":	[-5.24540168838443]
								}, {
									"case":	196,
									"scores":	[-5.24540168838443]
								}, {
									"case":	197,
									"scores":	[-5.24540168838443]
								}, {
									"case":	198,
									"scores":	[-5.24540168838443]
								}, {
									"case":	199,
									"scores":	[-5.24540168838443]
								}, {
									"case":	200,
									"scores":	[-5.24540168838443]
								}, {
									"case":	201,
									"scores":	[-5.24540168838443]
								}, {
									"case":	202,
									"scores":	[-5.24540168838443]
								}, {
									"case":	203,
									"scores":	[-5.24540168838443]
								}, {
									"case":	204,
									"scores":	[-5.24540168838443]
								}, {
									"case":	205,
									"scores":	[-5.24540168838443]
								}, {
									"case":	206,
									"scores":	[-5.24540168838443]
								}, {
									"case":	207,
									"scores":	[-5.24540168838443]
								}, {
									"case":	208,
									"scores":	[-5.24540168838443]
								}, {
									"case":	209,
									"scores":	[-5.24540168838443]
								}, {
									"case":	210,
									"scores":	[-5.24540168838443]
								}, {
									"case":	211,
									"scores":	[-5.24540168838443]
								}, {
									"case":	212,
									"scores":	[-5.24540168838443]
								}, {
									"case":	213,
									"scores":	[-5.24540168838443]
								}, {
									"case":	214,
									"scores":	[-5.24540168838443]
								}, {
									"case":	215,
									"scores":	[-5.24540168838443]
								}, {
									"case":	216,
									"scores":	[-5.24540168838443]
								}, {
									"case":	217,
									"scores":	[-5.24540168838443]
								}, {
									"case":	218,
									"scores":	[-5.24540168838443]
								}, {
									"case":	219,
									"scores":	[-5.24540168838443]
								}, {
									"case":	220,
									"scores":	[-5.24540168838443]
								}, {
									"case":	221,
									"scores":	[-5.24540168838443]
								}, {
									"case":	222,
									"scores":	[-5.24540168838443]
								}, {
									"case":	223,
									"scores":	[-5.24540168838443]
								}, {
									"case":	224,
									"scores":	[-5.24540168838443]
								}, {
									"case":	225,
									"scores":	[-5.24540168838443]
								}, {
									"case":	226,
									"scores":	[-5.24540168838443]
								}, {
									"case":	227,
									"scores":	[-5.24540168838443]
								}, {
									"case":	228,
									"scores":	[-5.24540168838443]
								}, {
									"case":	229,
									"scores":	[-5.24540168838443]
								}, {
									"case":	230,
									"scores":	[-5.24540168838443]
								}, {
									"case":	231,
									"scores":	[-5.24540168838443]
								}, {
									"case":	232,
									"scores":	[-5.24540168838443]
								}, {
									"case":	233,
									"scores":	[-5.24540168838443]
								}, {
									"case":	234,
									"scores":	[-5.24540168838443]
								}, {
									"case":	235,
									"scores":	[-5.24540168838443]
								}, {
									"case":	236,
									"scores":	[-5.24540168838443]
								}, {
									"case":	237,
									"scores":	[-5.24540168838443]
								}, {
									"case":	238,
									"scores":	[-5.24540168838443]
								}, {
									"case":	239,
									"scores":	[-5.24540168838443]
								}, {
									"case":	240,
									"scores":	[-5.24540168838443]
								}, {
									"case":	241,
									"scores":	[-5.24540168838443]
								}, {
									"case":	242,
									"scores":	[-5.24540168838443]
								}, {
									"case":	243,
									"scores":	[-8.79030129148443, -8.79030129148443, -8.79030129148443, -8.79030129148443, -6.9714916554844315, -6.9714916554844315, -6.5365413611844314, -8.79030129148443, -6.5365413611844314, -7.38772556748443, -8.37087516748443, -8.59796326118443, -7.38772556748443, -8.59796326118443, -9.34554809148443, -8.79030129148443, -8.98086426118443, -8.98086426118443, -8.79030129148443, -8.79030129148443, -8.79030129148443, -8.79030129148443, -8.79030129148443, -8.79030129148443, -8.79030129148443, -8.87972399148443, -8.87972399148443, -8.79030129148443]
								}]
						}, {
							"switch":	75,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	666,
							"begin_column":	5,
							"end_line":	679,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L666\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    if (test) {\n        rpl_fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        rpl_fprintf(stderr, \"\\n\");\n    }\n}\n", "if ((verbose) || __is_neg(\"\", \"L666\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    if (test) {\n        rpl_fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        rpl_fprintf(stderr, \"\\n\");\n    }\n}\n", "if ((verbose) && !__is_neg(\"\", \"L666\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    if (test) {\n        rpl_fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        rpl_fprintf(stderr, \"\\n\");\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.1261120634281454, -5.1261120634281454, -4.1871772831281469, -5.5901118164281458, -4.1871772831281469, -4.7108255164281463, -4.5072381164281463, -5.362609436128146, -4.7108255164281463, -5.362609436128146, -6.0088979664281457, -5.5901118164281458, -5.5780391361281456, -5.5780391361281456, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -6.0270768164281456, -6.0270768164281456, -5.5901118164281458]
								}, {
									"case":	2,
									"scores":	[-4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -3.6591638524281462, -3.6591638524281462, -2.7202290721281459, -4.1231636054281458, -2.7202290721281459, -3.2438773054281462, -3.0402899054281463, -3.8956612251281459, -3.2438773054281462, -3.8956612251281459, -4.5419497554281456, -4.1231636054281458, -4.1110909251281456, -4.1110909251281456, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.5601286054281456, -4.5601286054281456, -4.1231636054281458]
								}, {
									"case":	3,
									"scores":	[-4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -3.6591638524281462, -3.6591638524281462, -2.7202290721281459, -4.1231636054281458, -2.7202290721281459, -3.2438773054281462, -3.0402899054281463, -3.8956612251281459, -3.2438773054281462, -3.8956612251281459, -4.5419497554281456, -4.1231636054281458, -4.1110909251281456, -4.1110909251281456, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.5601286054281456, -4.5601286054281456, -4.1231636054281458]
								}]
						}, {
							"switch":	76,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	666,
							"begin_column":	5,
							"end_line":	679,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L666\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (verbose) {\n        if (test) {\n            rpl_fprintf(stderr, \" OK\\n\");\n        } else if (!decompress) {\n            display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n            rpl_fprintf(stderr, \"\\n\");\n        }\n    }\n", "if (!__is_neg(\"\", \"L666\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (verbose)) {\n    if (test) {\n        rpl_fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        rpl_fprintf(stderr, \"\\n\");\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -6.68711673538443, -6.68711673538443, -5.74818195508443, -7.15111648838443, -5.74818195508443, -6.27183018838443, -6.06824278838443, -6.92361410808443, -6.27183018838443, -6.92361410808443, -7.56990263838443, -7.15111648838443, -7.13904380808443, -7.13904380808443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.58808148838443, -7.58808148838443, -7.15111648838443]
								}, {
									"case":	2,
									"scores":	[-7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -6.68711673538443, -6.68711673538443, -5.74818195508443, -7.15111648838443, -5.74818195508443, -6.27183018838443, -6.06824278838443, -6.92361410808443, -6.27183018838443, -6.92361410808443, -7.56990263838443, -7.15111648838443, -7.13904380808443, -7.13904380808443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.15111648838443, -7.58808148838443, -7.58808148838443, -7.15111648838443]
								}]
						}]
				}, {
					"line":	1249,
					"switches":	[{
							"switch":	79,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1250,
							"begin_column":	7,
							"end_line":	1250,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -1;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -2;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -3;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 0;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 16;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 192;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 1;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 24;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 2;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 32;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 3;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 4;\n", "if (__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-4.336279859096055]
								}, {
									"case":	84,
									"scores":	[-4.336279859096055]
								}, {
									"case":	85,
									"scores":	[-4.336279859096055]
								}, {
									"case":	86,
									"scores":	[-4.336279859096055]
								}, {
									"case":	87,
									"scores":	[-4.336279859096055]
								}, {
									"case":	88,
									"scores":	[-4.336279859096055]
								}, {
									"case":	89,
									"scores":	[-4.336279859096055]
								}, {
									"case":	90,
									"scores":	[-4.336279859096055]
								}, {
									"case":	91,
									"scores":	[-4.336279859096055]
								}, {
									"case":	92,
									"scores":	[-4.336279859096055]
								}, {
									"case":	93,
									"scores":	[-4.336279859096055]
								}, {
									"case":	94,
									"scores":	[-4.336279859096055]
								}, {
									"case":	95,
									"scores":	[-4.336279859096055]
								}, {
									"case":	96,
									"scores":	[-4.336279859096055]
								}, {
									"case":	97,
									"scores":	[-4.336279859096055]
								}, {
									"case":	98,
									"scores":	[-4.336279859096055]
								}, {
									"case":	99,
									"scores":	[-4.336279859096055]
								}, {
									"case":	100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	198,
									"scores":	[-4.336279859096055]
								}, {
									"case":	199,
									"scores":	[-4.336279859096055]
								}, {
									"case":	200,
									"scores":	[-4.336279859096055]
								}, {
									"case":	201,
									"scores":	[-4.336279859096055]
								}, {
									"case":	202,
									"scores":	[-4.336279859096055]
								}, {
									"case":	203,
									"scores":	[-4.336279859096055]
								}, {
									"case":	204,
									"scores":	[-4.336279859096055]
								}, {
									"case":	205,
									"scores":	[-4.336279859096055]
								}, {
									"case":	206,
									"scores":	[-4.336279859096055]
								}, {
									"case":	207,
									"scores":	[-4.336279859096055]
								}, {
									"case":	208,
									"scores":	[-4.336279859096055]
								}, {
									"case":	209,
									"scores":	[-4.336279859096055]
								}, {
									"case":	210,
									"scores":	[-4.336279859096055]
								}, {
									"case":	211,
									"scores":	[-4.336279859096055]
								}, {
									"case":	212,
									"scores":	[-4.336279859096055]
								}, {
									"case":	213,
									"scores":	[-4.336279859096055]
								}, {
									"case":	214,
									"scores":	[-4.336279859096055]
								}, {
									"case":	215,
									"scores":	[-4.336279859096055]
								}, {
									"case":	216,
									"scores":	[-4.336279859096055]
								}, {
									"case":	217,
									"scores":	[-4.336279859096055]
								}, {
									"case":	218,
									"scores":	[-4.336279859096055]
								}, {
									"case":	219,
									"scores":	[-4.336279859096055]
								}, {
									"case":	220,
									"scores":	[-4.336279859096055]
								}, {
									"case":	221,
									"scores":	[-4.336279859096055]
								}, {
									"case":	222,
									"scores":	[-4.336279859096055]
								}, {
									"case":	223,
									"scores":	[-4.336279859096055]
								}, {
									"case":	224,
									"scores":	[-4.336279859096055]
								}, {
									"case":	225,
									"scores":	[-4.336279859096055]
								}, {
									"case":	226,
									"scores":	[-4.336279859096055]
								}, {
									"case":	227,
									"scores":	[-4.336279859096055]
								}, {
									"case":	228,
									"scores":	[-4.336279859096055]
								}, {
									"case":	229,
									"scores":	[-4.336279859096055]
								}, {
									"case":	230,
									"scores":	[-4.336279859096055]
								}, {
									"case":	231,
									"scores":	[-4.336279859096055]
								}, {
									"case":	232,
									"scores":	[-4.336279859096055]
								}, {
									"case":	233,
									"scores":	[-4.336279859096055]
								}, {
									"case":	234,
									"scores":	[-4.336279859096055]
								}, {
									"case":	235,
									"scores":	[-4.336279859096055]
								}, {
									"case":	236,
									"scores":	[-4.336279859096055]
								}, {
									"case":	237,
									"scores":	[-4.336279859096055]
								}, {
									"case":	238,
									"scores":	[-4.336279859096055]
								}, {
									"case":	239,
									"scores":	[-4.336279859096055]
								}, {
									"case":	240,
									"scores":	[-4.336279859096055]
								}, {
									"case":	241,
									"scores":	[-4.336279859096055]
								}, {
									"case":	242,
									"scores":	[-4.336279859096055]
								}, {
									"case":	243,
									"scores":	[-4.336279859096055]
								}, {
									"case":	244,
									"scores":	[-4.336279859096055]
								}, {
									"case":	245,
									"scores":	[-4.336279859096055]
								}, {
									"case":	246,
									"scores":	[-4.336279859096055]
								}, {
									"case":	247,
									"scores":	[-4.336279859096055]
								}, {
									"case":	248,
									"scores":	[-4.336279859096055]
								}, {
									"case":	249,
									"scores":	[-4.336279859096055]
								}, {
									"case":	250,
									"scores":	[-4.336279859096055]
								}, {
									"case":	251,
									"scores":	[-4.336279859096055]
								}, {
									"case":	252,
									"scores":	[-4.336279859096055]
								}, {
									"case":	253,
									"scores":	[-4.336279859096055]
								}, {
									"case":	254,
									"scores":	[-4.336279859096055]
								}, {
									"case":	255,
									"scores":	[-4.336279859096055]
								}, {
									"case":	256,
									"scores":	[-4.336279859096055]
								}, {
									"case":	257,
									"scores":	[-4.336279859096055]
								}, {
									"case":	258,
									"scores":	[-4.336279859096055]
								}, {
									"case":	259,
									"scores":	[-4.336279859096055]
								}, {
									"case":	260,
									"scores":	[-4.336279859096055]
								}, {
									"case":	261,
									"scores":	[-4.336279859096055]
								}, {
									"case":	262,
									"scores":	[-4.336279859096055]
								}, {
									"case":	263,
									"scores":	[-4.336279859096055]
								}, {
									"case":	264,
									"scores":	[-4.336279859096055]
								}, {
									"case":	265,
									"scores":	[-4.336279859096055]
								}, {
									"case":	266,
									"scores":	[-4.336279859096055]
								}, {
									"case":	267,
									"scores":	[-4.336279859096055]
								}, {
									"case":	268,
									"scores":	[-4.336279859096055]
								}, {
									"case":	269,
									"scores":	[-4.336279859096055]
								}, {
									"case":	270,
									"scores":	[-4.336279859096055]
								}, {
									"case":	271,
									"scores":	[-4.336279859096055]
								}, {
									"case":	272,
									"scores":	[-4.336279859096055]
								}, {
									"case":	273,
									"scores":	[-4.336279859096055]
								}, {
									"case":	274,
									"scores":	[-4.336279859096055]
								}, {
									"case":	275,
									"scores":	[-4.336279859096055]
								}, {
									"case":	276,
									"scores":	[-4.336279859096055]
								}, {
									"case":	277,
									"scores":	[-4.336279859096055]
								}, {
									"case":	278,
									"scores":	[-4.336279859096055]
								}, {
									"case":	279,
									"scores":	[-4.336279859096055]
								}, {
									"case":	280,
									"scores":	[-4.336279859096055]
								}, {
									"case":	281,
									"scores":	[-4.336279859096055]
								}, {
									"case":	282,
									"scores":	[-4.336279859096055]
								}, {
									"case":	283,
									"scores":	[-4.336279859096055]
								}, {
									"case":	284,
									"scores":	[-4.336279859096055]
								}, {
									"case":	285,
									"scores":	[-4.336279859096055]
								}, {
									"case":	286,
									"scores":	[-4.336279859096055]
								}, {
									"case":	287,
									"scores":	[-4.336279859096055]
								}, {
									"case":	288,
									"scores":	[-4.336279859096055]
								}, {
									"case":	289,
									"scores":	[-4.336279859096055]
								}, {
									"case":	290,
									"scores":	[-4.336279859096055]
								}, {
									"case":	291,
									"scores":	[-4.336279859096055]
								}, {
									"case":	292,
									"scores":	[-4.336279859096055]
								}, {
									"case":	293,
									"scores":	[-4.336279859096055]
								}, {
									"case":	294,
									"scores":	[-4.336279859096055]
								}, {
									"case":	295,
									"scores":	[-4.336279859096055]
								}, {
									"case":	296,
									"scores":	[-4.336279859096055]
								}, {
									"case":	297,
									"scores":	[-4.336279859096055]
								}, {
									"case":	298,
									"scores":	[-4.336279859096055]
								}, {
									"case":	299,
									"scores":	[-4.336279859096055]
								}, {
									"case":	300,
									"scores":	[-4.336279859096055]
								}, {
									"case":	301,
									"scores":	[-4.336279859096055]
								}, {
									"case":	302,
									"scores":	[-4.336279859096055]
								}, {
									"case":	303,
									"scores":	[-4.336279859096055]
								}, {
									"case":	304,
									"scores":	[-4.336279859096055]
								}, {
									"case":	305,
									"scores":	[-4.336279859096055]
								}, {
									"case":	306,
									"scores":	[-4.336279859096055]
								}, {
									"case":	307,
									"scores":	[-4.336279859096055]
								}, {
									"case":	308,
									"scores":	[-4.336279859096055]
								}, {
									"case":	309,
									"scores":	[-4.336279859096055]
								}, {
									"case":	310,
									"scores":	[-4.336279859096055]
								}, {
									"case":	311,
									"scores":	[-4.336279859096055]
								}, {
									"case":	312,
									"scores":	[-4.336279859096055]
								}, {
									"case":	313,
									"scores":	[-4.336279859096055]
								}, {
									"case":	314,
									"scores":	[-4.336279859096055]
								}, {
									"case":	315,
									"scores":	[-4.336279859096055]
								}, {
									"case":	316,
									"scores":	[-4.336279859096055]
								}, {
									"case":	317,
									"scores":	[-4.336279859096055]
								}, {
									"case":	318,
									"scores":	[-4.336279859096055]
								}, {
									"case":	319,
									"scores":	[-4.336279859096055]
								}, {
									"case":	320,
									"scores":	[-4.336279859096055]
								}, {
									"case":	321,
									"scores":	[-4.336279859096055]
								}, {
									"case":	322,
									"scores":	[-4.336279859096055]
								}, {
									"case":	323,
									"scores":	[-4.336279859096055]
								}, {
									"case":	324,
									"scores":	[-4.336279859096055]
								}, {
									"case":	325,
									"scores":	[-4.336279859096055]
								}, {
									"case":	326,
									"scores":	[-4.336279859096055]
								}, {
									"case":	327,
									"scores":	[-4.336279859096055]
								}, {
									"case":	328,
									"scores":	[-4.336279859096055]
								}, {
									"case":	329,
									"scores":	[-4.336279859096055]
								}, {
									"case":	330,
									"scores":	[-4.336279859096055]
								}, {
									"case":	331,
									"scores":	[-4.336279859096055]
								}, {
									"case":	332,
									"scores":	[-4.336279859096055]
								}, {
									"case":	333,
									"scores":	[-4.336279859096055]
								}, {
									"case":	334,
									"scores":	[-4.336279859096055]
								}, {
									"case":	335,
									"scores":	[-4.336279859096055]
								}, {
									"case":	336,
									"scores":	[-4.336279859096055]
								}, {
									"case":	337,
									"scores":	[-4.336279859096055]
								}, {
									"case":	338,
									"scores":	[-4.336279859096055]
								}, {
									"case":	339,
									"scores":	[-4.336279859096055]
								}, {
									"case":	340,
									"scores":	[-4.336279859096055]
								}, {
									"case":	341,
									"scores":	[-4.336279859096055]
								}, {
									"case":	342,
									"scores":	[-4.336279859096055]
								}, {
									"case":	343,
									"scores":	[-4.336279859096055]
								}, {
									"case":	344,
									"scores":	[-4.336279859096055]
								}, {
									"case":	345,
									"scores":	[-4.336279859096055]
								}, {
									"case":	346,
									"scores":	[-4.336279859096055]
								}, {
									"case":	347,
									"scores":	[-4.336279859096055]
								}, {
									"case":	348,
									"scores":	[-4.336279859096055]
								}, {
									"case":	349,
									"scores":	[-4.336279859096055]
								}, {
									"case":	350,
									"scores":	[-4.336279859096055]
								}, {
									"case":	351,
									"scores":	[-4.336279859096055]
								}, {
									"case":	352,
									"scores":	[-4.336279859096055]
								}, {
									"case":	353,
									"scores":	[-4.336279859096055]
								}, {
									"case":	354,
									"scores":	[-4.336279859096055]
								}, {
									"case":	355,
									"scores":	[-4.336279859096055]
								}, {
									"case":	356,
									"scores":	[-4.336279859096055]
								}, {
									"case":	357,
									"scores":	[-4.336279859096055]
								}, {
									"case":	358,
									"scores":	[-4.336279859096055]
								}, {
									"case":	359,
									"scores":	[-4.336279859096055]
								}, {
									"case":	360,
									"scores":	[-4.336279859096055]
								}, {
									"case":	361,
									"scores":	[-4.336279859096055]
								}, {
									"case":	362,
									"scores":	[-4.336279859096055]
								}, {
									"case":	363,
									"scores":	[-4.336279859096055]
								}, {
									"case":	364,
									"scores":	[-4.336279859096055]
								}, {
									"case":	365,
									"scores":	[-4.336279859096055]
								}, {
									"case":	366,
									"scores":	[-4.336279859096055]
								}, {
									"case":	367,
									"scores":	[-4.336279859096055]
								}, {
									"case":	368,
									"scores":	[-4.336279859096055]
								}, {
									"case":	369,
									"scores":	[-4.336279859096055]
								}, {
									"case":	370,
									"scores":	[-4.336279859096055]
								}, {
									"case":	371,
									"scores":	[-4.336279859096055]
								}, {
									"case":	372,
									"scores":	[-4.336279859096055]
								}, {
									"case":	373,
									"scores":	[-4.336279859096055]
								}, {
									"case":	374,
									"scores":	[-4.336279859096055]
								}, {
									"case":	375,
									"scores":	[-4.336279859096055]
								}, {
									"case":	376,
									"scores":	[-4.336279859096055]
								}, {
									"case":	377,
									"scores":	[-4.336279859096055]
								}, {
									"case":	378,
									"scores":	[-4.336279859096055]
								}, {
									"case":	379,
									"scores":	[-4.336279859096055]
								}, {
									"case":	380,
									"scores":	[-4.336279859096055]
								}, {
									"case":	381,
									"scores":	[-4.336279859096055]
								}, {
									"case":	382,
									"scores":	[-4.336279859096055]
								}, {
									"case":	383,
									"scores":	[-4.336279859096055]
								}, {
									"case":	384,
									"scores":	[-4.336279859096055]
								}, {
									"case":	385,
									"scores":	[-4.336279859096055]
								}, {
									"case":	386,
									"scores":	[-4.336279859096055]
								}, {
									"case":	387,
									"scores":	[-4.336279859096055]
								}, {
									"case":	388,
									"scores":	[-4.336279859096055]
								}, {
									"case":	389,
									"scores":	[-4.336279859096055]
								}, {
									"case":	390,
									"scores":	[-4.336279859096055]
								}, {
									"case":	391,
									"scores":	[-4.336279859096055]
								}, {
									"case":	392,
									"scores":	[-4.336279859096055]
								}, {
									"case":	393,
									"scores":	[-4.336279859096055]
								}, {
									"case":	394,
									"scores":	[-4.336279859096055]
								}, {
									"case":	395,
									"scores":	[-4.336279859096055]
								}, {
									"case":	396,
									"scores":	[-4.336279859096055]
								}, {
									"case":	397,
									"scores":	[-4.336279859096055]
								}, {
									"case":	398,
									"scores":	[-4.336279859096055]
								}, {
									"case":	399,
									"scores":	[-4.336279859096055]
								}, {
									"case":	400,
									"scores":	[-4.336279859096055]
								}, {
									"case":	401,
									"scores":	[-4.336279859096055]
								}, {
									"case":	402,
									"scores":	[-4.336279859096055]
								}, {
									"case":	403,
									"scores":	[-4.336279859096055]
								}, {
									"case":	404,
									"scores":	[-4.336279859096055]
								}, {
									"case":	405,
									"scores":	[-4.336279859096055]
								}, {
									"case":	406,
									"scores":	[-4.336279859096055]
								}, {
									"case":	407,
									"scores":	[-4.336279859096055]
								}, {
									"case":	408,
									"scores":	[-4.336279859096055]
								}, {
									"case":	409,
									"scores":	[-4.336279859096055]
								}, {
									"case":	410,
									"scores":	[-4.336279859096055]
								}, {
									"case":	411,
									"scores":	[-4.336279859096055]
								}, {
									"case":	412,
									"scores":	[-4.336279859096055]
								}, {
									"case":	413,
									"scores":	[-4.336279859096055]
								}, {
									"case":	414,
									"scores":	[-4.336279859096055]
								}, {
									"case":	415,
									"scores":	[-4.336279859096055]
								}, {
									"case":	416,
									"scores":	[-4.336279859096055]
								}, {
									"case":	417,
									"scores":	[-4.336279859096055]
								}, {
									"case":	418,
									"scores":	[-4.336279859096055]
								}, {
									"case":	419,
									"scores":	[-4.336279859096055]
								}, {
									"case":	420,
									"scores":	[-4.336279859096055]
								}, {
									"case":	421,
									"scores":	[-4.336279859096055]
								}, {
									"case":	422,
									"scores":	[-4.336279859096055]
								}, {
									"case":	423,
									"scores":	[-4.336279859096055]
								}, {
									"case":	424,
									"scores":	[-4.336279859096055]
								}, {
									"case":	425,
									"scores":	[-4.336279859096055]
								}, {
									"case":	426,
									"scores":	[-4.336279859096055]
								}, {
									"case":	427,
									"scores":	[-4.336279859096055]
								}, {
									"case":	428,
									"scores":	[-4.336279859096055]
								}, {
									"case":	429,
									"scores":	[-4.336279859096055]
								}, {
									"case":	430,
									"scores":	[-4.336279859096055]
								}, {
									"case":	431,
									"scores":	[-4.336279859096055]
								}, {
									"case":	432,
									"scores":	[-4.336279859096055]
								}, {
									"case":	433,
									"scores":	[-4.336279859096055]
								}, {
									"case":	434,
									"scores":	[-4.336279859096055]
								}, {
									"case":	435,
									"scores":	[-4.336279859096055]
								}, {
									"case":	436,
									"scores":	[-4.336279859096055]
								}, {
									"case":	437,
									"scores":	[-4.336279859096055]
								}, {
									"case":	438,
									"scores":	[-4.336279859096055]
								}, {
									"case":	439,
									"scores":	[-4.336279859096055]
								}, {
									"case":	440,
									"scores":	[-4.336279859096055]
								}, {
									"case":	441,
									"scores":	[-4.336279859096055]
								}, {
									"case":	442,
									"scores":	[-4.336279859096055]
								}, {
									"case":	443,
									"scores":	[-4.336279859096055]
								}, {
									"case":	444,
									"scores":	[-4.336279859096055]
								}, {
									"case":	445,
									"scores":	[-4.336279859096055]
								}, {
									"case":	446,
									"scores":	[-4.336279859096055]
								}, {
									"case":	447,
									"scores":	[-4.336279859096055]
								}, {
									"case":	448,
									"scores":	[-4.336279859096055]
								}, {
									"case":	449,
									"scores":	[-4.336279859096055]
								}, {
									"case":	450,
									"scores":	[-4.336279859096055]
								}, {
									"case":	451,
									"scores":	[-4.336279859096055]
								}, {
									"case":	452,
									"scores":	[-4.336279859096055]
								}, {
									"case":	453,
									"scores":	[-4.336279859096055]
								}, {
									"case":	454,
									"scores":	[-4.336279859096055]
								}, {
									"case":	455,
									"scores":	[-4.336279859096055]
								}, {
									"case":	456,
									"scores":	[-4.336279859096055]
								}, {
									"case":	457,
									"scores":	[-4.336279859096055]
								}, {
									"case":	458,
									"scores":	[-4.336279859096055]
								}, {
									"case":	459,
									"scores":	[-4.336279859096055]
								}, {
									"case":	460,
									"scores":	[-4.336279859096055]
								}, {
									"case":	461,
									"scores":	[-4.336279859096055]
								}, {
									"case":	462,
									"scores":	[-4.336279859096055]
								}, {
									"case":	463,
									"scores":	[-4.336279859096055]
								}, {
									"case":	464,
									"scores":	[-4.336279859096055]
								}, {
									"case":	465,
									"scores":	[-4.336279859096055]
								}, {
									"case":	466,
									"scores":	[-4.336279859096055]
								}, {
									"case":	467,
									"scores":	[-4.336279859096055]
								}, {
									"case":	468,
									"scores":	[-4.336279859096055]
								}, {
									"case":	469,
									"scores":	[-4.336279859096055]
								}, {
									"case":	470,
									"scores":	[-4.336279859096055]
								}, {
									"case":	471,
									"scores":	[-4.336279859096055]
								}, {
									"case":	472,
									"scores":	[-4.336279859096055]
								}, {
									"case":	473,
									"scores":	[-4.336279859096055]
								}, {
									"case":	474,
									"scores":	[-4.336279859096055]
								}, {
									"case":	475,
									"scores":	[-4.336279859096055]
								}, {
									"case":	476,
									"scores":	[-4.336279859096055]
								}, {
									"case":	477,
									"scores":	[-4.336279859096055]
								}, {
									"case":	478,
									"scores":	[-4.336279859096055]
								}, {
									"case":	479,
									"scores":	[-4.336279859096055]
								}, {
									"case":	480,
									"scores":	[-4.336279859096055]
								}, {
									"case":	481,
									"scores":	[-4.336279859096055]
								}, {
									"case":	482,
									"scores":	[-4.336279859096055]
								}, {
									"case":	483,
									"scores":	[-4.336279859096055]
								}, {
									"case":	484,
									"scores":	[-4.336279859096055]
								}, {
									"case":	485,
									"scores":	[-4.336279859096055]
								}, {
									"case":	486,
									"scores":	[-4.336279859096055]
								}, {
									"case":	487,
									"scores":	[-4.336279859096055]
								}, {
									"case":	488,
									"scores":	[-4.336279859096055]
								}, {
									"case":	489,
									"scores":	[-4.336279859096055]
								}, {
									"case":	490,
									"scores":	[-4.336279859096055]
								}, {
									"case":	491,
									"scores":	[-4.336279859096055]
								}, {
									"case":	492,
									"scores":	[-4.336279859096055]
								}, {
									"case":	493,
									"scores":	[-4.336279859096055]
								}, {
									"case":	494,
									"scores":	[-4.336279859096055]
								}, {
									"case":	495,
									"scores":	[-4.336279859096055]
								}, {
									"case":	496,
									"scores":	[-4.336279859096055]
								}, {
									"case":	497,
									"scores":	[-4.336279859096055]
								}, {
									"case":	498,
									"scores":	[-4.336279859096055]
								}, {
									"case":	499,
									"scores":	[-4.336279859096055]
								}, {
									"case":	500,
									"scores":	[-4.336279859096055]
								}, {
									"case":	501,
									"scores":	[-4.336279859096055]
								}, {
									"case":	502,
									"scores":	[-4.336279859096055]
								}, {
									"case":	503,
									"scores":	[-4.336279859096055]
								}, {
									"case":	504,
									"scores":	[-4.336279859096055]
								}, {
									"case":	505,
									"scores":	[-4.336279859096055]
								}, {
									"case":	506,
									"scores":	[-4.336279859096055]
								}, {
									"case":	507,
									"scores":	[-4.336279859096055]
								}, {
									"case":	508,
									"scores":	[-4.336279859096055]
								}, {
									"case":	509,
									"scores":	[-4.336279859096055]
								}, {
									"case":	510,
									"scores":	[-4.336279859096055]
								}, {
									"case":	511,
									"scores":	[-4.336279859096055]
								}, {
									"case":	512,
									"scores":	[-4.336279859096055]
								}, {
									"case":	513,
									"scores":	[-4.336279859096055]
								}, {
									"case":	514,
									"scores":	[-4.336279859096055]
								}, {
									"case":	515,
									"scores":	[-4.336279859096055]
								}, {
									"case":	516,
									"scores":	[-4.336279859096055]
								}, {
									"case":	517,
									"scores":	[-4.336279859096055]
								}, {
									"case":	518,
									"scores":	[-4.336279859096055]
								}, {
									"case":	519,
									"scores":	[-4.336279859096055]
								}, {
									"case":	520,
									"scores":	[-4.336279859096055]
								}, {
									"case":	521,
									"scores":	[-4.336279859096055]
								}, {
									"case":	522,
									"scores":	[-4.336279859096055]
								}, {
									"case":	523,
									"scores":	[-4.336279859096055]
								}, {
									"case":	524,
									"scores":	[-4.336279859096055]
								}, {
									"case":	525,
									"scores":	[-4.336279859096055]
								}, {
									"case":	526,
									"scores":	[-4.336279859096055]
								}, {
									"case":	527,
									"scores":	[-4.336279859096055]
								}, {
									"case":	528,
									"scores":	[-4.336279859096055]
								}, {
									"case":	529,
									"scores":	[-4.336279859096055]
								}, {
									"case":	530,
									"scores":	[-4.336279859096055]
								}, {
									"case":	531,
									"scores":	[-4.336279859096055]
								}, {
									"case":	532,
									"scores":	[-4.336279859096055]
								}, {
									"case":	533,
									"scores":	[-4.336279859096055]
								}, {
									"case":	534,
									"scores":	[-4.336279859096055]
								}, {
									"case":	535,
									"scores":	[-4.336279859096055]
								}, {
									"case":	536,
									"scores":	[-4.336279859096055]
								}, {
									"case":	537,
									"scores":	[-4.336279859096055]
								}, {
									"case":	538,
									"scores":	[-4.336279859096055]
								}, {
									"case":	539,
									"scores":	[-4.336279859096055]
								}, {
									"case":	540,
									"scores":	[-4.336279859096055]
								}, {
									"case":	541,
									"scores":	[-4.336279859096055]
								}, {
									"case":	542,
									"scores":	[-4.336279859096055]
								}, {
									"case":	543,
									"scores":	[-4.336279859096055]
								}, {
									"case":	544,
									"scores":	[-4.336279859096055]
								}, {
									"case":	545,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	546,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	547,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	548,
									"scores":	[-3.982234282196055, -3.6870044541960549, -3.982234282196055, -3.6870044541960549, -5.4976071790960548, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.7858694621960547, -5.7858694621960547, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.2034921590960552, -5.2034921590960552, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.6964467621960555, -5.3807549990960553, -5.6964467621960555, -5.6964467621960555]
								}, {
									"case":	549,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	550,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	551,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	552,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	553,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	554,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	555,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	556,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}, {
									"case":	557,
									"scores":	[-6.245016082196055, -5.9497862541960549, -6.245016082196055, -5.9497862541960549, -7.7603889790960547, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -8.0486512621960546, -8.0486512621960546, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.4662739590960552, -7.4662739590960552, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.9592285621960555, -7.6435367990960552, -7.9592285621960555, -7.9592285621960555]
								}]
						}, {
							"switch":	80,
							"types":	[[], [], [1], [], [], [], [764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777], [], [763], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761], [], [], [762]],
							"begin_line":	1250,
							"begin_column":	9,
							"end_line":	1250,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L1250\", 28, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n", "_IO_putc(1, 0)", "__tolower_l(1, 0)", "__toupper_l(1, 0)", "clock_adjtime(1, 0)", "clock_getcpuclockid(1, 0)", "clock_getres(1, 0)", "clock_gettime(1, 0)", "clock_settime(1, 0)", "copy(1, -1)", "copy(1, -2)", "copy(1, -3)", "copy(1, 0)", "copy(1, 1)", "copy(1, 16)", "copy(1, 192)", "copy(1, 2)", "copy(1, 24)", "copy(1, 3)", "copy(1, 32)", "copy(1, 4)", "copy(1, 8)", "copy(1, _gl_warn_on_use)", "copy(1, ascii)", "copy(1, block_mode)", "copy(1, decompress)", "copy(1, decrypt)", "copy(1, do_lzw)", "copy(1, exit_code)", "copy(1, exiting_signal)", "copy(1, force)", "copy(1, foreground)", "copy(1, ifd)", "copy(1, imagic1)", "copy(1, in)", "copy(1, last_member)", "copy(1, level)", "copy(1, list)", "copy(1, maxbits)", "copy(1, method)", "copy(1, no_name)", "copy(1, no_time)", "copy(1, ofd)", "copy(1, part_nb)", "copy(1, quiet)", "copy(1, recursive)", "copy(1, remove_ofname_fd)", "copy(1, save_orig_name)", "copy(1, test)", "copy(1, to_stdout)", "copy(1, verbose)", "ct_tally(1, -1)", "ct_tally(1, -2)", "ct_tally(1, -3)", "ct_tally(1, 0)", "ct_tally(1, 1)", "ct_tally(1, 16)", "ct_tally(1, 192)", "ct_tally(1, 2)", "ct_tally(1, 24)", "ct_tally(1, 3)", "ct_tally(1, 32)", "ct_tally(1, 4)", "ct_tally(1, 8)", "ct_tally(1, _gl_warn_on_use)", "ct_tally(1, ascii)", "ct_tally(1, block_mode)", "ct_tally(1, decompress)", "ct_tally(1, decrypt)", "ct_tally(1, do_lzw)", "ct_tally(1, exit_code)", "ct_tally(1, exiting_signal)", "ct_tally(1, force)", "ct_tally(1, foreground)", "ct_tally(1, ifd)", "ct_tally(1, imagic1)", "ct_tally(1, in)", "ct_tally(1, last_member)", "ct_tally(1, level)", "ct_tally(1, list)", "ct_tally(1, maxbits)", "ct_tally(1, method)", "ct_tally(1, no_name)", "ct_tally(1, no_time)", "ct_tally(1, ofd)", "ct_tally(1, part_nb)", "ct_tally(1, quiet)", "ct_tally(1, recursive)", "ct_tally(1, remove_ofname_fd)", "ct_tally(1, save_orig_name)", "ct_tally(1, test)", "ct_tally(1, to_stdout)", "ct_tally(1, verbose)", "daemon(1, -1)", "daemon(1, -2)", "daemon(1, -3)", "daemon(1, 0)", "daemon(1, 1)", "daemon(1, 16)", "daemon(1, 192)", "daemon(1, 2)", "daemon(1, 24)", "daemon(1, 3)", "daemon(1, 32)", "daemon(1, 4)", "daemon(1, 8)", "daemon(1, _gl_warn_on_use)", "daemon(1, ascii)", "daemon(1, block_mode)", "daemon(1, decompress)", "daemon(1, decrypt)", "daemon(1, do_lzw)", "daemon(1, exit_code)", "daemon(1, exiting_signal)", "daemon(1, force)", "daemon(1, foreground)", "daemon(1, ifd)", "daemon(1, imagic1)", "daemon(1, in)", "daemon(1, last_member)", "daemon(1, level)", "daemon(1, list)", "daemon(1, maxbits)", "daemon(1, method)", "daemon(1, no_name)", "daemon(1, no_time)", "daemon(1, ofd)", "daemon(1, part_nb)", "daemon(1, quiet)", "daemon(1, recursive)", "daemon(1, remove_ofname_fd)", "daemon(1, save_orig_name)", "daemon(1, test)", "daemon(1, to_stdout)", "daemon(1, verbose)", "dup2(1, -1)", "dup2(1, -2)", "dup2(1, -3)", "dup2(1, 0)", "dup2(1, 1)", "dup2(1, 16)", "dup2(1, 192)", "dup2(1, 2)", "dup2(1, 24)", "dup2(1, 3)", "dup2(1, 32)", "dup2(1, 4)", "dup2(1, 8)", "dup2(1, _gl_warn_on_use)", "dup2(1, ascii)", "dup2(1, block_mode)", "dup2(1, decompress)", "dup2(1, decrypt)", "dup2(1, do_lzw)", "dup2(1, exit_code)", "dup2(1, exiting_signal)", "dup2(1, force)", "dup2(1, foreground)", "dup2(1, ifd)", "dup2(1, imagic1)", "dup2(1, in)", "dup2(1, last_member)", "dup2(1, level)", "dup2(1, list)", "dup2(1, maxbits)", "dup2(1, method)", "dup2(1, no_name)", "dup2(1, no_time)", "dup2(1, ofd)", "dup2(1, part_nb)", "dup2(1, quiet)", "dup2(1, recursive)", "dup2(1, remove_ofname_fd)", "dup2(1, save_orig_name)", "dup2(1, test)", "dup2(1, to_stdout)", "dup2(1, verbose)", "fchmod(1, -1)", "fchmod(1, -2)", "fchmod(1, -3)", "fchmod(1, 0)", "fchmod(1, 1)", "fchmod(1, 16)", "fchmod(1, 192)", "fchmod(1, 2)", "fchmod(1, 24)", "fchmod(1, 3)", "fchmod(1, 32)", "fchmod(1, 4)", "fchmod(1, 8)", "fchmod(1, inptr)", "fchmod(1, insize)", "fchmod(1, outcnt)", "fputc(1, 0)", "fputc_unlocked(1, 0)", "fstat(1, 0)", "fstat64(1, 0)", "ftruncate(1, -1)", "ftruncate(1, -2)", "ftruncate(1, -3)", "ftruncate(1, 0)", "ftruncate(1, 1)", "ftruncate(1, 16)", "ftruncate(1, 192)", "ftruncate(1, 2)", "ftruncate(1, 24)", "ftruncate(1, 3)", "ftruncate(1, 32)", "ftruncate(1, 4)", "ftruncate(1, 8)", "ftruncate(1, bytes_in)", "ftruncate(1, bytes_out)", "ftruncate(1, header_bytes)", "ftruncate(1, ifile_size)", "ftruncate(1, total_in)", "ftruncate(1, total_out)", "ftruncate64(1, -1)", "ftruncate64(1, -2)", "ftruncate64(1, -3)", "ftruncate64(1, 0)", "ftruncate64(1, 1)", "ftruncate64(1, 16)", "ftruncate64(1, 192)", "ftruncate64(1, 2)", "ftruncate64(1, 24)", "ftruncate64(1, 3)", "ftruncate64(1, 32)", "ftruncate64(1, 4)", "ftruncate64(1, 8)", "ftruncate64(1, bytes_in)", "ftruncate64(1, bytes_out)", "ftruncate64(1, header_bytes)", "ftruncate64(1, ifile_size)", "ftruncate64(1, total_in)", "ftruncate64(1, total_out)", "futimens(1, 0)", "getgroups(1, 0)", "isalnum_l(1, 0)", "isalpha_l(1, 0)", "isblank_l(1, 0)", "iscntrl_l(1, 0)", "isctype(1, -1)", "isctype(1, -2)", "isctype(1, -3)", "isctype(1, 0)", "isctype(1, 1)", "isctype(1, 16)", "isctype(1, 192)", "isctype(1, 2)", "isctype(1, 24)", "isctype(1, 3)", "isctype(1, 32)", "isctype(1, 4)", "isctype(1, 8)", "isctype(1, _gl_warn_on_use)", "isctype(1, ascii)", "isctype(1, block_mode)", "isctype(1, decompress)", "isctype(1, decrypt)", "isctype(1, do_lzw)", "isctype(1, exit_code)", "isctype(1, exiting_signal)", "isctype(1, force)", "isctype(1, foreground)", "isctype(1, ifd)", "isctype(1, imagic1)", "isctype(1, in)", "isctype(1, last_member)", "isctype(1, level)", "isctype(1, list)", "isctype(1, maxbits)", "isctype(1, method)", "isctype(1, no_name)", "isctype(1, no_time)", "isctype(1, ofd)", "isctype(1, part_nb)", "isctype(1, quiet)", "isctype(1, recursive)", "isctype(1, remove_ofname_fd)", "isctype(1, save_orig_name)", "isctype(1, test)", "isctype(1, to_stdout)", "isctype(1, verbose)", "isdigit_l(1, 0)", "isgraph_l(1, 0)", "islower_l(1, 0)", "isprint_l(1, 0)", "ispunct_l(1, 0)", "isspace_l(1, 0)", "isupper_l(1, 0)", "isxdigit_l(1, 0)", "kill(1, -1)", "kill(1, -2)", "kill(1, -3)", "kill(1, 0)", "kill(1, 1)", "kill(1, 16)", "kill(1, 192)", "kill(1, 2)", "kill(1, 24)", "kill(1, 3)", "kill(1, 32)", "kill(1, 4)", "kill(1, 8)", "kill(1, _gl_warn_on_use)", "kill(1, ascii)", "kill(1, block_mode)", "kill(1, decompress)", "kill(1, decrypt)", "kill(1, do_lzw)", "kill(1, exit_code)", "kill(1, exiting_signal)", "kill(1, force)", "kill(1, foreground)", "kill(1, ifd)", "kill(1, imagic1)", "kill(1, in)", "kill(1, last_member)", "kill(1, level)", "kill(1, list)", "kill(1, maxbits)", "kill(1, method)", "kill(1, no_name)", "kill(1, no_time)", "kill(1, ofd)", "kill(1, part_nb)", "kill(1, quiet)", "kill(1, recursive)", "kill(1, remove_ofname_fd)", "kill(1, save_orig_name)", "kill(1, test)", "kill(1, to_stdout)", "kill(1, verbose)", "killpg(1, -1)", "killpg(1, -2)", "killpg(1, -3)", "killpg(1, 0)", "killpg(1, 1)", "killpg(1, 16)", "killpg(1, 192)", "killpg(1, 2)", "killpg(1, 24)", "killpg(1, 3)", "killpg(1, 32)", "killpg(1, 4)", "killpg(1, 8)", "killpg(1, _gl_warn_on_use)", "killpg(1, ascii)", "killpg(1, block_mode)", "killpg(1, decompress)", "killpg(1, decrypt)", "killpg(1, do_lzw)", "killpg(1, exit_code)", "killpg(1, exiting_signal)", "killpg(1, force)", "killpg(1, foreground)", "killpg(1, ifd)", "killpg(1, imagic1)", "killpg(1, in)", "killpg(1, last_member)", "killpg(1, level)", "killpg(1, list)", "killpg(1, maxbits)", "killpg(1, method)", "killpg(1, no_name)", "killpg(1, no_time)", "killpg(1, ofd)", "killpg(1, part_nb)", "killpg(1, quiet)", "killpg(1, recursive)", "killpg(1, remove_ofname_fd)", "killpg(1, save_orig_name)", "killpg(1, test)", "killpg(1, to_stdout)", "killpg(1, verbose)", "lzw(1, -1)", "lzw(1, -2)", "lzw(1, -3)", "lzw(1, 0)", "lzw(1, 1)", "lzw(1, 16)", "lzw(1, 192)", "lzw(1, 2)", "lzw(1, 24)", "lzw(1, 3)", "lzw(1, 32)", "lzw(1, 4)", "lzw(1, 8)", "lzw(1, _gl_warn_on_use)", "lzw(1, ascii)", "lzw(1, block_mode)", "lzw(1, decompress)", "lzw(1, decrypt)", "lzw(1, do_lzw)", "lzw(1, exit_code)", "lzw(1, exiting_signal)", "lzw(1, force)", "lzw(1, foreground)", "lzw(1, ifd)", "lzw(1, imagic1)", "lzw(1, in)", "lzw(1, last_member)", "lzw(1, level)", "lzw(1, list)", "lzw(1, maxbits)", "lzw(1, method)", "lzw(1, no_name)", "lzw(1, no_time)", "lzw(1, ofd)", "lzw(1, part_nb)", "lzw(1, quiet)", "lzw(1, recursive)", "lzw(1, remove_ofname_fd)", "lzw(1, save_orig_name)", "lzw(1, test)", "lzw(1, to_stdout)", "lzw(1, verbose)", "main(1, 0)", "main(1, args)", "putc(1, 0)", "putc_unlocked(1, 0)", "putw(1, 0)", "setpgid(1, -1)", "setpgid(1, -2)", "setpgid(1, -3)", "setpgid(1, 0)", "setpgid(1, 1)", "setpgid(1, 16)", "setpgid(1, 192)", "setpgid(1, 2)", "setpgid(1, 24)", "setpgid(1, 3)", "setpgid(1, 32)", "setpgid(1, 4)", "setpgid(1, 8)", "setpgid(1, _gl_warn_on_use)", "setpgid(1, ascii)", "setpgid(1, block_mode)", "setpgid(1, decompress)", "setpgid(1, decrypt)", "setpgid(1, do_lzw)", "setpgid(1, exit_code)", "setpgid(1, exiting_signal)", "setpgid(1, force)", "setpgid(1, foreground)", "setpgid(1, ifd)", "setpgid(1, imagic1)", "setpgid(1, in)", "setpgid(1, last_member)", "setpgid(1, level)", "setpgid(1, list)", "setpgid(1, maxbits)", "setpgid(1, method)", "setpgid(1, no_name)", "setpgid(1, no_time)", "setpgid(1, ofd)", "setpgid(1, part_nb)", "setpgid(1, quiet)", "setpgid(1, recursive)", "setpgid(1, remove_ofname_fd)", "setpgid(1, save_orig_name)", "setpgid(1, test)", "setpgid(1, to_stdout)", "setpgid(1, verbose)", "siginterrupt(1, -1)", "siginterrupt(1, -2)", "siginterrupt(1, -3)", "siginterrupt(1, 0)", "siginterrupt(1, 1)", "siginterrupt(1, 16)", "siginterrupt(1, 192)", "siginterrupt(1, 2)", "siginterrupt(1, 24)", "siginterrupt(1, 3)", "siginterrupt(1, 32)", "siginterrupt(1, 4)", "siginterrupt(1, 8)", "siginterrupt(1, _gl_warn_on_use)", "siginterrupt(1, ascii)", "siginterrupt(1, block_mode)", "siginterrupt(1, decompress)", "siginterrupt(1, decrypt)", "siginterrupt(1, do_lzw)", "siginterrupt(1, exit_code)", "siginterrupt(1, exiting_signal)", "siginterrupt(1, force)", "siginterrupt(1, foreground)", "siginterrupt(1, ifd)", "siginterrupt(1, imagic1)", "siginterrupt(1, in)", "siginterrupt(1, last_member)", "siginterrupt(1, level)", "siginterrupt(1, list)", "siginterrupt(1, maxbits)", "siginterrupt(1, method)", "siginterrupt(1, no_name)", "siginterrupt(1, no_time)", "siginterrupt(1, ofd)", "siginterrupt(1, part_nb)", "siginterrupt(1, quiet)", "siginterrupt(1, recursive)", "siginterrupt(1, remove_ofname_fd)", "siginterrupt(1, save_orig_name)", "siginterrupt(1, test)", "siginterrupt(1, to_stdout)", "siginterrupt(1, verbose)", "tcsetpgrp(1, -1)", "tcsetpgrp(1, -2)", "tcsetpgrp(1, -3)", "tcsetpgrp(1, 0)", "tcsetpgrp(1, 1)", "tcsetpgrp(1, 16)", "tcsetpgrp(1, 192)", "tcsetpgrp(1, 2)", "tcsetpgrp(1, 24)", "tcsetpgrp(1, 3)", "tcsetpgrp(1, 32)", "tcsetpgrp(1, 4)", "tcsetpgrp(1, 8)", "tcsetpgrp(1, _gl_warn_on_use)", "tcsetpgrp(1, ascii)", "tcsetpgrp(1, block_mode)", "tcsetpgrp(1, decompress)", "tcsetpgrp(1, decrypt)", "tcsetpgrp(1, do_lzw)", "tcsetpgrp(1, exit_code)", "tcsetpgrp(1, exiting_signal)", "tcsetpgrp(1, force)", "tcsetpgrp(1, foreground)", "tcsetpgrp(1, ifd)", "tcsetpgrp(1, imagic1)", "tcsetpgrp(1, in)", "tcsetpgrp(1, last_member)", "tcsetpgrp(1, level)", "tcsetpgrp(1, list)", "tcsetpgrp(1, maxbits)", "tcsetpgrp(1, method)", "tcsetpgrp(1, no_name)", "tcsetpgrp(1, no_time)", "tcsetpgrp(1, ofd)", "tcsetpgrp(1, part_nb)", "tcsetpgrp(1, quiet)", "tcsetpgrp(1, recursive)", "tcsetpgrp(1, remove_ofname_fd)", "tcsetpgrp(1, save_orig_name)", "tcsetpgrp(1, test)", "tcsetpgrp(1, to_stdout)", "tcsetpgrp(1, verbose)", "tolower_l(1, 0)", "toupper_l(1, 0)", "ungetc(1, 0)", "unlzh(1, -1)", "unlzh(1, -2)", "unlzh(1, -3)", "unlzh(1, 0)", "unlzh(1, 1)", "unlzh(1, 16)", "unlzh(1, 192)", "unlzh(1, 2)", "unlzh(1, 24)", "unlzh(1, 3)", "unlzh(1, 32)", "unlzh(1, 4)", "unlzh(1, 8)", "unlzh(1, _gl_warn_on_use)", "unlzh(1, ascii)", "unlzh(1, block_mode)", "unlzh(1, decompress)", "unlzh(1, decrypt)", "unlzh(1, do_lzw)", "unlzh(1, exit_code)", "unlzh(1, exiting_signal)", "unlzh(1, force)", "unlzh(1, foreground)", "unlzh(1, ifd)", "unlzh(1, imagic1)", "unlzh(1, in)", "unlzh(1, last_member)", "unlzh(1, level)", "unlzh(1, list)", "unlzh(1, maxbits)", "unlzh(1, method)", "unlzh(1, no_name)", "unlzh(1, no_time)", "unlzh(1, ofd)", "unlzh(1, part_nb)", "unlzh(1, quiet)", "unlzh(1, recursive)", "unlzh(1, remove_ofname_fd)", "unlzh(1, save_orig_name)", "unlzh(1, test)", "unlzh(1, to_stdout)", "unlzh(1, verbose)", "unlzw(1, -1)", "unlzw(1, -2)", "unlzw(1, -3)", "unlzw(1, 0)", "unlzw(1, 1)", "unlzw(1, 16)", "unlzw(1, 192)", "unlzw(1, 2)", "unlzw(1, 24)", "unlzw(1, 3)", "unlzw(1, 32)", "unlzw(1, 4)", "unlzw(1, 8)", "unlzw(1, _gl_warn_on_use)", "unlzw(1, ascii)", "unlzw(1, block_mode)", "unlzw(1, decompress)", "unlzw(1, decrypt)", "unlzw(1, do_lzw)", "unlzw(1, exit_code)", "unlzw(1, exiting_signal)", "unlzw(1, force)", "unlzw(1, foreground)", "unlzw(1, ifd)", "unlzw(1, imagic1)", "unlzw(1, in)", "unlzw(1, last_member)", "unlzw(1, level)", "unlzw(1, list)", "unlzw(1, maxbits)", "unlzw(1, method)", "unlzw(1, no_name)", "unlzw(1, no_time)", "unlzw(1, ofd)", "unlzw(1, part_nb)", "unlzw(1, quiet)", "unlzw(1, recursive)", "unlzw(1, remove_ofname_fd)", "unlzw(1, save_orig_name)", "unlzw(1, test)", "unlzw(1, to_stdout)", "unlzw(1, verbose)", "unpack(1, -1)", "unpack(1, -2)", "unpack(1, -3)", "unpack(1, 0)", "unpack(1, 1)", "unpack(1, 16)", "unpack(1, 192)", "unpack(1, 2)", "unpack(1, 24)", "unpack(1, 3)", "unpack(1, 32)", "unpack(1, 4)", "unpack(1, 8)", "unpack(1, _gl_warn_on_use)", "unpack(1, ascii)", "unpack(1, block_mode)", "unpack(1, decompress)", "unpack(1, decrypt)", "unpack(1, do_lzw)", "unpack(1, exit_code)", "unpack(1, exiting_signal)", "unpack(1, force)", "unpack(1, foreground)", "unpack(1, ifd)", "unpack(1, imagic1)", "unpack(1, in)", "unpack(1, last_member)", "unpack(1, level)", "unpack(1, list)", "unpack(1, maxbits)", "unpack(1, method)", "unpack(1, no_name)", "unpack(1, no_time)", "unpack(1, ofd)", "unpack(1, part_nb)", "unpack(1, quiet)", "unpack(1, recursive)", "unpack(1, remove_ofname_fd)", "unpack(1, save_orig_name)", "unpack(1, test)", "unpack(1, to_stdout)", "unpack(1, verbose)", "unzip(1, -1)", "unzip(1, -2)", "unzip(1, -3)", "unzip(1, 0)", "unzip(1, 1)", "unzip(1, 16)", "unzip(1, 192)", "unzip(1, 2)", "unzip(1, 24)", "unzip(1, 3)", "unzip(1, 32)", "unzip(1, 4)", "unzip(1, 8)", "unzip(1, _gl_warn_on_use)", "unzip(1, ascii)", "unzip(1, block_mode)", "unzip(1, decompress)", "unzip(1, decrypt)", "unzip(1, do_lzw)", "unzip(1, exit_code)", "unzip(1, exiting_signal)", "unzip(1, force)", "unzip(1, foreground)", "unzip(1, ifd)", "unzip(1, imagic1)", "unzip(1, in)", "unzip(1, last_member)", "unzip(1, level)", "unzip(1, list)", "unzip(1, maxbits)", "unzip(1, method)", "unzip(1, no_name)", "unzip(1, no_time)", "unzip(1, ofd)", "unzip(1, part_nb)", "unzip(1, quiet)", "unzip(1, recursive)", "unzip(1, remove_ofname_fd)", "unzip(1, save_orig_name)", "unzip(1, test)", "unzip(1, to_stdout)", "unzip(1, verbose)", "zip(1, -1)", "zip(1, -2)", "zip(1, -3)", "zip(1, 0)", "zip(1, 1)", "zip(1, 16)", "zip(1, 192)", "zip(1, 2)", "zip(1, 24)", "zip(1, 3)", "zip(1, 32)", "zip(1, 4)", "zip(1, 8)", "zip(1, _gl_warn_on_use)", "zip(1, ascii)", "zip(1, block_mode)", "zip(1, decompress)", "zip(1, decrypt)", "zip(1, do_lzw)", "zip(1, exit_code)", "zip(1, exiting_signal)", "zip(1, force)", "zip(1, foreground)", "zip(1, ifd)", "zip(1, imagic1)", "zip(1, in)", "zip(1, last_member)", "zip(1, level)", "zip(1, list)", "zip(1, maxbits)", "zip(1, method)", "zip(1, no_name)", "zip(1, no_time)", "zip(1, ofd)", "zip(1, part_nb)", "zip(1, quiet)", "zip(1, recursive)", "zip(1, remove_ofname_fd)", "zip(1, save_orig_name)", "zip(1, test)", "zip(1, to_stdout)", "zip(1, verbose)", "{\n}\n", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.9846932910960549, -2.7455158960960562, -2.9846932910960549, -2.7455158960960562, -4.2849762500960544, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -5.1658521590960547, -5.1658521590960547, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.2475318590960551, -4.2475318590960551, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.7288871590960548, -4.5123133590960549, -4.7288871590960548, -4.7288871590960548]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-4.336279859096055]
								}, {
									"case":	84,
									"scores":	[-4.336279859096055]
								}, {
									"case":	85,
									"scores":	[-4.336279859096055]
								}, {
									"case":	86,
									"scores":	[-4.336279859096055]
								}, {
									"case":	87,
									"scores":	[-4.336279859096055]
								}, {
									"case":	88,
									"scores":	[-4.336279859096055]
								}, {
									"case":	89,
									"scores":	[-4.336279859096055]
								}, {
									"case":	90,
									"scores":	[-4.336279859096055]
								}, {
									"case":	91,
									"scores":	[-4.336279859096055]
								}, {
									"case":	92,
									"scores":	[-4.336279859096055]
								}, {
									"case":	93,
									"scores":	[-4.336279859096055]
								}, {
									"case":	94,
									"scores":	[-4.336279859096055]
								}, {
									"case":	95,
									"scores":	[-4.336279859096055]
								}, {
									"case":	96,
									"scores":	[-4.336279859096055]
								}, {
									"case":	97,
									"scores":	[-4.336279859096055]
								}, {
									"case":	98,
									"scores":	[-4.336279859096055]
								}, {
									"case":	99,
									"scores":	[-4.336279859096055]
								}, {
									"case":	100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	198,
									"scores":	[-4.336279859096055]
								}, {
									"case":	199,
									"scores":	[-4.336279859096055]
								}, {
									"case":	200,
									"scores":	[-4.336279859096055]
								}, {
									"case":	201,
									"scores":	[-4.336279859096055]
								}, {
									"case":	202,
									"scores":	[-4.336279859096055]
								}, {
									"case":	203,
									"scores":	[-4.336279859096055]
								}, {
									"case":	204,
									"scores":	[-4.336279859096055]
								}, {
									"case":	205,
									"scores":	[-4.336279859096055]
								}, {
									"case":	206,
									"scores":	[-4.336279859096055]
								}, {
									"case":	207,
									"scores":	[-4.336279859096055]
								}, {
									"case":	208,
									"scores":	[-4.336279859096055]
								}, {
									"case":	209,
									"scores":	[-4.336279859096055]
								}, {
									"case":	210,
									"scores":	[-4.336279859096055]
								}, {
									"case":	211,
									"scores":	[-4.336279859096055]
								}, {
									"case":	212,
									"scores":	[-4.336279859096055]
								}, {
									"case":	213,
									"scores":	[-4.336279859096055]
								}, {
									"case":	214,
									"scores":	[-4.336279859096055]
								}, {
									"case":	215,
									"scores":	[-4.336279859096055]
								}, {
									"case":	216,
									"scores":	[-4.336279859096055]
								}, {
									"case":	217,
									"scores":	[-4.336279859096055]
								}, {
									"case":	218,
									"scores":	[-4.336279859096055]
								}, {
									"case":	219,
									"scores":	[-4.336279859096055]
								}, {
									"case":	220,
									"scores":	[-4.336279859096055]
								}, {
									"case":	221,
									"scores":	[-4.336279859096055]
								}, {
									"case":	222,
									"scores":	[-4.336279859096055]
								}, {
									"case":	223,
									"scores":	[-4.336279859096055]
								}, {
									"case":	224,
									"scores":	[-4.336279859096055]
								}, {
									"case":	225,
									"scores":	[-4.336279859096055]
								}, {
									"case":	226,
									"scores":	[-4.336279859096055]
								}, {
									"case":	227,
									"scores":	[-4.336279859096055]
								}, {
									"case":	228,
									"scores":	[-4.336279859096055]
								}, {
									"case":	229,
									"scores":	[-4.336279859096055]
								}, {
									"case":	230,
									"scores":	[-4.336279859096055]
								}, {
									"case":	231,
									"scores":	[-4.336279859096055]
								}, {
									"case":	232,
									"scores":	[-4.336279859096055]
								}, {
									"case":	233,
									"scores":	[-4.336279859096055]
								}, {
									"case":	234,
									"scores":	[-4.336279859096055]
								}, {
									"case":	235,
									"scores":	[-4.336279859096055]
								}, {
									"case":	236,
									"scores":	[-4.336279859096055]
								}, {
									"case":	237,
									"scores":	[-4.336279859096055]
								}, {
									"case":	238,
									"scores":	[-4.336279859096055]
								}, {
									"case":	239,
									"scores":	[-4.336279859096055]
								}, {
									"case":	240,
									"scores":	[-4.336279859096055]
								}, {
									"case":	241,
									"scores":	[-4.336279859096055]
								}, {
									"case":	242,
									"scores":	[-4.336279859096055]
								}, {
									"case":	243,
									"scores":	[-4.336279859096055]
								}, {
									"case":	244,
									"scores":	[-4.336279859096055]
								}, {
									"case":	245,
									"scores":	[-4.336279859096055]
								}, {
									"case":	246,
									"scores":	[-4.336279859096055]
								}, {
									"case":	247,
									"scores":	[-4.336279859096055]
								}, {
									"case":	248,
									"scores":	[-4.336279859096055]
								}, {
									"case":	249,
									"scores":	[-4.336279859096055]
								}, {
									"case":	250,
									"scores":	[-4.336279859096055]
								}, {
									"case":	251,
									"scores":	[-4.336279859096055]
								}, {
									"case":	252,
									"scores":	[-4.336279859096055]
								}, {
									"case":	253,
									"scores":	[-4.336279859096055]
								}, {
									"case":	254,
									"scores":	[-4.336279859096055]
								}, {
									"case":	255,
									"scores":	[-4.336279859096055]
								}, {
									"case":	256,
									"scores":	[-4.336279859096055]
								}, {
									"case":	257,
									"scores":	[-4.336279859096055]
								}, {
									"case":	258,
									"scores":	[-4.336279859096055]
								}, {
									"case":	259,
									"scores":	[-4.336279859096055]
								}, {
									"case":	260,
									"scores":	[-4.336279859096055]
								}, {
									"case":	261,
									"scores":	[-4.336279859096055]
								}, {
									"case":	262,
									"scores":	[-4.336279859096055]
								}, {
									"case":	263,
									"scores":	[-4.336279859096055]
								}, {
									"case":	264,
									"scores":	[-4.336279859096055]
								}, {
									"case":	265,
									"scores":	[-4.336279859096055]
								}, {
									"case":	266,
									"scores":	[-4.336279859096055]
								}, {
									"case":	267,
									"scores":	[-4.336279859096055]
								}, {
									"case":	268,
									"scores":	[-4.336279859096055]
								}, {
									"case":	269,
									"scores":	[-4.336279859096055]
								}, {
									"case":	270,
									"scores":	[-4.336279859096055]
								}, {
									"case":	271,
									"scores":	[-4.336279859096055]
								}, {
									"case":	272,
									"scores":	[-4.336279859096055]
								}, {
									"case":	273,
									"scores":	[-4.336279859096055]
								}, {
									"case":	274,
									"scores":	[-4.336279859096055]
								}, {
									"case":	275,
									"scores":	[-4.336279859096055]
								}, {
									"case":	276,
									"scores":	[-4.336279859096055]
								}, {
									"case":	277,
									"scores":	[-4.336279859096055]
								}, {
									"case":	278,
									"scores":	[-4.336279859096055]
								}, {
									"case":	279,
									"scores":	[-4.336279859096055]
								}, {
									"case":	280,
									"scores":	[-4.336279859096055]
								}, {
									"case":	281,
									"scores":	[-4.336279859096055]
								}, {
									"case":	282,
									"scores":	[-4.336279859096055]
								}, {
									"case":	283,
									"scores":	[-4.336279859096055]
								}, {
									"case":	284,
									"scores":	[-4.336279859096055]
								}, {
									"case":	285,
									"scores":	[-4.336279859096055]
								}, {
									"case":	286,
									"scores":	[-4.336279859096055]
								}, {
									"case":	287,
									"scores":	[-4.336279859096055]
								}, {
									"case":	288,
									"scores":	[-4.336279859096055]
								}, {
									"case":	289,
									"scores":	[-4.336279859096055]
								}, {
									"case":	290,
									"scores":	[-4.336279859096055]
								}, {
									"case":	291,
									"scores":	[-4.336279859096055]
								}, {
									"case":	292,
									"scores":	[-4.336279859096055]
								}, {
									"case":	293,
									"scores":	[-4.336279859096055]
								}, {
									"case":	294,
									"scores":	[-4.336279859096055]
								}, {
									"case":	295,
									"scores":	[-4.336279859096055]
								}, {
									"case":	296,
									"scores":	[-4.336279859096055]
								}, {
									"case":	297,
									"scores":	[-4.336279859096055]
								}, {
									"case":	298,
									"scores":	[-4.336279859096055]
								}, {
									"case":	299,
									"scores":	[-4.336279859096055]
								}, {
									"case":	300,
									"scores":	[-4.336279859096055]
								}, {
									"case":	301,
									"scores":	[-4.336279859096055]
								}, {
									"case":	302,
									"scores":	[-4.336279859096055]
								}, {
									"case":	303,
									"scores":	[-4.336279859096055]
								}, {
									"case":	304,
									"scores":	[-4.336279859096055]
								}, {
									"case":	305,
									"scores":	[-4.336279859096055]
								}, {
									"case":	306,
									"scores":	[-4.336279859096055]
								}, {
									"case":	307,
									"scores":	[-4.336279859096055]
								}, {
									"case":	308,
									"scores":	[-4.336279859096055]
								}, {
									"case":	309,
									"scores":	[-4.336279859096055]
								}, {
									"case":	310,
									"scores":	[-4.336279859096055]
								}, {
									"case":	311,
									"scores":	[-4.336279859096055]
								}, {
									"case":	312,
									"scores":	[-4.336279859096055]
								}, {
									"case":	313,
									"scores":	[-4.336279859096055]
								}, {
									"case":	314,
									"scores":	[-4.336279859096055]
								}, {
									"case":	315,
									"scores":	[-4.336279859096055]
								}, {
									"case":	316,
									"scores":	[-4.336279859096055]
								}, {
									"case":	317,
									"scores":	[-4.336279859096055]
								}, {
									"case":	318,
									"scores":	[-4.336279859096055]
								}, {
									"case":	319,
									"scores":	[-4.336279859096055]
								}, {
									"case":	320,
									"scores":	[-4.336279859096055]
								}, {
									"case":	321,
									"scores":	[-4.336279859096055]
								}, {
									"case":	322,
									"scores":	[-4.336279859096055]
								}, {
									"case":	323,
									"scores":	[-4.336279859096055]
								}, {
									"case":	324,
									"scores":	[-4.336279859096055]
								}, {
									"case":	325,
									"scores":	[-4.336279859096055]
								}, {
									"case":	326,
									"scores":	[-4.336279859096055]
								}, {
									"case":	327,
									"scores":	[-4.336279859096055]
								}, {
									"case":	328,
									"scores":	[-4.336279859096055]
								}, {
									"case":	329,
									"scores":	[-4.336279859096055]
								}, {
									"case":	330,
									"scores":	[-4.336279859096055]
								}, {
									"case":	331,
									"scores":	[-4.336279859096055]
								}, {
									"case":	332,
									"scores":	[-4.336279859096055]
								}, {
									"case":	333,
									"scores":	[-4.336279859096055]
								}, {
									"case":	334,
									"scores":	[-4.336279859096055]
								}, {
									"case":	335,
									"scores":	[-4.336279859096055]
								}, {
									"case":	336,
									"scores":	[-4.336279859096055]
								}, {
									"case":	337,
									"scores":	[-4.336279859096055]
								}, {
									"case":	338,
									"scores":	[-4.336279859096055]
								}, {
									"case":	339,
									"scores":	[-4.336279859096055]
								}, {
									"case":	340,
									"scores":	[-4.336279859096055]
								}, {
									"case":	341,
									"scores":	[-4.336279859096055]
								}, {
									"case":	342,
									"scores":	[-4.336279859096055]
								}, {
									"case":	343,
									"scores":	[-4.336279859096055]
								}, {
									"case":	344,
									"scores":	[-4.336279859096055]
								}, {
									"case":	345,
									"scores":	[-4.336279859096055]
								}, {
									"case":	346,
									"scores":	[-4.336279859096055]
								}, {
									"case":	347,
									"scores":	[-4.336279859096055]
								}, {
									"case":	348,
									"scores":	[-4.336279859096055]
								}, {
									"case":	349,
									"scores":	[-4.336279859096055]
								}, {
									"case":	350,
									"scores":	[-4.336279859096055]
								}, {
									"case":	351,
									"scores":	[-4.336279859096055]
								}, {
									"case":	352,
									"scores":	[-4.336279859096055]
								}, {
									"case":	353,
									"scores":	[-4.336279859096055]
								}, {
									"case":	354,
									"scores":	[-4.336279859096055]
								}, {
									"case":	355,
									"scores":	[-4.336279859096055]
								}, {
									"case":	356,
									"scores":	[-4.336279859096055]
								}, {
									"case":	357,
									"scores":	[-4.336279859096055]
								}, {
									"case":	358,
									"scores":	[-4.336279859096055]
								}, {
									"case":	359,
									"scores":	[-4.336279859096055]
								}, {
									"case":	360,
									"scores":	[-4.336279859096055]
								}, {
									"case":	361,
									"scores":	[-4.336279859096055]
								}, {
									"case":	362,
									"scores":	[-4.336279859096055]
								}, {
									"case":	363,
									"scores":	[-4.336279859096055]
								}, {
									"case":	364,
									"scores":	[-4.336279859096055]
								}, {
									"case":	365,
									"scores":	[-4.336279859096055]
								}, {
									"case":	366,
									"scores":	[-4.336279859096055]
								}, {
									"case":	367,
									"scores":	[-4.336279859096055]
								}, {
									"case":	368,
									"scores":	[-4.336279859096055]
								}, {
									"case":	369,
									"scores":	[-4.336279859096055]
								}, {
									"case":	370,
									"scores":	[-4.336279859096055]
								}, {
									"case":	371,
									"scores":	[-4.336279859096055]
								}, {
									"case":	372,
									"scores":	[-4.336279859096055]
								}, {
									"case":	373,
									"scores":	[-4.336279859096055]
								}, {
									"case":	374,
									"scores":	[-4.336279859096055]
								}, {
									"case":	375,
									"scores":	[-4.336279859096055]
								}, {
									"case":	376,
									"scores":	[-4.336279859096055]
								}, {
									"case":	377,
									"scores":	[-4.336279859096055]
								}, {
									"case":	378,
									"scores":	[-4.336279859096055]
								}, {
									"case":	379,
									"scores":	[-4.336279859096055]
								}, {
									"case":	380,
									"scores":	[-4.336279859096055]
								}, {
									"case":	381,
									"scores":	[-4.336279859096055]
								}, {
									"case":	382,
									"scores":	[-4.336279859096055]
								}, {
									"case":	383,
									"scores":	[-4.336279859096055]
								}, {
									"case":	384,
									"scores":	[-4.336279859096055]
								}, {
									"case":	385,
									"scores":	[-4.336279859096055]
								}, {
									"case":	386,
									"scores":	[-4.336279859096055]
								}, {
									"case":	387,
									"scores":	[-4.336279859096055]
								}, {
									"case":	388,
									"scores":	[-4.336279859096055]
								}, {
									"case":	389,
									"scores":	[-4.336279859096055]
								}, {
									"case":	390,
									"scores":	[-4.336279859096055]
								}, {
									"case":	391,
									"scores":	[-4.336279859096055]
								}, {
									"case":	392,
									"scores":	[-4.336279859096055]
								}, {
									"case":	393,
									"scores":	[-4.336279859096055]
								}, {
									"case":	394,
									"scores":	[-4.336279859096055]
								}, {
									"case":	395,
									"scores":	[-4.336279859096055]
								}, {
									"case":	396,
									"scores":	[-4.336279859096055]
								}, {
									"case":	397,
									"scores":	[-4.336279859096055]
								}, {
									"case":	398,
									"scores":	[-4.336279859096055]
								}, {
									"case":	399,
									"scores":	[-4.336279859096055]
								}, {
									"case":	400,
									"scores":	[-4.336279859096055]
								}, {
									"case":	401,
									"scores":	[-4.336279859096055]
								}, {
									"case":	402,
									"scores":	[-4.336279859096055]
								}, {
									"case":	403,
									"scores":	[-4.336279859096055]
								}, {
									"case":	404,
									"scores":	[-4.336279859096055]
								}, {
									"case":	405,
									"scores":	[-4.336279859096055]
								}, {
									"case":	406,
									"scores":	[-4.336279859096055]
								}, {
									"case":	407,
									"scores":	[-4.336279859096055]
								}, {
									"case":	408,
									"scores":	[-4.336279859096055]
								}, {
									"case":	409,
									"scores":	[-4.336279859096055]
								}, {
									"case":	410,
									"scores":	[-4.336279859096055]
								}, {
									"case":	411,
									"scores":	[-4.336279859096055]
								}, {
									"case":	412,
									"scores":	[-4.336279859096055]
								}, {
									"case":	413,
									"scores":	[-4.336279859096055]
								}, {
									"case":	414,
									"scores":	[-4.336279859096055]
								}, {
									"case":	415,
									"scores":	[-4.336279859096055]
								}, {
									"case":	416,
									"scores":	[-4.336279859096055]
								}, {
									"case":	417,
									"scores":	[-4.336279859096055]
								}, {
									"case":	418,
									"scores":	[-4.336279859096055]
								}, {
									"case":	419,
									"scores":	[-4.336279859096055]
								}, {
									"case":	420,
									"scores":	[-4.336279859096055]
								}, {
									"case":	421,
									"scores":	[-4.336279859096055]
								}, {
									"case":	422,
									"scores":	[-4.336279859096055]
								}, {
									"case":	423,
									"scores":	[-4.336279859096055]
								}, {
									"case":	424,
									"scores":	[-4.336279859096055]
								}, {
									"case":	425,
									"scores":	[-4.336279859096055]
								}, {
									"case":	426,
									"scores":	[-4.336279859096055]
								}, {
									"case":	427,
									"scores":	[-4.336279859096055]
								}, {
									"case":	428,
									"scores":	[-4.336279859096055]
								}, {
									"case":	429,
									"scores":	[-4.336279859096055]
								}, {
									"case":	430,
									"scores":	[-4.336279859096055]
								}, {
									"case":	431,
									"scores":	[-4.336279859096055]
								}, {
									"case":	432,
									"scores":	[-4.336279859096055]
								}, {
									"case":	433,
									"scores":	[-4.336279859096055]
								}, {
									"case":	434,
									"scores":	[-4.336279859096055]
								}, {
									"case":	435,
									"scores":	[-4.336279859096055]
								}, {
									"case":	436,
									"scores":	[-4.336279859096055]
								}, {
									"case":	437,
									"scores":	[-4.336279859096055]
								}, {
									"case":	438,
									"scores":	[-4.336279859096055]
								}, {
									"case":	439,
									"scores":	[-4.336279859096055]
								}, {
									"case":	440,
									"scores":	[-4.336279859096055]
								}, {
									"case":	441,
									"scores":	[-4.336279859096055]
								}, {
									"case":	442,
									"scores":	[-4.336279859096055]
								}, {
									"case":	443,
									"scores":	[-4.336279859096055]
								}, {
									"case":	444,
									"scores":	[-4.336279859096055]
								}, {
									"case":	445,
									"scores":	[-4.336279859096055]
								}, {
									"case":	446,
									"scores":	[-4.336279859096055]
								}, {
									"case":	447,
									"scores":	[-4.336279859096055]
								}, {
									"case":	448,
									"scores":	[-4.336279859096055]
								}, {
									"case":	449,
									"scores":	[-4.336279859096055]
								}, {
									"case":	450,
									"scores":	[-4.336279859096055]
								}, {
									"case":	451,
									"scores":	[-4.336279859096055]
								}, {
									"case":	452,
									"scores":	[-4.336279859096055]
								}, {
									"case":	453,
									"scores":	[-4.336279859096055]
								}, {
									"case":	454,
									"scores":	[-4.336279859096055]
								}, {
									"case":	455,
									"scores":	[-4.336279859096055]
								}, {
									"case":	456,
									"scores":	[-4.336279859096055]
								}, {
									"case":	457,
									"scores":	[-4.336279859096055]
								}, {
									"case":	458,
									"scores":	[-4.336279859096055]
								}, {
									"case":	459,
									"scores":	[-4.336279859096055]
								}, {
									"case":	460,
									"scores":	[-4.336279859096055]
								}, {
									"case":	461,
									"scores":	[-4.336279859096055]
								}, {
									"case":	462,
									"scores":	[-4.336279859096055]
								}, {
									"case":	463,
									"scores":	[-4.336279859096055]
								}, {
									"case":	464,
									"scores":	[-4.336279859096055]
								}, {
									"case":	465,
									"scores":	[-4.336279859096055]
								}, {
									"case":	466,
									"scores":	[-4.336279859096055]
								}, {
									"case":	467,
									"scores":	[-4.336279859096055]
								}, {
									"case":	468,
									"scores":	[-4.336279859096055]
								}, {
									"case":	469,
									"scores":	[-4.336279859096055]
								}, {
									"case":	470,
									"scores":	[-4.336279859096055]
								}, {
									"case":	471,
									"scores":	[-4.336279859096055]
								}, {
									"case":	472,
									"scores":	[-4.336279859096055]
								}, {
									"case":	473,
									"scores":	[-4.336279859096055]
								}, {
									"case":	474,
									"scores":	[-4.336279859096055]
								}, {
									"case":	475,
									"scores":	[-4.336279859096055]
								}, {
									"case":	476,
									"scores":	[-4.336279859096055]
								}, {
									"case":	477,
									"scores":	[-4.336279859096055]
								}, {
									"case":	478,
									"scores":	[-4.336279859096055]
								}, {
									"case":	479,
									"scores":	[-4.336279859096055]
								}, {
									"case":	480,
									"scores":	[-4.336279859096055]
								}, {
									"case":	481,
									"scores":	[-4.336279859096055]
								}, {
									"case":	482,
									"scores":	[-4.336279859096055]
								}, {
									"case":	483,
									"scores":	[-4.336279859096055]
								}, {
									"case":	484,
									"scores":	[-4.336279859096055]
								}, {
									"case":	485,
									"scores":	[-4.336279859096055]
								}, {
									"case":	486,
									"scores":	[-4.336279859096055]
								}, {
									"case":	487,
									"scores":	[-4.336279859096055]
								}, {
									"case":	488,
									"scores":	[-4.336279859096055]
								}, {
									"case":	489,
									"scores":	[-4.336279859096055]
								}, {
									"case":	490,
									"scores":	[-4.336279859096055]
								}, {
									"case":	491,
									"scores":	[-4.336279859096055]
								}, {
									"case":	492,
									"scores":	[-4.336279859096055]
								}, {
									"case":	493,
									"scores":	[-4.336279859096055]
								}, {
									"case":	494,
									"scores":	[-4.336279859096055]
								}, {
									"case":	495,
									"scores":	[-4.336279859096055]
								}, {
									"case":	496,
									"scores":	[-4.336279859096055]
								}, {
									"case":	497,
									"scores":	[-4.336279859096055]
								}, {
									"case":	498,
									"scores":	[-4.336279859096055]
								}, {
									"case":	499,
									"scores":	[-4.336279859096055]
								}, {
									"case":	500,
									"scores":	[-4.336279859096055]
								}, {
									"case":	501,
									"scores":	[-4.336279859096055]
								}, {
									"case":	502,
									"scores":	[-4.336279859096055]
								}, {
									"case":	503,
									"scores":	[-4.336279859096055]
								}, {
									"case":	504,
									"scores":	[-4.336279859096055]
								}, {
									"case":	505,
									"scores":	[-4.336279859096055]
								}, {
									"case":	506,
									"scores":	[-4.336279859096055]
								}, {
									"case":	507,
									"scores":	[-4.336279859096055]
								}, {
									"case":	508,
									"scores":	[-4.336279859096055]
								}, {
									"case":	509,
									"scores":	[-4.336279859096055]
								}, {
									"case":	510,
									"scores":	[-4.336279859096055]
								}, {
									"case":	511,
									"scores":	[-4.336279859096055]
								}, {
									"case":	512,
									"scores":	[-4.336279859096055]
								}, {
									"case":	513,
									"scores":	[-4.336279859096055]
								}, {
									"case":	514,
									"scores":	[-4.336279859096055]
								}, {
									"case":	515,
									"scores":	[-4.336279859096055]
								}, {
									"case":	516,
									"scores":	[-4.336279859096055]
								}, {
									"case":	517,
									"scores":	[-4.336279859096055]
								}, {
									"case":	518,
									"scores":	[-4.336279859096055]
								}, {
									"case":	519,
									"scores":	[-4.336279859096055]
								}, {
									"case":	520,
									"scores":	[-4.336279859096055]
								}, {
									"case":	521,
									"scores":	[-4.336279859096055]
								}, {
									"case":	522,
									"scores":	[-4.336279859096055]
								}, {
									"case":	523,
									"scores":	[-4.336279859096055]
								}, {
									"case":	524,
									"scores":	[-4.336279859096055]
								}, {
									"case":	525,
									"scores":	[-4.336279859096055]
								}, {
									"case":	526,
									"scores":	[-4.336279859096055]
								}, {
									"case":	527,
									"scores":	[-4.336279859096055]
								}, {
									"case":	528,
									"scores":	[-4.336279859096055]
								}, {
									"case":	529,
									"scores":	[-4.336279859096055]
								}, {
									"case":	530,
									"scores":	[-4.336279859096055]
								}, {
									"case":	531,
									"scores":	[-4.336279859096055]
								}, {
									"case":	532,
									"scores":	[-4.336279859096055]
								}, {
									"case":	533,
									"scores":	[-4.336279859096055]
								}, {
									"case":	534,
									"scores":	[-4.336279859096055]
								}, {
									"case":	535,
									"scores":	[-4.336279859096055]
								}, {
									"case":	536,
									"scores":	[-4.336279859096055]
								}, {
									"case":	537,
									"scores":	[-4.336279859096055]
								}, {
									"case":	538,
									"scores":	[-4.336279859096055]
								}, {
									"case":	539,
									"scores":	[-4.336279859096055]
								}, {
									"case":	540,
									"scores":	[-4.336279859096055]
								}, {
									"case":	541,
									"scores":	[-4.336279859096055]
								}, {
									"case":	542,
									"scores":	[-4.336279859096055]
								}, {
									"case":	543,
									"scores":	[-4.336279859096055]
								}, {
									"case":	544,
									"scores":	[-4.336279859096055]
								}, {
									"case":	545,
									"scores":	[-4.336279859096055]
								}, {
									"case":	546,
									"scores":	[-4.336279859096055]
								}, {
									"case":	547,
									"scores":	[-4.336279859096055]
								}, {
									"case":	548,
									"scores":	[-4.336279859096055]
								}, {
									"case":	549,
									"scores":	[-4.336279859096055]
								}, {
									"case":	550,
									"scores":	[-4.336279859096055]
								}, {
									"case":	551,
									"scores":	[-4.336279859096055]
								}, {
									"case":	552,
									"scores":	[-4.336279859096055]
								}, {
									"case":	553,
									"scores":	[-4.336279859096055]
								}, {
									"case":	554,
									"scores":	[-4.336279859096055]
								}, {
									"case":	555,
									"scores":	[-4.336279859096055]
								}, {
									"case":	556,
									"scores":	[-4.336279859096055]
								}, {
									"case":	557,
									"scores":	[-4.336279859096055]
								}, {
									"case":	558,
									"scores":	[-4.336279859096055]
								}, {
									"case":	559,
									"scores":	[-4.336279859096055]
								}, {
									"case":	560,
									"scores":	[-4.336279859096055]
								}, {
									"case":	561,
									"scores":	[-4.336279859096055]
								}, {
									"case":	562,
									"scores":	[-4.336279859096055]
								}, {
									"case":	563,
									"scores":	[-4.336279859096055]
								}, {
									"case":	564,
									"scores":	[-4.336279859096055]
								}, {
									"case":	565,
									"scores":	[-4.336279859096055]
								}, {
									"case":	566,
									"scores":	[-4.336279859096055]
								}, {
									"case":	567,
									"scores":	[-4.336279859096055]
								}, {
									"case":	568,
									"scores":	[-4.336279859096055]
								}, {
									"case":	569,
									"scores":	[-4.336279859096055]
								}, {
									"case":	570,
									"scores":	[-4.336279859096055]
								}, {
									"case":	571,
									"scores":	[-4.336279859096055]
								}, {
									"case":	572,
									"scores":	[-4.336279859096055]
								}, {
									"case":	573,
									"scores":	[-4.336279859096055]
								}, {
									"case":	574,
									"scores":	[-4.336279859096055]
								}, {
									"case":	575,
									"scores":	[-4.336279859096055]
								}, {
									"case":	576,
									"scores":	[-4.336279859096055]
								}, {
									"case":	577,
									"scores":	[-4.336279859096055]
								}, {
									"case":	578,
									"scores":	[-4.336279859096055]
								}, {
									"case":	579,
									"scores":	[-4.336279859096055]
								}, {
									"case":	580,
									"scores":	[-4.336279859096055]
								}, {
									"case":	581,
									"scores":	[-4.336279859096055]
								}, {
									"case":	582,
									"scores":	[-4.336279859096055]
								}, {
									"case":	583,
									"scores":	[-4.336279859096055]
								}, {
									"case":	584,
									"scores":	[-4.336279859096055]
								}, {
									"case":	585,
									"scores":	[-4.336279859096055]
								}, {
									"case":	586,
									"scores":	[-4.336279859096055]
								}, {
									"case":	587,
									"scores":	[-4.336279859096055]
								}, {
									"case":	588,
									"scores":	[-4.336279859096055]
								}, {
									"case":	589,
									"scores":	[-4.336279859096055]
								}, {
									"case":	590,
									"scores":	[-4.336279859096055]
								}, {
									"case":	591,
									"scores":	[-4.336279859096055]
								}, {
									"case":	592,
									"scores":	[-4.336279859096055]
								}, {
									"case":	593,
									"scores":	[-4.336279859096055]
								}, {
									"case":	594,
									"scores":	[-4.336279859096055]
								}, {
									"case":	595,
									"scores":	[-4.336279859096055]
								}, {
									"case":	596,
									"scores":	[-4.336279859096055]
								}, {
									"case":	597,
									"scores":	[-4.336279859096055]
								}, {
									"case":	598,
									"scores":	[-4.336279859096055]
								}, {
									"case":	599,
									"scores":	[-4.336279859096055]
								}, {
									"case":	600,
									"scores":	[-4.336279859096055]
								}, {
									"case":	601,
									"scores":	[-4.336279859096055]
								}, {
									"case":	602,
									"scores":	[-4.336279859096055]
								}, {
									"case":	603,
									"scores":	[-4.336279859096055]
								}, {
									"case":	604,
									"scores":	[-4.336279859096055]
								}, {
									"case":	605,
									"scores":	[-4.336279859096055]
								}, {
									"case":	606,
									"scores":	[-4.336279859096055]
								}, {
									"case":	607,
									"scores":	[-4.336279859096055]
								}, {
									"case":	608,
									"scores":	[-4.336279859096055]
								}, {
									"case":	609,
									"scores":	[-4.336279859096055]
								}, {
									"case":	610,
									"scores":	[-4.336279859096055]
								}, {
									"case":	611,
									"scores":	[-4.336279859096055]
								}, {
									"case":	612,
									"scores":	[-4.336279859096055]
								}, {
									"case":	613,
									"scores":	[-4.336279859096055]
								}, {
									"case":	614,
									"scores":	[-4.336279859096055]
								}, {
									"case":	615,
									"scores":	[-4.336279859096055]
								}, {
									"case":	616,
									"scores":	[-4.336279859096055]
								}, {
									"case":	617,
									"scores":	[-4.336279859096055]
								}, {
									"case":	618,
									"scores":	[-4.336279859096055]
								}, {
									"case":	619,
									"scores":	[-4.336279859096055]
								}, {
									"case":	620,
									"scores":	[-4.336279859096055]
								}, {
									"case":	621,
									"scores":	[-4.336279859096055]
								}, {
									"case":	622,
									"scores":	[-4.336279859096055]
								}, {
									"case":	623,
									"scores":	[-4.336279859096055]
								}, {
									"case":	624,
									"scores":	[-4.336279859096055]
								}, {
									"case":	625,
									"scores":	[-4.336279859096055]
								}, {
									"case":	626,
									"scores":	[-4.336279859096055]
								}, {
									"case":	627,
									"scores":	[-4.336279859096055]
								}, {
									"case":	628,
									"scores":	[-4.336279859096055]
								}, {
									"case":	629,
									"scores":	[-4.336279859096055]
								}, {
									"case":	630,
									"scores":	[-4.336279859096055]
								}, {
									"case":	631,
									"scores":	[-4.336279859096055]
								}, {
									"case":	632,
									"scores":	[-4.336279859096055]
								}, {
									"case":	633,
									"scores":	[-4.336279859096055]
								}, {
									"case":	634,
									"scores":	[-4.336279859096055]
								}, {
									"case":	635,
									"scores":	[-4.336279859096055]
								}, {
									"case":	636,
									"scores":	[-4.336279859096055]
								}, {
									"case":	637,
									"scores":	[-4.336279859096055]
								}, {
									"case":	638,
									"scores":	[-4.336279859096055]
								}, {
									"case":	639,
									"scores":	[-4.336279859096055]
								}, {
									"case":	640,
									"scores":	[-4.336279859096055]
								}, {
									"case":	641,
									"scores":	[-4.336279859096055]
								}, {
									"case":	642,
									"scores":	[-4.336279859096055]
								}, {
									"case":	643,
									"scores":	[-4.336279859096055]
								}, {
									"case":	644,
									"scores":	[-4.336279859096055]
								}, {
									"case":	645,
									"scores":	[-4.336279859096055]
								}, {
									"case":	646,
									"scores":	[-4.336279859096055]
								}, {
									"case":	647,
									"scores":	[-4.336279859096055]
								}, {
									"case":	648,
									"scores":	[-4.336279859096055]
								}, {
									"case":	649,
									"scores":	[-4.336279859096055]
								}, {
									"case":	650,
									"scores":	[-4.336279859096055]
								}, {
									"case":	651,
									"scores":	[-4.336279859096055]
								}, {
									"case":	652,
									"scores":	[-4.336279859096055]
								}, {
									"case":	653,
									"scores":	[-4.336279859096055]
								}, {
									"case":	654,
									"scores":	[-4.336279859096055]
								}, {
									"case":	655,
									"scores":	[-4.336279859096055]
								}, {
									"case":	656,
									"scores":	[-4.336279859096055]
								}, {
									"case":	657,
									"scores":	[-4.336279859096055]
								}, {
									"case":	658,
									"scores":	[-4.336279859096055]
								}, {
									"case":	659,
									"scores":	[-4.336279859096055]
								}, {
									"case":	660,
									"scores":	[-4.336279859096055]
								}, {
									"case":	661,
									"scores":	[-4.336279859096055]
								}, {
									"case":	662,
									"scores":	[-4.336279859096055]
								}, {
									"case":	663,
									"scores":	[-4.336279859096055]
								}, {
									"case":	664,
									"scores":	[-4.336279859096055]
								}, {
									"case":	665,
									"scores":	[-4.336279859096055]
								}, {
									"case":	666,
									"scores":	[-4.336279859096055]
								}, {
									"case":	667,
									"scores":	[-4.336279859096055]
								}, {
									"case":	668,
									"scores":	[-4.336279859096055]
								}, {
									"case":	669,
									"scores":	[-4.336279859096055]
								}, {
									"case":	670,
									"scores":	[-4.336279859096055]
								}, {
									"case":	671,
									"scores":	[-4.336279859096055]
								}, {
									"case":	672,
									"scores":	[-4.336279859096055]
								}, {
									"case":	673,
									"scores":	[-4.336279859096055]
								}, {
									"case":	674,
									"scores":	[-4.336279859096055]
								}, {
									"case":	675,
									"scores":	[-4.336279859096055]
								}, {
									"case":	676,
									"scores":	[-4.336279859096055]
								}, {
									"case":	677,
									"scores":	[-4.336279859096055]
								}, {
									"case":	678,
									"scores":	[-4.336279859096055]
								}, {
									"case":	679,
									"scores":	[-4.336279859096055]
								}, {
									"case":	680,
									"scores":	[-4.336279859096055]
								}, {
									"case":	681,
									"scores":	[-4.336279859096055]
								}, {
									"case":	682,
									"scores":	[-4.336279859096055]
								}, {
									"case":	683,
									"scores":	[-4.336279859096055]
								}, {
									"case":	684,
									"scores":	[-4.336279859096055]
								}, {
									"case":	685,
									"scores":	[-4.336279859096055]
								}, {
									"case":	686,
									"scores":	[-4.336279859096055]
								}, {
									"case":	687,
									"scores":	[-4.336279859096055]
								}, {
									"case":	688,
									"scores":	[-4.336279859096055]
								}, {
									"case":	689,
									"scores":	[-4.336279859096055]
								}, {
									"case":	690,
									"scores":	[-4.336279859096055]
								}, {
									"case":	691,
									"scores":	[-4.336279859096055]
								}, {
									"case":	692,
									"scores":	[-4.336279859096055]
								}, {
									"case":	693,
									"scores":	[-4.336279859096055]
								}, {
									"case":	694,
									"scores":	[-4.336279859096055]
								}, {
									"case":	695,
									"scores":	[-4.336279859096055]
								}, {
									"case":	696,
									"scores":	[-4.336279859096055]
								}, {
									"case":	697,
									"scores":	[-4.336279859096055]
								}, {
									"case":	698,
									"scores":	[-4.336279859096055]
								}, {
									"case":	699,
									"scores":	[-4.336279859096055]
								}, {
									"case":	700,
									"scores":	[-4.336279859096055]
								}, {
									"case":	701,
									"scores":	[-4.336279859096055]
								}, {
									"case":	702,
									"scores":	[-4.336279859096055]
								}, {
									"case":	703,
									"scores":	[-4.336279859096055]
								}, {
									"case":	704,
									"scores":	[-4.336279859096055]
								}, {
									"case":	705,
									"scores":	[-4.336279859096055]
								}, {
									"case":	706,
									"scores":	[-4.336279859096055]
								}, {
									"case":	707,
									"scores":	[-4.336279859096055]
								}, {
									"case":	708,
									"scores":	[-4.336279859096055]
								}, {
									"case":	709,
									"scores":	[-4.336279859096055]
								}, {
									"case":	710,
									"scores":	[-4.336279859096055]
								}, {
									"case":	711,
									"scores":	[-4.336279859096055]
								}, {
									"case":	712,
									"scores":	[-4.336279859096055]
								}, {
									"case":	713,
									"scores":	[-4.336279859096055]
								}, {
									"case":	714,
									"scores":	[-4.336279859096055]
								}, {
									"case":	715,
									"scores":	[-4.336279859096055]
								}, {
									"case":	716,
									"scores":	[-4.336279859096055]
								}, {
									"case":	717,
									"scores":	[-4.336279859096055]
								}, {
									"case":	718,
									"scores":	[-4.336279859096055]
								}, {
									"case":	719,
									"scores":	[-4.336279859096055]
								}, {
									"case":	720,
									"scores":	[-4.336279859096055]
								}, {
									"case":	721,
									"scores":	[-4.336279859096055]
								}, {
									"case":	722,
									"scores":	[-4.336279859096055]
								}, {
									"case":	723,
									"scores":	[-4.336279859096055]
								}, {
									"case":	724,
									"scores":	[-4.336279859096055]
								}, {
									"case":	725,
									"scores":	[-4.336279859096055]
								}, {
									"case":	726,
									"scores":	[-4.336279859096055]
								}, {
									"case":	727,
									"scores":	[-4.336279859096055]
								}, {
									"case":	728,
									"scores":	[-4.336279859096055]
								}, {
									"case":	729,
									"scores":	[-4.336279859096055]
								}, {
									"case":	730,
									"scores":	[-4.336279859096055]
								}, {
									"case":	731,
									"scores":	[-4.336279859096055]
								}, {
									"case":	732,
									"scores":	[-4.336279859096055]
								}, {
									"case":	733,
									"scores":	[-4.336279859096055]
								}, {
									"case":	734,
									"scores":	[-4.336279859096055]
								}, {
									"case":	735,
									"scores":	[-4.336279859096055]
								}, {
									"case":	736,
									"scores":	[-4.336279859096055]
								}, {
									"case":	737,
									"scores":	[-4.336279859096055]
								}, {
									"case":	738,
									"scores":	[-4.336279859096055]
								}, {
									"case":	739,
									"scores":	[-4.336279859096055]
								}, {
									"case":	740,
									"scores":	[-4.336279859096055]
								}, {
									"case":	741,
									"scores":	[-4.336279859096055]
								}, {
									"case":	742,
									"scores":	[-4.336279859096055]
								}, {
									"case":	743,
									"scores":	[-4.336279859096055]
								}, {
									"case":	744,
									"scores":	[-4.336279859096055]
								}, {
									"case":	745,
									"scores":	[-4.336279859096055]
								}, {
									"case":	746,
									"scores":	[-4.336279859096055]
								}, {
									"case":	747,
									"scores":	[-4.336279859096055]
								}, {
									"case":	748,
									"scores":	[-4.336279859096055]
								}, {
									"case":	749,
									"scores":	[-4.336279859096055]
								}, {
									"case":	750,
									"scores":	[-4.336279859096055]
								}, {
									"case":	751,
									"scores":	[-4.336279859096055]
								}, {
									"case":	752,
									"scores":	[-4.336279859096055]
								}, {
									"case":	753,
									"scores":	[-4.336279859096055]
								}, {
									"case":	754,
									"scores":	[-4.336279859096055]
								}, {
									"case":	755,
									"scores":	[-4.336279859096055]
								}, {
									"case":	756,
									"scores":	[-4.336279859096055]
								}, {
									"case":	757,
									"scores":	[-4.336279859096055]
								}, {
									"case":	758,
									"scores":	[-4.336279859096055]
								}, {
									"case":	759,
									"scores":	[-4.336279859096055]
								}, {
									"case":	760,
									"scores":	[-4.336279859096055]
								}, {
									"case":	761,
									"scores":	[-4.336279859096055]
								}, {
									"case":	762,
									"scores":	[-4.336279859096055]
								}, {
									"case":	763,
									"scores":	[-4.336279859096055]
								}, {
									"case":	764,
									"scores":	[-4.336279859096055]
								}, {
									"case":	765,
									"scores":	[-4.336279859096055]
								}, {
									"case":	766,
									"scores":	[-4.336279859096055]
								}, {
									"case":	767,
									"scores":	[-4.336279859096055]
								}, {
									"case":	768,
									"scores":	[-4.336279859096055]
								}, {
									"case":	769,
									"scores":	[-4.336279859096055]
								}, {
									"case":	770,
									"scores":	[-4.336279859096055]
								}, {
									"case":	771,
									"scores":	[-4.336279859096055]
								}, {
									"case":	772,
									"scores":	[-4.336279859096055]
								}, {
									"case":	773,
									"scores":	[-4.336279859096055]
								}, {
									"case":	774,
									"scores":	[-4.336279859096055]
								}, {
									"case":	775,
									"scores":	[-4.336279859096055]
								}, {
									"case":	776,
									"scores":	[-4.336279859096055]
								}, {
									"case":	777,
									"scores":	[-4.336279859096055]
								}]
						}]
				}, {
					"line":	1250,
					"switches":	[{
							"switch":	81,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1251,
							"begin_column":	7,
							"end_line":	1251,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -1;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -2;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -3;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 0;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 16;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 192;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 1;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 24;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 2;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 32;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 3;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 4;\n", "if (__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	2,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	3,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	4,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	5,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	6,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	7,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	8,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	9,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	10,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	11,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	12,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	13,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	14,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	15,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	16,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	17,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	18,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	19,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	20,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	21,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	22,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	23,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	24,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	25,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	26,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	27,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	28,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	29,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	30,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	31,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	32,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	33,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	34,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	35,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	36,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	37,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	38,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	39,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	40,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	41,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	42,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	43,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	44,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	45,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	46,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	47,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	48,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	49,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	50,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	51,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	52,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	53,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	54,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	55,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	56,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	57,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	58,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	59,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	60,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	61,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	62,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	63,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	64,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	65,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	66,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	67,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	68,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	69,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	70,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	71,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	72,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	73,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	74,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	75,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	76,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	77,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	78,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	79,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	80,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	81,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	82,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	83,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	84,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	85,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	86,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	87,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	88,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	89,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	90,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	91,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	92,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	93,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	94,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	95,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	96,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	97,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	98,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	99,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	100,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	101,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	102,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	103,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	104,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	105,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	106,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	107,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	108,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	109,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	110,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	111,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	112,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	113,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	114,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	115,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	116,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	117,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	118,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	119,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	120,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	121,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	122,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	123,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	124,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	125,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	126,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	127,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	128,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	129,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	130,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	131,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	132,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	133,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	134,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	135,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	136,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	137,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	138,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	139,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	140,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	141,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	142,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	143,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	144,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	145,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	146,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	147,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	148,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	149,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	150,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	151,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	152,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	153,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	154,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	155,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	156,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	157,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	158,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	159,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	160,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	161,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	162,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	163,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	164,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	165,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	166,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	167,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	168,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	169,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	170,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	171,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	172,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	173,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	174,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	175,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	176,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	177,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	178,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	179,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	180,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	181,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	182,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	183,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	184,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	185,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	186,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	187,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	188,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	189,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	190,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	191,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	192,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	193,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	194,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	195,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	196,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	197,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	198,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	199,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	200,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	201,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	202,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	203,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	204,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	205,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	206,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	207,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	208,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	209,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	210,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	211,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	212,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	213,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	214,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	215,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	216,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	217,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	218,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	219,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	220,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	221,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	222,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	223,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	224,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	225,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	226,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	227,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	228,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	229,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	230,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	231,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	232,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	233,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	234,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	235,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	236,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	237,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	238,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	239,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	240,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	241,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	242,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	243,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	244,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	245,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	246,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	247,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	248,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	249,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	250,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	251,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	252,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	253,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	254,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	255,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	256,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	257,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	258,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	259,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	260,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	261,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	262,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	263,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	264,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	265,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	266,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	267,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	268,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	269,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	270,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	271,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	272,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	273,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	274,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	275,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	276,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	277,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	278,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	279,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	280,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	281,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	282,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	283,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	284,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	285,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	286,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	287,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	288,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	289,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	290,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	291,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	292,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	293,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	294,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	295,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	296,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	297,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	298,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	299,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	300,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	301,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	302,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	303,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	304,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	305,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	306,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	307,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	308,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	309,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	310,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	311,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	312,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	313,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	314,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	315,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	316,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	317,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	318,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	319,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	320,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	321,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	322,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	323,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	324,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	325,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	326,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	327,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	328,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	329,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	330,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	331,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	332,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	333,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	334,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	335,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	336,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	337,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	338,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	339,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	340,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	341,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	342,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	343,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	344,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	345,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	346,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	347,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	348,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	349,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	350,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	351,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	352,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	353,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	354,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	355,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	356,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	357,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	358,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	359,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	360,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	361,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	362,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	363,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	364,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	365,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	366,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	367,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	368,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	369,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	370,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	371,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	372,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	373,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	374,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	375,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	376,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	377,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	378,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	379,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	380,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	381,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	382,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	383,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	384,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	385,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	386,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	387,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	388,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	389,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	390,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	391,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	392,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	393,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	394,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	395,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	396,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	397,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	398,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	399,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	400,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	401,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	402,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	403,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	404,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	405,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	406,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	407,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	408,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	409,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	410,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	411,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	412,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	413,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	414,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	415,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	416,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	417,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	418,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	419,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	420,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	421,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	422,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	423,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	424,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	425,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	426,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	427,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	428,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	429,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	430,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	431,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	432,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	433,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	434,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	435,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	436,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	437,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	438,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	439,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	440,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	441,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	442,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	443,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	444,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	445,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	446,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	447,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	448,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	449,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	450,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	451,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	452,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	453,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	454,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	455,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	456,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	457,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	458,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	459,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	460,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	461,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	462,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	463,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	464,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	465,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	466,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	467,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	468,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	469,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	470,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	471,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	472,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	473,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	474,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	475,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	476,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	477,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	478,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	479,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	480,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	481,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	482,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	483,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	484,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	485,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	486,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	487,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	488,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	489,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	490,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	491,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	492,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	493,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	494,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	495,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	496,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	497,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	498,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	499,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	500,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	501,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	502,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	503,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	504,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	505,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	506,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	507,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	508,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	509,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	510,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	511,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	512,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	513,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	514,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	515,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	516,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	517,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	518,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	519,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	520,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	521,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	522,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	523,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	524,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	525,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	526,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	527,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	528,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	529,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	530,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	531,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	532,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	533,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	534,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	535,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	536,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	537,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	538,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	539,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	540,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	541,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	542,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	543,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	544,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	545,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	546,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	547,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	548,
									"scores":	[-5.4009861789785356, -3.9056606748785354, -3.045659750878535, -3.9056606748785354, -3.045659750878535, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.2616347548785356, -6.2616347548785356, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -5.6792574517785361, -5.6792574517785361, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -6.1722120548785355, -5.8565202917785353, -6.1722120548785355, -6.1722120548785355]
								}, {
									"case":	549,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	550,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	551,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	552,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	553,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	554,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	555,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	556,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}, {
									"case":	557,
									"scores":	[-7.6637679789785356, -6.1684424748785354, -5.308441550878535, -6.1684424748785354, -5.308441550878535, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.5244165548785347, -8.5244165548785347, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -7.9420392517785361, -7.9420392517785361, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.4349938548785346, -8.1193020917785361, -8.4349938548785346, -8.4349938548785346]
								}]
						}, {
							"switch":	82,
							"types":	[[], [], [1], [], [], [], [811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063], [], [763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761], [], [], [762]],
							"begin_line":	1251,
							"begin_column":	9,
							"end_line":	1251,
							"end_column":	19,
							"patch_codes":	["if (!__is_neg(\"\", \"L1251\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n", "_IO_putc(1, 0)", "__tolower_l(1, 0)", "__toupper_l(1, 0)", "clock_adjtime(1, 0)", "clock_getcpuclockid(1, 0)", "clock_getres(1, 0)", "clock_gettime(1, 0)", "clock_settime(1, 0)", "copy(1, -1)", "copy(1, -2)", "copy(1, -3)", "copy(1, 0)", "copy(1, 1)", "copy(1, 16)", "copy(1, 192)", "copy(1, 2)", "copy(1, 24)", "copy(1, 3)", "copy(1, 32)", "copy(1, 4)", "copy(1, 8)", "copy(1, _gl_warn_on_use)", "copy(1, ascii)", "copy(1, block_mode)", "copy(1, decompress)", "copy(1, decrypt)", "copy(1, do_lzw)", "copy(1, exit_code)", "copy(1, exiting_signal)", "copy(1, force)", "copy(1, foreground)", "copy(1, ifd)", "copy(1, imagic1)", "copy(1, in)", "copy(1, last_member)", "copy(1, level)", "copy(1, list)", "copy(1, maxbits)", "copy(1, method)", "copy(1, no_name)", "copy(1, no_time)", "copy(1, ofd)", "copy(1, part_nb)", "copy(1, quiet)", "copy(1, recursive)", "copy(1, remove_ofname_fd)", "copy(1, save_orig_name)", "copy(1, test)", "copy(1, to_stdout)", "copy(1, verbose)", "ct_tally(1, -1)", "ct_tally(1, -2)", "ct_tally(1, -3)", "ct_tally(1, 0)", "ct_tally(1, 1)", "ct_tally(1, 16)", "ct_tally(1, 192)", "ct_tally(1, 2)", "ct_tally(1, 24)", "ct_tally(1, 3)", "ct_tally(1, 32)", "ct_tally(1, 4)", "ct_tally(1, 8)", "ct_tally(1, _gl_warn_on_use)", "ct_tally(1, ascii)", "ct_tally(1, block_mode)", "ct_tally(1, decompress)", "ct_tally(1, decrypt)", "ct_tally(1, do_lzw)", "ct_tally(1, exit_code)", "ct_tally(1, exiting_signal)", "ct_tally(1, force)", "ct_tally(1, foreground)", "ct_tally(1, ifd)", "ct_tally(1, imagic1)", "ct_tally(1, in)", "ct_tally(1, last_member)", "ct_tally(1, level)", "ct_tally(1, list)", "ct_tally(1, maxbits)", "ct_tally(1, method)", "ct_tally(1, no_name)", "ct_tally(1, no_time)", "ct_tally(1, ofd)", "ct_tally(1, part_nb)", "ct_tally(1, quiet)", "ct_tally(1, recursive)", "ct_tally(1, remove_ofname_fd)", "ct_tally(1, save_orig_name)", "ct_tally(1, test)", "ct_tally(1, to_stdout)", "ct_tally(1, verbose)", "daemon(1, -1)", "daemon(1, -2)", "daemon(1, -3)", "daemon(1, 0)", "daemon(1, 1)", "daemon(1, 16)", "daemon(1, 192)", "daemon(1, 2)", "daemon(1, 24)", "daemon(1, 3)", "daemon(1, 32)", "daemon(1, 4)", "daemon(1, 8)", "daemon(1, _gl_warn_on_use)", "daemon(1, ascii)", "daemon(1, block_mode)", "daemon(1, decompress)", "daemon(1, decrypt)", "daemon(1, do_lzw)", "daemon(1, exit_code)", "daemon(1, exiting_signal)", "daemon(1, force)", "daemon(1, foreground)", "daemon(1, ifd)", "daemon(1, imagic1)", "daemon(1, in)", "daemon(1, last_member)", "daemon(1, level)", "daemon(1, list)", "daemon(1, maxbits)", "daemon(1, method)", "daemon(1, no_name)", "daemon(1, no_time)", "daemon(1, ofd)", "daemon(1, part_nb)", "daemon(1, quiet)", "daemon(1, recursive)", "daemon(1, remove_ofname_fd)", "daemon(1, save_orig_name)", "daemon(1, test)", "daemon(1, to_stdout)", "daemon(1, verbose)", "dup2(1, -1)", "dup2(1, -2)", "dup2(1, -3)", "dup2(1, 0)", "dup2(1, 1)", "dup2(1, 16)", "dup2(1, 192)", "dup2(1, 2)", "dup2(1, 24)", "dup2(1, 3)", "dup2(1, 32)", "dup2(1, 4)", "dup2(1, 8)", "dup2(1, _gl_warn_on_use)", "dup2(1, ascii)", "dup2(1, block_mode)", "dup2(1, decompress)", "dup2(1, decrypt)", "dup2(1, do_lzw)", "dup2(1, exit_code)", "dup2(1, exiting_signal)", "dup2(1, force)", "dup2(1, foreground)", "dup2(1, ifd)", "dup2(1, imagic1)", "dup2(1, in)", "dup2(1, last_member)", "dup2(1, level)", "dup2(1, list)", "dup2(1, maxbits)", "dup2(1, method)", "dup2(1, no_name)", "dup2(1, no_time)", "dup2(1, ofd)", "dup2(1, part_nb)", "dup2(1, quiet)", "dup2(1, recursive)", "dup2(1, remove_ofname_fd)", "dup2(1, save_orig_name)", "dup2(1, test)", "dup2(1, to_stdout)", "dup2(1, verbose)", "fchmod(1, -1)", "fchmod(1, -2)", "fchmod(1, -3)", "fchmod(1, 0)", "fchmod(1, 1)", "fchmod(1, 16)", "fchmod(1, 192)", "fchmod(1, 2)", "fchmod(1, 24)", "fchmod(1, 3)", "fchmod(1, 32)", "fchmod(1, 4)", "fchmod(1, 8)", "fchmod(1, inptr)", "fchmod(1, insize)", "fchmod(1, outcnt)", "fputc(1, 0)", "fputc_unlocked(1, 0)", "fstat(1, 0)", "fstat64(1, 0)", "ftruncate(1, -1)", "ftruncate(1, -2)", "ftruncate(1, -3)", "ftruncate(1, 0)", "ftruncate(1, 1)", "ftruncate(1, 16)", "ftruncate(1, 192)", "ftruncate(1, 2)", "ftruncate(1, 24)", "ftruncate(1, 3)", "ftruncate(1, 32)", "ftruncate(1, 4)", "ftruncate(1, 8)", "ftruncate(1, bytes_in)", "ftruncate(1, bytes_out)", "ftruncate(1, header_bytes)", "ftruncate(1, ifile_size)", "ftruncate(1, total_in)", "ftruncate(1, total_out)", "ftruncate64(1, -1)", "ftruncate64(1, -2)", "ftruncate64(1, -3)", "ftruncate64(1, 0)", "ftruncate64(1, 1)", "ftruncate64(1, 16)", "ftruncate64(1, 192)", "ftruncate64(1, 2)", "ftruncate64(1, 24)", "ftruncate64(1, 3)", "ftruncate64(1, 32)", "ftruncate64(1, 4)", "ftruncate64(1, 8)", "ftruncate64(1, bytes_in)", "ftruncate64(1, bytes_out)", "ftruncate64(1, header_bytes)", "ftruncate64(1, ifile_size)", "ftruncate64(1, total_in)", "ftruncate64(1, total_out)", "futimens(1, 0)", "getgroups(1, 0)", "isalnum_l(1, 0)", "isalpha_l(1, 0)", "isblank_l(1, 0)", "iscntrl_l(1, 0)", "isctype(1, -1)", "isctype(1, -2)", "isctype(1, -3)", "isctype(1, 0)", "isctype(1, 1)", "isctype(1, 16)", "isctype(1, 192)", "isctype(1, 2)", "isctype(1, 24)", "isctype(1, 3)", "isctype(1, 32)", "isctype(1, 4)", "isctype(1, 8)", "isctype(1, _gl_warn_on_use)", "isctype(1, ascii)", "isctype(1, block_mode)", "isctype(1, decompress)", "isctype(1, decrypt)", "isctype(1, do_lzw)", "isctype(1, exit_code)", "isctype(1, exiting_signal)", "isctype(1, force)", "isctype(1, foreground)", "isctype(1, ifd)", "isctype(1, imagic1)", "isctype(1, in)", "isctype(1, last_member)", "isctype(1, level)", "isctype(1, list)", "isctype(1, maxbits)", "isctype(1, method)", "isctype(1, no_name)", "isctype(1, no_time)", "isctype(1, ofd)", "isctype(1, part_nb)", "isctype(1, quiet)", "isctype(1, recursive)", "isctype(1, remove_ofname_fd)", "isctype(1, save_orig_name)", "isctype(1, test)", "isctype(1, to_stdout)", "isctype(1, verbose)", "isdigit_l(1, 0)", "isgraph_l(1, 0)", "islower_l(1, 0)", "isprint_l(1, 0)", "ispunct_l(1, 0)", "isspace_l(1, 0)", "isupper_l(1, 0)", "isxdigit_l(1, 0)", "kill(1, -1)", "kill(1, -2)", "kill(1, -3)", "kill(1, 0)", "kill(1, 1)", "kill(1, 16)", "kill(1, 192)", "kill(1, 2)", "kill(1, 24)", "kill(1, 3)", "kill(1, 32)", "kill(1, 4)", "kill(1, 8)", "kill(1, _gl_warn_on_use)", "kill(1, ascii)", "kill(1, block_mode)", "kill(1, decompress)", "kill(1, decrypt)", "kill(1, do_lzw)", "kill(1, exit_code)", "kill(1, exiting_signal)", "kill(1, force)", "kill(1, foreground)", "kill(1, ifd)", "kill(1, imagic1)", "kill(1, in)", "kill(1, last_member)", "kill(1, level)", "kill(1, list)", "kill(1, maxbits)", "kill(1, method)", "kill(1, no_name)", "kill(1, no_time)", "kill(1, ofd)", "kill(1, part_nb)", "kill(1, quiet)", "kill(1, recursive)", "kill(1, remove_ofname_fd)", "kill(1, save_orig_name)", "kill(1, test)", "kill(1, to_stdout)", "kill(1, verbose)", "killpg(1, -1)", "killpg(1, -2)", "killpg(1, -3)", "killpg(1, 0)", "killpg(1, 1)", "killpg(1, 16)", "killpg(1, 192)", "killpg(1, 2)", "killpg(1, 24)", "killpg(1, 3)", "killpg(1, 32)", "killpg(1, 4)", "killpg(1, 8)", "killpg(1, _gl_warn_on_use)", "killpg(1, ascii)", "killpg(1, block_mode)", "killpg(1, decompress)", "killpg(1, decrypt)", "killpg(1, do_lzw)", "killpg(1, exit_code)", "killpg(1, exiting_signal)", "killpg(1, force)", "killpg(1, foreground)", "killpg(1, ifd)", "killpg(1, imagic1)", "killpg(1, in)", "killpg(1, last_member)", "killpg(1, level)", "killpg(1, list)", "killpg(1, maxbits)", "killpg(1, method)", "killpg(1, no_name)", "killpg(1, no_time)", "killpg(1, ofd)", "killpg(1, part_nb)", "killpg(1, quiet)", "killpg(1, recursive)", "killpg(1, remove_ofname_fd)", "killpg(1, save_orig_name)", "killpg(1, test)", "killpg(1, to_stdout)", "killpg(1, verbose)", "lzw(1, -1)", "lzw(1, -2)", "lzw(1, -3)", "lzw(1, 0)", "lzw(1, 1)", "lzw(1, 16)", "lzw(1, 192)", "lzw(1, 2)", "lzw(1, 24)", "lzw(1, 3)", "lzw(1, 32)", "lzw(1, 4)", "lzw(1, 8)", "lzw(1, _gl_warn_on_use)", "lzw(1, ascii)", "lzw(1, block_mode)", "lzw(1, decompress)", "lzw(1, decrypt)", "lzw(1, do_lzw)", "lzw(1, exit_code)", "lzw(1, exiting_signal)", "lzw(1, force)", "lzw(1, foreground)", "lzw(1, ifd)", "lzw(1, imagic1)", "lzw(1, in)", "lzw(1, last_member)", "lzw(1, level)", "lzw(1, list)", "lzw(1, maxbits)", "lzw(1, method)", "lzw(1, no_name)", "lzw(1, no_time)", "lzw(1, ofd)", "lzw(1, part_nb)", "lzw(1, quiet)", "lzw(1, recursive)", "lzw(1, remove_ofname_fd)", "lzw(1, save_orig_name)", "lzw(1, test)", "lzw(1, to_stdout)", "lzw(1, verbose)", "main(1, 0)", "main(1, args)", "putc(1, 0)", "putc_unlocked(1, 0)", "putw(1, 0)", "setpgid(1, -1)", "setpgid(1, -2)", "setpgid(1, -3)", "setpgid(1, 0)", "setpgid(1, 1)", "setpgid(1, 16)", "setpgid(1, 192)", "setpgid(1, 2)", "setpgid(1, 24)", "setpgid(1, 3)", "setpgid(1, 32)", "setpgid(1, 4)", "setpgid(1, 8)", "setpgid(1, _gl_warn_on_use)", "setpgid(1, ascii)", "setpgid(1, block_mode)", "setpgid(1, decompress)", "setpgid(1, decrypt)", "setpgid(1, do_lzw)", "setpgid(1, exit_code)", "setpgid(1, exiting_signal)", "setpgid(1, force)", "setpgid(1, foreground)", "setpgid(1, ifd)", "setpgid(1, imagic1)", "setpgid(1, in)", "setpgid(1, last_member)", "setpgid(1, level)", "setpgid(1, list)", "setpgid(1, maxbits)", "setpgid(1, method)", "setpgid(1, no_name)", "setpgid(1, no_time)", "setpgid(1, ofd)", "setpgid(1, part_nb)", "setpgid(1, quiet)", "setpgid(1, recursive)", "setpgid(1, remove_ofname_fd)", "setpgid(1, save_orig_name)", "setpgid(1, test)", "setpgid(1, to_stdout)", "setpgid(1, verbose)", "siginterrupt(1, -1)", "siginterrupt(1, -2)", "siginterrupt(1, -3)", "siginterrupt(1, 0)", "siginterrupt(1, 1)", "siginterrupt(1, 16)", "siginterrupt(1, 192)", "siginterrupt(1, 2)", "siginterrupt(1, 24)", "siginterrupt(1, 3)", "siginterrupt(1, 32)", "siginterrupt(1, 4)", "siginterrupt(1, 8)", "siginterrupt(1, _gl_warn_on_use)", "siginterrupt(1, ascii)", "siginterrupt(1, block_mode)", "siginterrupt(1, decompress)", "siginterrupt(1, decrypt)", "siginterrupt(1, do_lzw)", "siginterrupt(1, exit_code)", "siginterrupt(1, exiting_signal)", "siginterrupt(1, force)", "siginterrupt(1, foreground)", "siginterrupt(1, ifd)", "siginterrupt(1, imagic1)", "siginterrupt(1, in)", "siginterrupt(1, last_member)", "siginterrupt(1, level)", "siginterrupt(1, list)", "siginterrupt(1, maxbits)", "siginterrupt(1, method)", "siginterrupt(1, no_name)", "siginterrupt(1, no_time)", "siginterrupt(1, ofd)", "siginterrupt(1, part_nb)", "siginterrupt(1, quiet)", "siginterrupt(1, recursive)", "siginterrupt(1, remove_ofname_fd)", "siginterrupt(1, save_orig_name)", "siginterrupt(1, test)", "siginterrupt(1, to_stdout)", "siginterrupt(1, verbose)", "tcsetpgrp(1, -1)", "tcsetpgrp(1, -2)", "tcsetpgrp(1, -3)", "tcsetpgrp(1, 0)", "tcsetpgrp(1, 1)", "tcsetpgrp(1, 16)", "tcsetpgrp(1, 192)", "tcsetpgrp(1, 2)", "tcsetpgrp(1, 24)", "tcsetpgrp(1, 3)", "tcsetpgrp(1, 32)", "tcsetpgrp(1, 4)", "tcsetpgrp(1, 8)", "tcsetpgrp(1, _gl_warn_on_use)", "tcsetpgrp(1, ascii)", "tcsetpgrp(1, block_mode)", "tcsetpgrp(1, decompress)", "tcsetpgrp(1, decrypt)", "tcsetpgrp(1, do_lzw)", "tcsetpgrp(1, exit_code)", "tcsetpgrp(1, exiting_signal)", "tcsetpgrp(1, force)", "tcsetpgrp(1, foreground)", "tcsetpgrp(1, ifd)", "tcsetpgrp(1, imagic1)", "tcsetpgrp(1, in)", "tcsetpgrp(1, last_member)", "tcsetpgrp(1, level)", "tcsetpgrp(1, list)", "tcsetpgrp(1, maxbits)", "tcsetpgrp(1, method)", "tcsetpgrp(1, no_name)", "tcsetpgrp(1, no_time)", "tcsetpgrp(1, ofd)", "tcsetpgrp(1, part_nb)", "tcsetpgrp(1, quiet)", "tcsetpgrp(1, recursive)", "tcsetpgrp(1, remove_ofname_fd)", "tcsetpgrp(1, save_orig_name)", "tcsetpgrp(1, test)", "tcsetpgrp(1, to_stdout)", "tcsetpgrp(1, verbose)", "tolower_l(1, 0)", "toupper_l(1, 0)", "ungetc(1, 0)", "unlzh(1, -1)", "unlzh(1, -2)", "unlzh(1, -3)", "unlzh(1, 0)", "unlzh(1, 1)", "unlzh(1, 16)", "unlzh(1, 192)", "unlzh(1, 2)", "unlzh(1, 24)", "unlzh(1, 3)", "unlzh(1, 32)", "unlzh(1, 4)", "unlzh(1, 8)", "unlzh(1, _gl_warn_on_use)", "unlzh(1, ascii)", "unlzh(1, block_mode)", "unlzh(1, decompress)", "unlzh(1, decrypt)", "unlzh(1, do_lzw)", "unlzh(1, exit_code)", "unlzh(1, exiting_signal)", "unlzh(1, force)", "unlzh(1, foreground)", "unlzh(1, ifd)", "unlzh(1, imagic1)", "unlzh(1, in)", "unlzh(1, last_member)", "unlzh(1, level)", "unlzh(1, list)", "unlzh(1, maxbits)", "unlzh(1, method)", "unlzh(1, no_name)", "unlzh(1, no_time)", "unlzh(1, ofd)", "unlzh(1, part_nb)", "unlzh(1, quiet)", "unlzh(1, recursive)", "unlzh(1, remove_ofname_fd)", "unlzh(1, save_orig_name)", "unlzh(1, test)", "unlzh(1, to_stdout)", "unlzh(1, verbose)", "unlzw(1, -1)", "unlzw(1, -2)", "unlzw(1, -3)", "unlzw(1, 0)", "unlzw(1, 1)", "unlzw(1, 16)", "unlzw(1, 192)", "unlzw(1, 2)", "unlzw(1, 24)", "unlzw(1, 3)", "unlzw(1, 32)", "unlzw(1, 4)", "unlzw(1, 8)", "unlzw(1, _gl_warn_on_use)", "unlzw(1, ascii)", "unlzw(1, block_mode)", "unlzw(1, decompress)", "unlzw(1, decrypt)", "unlzw(1, do_lzw)", "unlzw(1, exit_code)", "unlzw(1, exiting_signal)", "unlzw(1, force)", "unlzw(1, foreground)", "unlzw(1, ifd)", "unlzw(1, imagic1)", "unlzw(1, in)", "unlzw(1, last_member)", "unlzw(1, level)", "unlzw(1, list)", "unlzw(1, maxbits)", "unlzw(1, method)", "unlzw(1, no_name)", "unlzw(1, no_time)", "unlzw(1, ofd)", "unlzw(1, part_nb)", "unlzw(1, quiet)", "unlzw(1, recursive)", "unlzw(1, remove_ofname_fd)", "unlzw(1, save_orig_name)", "unlzw(1, test)", "unlzw(1, to_stdout)", "unlzw(1, verbose)", "unpack(1, -1)", "unpack(1, -2)", "unpack(1, -3)", "unpack(1, 0)", "unpack(1, 1)", "unpack(1, 16)", "unpack(1, 192)", "unpack(1, 2)", "unpack(1, 24)", "unpack(1, 3)", "unpack(1, 32)", "unpack(1, 4)", "unpack(1, 8)", "unpack(1, _gl_warn_on_use)", "unpack(1, ascii)", "unpack(1, block_mode)", "unpack(1, decompress)", "unpack(1, decrypt)", "unpack(1, do_lzw)", "unpack(1, exit_code)", "unpack(1, exiting_signal)", "unpack(1, force)", "unpack(1, foreground)", "unpack(1, ifd)", "unpack(1, imagic1)", "unpack(1, in)", "unpack(1, last_member)", "unpack(1, level)", "unpack(1, list)", "unpack(1, maxbits)", "unpack(1, method)", "unpack(1, no_name)", "unpack(1, no_time)", "unpack(1, ofd)", "unpack(1, part_nb)", "unpack(1, quiet)", "unpack(1, recursive)", "unpack(1, remove_ofname_fd)", "unpack(1, save_orig_name)", "unpack(1, test)", "unpack(1, to_stdout)", "unpack(1, verbose)", "unzip(1, -1)", "unzip(1, -2)", "unzip(1, -3)", "unzip(1, 0)", "unzip(1, 1)", "unzip(1, 16)", "unzip(1, 192)", "unzip(1, 2)", "unzip(1, 24)", "unzip(1, 3)", "unzip(1, 32)", "unzip(1, 4)", "unzip(1, 8)", "unzip(1, _gl_warn_on_use)", "unzip(1, ascii)", "unzip(1, block_mode)", "unzip(1, decompress)", "unzip(1, decrypt)", "unzip(1, do_lzw)", "unzip(1, exit_code)", "unzip(1, exiting_signal)", "unzip(1, force)", "unzip(1, foreground)", "unzip(1, ifd)", "unzip(1, imagic1)", "unzip(1, in)", "unzip(1, last_member)", "unzip(1, level)", "unzip(1, list)", "unzip(1, maxbits)", "unzip(1, method)", "unzip(1, no_name)", "unzip(1, no_time)", "unzip(1, ofd)", "unzip(1, part_nb)", "unzip(1, quiet)", "unzip(1, recursive)", "unzip(1, remove_ofname_fd)", "unzip(1, save_orig_name)", "unzip(1, test)", "unzip(1, to_stdout)", "unzip(1, verbose)", "zip(1, -1)", "zip(1, -2)", "zip(1, -3)", "zip(1, 0)", "zip(1, 1)", "zip(1, 16)", "zip(1, 192)", "zip(1, 2)", "zip(1, 24)", "zip(1, 3)", "zip(1, 32)", "zip(1, 4)", "zip(1, 8)", "zip(1, _gl_warn_on_use)", "zip(1, ascii)", "zip(1, block_mode)", "zip(1, decompress)", "zip(1, decrypt)", "zip(1, do_lzw)", "zip(1, exit_code)", "zip(1, exiting_signal)", "zip(1, force)", "zip(1, foreground)", "zip(1, ifd)", "zip(1, imagic1)", "zip(1, in)", "zip(1, last_member)", "zip(1, level)", "zip(1, list)", "zip(1, maxbits)", "zip(1, method)", "zip(1, no_name)", "zip(1, no_time)", "zip(1, ofd)", "zip(1, part_nb)", "zip(1, quiet)", "zip(1, recursive)", "zip(1, remove_ofname_fd)", "zip(1, save_orig_name)", "zip(1, test)", "zip(1, to_stdout)", "zip(1, verbose)", "{\n}\n", "imagic1 = (inptr < insize ? inbuf[inptr++] : __getpgid(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : _tolower(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : _toupper(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : abs(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : check_zipfile(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : close(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : dup(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : dysize(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fchdir(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fdatasync(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : ffs(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fsync(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : get_method(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : getpgid(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : getsid(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : grantpt(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : gsignal(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isalnum(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isalpha(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isascii(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isatty(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isblank(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : iscntrl(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isdigit(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isgraph(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : islower(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isprint(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : ispunct(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isspace(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isupper(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : isxdigit(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : nice(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : posix_openpt(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : putchar(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : putchar_unlocked(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : raise(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : sigblock(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : sighold(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : sigignore(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : sigpause(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : sigrelse(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : sigsetmask(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : syncfs(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : tcgetpgrp(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : toascii(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : tolower(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : toupper(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : unlockpt(1))", "imagic1 = ((0 * flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((0 * imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((0 * in) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((0 * stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags != 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags != imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags != stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags * imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags * in) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags * stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags + 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags + imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags + stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags - 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags - imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags - stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags == 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags == imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((flags == stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 != 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 != stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 * flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 * in) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 * stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 + 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 + stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 - 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 - stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 == 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((imagic1 == stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in != 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in != flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in != imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in != stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in * flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in * imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in * stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in + 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in + flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in + imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in + stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in - 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in - flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in - imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in - stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in == 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in == flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in == imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((in == stamp) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((magic != 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((magic == 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((stamp != 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((stamp * flags) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((stamp * imagic1) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((stamp * in) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((stamp + 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((stamp - 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = ((stamp == 0) < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "imagic1 = (inptr < (0 * flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (0 * imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (0 * in) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (0 * stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags != 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags != imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags != stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags * imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags * in) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags * stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags + 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags + imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags + stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags - 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags - imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags - stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags == 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags == imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (flags == stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 != 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 != stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 * flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 * in) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 * stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 + 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 + stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 - 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 - stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 == 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (imagic1 == stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in != 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in != flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in != imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in != stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in * flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in * imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in * stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in + 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in + flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in + imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in + stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in - 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in - flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in - imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in - stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in == 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in == flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in == imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (in == stamp) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (magic != 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (magic == 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (stamp != 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (stamp * flags) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (stamp * imagic1) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (stamp * in) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (stamp + 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (stamp - 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < (stamp == 0) ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? (&flags)[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? (&imagic1)[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? (&in)[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? (&magic)[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? (&stamp)[inptr++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(0 * flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(0 * imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(0 * in)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(0 * stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags != 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags != imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags != stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags * imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags * in)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags * stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags + 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags + imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags + stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags - 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags - imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags - stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags == 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags == imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(flags == stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 != 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 != stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 * flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 * in)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 * stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 + 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 + stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 - 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 - stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 == 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(imagic1 == stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in != 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in != flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in != imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in != stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in * flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in * imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in * stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in + 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in + flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in + imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in + stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in - 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in - flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in - imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in - stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in == 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in == flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in == imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(in == stamp)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(magic != 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(magic == 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(stamp != 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(stamp * flags)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(stamp * imagic1)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(stamp * in)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(stamp + 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(stamp - 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[(stamp == 0)++] : fill_inbuf(1))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((0 * flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((0 * imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((0 * in)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((0 * stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags != 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags != imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags != stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags * imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags * in)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags * stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags + 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags + imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags + stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags - 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags - imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags - stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags == 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags == imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((flags == stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 != 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 != stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 * flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 * in)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 * stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 + 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 + stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 - 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 - stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 == 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((imagic1 == stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in != 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in != flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in != imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in != stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in * flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in * imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in * stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in + 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in + flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in + imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in + stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in - 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in - flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in - imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in - stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in == 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in == flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in == imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((in == stamp)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((magic != 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((magic == 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((stamp != 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((stamp * flags)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((stamp * imagic1)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((stamp * in)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((stamp + 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((stamp - 0)))", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf((stamp == 0)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3486910247785353, -2.4272407247785353, -2.5437723577785363, -2.4272407247785353, -2.5437723577785363, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -5.3494434517785354, -5.3494434517785354, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.431123151778535, -4.431123151778535, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.9124784517785356, -4.6959046517785357, -4.9124784517785356, -4.9124784517785356]
								}, {
									"case":	2,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	3,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	4,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	5,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	6,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	7,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	8,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	9,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	10,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	11,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	12,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	13,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	14,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	15,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	16,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	17,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	18,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	19,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	20,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	21,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	22,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	23,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	24,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	25,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	26,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	27,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	28,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	29,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	30,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	31,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	32,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	33,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	34,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	35,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	36,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	37,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	38,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	39,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	40,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	41,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	42,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	43,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	44,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	45,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	46,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	47,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	48,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	49,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	50,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	51,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	52,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	53,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	54,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	55,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	56,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	57,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	58,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	59,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	60,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	61,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	62,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	63,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	64,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	65,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	66,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	67,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	68,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	69,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	70,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	71,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	72,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	73,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	74,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	75,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	76,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	77,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	78,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	79,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	80,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	81,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	82,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	83,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	84,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	85,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	86,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	87,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	88,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	89,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	90,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	91,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	92,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	93,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	94,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	95,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	96,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	97,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	98,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	99,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	100,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	101,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	102,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	103,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	104,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	105,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	106,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	107,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	108,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	109,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	110,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	111,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	112,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	113,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	114,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	115,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	116,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	117,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	118,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	119,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	120,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	121,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	122,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	123,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	124,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	125,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	126,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	127,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	128,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	129,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	130,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	131,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	132,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	133,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	134,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	135,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	136,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	137,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	138,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	139,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	140,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	141,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	142,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	143,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	144,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	145,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	146,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	147,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	148,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	149,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	150,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	151,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	152,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	153,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	154,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	155,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	156,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	157,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	158,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	159,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	160,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	161,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	162,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	163,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	164,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	165,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	166,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	167,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	168,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	169,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	170,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	171,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	172,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	173,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	174,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	175,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	176,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	177,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	178,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	179,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	180,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	181,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	182,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	183,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	184,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	185,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	186,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	187,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	188,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	189,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	190,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	191,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	192,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	193,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	194,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	195,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	196,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	197,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	198,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	199,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	200,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	201,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	202,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	203,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	204,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	205,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	206,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	207,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	208,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	209,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	210,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	211,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	212,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	213,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	214,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	215,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	216,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	217,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	218,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	219,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	220,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	221,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	222,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	223,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	224,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	225,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	226,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	227,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	228,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	229,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	230,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	231,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	232,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	233,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	234,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	235,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	236,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	237,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	238,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	239,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	240,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	241,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	242,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	243,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	244,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	245,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	246,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	247,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	248,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	249,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	250,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	251,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	252,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	253,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	254,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	255,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	256,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	257,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	258,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	259,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	260,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	261,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	262,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	263,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	264,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	265,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	266,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	267,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	268,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	269,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	270,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	271,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	272,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	273,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	274,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	275,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	276,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	277,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	278,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	279,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	280,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	281,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	282,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	283,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	284,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	285,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	286,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	287,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	288,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	289,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	290,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	291,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	292,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	293,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	294,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	295,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	296,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	297,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	298,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	299,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	300,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	301,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	302,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	303,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	304,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	305,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	306,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	307,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	308,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	309,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	310,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	311,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	312,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	313,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	314,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	315,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	316,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	317,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	318,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	319,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	320,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	321,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	322,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	323,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	324,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	325,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	326,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	327,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	328,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	329,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	330,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	331,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	332,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	333,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	334,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	335,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	336,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	337,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	338,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	339,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	340,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	341,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	342,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	343,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	344,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	345,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	346,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	347,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	348,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	349,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	350,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	351,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	352,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	353,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	354,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	355,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	356,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	357,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	358,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	359,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	360,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	361,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	362,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	363,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	364,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	365,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	366,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	367,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	368,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	369,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	370,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	371,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	372,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	373,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	374,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	375,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	376,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	377,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	378,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	379,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	380,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	381,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	382,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	383,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	384,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	385,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	386,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	387,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	388,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	389,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	390,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	391,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	392,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	393,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	394,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	395,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	396,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	397,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	398,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	399,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	400,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	401,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	402,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	403,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	404,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	405,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	406,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	407,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	408,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	409,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	410,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	411,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	412,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	413,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	414,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	415,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	416,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	417,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	418,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	419,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	420,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	421,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	422,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	423,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	424,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	425,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	426,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	427,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	428,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	429,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	430,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	431,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	432,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	433,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	434,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	435,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	436,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	437,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	438,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	439,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	440,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	441,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	442,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	443,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	444,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	445,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	446,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	447,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	448,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	449,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	450,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	451,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	452,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	453,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	454,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	455,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	456,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	457,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	458,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	459,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	460,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	461,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	462,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	463,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	464,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	465,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	466,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	467,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	468,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	469,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	470,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	471,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	472,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	473,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	474,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	475,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	476,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	477,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	478,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	479,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	480,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	481,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	482,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	483,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	484,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	485,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	486,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	487,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	488,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	489,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	490,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	491,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	492,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	493,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	494,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	495,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	496,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	497,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	498,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	499,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	500,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	501,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	502,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	503,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	504,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	505,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	506,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	507,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	508,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	509,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	510,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	511,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	512,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	513,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	514,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	515,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	516,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	517,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	518,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	519,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	520,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	521,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	522,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	523,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	524,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	525,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	526,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	527,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	528,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	529,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	530,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	531,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	532,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	533,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	534,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	535,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	536,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	537,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	538,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	539,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	540,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	541,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	542,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	543,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	544,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	545,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	546,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	547,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	548,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	549,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	550,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	551,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	552,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	553,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	554,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	555,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	556,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	557,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	558,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	559,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	560,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	561,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	562,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	563,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	564,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	565,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	566,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	567,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	568,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	569,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	570,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	571,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	572,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	573,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	574,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	575,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	576,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	577,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	578,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	579,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	580,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	581,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	582,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	583,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	584,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	585,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	586,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	587,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	588,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	589,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	590,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	591,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	592,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	593,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	594,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	595,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	596,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	597,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	598,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	599,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	600,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	601,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	602,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	603,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	604,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	605,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	606,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	607,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	608,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	609,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	610,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	611,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	612,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	613,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	614,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	615,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	616,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	617,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	618,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	619,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	620,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	621,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	622,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	623,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	624,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	625,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	626,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	627,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	628,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	629,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	630,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	631,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	632,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	633,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	634,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	635,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	636,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	637,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	638,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	639,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	640,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	641,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	642,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	643,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	644,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	645,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	646,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	647,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	648,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	649,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	650,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	651,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	652,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	653,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	654,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	655,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	656,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	657,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	658,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	659,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	660,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	661,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	662,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	663,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	664,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	665,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	666,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	667,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	668,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	669,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	670,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	671,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	672,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	673,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	674,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	675,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	676,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	677,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	678,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	679,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	680,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	681,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	682,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	683,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	684,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	685,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	686,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	687,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	688,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	689,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	690,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	691,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	692,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	693,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	694,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	695,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	696,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	697,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	698,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	699,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	700,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	701,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	702,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	703,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	704,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	705,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	706,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	707,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	708,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	709,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	710,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	711,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	712,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	713,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	714,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	715,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	716,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	717,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	718,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	719,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	720,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	721,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	722,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	723,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	724,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	725,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	726,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	727,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	728,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	729,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	730,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	731,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	732,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	733,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	734,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	735,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	736,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	737,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	738,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	739,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	740,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	741,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	742,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	743,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	744,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	745,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	746,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	747,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	748,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	749,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	750,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	751,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	752,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	753,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	754,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	755,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	756,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	757,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	758,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	759,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	760,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	761,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	762,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	763,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	764,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	765,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	766,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	767,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	768,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	769,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	770,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	771,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	772,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	773,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	774,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	775,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	776,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	777,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	778,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	779,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	780,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	781,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	782,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	783,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	784,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	785,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	786,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	787,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	788,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	789,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	790,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	791,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	792,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	793,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	794,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	795,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	796,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	797,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	798,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	799,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	800,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	801,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	802,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	803,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	804,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	805,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	806,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	807,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	808,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	809,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	810,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	811,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	812,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	813,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	814,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	815,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	816,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	817,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	818,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	819,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	820,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	821,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	822,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	823,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	824,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	825,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	826,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	827,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	828,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	829,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	830,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	831,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	832,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	833,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	834,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	835,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	836,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	837,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	838,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	839,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	840,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	841,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	842,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	843,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	844,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	845,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	846,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	847,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	848,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	849,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	850,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	851,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	852,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	853,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	854,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	855,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	856,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	857,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	858,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	859,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	860,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	861,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	862,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	863,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	864,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	865,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	866,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	867,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	868,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	869,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	870,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	871,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	872,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	873,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	874,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	875,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	876,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	877,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	878,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	879,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	880,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	881,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	882,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	883,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	884,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	885,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	886,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	887,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	888,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	889,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	890,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	891,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	892,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	893,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	894,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	895,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	896,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	897,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	898,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	899,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	900,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	901,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	902,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	903,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	904,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	905,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	906,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	907,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	908,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	909,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	910,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	911,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	912,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	913,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	914,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	915,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	916,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	917,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	918,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	919,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	920,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	921,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	922,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	923,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	924,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	925,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	926,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	927,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	928,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	929,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	930,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	931,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	932,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	933,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	934,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	935,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	936,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	937,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	938,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	939,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	940,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	941,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	942,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	943,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	944,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	945,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	946,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	947,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	948,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	949,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	950,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	951,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	952,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	953,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	954,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	955,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	956,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	957,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	958,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	959,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	960,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	961,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	962,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	963,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	964,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	965,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	966,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	967,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	968,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	969,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	970,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	971,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	972,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	973,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	974,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	975,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	976,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	977,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	978,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	979,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	980,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	981,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	982,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	983,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	984,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	985,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	986,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	987,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	988,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	989,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	990,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	991,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	992,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	993,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	994,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	995,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	996,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	997,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	998,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	999,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1000,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1001,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1002,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1003,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1004,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1005,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1006,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1007,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1008,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1009,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1010,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1011,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1012,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1013,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1014,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1015,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1016,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1017,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1018,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1019,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1020,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1021,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1022,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1023,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1024,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1025,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1026,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1027,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1028,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1029,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1030,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1031,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1032,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1033,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1034,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1035,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1036,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1037,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1038,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1039,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1040,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1041,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1042,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1043,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1044,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1045,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1046,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1047,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1048,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1049,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1050,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1051,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1052,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1053,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1054,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1055,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1056,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1057,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1058,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1059,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1060,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1061,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1062,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	1063,
									"scores":	[-4.3160771517785355]
								}]
						}]
				}, {
					"line":	1251,
					"switches":	[{
							"switch":	83,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1252,
							"begin_column":	7,
							"end_line":	1252,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -1;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -2;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return -3;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 0;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 16;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 192;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 1;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 24;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 2;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 32;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 3;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 4;\n", "if (__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.295874444461016]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}, {
									"case":	17,
									"scores":	[-4.295874444461016]
								}, {
									"case":	18,
									"scores":	[-4.295874444461016]
								}, {
									"case":	19,
									"scores":	[-4.295874444461016]
								}, {
									"case":	20,
									"scores":	[-4.295874444461016]
								}, {
									"case":	21,
									"scores":	[-4.295874444461016]
								}, {
									"case":	22,
									"scores":	[-4.295874444461016]
								}, {
									"case":	23,
									"scores":	[-4.295874444461016]
								}, {
									"case":	24,
									"scores":	[-4.295874444461016]
								}, {
									"case":	25,
									"scores":	[-4.295874444461016]
								}, {
									"case":	26,
									"scores":	[-4.295874444461016]
								}, {
									"case":	27,
									"scores":	[-4.295874444461016]
								}, {
									"case":	28,
									"scores":	[-4.295874444461016]
								}, {
									"case":	29,
									"scores":	[-4.295874444461016]
								}, {
									"case":	30,
									"scores":	[-4.295874444461016]
								}, {
									"case":	31,
									"scores":	[-4.295874444461016]
								}, {
									"case":	32,
									"scores":	[-4.295874444461016]
								}, {
									"case":	33,
									"scores":	[-4.295874444461016]
								}, {
									"case":	34,
									"scores":	[-4.295874444461016]
								}, {
									"case":	35,
									"scores":	[-4.295874444461016]
								}, {
									"case":	36,
									"scores":	[-4.295874444461016]
								}, {
									"case":	37,
									"scores":	[-4.295874444461016]
								}, {
									"case":	38,
									"scores":	[-4.295874444461016]
								}, {
									"case":	39,
									"scores":	[-4.295874444461016]
								}, {
									"case":	40,
									"scores":	[-4.295874444461016]
								}, {
									"case":	41,
									"scores":	[-4.295874444461016]
								}, {
									"case":	42,
									"scores":	[-4.295874444461016]
								}, {
									"case":	43,
									"scores":	[-4.295874444461016]
								}, {
									"case":	44,
									"scores":	[-4.295874444461016]
								}, {
									"case":	45,
									"scores":	[-4.295874444461016]
								}, {
									"case":	46,
									"scores":	[-4.295874444461016]
								}, {
									"case":	47,
									"scores":	[-4.295874444461016]
								}, {
									"case":	48,
									"scores":	[-4.295874444461016]
								}, {
									"case":	49,
									"scores":	[-4.295874444461016]
								}, {
									"case":	50,
									"scores":	[-4.295874444461016]
								}, {
									"case":	51,
									"scores":	[-4.295874444461016]
								}, {
									"case":	52,
									"scores":	[-4.295874444461016]
								}, {
									"case":	53,
									"scores":	[-4.295874444461016]
								}, {
									"case":	54,
									"scores":	[-4.295874444461016]
								}, {
									"case":	55,
									"scores":	[-4.295874444461016]
								}, {
									"case":	56,
									"scores":	[-4.295874444461016]
								}, {
									"case":	57,
									"scores":	[-4.295874444461016]
								}, {
									"case":	58,
									"scores":	[-4.295874444461016]
								}, {
									"case":	59,
									"scores":	[-4.295874444461016]
								}, {
									"case":	60,
									"scores":	[-4.295874444461016]
								}, {
									"case":	61,
									"scores":	[-4.295874444461016]
								}, {
									"case":	62,
									"scores":	[-4.295874444461016]
								}, {
									"case":	63,
									"scores":	[-4.295874444461016]
								}, {
									"case":	64,
									"scores":	[-4.295874444461016]
								}, {
									"case":	65,
									"scores":	[-4.295874444461016]
								}, {
									"case":	66,
									"scores":	[-4.295874444461016]
								}, {
									"case":	67,
									"scores":	[-4.295874444461016]
								}, {
									"case":	68,
									"scores":	[-4.295874444461016]
								}, {
									"case":	69,
									"scores":	[-4.295874444461016]
								}, {
									"case":	70,
									"scores":	[-4.295874444461016]
								}, {
									"case":	71,
									"scores":	[-4.295874444461016]
								}, {
									"case":	72,
									"scores":	[-4.295874444461016]
								}, {
									"case":	73,
									"scores":	[-4.295874444461016]
								}, {
									"case":	74,
									"scores":	[-4.295874444461016]
								}, {
									"case":	75,
									"scores":	[-4.295874444461016]
								}, {
									"case":	76,
									"scores":	[-4.295874444461016]
								}, {
									"case":	77,
									"scores":	[-4.295874444461016]
								}, {
									"case":	78,
									"scores":	[-4.295874444461016]
								}, {
									"case":	79,
									"scores":	[-4.295874444461016]
								}, {
									"case":	80,
									"scores":	[-4.295874444461016]
								}, {
									"case":	81,
									"scores":	[-4.295874444461016]
								}, {
									"case":	82,
									"scores":	[-4.295874444461016]
								}, {
									"case":	83,
									"scores":	[-4.295874444461016]
								}, {
									"case":	84,
									"scores":	[-4.295874444461016]
								}, {
									"case":	85,
									"scores":	[-4.295874444461016]
								}, {
									"case":	86,
									"scores":	[-4.295874444461016]
								}, {
									"case":	87,
									"scores":	[-4.295874444461016]
								}, {
									"case":	88,
									"scores":	[-4.295874444461016]
								}, {
									"case":	89,
									"scores":	[-4.295874444461016]
								}, {
									"case":	90,
									"scores":	[-4.295874444461016]
								}, {
									"case":	91,
									"scores":	[-4.295874444461016]
								}, {
									"case":	92,
									"scores":	[-4.295874444461016]
								}, {
									"case":	93,
									"scores":	[-4.295874444461016]
								}, {
									"case":	94,
									"scores":	[-4.295874444461016]
								}, {
									"case":	95,
									"scores":	[-4.295874444461016]
								}, {
									"case":	96,
									"scores":	[-4.295874444461016]
								}, {
									"case":	97,
									"scores":	[-4.295874444461016]
								}, {
									"case":	98,
									"scores":	[-4.295874444461016]
								}, {
									"case":	99,
									"scores":	[-4.295874444461016]
								}, {
									"case":	100,
									"scores":	[-4.295874444461016]
								}, {
									"case":	101,
									"scores":	[-4.295874444461016]
								}, {
									"case":	102,
									"scores":	[-4.295874444461016]
								}, {
									"case":	103,
									"scores":	[-4.295874444461016]
								}, {
									"case":	104,
									"scores":	[-4.295874444461016]
								}, {
									"case":	105,
									"scores":	[-4.295874444461016]
								}, {
									"case":	106,
									"scores":	[-4.295874444461016]
								}, {
									"case":	107,
									"scores":	[-4.295874444461016]
								}, {
									"case":	108,
									"scores":	[-4.295874444461016]
								}, {
									"case":	109,
									"scores":	[-4.295874444461016]
								}, {
									"case":	110,
									"scores":	[-4.295874444461016]
								}, {
									"case":	111,
									"scores":	[-4.295874444461016]
								}, {
									"case":	112,
									"scores":	[-4.295874444461016]
								}, {
									"case":	113,
									"scores":	[-4.295874444461016]
								}, {
									"case":	114,
									"scores":	[-4.295874444461016]
								}, {
									"case":	115,
									"scores":	[-4.295874444461016]
								}, {
									"case":	116,
									"scores":	[-4.295874444461016]
								}, {
									"case":	117,
									"scores":	[-4.295874444461016]
								}, {
									"case":	118,
									"scores":	[-4.295874444461016]
								}, {
									"case":	119,
									"scores":	[-4.295874444461016]
								}, {
									"case":	120,
									"scores":	[-4.295874444461016]
								}, {
									"case":	121,
									"scores":	[-4.295874444461016]
								}, {
									"case":	122,
									"scores":	[-4.295874444461016]
								}, {
									"case":	123,
									"scores":	[-4.295874444461016]
								}, {
									"case":	124,
									"scores":	[-4.295874444461016]
								}, {
									"case":	125,
									"scores":	[-4.295874444461016]
								}, {
									"case":	126,
									"scores":	[-4.295874444461016]
								}, {
									"case":	127,
									"scores":	[-4.295874444461016]
								}, {
									"case":	128,
									"scores":	[-4.295874444461016]
								}, {
									"case":	129,
									"scores":	[-4.295874444461016]
								}, {
									"case":	130,
									"scores":	[-4.295874444461016]
								}, {
									"case":	131,
									"scores":	[-4.295874444461016]
								}, {
									"case":	132,
									"scores":	[-4.295874444461016]
								}, {
									"case":	133,
									"scores":	[-4.295874444461016]
								}, {
									"case":	134,
									"scores":	[-4.295874444461016]
								}, {
									"case":	135,
									"scores":	[-4.295874444461016]
								}, {
									"case":	136,
									"scores":	[-4.295874444461016]
								}, {
									"case":	137,
									"scores":	[-4.295874444461016]
								}, {
									"case":	138,
									"scores":	[-4.295874444461016]
								}, {
									"case":	139,
									"scores":	[-4.295874444461016]
								}, {
									"case":	140,
									"scores":	[-4.295874444461016]
								}, {
									"case":	141,
									"scores":	[-4.295874444461016]
								}, {
									"case":	142,
									"scores":	[-4.295874444461016]
								}, {
									"case":	143,
									"scores":	[-4.295874444461016]
								}, {
									"case":	144,
									"scores":	[-4.295874444461016]
								}, {
									"case":	145,
									"scores":	[-4.295874444461016]
								}, {
									"case":	146,
									"scores":	[-4.295874444461016]
								}, {
									"case":	147,
									"scores":	[-4.295874444461016]
								}, {
									"case":	148,
									"scores":	[-4.295874444461016]
								}, {
									"case":	149,
									"scores":	[-4.295874444461016]
								}, {
									"case":	150,
									"scores":	[-4.295874444461016]
								}, {
									"case":	151,
									"scores":	[-4.295874444461016]
								}, {
									"case":	152,
									"scores":	[-4.295874444461016]
								}, {
									"case":	153,
									"scores":	[-4.295874444461016]
								}, {
									"case":	154,
									"scores":	[-4.295874444461016]
								}, {
									"case":	155,
									"scores":	[-4.295874444461016]
								}, {
									"case":	156,
									"scores":	[-4.295874444461016]
								}, {
									"case":	157,
									"scores":	[-4.295874444461016]
								}, {
									"case":	158,
									"scores":	[-4.295874444461016]
								}, {
									"case":	159,
									"scores":	[-4.295874444461016]
								}, {
									"case":	160,
									"scores":	[-4.295874444461016]
								}, {
									"case":	161,
									"scores":	[-4.295874444461016]
								}, {
									"case":	162,
									"scores":	[-4.295874444461016]
								}, {
									"case":	163,
									"scores":	[-4.295874444461016]
								}, {
									"case":	164,
									"scores":	[-4.295874444461016]
								}, {
									"case":	165,
									"scores":	[-4.295874444461016]
								}, {
									"case":	166,
									"scores":	[-4.295874444461016]
								}, {
									"case":	167,
									"scores":	[-4.295874444461016]
								}, {
									"case":	168,
									"scores":	[-4.295874444461016]
								}, {
									"case":	169,
									"scores":	[-4.295874444461016]
								}, {
									"case":	170,
									"scores":	[-4.295874444461016]
								}, {
									"case":	171,
									"scores":	[-4.295874444461016]
								}, {
									"case":	172,
									"scores":	[-4.295874444461016]
								}, {
									"case":	173,
									"scores":	[-4.295874444461016]
								}, {
									"case":	174,
									"scores":	[-4.295874444461016]
								}, {
									"case":	175,
									"scores":	[-4.295874444461016]
								}, {
									"case":	176,
									"scores":	[-4.295874444461016]
								}, {
									"case":	177,
									"scores":	[-4.295874444461016]
								}, {
									"case":	178,
									"scores":	[-4.295874444461016]
								}, {
									"case":	179,
									"scores":	[-4.295874444461016]
								}, {
									"case":	180,
									"scores":	[-4.295874444461016]
								}, {
									"case":	181,
									"scores":	[-4.295874444461016]
								}, {
									"case":	182,
									"scores":	[-4.295874444461016]
								}, {
									"case":	183,
									"scores":	[-4.295874444461016]
								}, {
									"case":	184,
									"scores":	[-4.295874444461016]
								}, {
									"case":	185,
									"scores":	[-4.295874444461016]
								}, {
									"case":	186,
									"scores":	[-4.295874444461016]
								}, {
									"case":	187,
									"scores":	[-4.295874444461016]
								}, {
									"case":	188,
									"scores":	[-4.295874444461016]
								}, {
									"case":	189,
									"scores":	[-4.295874444461016]
								}, {
									"case":	190,
									"scores":	[-4.295874444461016]
								}, {
									"case":	191,
									"scores":	[-4.295874444461016]
								}, {
									"case":	192,
									"scores":	[-4.295874444461016]
								}, {
									"case":	193,
									"scores":	[-4.295874444461016]
								}, {
									"case":	194,
									"scores":	[-4.295874444461016]
								}, {
									"case":	195,
									"scores":	[-4.295874444461016]
								}, {
									"case":	196,
									"scores":	[-4.295874444461016]
								}, {
									"case":	197,
									"scores":	[-4.295874444461016]
								}, {
									"case":	198,
									"scores":	[-4.295874444461016]
								}, {
									"case":	199,
									"scores":	[-4.295874444461016]
								}, {
									"case":	200,
									"scores":	[-4.295874444461016]
								}, {
									"case":	201,
									"scores":	[-4.295874444461016]
								}, {
									"case":	202,
									"scores":	[-4.295874444461016]
								}, {
									"case":	203,
									"scores":	[-4.295874444461016]
								}, {
									"case":	204,
									"scores":	[-4.295874444461016]
								}, {
									"case":	205,
									"scores":	[-4.295874444461016]
								}, {
									"case":	206,
									"scores":	[-4.295874444461016]
								}, {
									"case":	207,
									"scores":	[-4.295874444461016]
								}, {
									"case":	208,
									"scores":	[-4.295874444461016]
								}, {
									"case":	209,
									"scores":	[-4.295874444461016]
								}, {
									"case":	210,
									"scores":	[-4.295874444461016]
								}, {
									"case":	211,
									"scores":	[-4.295874444461016]
								}, {
									"case":	212,
									"scores":	[-4.295874444461016]
								}, {
									"case":	213,
									"scores":	[-4.295874444461016]
								}, {
									"case":	214,
									"scores":	[-4.295874444461016]
								}, {
									"case":	215,
									"scores":	[-4.295874444461016]
								}, {
									"case":	216,
									"scores":	[-4.295874444461016]
								}, {
									"case":	217,
									"scores":	[-4.295874444461016]
								}, {
									"case":	218,
									"scores":	[-4.295874444461016]
								}, {
									"case":	219,
									"scores":	[-4.295874444461016]
								}, {
									"case":	220,
									"scores":	[-4.295874444461016]
								}, {
									"case":	221,
									"scores":	[-4.295874444461016]
								}, {
									"case":	222,
									"scores":	[-4.295874444461016]
								}, {
									"case":	223,
									"scores":	[-4.295874444461016]
								}, {
									"case":	224,
									"scores":	[-4.295874444461016]
								}, {
									"case":	225,
									"scores":	[-4.295874444461016]
								}, {
									"case":	226,
									"scores":	[-4.295874444461016]
								}, {
									"case":	227,
									"scores":	[-4.295874444461016]
								}, {
									"case":	228,
									"scores":	[-4.295874444461016]
								}, {
									"case":	229,
									"scores":	[-4.295874444461016]
								}, {
									"case":	230,
									"scores":	[-4.295874444461016]
								}, {
									"case":	231,
									"scores":	[-4.295874444461016]
								}, {
									"case":	232,
									"scores":	[-4.295874444461016]
								}, {
									"case":	233,
									"scores":	[-4.295874444461016]
								}, {
									"case":	234,
									"scores":	[-4.295874444461016]
								}, {
									"case":	235,
									"scores":	[-4.295874444461016]
								}, {
									"case":	236,
									"scores":	[-4.295874444461016]
								}, {
									"case":	237,
									"scores":	[-4.295874444461016]
								}, {
									"case":	238,
									"scores":	[-4.295874444461016]
								}, {
									"case":	239,
									"scores":	[-4.295874444461016]
								}, {
									"case":	240,
									"scores":	[-4.295874444461016]
								}, {
									"case":	241,
									"scores":	[-4.295874444461016]
								}, {
									"case":	242,
									"scores":	[-4.295874444461016]
								}, {
									"case":	243,
									"scores":	[-4.295874444461016]
								}, {
									"case":	244,
									"scores":	[-4.295874444461016]
								}, {
									"case":	245,
									"scores":	[-4.295874444461016]
								}, {
									"case":	246,
									"scores":	[-4.295874444461016]
								}, {
									"case":	247,
									"scores":	[-4.295874444461016]
								}, {
									"case":	248,
									"scores":	[-4.295874444461016]
								}, {
									"case":	249,
									"scores":	[-4.295874444461016]
								}, {
									"case":	250,
									"scores":	[-4.295874444461016]
								}, {
									"case":	251,
									"scores":	[-4.295874444461016]
								}, {
									"case":	252,
									"scores":	[-4.295874444461016]
								}, {
									"case":	253,
									"scores":	[-4.295874444461016]
								}, {
									"case":	254,
									"scores":	[-4.295874444461016]
								}, {
									"case":	255,
									"scores":	[-4.295874444461016]
								}, {
									"case":	256,
									"scores":	[-4.295874444461016]
								}, {
									"case":	257,
									"scores":	[-4.295874444461016]
								}, {
									"case":	258,
									"scores":	[-4.295874444461016]
								}, {
									"case":	259,
									"scores":	[-4.295874444461016]
								}, {
									"case":	260,
									"scores":	[-4.295874444461016]
								}, {
									"case":	261,
									"scores":	[-4.295874444461016]
								}, {
									"case":	262,
									"scores":	[-4.295874444461016]
								}, {
									"case":	263,
									"scores":	[-4.295874444461016]
								}, {
									"case":	264,
									"scores":	[-4.295874444461016]
								}, {
									"case":	265,
									"scores":	[-4.295874444461016]
								}, {
									"case":	266,
									"scores":	[-4.295874444461016]
								}, {
									"case":	267,
									"scores":	[-4.295874444461016]
								}, {
									"case":	268,
									"scores":	[-4.295874444461016]
								}, {
									"case":	269,
									"scores":	[-4.295874444461016]
								}, {
									"case":	270,
									"scores":	[-4.295874444461016]
								}, {
									"case":	271,
									"scores":	[-4.295874444461016]
								}, {
									"case":	272,
									"scores":	[-4.295874444461016]
								}, {
									"case":	273,
									"scores":	[-4.295874444461016]
								}, {
									"case":	274,
									"scores":	[-4.295874444461016]
								}, {
									"case":	275,
									"scores":	[-4.295874444461016]
								}, {
									"case":	276,
									"scores":	[-4.295874444461016]
								}, {
									"case":	277,
									"scores":	[-4.295874444461016]
								}, {
									"case":	278,
									"scores":	[-4.295874444461016]
								}, {
									"case":	279,
									"scores":	[-4.295874444461016]
								}, {
									"case":	280,
									"scores":	[-4.295874444461016]
								}, {
									"case":	281,
									"scores":	[-4.295874444461016]
								}, {
									"case":	282,
									"scores":	[-4.295874444461016]
								}, {
									"case":	283,
									"scores":	[-4.295874444461016]
								}, {
									"case":	284,
									"scores":	[-4.295874444461016]
								}, {
									"case":	285,
									"scores":	[-4.295874444461016]
								}, {
									"case":	286,
									"scores":	[-4.295874444461016]
								}, {
									"case":	287,
									"scores":	[-4.295874444461016]
								}, {
									"case":	288,
									"scores":	[-4.295874444461016]
								}, {
									"case":	289,
									"scores":	[-4.295874444461016]
								}, {
									"case":	290,
									"scores":	[-4.295874444461016]
								}, {
									"case":	291,
									"scores":	[-4.295874444461016]
								}, {
									"case":	292,
									"scores":	[-4.295874444461016]
								}, {
									"case":	293,
									"scores":	[-4.295874444461016]
								}, {
									"case":	294,
									"scores":	[-4.295874444461016]
								}, {
									"case":	295,
									"scores":	[-4.295874444461016]
								}, {
									"case":	296,
									"scores":	[-4.295874444461016]
								}, {
									"case":	297,
									"scores":	[-4.295874444461016]
								}, {
									"case":	298,
									"scores":	[-4.295874444461016]
								}, {
									"case":	299,
									"scores":	[-4.295874444461016]
								}, {
									"case":	300,
									"scores":	[-4.295874444461016]
								}, {
									"case":	301,
									"scores":	[-4.295874444461016]
								}, {
									"case":	302,
									"scores":	[-4.295874444461016]
								}, {
									"case":	303,
									"scores":	[-4.295874444461016]
								}, {
									"case":	304,
									"scores":	[-4.295874444461016]
								}, {
									"case":	305,
									"scores":	[-4.295874444461016]
								}, {
									"case":	306,
									"scores":	[-4.295874444461016]
								}, {
									"case":	307,
									"scores":	[-4.295874444461016]
								}, {
									"case":	308,
									"scores":	[-4.295874444461016]
								}, {
									"case":	309,
									"scores":	[-4.295874444461016]
								}, {
									"case":	310,
									"scores":	[-4.295874444461016]
								}, {
									"case":	311,
									"scores":	[-4.295874444461016]
								}, {
									"case":	312,
									"scores":	[-4.295874444461016]
								}, {
									"case":	313,
									"scores":	[-4.295874444461016]
								}, {
									"case":	314,
									"scores":	[-4.295874444461016]
								}, {
									"case":	315,
									"scores":	[-4.295874444461016]
								}, {
									"case":	316,
									"scores":	[-4.295874444461016]
								}, {
									"case":	317,
									"scores":	[-4.295874444461016]
								}, {
									"case":	318,
									"scores":	[-4.295874444461016]
								}, {
									"case":	319,
									"scores":	[-4.295874444461016]
								}, {
									"case":	320,
									"scores":	[-4.295874444461016]
								}, {
									"case":	321,
									"scores":	[-4.295874444461016]
								}, {
									"case":	322,
									"scores":	[-4.295874444461016]
								}, {
									"case":	323,
									"scores":	[-4.295874444461016]
								}, {
									"case":	324,
									"scores":	[-4.295874444461016]
								}, {
									"case":	325,
									"scores":	[-4.295874444461016]
								}, {
									"case":	326,
									"scores":	[-4.295874444461016]
								}, {
									"case":	327,
									"scores":	[-4.295874444461016]
								}, {
									"case":	328,
									"scores":	[-4.295874444461016]
								}, {
									"case":	329,
									"scores":	[-4.295874444461016]
								}, {
									"case":	330,
									"scores":	[-4.295874444461016]
								}, {
									"case":	331,
									"scores":	[-4.295874444461016]
								}, {
									"case":	332,
									"scores":	[-4.295874444461016]
								}, {
									"case":	333,
									"scores":	[-4.295874444461016]
								}, {
									"case":	334,
									"scores":	[-4.295874444461016]
								}, {
									"case":	335,
									"scores":	[-4.295874444461016]
								}, {
									"case":	336,
									"scores":	[-4.295874444461016]
								}, {
									"case":	337,
									"scores":	[-4.295874444461016]
								}, {
									"case":	338,
									"scores":	[-4.295874444461016]
								}, {
									"case":	339,
									"scores":	[-4.295874444461016]
								}, {
									"case":	340,
									"scores":	[-4.295874444461016]
								}, {
									"case":	341,
									"scores":	[-4.295874444461016]
								}, {
									"case":	342,
									"scores":	[-4.295874444461016]
								}, {
									"case":	343,
									"scores":	[-4.295874444461016]
								}, {
									"case":	344,
									"scores":	[-4.295874444461016]
								}, {
									"case":	345,
									"scores":	[-4.295874444461016]
								}, {
									"case":	346,
									"scores":	[-4.295874444461016]
								}, {
									"case":	347,
									"scores":	[-4.295874444461016]
								}, {
									"case":	348,
									"scores":	[-4.295874444461016]
								}, {
									"case":	349,
									"scores":	[-4.295874444461016]
								}, {
									"case":	350,
									"scores":	[-4.295874444461016]
								}, {
									"case":	351,
									"scores":	[-4.295874444461016]
								}, {
									"case":	352,
									"scores":	[-4.295874444461016]
								}, {
									"case":	353,
									"scores":	[-4.295874444461016]
								}, {
									"case":	354,
									"scores":	[-4.295874444461016]
								}, {
									"case":	355,
									"scores":	[-4.295874444461016]
								}, {
									"case":	356,
									"scores":	[-4.295874444461016]
								}, {
									"case":	357,
									"scores":	[-4.295874444461016]
								}, {
									"case":	358,
									"scores":	[-4.295874444461016]
								}, {
									"case":	359,
									"scores":	[-4.295874444461016]
								}, {
									"case":	360,
									"scores":	[-4.295874444461016]
								}, {
									"case":	361,
									"scores":	[-4.295874444461016]
								}, {
									"case":	362,
									"scores":	[-4.295874444461016]
								}, {
									"case":	363,
									"scores":	[-4.295874444461016]
								}, {
									"case":	364,
									"scores":	[-4.295874444461016]
								}, {
									"case":	365,
									"scores":	[-4.295874444461016]
								}, {
									"case":	366,
									"scores":	[-4.295874444461016]
								}, {
									"case":	367,
									"scores":	[-4.295874444461016]
								}, {
									"case":	368,
									"scores":	[-4.295874444461016]
								}, {
									"case":	369,
									"scores":	[-4.295874444461016]
								}, {
									"case":	370,
									"scores":	[-4.295874444461016]
								}, {
									"case":	371,
									"scores":	[-4.295874444461016]
								}, {
									"case":	372,
									"scores":	[-4.295874444461016]
								}, {
									"case":	373,
									"scores":	[-4.295874444461016]
								}, {
									"case":	374,
									"scores":	[-4.295874444461016]
								}, {
									"case":	375,
									"scores":	[-4.295874444461016]
								}, {
									"case":	376,
									"scores":	[-4.295874444461016]
								}, {
									"case":	377,
									"scores":	[-4.295874444461016]
								}, {
									"case":	378,
									"scores":	[-4.295874444461016]
								}, {
									"case":	379,
									"scores":	[-4.295874444461016]
								}, {
									"case":	380,
									"scores":	[-4.295874444461016]
								}, {
									"case":	381,
									"scores":	[-4.295874444461016]
								}, {
									"case":	382,
									"scores":	[-4.295874444461016]
								}, {
									"case":	383,
									"scores":	[-4.295874444461016]
								}, {
									"case":	384,
									"scores":	[-4.295874444461016]
								}, {
									"case":	385,
									"scores":	[-4.295874444461016]
								}, {
									"case":	386,
									"scores":	[-4.295874444461016]
								}, {
									"case":	387,
									"scores":	[-4.295874444461016]
								}, {
									"case":	388,
									"scores":	[-4.295874444461016]
								}, {
									"case":	389,
									"scores":	[-4.295874444461016]
								}, {
									"case":	390,
									"scores":	[-4.295874444461016]
								}, {
									"case":	391,
									"scores":	[-4.295874444461016]
								}, {
									"case":	392,
									"scores":	[-4.295874444461016]
								}, {
									"case":	393,
									"scores":	[-4.295874444461016]
								}, {
									"case":	394,
									"scores":	[-4.295874444461016]
								}, {
									"case":	395,
									"scores":	[-4.295874444461016]
								}, {
									"case":	396,
									"scores":	[-4.295874444461016]
								}, {
									"case":	397,
									"scores":	[-4.295874444461016]
								}, {
									"case":	398,
									"scores":	[-4.295874444461016]
								}, {
									"case":	399,
									"scores":	[-4.295874444461016]
								}, {
									"case":	400,
									"scores":	[-4.295874444461016]
								}, {
									"case":	401,
									"scores":	[-4.295874444461016]
								}, {
									"case":	402,
									"scores":	[-4.295874444461016]
								}, {
									"case":	403,
									"scores":	[-4.295874444461016]
								}, {
									"case":	404,
									"scores":	[-4.295874444461016]
								}, {
									"case":	405,
									"scores":	[-4.295874444461016]
								}, {
									"case":	406,
									"scores":	[-4.295874444461016]
								}, {
									"case":	407,
									"scores":	[-4.295874444461016]
								}, {
									"case":	408,
									"scores":	[-4.295874444461016]
								}, {
									"case":	409,
									"scores":	[-4.295874444461016]
								}, {
									"case":	410,
									"scores":	[-4.295874444461016]
								}, {
									"case":	411,
									"scores":	[-4.295874444461016]
								}, {
									"case":	412,
									"scores":	[-4.295874444461016]
								}, {
									"case":	413,
									"scores":	[-4.295874444461016]
								}, {
									"case":	414,
									"scores":	[-4.295874444461016]
								}, {
									"case":	415,
									"scores":	[-4.295874444461016]
								}, {
									"case":	416,
									"scores":	[-4.295874444461016]
								}, {
									"case":	417,
									"scores":	[-4.295874444461016]
								}, {
									"case":	418,
									"scores":	[-4.295874444461016]
								}, {
									"case":	419,
									"scores":	[-4.295874444461016]
								}, {
									"case":	420,
									"scores":	[-4.295874444461016]
								}, {
									"case":	421,
									"scores":	[-4.295874444461016]
								}, {
									"case":	422,
									"scores":	[-4.295874444461016]
								}, {
									"case":	423,
									"scores":	[-4.295874444461016]
								}, {
									"case":	424,
									"scores":	[-4.295874444461016]
								}, {
									"case":	425,
									"scores":	[-4.295874444461016]
								}, {
									"case":	426,
									"scores":	[-4.295874444461016]
								}, {
									"case":	427,
									"scores":	[-4.295874444461016]
								}, {
									"case":	428,
									"scores":	[-4.295874444461016]
								}, {
									"case":	429,
									"scores":	[-4.295874444461016]
								}, {
									"case":	430,
									"scores":	[-4.295874444461016]
								}, {
									"case":	431,
									"scores":	[-4.295874444461016]
								}, {
									"case":	432,
									"scores":	[-4.295874444461016]
								}, {
									"case":	433,
									"scores":	[-4.295874444461016]
								}, {
									"case":	434,
									"scores":	[-4.295874444461016]
								}, {
									"case":	435,
									"scores":	[-4.295874444461016]
								}, {
									"case":	436,
									"scores":	[-4.295874444461016]
								}, {
									"case":	437,
									"scores":	[-4.295874444461016]
								}, {
									"case":	438,
									"scores":	[-4.295874444461016]
								}, {
									"case":	439,
									"scores":	[-4.295874444461016]
								}, {
									"case":	440,
									"scores":	[-4.295874444461016]
								}, {
									"case":	441,
									"scores":	[-4.295874444461016]
								}, {
									"case":	442,
									"scores":	[-4.295874444461016]
								}, {
									"case":	443,
									"scores":	[-4.295874444461016]
								}, {
									"case":	444,
									"scores":	[-4.295874444461016]
								}, {
									"case":	445,
									"scores":	[-4.295874444461016]
								}, {
									"case":	446,
									"scores":	[-4.295874444461016]
								}, {
									"case":	447,
									"scores":	[-4.295874444461016]
								}, {
									"case":	448,
									"scores":	[-4.295874444461016]
								}, {
									"case":	449,
									"scores":	[-4.295874444461016]
								}, {
									"case":	450,
									"scores":	[-4.295874444461016]
								}, {
									"case":	451,
									"scores":	[-4.295874444461016]
								}, {
									"case":	452,
									"scores":	[-4.295874444461016]
								}, {
									"case":	453,
									"scores":	[-4.295874444461016]
								}, {
									"case":	454,
									"scores":	[-4.295874444461016]
								}, {
									"case":	455,
									"scores":	[-4.295874444461016]
								}, {
									"case":	456,
									"scores":	[-4.295874444461016]
								}, {
									"case":	457,
									"scores":	[-4.295874444461016]
								}, {
									"case":	458,
									"scores":	[-4.295874444461016]
								}, {
									"case":	459,
									"scores":	[-4.295874444461016]
								}, {
									"case":	460,
									"scores":	[-4.295874444461016]
								}, {
									"case":	461,
									"scores":	[-4.295874444461016]
								}, {
									"case":	462,
									"scores":	[-4.295874444461016]
								}, {
									"case":	463,
									"scores":	[-4.295874444461016]
								}, {
									"case":	464,
									"scores":	[-4.295874444461016]
								}, {
									"case":	465,
									"scores":	[-4.295874444461016]
								}, {
									"case":	466,
									"scores":	[-4.295874444461016]
								}, {
									"case":	467,
									"scores":	[-4.295874444461016]
								}, {
									"case":	468,
									"scores":	[-4.295874444461016]
								}, {
									"case":	469,
									"scores":	[-4.295874444461016]
								}, {
									"case":	470,
									"scores":	[-4.295874444461016]
								}, {
									"case":	471,
									"scores":	[-4.295874444461016]
								}, {
									"case":	472,
									"scores":	[-4.295874444461016]
								}, {
									"case":	473,
									"scores":	[-4.295874444461016]
								}, {
									"case":	474,
									"scores":	[-4.295874444461016]
								}, {
									"case":	475,
									"scores":	[-4.295874444461016]
								}, {
									"case":	476,
									"scores":	[-4.295874444461016]
								}, {
									"case":	477,
									"scores":	[-4.295874444461016]
								}, {
									"case":	478,
									"scores":	[-4.295874444461016]
								}, {
									"case":	479,
									"scores":	[-4.295874444461016]
								}, {
									"case":	480,
									"scores":	[-4.295874444461016]
								}, {
									"case":	481,
									"scores":	[-4.295874444461016]
								}, {
									"case":	482,
									"scores":	[-4.295874444461016]
								}, {
									"case":	483,
									"scores":	[-4.295874444461016]
								}, {
									"case":	484,
									"scores":	[-4.295874444461016]
								}, {
									"case":	485,
									"scores":	[-4.295874444461016]
								}, {
									"case":	486,
									"scores":	[-4.295874444461016]
								}, {
									"case":	487,
									"scores":	[-4.295874444461016]
								}, {
									"case":	488,
									"scores":	[-4.295874444461016]
								}, {
									"case":	489,
									"scores":	[-4.295874444461016]
								}, {
									"case":	490,
									"scores":	[-4.295874444461016]
								}, {
									"case":	491,
									"scores":	[-4.295874444461016]
								}, {
									"case":	492,
									"scores":	[-4.295874444461016]
								}, {
									"case":	493,
									"scores":	[-4.295874444461016]
								}, {
									"case":	494,
									"scores":	[-4.295874444461016]
								}, {
									"case":	495,
									"scores":	[-4.295874444461016]
								}, {
									"case":	496,
									"scores":	[-4.295874444461016]
								}, {
									"case":	497,
									"scores":	[-4.295874444461016]
								}, {
									"case":	498,
									"scores":	[-4.295874444461016]
								}, {
									"case":	499,
									"scores":	[-4.295874444461016]
								}, {
									"case":	500,
									"scores":	[-4.295874444461016]
								}, {
									"case":	501,
									"scores":	[-4.295874444461016]
								}, {
									"case":	502,
									"scores":	[-4.295874444461016]
								}, {
									"case":	503,
									"scores":	[-4.295874444461016]
								}, {
									"case":	504,
									"scores":	[-4.295874444461016]
								}, {
									"case":	505,
									"scores":	[-4.295874444461016]
								}, {
									"case":	506,
									"scores":	[-4.295874444461016]
								}, {
									"case":	507,
									"scores":	[-4.295874444461016]
								}, {
									"case":	508,
									"scores":	[-4.295874444461016]
								}, {
									"case":	509,
									"scores":	[-4.295874444461016]
								}, {
									"case":	510,
									"scores":	[-4.295874444461016]
								}, {
									"case":	511,
									"scores":	[-4.295874444461016]
								}, {
									"case":	512,
									"scores":	[-4.295874444461016]
								}, {
									"case":	513,
									"scores":	[-4.295874444461016]
								}, {
									"case":	514,
									"scores":	[-4.295874444461016]
								}, {
									"case":	515,
									"scores":	[-4.295874444461016]
								}, {
									"case":	516,
									"scores":	[-4.295874444461016]
								}, {
									"case":	517,
									"scores":	[-4.295874444461016]
								}, {
									"case":	518,
									"scores":	[-4.295874444461016]
								}, {
									"case":	519,
									"scores":	[-4.295874444461016]
								}, {
									"case":	520,
									"scores":	[-4.295874444461016]
								}, {
									"case":	521,
									"scores":	[-4.295874444461016]
								}, {
									"case":	522,
									"scores":	[-4.295874444461016]
								}, {
									"case":	523,
									"scores":	[-4.295874444461016]
								}, {
									"case":	524,
									"scores":	[-4.295874444461016]
								}, {
									"case":	525,
									"scores":	[-4.295874444461016]
								}, {
									"case":	526,
									"scores":	[-4.295874444461016]
								}, {
									"case":	527,
									"scores":	[-4.295874444461016]
								}, {
									"case":	528,
									"scores":	[-4.295874444461016]
								}, {
									"case":	529,
									"scores":	[-4.295874444461016]
								}, {
									"case":	530,
									"scores":	[-4.295874444461016]
								}, {
									"case":	531,
									"scores":	[-4.295874444461016]
								}, {
									"case":	532,
									"scores":	[-4.295874444461016]
								}, {
									"case":	533,
									"scores":	[-4.295874444461016]
								}, {
									"case":	534,
									"scores":	[-4.295874444461016]
								}, {
									"case":	535,
									"scores":	[-4.295874444461016]
								}, {
									"case":	536,
									"scores":	[-4.295874444461016]
								}, {
									"case":	537,
									"scores":	[-4.295874444461016]
								}, {
									"case":	538,
									"scores":	[-4.295874444461016]
								}, {
									"case":	539,
									"scores":	[-4.295874444461016]
								}, {
									"case":	540,
									"scores":	[-4.295874444461016]
								}, {
									"case":	541,
									"scores":	[-4.295874444461016]
								}, {
									"case":	542,
									"scores":	[-4.295874444461016]
								}, {
									"case":	543,
									"scores":	[-4.295874444461016]
								}, {
									"case":	544,
									"scores":	[-4.295874444461016]
								}, {
									"case":	545,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	546,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	547,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	548,
									"scores":	[-2.5188391544610162, -5.5996704475610155, -5.0348993515610161, -5.5996704475610155, -5.0348993515610161, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.2414320475610161, -6.2414320475610161, -6.152009347561016, -6.152009347561016, -6.152009347561016, -5.6590547444610166, -5.6590547444610166, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.152009347561016, -6.152009347561016, -5.8363175844610158, -6.152009347561016, -6.152009347561016]
								}, {
									"case":	549,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	550,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	551,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	552,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	553,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	554,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	555,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	556,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}, {
									"case":	557,
									"scores":	[-4.7816209544610162, -7.8624522475610163, -7.2976811515610169, -7.8624522475610163, -7.2976811515610169, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.5042138475610152, -8.5042138475610152, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -7.9218365444610166, -7.9218365444610166, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.4147911475610151, -8.0990993844610166, -8.4147911475610151, -8.4147911475610151]
								}]
						}, {
							"switch":	84,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1252,
							"begin_column":	9,
							"end_line":	1252,
							"end_column":	27,
							"patch_codes":	["if (!__is_neg(\"\", \"L1252\", 28, &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet)))\n    magic[1] = (char)imagic1;\n", "{\n}\n", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "magic[1] = (char)imagic1"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.6175905644610156, -4.3725100444610163, -4.7317250444610162, -4.3725100444610163, -4.7317250444610162, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.7024077444610164, -5.7024077444610164, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -4.784087444461016, -4.784087444461016, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.2654427444610157, -5.0488689444610158, -5.2654427444610157, -5.2654427444610157]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}]
						}]
				}, {
					"line":	1248,
					"switches":	[{
							"switch":	77,
							"types":	[[], [], [], [], [], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1249,
							"begin_column":	3,
							"end_line":	1249,
							"end_column":	3,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\""],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-20206.4193405249]
								}, {
									"case":	2,
									"scores":	[-20206.4193405249]
								}, {
									"case":	3,
									"scores":	[-20206.4193405249]
								}, {
									"case":	4,
									"scores":	[-20206.4193405249]
								}, {
									"case":	5,
									"scores":	[-20206.4193405249]
								}, {
									"case":	6,
									"scores":	[-20206.4193405249]
								}, {
									"case":	7,
									"scores":	[-20206.4193405249]
								}, {
									"case":	8,
									"scores":	[-20206.4193405249]
								}, {
									"case":	9,
									"scores":	[-20206.4193405249]
								}, {
									"case":	10,
									"scores":	[-20206.4193405249]
								}, {
									"case":	11,
									"scores":	[-20206.4193405249]
								}, {
									"case":	12,
									"scores":	[-20206.4193405249]
								}, {
									"case":	13,
									"scores":	[-20206.4193405249]
								}, {
									"case":	14,
									"scores":	[-20206.4193405249]
								}, {
									"case":	15,
									"scores":	[-20206.4193405249]
								}, {
									"case":	16,
									"scores":	[-20206.4193405249]
								}, {
									"case":	17,
									"scores":	[-20206.4193405249]
								}, {
									"case":	18,
									"scores":	[-20206.4193405249]
								}, {
									"case":	19,
									"scores":	[-20206.4193405249]
								}, {
									"case":	20,
									"scores":	[-20206.4193405249]
								}, {
									"case":	21,
									"scores":	[-20206.4193405249]
								}, {
									"case":	22,
									"scores":	[-20206.4193405249]
								}, {
									"case":	23,
									"scores":	[-20206.4193405249]
								}, {
									"case":	24,
									"scores":	[-20206.4193405249]
								}, {
									"case":	25,
									"scores":	[-20206.4193405249]
								}, {
									"case":	26,
									"scores":	[-20206.4193405249]
								}, {
									"case":	27,
									"scores":	[-20206.4193405249]
								}, {
									"case":	28,
									"scores":	[-20206.4193405249]
								}, {
									"case":	29,
									"scores":	[-20206.4193405249]
								}, {
									"case":	30,
									"scores":	[-20206.4193405249]
								}, {
									"case":	31,
									"scores":	[-20206.4193405249]
								}, {
									"case":	32,
									"scores":	[-20206.4193405249]
								}, {
									"case":	33,
									"scores":	[-20206.4193405249]
								}, {
									"case":	34,
									"scores":	[-20206.4193405249]
								}, {
									"case":	35,
									"scores":	[-20206.4193405249]
								}, {
									"case":	36,
									"scores":	[-20206.4193405249]
								}, {
									"case":	37,
									"scores":	[-20206.4193405249]
								}, {
									"case":	38,
									"scores":	[-20206.4193405249]
								}, {
									"case":	39,
									"scores":	[-20206.4193405249]
								}, {
									"case":	40,
									"scores":	[-20206.4193405249]
								}, {
									"case":	41,
									"scores":	[-20206.4193405249]
								}, {
									"case":	42,
									"scores":	[-20206.4193405249]
								}, {
									"case":	43,
									"scores":	[-20206.4193405249]
								}, {
									"case":	44,
									"scores":	[-20206.4193405249]
								}, {
									"case":	45,
									"scores":	[-20206.4193405249]
								}, {
									"case":	46,
									"scores":	[-20206.4193405249]
								}, {
									"case":	47,
									"scores":	[-20206.4193405249]
								}, {
									"case":	48,
									"scores":	[-20206.4193405249]
								}, {
									"case":	49,
									"scores":	[-20206.4193405249]
								}, {
									"case":	50,
									"scores":	[-20206.4193405249]
								}, {
									"case":	51,
									"scores":	[-20206.4193405249]
								}, {
									"case":	52,
									"scores":	[-20206.4193405249]
								}, {
									"case":	53,
									"scores":	[-20206.4193405249]
								}, {
									"case":	54,
									"scores":	[-20206.4193405249]
								}, {
									"case":	55,
									"scores":	[-20206.4193405249]
								}, {
									"case":	56,
									"scores":	[-20206.4193405249]
								}, {
									"case":	57,
									"scores":	[-20206.4193405249]
								}, {
									"case":	58,
									"scores":	[-20206.4193405249]
								}, {
									"case":	59,
									"scores":	[-20206.4193405249]
								}, {
									"case":	60,
									"scores":	[-20206.4193405249]
								}, {
									"case":	61,
									"scores":	[-20206.4193405249]
								}, {
									"case":	62,
									"scores":	[-20206.4193405249]
								}, {
									"case":	63,
									"scores":	[-20206.4193405249]
								}, {
									"case":	64,
									"scores":	[-20206.4193405249]
								}, {
									"case":	65,
									"scores":	[-20206.4193405249]
								}, {
									"case":	66,
									"scores":	[-20206.4193405249]
								}, {
									"case":	67,
									"scores":	[-20206.4193405249]
								}, {
									"case":	68,
									"scores":	[-20206.4193405249]
								}, {
									"case":	69,
									"scores":	[-20206.4193405249]
								}, {
									"case":	70,
									"scores":	[-20206.4193405249]
								}, {
									"case":	71,
									"scores":	[-20206.4193405249]
								}, {
									"case":	72,
									"scores":	[-20206.4193405249]
								}, {
									"case":	73,
									"scores":	[-20206.4193405249]
								}, {
									"case":	74,
									"scores":	[-20206.4193405249]
								}, {
									"case":	75,
									"scores":	[-20206.4193405249]
								}, {
									"case":	76,
									"scores":	[-20206.4193405249]
								}, {
									"case":	77,
									"scores":	[-20206.4193405249]
								}, {
									"case":	78,
									"scores":	[-20206.4193405249]
								}, {
									"case":	79,
									"scores":	[-20206.4193405249]
								}, {
									"case":	80,
									"scores":	[-20206.4193405249]
								}, {
									"case":	81,
									"scores":	[-20206.4193405249]
								}, {
									"case":	82,
									"scores":	[-20206.4193405249]
								}, {
									"case":	83,
									"scores":	[-20206.4193405249]
								}, {
									"case":	84,
									"scores":	[-20206.4193405249]
								}, {
									"case":	85,
									"scores":	[-20206.4193405249]
								}, {
									"case":	86,
									"scores":	[-20206.4193405249]
								}, {
									"case":	87,
									"scores":	[-20206.4193405249]
								}, {
									"case":	88,
									"scores":	[-20206.4193405249]
								}, {
									"case":	89,
									"scores":	[-20206.4193405249]
								}, {
									"case":	90,
									"scores":	[-20206.4193405249]
								}, {
									"case":	91,
									"scores":	[-20206.4193405249]
								}, {
									"case":	92,
									"scores":	[-20206.4193405249]
								}, {
									"case":	93,
									"scores":	[-20206.4193405249]
								}, {
									"case":	94,
									"scores":	[-20206.4193405249]
								}, {
									"case":	95,
									"scores":	[-20206.4193405249]
								}, {
									"case":	96,
									"scores":	[-20206.4193405249]
								}, {
									"case":	97,
									"scores":	[-20206.4193405249]
								}, {
									"case":	98,
									"scores":	[-20206.4193405249]
								}, {
									"case":	99,
									"scores":	[-20206.4193405249]
								}, {
									"case":	100,
									"scores":	[-20206.4193405249]
								}, {
									"case":	101,
									"scores":	[-20206.4193405249]
								}, {
									"case":	102,
									"scores":	[-20206.4193405249]
								}, {
									"case":	103,
									"scores":	[-20206.4193405249]
								}, {
									"case":	104,
									"scores":	[-20206.4193405249]
								}, {
									"case":	105,
									"scores":	[-20206.4193405249]
								}, {
									"case":	106,
									"scores":	[-20206.4193405249]
								}, {
									"case":	107,
									"scores":	[-20206.4193405249]
								}, {
									"case":	108,
									"scores":	[-20206.4193405249]
								}, {
									"case":	109,
									"scores":	[-20206.4193405249]
								}, {
									"case":	110,
									"scores":	[-20206.4193405249]
								}, {
									"case":	111,
									"scores":	[-20206.4193405249]
								}, {
									"case":	112,
									"scores":	[-20206.4193405249]
								}, {
									"case":	113,
									"scores":	[-20206.4193405249]
								}, {
									"case":	114,
									"scores":	[-20206.4193405249]
								}, {
									"case":	115,
									"scores":	[-20206.4193405249]
								}, {
									"case":	116,
									"scores":	[-20206.4193405249]
								}, {
									"case":	117,
									"scores":	[-20206.4193405249]
								}, {
									"case":	118,
									"scores":	[-20206.4193405249]
								}, {
									"case":	119,
									"scores":	[-20206.4193405249]
								}, {
									"case":	120,
									"scores":	[-20206.4193405249]
								}, {
									"case":	121,
									"scores":	[-20206.4193405249]
								}, {
									"case":	122,
									"scores":	[-20206.4193405249]
								}, {
									"case":	123,
									"scores":	[-20206.4193405249]
								}, {
									"case":	124,
									"scores":	[-20206.4193405249]
								}, {
									"case":	125,
									"scores":	[-20206.4193405249]
								}, {
									"case":	126,
									"scores":	[-20206.4193405249]
								}, {
									"case":	127,
									"scores":	[-20206.4193405249]
								}, {
									"case":	128,
									"scores":	[-20206.4193405249]
								}, {
									"case":	129,
									"scores":	[-20206.4193405249]
								}, {
									"case":	130,
									"scores":	[-20206.4193405249]
								}, {
									"case":	131,
									"scores":	[-20206.4193405249]
								}, {
									"case":	132,
									"scores":	[-20206.4193405249]
								}, {
									"case":	133,
									"scores":	[-20206.4193405249]
								}, {
									"case":	134,
									"scores":	[-20206.4193405249]
								}, {
									"case":	135,
									"scores":	[-20206.4193405249]
								}, {
									"case":	136,
									"scores":	[-20206.4193405249]
								}, {
									"case":	137,
									"scores":	[-20206.4193405249]
								}, {
									"case":	138,
									"scores":	[-20206.4193405249]
								}, {
									"case":	139,
									"scores":	[-20206.4193405249]
								}, {
									"case":	140,
									"scores":	[-20206.4193405249]
								}, {
									"case":	141,
									"scores":	[-20206.4193405249]
								}, {
									"case":	142,
									"scores":	[-20206.4193405249]
								}, {
									"case":	143,
									"scores":	[-20206.4193405249]
								}, {
									"case":	144,
									"scores":	[-20206.4193405249]
								}, {
									"case":	145,
									"scores":	[-20206.4193405249]
								}, {
									"case":	146,
									"scores":	[-20206.4193405249]
								}, {
									"case":	147,
									"scores":	[-20206.4193405249]
								}, {
									"case":	148,
									"scores":	[-20206.4193405249]
								}, {
									"case":	149,
									"scores":	[-20206.4193405249]
								}, {
									"case":	150,
									"scores":	[-20206.4193405249]
								}, {
									"case":	151,
									"scores":	[-20206.4193405249]
								}, {
									"case":	152,
									"scores":	[-20206.4193405249]
								}, {
									"case":	153,
									"scores":	[-20206.4193405249]
								}, {
									"case":	154,
									"scores":	[-20206.4193405249]
								}, {
									"case":	155,
									"scores":	[-20206.4193405249]
								}, {
									"case":	156,
									"scores":	[-20206.4193405249]
								}, {
									"case":	157,
									"scores":	[-20206.4193405249]
								}, {
									"case":	158,
									"scores":	[-20206.4193405249]
								}, {
									"case":	159,
									"scores":	[-20206.4193405249]
								}, {
									"case":	160,
									"scores":	[-20206.4193405249]
								}, {
									"case":	161,
									"scores":	[-20206.4193405249]
								}, {
									"case":	162,
									"scores":	[-20206.4193405249]
								}, {
									"case":	163,
									"scores":	[-20206.4193405249]
								}, {
									"case":	164,
									"scores":	[-20206.4193405249]
								}, {
									"case":	165,
									"scores":	[-20206.4193405249]
								}, {
									"case":	166,
									"scores":	[-20206.4193405249]
								}, {
									"case":	167,
									"scores":	[-20206.4193405249]
								}, {
									"case":	168,
									"scores":	[-20206.4193405249]
								}, {
									"case":	169,
									"scores":	[-20206.4193405249]
								}, {
									"case":	170,
									"scores":	[-20206.4193405249]
								}, {
									"case":	171,
									"scores":	[-20206.4193405249]
								}, {
									"case":	172,
									"scores":	[-20206.4193405249]
								}, {
									"case":	173,
									"scores":	[-20206.4193405249]
								}, {
									"case":	174,
									"scores":	[-20206.4193405249]
								}, {
									"case":	175,
									"scores":	[-20206.4193405249]
								}, {
									"case":	176,
									"scores":	[-20206.4193405249]
								}, {
									"case":	177,
									"scores":	[-20206.4193405249]
								}, {
									"case":	178,
									"scores":	[-20206.4193405249]
								}, {
									"case":	179,
									"scores":	[-20206.4193405249]
								}, {
									"case":	180,
									"scores":	[-20206.4193405249]
								}, {
									"case":	181,
									"scores":	[-20206.4193405249]
								}, {
									"case":	182,
									"scores":	[-20206.4193405249]
								}, {
									"case":	183,
									"scores":	[-20206.4193405249]
								}, {
									"case":	184,
									"scores":	[-20206.4193405249]
								}, {
									"case":	185,
									"scores":	[-20206.4193405249]
								}, {
									"case":	186,
									"scores":	[-20206.4193405249]
								}, {
									"case":	187,
									"scores":	[-20206.4193405249]
								}, {
									"case":	188,
									"scores":	[-20206.4193405249]
								}, {
									"case":	189,
									"scores":	[-20206.4193405249]
								}, {
									"case":	190,
									"scores":	[-20206.4193405249]
								}, {
									"case":	191,
									"scores":	[-20206.4193405249]
								}, {
									"case":	192,
									"scores":	[-20206.4193405249]
								}, {
									"case":	193,
									"scores":	[-20206.4193405249]
								}, {
									"case":	194,
									"scores":	[-20206.4193405249]
								}, {
									"case":	195,
									"scores":	[-20206.4193405249]
								}, {
									"case":	196,
									"scores":	[-20206.4193405249]
								}, {
									"case":	197,
									"scores":	[-20206.4193405249]
								}, {
									"case":	198,
									"scores":	[-20206.4193405249]
								}, {
									"case":	199,
									"scores":	[-20206.4193405249]
								}, {
									"case":	200,
									"scores":	[-20206.4193405249]
								}, {
									"case":	201,
									"scores":	[-20206.4193405249]
								}, {
									"case":	202,
									"scores":	[-20206.4193405249]
								}, {
									"case":	203,
									"scores":	[-20206.4193405249]
								}, {
									"case":	204,
									"scores":	[-20206.4193405249]
								}, {
									"case":	205,
									"scores":	[-20206.4193405249]
								}, {
									"case":	206,
									"scores":	[-20206.4193405249]
								}, {
									"case":	207,
									"scores":	[-20206.4193405249]
								}, {
									"case":	208,
									"scores":	[-20206.4193405249]
								}, {
									"case":	209,
									"scores":	[-20206.4193405249]
								}, {
									"case":	210,
									"scores":	[-20206.4193405249]
								}, {
									"case":	211,
									"scores":	[-20206.4193405249]
								}, {
									"case":	212,
									"scores":	[-20206.4193405249]
								}, {
									"case":	213,
									"scores":	[-20206.4193405249]
								}, {
									"case":	214,
									"scores":	[-20206.4193405249]
								}, {
									"case":	215,
									"scores":	[-20206.4193405249]
								}, {
									"case":	216,
									"scores":	[-20206.4193405249]
								}, {
									"case":	217,
									"scores":	[-20206.4193405249]
								}, {
									"case":	218,
									"scores":	[-20206.4193405249]
								}, {
									"case":	219,
									"scores":	[-20206.4193405249]
								}, {
									"case":	220,
									"scores":	[-20206.4193405249]
								}, {
									"case":	221,
									"scores":	[-20206.4193405249]
								}, {
									"case":	222,
									"scores":	[-20206.4193405249]
								}, {
									"case":	223,
									"scores":	[-20206.4193405249]
								}, {
									"case":	224,
									"scores":	[-20206.4193405249]
								}, {
									"case":	225,
									"scores":	[-20206.4193405249]
								}, {
									"case":	226,
									"scores":	[-20206.4193405249]
								}, {
									"case":	227,
									"scores":	[-20206.4193405249]
								}, {
									"case":	228,
									"scores":	[-20206.4193405249]
								}, {
									"case":	229,
									"scores":	[-20206.4193405249]
								}, {
									"case":	230,
									"scores":	[-20206.4193405249]
								}, {
									"case":	231,
									"scores":	[-20206.4193405249]
								}, {
									"case":	232,
									"scores":	[-20206.4193405249]
								}, {
									"case":	233,
									"scores":	[-20206.4193405249]
								}, {
									"case":	234,
									"scores":	[-20206.4193405249]
								}, {
									"case":	235,
									"scores":	[-20206.4193405249]
								}, {
									"case":	236,
									"scores":	[-20206.4193405249]
								}, {
									"case":	237,
									"scores":	[-20206.4193405249]
								}, {
									"case":	238,
									"scores":	[-20206.4193405249]
								}, {
									"case":	239,
									"scores":	[-20206.4193405249]
								}, {
									"case":	240,
									"scores":	[-20206.4193405249]
								}, {
									"case":	241,
									"scores":	[-20206.4193405249]
								}, {
									"case":	242,
									"scores":	[-20206.4193405249]
								}, {
									"case":	243,
									"scores":	[-20206.4193405249]
								}, {
									"case":	244,
									"scores":	[-20206.4193405249]
								}, {
									"case":	245,
									"scores":	[-20206.4193405249]
								}, {
									"case":	246,
									"scores":	[-20206.4193405249]
								}, {
									"case":	247,
									"scores":	[-20206.4193405249]
								}, {
									"case":	248,
									"scores":	[-20206.4193405249]
								}, {
									"case":	249,
									"scores":	[-20206.4193405249]
								}, {
									"case":	250,
									"scores":	[-20206.4193405249]
								}, {
									"case":	251,
									"scores":	[-20206.4193405249]
								}, {
									"case":	252,
									"scores":	[-20206.4193405249]
								}, {
									"case":	253,
									"scores":	[-20206.4193405249]
								}, {
									"case":	254,
									"scores":	[-20206.4193405249]
								}, {
									"case":	255,
									"scores":	[-20206.4193405249]
								}, {
									"case":	256,
									"scores":	[-20206.4193405249]
								}, {
									"case":	257,
									"scores":	[-20206.4193405249]
								}, {
									"case":	258,
									"scores":	[-20206.4193405249]
								}, {
									"case":	259,
									"scores":	[-20206.4193405249]
								}, {
									"case":	260,
									"scores":	[-20206.4193405249]
								}, {
									"case":	261,
									"scores":	[-20206.4193405249]
								}, {
									"case":	262,
									"scores":	[-20206.4193405249]
								}, {
									"case":	263,
									"scores":	[-20206.4193405249]
								}, {
									"case":	264,
									"scores":	[-20206.4193405249]
								}, {
									"case":	265,
									"scores":	[-20206.4193405249]
								}, {
									"case":	266,
									"scores":	[-20206.4193405249]
								}, {
									"case":	267,
									"scores":	[-20206.4193405249]
								}, {
									"case":	268,
									"scores":	[-20206.4193405249]
								}, {
									"case":	269,
									"scores":	[-20206.4193405249]
								}, {
									"case":	270,
									"scores":	[-20206.4193405249]
								}, {
									"case":	271,
									"scores":	[-20206.4193405249]
								}, {
									"case":	272,
									"scores":	[-20206.4193405249]
								}, {
									"case":	273,
									"scores":	[-20206.4193405249]
								}, {
									"case":	274,
									"scores":	[-20206.4193405249]
								}, {
									"case":	275,
									"scores":	[-20206.4193405249]
								}, {
									"case":	276,
									"scores":	[-20206.4193405249]
								}, {
									"case":	277,
									"scores":	[-20206.4193405249]
								}, {
									"case":	278,
									"scores":	[-20206.4193405249]
								}, {
									"case":	279,
									"scores":	[-20206.4193405249]
								}, {
									"case":	280,
									"scores":	[-20206.4193405249]
								}, {
									"case":	281,
									"scores":	[-20206.4193405249]
								}, {
									"case":	282,
									"scores":	[-20206.4193405249]
								}, {
									"case":	283,
									"scores":	[-20206.4193405249]
								}, {
									"case":	284,
									"scores":	[-20206.4193405249]
								}, {
									"case":	285,
									"scores":	[-20206.4193405249]
								}, {
									"case":	286,
									"scores":	[-20206.4193405249]
								}, {
									"case":	287,
									"scores":	[-20206.4193405249]
								}, {
									"case":	288,
									"scores":	[-20206.4193405249]
								}, {
									"case":	289,
									"scores":	[-20206.4193405249]
								}, {
									"case":	290,
									"scores":	[-20206.4193405249]
								}, {
									"case":	291,
									"scores":	[-20206.4193405249]
								}, {
									"case":	292,
									"scores":	[-20206.4193405249]
								}, {
									"case":	293,
									"scores":	[-20206.4193405249]
								}, {
									"case":	294,
									"scores":	[-20206.4193405249]
								}, {
									"case":	295,
									"scores":	[-20206.4193405249]
								}, {
									"case":	296,
									"scores":	[-20206.4193405249]
								}, {
									"case":	297,
									"scores":	[-20206.4193405249]
								}, {
									"case":	298,
									"scores":	[-20206.4193405249]
								}, {
									"case":	299,
									"scores":	[-20206.4193405249]
								}, {
									"case":	300,
									"scores":	[-20206.4193405249]
								}, {
									"case":	301,
									"scores":	[-20206.4193405249]
								}, {
									"case":	302,
									"scores":	[-20206.4193405249]
								}, {
									"case":	303,
									"scores":	[-20206.4193405249]
								}, {
									"case":	304,
									"scores":	[-20206.4193405249]
								}, {
									"case":	305,
									"scores":	[-20206.4193405249]
								}, {
									"case":	306,
									"scores":	[-20206.4193405249]
								}, {
									"case":	307,
									"scores":	[-20206.4193405249]
								}, {
									"case":	308,
									"scores":	[-20206.4193405249]
								}, {
									"case":	309,
									"scores":	[-20206.4193405249]
								}, {
									"case":	310,
									"scores":	[-20206.4193405249]
								}, {
									"case":	311,
									"scores":	[-20206.4193405249]
								}, {
									"case":	312,
									"scores":	[-20206.4193405249]
								}, {
									"case":	313,
									"scores":	[-20206.4193405249]
								}, {
									"case":	314,
									"scores":	[-20206.4193405249]
								}, {
									"case":	315,
									"scores":	[-20206.4193405249]
								}, {
									"case":	316,
									"scores":	[-20206.4193405249]
								}, {
									"case":	317,
									"scores":	[-20206.4193405249]
								}, {
									"case":	318,
									"scores":	[-20206.4193405249]
								}, {
									"case":	319,
									"scores":	[-20206.4193405249]
								}, {
									"case":	320,
									"scores":	[-20206.4193405249]
								}, {
									"case":	321,
									"scores":	[-20206.4193405249]
								}, {
									"case":	322,
									"scores":	[-20206.4193405249]
								}, {
									"case":	323,
									"scores":	[-20206.4193405249]
								}, {
									"case":	324,
									"scores":	[-20206.4193405249]
								}, {
									"case":	325,
									"scores":	[-20206.4193405249]
								}, {
									"case":	326,
									"scores":	[-20206.4193405249]
								}, {
									"case":	327,
									"scores":	[-20206.4193405249]
								}, {
									"case":	328,
									"scores":	[-20206.4193405249]
								}, {
									"case":	329,
									"scores":	[-20206.4193405249]
								}, {
									"case":	330,
									"scores":	[-20206.4193405249]
								}, {
									"case":	331,
									"scores":	[-20206.4193405249]
								}, {
									"case":	332,
									"scores":	[-20206.4193405249]
								}, {
									"case":	333,
									"scores":	[-20206.4193405249]
								}, {
									"case":	334,
									"scores":	[-20206.4193405249]
								}, {
									"case":	335,
									"scores":	[-20206.4193405249]
								}, {
									"case":	336,
									"scores":	[-20206.4193405249]
								}, {
									"case":	337,
									"scores":	[-20206.4193405249]
								}, {
									"case":	338,
									"scores":	[-20206.4193405249]
								}, {
									"case":	339,
									"scores":	[-20206.4193405249]
								}, {
									"case":	340,
									"scores":	[-20206.4193405249]
								}, {
									"case":	341,
									"scores":	[-20206.4193405249]
								}, {
									"case":	342,
									"scores":	[-20206.4193405249]
								}, {
									"case":	343,
									"scores":	[-20206.4193405249]
								}, {
									"case":	344,
									"scores":	[-20206.4193405249]
								}, {
									"case":	345,
									"scores":	[-20206.4193405249]
								}, {
									"case":	346,
									"scores":	[-20206.4193405249]
								}, {
									"case":	347,
									"scores":	[-20206.4193405249]
								}, {
									"case":	348,
									"scores":	[-20206.4193405249]
								}, {
									"case":	349,
									"scores":	[-20206.4193405249]
								}, {
									"case":	350,
									"scores":	[-20206.4193405249]
								}, {
									"case":	351,
									"scores":	[-20206.4193405249]
								}, {
									"case":	352,
									"scores":	[-20206.4193405249]
								}, {
									"case":	353,
									"scores":	[-20206.4193405249]
								}, {
									"case":	354,
									"scores":	[-20206.4193405249]
								}, {
									"case":	355,
									"scores":	[-20206.4193405249]
								}, {
									"case":	356,
									"scores":	[-20206.4193405249]
								}, {
									"case":	357,
									"scores":	[-20206.4193405249]
								}, {
									"case":	358,
									"scores":	[-20206.4193405249]
								}, {
									"case":	359,
									"scores":	[-20206.4193405249]
								}, {
									"case":	360,
									"scores":	[-20206.4193405249]
								}, {
									"case":	361,
									"scores":	[-20206.4193405249]
								}, {
									"case":	362,
									"scores":	[-20206.4193405249]
								}, {
									"case":	363,
									"scores":	[-20206.4193405249]
								}, {
									"case":	364,
									"scores":	[-20206.4193405249]
								}, {
									"case":	365,
									"scores":	[-20206.4193405249]
								}, {
									"case":	366,
									"scores":	[-20206.4193405249]
								}, {
									"case":	367,
									"scores":	[-20206.4193405249]
								}, {
									"case":	368,
									"scores":	[-20206.4193405249]
								}, {
									"case":	369,
									"scores":	[-20206.4193405249]
								}, {
									"case":	370,
									"scores":	[-20206.4193405249]
								}, {
									"case":	371,
									"scores":	[-20206.4193405249]
								}, {
									"case":	372,
									"scores":	[-20206.4193405249]
								}, {
									"case":	373,
									"scores":	[-20206.4193405249]
								}, {
									"case":	374,
									"scores":	[-20206.4193405249]
								}, {
									"case":	375,
									"scores":	[-20206.4193405249]
								}, {
									"case":	376,
									"scores":	[-20206.4193405249]
								}, {
									"case":	377,
									"scores":	[-20206.4193405249]
								}, {
									"case":	378,
									"scores":	[-20206.4193405249]
								}, {
									"case":	379,
									"scores":	[-20206.4193405249]
								}, {
									"case":	380,
									"scores":	[-20206.4193405249]
								}, {
									"case":	381,
									"scores":	[-20206.4193405249]
								}, {
									"case":	382,
									"scores":	[-20206.4193405249]
								}, {
									"case":	383,
									"scores":	[-20206.4193405249]
								}, {
									"case":	384,
									"scores":	[-20206.4193405249]
								}, {
									"case":	385,
									"scores":	[-20206.4193405249]
								}, {
									"case":	386,
									"scores":	[-20206.4193405249]
								}, {
									"case":	387,
									"scores":	[-20206.4193405249]
								}, {
									"case":	388,
									"scores":	[-20206.4193405249]
								}, {
									"case":	389,
									"scores":	[-20206.4193405249]
								}, {
									"case":	390,
									"scores":	[-20206.4193405249]
								}, {
									"case":	391,
									"scores":	[-20206.4193405249]
								}, {
									"case":	392,
									"scores":	[-20206.4193405249]
								}, {
									"case":	393,
									"scores":	[-20206.4193405249]
								}, {
									"case":	394,
									"scores":	[-20206.4193405249]
								}, {
									"case":	395,
									"scores":	[-20206.4193405249]
								}, {
									"case":	396,
									"scores":	[-20206.4193405249]
								}, {
									"case":	397,
									"scores":	[-20206.4193405249]
								}, {
									"case":	398,
									"scores":	[-20206.4193405249]
								}, {
									"case":	399,
									"scores":	[-20206.4193405249]
								}, {
									"case":	400,
									"scores":	[-20206.4193405249]
								}, {
									"case":	401,
									"scores":	[-20206.4193405249]
								}, {
									"case":	402,
									"scores":	[-20206.4193405249]
								}, {
									"case":	403,
									"scores":	[-20206.4193405249]
								}, {
									"case":	404,
									"scores":	[-20206.4193405249]
								}, {
									"case":	405,
									"scores":	[-20206.4193405249]
								}, {
									"case":	406,
									"scores":	[-20206.4193405249]
								}, {
									"case":	407,
									"scores":	[-20206.4193405249]
								}, {
									"case":	408,
									"scores":	[-20206.4193405249]
								}, {
									"case":	409,
									"scores":	[-20206.4193405249]
								}, {
									"case":	410,
									"scores":	[-20206.4193405249]
								}, {
									"case":	411,
									"scores":	[-20206.4193405249]
								}, {
									"case":	412,
									"scores":	[-20206.4193405249]
								}, {
									"case":	413,
									"scores":	[-20206.4193405249]
								}, {
									"case":	414,
									"scores":	[-20206.4193405249]
								}, {
									"case":	415,
									"scores":	[-20206.4193405249]
								}, {
									"case":	416,
									"scores":	[-20206.4193405249]
								}, {
									"case":	417,
									"scores":	[-20206.4193405249]
								}, {
									"case":	418,
									"scores":	[-20206.4193405249]
								}, {
									"case":	419,
									"scores":	[-20206.4193405249]
								}, {
									"case":	420,
									"scores":	[-20206.4193405249]
								}, {
									"case":	421,
									"scores":	[-20206.4193405249]
								}, {
									"case":	422,
									"scores":	[-20206.4193405249]
								}, {
									"case":	423,
									"scores":	[-20206.4193405249]
								}, {
									"case":	424,
									"scores":	[-20206.4193405249]
								}, {
									"case":	425,
									"scores":	[-20206.4193405249]
								}, {
									"case":	426,
									"scores":	[-20206.4193405249]
								}, {
									"case":	427,
									"scores":	[-20206.4193405249]
								}, {
									"case":	428,
									"scores":	[-20206.4193405249]
								}, {
									"case":	429,
									"scores":	[-20206.4193405249]
								}, {
									"case":	430,
									"scores":	[-20206.4193405249]
								}, {
									"case":	431,
									"scores":	[-20206.4193405249]
								}, {
									"case":	432,
									"scores":	[-20206.4193405249]
								}, {
									"case":	433,
									"scores":	[-20206.4193405249]
								}, {
									"case":	434,
									"scores":	[-20206.4193405249]
								}, {
									"case":	435,
									"scores":	[-20206.4193405249]
								}, {
									"case":	436,
									"scores":	[-20206.4193405249]
								}, {
									"case":	437,
									"scores":	[-20206.4193405249]
								}, {
									"case":	438,
									"scores":	[-20206.4193405249]
								}, {
									"case":	439,
									"scores":	[-20206.4193405249]
								}, {
									"case":	440,
									"scores":	[-20206.4193405249]
								}, {
									"case":	441,
									"scores":	[-20206.4193405249]
								}, {
									"case":	442,
									"scores":	[-20206.4193405249]
								}, {
									"case":	443,
									"scores":	[-20206.4193405249]
								}, {
									"case":	444,
									"scores":	[-20206.4193405249]
								}, {
									"case":	445,
									"scores":	[-20206.4193405249]
								}, {
									"case":	446,
									"scores":	[-20206.4193405249]
								}, {
									"case":	447,
									"scores":	[-20206.4193405249]
								}, {
									"case":	448,
									"scores":	[-20206.4193405249]
								}, {
									"case":	449,
									"scores":	[-20206.4193405249]
								}, {
									"case":	450,
									"scores":	[-20206.4193405249]
								}, {
									"case":	451,
									"scores":	[-20206.4193405249]
								}, {
									"case":	452,
									"scores":	[-20206.4193405249]
								}, {
									"case":	453,
									"scores":	[-20206.4193405249]
								}, {
									"case":	454,
									"scores":	[-20206.4193405249]
								}, {
									"case":	455,
									"scores":	[-20206.4193405249]
								}, {
									"case":	456,
									"scores":	[-20206.4193405249]
								}, {
									"case":	457,
									"scores":	[-20206.4193405249]
								}, {
									"case":	458,
									"scores":	[-20206.4193405249]
								}, {
									"case":	459,
									"scores":	[-20206.4193405249]
								}, {
									"case":	460,
									"scores":	[-20206.4193405249]
								}, {
									"case":	461,
									"scores":	[-20206.4193405249]
								}, {
									"case":	462,
									"scores":	[-20206.4193405249]
								}, {
									"case":	463,
									"scores":	[-20206.4193405249]
								}, {
									"case":	464,
									"scores":	[-20206.4193405249]
								}, {
									"case":	465,
									"scores":	[-20206.4193405249]
								}, {
									"case":	466,
									"scores":	[-20206.4193405249]
								}, {
									"case":	467,
									"scores":	[-20206.4193405249]
								}, {
									"case":	468,
									"scores":	[-20206.4193405249]
								}, {
									"case":	469,
									"scores":	[-20206.4193405249]
								}, {
									"case":	470,
									"scores":	[-20206.4193405249]
								}, {
									"case":	471,
									"scores":	[-20206.4193405249]
								}, {
									"case":	472,
									"scores":	[-20206.4193405249]
								}, {
									"case":	473,
									"scores":	[-20206.4193405249]
								}, {
									"case":	474,
									"scores":	[-20206.4193405249]
								}, {
									"case":	475,
									"scores":	[-20206.4193405249]
								}, {
									"case":	476,
									"scores":	[-20206.4193405249]
								}, {
									"case":	477,
									"scores":	[-20206.4193405249]
								}, {
									"case":	478,
									"scores":	[-20206.4193405249]
								}, {
									"case":	479,
									"scores":	[-20206.4193405249]
								}, {
									"case":	480,
									"scores":	[-20206.4193405249]
								}, {
									"case":	481,
									"scores":	[-20206.4193405249]
								}, {
									"case":	482,
									"scores":	[-20206.4193405249]
								}, {
									"case":	483,
									"scores":	[-20206.4193405249]
								}, {
									"case":	484,
									"scores":	[-20206.4193405249]
								}, {
									"case":	485,
									"scores":	[-20206.4193405249]
								}, {
									"case":	486,
									"scores":	[-20206.4193405249]
								}, {
									"case":	487,
									"scores":	[-20206.4193405249]
								}, {
									"case":	488,
									"scores":	[-20206.4193405249]
								}, {
									"case":	489,
									"scores":	[-20206.4193405249]
								}, {
									"case":	490,
									"scores":	[-20206.4193405249]
								}, {
									"case":	491,
									"scores":	[-20206.4193405249]
								}, {
									"case":	492,
									"scores":	[-20206.4193405249]
								}, {
									"case":	493,
									"scores":	[-20206.4193405249]
								}, {
									"case":	494,
									"scores":	[-20206.4193405249]
								}, {
									"case":	495,
									"scores":	[-20206.4193405249]
								}, {
									"case":	496,
									"scores":	[-20206.4193405249]
								}, {
									"case":	497,
									"scores":	[-20206.4193405249]
								}, {
									"case":	498,
									"scores":	[-20206.4193405249]
								}, {
									"case":	499,
									"scores":	[-20206.4193405249]
								}, {
									"case":	500,
									"scores":	[-20206.4193405249]
								}, {
									"case":	501,
									"scores":	[-20206.4193405249]
								}, {
									"case":	502,
									"scores":	[-20206.4193405249]
								}, {
									"case":	503,
									"scores":	[-20206.4193405249]
								}, {
									"case":	504,
									"scores":	[-20206.4193405249]
								}, {
									"case":	505,
									"scores":	[-20206.4193405249]
								}, {
									"case":	506,
									"scores":	[-20206.4193405249]
								}, {
									"case":	507,
									"scores":	[-20206.4193405249]
								}, {
									"case":	508,
									"scores":	[-20206.4193405249]
								}, {
									"case":	509,
									"scores":	[-20206.4193405249]
								}, {
									"case":	510,
									"scores":	[-20206.4193405249]
								}, {
									"case":	511,
									"scores":	[-20206.4193405249]
								}, {
									"case":	512,
									"scores":	[-20206.4193405249]
								}, {
									"case":	513,
									"scores":	[-20206.4193405249]
								}, {
									"case":	514,
									"scores":	[-20206.4193405249]
								}, {
									"case":	515,
									"scores":	[-20206.4193405249]
								}, {
									"case":	516,
									"scores":	[-20206.4193405249]
								}, {
									"case":	517,
									"scores":	[-20206.4193405249]
								}, {
									"case":	518,
									"scores":	[-20206.4193405249]
								}, {
									"case":	519,
									"scores":	[-20206.4193405249]
								}, {
									"case":	520,
									"scores":	[-20206.4193405249]
								}, {
									"case":	521,
									"scores":	[-20206.4193405249]
								}, {
									"case":	522,
									"scores":	[-20206.4193405249]
								}, {
									"case":	523,
									"scores":	[-20206.4193405249]
								}, {
									"case":	524,
									"scores":	[-20206.4193405249]
								}, {
									"case":	525,
									"scores":	[-20206.4193405249]
								}, {
									"case":	526,
									"scores":	[-20206.4193405249]
								}, {
									"case":	527,
									"scores":	[-20206.4193405249]
								}, {
									"case":	528,
									"scores":	[-20206.4193405249]
								}, {
									"case":	529,
									"scores":	[-20206.4193405249]
								}, {
									"case":	530,
									"scores":	[-20206.4193405249]
								}, {
									"case":	531,
									"scores":	[-20206.4193405249]
								}, {
									"case":	532,
									"scores":	[-20206.4193405249]
								}, {
									"case":	533,
									"scores":	[-20206.4193405249]
								}, {
									"case":	534,
									"scores":	[-20206.4193405249]
								}, {
									"case":	535,
									"scores":	[-20206.4193405249]
								}, {
									"case":	536,
									"scores":	[-20206.4193405249]
								}, {
									"case":	537,
									"scores":	[-20206.4193405249]
								}, {
									"case":	538,
									"scores":	[-20206.4193405249]
								}, {
									"case":	539,
									"scores":	[-20206.4193405249]
								}, {
									"case":	540,
									"scores":	[-20206.4193405249]
								}, {
									"case":	541,
									"scores":	[-20206.4193405249]
								}, {
									"case":	542,
									"scores":	[-20206.4193405249]
								}, {
									"case":	543,
									"scores":	[-20206.4193405249]
								}, {
									"case":	544,
									"scores":	[-20206.4193405249]
								}]
						}, {
							"switch":	78,
							"types":	[[3], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [2]],
							"begin_line":	1249,
							"begin_column":	5,
							"end_line":	1263,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1249\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet))) {\n    magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n    imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n    magic[1] = (char)imagic1;\n} else {\n    magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (magic[0]) {\n        magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        imagic1 = 0;\n    } else {\n        imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n        magic[1] = (char)imagic1;\n    }\n}\n", "if (force) {\n    magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n    imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n    magic[1] = (char)imagic1;\n} else {\n    magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (magic[0]) {\n        magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        imagic1 = 0;\n    } else {\n        imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n        magic[1] = (char)imagic1;\n    }\n}\n", "if ((force && to_stdout) && !__is_neg(\"\", \"L1249\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(imagic1), sizeof (imagic1), &(method), sizeof (method), &(method), sizeof (method), &(part_nb), sizeof (part_nb), &(header_bytes), sizeof (header_bytes), &(last_member), sizeof (last_member), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(flags), sizeof (flags), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet))) {\n    magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n    imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n    magic[1] = (char)imagic1;\n} else {\n    magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (magic[0]) {\n        magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        imagic1 = 0;\n    } else {\n        imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1));\n        magic[1] = (char)imagic1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.737661863328146, -5.737661863328146, -5.737661863328146, -4.1453568363281477, -3.9026734693281475, -4.1453568363281477, -3.9026734693281475, -6.1645350363281466, -5.774759967328146, -5.774759967328146, -5.7411678353281452, -5.8108980973281454, -5.737661863328146, -6.1746268633281467, -6.1746268633281467, -5.737661863328146, -5.737661863328146, -5.737661863328146, -5.2563065633281454, -5.2563065633281454, -5.737661863328146, -5.737661863328146, -5.737661863328146, -5.737661863328146, -5.737661863328146, -5.5210880633281452, -5.737661863328146, -5.737661863328146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.9090843054281459, -3.9090843054281459, -3.9090843054281459, -2.3167792784281458, -2.0740959114281461, -2.3167792784281458, -2.0740959114281461, -4.3359574784281456, -3.9461824094281459, -3.9461824094281459, -3.9125902774281456, -3.9823205394281458, -3.9090843054281459, -4.3460493054281457, -4.3460493054281457, -3.9090843054281459, -3.9090843054281459, -3.9090843054281459, -3.4277290054281457, -3.4277290054281457, -3.9090843054281459, -3.9090843054281459, -3.9090843054281459, -3.9090843054281459, -3.9090843054281459, -3.692510505428146, -3.9090843054281459, -3.9090843054281459]
								}]
						}]
				}, {
					"line":	1396,
					"switches":	[{
							"switch":	96,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1397,
							"begin_column":	7,
							"end_line":	1397,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.13425278592086]
								}, {
									"case":	2,
									"scores":	[-4.13425278592086]
								}, {
									"case":	3,
									"scores":	[-4.13425278592086]
								}, {
									"case":	4,
									"scores":	[-4.13425278592086]
								}, {
									"case":	5,
									"scores":	[-4.13425278592086]
								}, {
									"case":	6,
									"scores":	[-4.13425278592086]
								}, {
									"case":	7,
									"scores":	[-4.13425278592086]
								}, {
									"case":	8,
									"scores":	[-4.13425278592086]
								}, {
									"case":	9,
									"scores":	[-4.13425278592086]
								}, {
									"case":	10,
									"scores":	[-4.13425278592086]
								}, {
									"case":	11,
									"scores":	[-4.13425278592086]
								}, {
									"case":	12,
									"scores":	[-4.13425278592086]
								}, {
									"case":	13,
									"scores":	[-4.13425278592086]
								}, {
									"case":	14,
									"scores":	[-4.13425278592086]
								}, {
									"case":	15,
									"scores":	[-4.13425278592086]
								}, {
									"case":	16,
									"scores":	[-4.13425278592086]
								}, {
									"case":	17,
									"scores":	[-4.13425278592086]
								}, {
									"case":	18,
									"scores":	[-4.13425278592086]
								}, {
									"case":	19,
									"scores":	[-4.13425278592086]
								}, {
									"case":	20,
									"scores":	[-4.13425278592086]
								}, {
									"case":	21,
									"scores":	[-4.13425278592086]
								}, {
									"case":	22,
									"scores":	[-4.13425278592086]
								}, {
									"case":	23,
									"scores":	[-4.13425278592086]
								}, {
									"case":	24,
									"scores":	[-4.13425278592086]
								}, {
									"case":	25,
									"scores":	[-4.13425278592086]
								}, {
									"case":	26,
									"scores":	[-4.13425278592086]
								}, {
									"case":	27,
									"scores":	[-4.13425278592086]
								}, {
									"case":	28,
									"scores":	[-4.13425278592086]
								}, {
									"case":	29,
									"scores":	[-4.13425278592086]
								}, {
									"case":	30,
									"scores":	[-4.13425278592086]
								}, {
									"case":	31,
									"scores":	[-4.13425278592086]
								}, {
									"case":	32,
									"scores":	[-4.13425278592086]
								}, {
									"case":	33,
									"scores":	[-4.13425278592086]
								}, {
									"case":	34,
									"scores":	[-4.13425278592086]
								}, {
									"case":	35,
									"scores":	[-4.13425278592086]
								}, {
									"case":	36,
									"scores":	[-4.13425278592086]
								}, {
									"case":	37,
									"scores":	[-4.13425278592086]
								}, {
									"case":	38,
									"scores":	[-4.13425278592086]
								}, {
									"case":	39,
									"scores":	[-4.13425278592086]
								}, {
									"case":	40,
									"scores":	[-4.13425278592086]
								}, {
									"case":	41,
									"scores":	[-4.13425278592086]
								}, {
									"case":	42,
									"scores":	[-4.13425278592086]
								}, {
									"case":	43,
									"scores":	[-4.13425278592086]
								}, {
									"case":	44,
									"scores":	[-4.13425278592086]
								}, {
									"case":	45,
									"scores":	[-4.13425278592086]
								}, {
									"case":	46,
									"scores":	[-4.13425278592086]
								}, {
									"case":	47,
									"scores":	[-4.13425278592086]
								}, {
									"case":	48,
									"scores":	[-4.13425278592086]
								}, {
									"case":	49,
									"scores":	[-4.13425278592086]
								}, {
									"case":	50,
									"scores":	[-4.13425278592086]
								}, {
									"case":	51,
									"scores":	[-4.13425278592086]
								}, {
									"case":	52,
									"scores":	[-4.13425278592086]
								}, {
									"case":	53,
									"scores":	[-4.13425278592086]
								}, {
									"case":	54,
									"scores":	[-4.13425278592086]
								}, {
									"case":	55,
									"scores":	[-4.13425278592086]
								}, {
									"case":	56,
									"scores":	[-4.13425278592086]
								}, {
									"case":	57,
									"scores":	[-4.13425278592086]
								}, {
									"case":	58,
									"scores":	[-4.13425278592086]
								}, {
									"case":	59,
									"scores":	[-4.13425278592086]
								}, {
									"case":	60,
									"scores":	[-4.13425278592086]
								}, {
									"case":	61,
									"scores":	[-4.13425278592086]
								}, {
									"case":	62,
									"scores":	[-4.13425278592086]
								}, {
									"case":	63,
									"scores":	[-4.13425278592086]
								}, {
									"case":	64,
									"scores":	[-4.13425278592086]
								}, {
									"case":	65,
									"scores":	[-4.13425278592086]
								}, {
									"case":	66,
									"scores":	[-4.13425278592086]
								}, {
									"case":	67,
									"scores":	[-4.13425278592086]
								}, {
									"case":	68,
									"scores":	[-4.13425278592086]
								}, {
									"case":	69,
									"scores":	[-4.13425278592086]
								}, {
									"case":	70,
									"scores":	[-4.13425278592086]
								}, {
									"case":	71,
									"scores":	[-4.13425278592086]
								}, {
									"case":	72,
									"scores":	[-4.13425278592086]
								}, {
									"case":	73,
									"scores":	[-4.13425278592086]
								}, {
									"case":	74,
									"scores":	[-4.13425278592086]
								}, {
									"case":	75,
									"scores":	[-4.13425278592086]
								}, {
									"case":	76,
									"scores":	[-4.13425278592086]
								}, {
									"case":	77,
									"scores":	[-4.13425278592086]
								}, {
									"case":	78,
									"scores":	[-4.13425278592086]
								}, {
									"case":	79,
									"scores":	[-4.13425278592086]
								}, {
									"case":	80,
									"scores":	[-4.13425278592086]
								}, {
									"case":	81,
									"scores":	[-4.13425278592086]
								}, {
									"case":	82,
									"scores":	[-4.13425278592086]
								}, {
									"case":	83,
									"scores":	[-4.13425278592086]
								}, {
									"case":	84,
									"scores":	[-4.13425278592086]
								}, {
									"case":	85,
									"scores":	[-4.13425278592086]
								}, {
									"case":	86,
									"scores":	[-4.13425278592086]
								}, {
									"case":	87,
									"scores":	[-4.13425278592086]
								}, {
									"case":	88,
									"scores":	[-4.13425278592086]
								}, {
									"case":	89,
									"scores":	[-4.13425278592086]
								}, {
									"case":	90,
									"scores":	[-4.13425278592086]
								}, {
									"case":	91,
									"scores":	[-4.13425278592086]
								}, {
									"case":	92,
									"scores":	[-4.13425278592086]
								}, {
									"case":	93,
									"scores":	[-4.13425278592086]
								}, {
									"case":	94,
									"scores":	[-4.13425278592086]
								}, {
									"case":	95,
									"scores":	[-4.13425278592086]
								}, {
									"case":	96,
									"scores":	[-4.13425278592086]
								}, {
									"case":	97,
									"scores":	[-4.13425278592086]
								}, {
									"case":	98,
									"scores":	[-4.13425278592086]
								}, {
									"case":	99,
									"scores":	[-4.13425278592086]
								}, {
									"case":	100,
									"scores":	[-4.13425278592086]
								}, {
									"case":	101,
									"scores":	[-4.13425278592086]
								}, {
									"case":	102,
									"scores":	[-4.13425278592086]
								}, {
									"case":	103,
									"scores":	[-4.13425278592086]
								}, {
									"case":	104,
									"scores":	[-4.13425278592086]
								}, {
									"case":	105,
									"scores":	[-4.13425278592086]
								}, {
									"case":	106,
									"scores":	[-4.13425278592086]
								}, {
									"case":	107,
									"scores":	[-4.13425278592086]
								}, {
									"case":	108,
									"scores":	[-4.13425278592086]
								}, {
									"case":	109,
									"scores":	[-4.13425278592086]
								}, {
									"case":	110,
									"scores":	[-4.13425278592086]
								}, {
									"case":	111,
									"scores":	[-4.13425278592086]
								}, {
									"case":	112,
									"scores":	[-4.13425278592086]
								}, {
									"case":	113,
									"scores":	[-4.13425278592086]
								}, {
									"case":	114,
									"scores":	[-4.13425278592086]
								}, {
									"case":	115,
									"scores":	[-4.13425278592086]
								}, {
									"case":	116,
									"scores":	[-4.13425278592086]
								}, {
									"case":	117,
									"scores":	[-4.13425278592086]
								}, {
									"case":	118,
									"scores":	[-4.13425278592086]
								}, {
									"case":	119,
									"scores":	[-4.13425278592086]
								}, {
									"case":	120,
									"scores":	[-4.13425278592086]
								}, {
									"case":	121,
									"scores":	[-4.13425278592086]
								}, {
									"case":	122,
									"scores":	[-4.13425278592086]
								}, {
									"case":	123,
									"scores":	[-4.13425278592086]
								}, {
									"case":	124,
									"scores":	[-4.13425278592086]
								}, {
									"case":	125,
									"scores":	[-4.13425278592086]
								}, {
									"case":	126,
									"scores":	[-4.13425278592086]
								}, {
									"case":	127,
									"scores":	[-4.13425278592086]
								}, {
									"case":	128,
									"scores":	[-4.13425278592086]
								}, {
									"case":	129,
									"scores":	[-4.13425278592086]
								}, {
									"case":	130,
									"scores":	[-4.13425278592086]
								}, {
									"case":	131,
									"scores":	[-4.13425278592086]
								}, {
									"case":	132,
									"scores":	[-4.13425278592086]
								}, {
									"case":	133,
									"scores":	[-4.13425278592086]
								}, {
									"case":	134,
									"scores":	[-4.13425278592086]
								}, {
									"case":	135,
									"scores":	[-4.13425278592086]
								}, {
									"case":	136,
									"scores":	[-4.13425278592086]
								}, {
									"case":	137,
									"scores":	[-4.13425278592086]
								}, {
									"case":	138,
									"scores":	[-4.13425278592086]
								}, {
									"case":	139,
									"scores":	[-4.13425278592086]
								}, {
									"case":	140,
									"scores":	[-4.13425278592086]
								}, {
									"case":	141,
									"scores":	[-4.13425278592086]
								}, {
									"case":	142,
									"scores":	[-4.13425278592086]
								}, {
									"case":	143,
									"scores":	[-4.13425278592086]
								}, {
									"case":	144,
									"scores":	[-4.13425278592086]
								}, {
									"case":	145,
									"scores":	[-4.13425278592086]
								}, {
									"case":	146,
									"scores":	[-4.13425278592086]
								}, {
									"case":	147,
									"scores":	[-4.13425278592086]
								}, {
									"case":	148,
									"scores":	[-4.13425278592086]
								}, {
									"case":	149,
									"scores":	[-4.13425278592086]
								}, {
									"case":	150,
									"scores":	[-4.13425278592086]
								}, {
									"case":	151,
									"scores":	[-4.13425278592086]
								}, {
									"case":	152,
									"scores":	[-4.13425278592086]
								}, {
									"case":	153,
									"scores":	[-4.13425278592086]
								}, {
									"case":	154,
									"scores":	[-4.13425278592086]
								}, {
									"case":	155,
									"scores":	[-4.13425278592086]
								}, {
									"case":	156,
									"scores":	[-4.13425278592086]
								}, {
									"case":	157,
									"scores":	[-4.13425278592086]
								}, {
									"case":	158,
									"scores":	[-4.13425278592086]
								}, {
									"case":	159,
									"scores":	[-4.13425278592086]
								}, {
									"case":	160,
									"scores":	[-4.13425278592086]
								}, {
									"case":	161,
									"scores":	[-4.13425278592086]
								}, {
									"case":	162,
									"scores":	[-4.13425278592086]
								}, {
									"case":	163,
									"scores":	[-4.13425278592086]
								}, {
									"case":	164,
									"scores":	[-4.13425278592086]
								}, {
									"case":	165,
									"scores":	[-4.13425278592086]
								}, {
									"case":	166,
									"scores":	[-4.13425278592086]
								}, {
									"case":	167,
									"scores":	[-4.13425278592086]
								}, {
									"case":	168,
									"scores":	[-4.13425278592086]
								}, {
									"case":	169,
									"scores":	[-4.13425278592086]
								}, {
									"case":	170,
									"scores":	[-4.13425278592086]
								}, {
									"case":	171,
									"scores":	[-4.13425278592086]
								}, {
									"case":	172,
									"scores":	[-4.13425278592086]
								}, {
									"case":	173,
									"scores":	[-4.13425278592086]
								}, {
									"case":	174,
									"scores":	[-4.13425278592086]
								}, {
									"case":	175,
									"scores":	[-4.13425278592086]
								}, {
									"case":	176,
									"scores":	[-4.13425278592086]
								}, {
									"case":	177,
									"scores":	[-4.13425278592086]
								}, {
									"case":	178,
									"scores":	[-4.13425278592086]
								}, {
									"case":	179,
									"scores":	[-4.13425278592086]
								}, {
									"case":	180,
									"scores":	[-4.13425278592086]
								}, {
									"case":	181,
									"scores":	[-4.13425278592086]
								}, {
									"case":	182,
									"scores":	[-4.13425278592086]
								}, {
									"case":	183,
									"scores":	[-4.13425278592086]
								}, {
									"case":	184,
									"scores":	[-4.13425278592086]
								}, {
									"case":	185,
									"scores":	[-4.13425278592086]
								}, {
									"case":	186,
									"scores":	[-4.13425278592086]
								}, {
									"case":	187,
									"scores":	[-4.13425278592086]
								}, {
									"case":	188,
									"scores":	[-4.13425278592086]
								}, {
									"case":	189,
									"scores":	[-4.13425278592086]
								}, {
									"case":	190,
									"scores":	[-4.13425278592086]
								}, {
									"case":	191,
									"scores":	[-4.13425278592086]
								}, {
									"case":	192,
									"scores":	[-4.13425278592086]
								}, {
									"case":	193,
									"scores":	[-4.13425278592086]
								}, {
									"case":	194,
									"scores":	[-4.13425278592086]
								}, {
									"case":	195,
									"scores":	[-4.13425278592086]
								}, {
									"case":	196,
									"scores":	[-4.13425278592086]
								}, {
									"case":	197,
									"scores":	[-4.13425278592086]
								}, {
									"case":	198,
									"scores":	[-4.13425278592086]
								}, {
									"case":	199,
									"scores":	[-4.13425278592086]
								}, {
									"case":	200,
									"scores":	[-4.13425278592086]
								}, {
									"case":	201,
									"scores":	[-4.13425278592086]
								}, {
									"case":	202,
									"scores":	[-4.13425278592086]
								}, {
									"case":	203,
									"scores":	[-4.13425278592086]
								}, {
									"case":	204,
									"scores":	[-4.13425278592086]
								}, {
									"case":	205,
									"scores":	[-4.13425278592086]
								}, {
									"case":	206,
									"scores":	[-4.13425278592086]
								}, {
									"case":	207,
									"scores":	[-4.13425278592086]
								}, {
									"case":	208,
									"scores":	[-4.13425278592086]
								}, {
									"case":	209,
									"scores":	[-4.13425278592086]
								}, {
									"case":	210,
									"scores":	[-4.13425278592086]
								}, {
									"case":	211,
									"scores":	[-4.13425278592086]
								}, {
									"case":	212,
									"scores":	[-4.13425278592086]
								}, {
									"case":	213,
									"scores":	[-4.13425278592086]
								}, {
									"case":	214,
									"scores":	[-4.13425278592086]
								}, {
									"case":	215,
									"scores":	[-4.13425278592086]
								}, {
									"case":	216,
									"scores":	[-4.13425278592086]
								}, {
									"case":	217,
									"scores":	[-4.13425278592086]
								}, {
									"case":	218,
									"scores":	[-4.13425278592086]
								}, {
									"case":	219,
									"scores":	[-4.13425278592086]
								}, {
									"case":	220,
									"scores":	[-4.13425278592086]
								}, {
									"case":	221,
									"scores":	[-4.13425278592086]
								}, {
									"case":	222,
									"scores":	[-4.13425278592086]
								}, {
									"case":	223,
									"scores":	[-4.13425278592086]
								}, {
									"case":	224,
									"scores":	[-4.13425278592086]
								}, {
									"case":	225,
									"scores":	[-4.13425278592086]
								}, {
									"case":	226,
									"scores":	[-4.13425278592086]
								}, {
									"case":	227,
									"scores":	[-4.13425278592086]
								}, {
									"case":	228,
									"scores":	[-4.13425278592086]
								}, {
									"case":	229,
									"scores":	[-4.13425278592086]
								}, {
									"case":	230,
									"scores":	[-4.13425278592086]
								}, {
									"case":	231,
									"scores":	[-4.13425278592086]
								}, {
									"case":	232,
									"scores":	[-4.13425278592086]
								}, {
									"case":	233,
									"scores":	[-4.13425278592086]
								}, {
									"case":	234,
									"scores":	[-4.13425278592086]
								}, {
									"case":	235,
									"scores":	[-4.13425278592086]
								}, {
									"case":	236,
									"scores":	[-4.13425278592086]
								}, {
									"case":	237,
									"scores":	[-4.13425278592086]
								}, {
									"case":	238,
									"scores":	[-4.13425278592086]
								}, {
									"case":	239,
									"scores":	[-4.13425278592086]
								}, {
									"case":	240,
									"scores":	[-4.13425278592086]
								}, {
									"case":	241,
									"scores":	[-4.13425278592086]
								}, {
									"case":	242,
									"scores":	[-4.13425278592086]
								}, {
									"case":	243,
									"scores":	[-4.13425278592086]
								}, {
									"case":	244,
									"scores":	[-4.13425278592086]
								}, {
									"case":	245,
									"scores":	[-4.13425278592086]
								}, {
									"case":	246,
									"scores":	[-4.13425278592086]
								}, {
									"case":	247,
									"scores":	[-4.13425278592086]
								}, {
									"case":	248,
									"scores":	[-4.13425278592086]
								}, {
									"case":	249,
									"scores":	[-4.13425278592086]
								}, {
									"case":	250,
									"scores":	[-4.13425278592086]
								}, {
									"case":	251,
									"scores":	[-4.13425278592086]
								}, {
									"case":	252,
									"scores":	[-4.13425278592086]
								}, {
									"case":	253,
									"scores":	[-4.13425278592086]
								}, {
									"case":	254,
									"scores":	[-4.13425278592086]
								}, {
									"case":	255,
									"scores":	[-4.13425278592086]
								}, {
									"case":	256,
									"scores":	[-4.13425278592086]
								}, {
									"case":	257,
									"scores":	[-4.13425278592086]
								}, {
									"case":	258,
									"scores":	[-4.13425278592086]
								}, {
									"case":	259,
									"scores":	[-4.13425278592086]
								}, {
									"case":	260,
									"scores":	[-4.13425278592086]
								}, {
									"case":	261,
									"scores":	[-4.13425278592086]
								}, {
									"case":	262,
									"scores":	[-4.13425278592086]
								}, {
									"case":	263,
									"scores":	[-4.13425278592086]
								}, {
									"case":	264,
									"scores":	[-4.13425278592086]
								}, {
									"case":	265,
									"scores":	[-4.13425278592086]
								}, {
									"case":	266,
									"scores":	[-4.13425278592086]
								}, {
									"case":	267,
									"scores":	[-4.13425278592086]
								}, {
									"case":	268,
									"scores":	[-4.13425278592086]
								}, {
									"case":	269,
									"scores":	[-4.13425278592086]
								}, {
									"case":	270,
									"scores":	[-4.13425278592086]
								}, {
									"case":	271,
									"scores":	[-4.13425278592086]
								}, {
									"case":	272,
									"scores":	[-4.13425278592086]
								}, {
									"case":	273,
									"scores":	[-4.13425278592086]
								}, {
									"case":	274,
									"scores":	[-4.13425278592086]
								}, {
									"case":	275,
									"scores":	[-4.13425278592086]
								}, {
									"case":	276,
									"scores":	[-4.13425278592086]
								}, {
									"case":	277,
									"scores":	[-4.13425278592086]
								}, {
									"case":	278,
									"scores":	[-4.13425278592086]
								}, {
									"case":	279,
									"scores":	[-4.13425278592086]
								}, {
									"case":	280,
									"scores":	[-4.13425278592086]
								}, {
									"case":	281,
									"scores":	[-4.13425278592086]
								}, {
									"case":	282,
									"scores":	[-4.13425278592086]
								}, {
									"case":	283,
									"scores":	[-4.13425278592086]
								}, {
									"case":	284,
									"scores":	[-4.13425278592086]
								}, {
									"case":	285,
									"scores":	[-4.13425278592086]
								}, {
									"case":	286,
									"scores":	[-4.13425278592086]
								}, {
									"case":	287,
									"scores":	[-4.13425278592086]
								}, {
									"case":	288,
									"scores":	[-4.13425278592086]
								}, {
									"case":	289,
									"scores":	[-4.13425278592086]
								}, {
									"case":	290,
									"scores":	[-4.13425278592086]
								}, {
									"case":	291,
									"scores":	[-4.13425278592086]
								}, {
									"case":	292,
									"scores":	[-4.13425278592086]
								}, {
									"case":	293,
									"scores":	[-4.13425278592086]
								}, {
									"case":	294,
									"scores":	[-4.13425278592086]
								}, {
									"case":	295,
									"scores":	[-4.13425278592086]
								}, {
									"case":	296,
									"scores":	[-4.13425278592086]
								}, {
									"case":	297,
									"scores":	[-4.13425278592086]
								}, {
									"case":	298,
									"scores":	[-4.13425278592086]
								}, {
									"case":	299,
									"scores":	[-4.13425278592086]
								}, {
									"case":	300,
									"scores":	[-4.13425278592086]
								}, {
									"case":	301,
									"scores":	[-4.13425278592086]
								}, {
									"case":	302,
									"scores":	[-4.13425278592086]
								}, {
									"case":	303,
									"scores":	[-4.13425278592086]
								}, {
									"case":	304,
									"scores":	[-4.13425278592086]
								}, {
									"case":	305,
									"scores":	[-4.13425278592086]
								}, {
									"case":	306,
									"scores":	[-4.13425278592086]
								}, {
									"case":	307,
									"scores":	[-4.13425278592086]
								}, {
									"case":	308,
									"scores":	[-4.13425278592086]
								}, {
									"case":	309,
									"scores":	[-4.13425278592086]
								}, {
									"case":	310,
									"scores":	[-4.13425278592086]
								}, {
									"case":	311,
									"scores":	[-4.13425278592086]
								}, {
									"case":	312,
									"scores":	[-4.13425278592086]
								}, {
									"case":	313,
									"scores":	[-4.13425278592086]
								}, {
									"case":	314,
									"scores":	[-4.13425278592086]
								}, {
									"case":	315,
									"scores":	[-4.13425278592086]
								}, {
									"case":	316,
									"scores":	[-4.13425278592086]
								}, {
									"case":	317,
									"scores":	[-4.13425278592086]
								}, {
									"case":	318,
									"scores":	[-4.13425278592086]
								}, {
									"case":	319,
									"scores":	[-4.13425278592086]
								}, {
									"case":	320,
									"scores":	[-4.13425278592086]
								}, {
									"case":	321,
									"scores":	[-4.13425278592086]
								}, {
									"case":	322,
									"scores":	[-4.13425278592086]
								}, {
									"case":	323,
									"scores":	[-4.13425278592086]
								}, {
									"case":	324,
									"scores":	[-4.13425278592086]
								}, {
									"case":	325,
									"scores":	[-4.13425278592086]
								}, {
									"case":	326,
									"scores":	[-4.13425278592086]
								}, {
									"case":	327,
									"scores":	[-4.13425278592086]
								}, {
									"case":	328,
									"scores":	[-4.13425278592086]
								}, {
									"case":	329,
									"scores":	[-4.13425278592086]
								}, {
									"case":	330,
									"scores":	[-4.13425278592086]
								}, {
									"case":	331,
									"scores":	[-4.13425278592086]
								}, {
									"case":	332,
									"scores":	[-4.13425278592086]
								}, {
									"case":	333,
									"scores":	[-4.13425278592086]
								}, {
									"case":	334,
									"scores":	[-4.13425278592086]
								}, {
									"case":	335,
									"scores":	[-4.13425278592086]
								}, {
									"case":	336,
									"scores":	[-4.13425278592086]
								}, {
									"case":	337,
									"scores":	[-4.13425278592086]
								}, {
									"case":	338,
									"scores":	[-4.13425278592086]
								}, {
									"case":	339,
									"scores":	[-4.13425278592086]
								}, {
									"case":	340,
									"scores":	[-4.13425278592086]
								}, {
									"case":	341,
									"scores":	[-4.13425278592086]
								}, {
									"case":	342,
									"scores":	[-4.13425278592086]
								}, {
									"case":	343,
									"scores":	[-4.13425278592086]
								}, {
									"case":	344,
									"scores":	[-4.13425278592086]
								}, {
									"case":	345,
									"scores":	[-4.13425278592086]
								}, {
									"case":	346,
									"scores":	[-4.13425278592086]
								}, {
									"case":	347,
									"scores":	[-4.13425278592086]
								}, {
									"case":	348,
									"scores":	[-4.13425278592086]
								}, {
									"case":	349,
									"scores":	[-4.13425278592086]
								}, {
									"case":	350,
									"scores":	[-4.13425278592086]
								}, {
									"case":	351,
									"scores":	[-4.13425278592086]
								}, {
									"case":	352,
									"scores":	[-4.13425278592086]
								}, {
									"case":	353,
									"scores":	[-4.13425278592086]
								}, {
									"case":	354,
									"scores":	[-4.13425278592086]
								}, {
									"case":	355,
									"scores":	[-4.13425278592086]
								}, {
									"case":	356,
									"scores":	[-4.13425278592086]
								}, {
									"case":	357,
									"scores":	[-4.13425278592086]
								}, {
									"case":	358,
									"scores":	[-4.13425278592086]
								}, {
									"case":	359,
									"scores":	[-4.13425278592086]
								}, {
									"case":	360,
									"scores":	[-4.13425278592086]
								}, {
									"case":	361,
									"scores":	[-4.13425278592086]
								}, {
									"case":	362,
									"scores":	[-4.13425278592086]
								}, {
									"case":	363,
									"scores":	[-4.13425278592086]
								}, {
									"case":	364,
									"scores":	[-4.13425278592086]
								}, {
									"case":	365,
									"scores":	[-4.13425278592086]
								}, {
									"case":	366,
									"scores":	[-4.13425278592086]
								}, {
									"case":	367,
									"scores":	[-4.13425278592086]
								}, {
									"case":	368,
									"scores":	[-4.13425278592086]
								}, {
									"case":	369,
									"scores":	[-4.13425278592086]
								}, {
									"case":	370,
									"scores":	[-4.13425278592086]
								}, {
									"case":	371,
									"scores":	[-4.13425278592086]
								}, {
									"case":	372,
									"scores":	[-4.13425278592086]
								}, {
									"case":	373,
									"scores":	[-4.13425278592086]
								}, {
									"case":	374,
									"scores":	[-4.13425278592086]
								}, {
									"case":	375,
									"scores":	[-4.13425278592086]
								}, {
									"case":	376,
									"scores":	[-4.13425278592086]
								}, {
									"case":	377,
									"scores":	[-4.13425278592086]
								}, {
									"case":	378,
									"scores":	[-4.13425278592086]
								}, {
									"case":	379,
									"scores":	[-4.13425278592086]
								}, {
									"case":	380,
									"scores":	[-4.13425278592086]
								}, {
									"case":	381,
									"scores":	[-4.13425278592086]
								}, {
									"case":	382,
									"scores":	[-4.13425278592086]
								}, {
									"case":	383,
									"scores":	[-4.13425278592086]
								}, {
									"case":	384,
									"scores":	[-4.13425278592086]
								}, {
									"case":	385,
									"scores":	[-4.13425278592086]
								}, {
									"case":	386,
									"scores":	[-4.13425278592086]
								}, {
									"case":	387,
									"scores":	[-4.13425278592086]
								}, {
									"case":	388,
									"scores":	[-4.13425278592086]
								}, {
									"case":	389,
									"scores":	[-4.13425278592086]
								}, {
									"case":	390,
									"scores":	[-4.13425278592086]
								}, {
									"case":	391,
									"scores":	[-4.13425278592086]
								}, {
									"case":	392,
									"scores":	[-4.13425278592086]
								}, {
									"case":	393,
									"scores":	[-4.13425278592086]
								}, {
									"case":	394,
									"scores":	[-4.13425278592086]
								}, {
									"case":	395,
									"scores":	[-4.13425278592086]
								}, {
									"case":	396,
									"scores":	[-4.13425278592086]
								}, {
									"case":	397,
									"scores":	[-4.13425278592086]
								}, {
									"case":	398,
									"scores":	[-4.13425278592086]
								}, {
									"case":	399,
									"scores":	[-4.13425278592086]
								}, {
									"case":	400,
									"scores":	[-4.13425278592086]
								}, {
									"case":	401,
									"scores":	[-4.13425278592086]
								}, {
									"case":	402,
									"scores":	[-4.13425278592086]
								}, {
									"case":	403,
									"scores":	[-4.13425278592086]
								}, {
									"case":	404,
									"scores":	[-4.13425278592086]
								}, {
									"case":	405,
									"scores":	[-4.13425278592086]
								}, {
									"case":	406,
									"scores":	[-4.13425278592086]
								}, {
									"case":	407,
									"scores":	[-4.13425278592086]
								}, {
									"case":	408,
									"scores":	[-4.13425278592086]
								}, {
									"case":	409,
									"scores":	[-4.13425278592086]
								}, {
									"case":	410,
									"scores":	[-4.13425278592086]
								}, {
									"case":	411,
									"scores":	[-4.13425278592086]
								}, {
									"case":	412,
									"scores":	[-4.13425278592086]
								}, {
									"case":	413,
									"scores":	[-4.13425278592086]
								}, {
									"case":	414,
									"scores":	[-4.13425278592086]
								}, {
									"case":	415,
									"scores":	[-4.13425278592086]
								}, {
									"case":	416,
									"scores":	[-4.13425278592086]
								}, {
									"case":	417,
									"scores":	[-4.13425278592086]
								}, {
									"case":	418,
									"scores":	[-4.13425278592086]
								}, {
									"case":	419,
									"scores":	[-4.13425278592086]
								}, {
									"case":	420,
									"scores":	[-4.13425278592086]
								}, {
									"case":	421,
									"scores":	[-4.13425278592086]
								}, {
									"case":	422,
									"scores":	[-4.13425278592086]
								}, {
									"case":	423,
									"scores":	[-4.13425278592086]
								}, {
									"case":	424,
									"scores":	[-4.13425278592086]
								}, {
									"case":	425,
									"scores":	[-4.13425278592086]
								}, {
									"case":	426,
									"scores":	[-4.13425278592086]
								}, {
									"case":	427,
									"scores":	[-4.13425278592086]
								}, {
									"case":	428,
									"scores":	[-4.13425278592086]
								}, {
									"case":	429,
									"scores":	[-4.13425278592086]
								}, {
									"case":	430,
									"scores":	[-4.13425278592086]
								}, {
									"case":	431,
									"scores":	[-4.13425278592086]
								}, {
									"case":	432,
									"scores":	[-4.13425278592086]
								}, {
									"case":	433,
									"scores":	[-4.13425278592086]
								}, {
									"case":	434,
									"scores":	[-4.13425278592086]
								}, {
									"case":	435,
									"scores":	[-4.13425278592086]
								}, {
									"case":	436,
									"scores":	[-4.13425278592086]
								}, {
									"case":	437,
									"scores":	[-4.13425278592086]
								}, {
									"case":	438,
									"scores":	[-4.13425278592086]
								}, {
									"case":	439,
									"scores":	[-4.13425278592086]
								}, {
									"case":	440,
									"scores":	[-4.13425278592086]
								}, {
									"case":	441,
									"scores":	[-4.13425278592086]
								}, {
									"case":	442,
									"scores":	[-4.13425278592086]
								}, {
									"case":	443,
									"scores":	[-4.13425278592086]
								}, {
									"case":	444,
									"scores":	[-4.13425278592086]
								}, {
									"case":	445,
									"scores":	[-4.13425278592086]
								}, {
									"case":	446,
									"scores":	[-4.13425278592086]
								}, {
									"case":	447,
									"scores":	[-4.13425278592086]
								}, {
									"case":	448,
									"scores":	[-4.13425278592086]
								}, {
									"case":	449,
									"scores":	[-4.13425278592086]
								}, {
									"case":	450,
									"scores":	[-4.13425278592086]
								}, {
									"case":	451,
									"scores":	[-4.13425278592086]
								}, {
									"case":	452,
									"scores":	[-4.13425278592086]
								}, {
									"case":	453,
									"scores":	[-4.13425278592086]
								}, {
									"case":	454,
									"scores":	[-4.13425278592086]
								}, {
									"case":	455,
									"scores":	[-4.13425278592086]
								}, {
									"case":	456,
									"scores":	[-4.13425278592086]
								}, {
									"case":	457,
									"scores":	[-4.13425278592086]
								}, {
									"case":	458,
									"scores":	[-4.13425278592086]
								}, {
									"case":	459,
									"scores":	[-4.13425278592086]
								}, {
									"case":	460,
									"scores":	[-4.13425278592086]
								}, {
									"case":	461,
									"scores":	[-4.13425278592086]
								}, {
									"case":	462,
									"scores":	[-4.13425278592086]
								}, {
									"case":	463,
									"scores":	[-4.13425278592086]
								}, {
									"case":	464,
									"scores":	[-4.13425278592086]
								}, {
									"case":	465,
									"scores":	[-4.13425278592086]
								}, {
									"case":	466,
									"scores":	[-4.13425278592086]
								}, {
									"case":	467,
									"scores":	[-4.13425278592086]
								}, {
									"case":	468,
									"scores":	[-4.13425278592086]
								}, {
									"case":	469,
									"scores":	[-4.13425278592086]
								}, {
									"case":	470,
									"scores":	[-4.13425278592086]
								}, {
									"case":	471,
									"scores":	[-4.13425278592086]
								}, {
									"case":	472,
									"scores":	[-4.13425278592086]
								}, {
									"case":	473,
									"scores":	[-4.13425278592086]
								}, {
									"case":	474,
									"scores":	[-4.13425278592086]
								}, {
									"case":	475,
									"scores":	[-4.13425278592086]
								}, {
									"case":	476,
									"scores":	[-4.13425278592086]
								}, {
									"case":	477,
									"scores":	[-4.13425278592086]
								}, {
									"case":	478,
									"scores":	[-4.13425278592086]
								}, {
									"case":	479,
									"scores":	[-4.13425278592086]
								}, {
									"case":	480,
									"scores":	[-4.13425278592086]
								}, {
									"case":	481,
									"scores":	[-4.13425278592086]
								}, {
									"case":	482,
									"scores":	[-4.13425278592086]
								}, {
									"case":	483,
									"scores":	[-4.13425278592086]
								}, {
									"case":	484,
									"scores":	[-4.13425278592086]
								}, {
									"case":	485,
									"scores":	[-4.13425278592086]
								}, {
									"case":	486,
									"scores":	[-4.13425278592086]
								}, {
									"case":	487,
									"scores":	[-4.13425278592086]
								}, {
									"case":	488,
									"scores":	[-4.13425278592086]
								}, {
									"case":	489,
									"scores":	[-4.13425278592086]
								}, {
									"case":	490,
									"scores":	[-4.13425278592086]
								}, {
									"case":	491,
									"scores":	[-4.13425278592086]
								}, {
									"case":	492,
									"scores":	[-4.13425278592086]
								}, {
									"case":	493,
									"scores":	[-4.13425278592086]
								}, {
									"case":	494,
									"scores":	[-4.13425278592086]
								}, {
									"case":	495,
									"scores":	[-4.13425278592086]
								}, {
									"case":	496,
									"scores":	[-4.13425278592086]
								}, {
									"case":	497,
									"scores":	[-4.13425278592086]
								}, {
									"case":	498,
									"scores":	[-4.13425278592086]
								}, {
									"case":	499,
									"scores":	[-4.13425278592086]
								}, {
									"case":	500,
									"scores":	[-4.13425278592086]
								}, {
									"case":	501,
									"scores":	[-4.13425278592086]
								}, {
									"case":	502,
									"scores":	[-4.13425278592086]
								}, {
									"case":	503,
									"scores":	[-4.13425278592086]
								}, {
									"case":	504,
									"scores":	[-4.13425278592086]
								}, {
									"case":	505,
									"scores":	[-4.13425278592086]
								}, {
									"case":	506,
									"scores":	[-4.13425278592086]
								}, {
									"case":	507,
									"scores":	[-4.13425278592086]
								}, {
									"case":	508,
									"scores":	[-4.13425278592086]
								}, {
									"case":	509,
									"scores":	[-4.13425278592086]
								}, {
									"case":	510,
									"scores":	[-4.13425278592086]
								}, {
									"case":	511,
									"scores":	[-4.13425278592086]
								}, {
									"case":	512,
									"scores":	[-4.13425278592086]
								}, {
									"case":	513,
									"scores":	[-4.13425278592086]
								}, {
									"case":	514,
									"scores":	[-4.13425278592086]
								}, {
									"case":	515,
									"scores":	[-4.13425278592086]
								}, {
									"case":	516,
									"scores":	[-4.13425278592086]
								}, {
									"case":	517,
									"scores":	[-4.13425278592086]
								}, {
									"case":	518,
									"scores":	[-4.13425278592086]
								}, {
									"case":	519,
									"scores":	[-4.13425278592086]
								}, {
									"case":	520,
									"scores":	[-4.13425278592086]
								}, {
									"case":	521,
									"scores":	[-4.13425278592086]
								}, {
									"case":	522,
									"scores":	[-4.13425278592086]
								}, {
									"case":	523,
									"scores":	[-4.13425278592086]
								}, {
									"case":	524,
									"scores":	[-4.13425278592086]
								}, {
									"case":	525,
									"scores":	[-4.13425278592086]
								}, {
									"case":	526,
									"scores":	[-4.13425278592086]
								}, {
									"case":	527,
									"scores":	[-4.13425278592086]
								}, {
									"case":	528,
									"scores":	[-4.13425278592086]
								}, {
									"case":	529,
									"scores":	[-4.13425278592086]
								}, {
									"case":	530,
									"scores":	[-4.13425278592086]
								}, {
									"case":	531,
									"scores":	[-4.13425278592086]
								}, {
									"case":	532,
									"scores":	[-4.13425278592086]
								}, {
									"case":	533,
									"scores":	[-4.13425278592086]
								}, {
									"case":	534,
									"scores":	[-4.13425278592086]
								}, {
									"case":	535,
									"scores":	[-4.13425278592086]
								}, {
									"case":	536,
									"scores":	[-4.13425278592086]
								}, {
									"case":	537,
									"scores":	[-4.13425278592086]
								}, {
									"case":	538,
									"scores":	[-4.13425278592086]
								}, {
									"case":	539,
									"scores":	[-4.13425278592086]
								}, {
									"case":	540,
									"scores":	[-4.13425278592086]
								}, {
									"case":	541,
									"scores":	[-4.13425278592086]
								}, {
									"case":	542,
									"scores":	[-4.13425278592086]
								}, {
									"case":	543,
									"scores":	[-4.13425278592086]
								}, {
									"case":	544,
									"scores":	[-4.13425278592086]
								}, {
									"case":	545,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	546,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	547,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	548,
									"scores":	[-5.80284222172086, -5.80284222172086, -5.49441968902086, -5.49441968902086, -5.49441968902086, -5.49441968902086, -5.78853470902086, -5.89393485382086, -5.89393485382086, -5.85943670282086, -5.49441968902086, -5.58384238902086, -5.58384238902086, -5.49441968902086, -5.49441968902086, -5.00146508592086, -5.49441968902086, -5.49441968902086, -5.17872792592086, -5.49441968902086, -5.49441968902086, -5.49441968902086, -5.49441968902086, -5.49441968902086, -5.00146508592086, -5.49441968902086, -5.00146508592086, -5.49441968902086]
								}, {
									"case":	549,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	550,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	551,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	552,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	553,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	554,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	555,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	556,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}, {
									"case":	557,
									"scores":	[-8.06562402172086, -8.06562402172086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -8.05131650902086, -8.15671665382086, -8.15671665382086, -8.12221850282086, -7.75720148902086, -7.84662418902086, -7.84662418902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.75720148902086, -7.44150972592086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.75720148902086, -7.26424688592086, -7.75720148902086, -7.26424688592086, -7.75720148902086]
								}]
						}, {
							"switch":	97,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1397,
							"begin_column":	9,
							"end_line":	1397,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L1397\", 28, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    method = 0;\n", "{\n}\n", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0 * flags)", "method = (0 * imagic1)", "method = (0 * in)", "method = (0 * stamp)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (flags != 0)", "method = (flags != imagic1)", "method = (flags != stamp)", "method = (flags * imagic1)", "method = (flags * in)", "method = (flags * stamp)", "method = (flags + 0)", "method = (flags + imagic1)", "method = (flags + stamp)", "method = (flags - 0)", "method = (flags - imagic1)", "method = (flags - stamp)", "method = (flags == 0)", "method = (flags == imagic1)", "method = (flags == stamp)", "method = (imagic1 != 0)", "method = (imagic1 != stamp)", "method = (imagic1 * flags)", "method = (imagic1 * in)", "method = (imagic1 * stamp)", "method = (imagic1 + 0)", "method = (imagic1 + stamp)", "method = (imagic1 - 0)", "method = (imagic1 - stamp)", "method = (imagic1 == 0)", "method = (imagic1 == stamp)", "method = (imagic1)", "method = (in != 0)", "method = (in != flags)", "method = (in != imagic1)", "method = (in != stamp)", "method = (in * flags)", "method = (in * imagic1)", "method = (in * stamp)", "method = (in + 0)", "method = (in + flags)", "method = (in + imagic1)", "method = (in + stamp)", "method = (in - 0)", "method = (in - flags)", "method = (in - imagic1)", "method = (in - stamp)", "method = (in == 0)", "method = (in == flags)", "method = (in == imagic1)", "method = (in == stamp)", "method = (in)", "method = (magic != 0)", "method = (magic == 0)", "method = (stamp != 0)", "method = (stamp * flags)", "method = (stamp * imagic1)", "method = (stamp * in)", "method = (stamp + 0)", "method = (stamp - 0)", "method = (stamp == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.43508855892086, -5.43508855892086, -4.52686008592086, -4.52686008592086, -4.52686008592086, -4.52686008592086, -4.56430447692086, -4.60009631992086, -4.60009631992086, -4.56395818992086, -4.52686008592086, -4.96382508592086, -4.96382508592086, -4.52686008592086, -4.52686008592086, -4.04550478592086, -4.52686008592086, -4.52686008592086, -4.31028628592086, -4.52686008592086, -4.52686008592086, -4.52686008592086, -4.52686008592086, -4.52686008592086, -4.04550478592086, -4.52686008592086, -4.04550478592086, -4.52686008592086]
								}, {
									"case":	2,
									"scores":	[-4.13425278592086]
								}, {
									"case":	3,
									"scores":	[-4.13425278592086]
								}, {
									"case":	4,
									"scores":	[-4.13425278592086]
								}, {
									"case":	5,
									"scores":	[-4.13425278592086]
								}, {
									"case":	6,
									"scores":	[-4.13425278592086]
								}, {
									"case":	7,
									"scores":	[-4.13425278592086]
								}, {
									"case":	8,
									"scores":	[-4.13425278592086]
								}, {
									"case":	9,
									"scores":	[-4.13425278592086]
								}, {
									"case":	10,
									"scores":	[-4.13425278592086]
								}, {
									"case":	11,
									"scores":	[-4.13425278592086]
								}, {
									"case":	12,
									"scores":	[-4.13425278592086]
								}, {
									"case":	13,
									"scores":	[-4.13425278592086]
								}, {
									"case":	14,
									"scores":	[-4.13425278592086]
								}, {
									"case":	15,
									"scores":	[-4.13425278592086]
								}, {
									"case":	16,
									"scores":	[-4.13425278592086]
								}, {
									"case":	17,
									"scores":	[-4.13425278592086]
								}, {
									"case":	18,
									"scores":	[-4.13425278592086]
								}, {
									"case":	19,
									"scores":	[-4.13425278592086]
								}, {
									"case":	20,
									"scores":	[-4.13425278592086]
								}, {
									"case":	21,
									"scores":	[-4.13425278592086]
								}, {
									"case":	22,
									"scores":	[-4.13425278592086]
								}, {
									"case":	23,
									"scores":	[-4.13425278592086]
								}, {
									"case":	24,
									"scores":	[-4.13425278592086]
								}, {
									"case":	25,
									"scores":	[-4.13425278592086]
								}, {
									"case":	26,
									"scores":	[-4.13425278592086]
								}, {
									"case":	27,
									"scores":	[-4.13425278592086]
								}, {
									"case":	28,
									"scores":	[-4.13425278592086]
								}, {
									"case":	29,
									"scores":	[-4.13425278592086]
								}, {
									"case":	30,
									"scores":	[-4.13425278592086]
								}, {
									"case":	31,
									"scores":	[-4.13425278592086]
								}, {
									"case":	32,
									"scores":	[-4.13425278592086]
								}, {
									"case":	33,
									"scores":	[-4.13425278592086]
								}, {
									"case":	34,
									"scores":	[-4.13425278592086]
								}, {
									"case":	35,
									"scores":	[-4.13425278592086]
								}, {
									"case":	36,
									"scores":	[-4.13425278592086]
								}, {
									"case":	37,
									"scores":	[-4.13425278592086]
								}, {
									"case":	38,
									"scores":	[-4.13425278592086]
								}, {
									"case":	39,
									"scores":	[-4.13425278592086]
								}, {
									"case":	40,
									"scores":	[-4.13425278592086]
								}, {
									"case":	41,
									"scores":	[-4.13425278592086]
								}, {
									"case":	42,
									"scores":	[-4.13425278592086]
								}, {
									"case":	43,
									"scores":	[-4.13425278592086]
								}, {
									"case":	44,
									"scores":	[-4.13425278592086]
								}, {
									"case":	45,
									"scores":	[-4.13425278592086]
								}, {
									"case":	46,
									"scores":	[-4.13425278592086]
								}, {
									"case":	47,
									"scores":	[-4.13425278592086]
								}, {
									"case":	48,
									"scores":	[-4.13425278592086]
								}, {
									"case":	49,
									"scores":	[-4.13425278592086]
								}, {
									"case":	50,
									"scores":	[-4.13425278592086]
								}, {
									"case":	51,
									"scores":	[-4.13425278592086]
								}, {
									"case":	52,
									"scores":	[-4.13425278592086]
								}, {
									"case":	53,
									"scores":	[-4.13425278592086]
								}, {
									"case":	54,
									"scores":	[-4.13425278592086]
								}, {
									"case":	55,
									"scores":	[-4.13425278592086]
								}, {
									"case":	56,
									"scores":	[-4.13425278592086]
								}, {
									"case":	57,
									"scores":	[-4.13425278592086]
								}, {
									"case":	58,
									"scores":	[-4.13425278592086]
								}, {
									"case":	59,
									"scores":	[-4.13425278592086]
								}, {
									"case":	60,
									"scores":	[-4.13425278592086]
								}, {
									"case":	61,
									"scores":	[-4.13425278592086]
								}, {
									"case":	62,
									"scores":	[-4.13425278592086]
								}, {
									"case":	63,
									"scores":	[-4.13425278592086]
								}, {
									"case":	64,
									"scores":	[-4.13425278592086]
								}, {
									"case":	65,
									"scores":	[-4.13425278592086]
								}, {
									"case":	66,
									"scores":	[-4.13425278592086]
								}, {
									"case":	67,
									"scores":	[-4.13425278592086]
								}, {
									"case":	68,
									"scores":	[-4.13425278592086]
								}, {
									"case":	69,
									"scores":	[-4.13425278592086]
								}, {
									"case":	70,
									"scores":	[-4.13425278592086]
								}, {
									"case":	71,
									"scores":	[-4.13425278592086]
								}, {
									"case":	72,
									"scores":	[-4.13425278592086]
								}, {
									"case":	73,
									"scores":	[-4.13425278592086]
								}, {
									"case":	74,
									"scores":	[-4.13425278592086]
								}, {
									"case":	75,
									"scores":	[-4.13425278592086]
								}]
						}]
				}, {
					"line":	1397,
					"switches":	[{
							"switch":	98,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1398,
							"begin_column":	7,
							"end_line":	1398,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.11405007860334]
								}, {
									"case":	2,
									"scores":	[-4.11405007860334]
								}, {
									"case":	3,
									"scores":	[-4.11405007860334]
								}, {
									"case":	4,
									"scores":	[-4.11405007860334]
								}, {
									"case":	5,
									"scores":	[-4.11405007860334]
								}, {
									"case":	6,
									"scores":	[-4.11405007860334]
								}, {
									"case":	7,
									"scores":	[-4.11405007860334]
								}, {
									"case":	8,
									"scores":	[-4.11405007860334]
								}, {
									"case":	9,
									"scores":	[-4.11405007860334]
								}, {
									"case":	10,
									"scores":	[-4.11405007860334]
								}, {
									"case":	11,
									"scores":	[-4.11405007860334]
								}, {
									"case":	12,
									"scores":	[-4.11405007860334]
								}, {
									"case":	13,
									"scores":	[-4.11405007860334]
								}, {
									"case":	14,
									"scores":	[-4.11405007860334]
								}, {
									"case":	15,
									"scores":	[-4.11405007860334]
								}, {
									"case":	16,
									"scores":	[-4.11405007860334]
								}, {
									"case":	17,
									"scores":	[-4.11405007860334]
								}, {
									"case":	18,
									"scores":	[-4.11405007860334]
								}, {
									"case":	19,
									"scores":	[-4.11405007860334]
								}, {
									"case":	20,
									"scores":	[-4.11405007860334]
								}, {
									"case":	21,
									"scores":	[-4.11405007860334]
								}, {
									"case":	22,
									"scores":	[-4.11405007860334]
								}, {
									"case":	23,
									"scores":	[-4.11405007860334]
								}, {
									"case":	24,
									"scores":	[-4.11405007860334]
								}, {
									"case":	25,
									"scores":	[-4.11405007860334]
								}, {
									"case":	26,
									"scores":	[-4.11405007860334]
								}, {
									"case":	27,
									"scores":	[-4.11405007860334]
								}, {
									"case":	28,
									"scores":	[-4.11405007860334]
								}, {
									"case":	29,
									"scores":	[-4.11405007860334]
								}, {
									"case":	30,
									"scores":	[-4.11405007860334]
								}, {
									"case":	31,
									"scores":	[-4.11405007860334]
								}, {
									"case":	32,
									"scores":	[-4.11405007860334]
								}, {
									"case":	33,
									"scores":	[-4.11405007860334]
								}, {
									"case":	34,
									"scores":	[-4.11405007860334]
								}, {
									"case":	35,
									"scores":	[-4.11405007860334]
								}, {
									"case":	36,
									"scores":	[-4.11405007860334]
								}, {
									"case":	37,
									"scores":	[-4.11405007860334]
								}, {
									"case":	38,
									"scores":	[-4.11405007860334]
								}, {
									"case":	39,
									"scores":	[-4.11405007860334]
								}, {
									"case":	40,
									"scores":	[-4.11405007860334]
								}, {
									"case":	41,
									"scores":	[-4.11405007860334]
								}, {
									"case":	42,
									"scores":	[-4.11405007860334]
								}, {
									"case":	43,
									"scores":	[-4.11405007860334]
								}, {
									"case":	44,
									"scores":	[-4.11405007860334]
								}, {
									"case":	45,
									"scores":	[-4.11405007860334]
								}, {
									"case":	46,
									"scores":	[-4.11405007860334]
								}, {
									"case":	47,
									"scores":	[-4.11405007860334]
								}, {
									"case":	48,
									"scores":	[-4.11405007860334]
								}, {
									"case":	49,
									"scores":	[-4.11405007860334]
								}, {
									"case":	50,
									"scores":	[-4.11405007860334]
								}, {
									"case":	51,
									"scores":	[-4.11405007860334]
								}, {
									"case":	52,
									"scores":	[-4.11405007860334]
								}, {
									"case":	53,
									"scores":	[-4.11405007860334]
								}, {
									"case":	54,
									"scores":	[-4.11405007860334]
								}, {
									"case":	55,
									"scores":	[-4.11405007860334]
								}, {
									"case":	56,
									"scores":	[-4.11405007860334]
								}, {
									"case":	57,
									"scores":	[-4.11405007860334]
								}, {
									"case":	58,
									"scores":	[-4.11405007860334]
								}, {
									"case":	59,
									"scores":	[-4.11405007860334]
								}, {
									"case":	60,
									"scores":	[-4.11405007860334]
								}, {
									"case":	61,
									"scores":	[-4.11405007860334]
								}, {
									"case":	62,
									"scores":	[-4.11405007860334]
								}, {
									"case":	63,
									"scores":	[-4.11405007860334]
								}, {
									"case":	64,
									"scores":	[-4.11405007860334]
								}, {
									"case":	65,
									"scores":	[-4.11405007860334]
								}, {
									"case":	66,
									"scores":	[-4.11405007860334]
								}, {
									"case":	67,
									"scores":	[-4.11405007860334]
								}, {
									"case":	68,
									"scores":	[-4.11405007860334]
								}, {
									"case":	69,
									"scores":	[-4.11405007860334]
								}, {
									"case":	70,
									"scores":	[-4.11405007860334]
								}, {
									"case":	71,
									"scores":	[-4.11405007860334]
								}, {
									"case":	72,
									"scores":	[-4.11405007860334]
								}, {
									"case":	73,
									"scores":	[-4.11405007860334]
								}, {
									"case":	74,
									"scores":	[-4.11405007860334]
								}, {
									"case":	75,
									"scores":	[-4.11405007860334]
								}, {
									"case":	76,
									"scores":	[-4.11405007860334]
								}, {
									"case":	77,
									"scores":	[-4.11405007860334]
								}, {
									"case":	78,
									"scores":	[-4.11405007860334]
								}, {
									"case":	79,
									"scores":	[-4.11405007860334]
								}, {
									"case":	80,
									"scores":	[-4.11405007860334]
								}, {
									"case":	81,
									"scores":	[-4.11405007860334]
								}, {
									"case":	82,
									"scores":	[-4.11405007860334]
								}, {
									"case":	83,
									"scores":	[-4.11405007860334]
								}, {
									"case":	84,
									"scores":	[-4.11405007860334]
								}, {
									"case":	85,
									"scores":	[-4.11405007860334]
								}, {
									"case":	86,
									"scores":	[-4.11405007860334]
								}, {
									"case":	87,
									"scores":	[-4.11405007860334]
								}, {
									"case":	88,
									"scores":	[-4.11405007860334]
								}, {
									"case":	89,
									"scores":	[-4.11405007860334]
								}, {
									"case":	90,
									"scores":	[-4.11405007860334]
								}, {
									"case":	91,
									"scores":	[-4.11405007860334]
								}, {
									"case":	92,
									"scores":	[-4.11405007860334]
								}, {
									"case":	93,
									"scores":	[-4.11405007860334]
								}, {
									"case":	94,
									"scores":	[-4.11405007860334]
								}, {
									"case":	95,
									"scores":	[-4.11405007860334]
								}, {
									"case":	96,
									"scores":	[-4.11405007860334]
								}, {
									"case":	97,
									"scores":	[-4.11405007860334]
								}, {
									"case":	98,
									"scores":	[-4.11405007860334]
								}, {
									"case":	99,
									"scores":	[-4.11405007860334]
								}, {
									"case":	100,
									"scores":	[-4.11405007860334]
								}, {
									"case":	101,
									"scores":	[-4.11405007860334]
								}, {
									"case":	102,
									"scores":	[-4.11405007860334]
								}, {
									"case":	103,
									"scores":	[-4.11405007860334]
								}, {
									"case":	104,
									"scores":	[-4.11405007860334]
								}, {
									"case":	105,
									"scores":	[-4.11405007860334]
								}, {
									"case":	106,
									"scores":	[-4.11405007860334]
								}, {
									"case":	107,
									"scores":	[-4.11405007860334]
								}, {
									"case":	108,
									"scores":	[-4.11405007860334]
								}, {
									"case":	109,
									"scores":	[-4.11405007860334]
								}, {
									"case":	110,
									"scores":	[-4.11405007860334]
								}, {
									"case":	111,
									"scores":	[-4.11405007860334]
								}, {
									"case":	112,
									"scores":	[-4.11405007860334]
								}, {
									"case":	113,
									"scores":	[-4.11405007860334]
								}, {
									"case":	114,
									"scores":	[-4.11405007860334]
								}, {
									"case":	115,
									"scores":	[-4.11405007860334]
								}, {
									"case":	116,
									"scores":	[-4.11405007860334]
								}, {
									"case":	117,
									"scores":	[-4.11405007860334]
								}, {
									"case":	118,
									"scores":	[-4.11405007860334]
								}, {
									"case":	119,
									"scores":	[-4.11405007860334]
								}, {
									"case":	120,
									"scores":	[-4.11405007860334]
								}, {
									"case":	121,
									"scores":	[-4.11405007860334]
								}, {
									"case":	122,
									"scores":	[-4.11405007860334]
								}, {
									"case":	123,
									"scores":	[-4.11405007860334]
								}, {
									"case":	124,
									"scores":	[-4.11405007860334]
								}, {
									"case":	125,
									"scores":	[-4.11405007860334]
								}, {
									"case":	126,
									"scores":	[-4.11405007860334]
								}, {
									"case":	127,
									"scores":	[-4.11405007860334]
								}, {
									"case":	128,
									"scores":	[-4.11405007860334]
								}, {
									"case":	129,
									"scores":	[-4.11405007860334]
								}, {
									"case":	130,
									"scores":	[-4.11405007860334]
								}, {
									"case":	131,
									"scores":	[-4.11405007860334]
								}, {
									"case":	132,
									"scores":	[-4.11405007860334]
								}, {
									"case":	133,
									"scores":	[-4.11405007860334]
								}, {
									"case":	134,
									"scores":	[-4.11405007860334]
								}, {
									"case":	135,
									"scores":	[-4.11405007860334]
								}, {
									"case":	136,
									"scores":	[-4.11405007860334]
								}, {
									"case":	137,
									"scores":	[-4.11405007860334]
								}, {
									"case":	138,
									"scores":	[-4.11405007860334]
								}, {
									"case":	139,
									"scores":	[-4.11405007860334]
								}, {
									"case":	140,
									"scores":	[-4.11405007860334]
								}, {
									"case":	141,
									"scores":	[-4.11405007860334]
								}, {
									"case":	142,
									"scores":	[-4.11405007860334]
								}, {
									"case":	143,
									"scores":	[-4.11405007860334]
								}, {
									"case":	144,
									"scores":	[-4.11405007860334]
								}, {
									"case":	145,
									"scores":	[-4.11405007860334]
								}, {
									"case":	146,
									"scores":	[-4.11405007860334]
								}, {
									"case":	147,
									"scores":	[-4.11405007860334]
								}, {
									"case":	148,
									"scores":	[-4.11405007860334]
								}, {
									"case":	149,
									"scores":	[-4.11405007860334]
								}, {
									"case":	150,
									"scores":	[-4.11405007860334]
								}, {
									"case":	151,
									"scores":	[-4.11405007860334]
								}, {
									"case":	152,
									"scores":	[-4.11405007860334]
								}, {
									"case":	153,
									"scores":	[-4.11405007860334]
								}, {
									"case":	154,
									"scores":	[-4.11405007860334]
								}, {
									"case":	155,
									"scores":	[-4.11405007860334]
								}, {
									"case":	156,
									"scores":	[-4.11405007860334]
								}, {
									"case":	157,
									"scores":	[-4.11405007860334]
								}, {
									"case":	158,
									"scores":	[-4.11405007860334]
								}, {
									"case":	159,
									"scores":	[-4.11405007860334]
								}, {
									"case":	160,
									"scores":	[-4.11405007860334]
								}, {
									"case":	161,
									"scores":	[-4.11405007860334]
								}, {
									"case":	162,
									"scores":	[-4.11405007860334]
								}, {
									"case":	163,
									"scores":	[-4.11405007860334]
								}, {
									"case":	164,
									"scores":	[-4.11405007860334]
								}, {
									"case":	165,
									"scores":	[-4.11405007860334]
								}, {
									"case":	166,
									"scores":	[-4.11405007860334]
								}, {
									"case":	167,
									"scores":	[-4.11405007860334]
								}, {
									"case":	168,
									"scores":	[-4.11405007860334]
								}, {
									"case":	169,
									"scores":	[-4.11405007860334]
								}, {
									"case":	170,
									"scores":	[-4.11405007860334]
								}, {
									"case":	171,
									"scores":	[-4.11405007860334]
								}, {
									"case":	172,
									"scores":	[-4.11405007860334]
								}, {
									"case":	173,
									"scores":	[-4.11405007860334]
								}, {
									"case":	174,
									"scores":	[-4.11405007860334]
								}, {
									"case":	175,
									"scores":	[-4.11405007860334]
								}, {
									"case":	176,
									"scores":	[-4.11405007860334]
								}, {
									"case":	177,
									"scores":	[-4.11405007860334]
								}, {
									"case":	178,
									"scores":	[-4.11405007860334]
								}, {
									"case":	179,
									"scores":	[-4.11405007860334]
								}, {
									"case":	180,
									"scores":	[-4.11405007860334]
								}, {
									"case":	181,
									"scores":	[-4.11405007860334]
								}, {
									"case":	182,
									"scores":	[-4.11405007860334]
								}, {
									"case":	183,
									"scores":	[-4.11405007860334]
								}, {
									"case":	184,
									"scores":	[-4.11405007860334]
								}, {
									"case":	185,
									"scores":	[-4.11405007860334]
								}, {
									"case":	186,
									"scores":	[-4.11405007860334]
								}, {
									"case":	187,
									"scores":	[-4.11405007860334]
								}, {
									"case":	188,
									"scores":	[-4.11405007860334]
								}, {
									"case":	189,
									"scores":	[-4.11405007860334]
								}, {
									"case":	190,
									"scores":	[-4.11405007860334]
								}, {
									"case":	191,
									"scores":	[-4.11405007860334]
								}, {
									"case":	192,
									"scores":	[-4.11405007860334]
								}, {
									"case":	193,
									"scores":	[-4.11405007860334]
								}, {
									"case":	194,
									"scores":	[-4.11405007860334]
								}, {
									"case":	195,
									"scores":	[-4.11405007860334]
								}, {
									"case":	196,
									"scores":	[-4.11405007860334]
								}, {
									"case":	197,
									"scores":	[-4.11405007860334]
								}, {
									"case":	198,
									"scores":	[-4.11405007860334]
								}, {
									"case":	199,
									"scores":	[-4.11405007860334]
								}, {
									"case":	200,
									"scores":	[-4.11405007860334]
								}, {
									"case":	201,
									"scores":	[-4.11405007860334]
								}, {
									"case":	202,
									"scores":	[-4.11405007860334]
								}, {
									"case":	203,
									"scores":	[-4.11405007860334]
								}, {
									"case":	204,
									"scores":	[-4.11405007860334]
								}, {
									"case":	205,
									"scores":	[-4.11405007860334]
								}, {
									"case":	206,
									"scores":	[-4.11405007860334]
								}, {
									"case":	207,
									"scores":	[-4.11405007860334]
								}, {
									"case":	208,
									"scores":	[-4.11405007860334]
								}, {
									"case":	209,
									"scores":	[-4.11405007860334]
								}, {
									"case":	210,
									"scores":	[-4.11405007860334]
								}, {
									"case":	211,
									"scores":	[-4.11405007860334]
								}, {
									"case":	212,
									"scores":	[-4.11405007860334]
								}, {
									"case":	213,
									"scores":	[-4.11405007860334]
								}, {
									"case":	214,
									"scores":	[-4.11405007860334]
								}, {
									"case":	215,
									"scores":	[-4.11405007860334]
								}, {
									"case":	216,
									"scores":	[-4.11405007860334]
								}, {
									"case":	217,
									"scores":	[-4.11405007860334]
								}, {
									"case":	218,
									"scores":	[-4.11405007860334]
								}, {
									"case":	219,
									"scores":	[-4.11405007860334]
								}, {
									"case":	220,
									"scores":	[-4.11405007860334]
								}, {
									"case":	221,
									"scores":	[-4.11405007860334]
								}, {
									"case":	222,
									"scores":	[-4.11405007860334]
								}, {
									"case":	223,
									"scores":	[-4.11405007860334]
								}, {
									"case":	224,
									"scores":	[-4.11405007860334]
								}, {
									"case":	225,
									"scores":	[-4.11405007860334]
								}, {
									"case":	226,
									"scores":	[-4.11405007860334]
								}, {
									"case":	227,
									"scores":	[-4.11405007860334]
								}, {
									"case":	228,
									"scores":	[-4.11405007860334]
								}, {
									"case":	229,
									"scores":	[-4.11405007860334]
								}, {
									"case":	230,
									"scores":	[-4.11405007860334]
								}, {
									"case":	231,
									"scores":	[-4.11405007860334]
								}, {
									"case":	232,
									"scores":	[-4.11405007860334]
								}, {
									"case":	233,
									"scores":	[-4.11405007860334]
								}, {
									"case":	234,
									"scores":	[-4.11405007860334]
								}, {
									"case":	235,
									"scores":	[-4.11405007860334]
								}, {
									"case":	236,
									"scores":	[-4.11405007860334]
								}, {
									"case":	237,
									"scores":	[-4.11405007860334]
								}, {
									"case":	238,
									"scores":	[-4.11405007860334]
								}, {
									"case":	239,
									"scores":	[-4.11405007860334]
								}, {
									"case":	240,
									"scores":	[-4.11405007860334]
								}, {
									"case":	241,
									"scores":	[-4.11405007860334]
								}, {
									"case":	242,
									"scores":	[-4.11405007860334]
								}, {
									"case":	243,
									"scores":	[-4.11405007860334]
								}, {
									"case":	244,
									"scores":	[-4.11405007860334]
								}, {
									"case":	245,
									"scores":	[-4.11405007860334]
								}, {
									"case":	246,
									"scores":	[-4.11405007860334]
								}, {
									"case":	247,
									"scores":	[-4.11405007860334]
								}, {
									"case":	248,
									"scores":	[-4.11405007860334]
								}, {
									"case":	249,
									"scores":	[-4.11405007860334]
								}, {
									"case":	250,
									"scores":	[-4.11405007860334]
								}, {
									"case":	251,
									"scores":	[-4.11405007860334]
								}, {
									"case":	252,
									"scores":	[-4.11405007860334]
								}, {
									"case":	253,
									"scores":	[-4.11405007860334]
								}, {
									"case":	254,
									"scores":	[-4.11405007860334]
								}, {
									"case":	255,
									"scores":	[-4.11405007860334]
								}, {
									"case":	256,
									"scores":	[-4.11405007860334]
								}, {
									"case":	257,
									"scores":	[-4.11405007860334]
								}, {
									"case":	258,
									"scores":	[-4.11405007860334]
								}, {
									"case":	259,
									"scores":	[-4.11405007860334]
								}, {
									"case":	260,
									"scores":	[-4.11405007860334]
								}, {
									"case":	261,
									"scores":	[-4.11405007860334]
								}, {
									"case":	262,
									"scores":	[-4.11405007860334]
								}, {
									"case":	263,
									"scores":	[-4.11405007860334]
								}, {
									"case":	264,
									"scores":	[-4.11405007860334]
								}, {
									"case":	265,
									"scores":	[-4.11405007860334]
								}, {
									"case":	266,
									"scores":	[-4.11405007860334]
								}, {
									"case":	267,
									"scores":	[-4.11405007860334]
								}, {
									"case":	268,
									"scores":	[-4.11405007860334]
								}, {
									"case":	269,
									"scores":	[-4.11405007860334]
								}, {
									"case":	270,
									"scores":	[-4.11405007860334]
								}, {
									"case":	271,
									"scores":	[-4.11405007860334]
								}, {
									"case":	272,
									"scores":	[-4.11405007860334]
								}, {
									"case":	273,
									"scores":	[-4.11405007860334]
								}, {
									"case":	274,
									"scores":	[-4.11405007860334]
								}, {
									"case":	275,
									"scores":	[-4.11405007860334]
								}, {
									"case":	276,
									"scores":	[-4.11405007860334]
								}, {
									"case":	277,
									"scores":	[-4.11405007860334]
								}, {
									"case":	278,
									"scores":	[-4.11405007860334]
								}, {
									"case":	279,
									"scores":	[-4.11405007860334]
								}, {
									"case":	280,
									"scores":	[-4.11405007860334]
								}, {
									"case":	281,
									"scores":	[-4.11405007860334]
								}, {
									"case":	282,
									"scores":	[-4.11405007860334]
								}, {
									"case":	283,
									"scores":	[-4.11405007860334]
								}, {
									"case":	284,
									"scores":	[-4.11405007860334]
								}, {
									"case":	285,
									"scores":	[-4.11405007860334]
								}, {
									"case":	286,
									"scores":	[-4.11405007860334]
								}, {
									"case":	287,
									"scores":	[-4.11405007860334]
								}, {
									"case":	288,
									"scores":	[-4.11405007860334]
								}, {
									"case":	289,
									"scores":	[-4.11405007860334]
								}, {
									"case":	290,
									"scores":	[-4.11405007860334]
								}, {
									"case":	291,
									"scores":	[-4.11405007860334]
								}, {
									"case":	292,
									"scores":	[-4.11405007860334]
								}, {
									"case":	293,
									"scores":	[-4.11405007860334]
								}, {
									"case":	294,
									"scores":	[-4.11405007860334]
								}, {
									"case":	295,
									"scores":	[-4.11405007860334]
								}, {
									"case":	296,
									"scores":	[-4.11405007860334]
								}, {
									"case":	297,
									"scores":	[-4.11405007860334]
								}, {
									"case":	298,
									"scores":	[-4.11405007860334]
								}, {
									"case":	299,
									"scores":	[-4.11405007860334]
								}, {
									"case":	300,
									"scores":	[-4.11405007860334]
								}, {
									"case":	301,
									"scores":	[-4.11405007860334]
								}, {
									"case":	302,
									"scores":	[-4.11405007860334]
								}, {
									"case":	303,
									"scores":	[-4.11405007860334]
								}, {
									"case":	304,
									"scores":	[-4.11405007860334]
								}, {
									"case":	305,
									"scores":	[-4.11405007860334]
								}, {
									"case":	306,
									"scores":	[-4.11405007860334]
								}, {
									"case":	307,
									"scores":	[-4.11405007860334]
								}, {
									"case":	308,
									"scores":	[-4.11405007860334]
								}, {
									"case":	309,
									"scores":	[-4.11405007860334]
								}, {
									"case":	310,
									"scores":	[-4.11405007860334]
								}, {
									"case":	311,
									"scores":	[-4.11405007860334]
								}, {
									"case":	312,
									"scores":	[-4.11405007860334]
								}, {
									"case":	313,
									"scores":	[-4.11405007860334]
								}, {
									"case":	314,
									"scores":	[-4.11405007860334]
								}, {
									"case":	315,
									"scores":	[-4.11405007860334]
								}, {
									"case":	316,
									"scores":	[-4.11405007860334]
								}, {
									"case":	317,
									"scores":	[-4.11405007860334]
								}, {
									"case":	318,
									"scores":	[-4.11405007860334]
								}, {
									"case":	319,
									"scores":	[-4.11405007860334]
								}, {
									"case":	320,
									"scores":	[-4.11405007860334]
								}, {
									"case":	321,
									"scores":	[-4.11405007860334]
								}, {
									"case":	322,
									"scores":	[-4.11405007860334]
								}, {
									"case":	323,
									"scores":	[-4.11405007860334]
								}, {
									"case":	324,
									"scores":	[-4.11405007860334]
								}, {
									"case":	325,
									"scores":	[-4.11405007860334]
								}, {
									"case":	326,
									"scores":	[-4.11405007860334]
								}, {
									"case":	327,
									"scores":	[-4.11405007860334]
								}, {
									"case":	328,
									"scores":	[-4.11405007860334]
								}, {
									"case":	329,
									"scores":	[-4.11405007860334]
								}, {
									"case":	330,
									"scores":	[-4.11405007860334]
								}, {
									"case":	331,
									"scores":	[-4.11405007860334]
								}, {
									"case":	332,
									"scores":	[-4.11405007860334]
								}, {
									"case":	333,
									"scores":	[-4.11405007860334]
								}, {
									"case":	334,
									"scores":	[-4.11405007860334]
								}, {
									"case":	335,
									"scores":	[-4.11405007860334]
								}, {
									"case":	336,
									"scores":	[-4.11405007860334]
								}, {
									"case":	337,
									"scores":	[-4.11405007860334]
								}, {
									"case":	338,
									"scores":	[-4.11405007860334]
								}, {
									"case":	339,
									"scores":	[-4.11405007860334]
								}, {
									"case":	340,
									"scores":	[-4.11405007860334]
								}, {
									"case":	341,
									"scores":	[-4.11405007860334]
								}, {
									"case":	342,
									"scores":	[-4.11405007860334]
								}, {
									"case":	343,
									"scores":	[-4.11405007860334]
								}, {
									"case":	344,
									"scores":	[-4.11405007860334]
								}, {
									"case":	345,
									"scores":	[-4.11405007860334]
								}, {
									"case":	346,
									"scores":	[-4.11405007860334]
								}, {
									"case":	347,
									"scores":	[-4.11405007860334]
								}, {
									"case":	348,
									"scores":	[-4.11405007860334]
								}, {
									"case":	349,
									"scores":	[-4.11405007860334]
								}, {
									"case":	350,
									"scores":	[-4.11405007860334]
								}, {
									"case":	351,
									"scores":	[-4.11405007860334]
								}, {
									"case":	352,
									"scores":	[-4.11405007860334]
								}, {
									"case":	353,
									"scores":	[-4.11405007860334]
								}, {
									"case":	354,
									"scores":	[-4.11405007860334]
								}, {
									"case":	355,
									"scores":	[-4.11405007860334]
								}, {
									"case":	356,
									"scores":	[-4.11405007860334]
								}, {
									"case":	357,
									"scores":	[-4.11405007860334]
								}, {
									"case":	358,
									"scores":	[-4.11405007860334]
								}, {
									"case":	359,
									"scores":	[-4.11405007860334]
								}, {
									"case":	360,
									"scores":	[-4.11405007860334]
								}, {
									"case":	361,
									"scores":	[-4.11405007860334]
								}, {
									"case":	362,
									"scores":	[-4.11405007860334]
								}, {
									"case":	363,
									"scores":	[-4.11405007860334]
								}, {
									"case":	364,
									"scores":	[-4.11405007860334]
								}, {
									"case":	365,
									"scores":	[-4.11405007860334]
								}, {
									"case":	366,
									"scores":	[-4.11405007860334]
								}, {
									"case":	367,
									"scores":	[-4.11405007860334]
								}, {
									"case":	368,
									"scores":	[-4.11405007860334]
								}, {
									"case":	369,
									"scores":	[-4.11405007860334]
								}, {
									"case":	370,
									"scores":	[-4.11405007860334]
								}, {
									"case":	371,
									"scores":	[-4.11405007860334]
								}, {
									"case":	372,
									"scores":	[-4.11405007860334]
								}, {
									"case":	373,
									"scores":	[-4.11405007860334]
								}, {
									"case":	374,
									"scores":	[-4.11405007860334]
								}, {
									"case":	375,
									"scores":	[-4.11405007860334]
								}, {
									"case":	376,
									"scores":	[-4.11405007860334]
								}, {
									"case":	377,
									"scores":	[-4.11405007860334]
								}, {
									"case":	378,
									"scores":	[-4.11405007860334]
								}, {
									"case":	379,
									"scores":	[-4.11405007860334]
								}, {
									"case":	380,
									"scores":	[-4.11405007860334]
								}, {
									"case":	381,
									"scores":	[-4.11405007860334]
								}, {
									"case":	382,
									"scores":	[-4.11405007860334]
								}, {
									"case":	383,
									"scores":	[-4.11405007860334]
								}, {
									"case":	384,
									"scores":	[-4.11405007860334]
								}, {
									"case":	385,
									"scores":	[-4.11405007860334]
								}, {
									"case":	386,
									"scores":	[-4.11405007860334]
								}, {
									"case":	387,
									"scores":	[-4.11405007860334]
								}, {
									"case":	388,
									"scores":	[-4.11405007860334]
								}, {
									"case":	389,
									"scores":	[-4.11405007860334]
								}, {
									"case":	390,
									"scores":	[-4.11405007860334]
								}, {
									"case":	391,
									"scores":	[-4.11405007860334]
								}, {
									"case":	392,
									"scores":	[-4.11405007860334]
								}, {
									"case":	393,
									"scores":	[-4.11405007860334]
								}, {
									"case":	394,
									"scores":	[-4.11405007860334]
								}, {
									"case":	395,
									"scores":	[-4.11405007860334]
								}, {
									"case":	396,
									"scores":	[-4.11405007860334]
								}, {
									"case":	397,
									"scores":	[-4.11405007860334]
								}, {
									"case":	398,
									"scores":	[-4.11405007860334]
								}, {
									"case":	399,
									"scores":	[-4.11405007860334]
								}, {
									"case":	400,
									"scores":	[-4.11405007860334]
								}, {
									"case":	401,
									"scores":	[-4.11405007860334]
								}, {
									"case":	402,
									"scores":	[-4.11405007860334]
								}, {
									"case":	403,
									"scores":	[-4.11405007860334]
								}, {
									"case":	404,
									"scores":	[-4.11405007860334]
								}, {
									"case":	405,
									"scores":	[-4.11405007860334]
								}, {
									"case":	406,
									"scores":	[-4.11405007860334]
								}, {
									"case":	407,
									"scores":	[-4.11405007860334]
								}, {
									"case":	408,
									"scores":	[-4.11405007860334]
								}, {
									"case":	409,
									"scores":	[-4.11405007860334]
								}, {
									"case":	410,
									"scores":	[-4.11405007860334]
								}, {
									"case":	411,
									"scores":	[-4.11405007860334]
								}, {
									"case":	412,
									"scores":	[-4.11405007860334]
								}, {
									"case":	413,
									"scores":	[-4.11405007860334]
								}, {
									"case":	414,
									"scores":	[-4.11405007860334]
								}, {
									"case":	415,
									"scores":	[-4.11405007860334]
								}, {
									"case":	416,
									"scores":	[-4.11405007860334]
								}, {
									"case":	417,
									"scores":	[-4.11405007860334]
								}, {
									"case":	418,
									"scores":	[-4.11405007860334]
								}, {
									"case":	419,
									"scores":	[-4.11405007860334]
								}, {
									"case":	420,
									"scores":	[-4.11405007860334]
								}, {
									"case":	421,
									"scores":	[-4.11405007860334]
								}, {
									"case":	422,
									"scores":	[-4.11405007860334]
								}, {
									"case":	423,
									"scores":	[-4.11405007860334]
								}, {
									"case":	424,
									"scores":	[-4.11405007860334]
								}, {
									"case":	425,
									"scores":	[-4.11405007860334]
								}, {
									"case":	426,
									"scores":	[-4.11405007860334]
								}, {
									"case":	427,
									"scores":	[-4.11405007860334]
								}, {
									"case":	428,
									"scores":	[-4.11405007860334]
								}, {
									"case":	429,
									"scores":	[-4.11405007860334]
								}, {
									"case":	430,
									"scores":	[-4.11405007860334]
								}, {
									"case":	431,
									"scores":	[-4.11405007860334]
								}, {
									"case":	432,
									"scores":	[-4.11405007860334]
								}, {
									"case":	433,
									"scores":	[-4.11405007860334]
								}, {
									"case":	434,
									"scores":	[-4.11405007860334]
								}, {
									"case":	435,
									"scores":	[-4.11405007860334]
								}, {
									"case":	436,
									"scores":	[-4.11405007860334]
								}, {
									"case":	437,
									"scores":	[-4.11405007860334]
								}, {
									"case":	438,
									"scores":	[-4.11405007860334]
								}, {
									"case":	439,
									"scores":	[-4.11405007860334]
								}, {
									"case":	440,
									"scores":	[-4.11405007860334]
								}, {
									"case":	441,
									"scores":	[-4.11405007860334]
								}, {
									"case":	442,
									"scores":	[-4.11405007860334]
								}, {
									"case":	443,
									"scores":	[-4.11405007860334]
								}, {
									"case":	444,
									"scores":	[-4.11405007860334]
								}, {
									"case":	445,
									"scores":	[-4.11405007860334]
								}, {
									"case":	446,
									"scores":	[-4.11405007860334]
								}, {
									"case":	447,
									"scores":	[-4.11405007860334]
								}, {
									"case":	448,
									"scores":	[-4.11405007860334]
								}, {
									"case":	449,
									"scores":	[-4.11405007860334]
								}, {
									"case":	450,
									"scores":	[-4.11405007860334]
								}, {
									"case":	451,
									"scores":	[-4.11405007860334]
								}, {
									"case":	452,
									"scores":	[-4.11405007860334]
								}, {
									"case":	453,
									"scores":	[-4.11405007860334]
								}, {
									"case":	454,
									"scores":	[-4.11405007860334]
								}, {
									"case":	455,
									"scores":	[-4.11405007860334]
								}, {
									"case":	456,
									"scores":	[-4.11405007860334]
								}, {
									"case":	457,
									"scores":	[-4.11405007860334]
								}, {
									"case":	458,
									"scores":	[-4.11405007860334]
								}, {
									"case":	459,
									"scores":	[-4.11405007860334]
								}, {
									"case":	460,
									"scores":	[-4.11405007860334]
								}, {
									"case":	461,
									"scores":	[-4.11405007860334]
								}, {
									"case":	462,
									"scores":	[-4.11405007860334]
								}, {
									"case":	463,
									"scores":	[-4.11405007860334]
								}, {
									"case":	464,
									"scores":	[-4.11405007860334]
								}, {
									"case":	465,
									"scores":	[-4.11405007860334]
								}, {
									"case":	466,
									"scores":	[-4.11405007860334]
								}, {
									"case":	467,
									"scores":	[-4.11405007860334]
								}, {
									"case":	468,
									"scores":	[-4.11405007860334]
								}, {
									"case":	469,
									"scores":	[-4.11405007860334]
								}, {
									"case":	470,
									"scores":	[-4.11405007860334]
								}, {
									"case":	471,
									"scores":	[-4.11405007860334]
								}, {
									"case":	472,
									"scores":	[-4.11405007860334]
								}, {
									"case":	473,
									"scores":	[-4.11405007860334]
								}, {
									"case":	474,
									"scores":	[-4.11405007860334]
								}, {
									"case":	475,
									"scores":	[-4.11405007860334]
								}, {
									"case":	476,
									"scores":	[-4.11405007860334]
								}, {
									"case":	477,
									"scores":	[-4.11405007860334]
								}, {
									"case":	478,
									"scores":	[-4.11405007860334]
								}, {
									"case":	479,
									"scores":	[-4.11405007860334]
								}, {
									"case":	480,
									"scores":	[-4.11405007860334]
								}, {
									"case":	481,
									"scores":	[-4.11405007860334]
								}, {
									"case":	482,
									"scores":	[-4.11405007860334]
								}, {
									"case":	483,
									"scores":	[-4.11405007860334]
								}, {
									"case":	484,
									"scores":	[-4.11405007860334]
								}, {
									"case":	485,
									"scores":	[-4.11405007860334]
								}, {
									"case":	486,
									"scores":	[-4.11405007860334]
								}, {
									"case":	487,
									"scores":	[-4.11405007860334]
								}, {
									"case":	488,
									"scores":	[-4.11405007860334]
								}, {
									"case":	489,
									"scores":	[-4.11405007860334]
								}, {
									"case":	490,
									"scores":	[-4.11405007860334]
								}, {
									"case":	491,
									"scores":	[-4.11405007860334]
								}, {
									"case":	492,
									"scores":	[-4.11405007860334]
								}, {
									"case":	493,
									"scores":	[-4.11405007860334]
								}, {
									"case":	494,
									"scores":	[-4.11405007860334]
								}, {
									"case":	495,
									"scores":	[-4.11405007860334]
								}, {
									"case":	496,
									"scores":	[-4.11405007860334]
								}, {
									"case":	497,
									"scores":	[-4.11405007860334]
								}, {
									"case":	498,
									"scores":	[-4.11405007860334]
								}, {
									"case":	499,
									"scores":	[-4.11405007860334]
								}, {
									"case":	500,
									"scores":	[-4.11405007860334]
								}, {
									"case":	501,
									"scores":	[-4.11405007860334]
								}, {
									"case":	502,
									"scores":	[-4.11405007860334]
								}, {
									"case":	503,
									"scores":	[-4.11405007860334]
								}, {
									"case":	504,
									"scores":	[-4.11405007860334]
								}, {
									"case":	505,
									"scores":	[-4.11405007860334]
								}, {
									"case":	506,
									"scores":	[-4.11405007860334]
								}, {
									"case":	507,
									"scores":	[-4.11405007860334]
								}, {
									"case":	508,
									"scores":	[-4.11405007860334]
								}, {
									"case":	509,
									"scores":	[-4.11405007860334]
								}, {
									"case":	510,
									"scores":	[-4.11405007860334]
								}, {
									"case":	511,
									"scores":	[-4.11405007860334]
								}, {
									"case":	512,
									"scores":	[-4.11405007860334]
								}, {
									"case":	513,
									"scores":	[-4.11405007860334]
								}, {
									"case":	514,
									"scores":	[-4.11405007860334]
								}, {
									"case":	515,
									"scores":	[-4.11405007860334]
								}, {
									"case":	516,
									"scores":	[-4.11405007860334]
								}, {
									"case":	517,
									"scores":	[-4.11405007860334]
								}, {
									"case":	518,
									"scores":	[-4.11405007860334]
								}, {
									"case":	519,
									"scores":	[-4.11405007860334]
								}, {
									"case":	520,
									"scores":	[-4.11405007860334]
								}, {
									"case":	521,
									"scores":	[-4.11405007860334]
								}, {
									"case":	522,
									"scores":	[-4.11405007860334]
								}, {
									"case":	523,
									"scores":	[-4.11405007860334]
								}, {
									"case":	524,
									"scores":	[-4.11405007860334]
								}, {
									"case":	525,
									"scores":	[-4.11405007860334]
								}, {
									"case":	526,
									"scores":	[-4.11405007860334]
								}, {
									"case":	527,
									"scores":	[-4.11405007860334]
								}, {
									"case":	528,
									"scores":	[-4.11405007860334]
								}, {
									"case":	529,
									"scores":	[-4.11405007860334]
								}, {
									"case":	530,
									"scores":	[-4.11405007860334]
								}, {
									"case":	531,
									"scores":	[-4.11405007860334]
								}, {
									"case":	532,
									"scores":	[-4.11405007860334]
								}, {
									"case":	533,
									"scores":	[-4.11405007860334]
								}, {
									"case":	534,
									"scores":	[-4.11405007860334]
								}, {
									"case":	535,
									"scores":	[-4.11405007860334]
								}, {
									"case":	536,
									"scores":	[-4.11405007860334]
								}, {
									"case":	537,
									"scores":	[-4.11405007860334]
								}, {
									"case":	538,
									"scores":	[-4.11405007860334]
								}, {
									"case":	539,
									"scores":	[-4.11405007860334]
								}, {
									"case":	540,
									"scores":	[-4.11405007860334]
								}, {
									"case":	541,
									"scores":	[-4.11405007860334]
								}, {
									"case":	542,
									"scores":	[-4.11405007860334]
								}, {
									"case":	543,
									"scores":	[-4.11405007860334]
								}, {
									"case":	544,
									"scores":	[-4.11405007860334]
								}, {
									"case":	545,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	546,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	547,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	548,
									"scores":	[-5.69191370890334, -4.57080146970334, -6.36970014650334, -4.57080146970334, -6.36970014650334, -5.97018498170334, -5.97018498170334, -5.97018498170334, -5.97018498170334, -6.33520199550334, -5.97018498170334, -6.05960768170334, -6.05960768170334, -5.97018498170334, -5.97018498170334, -5.47723037860334, -5.97018498170334, -5.97018498170334, -5.97018498170334, -5.97018498170334, -5.65449321860334, -5.97018498170334, -5.97018498170334, -5.97018498170334, -5.47723037860334, -5.97018498170334, -5.47723037860334, -5.97018498170334]
								}, {
									"case":	549,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	550,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	551,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	552,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	553,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	554,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	555,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	556,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}, {
									"case":	557,
									"scores":	[-7.95469550890334, -6.8335832697033414, -8.63248194650334, -6.8335832697033414, -8.63248194650334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.59798379550334, -8.23296678170334, -8.32238948170334, -8.32238948170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.91727501860334, -8.23296678170334, -8.23296678170334, -8.23296678170334, -7.74001217860334, -8.23296678170334, -7.74001217860334, -8.23296678170334]
								}]
						}, {
							"switch":	99,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1398,
							"begin_column":	9,
							"end_line":	1398,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L1398\", 28, &(work), sizeof (work), &(method), sizeof (method), &(inptr), sizeof (inptr), &(method), sizeof (method), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(last_member), sizeof (last_member), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    work = copy;\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.78134405160334, -5.32932532560334, -5.69191608560334, -5.32932532560334, -5.69191608560334, -4.71045137860334, -4.71045137860334, -4.71045137860334, -4.71045137860334, -4.74754948260334, -4.71045137860334, -5.14741637860334, -5.14741637860334, -4.71045137860334, -4.71045137860334, -4.22909607860334, -4.71045137860334, -4.71045137860334, -4.71045137860334, -4.71045137860334, -4.49387757860334, -4.71045137860334, -4.71045137860334, -4.71045137860334, -4.22909607860334, -4.71045137860334, -4.22909607860334, -4.71045137860334]
								}, {
									"case":	2,
									"scores":	[-4.11405007860334]
								}]
						}]
				}, {
					"line":	1398,
					"switches":	[{
							"switch":	100,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1399,
							"begin_column":	7,
							"end_line":	1399,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.09384737128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}, {
									"case":	27,
									"scores":	[-4.09384737128582]
								}, {
									"case":	28,
									"scores":	[-4.09384737128582]
								}, {
									"case":	29,
									"scores":	[-4.09384737128582]
								}, {
									"case":	30,
									"scores":	[-4.09384737128582]
								}, {
									"case":	31,
									"scores":	[-4.09384737128582]
								}, {
									"case":	32,
									"scores":	[-4.09384737128582]
								}, {
									"case":	33,
									"scores":	[-4.09384737128582]
								}, {
									"case":	34,
									"scores":	[-4.09384737128582]
								}, {
									"case":	35,
									"scores":	[-4.09384737128582]
								}, {
									"case":	36,
									"scores":	[-4.09384737128582]
								}, {
									"case":	37,
									"scores":	[-4.09384737128582]
								}, {
									"case":	38,
									"scores":	[-4.09384737128582]
								}, {
									"case":	39,
									"scores":	[-4.09384737128582]
								}, {
									"case":	40,
									"scores":	[-4.09384737128582]
								}, {
									"case":	41,
									"scores":	[-4.09384737128582]
								}, {
									"case":	42,
									"scores":	[-4.09384737128582]
								}, {
									"case":	43,
									"scores":	[-4.09384737128582]
								}, {
									"case":	44,
									"scores":	[-4.09384737128582]
								}, {
									"case":	45,
									"scores":	[-4.09384737128582]
								}, {
									"case":	46,
									"scores":	[-4.09384737128582]
								}, {
									"case":	47,
									"scores":	[-4.09384737128582]
								}, {
									"case":	48,
									"scores":	[-4.09384737128582]
								}, {
									"case":	49,
									"scores":	[-4.09384737128582]
								}, {
									"case":	50,
									"scores":	[-4.09384737128582]
								}, {
									"case":	51,
									"scores":	[-4.09384737128582]
								}, {
									"case":	52,
									"scores":	[-4.09384737128582]
								}, {
									"case":	53,
									"scores":	[-4.09384737128582]
								}, {
									"case":	54,
									"scores":	[-4.09384737128582]
								}, {
									"case":	55,
									"scores":	[-4.09384737128582]
								}, {
									"case":	56,
									"scores":	[-4.09384737128582]
								}, {
									"case":	57,
									"scores":	[-4.09384737128582]
								}, {
									"case":	58,
									"scores":	[-4.09384737128582]
								}, {
									"case":	59,
									"scores":	[-4.09384737128582]
								}, {
									"case":	60,
									"scores":	[-4.09384737128582]
								}, {
									"case":	61,
									"scores":	[-4.09384737128582]
								}, {
									"case":	62,
									"scores":	[-4.09384737128582]
								}, {
									"case":	63,
									"scores":	[-4.09384737128582]
								}, {
									"case":	64,
									"scores":	[-4.09384737128582]
								}, {
									"case":	65,
									"scores":	[-4.09384737128582]
								}, {
									"case":	66,
									"scores":	[-4.09384737128582]
								}, {
									"case":	67,
									"scores":	[-4.09384737128582]
								}, {
									"case":	68,
									"scores":	[-4.09384737128582]
								}, {
									"case":	69,
									"scores":	[-4.09384737128582]
								}, {
									"case":	70,
									"scores":	[-4.09384737128582]
								}, {
									"case":	71,
									"scores":	[-4.09384737128582]
								}, {
									"case":	72,
									"scores":	[-4.09384737128582]
								}, {
									"case":	73,
									"scores":	[-4.09384737128582]
								}, {
									"case":	74,
									"scores":	[-4.09384737128582]
								}, {
									"case":	75,
									"scores":	[-4.09384737128582]
								}, {
									"case":	76,
									"scores":	[-4.09384737128582]
								}, {
									"case":	77,
									"scores":	[-4.09384737128582]
								}, {
									"case":	78,
									"scores":	[-4.09384737128582]
								}, {
									"case":	79,
									"scores":	[-4.09384737128582]
								}, {
									"case":	80,
									"scores":	[-4.09384737128582]
								}, {
									"case":	81,
									"scores":	[-4.09384737128582]
								}, {
									"case":	82,
									"scores":	[-4.09384737128582]
								}, {
									"case":	83,
									"scores":	[-4.09384737128582]
								}, {
									"case":	84,
									"scores":	[-4.09384737128582]
								}, {
									"case":	85,
									"scores":	[-4.09384737128582]
								}, {
									"case":	86,
									"scores":	[-4.09384737128582]
								}, {
									"case":	87,
									"scores":	[-4.09384737128582]
								}, {
									"case":	88,
									"scores":	[-4.09384737128582]
								}, {
									"case":	89,
									"scores":	[-4.09384737128582]
								}, {
									"case":	90,
									"scores":	[-4.09384737128582]
								}, {
									"case":	91,
									"scores":	[-4.09384737128582]
								}, {
									"case":	92,
									"scores":	[-4.09384737128582]
								}, {
									"case":	93,
									"scores":	[-4.09384737128582]
								}, {
									"case":	94,
									"scores":	[-4.09384737128582]
								}, {
									"case":	95,
									"scores":	[-4.09384737128582]
								}, {
									"case":	96,
									"scores":	[-4.09384737128582]
								}, {
									"case":	97,
									"scores":	[-4.09384737128582]
								}, {
									"case":	98,
									"scores":	[-4.09384737128582]
								}, {
									"case":	99,
									"scores":	[-4.09384737128582]
								}, {
									"case":	100,
									"scores":	[-4.09384737128582]
								}, {
									"case":	101,
									"scores":	[-4.09384737128582]
								}, {
									"case":	102,
									"scores":	[-4.09384737128582]
								}, {
									"case":	103,
									"scores":	[-4.09384737128582]
								}, {
									"case":	104,
									"scores":	[-4.09384737128582]
								}, {
									"case":	105,
									"scores":	[-4.09384737128582]
								}, {
									"case":	106,
									"scores":	[-4.09384737128582]
								}, {
									"case":	107,
									"scores":	[-4.09384737128582]
								}, {
									"case":	108,
									"scores":	[-4.09384737128582]
								}, {
									"case":	109,
									"scores":	[-4.09384737128582]
								}, {
									"case":	110,
									"scores":	[-4.09384737128582]
								}, {
									"case":	111,
									"scores":	[-4.09384737128582]
								}, {
									"case":	112,
									"scores":	[-4.09384737128582]
								}, {
									"case":	113,
									"scores":	[-4.09384737128582]
								}, {
									"case":	114,
									"scores":	[-4.09384737128582]
								}, {
									"case":	115,
									"scores":	[-4.09384737128582]
								}, {
									"case":	116,
									"scores":	[-4.09384737128582]
								}, {
									"case":	117,
									"scores":	[-4.09384737128582]
								}, {
									"case":	118,
									"scores":	[-4.09384737128582]
								}, {
									"case":	119,
									"scores":	[-4.09384737128582]
								}, {
									"case":	120,
									"scores":	[-4.09384737128582]
								}, {
									"case":	121,
									"scores":	[-4.09384737128582]
								}, {
									"case":	122,
									"scores":	[-4.09384737128582]
								}, {
									"case":	123,
									"scores":	[-4.09384737128582]
								}, {
									"case":	124,
									"scores":	[-4.09384737128582]
								}, {
									"case":	125,
									"scores":	[-4.09384737128582]
								}, {
									"case":	126,
									"scores":	[-4.09384737128582]
								}, {
									"case":	127,
									"scores":	[-4.09384737128582]
								}, {
									"case":	128,
									"scores":	[-4.09384737128582]
								}, {
									"case":	129,
									"scores":	[-4.09384737128582]
								}, {
									"case":	130,
									"scores":	[-4.09384737128582]
								}, {
									"case":	131,
									"scores":	[-4.09384737128582]
								}, {
									"case":	132,
									"scores":	[-4.09384737128582]
								}, {
									"case":	133,
									"scores":	[-4.09384737128582]
								}, {
									"case":	134,
									"scores":	[-4.09384737128582]
								}, {
									"case":	135,
									"scores":	[-4.09384737128582]
								}, {
									"case":	136,
									"scores":	[-4.09384737128582]
								}, {
									"case":	137,
									"scores":	[-4.09384737128582]
								}, {
									"case":	138,
									"scores":	[-4.09384737128582]
								}, {
									"case":	139,
									"scores":	[-4.09384737128582]
								}, {
									"case":	140,
									"scores":	[-4.09384737128582]
								}, {
									"case":	141,
									"scores":	[-4.09384737128582]
								}, {
									"case":	142,
									"scores":	[-4.09384737128582]
								}, {
									"case":	143,
									"scores":	[-4.09384737128582]
								}, {
									"case":	144,
									"scores":	[-4.09384737128582]
								}, {
									"case":	145,
									"scores":	[-4.09384737128582]
								}, {
									"case":	146,
									"scores":	[-4.09384737128582]
								}, {
									"case":	147,
									"scores":	[-4.09384737128582]
								}, {
									"case":	148,
									"scores":	[-4.09384737128582]
								}, {
									"case":	149,
									"scores":	[-4.09384737128582]
								}, {
									"case":	150,
									"scores":	[-4.09384737128582]
								}, {
									"case":	151,
									"scores":	[-4.09384737128582]
								}, {
									"case":	152,
									"scores":	[-4.09384737128582]
								}, {
									"case":	153,
									"scores":	[-4.09384737128582]
								}, {
									"case":	154,
									"scores":	[-4.09384737128582]
								}, {
									"case":	155,
									"scores":	[-4.09384737128582]
								}, {
									"case":	156,
									"scores":	[-4.09384737128582]
								}, {
									"case":	157,
									"scores":	[-4.09384737128582]
								}, {
									"case":	158,
									"scores":	[-4.09384737128582]
								}, {
									"case":	159,
									"scores":	[-4.09384737128582]
								}, {
									"case":	160,
									"scores":	[-4.09384737128582]
								}, {
									"case":	161,
									"scores":	[-4.09384737128582]
								}, {
									"case":	162,
									"scores":	[-4.09384737128582]
								}, {
									"case":	163,
									"scores":	[-4.09384737128582]
								}, {
									"case":	164,
									"scores":	[-4.09384737128582]
								}, {
									"case":	165,
									"scores":	[-4.09384737128582]
								}, {
									"case":	166,
									"scores":	[-4.09384737128582]
								}, {
									"case":	167,
									"scores":	[-4.09384737128582]
								}, {
									"case":	168,
									"scores":	[-4.09384737128582]
								}, {
									"case":	169,
									"scores":	[-4.09384737128582]
								}, {
									"case":	170,
									"scores":	[-4.09384737128582]
								}, {
									"case":	171,
									"scores":	[-4.09384737128582]
								}, {
									"case":	172,
									"scores":	[-4.09384737128582]
								}, {
									"case":	173,
									"scores":	[-4.09384737128582]
								}, {
									"case":	174,
									"scores":	[-4.09384737128582]
								}, {
									"case":	175,
									"scores":	[-4.09384737128582]
								}, {
									"case":	176,
									"scores":	[-4.09384737128582]
								}, {
									"case":	177,
									"scores":	[-4.09384737128582]
								}, {
									"case":	178,
									"scores":	[-4.09384737128582]
								}, {
									"case":	179,
									"scores":	[-4.09384737128582]
								}, {
									"case":	180,
									"scores":	[-4.09384737128582]
								}, {
									"case":	181,
									"scores":	[-4.09384737128582]
								}, {
									"case":	182,
									"scores":	[-4.09384737128582]
								}, {
									"case":	183,
									"scores":	[-4.09384737128582]
								}, {
									"case":	184,
									"scores":	[-4.09384737128582]
								}, {
									"case":	185,
									"scores":	[-4.09384737128582]
								}, {
									"case":	186,
									"scores":	[-4.09384737128582]
								}, {
									"case":	187,
									"scores":	[-4.09384737128582]
								}, {
									"case":	188,
									"scores":	[-4.09384737128582]
								}, {
									"case":	189,
									"scores":	[-4.09384737128582]
								}, {
									"case":	190,
									"scores":	[-4.09384737128582]
								}, {
									"case":	191,
									"scores":	[-4.09384737128582]
								}, {
									"case":	192,
									"scores":	[-4.09384737128582]
								}, {
									"case":	193,
									"scores":	[-4.09384737128582]
								}, {
									"case":	194,
									"scores":	[-4.09384737128582]
								}, {
									"case":	195,
									"scores":	[-4.09384737128582]
								}, {
									"case":	196,
									"scores":	[-4.09384737128582]
								}, {
									"case":	197,
									"scores":	[-4.09384737128582]
								}, {
									"case":	198,
									"scores":	[-4.09384737128582]
								}, {
									"case":	199,
									"scores":	[-4.09384737128582]
								}, {
									"case":	200,
									"scores":	[-4.09384737128582]
								}, {
									"case":	201,
									"scores":	[-4.09384737128582]
								}, {
									"case":	202,
									"scores":	[-4.09384737128582]
								}, {
									"case":	203,
									"scores":	[-4.09384737128582]
								}, {
									"case":	204,
									"scores":	[-4.09384737128582]
								}, {
									"case":	205,
									"scores":	[-4.09384737128582]
								}, {
									"case":	206,
									"scores":	[-4.09384737128582]
								}, {
									"case":	207,
									"scores":	[-4.09384737128582]
								}, {
									"case":	208,
									"scores":	[-4.09384737128582]
								}, {
									"case":	209,
									"scores":	[-4.09384737128582]
								}, {
									"case":	210,
									"scores":	[-4.09384737128582]
								}, {
									"case":	211,
									"scores":	[-4.09384737128582]
								}, {
									"case":	212,
									"scores":	[-4.09384737128582]
								}, {
									"case":	213,
									"scores":	[-4.09384737128582]
								}, {
									"case":	214,
									"scores":	[-4.09384737128582]
								}, {
									"case":	215,
									"scores":	[-4.09384737128582]
								}, {
									"case":	216,
									"scores":	[-4.09384737128582]
								}, {
									"case":	217,
									"scores":	[-4.09384737128582]
								}, {
									"case":	218,
									"scores":	[-4.09384737128582]
								}, {
									"case":	219,
									"scores":	[-4.09384737128582]
								}, {
									"case":	220,
									"scores":	[-4.09384737128582]
								}, {
									"case":	221,
									"scores":	[-4.09384737128582]
								}, {
									"case":	222,
									"scores":	[-4.09384737128582]
								}, {
									"case":	223,
									"scores":	[-4.09384737128582]
								}, {
									"case":	224,
									"scores":	[-4.09384737128582]
								}, {
									"case":	225,
									"scores":	[-4.09384737128582]
								}, {
									"case":	226,
									"scores":	[-4.09384737128582]
								}, {
									"case":	227,
									"scores":	[-4.09384737128582]
								}, {
									"case":	228,
									"scores":	[-4.09384737128582]
								}, {
									"case":	229,
									"scores":	[-4.09384737128582]
								}, {
									"case":	230,
									"scores":	[-4.09384737128582]
								}, {
									"case":	231,
									"scores":	[-4.09384737128582]
								}, {
									"case":	232,
									"scores":	[-4.09384737128582]
								}, {
									"case":	233,
									"scores":	[-4.09384737128582]
								}, {
									"case":	234,
									"scores":	[-4.09384737128582]
								}, {
									"case":	235,
									"scores":	[-4.09384737128582]
								}, {
									"case":	236,
									"scores":	[-4.09384737128582]
								}, {
									"case":	237,
									"scores":	[-4.09384737128582]
								}, {
									"case":	238,
									"scores":	[-4.09384737128582]
								}, {
									"case":	239,
									"scores":	[-4.09384737128582]
								}, {
									"case":	240,
									"scores":	[-4.09384737128582]
								}, {
									"case":	241,
									"scores":	[-4.09384737128582]
								}, {
									"case":	242,
									"scores":	[-4.09384737128582]
								}, {
									"case":	243,
									"scores":	[-4.09384737128582]
								}, {
									"case":	244,
									"scores":	[-4.09384737128582]
								}, {
									"case":	245,
									"scores":	[-4.09384737128582]
								}, {
									"case":	246,
									"scores":	[-4.09384737128582]
								}, {
									"case":	247,
									"scores":	[-4.09384737128582]
								}, {
									"case":	248,
									"scores":	[-4.09384737128582]
								}, {
									"case":	249,
									"scores":	[-4.09384737128582]
								}, {
									"case":	250,
									"scores":	[-4.09384737128582]
								}, {
									"case":	251,
									"scores":	[-4.09384737128582]
								}, {
									"case":	252,
									"scores":	[-4.09384737128582]
								}, {
									"case":	253,
									"scores":	[-4.09384737128582]
								}, {
									"case":	254,
									"scores":	[-4.09384737128582]
								}, {
									"case":	255,
									"scores":	[-4.09384737128582]
								}, {
									"case":	256,
									"scores":	[-4.09384737128582]
								}, {
									"case":	257,
									"scores":	[-4.09384737128582]
								}, {
									"case":	258,
									"scores":	[-4.09384737128582]
								}, {
									"case":	259,
									"scores":	[-4.09384737128582]
								}, {
									"case":	260,
									"scores":	[-4.09384737128582]
								}, {
									"case":	261,
									"scores":	[-4.09384737128582]
								}, {
									"case":	262,
									"scores":	[-4.09384737128582]
								}, {
									"case":	263,
									"scores":	[-4.09384737128582]
								}, {
									"case":	264,
									"scores":	[-4.09384737128582]
								}, {
									"case":	265,
									"scores":	[-4.09384737128582]
								}, {
									"case":	266,
									"scores":	[-4.09384737128582]
								}, {
									"case":	267,
									"scores":	[-4.09384737128582]
								}, {
									"case":	268,
									"scores":	[-4.09384737128582]
								}, {
									"case":	269,
									"scores":	[-4.09384737128582]
								}, {
									"case":	270,
									"scores":	[-4.09384737128582]
								}, {
									"case":	271,
									"scores":	[-4.09384737128582]
								}, {
									"case":	272,
									"scores":	[-4.09384737128582]
								}, {
									"case":	273,
									"scores":	[-4.09384737128582]
								}, {
									"case":	274,
									"scores":	[-4.09384737128582]
								}, {
									"case":	275,
									"scores":	[-4.09384737128582]
								}, {
									"case":	276,
									"scores":	[-4.09384737128582]
								}, {
									"case":	277,
									"scores":	[-4.09384737128582]
								}, {
									"case":	278,
									"scores":	[-4.09384737128582]
								}, {
									"case":	279,
									"scores":	[-4.09384737128582]
								}, {
									"case":	280,
									"scores":	[-4.09384737128582]
								}, {
									"case":	281,
									"scores":	[-4.09384737128582]
								}, {
									"case":	282,
									"scores":	[-4.09384737128582]
								}, {
									"case":	283,
									"scores":	[-4.09384737128582]
								}, {
									"case":	284,
									"scores":	[-4.09384737128582]
								}, {
									"case":	285,
									"scores":	[-4.09384737128582]
								}, {
									"case":	286,
									"scores":	[-4.09384737128582]
								}, {
									"case":	287,
									"scores":	[-4.09384737128582]
								}, {
									"case":	288,
									"scores":	[-4.09384737128582]
								}, {
									"case":	289,
									"scores":	[-4.09384737128582]
								}, {
									"case":	290,
									"scores":	[-4.09384737128582]
								}, {
									"case":	291,
									"scores":	[-4.09384737128582]
								}, {
									"case":	292,
									"scores":	[-4.09384737128582]
								}, {
									"case":	293,
									"scores":	[-4.09384737128582]
								}, {
									"case":	294,
									"scores":	[-4.09384737128582]
								}, {
									"case":	295,
									"scores":	[-4.09384737128582]
								}, {
									"case":	296,
									"scores":	[-4.09384737128582]
								}, {
									"case":	297,
									"scores":	[-4.09384737128582]
								}, {
									"case":	298,
									"scores":	[-4.09384737128582]
								}, {
									"case":	299,
									"scores":	[-4.09384737128582]
								}, {
									"case":	300,
									"scores":	[-4.09384737128582]
								}, {
									"case":	301,
									"scores":	[-4.09384737128582]
								}, {
									"case":	302,
									"scores":	[-4.09384737128582]
								}, {
									"case":	303,
									"scores":	[-4.09384737128582]
								}, {
									"case":	304,
									"scores":	[-4.09384737128582]
								}, {
									"case":	305,
									"scores":	[-4.09384737128582]
								}, {
									"case":	306,
									"scores":	[-4.09384737128582]
								}, {
									"case":	307,
									"scores":	[-4.09384737128582]
								}, {
									"case":	308,
									"scores":	[-4.09384737128582]
								}, {
									"case":	309,
									"scores":	[-4.09384737128582]
								}, {
									"case":	310,
									"scores":	[-4.09384737128582]
								}, {
									"case":	311,
									"scores":	[-4.09384737128582]
								}, {
									"case":	312,
									"scores":	[-4.09384737128582]
								}, {
									"case":	313,
									"scores":	[-4.09384737128582]
								}, {
									"case":	314,
									"scores":	[-4.09384737128582]
								}, {
									"case":	315,
									"scores":	[-4.09384737128582]
								}, {
									"case":	316,
									"scores":	[-4.09384737128582]
								}, {
									"case":	317,
									"scores":	[-4.09384737128582]
								}, {
									"case":	318,
									"scores":	[-4.09384737128582]
								}, {
									"case":	319,
									"scores":	[-4.09384737128582]
								}, {
									"case":	320,
									"scores":	[-4.09384737128582]
								}, {
									"case":	321,
									"scores":	[-4.09384737128582]
								}, {
									"case":	322,
									"scores":	[-4.09384737128582]
								}, {
									"case":	323,
									"scores":	[-4.09384737128582]
								}, {
									"case":	324,
									"scores":	[-4.09384737128582]
								}, {
									"case":	325,
									"scores":	[-4.09384737128582]
								}, {
									"case":	326,
									"scores":	[-4.09384737128582]
								}, {
									"case":	327,
									"scores":	[-4.09384737128582]
								}, {
									"case":	328,
									"scores":	[-4.09384737128582]
								}, {
									"case":	329,
									"scores":	[-4.09384737128582]
								}, {
									"case":	330,
									"scores":	[-4.09384737128582]
								}, {
									"case":	331,
									"scores":	[-4.09384737128582]
								}, {
									"case":	332,
									"scores":	[-4.09384737128582]
								}, {
									"case":	333,
									"scores":	[-4.09384737128582]
								}, {
									"case":	334,
									"scores":	[-4.09384737128582]
								}, {
									"case":	335,
									"scores":	[-4.09384737128582]
								}, {
									"case":	336,
									"scores":	[-4.09384737128582]
								}, {
									"case":	337,
									"scores":	[-4.09384737128582]
								}, {
									"case":	338,
									"scores":	[-4.09384737128582]
								}, {
									"case":	339,
									"scores":	[-4.09384737128582]
								}, {
									"case":	340,
									"scores":	[-4.09384737128582]
								}, {
									"case":	341,
									"scores":	[-4.09384737128582]
								}, {
									"case":	342,
									"scores":	[-4.09384737128582]
								}, {
									"case":	343,
									"scores":	[-4.09384737128582]
								}, {
									"case":	344,
									"scores":	[-4.09384737128582]
								}, {
									"case":	345,
									"scores":	[-4.09384737128582]
								}, {
									"case":	346,
									"scores":	[-4.09384737128582]
								}, {
									"case":	347,
									"scores":	[-4.09384737128582]
								}, {
									"case":	348,
									"scores":	[-4.09384737128582]
								}, {
									"case":	349,
									"scores":	[-4.09384737128582]
								}, {
									"case":	350,
									"scores":	[-4.09384737128582]
								}, {
									"case":	351,
									"scores":	[-4.09384737128582]
								}, {
									"case":	352,
									"scores":	[-4.09384737128582]
								}, {
									"case":	353,
									"scores":	[-4.09384737128582]
								}, {
									"case":	354,
									"scores":	[-4.09384737128582]
								}, {
									"case":	355,
									"scores":	[-4.09384737128582]
								}, {
									"case":	356,
									"scores":	[-4.09384737128582]
								}, {
									"case":	357,
									"scores":	[-4.09384737128582]
								}, {
									"case":	358,
									"scores":	[-4.09384737128582]
								}, {
									"case":	359,
									"scores":	[-4.09384737128582]
								}, {
									"case":	360,
									"scores":	[-4.09384737128582]
								}, {
									"case":	361,
									"scores":	[-4.09384737128582]
								}, {
									"case":	362,
									"scores":	[-4.09384737128582]
								}, {
									"case":	363,
									"scores":	[-4.09384737128582]
								}, {
									"case":	364,
									"scores":	[-4.09384737128582]
								}, {
									"case":	365,
									"scores":	[-4.09384737128582]
								}, {
									"case":	366,
									"scores":	[-4.09384737128582]
								}, {
									"case":	367,
									"scores":	[-4.09384737128582]
								}, {
									"case":	368,
									"scores":	[-4.09384737128582]
								}, {
									"case":	369,
									"scores":	[-4.09384737128582]
								}, {
									"case":	370,
									"scores":	[-4.09384737128582]
								}, {
									"case":	371,
									"scores":	[-4.09384737128582]
								}, {
									"case":	372,
									"scores":	[-4.09384737128582]
								}, {
									"case":	373,
									"scores":	[-4.09384737128582]
								}, {
									"case":	374,
									"scores":	[-4.09384737128582]
								}, {
									"case":	375,
									"scores":	[-4.09384737128582]
								}, {
									"case":	376,
									"scores":	[-4.09384737128582]
								}, {
									"case":	377,
									"scores":	[-4.09384737128582]
								}, {
									"case":	378,
									"scores":	[-4.09384737128582]
								}, {
									"case":	379,
									"scores":	[-4.09384737128582]
								}, {
									"case":	380,
									"scores":	[-4.09384737128582]
								}, {
									"case":	381,
									"scores":	[-4.09384737128582]
								}, {
									"case":	382,
									"scores":	[-4.09384737128582]
								}, {
									"case":	383,
									"scores":	[-4.09384737128582]
								}, {
									"case":	384,
									"scores":	[-4.09384737128582]
								}, {
									"case":	385,
									"scores":	[-4.09384737128582]
								}, {
									"case":	386,
									"scores":	[-4.09384737128582]
								}, {
									"case":	387,
									"scores":	[-4.09384737128582]
								}, {
									"case":	388,
									"scores":	[-4.09384737128582]
								}, {
									"case":	389,
									"scores":	[-4.09384737128582]
								}, {
									"case":	390,
									"scores":	[-4.09384737128582]
								}, {
									"case":	391,
									"scores":	[-4.09384737128582]
								}, {
									"case":	392,
									"scores":	[-4.09384737128582]
								}, {
									"case":	393,
									"scores":	[-4.09384737128582]
								}, {
									"case":	394,
									"scores":	[-4.09384737128582]
								}, {
									"case":	395,
									"scores":	[-4.09384737128582]
								}, {
									"case":	396,
									"scores":	[-4.09384737128582]
								}, {
									"case":	397,
									"scores":	[-4.09384737128582]
								}, {
									"case":	398,
									"scores":	[-4.09384737128582]
								}, {
									"case":	399,
									"scores":	[-4.09384737128582]
								}, {
									"case":	400,
									"scores":	[-4.09384737128582]
								}, {
									"case":	401,
									"scores":	[-4.09384737128582]
								}, {
									"case":	402,
									"scores":	[-4.09384737128582]
								}, {
									"case":	403,
									"scores":	[-4.09384737128582]
								}, {
									"case":	404,
									"scores":	[-4.09384737128582]
								}, {
									"case":	405,
									"scores":	[-4.09384737128582]
								}, {
									"case":	406,
									"scores":	[-4.09384737128582]
								}, {
									"case":	407,
									"scores":	[-4.09384737128582]
								}, {
									"case":	408,
									"scores":	[-4.09384737128582]
								}, {
									"case":	409,
									"scores":	[-4.09384737128582]
								}, {
									"case":	410,
									"scores":	[-4.09384737128582]
								}, {
									"case":	411,
									"scores":	[-4.09384737128582]
								}, {
									"case":	412,
									"scores":	[-4.09384737128582]
								}, {
									"case":	413,
									"scores":	[-4.09384737128582]
								}, {
									"case":	414,
									"scores":	[-4.09384737128582]
								}, {
									"case":	415,
									"scores":	[-4.09384737128582]
								}, {
									"case":	416,
									"scores":	[-4.09384737128582]
								}, {
									"case":	417,
									"scores":	[-4.09384737128582]
								}, {
									"case":	418,
									"scores":	[-4.09384737128582]
								}, {
									"case":	419,
									"scores":	[-4.09384737128582]
								}, {
									"case":	420,
									"scores":	[-4.09384737128582]
								}, {
									"case":	421,
									"scores":	[-4.09384737128582]
								}, {
									"case":	422,
									"scores":	[-4.09384737128582]
								}, {
									"case":	423,
									"scores":	[-4.09384737128582]
								}, {
									"case":	424,
									"scores":	[-4.09384737128582]
								}, {
									"case":	425,
									"scores":	[-4.09384737128582]
								}, {
									"case":	426,
									"scores":	[-4.09384737128582]
								}, {
									"case":	427,
									"scores":	[-4.09384737128582]
								}, {
									"case":	428,
									"scores":	[-4.09384737128582]
								}, {
									"case":	429,
									"scores":	[-4.09384737128582]
								}, {
									"case":	430,
									"scores":	[-4.09384737128582]
								}, {
									"case":	431,
									"scores":	[-4.09384737128582]
								}, {
									"case":	432,
									"scores":	[-4.09384737128582]
								}, {
									"case":	433,
									"scores":	[-4.09384737128582]
								}, {
									"case":	434,
									"scores":	[-4.09384737128582]
								}, {
									"case":	435,
									"scores":	[-4.09384737128582]
								}, {
									"case":	436,
									"scores":	[-4.09384737128582]
								}, {
									"case":	437,
									"scores":	[-4.09384737128582]
								}, {
									"case":	438,
									"scores":	[-4.09384737128582]
								}, {
									"case":	439,
									"scores":	[-4.09384737128582]
								}, {
									"case":	440,
									"scores":	[-4.09384737128582]
								}, {
									"case":	441,
									"scores":	[-4.09384737128582]
								}, {
									"case":	442,
									"scores":	[-4.09384737128582]
								}, {
									"case":	443,
									"scores":	[-4.09384737128582]
								}, {
									"case":	444,
									"scores":	[-4.09384737128582]
								}, {
									"case":	445,
									"scores":	[-4.09384737128582]
								}, {
									"case":	446,
									"scores":	[-4.09384737128582]
								}, {
									"case":	447,
									"scores":	[-4.09384737128582]
								}, {
									"case":	448,
									"scores":	[-4.09384737128582]
								}, {
									"case":	449,
									"scores":	[-4.09384737128582]
								}, {
									"case":	450,
									"scores":	[-4.09384737128582]
								}, {
									"case":	451,
									"scores":	[-4.09384737128582]
								}, {
									"case":	452,
									"scores":	[-4.09384737128582]
								}, {
									"case":	453,
									"scores":	[-4.09384737128582]
								}, {
									"case":	454,
									"scores":	[-4.09384737128582]
								}, {
									"case":	455,
									"scores":	[-4.09384737128582]
								}, {
									"case":	456,
									"scores":	[-4.09384737128582]
								}, {
									"case":	457,
									"scores":	[-4.09384737128582]
								}, {
									"case":	458,
									"scores":	[-4.09384737128582]
								}, {
									"case":	459,
									"scores":	[-4.09384737128582]
								}, {
									"case":	460,
									"scores":	[-4.09384737128582]
								}, {
									"case":	461,
									"scores":	[-4.09384737128582]
								}, {
									"case":	462,
									"scores":	[-4.09384737128582]
								}, {
									"case":	463,
									"scores":	[-4.09384737128582]
								}, {
									"case":	464,
									"scores":	[-4.09384737128582]
								}, {
									"case":	465,
									"scores":	[-4.09384737128582]
								}, {
									"case":	466,
									"scores":	[-4.09384737128582]
								}, {
									"case":	467,
									"scores":	[-4.09384737128582]
								}, {
									"case":	468,
									"scores":	[-4.09384737128582]
								}, {
									"case":	469,
									"scores":	[-4.09384737128582]
								}, {
									"case":	470,
									"scores":	[-4.09384737128582]
								}, {
									"case":	471,
									"scores":	[-4.09384737128582]
								}, {
									"case":	472,
									"scores":	[-4.09384737128582]
								}, {
									"case":	473,
									"scores":	[-4.09384737128582]
								}, {
									"case":	474,
									"scores":	[-4.09384737128582]
								}, {
									"case":	475,
									"scores":	[-4.09384737128582]
								}, {
									"case":	476,
									"scores":	[-4.09384737128582]
								}, {
									"case":	477,
									"scores":	[-4.09384737128582]
								}, {
									"case":	478,
									"scores":	[-4.09384737128582]
								}, {
									"case":	479,
									"scores":	[-4.09384737128582]
								}, {
									"case":	480,
									"scores":	[-4.09384737128582]
								}, {
									"case":	481,
									"scores":	[-4.09384737128582]
								}, {
									"case":	482,
									"scores":	[-4.09384737128582]
								}, {
									"case":	483,
									"scores":	[-4.09384737128582]
								}, {
									"case":	484,
									"scores":	[-4.09384737128582]
								}, {
									"case":	485,
									"scores":	[-4.09384737128582]
								}, {
									"case":	486,
									"scores":	[-4.09384737128582]
								}, {
									"case":	487,
									"scores":	[-4.09384737128582]
								}, {
									"case":	488,
									"scores":	[-4.09384737128582]
								}, {
									"case":	489,
									"scores":	[-4.09384737128582]
								}, {
									"case":	490,
									"scores":	[-4.09384737128582]
								}, {
									"case":	491,
									"scores":	[-4.09384737128582]
								}, {
									"case":	492,
									"scores":	[-4.09384737128582]
								}, {
									"case":	493,
									"scores":	[-4.09384737128582]
								}, {
									"case":	494,
									"scores":	[-4.09384737128582]
								}, {
									"case":	495,
									"scores":	[-4.09384737128582]
								}, {
									"case":	496,
									"scores":	[-4.09384737128582]
								}, {
									"case":	497,
									"scores":	[-4.09384737128582]
								}, {
									"case":	498,
									"scores":	[-4.09384737128582]
								}, {
									"case":	499,
									"scores":	[-4.09384737128582]
								}, {
									"case":	500,
									"scores":	[-4.09384737128582]
								}, {
									"case":	501,
									"scores":	[-4.09384737128582]
								}, {
									"case":	502,
									"scores":	[-4.09384737128582]
								}, {
									"case":	503,
									"scores":	[-4.09384737128582]
								}, {
									"case":	504,
									"scores":	[-4.09384737128582]
								}, {
									"case":	505,
									"scores":	[-4.09384737128582]
								}, {
									"case":	506,
									"scores":	[-4.09384737128582]
								}, {
									"case":	507,
									"scores":	[-4.09384737128582]
								}, {
									"case":	508,
									"scores":	[-4.09384737128582]
								}, {
									"case":	509,
									"scores":	[-4.09384737128582]
								}, {
									"case":	510,
									"scores":	[-4.09384737128582]
								}, {
									"case":	511,
									"scores":	[-4.09384737128582]
								}, {
									"case":	512,
									"scores":	[-4.09384737128582]
								}, {
									"case":	513,
									"scores":	[-4.09384737128582]
								}, {
									"case":	514,
									"scores":	[-4.09384737128582]
								}, {
									"case":	515,
									"scores":	[-4.09384737128582]
								}, {
									"case":	516,
									"scores":	[-4.09384737128582]
								}, {
									"case":	517,
									"scores":	[-4.09384737128582]
								}, {
									"case":	518,
									"scores":	[-4.09384737128582]
								}, {
									"case":	519,
									"scores":	[-4.09384737128582]
								}, {
									"case":	520,
									"scores":	[-4.09384737128582]
								}, {
									"case":	521,
									"scores":	[-4.09384737128582]
								}, {
									"case":	522,
									"scores":	[-4.09384737128582]
								}, {
									"case":	523,
									"scores":	[-4.09384737128582]
								}, {
									"case":	524,
									"scores":	[-4.09384737128582]
								}, {
									"case":	525,
									"scores":	[-4.09384737128582]
								}, {
									"case":	526,
									"scores":	[-4.09384737128582]
								}, {
									"case":	527,
									"scores":	[-4.09384737128582]
								}, {
									"case":	528,
									"scores":	[-4.09384737128582]
								}, {
									"case":	529,
									"scores":	[-4.09384737128582]
								}, {
									"case":	530,
									"scores":	[-4.09384737128582]
								}, {
									"case":	531,
									"scores":	[-4.09384737128582]
								}, {
									"case":	532,
									"scores":	[-4.09384737128582]
								}, {
									"case":	533,
									"scores":	[-4.09384737128582]
								}, {
									"case":	534,
									"scores":	[-4.09384737128582]
								}, {
									"case":	535,
									"scores":	[-4.09384737128582]
								}, {
									"case":	536,
									"scores":	[-4.09384737128582]
								}, {
									"case":	537,
									"scores":	[-4.09384737128582]
								}, {
									"case":	538,
									"scores":	[-4.09384737128582]
								}, {
									"case":	539,
									"scores":	[-4.09384737128582]
								}, {
									"case":	540,
									"scores":	[-4.09384737128582]
								}, {
									"case":	541,
									"scores":	[-4.09384737128582]
								}, {
									"case":	542,
									"scores":	[-4.09384737128582]
								}, {
									"case":	543,
									"scores":	[-4.09384737128582]
								}, {
									"case":	544,
									"scores":	[-4.09384737128582]
								}, {
									"case":	545,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	546,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	547,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	548,
									"scores":	[-6.25840480708582, -6.25840480708582, -6.31499928818582, -3.6750972743858212, -4.55059876238582, -4.55059876238582, -5.94998227438582, -5.94998227438582, -5.94998227438582, -5.94998227438582, -5.94998227438582, -6.03940497438582, -6.03940497438582, -5.94998227438582, -5.94998227438582, -5.4570276712858217, -5.94998227438582, -5.94998227438582, -5.94998227438582, -5.94998227438582, -5.94998227438582, -5.94998227438582, -5.63429051128582, -5.94998227438582, -5.4570276712858217, -5.94998227438582, -5.4570276712858217, -5.94998227438582]
								}, {
									"case":	549,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	550,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	551,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	552,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	553,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	554,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	555,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	556,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}, {
									"case":	557,
									"scores":	[-8.52118660708582, -8.52118660708582, -8.57778108818582, -5.93787907438582, -6.8133805623858219, -6.8133805623858219, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.30218677438582, -8.30218677438582, -8.21276407438582, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -8.21276407438582, -7.8970723112858217, -8.21276407438582, -7.7198094712858216, -8.21276407438582, -7.7198094712858216, -8.21276407438582]
								}]
						}, {
							"switch":	101,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1399,
							"begin_column":	9,
							"end_line":	1399,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L1399\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    inptr = 0;\n", "{\n}\n", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0 * flags)", "inptr = (0 * imagic1)", "inptr = (0 * in)", "inptr = (0 * stamp)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "inptr = (flags != 0)", "inptr = (flags != imagic1)", "inptr = (flags != stamp)", "inptr = (flags * imagic1)", "inptr = (flags * in)", "inptr = (flags * stamp)", "inptr = (flags + 0)", "inptr = (flags + imagic1)", "inptr = (flags + stamp)", "inptr = (flags - 0)", "inptr = (flags - imagic1)", "inptr = (flags - stamp)", "inptr = (flags == 0)", "inptr = (flags == imagic1)", "inptr = (flags == stamp)", "inptr = (imagic1 != 0)", "inptr = (imagic1 != stamp)", "inptr = (imagic1 * flags)", "inptr = (imagic1 * in)", "inptr = (imagic1 * stamp)", "inptr = (imagic1 + 0)", "inptr = (imagic1 + stamp)", "inptr = (imagic1 - 0)", "inptr = (imagic1 - stamp)", "inptr = (imagic1 == 0)", "inptr = (imagic1 == stamp)", "inptr = (in != 0)", "inptr = (in != flags)", "inptr = (in != imagic1)", "inptr = (in != stamp)", "inptr = (in * flags)", "inptr = (in * imagic1)", "inptr = (in * stamp)", "inptr = (in + 0)", "inptr = (in + flags)", "inptr = (in + imagic1)", "inptr = (in + stamp)", "inptr = (in - 0)", "inptr = (in - flags)", "inptr = (in - imagic1)", "inptr = (in - stamp)", "inptr = (in == 0)", "inptr = (in == flags)", "inptr = (in == imagic1)", "inptr = (in == stamp)", "inptr = (magic != 0)", "inptr = (magic == 0)", "inptr = (stamp != 0)", "inptr = (stamp * flags)", "inptr = (stamp * imagic1)", "inptr = (stamp * in)", "inptr = (stamp + 0)", "inptr = (stamp - 0)", "inptr = (stamp == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.59847714428582, -5.59847714428582, -5.44750244828582, -3.9768898182858208, -5.30912261828582, -5.30912261828582, -4.69024867128582, -4.69024867128582, -4.69024867128582, -4.69024867128582, -4.69024867128582, -5.12721367128582, -5.12721367128582, -4.69024867128582, -4.69024867128582, -4.20889337128582, -4.69024867128582, -4.69024867128582, -4.69024867128582, -4.69024867128582, -4.69024867128582, -4.69024867128582, -4.47367487128582, -4.69024867128582, -4.20889337128582, -4.69024867128582, -4.20889337128582, -4.69024867128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}, {
									"case":	27,
									"scores":	[-4.09384737128582]
								}, {
									"case":	28,
									"scores":	[-4.09384737128582]
								}, {
									"case":	29,
									"scores":	[-4.09384737128582]
								}, {
									"case":	30,
									"scores":	[-4.09384737128582]
								}, {
									"case":	31,
									"scores":	[-4.09384737128582]
								}, {
									"case":	32,
									"scores":	[-4.09384737128582]
								}, {
									"case":	33,
									"scores":	[-4.09384737128582]
								}, {
									"case":	34,
									"scores":	[-4.09384737128582]
								}, {
									"case":	35,
									"scores":	[-4.09384737128582]
								}, {
									"case":	36,
									"scores":	[-4.09384737128582]
								}, {
									"case":	37,
									"scores":	[-4.09384737128582]
								}, {
									"case":	38,
									"scores":	[-4.09384737128582]
								}, {
									"case":	39,
									"scores":	[-4.09384737128582]
								}, {
									"case":	40,
									"scores":	[-4.09384737128582]
								}, {
									"case":	41,
									"scores":	[-4.09384737128582]
								}, {
									"case":	42,
									"scores":	[-4.09384737128582]
								}, {
									"case":	43,
									"scores":	[-4.09384737128582]
								}, {
									"case":	44,
									"scores":	[-4.09384737128582]
								}, {
									"case":	45,
									"scores":	[-4.09384737128582]
								}, {
									"case":	46,
									"scores":	[-4.09384737128582]
								}, {
									"case":	47,
									"scores":	[-4.09384737128582]
								}, {
									"case":	48,
									"scores":	[-4.09384737128582]
								}, {
									"case":	49,
									"scores":	[-4.09384737128582]
								}, {
									"case":	50,
									"scores":	[-4.09384737128582]
								}, {
									"case":	51,
									"scores":	[-4.09384737128582]
								}, {
									"case":	52,
									"scores":	[-4.09384737128582]
								}, {
									"case":	53,
									"scores":	[-4.09384737128582]
								}, {
									"case":	54,
									"scores":	[-4.09384737128582]
								}, {
									"case":	55,
									"scores":	[-4.09384737128582]
								}, {
									"case":	56,
									"scores":	[-4.09384737128582]
								}, {
									"case":	57,
									"scores":	[-4.09384737128582]
								}, {
									"case":	58,
									"scores":	[-4.09384737128582]
								}, {
									"case":	59,
									"scores":	[-4.09384737128582]
								}, {
									"case":	60,
									"scores":	[-4.09384737128582]
								}, {
									"case":	61,
									"scores":	[-4.09384737128582]
								}, {
									"case":	62,
									"scores":	[-4.09384737128582]
								}, {
									"case":	63,
									"scores":	[-4.09384737128582]
								}, {
									"case":	64,
									"scores":	[-4.09384737128582]
								}, {
									"case":	65,
									"scores":	[-4.09384737128582]
								}, {
									"case":	66,
									"scores":	[-4.09384737128582]
								}, {
									"case":	67,
									"scores":	[-4.09384737128582]
								}, {
									"case":	68,
									"scores":	[-4.09384737128582]
								}, {
									"case":	69,
									"scores":	[-4.09384737128582]
								}, {
									"case":	70,
									"scores":	[-4.09384737128582]
								}, {
									"case":	71,
									"scores":	[-4.09384737128582]
								}, {
									"case":	72,
									"scores":	[-4.09384737128582]
								}, {
									"case":	73,
									"scores":	[-4.09384737128582]
								}]
						}]
				}, {
					"line":	1399,
					"switches":	[{
							"switch":	102,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1400,
							"begin_column":	7,
							"end_line":	1400,
							"end_column":	7,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	2,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	3,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	4,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	5,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	6,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	7,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	8,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	9,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	10,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	11,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	12,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	13,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	14,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	15,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	16,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	17,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	18,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	19,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	20,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	21,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	22,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	23,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	24,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	25,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	26,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	27,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	28,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	29,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	30,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	31,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	32,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	33,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	34,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	35,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	36,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	37,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	38,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	39,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	40,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	41,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	42,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	43,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	44,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	45,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	46,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	47,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	48,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	49,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	50,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	51,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	52,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	53,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	54,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	55,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	56,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	57,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	58,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	59,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	60,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	61,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	62,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	63,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	64,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	65,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	66,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	67,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	68,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	69,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	70,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	71,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	72,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	73,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	74,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	75,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	76,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	77,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	78,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	79,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	80,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	81,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	82,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	83,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	84,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	85,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	86,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	87,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	88,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	89,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	90,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	91,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	92,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	93,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	94,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	95,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	96,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	97,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	98,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	99,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	100,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	101,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	102,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	103,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	104,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	105,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	106,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	107,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	108,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	109,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	110,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	111,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	112,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	113,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	114,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	115,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	116,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	117,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	118,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	119,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	120,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	121,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	122,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	123,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	124,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	125,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	126,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	127,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	128,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	129,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	130,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	131,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	132,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	133,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	134,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	135,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	136,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	137,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	138,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	139,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	140,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	141,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	142,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	143,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	144,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	145,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	146,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	147,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	148,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	149,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	150,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	151,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	152,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	153,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	154,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	155,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	156,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	157,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	158,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	159,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	160,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	161,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	162,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	163,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	164,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	165,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	166,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	167,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	168,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	169,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	170,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	171,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	172,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	173,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	174,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	175,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	176,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	177,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	178,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	179,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	180,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	181,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	182,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	183,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	184,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	185,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	186,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	187,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	188,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	189,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	190,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	191,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	192,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	193,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	194,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	195,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	196,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	197,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	198,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	199,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	200,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	201,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	202,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	203,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	204,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	205,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	206,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	207,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	208,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	209,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	210,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	211,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	212,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	213,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	214,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	215,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	216,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	217,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	218,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	219,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	220,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	221,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	222,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	223,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	224,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	225,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	226,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	227,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	228,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	229,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	230,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	231,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	232,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	233,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	234,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	235,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	236,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	237,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	238,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	239,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	240,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	241,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	242,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	243,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	244,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	245,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	246,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	247,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	248,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	249,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	250,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	251,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	252,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	253,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	254,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	255,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	256,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	257,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	258,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	259,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	260,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	261,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	262,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	263,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	264,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	265,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	266,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	267,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	268,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	269,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	270,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	271,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	272,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	273,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	274,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	275,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	276,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	277,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	278,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	279,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	280,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	281,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	282,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	283,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	284,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	285,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	286,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	287,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	288,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	289,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	290,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	291,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	292,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	293,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	294,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	295,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	296,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	297,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	298,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	299,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	300,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	301,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	302,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	303,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	304,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	305,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	306,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	307,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	308,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	309,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	310,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	311,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	312,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	313,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	314,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	315,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	316,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	317,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	318,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	319,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	320,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	321,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	322,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	323,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	324,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	325,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	326,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	327,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	328,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	329,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	330,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	331,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	332,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	333,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	334,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	335,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	336,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	337,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	338,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	339,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	340,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	341,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	342,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	343,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	344,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	345,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	346,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	347,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	348,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	349,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	350,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	351,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	352,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	353,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	354,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	355,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	356,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	357,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	358,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	359,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	360,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	361,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	362,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	363,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	364,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	365,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	366,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	367,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	368,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	369,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	370,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	371,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	372,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	373,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	374,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	375,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	376,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	377,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	378,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	379,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	380,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	381,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	382,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	383,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	384,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	385,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	386,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	387,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	388,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	389,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	390,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	391,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	392,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	393,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	394,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	395,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	396,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	397,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	398,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	399,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	400,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	401,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	402,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	403,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	404,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	405,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	406,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	407,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	408,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	409,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	410,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	411,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	412,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	413,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	414,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	415,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	416,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	417,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	418,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	419,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	420,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	421,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	422,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	423,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	424,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	425,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	426,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	427,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	428,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	429,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	430,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	431,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	432,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	433,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	434,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	435,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	436,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	437,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	438,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	439,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	440,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	441,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	442,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	443,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	444,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	445,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	446,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	447,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	448,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	449,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	450,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	451,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	452,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	453,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	454,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	455,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	456,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	457,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	458,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	459,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	460,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	461,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	462,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	463,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	464,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	465,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	466,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	467,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	468,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	469,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	470,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	471,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	472,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	473,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	474,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	475,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	476,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	477,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	478,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	479,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	480,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	481,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	482,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	483,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	484,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	485,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	486,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	487,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	488,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	489,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	490,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	491,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	492,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	493,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	494,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	495,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	496,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	497,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	498,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	499,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	500,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	501,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	502,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	503,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	504,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	505,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	506,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	507,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	508,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	509,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	510,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	511,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	512,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	513,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	514,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	515,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	516,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	517,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	518,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	519,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	520,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	521,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	522,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	523,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	524,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	525,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	526,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	527,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	528,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	529,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	530,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	531,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	532,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	533,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	534,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	535,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	536,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	537,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	538,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	539,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	540,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	541,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	542,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	543,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	544,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	545,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	546,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	547,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	548,
									"scores":	[-6.0845434517683, -4.5303960550683016, -4.5303960550683016, -4.5303960550683016, -4.5303960550683016, -3.6548945670683017, -5.9297795670683016, -5.9297795670683016, -5.9297795670683016, -5.9297795670683016, -5.9297795670683016, -6.0192022670683016, -6.0192022670683016, -5.9297795670683016, -5.9297795670683016, -5.4368249639683022, -5.9297795670683016, -5.9297795670683016, -5.9297795670683016, -5.9297795670683016, -5.9297795670683016, -5.9297795670683016, -5.6140878039683, -5.9297795670683016, -5.4368249639683022, -5.9297795670683016, -5.4368249639683022, -5.9297795670683016]
								}, {
									"case":	549,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	550,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	551,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	552,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	553,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	554,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	555,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	556,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}, {
									"case":	557,
									"scores":	[-8.3473252517683, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -6.7931778550683024, -5.9176763670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.2819840670683, -8.2819840670683, -8.1925613670683, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -8.1925613670683, -7.8768696039683022, -8.1925613670683, -7.6996067639683021, -8.1925613670683, -7.6996067639683021, -8.1925613670683]
								}]
						}, {
							"switch":	103,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1400,
							"begin_column":	9,
							"end_line":	1400,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L1400\", 28, &(last_member), sizeof (last_member), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(method), sizeof (method), &(method), sizeof (method), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(in), sizeof (in), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    last_member = 1;\n", "{\n}\n", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0 * flags)", "last_member = (0 * imagic1)", "last_member = (0 * in)", "last_member = (0 * stamp)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (flags != 0)", "last_member = (flags != imagic1)", "last_member = (flags != stamp)", "last_member = (flags * imagic1)", "last_member = (flags * in)", "last_member = (flags * stamp)", "last_member = (flags + 0)", "last_member = (flags + imagic1)", "last_member = (flags + stamp)", "last_member = (flags - 0)", "last_member = (flags - imagic1)", "last_member = (flags - stamp)", "last_member = (flags == 0)", "last_member = (flags == imagic1)", "last_member = (flags == stamp)", "last_member = (imagic1 != 0)", "last_member = (imagic1 != stamp)", "last_member = (imagic1 * flags)", "last_member = (imagic1 * in)", "last_member = (imagic1 * stamp)", "last_member = (imagic1 + 0)", "last_member = (imagic1 + stamp)", "last_member = (imagic1 - 0)", "last_member = (imagic1 - stamp)", "last_member = (imagic1 == 0)", "last_member = (imagic1 == stamp)", "last_member = (imagic1)", "last_member = (in != 0)", "last_member = (in != flags)", "last_member = (in != imagic1)", "last_member = (in != stamp)", "last_member = (in * flags)", "last_member = (in * imagic1)", "last_member = (in * stamp)", "last_member = (in + 0)", "last_member = (in + flags)", "last_member = (in + imagic1)", "last_member = (in + stamp)", "last_member = (in - 0)", "last_member = (in - flags)", "last_member = (in - imagic1)", "last_member = (in - stamp)", "last_member = (in == 0)", "last_member = (in == flags)", "last_member = (in == imagic1)", "last_member = (in == stamp)", "last_member = (in)", "last_member = (magic != 0)", "last_member = (magic == 0)", "last_member = (stamp != 0)", "last_member = (stamp * flags)", "last_member = (stamp * imagic1)", "last_member = (stamp * in)", "last_member = (stamp + 0)", "last_member = (stamp - 0)", "last_member = (stamp == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7633686369683019, -5.6620869109683, -5.6620869109683, -5.6620869109683, -5.6620869109683, -4.3298541109683, -5.0432129639683, -5.0432129639683, -5.0432129639683, -5.0432129639683, -5.0432129639683, -5.4801779639683019, -5.4801779639683019, -5.0432129639683, -5.0432129639683, -4.5618576639683015, -5.0432129639683, -5.0432129639683, -5.0432129639683, -5.0432129639683, -5.0432129639683, -5.0432129639683, -4.8266391639683, -5.0432129639683, -4.5618576639683015, -5.0432129639683, -4.5618576639683015, -5.0432129639683]
								}, {
									"case":	2,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	3,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	4,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	5,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	6,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	7,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	8,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	9,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	10,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	11,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	12,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	13,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	14,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	15,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	16,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	17,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	18,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	19,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	20,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	21,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	22,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	23,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	24,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	25,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	26,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	27,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	28,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	29,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	30,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	31,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	32,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	33,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	34,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	35,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	36,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	37,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	38,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	39,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	40,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	41,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	42,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	43,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	44,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	45,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	46,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	47,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	48,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	49,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	50,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	51,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	52,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	53,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	54,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	55,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	56,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	57,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	58,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	59,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	60,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	61,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	62,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	63,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	64,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	65,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	66,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	67,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	68,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	69,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	70,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	71,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	72,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	73,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	74,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	75,
									"scores":	[-4.0736446639683015]
								}]
						}]
				}, {
					"line":	1395,
					"switches":	[{
							"switch":	94,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1396,
							"begin_column":	10,
							"end_line":	1396,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.255469029825977]
								}, {
									"case":	2,
									"scores":	[-4.255469029825977]
								}, {
									"case":	3,
									"scores":	[-4.255469029825977]
								}, {
									"case":	4,
									"scores":	[-4.255469029825977]
								}, {
									"case":	5,
									"scores":	[-4.255469029825977]
								}, {
									"case":	6,
									"scores":	[-4.255469029825977]
								}, {
									"case":	7,
									"scores":	[-4.255469029825977]
								}, {
									"case":	8,
									"scores":	[-4.255469029825977]
								}, {
									"case":	9,
									"scores":	[-4.255469029825977]
								}, {
									"case":	10,
									"scores":	[-4.255469029825977]
								}, {
									"case":	11,
									"scores":	[-4.255469029825977]
								}, {
									"case":	12,
									"scores":	[-4.255469029825977]
								}, {
									"case":	13,
									"scores":	[-4.255469029825977]
								}, {
									"case":	14,
									"scores":	[-4.255469029825977]
								}, {
									"case":	15,
									"scores":	[-4.255469029825977]
								}, {
									"case":	16,
									"scores":	[-4.255469029825977]
								}, {
									"case":	17,
									"scores":	[-4.255469029825977]
								}, {
									"case":	18,
									"scores":	[-4.255469029825977]
								}, {
									"case":	19,
									"scores":	[-4.255469029825977]
								}, {
									"case":	20,
									"scores":	[-4.255469029825977]
								}, {
									"case":	21,
									"scores":	[-4.255469029825977]
								}, {
									"case":	22,
									"scores":	[-4.255469029825977]
								}, {
									"case":	23,
									"scores":	[-4.255469029825977]
								}, {
									"case":	24,
									"scores":	[-4.255469029825977]
								}, {
									"case":	25,
									"scores":	[-4.255469029825977]
								}, {
									"case":	26,
									"scores":	[-4.255469029825977]
								}, {
									"case":	27,
									"scores":	[-4.255469029825977]
								}, {
									"case":	28,
									"scores":	[-4.255469029825977]
								}, {
									"case":	29,
									"scores":	[-4.255469029825977]
								}, {
									"case":	30,
									"scores":	[-4.255469029825977]
								}, {
									"case":	31,
									"scores":	[-4.255469029825977]
								}, {
									"case":	32,
									"scores":	[-4.255469029825977]
								}, {
									"case":	33,
									"scores":	[-4.255469029825977]
								}, {
									"case":	34,
									"scores":	[-4.255469029825977]
								}, {
									"case":	35,
									"scores":	[-4.255469029825977]
								}, {
									"case":	36,
									"scores":	[-4.255469029825977]
								}, {
									"case":	37,
									"scores":	[-4.255469029825977]
								}, {
									"case":	38,
									"scores":	[-4.255469029825977]
								}, {
									"case":	39,
									"scores":	[-4.255469029825977]
								}, {
									"case":	40,
									"scores":	[-4.255469029825977]
								}, {
									"case":	41,
									"scores":	[-4.255469029825977]
								}, {
									"case":	42,
									"scores":	[-4.255469029825977]
								}, {
									"case":	43,
									"scores":	[-4.255469029825977]
								}, {
									"case":	44,
									"scores":	[-4.255469029825977]
								}, {
									"case":	45,
									"scores":	[-4.255469029825977]
								}, {
									"case":	46,
									"scores":	[-4.255469029825977]
								}, {
									"case":	47,
									"scores":	[-4.255469029825977]
								}, {
									"case":	48,
									"scores":	[-4.255469029825977]
								}, {
									"case":	49,
									"scores":	[-4.255469029825977]
								}, {
									"case":	50,
									"scores":	[-4.255469029825977]
								}, {
									"case":	51,
									"scores":	[-4.255469029825977]
								}, {
									"case":	52,
									"scores":	[-4.255469029825977]
								}, {
									"case":	53,
									"scores":	[-4.255469029825977]
								}, {
									"case":	54,
									"scores":	[-4.255469029825977]
								}, {
									"case":	55,
									"scores":	[-4.255469029825977]
								}, {
									"case":	56,
									"scores":	[-4.255469029825977]
								}, {
									"case":	57,
									"scores":	[-4.255469029825977]
								}, {
									"case":	58,
									"scores":	[-4.255469029825977]
								}, {
									"case":	59,
									"scores":	[-4.255469029825977]
								}, {
									"case":	60,
									"scores":	[-4.255469029825977]
								}, {
									"case":	61,
									"scores":	[-4.255469029825977]
								}, {
									"case":	62,
									"scores":	[-4.255469029825977]
								}, {
									"case":	63,
									"scores":	[-4.255469029825977]
								}, {
									"case":	64,
									"scores":	[-4.255469029825977]
								}, {
									"case":	65,
									"scores":	[-4.255469029825977]
								}, {
									"case":	66,
									"scores":	[-4.255469029825977]
								}, {
									"case":	67,
									"scores":	[-4.255469029825977]
								}, {
									"case":	68,
									"scores":	[-4.255469029825977]
								}, {
									"case":	69,
									"scores":	[-4.255469029825977]
								}, {
									"case":	70,
									"scores":	[-4.255469029825977]
								}, {
									"case":	71,
									"scores":	[-4.255469029825977]
								}, {
									"case":	72,
									"scores":	[-4.255469029825977]
								}, {
									"case":	73,
									"scores":	[-4.255469029825977]
								}, {
									"case":	74,
									"scores":	[-4.255469029825977]
								}, {
									"case":	75,
									"scores":	[-4.255469029825977]
								}, {
									"case":	76,
									"scores":	[-4.255469029825977]
								}, {
									"case":	77,
									"scores":	[-4.255469029825977]
								}, {
									"case":	78,
									"scores":	[-4.255469029825977]
								}, {
									"case":	79,
									"scores":	[-4.255469029825977]
								}, {
									"case":	80,
									"scores":	[-4.255469029825977]
								}, {
									"case":	81,
									"scores":	[-4.255469029825977]
								}, {
									"case":	82,
									"scores":	[-4.255469029825977]
								}, {
									"case":	83,
									"scores":	[-4.255469029825977]
								}, {
									"case":	84,
									"scores":	[-4.255469029825977]
								}, {
									"case":	85,
									"scores":	[-4.255469029825977]
								}, {
									"case":	86,
									"scores":	[-4.255469029825977]
								}, {
									"case":	87,
									"scores":	[-4.255469029825977]
								}, {
									"case":	88,
									"scores":	[-4.255469029825977]
								}, {
									"case":	89,
									"scores":	[-4.255469029825977]
								}, {
									"case":	90,
									"scores":	[-4.255469029825977]
								}, {
									"case":	91,
									"scores":	[-4.255469029825977]
								}, {
									"case":	92,
									"scores":	[-4.255469029825977]
								}, {
									"case":	93,
									"scores":	[-4.255469029825977]
								}, {
									"case":	94,
									"scores":	[-4.255469029825977]
								}, {
									"case":	95,
									"scores":	[-4.255469029825977]
								}, {
									"case":	96,
									"scores":	[-4.255469029825977]
								}, {
									"case":	97,
									"scores":	[-4.255469029825977]
								}, {
									"case":	98,
									"scores":	[-4.255469029825977]
								}, {
									"case":	99,
									"scores":	[-4.255469029825977]
								}, {
									"case":	100,
									"scores":	[-4.255469029825977]
								}, {
									"case":	101,
									"scores":	[-4.255469029825977]
								}, {
									"case":	102,
									"scores":	[-4.255469029825977]
								}, {
									"case":	103,
									"scores":	[-4.255469029825977]
								}, {
									"case":	104,
									"scores":	[-4.255469029825977]
								}, {
									"case":	105,
									"scores":	[-4.255469029825977]
								}, {
									"case":	106,
									"scores":	[-4.255469029825977]
								}, {
									"case":	107,
									"scores":	[-4.255469029825977]
								}, {
									"case":	108,
									"scores":	[-4.255469029825977]
								}, {
									"case":	109,
									"scores":	[-4.255469029825977]
								}, {
									"case":	110,
									"scores":	[-4.255469029825977]
								}, {
									"case":	111,
									"scores":	[-4.255469029825977]
								}, {
									"case":	112,
									"scores":	[-4.255469029825977]
								}, {
									"case":	113,
									"scores":	[-4.255469029825977]
								}, {
									"case":	114,
									"scores":	[-4.255469029825977]
								}, {
									"case":	115,
									"scores":	[-4.255469029825977]
								}, {
									"case":	116,
									"scores":	[-4.255469029825977]
								}, {
									"case":	117,
									"scores":	[-4.255469029825977]
								}, {
									"case":	118,
									"scores":	[-4.255469029825977]
								}, {
									"case":	119,
									"scores":	[-4.255469029825977]
								}, {
									"case":	120,
									"scores":	[-4.255469029825977]
								}, {
									"case":	121,
									"scores":	[-4.255469029825977]
								}, {
									"case":	122,
									"scores":	[-4.255469029825977]
								}, {
									"case":	123,
									"scores":	[-4.255469029825977]
								}, {
									"case":	124,
									"scores":	[-4.255469029825977]
								}, {
									"case":	125,
									"scores":	[-4.255469029825977]
								}, {
									"case":	126,
									"scores":	[-4.255469029825977]
								}, {
									"case":	127,
									"scores":	[-4.255469029825977]
								}, {
									"case":	128,
									"scores":	[-4.255469029825977]
								}, {
									"case":	129,
									"scores":	[-4.255469029825977]
								}, {
									"case":	130,
									"scores":	[-4.255469029825977]
								}, {
									"case":	131,
									"scores":	[-4.255469029825977]
								}, {
									"case":	132,
									"scores":	[-4.255469029825977]
								}, {
									"case":	133,
									"scores":	[-4.255469029825977]
								}, {
									"case":	134,
									"scores":	[-4.255469029825977]
								}, {
									"case":	135,
									"scores":	[-4.255469029825977]
								}, {
									"case":	136,
									"scores":	[-4.255469029825977]
								}, {
									"case":	137,
									"scores":	[-4.255469029825977]
								}, {
									"case":	138,
									"scores":	[-4.255469029825977]
								}, {
									"case":	139,
									"scores":	[-4.255469029825977]
								}, {
									"case":	140,
									"scores":	[-4.255469029825977]
								}, {
									"case":	141,
									"scores":	[-4.255469029825977]
								}, {
									"case":	142,
									"scores":	[-4.255469029825977]
								}, {
									"case":	143,
									"scores":	[-4.255469029825977]
								}, {
									"case":	144,
									"scores":	[-4.255469029825977]
								}, {
									"case":	145,
									"scores":	[-4.255469029825977]
								}, {
									"case":	146,
									"scores":	[-4.255469029825977]
								}, {
									"case":	147,
									"scores":	[-4.255469029825977]
								}, {
									"case":	148,
									"scores":	[-4.255469029825977]
								}, {
									"case":	149,
									"scores":	[-4.255469029825977]
								}, {
									"case":	150,
									"scores":	[-4.255469029825977]
								}, {
									"case":	151,
									"scores":	[-4.255469029825977]
								}, {
									"case":	152,
									"scores":	[-4.255469029825977]
								}, {
									"case":	153,
									"scores":	[-4.255469029825977]
								}, {
									"case":	154,
									"scores":	[-4.255469029825977]
								}, {
									"case":	155,
									"scores":	[-4.255469029825977]
								}, {
									"case":	156,
									"scores":	[-4.255469029825977]
								}, {
									"case":	157,
									"scores":	[-4.255469029825977]
								}, {
									"case":	158,
									"scores":	[-4.255469029825977]
								}, {
									"case":	159,
									"scores":	[-4.255469029825977]
								}, {
									"case":	160,
									"scores":	[-4.255469029825977]
								}, {
									"case":	161,
									"scores":	[-4.255469029825977]
								}, {
									"case":	162,
									"scores":	[-4.255469029825977]
								}, {
									"case":	163,
									"scores":	[-4.255469029825977]
								}, {
									"case":	164,
									"scores":	[-4.255469029825977]
								}, {
									"case":	165,
									"scores":	[-4.255469029825977]
								}, {
									"case":	166,
									"scores":	[-4.255469029825977]
								}, {
									"case":	167,
									"scores":	[-4.255469029825977]
								}, {
									"case":	168,
									"scores":	[-4.255469029825977]
								}, {
									"case":	169,
									"scores":	[-4.255469029825977]
								}, {
									"case":	170,
									"scores":	[-4.255469029825977]
								}, {
									"case":	171,
									"scores":	[-4.255469029825977]
								}, {
									"case":	172,
									"scores":	[-4.255469029825977]
								}, {
									"case":	173,
									"scores":	[-4.255469029825977]
								}, {
									"case":	174,
									"scores":	[-4.255469029825977]
								}, {
									"case":	175,
									"scores":	[-4.255469029825977]
								}, {
									"case":	176,
									"scores":	[-4.255469029825977]
								}, {
									"case":	177,
									"scores":	[-4.255469029825977]
								}, {
									"case":	178,
									"scores":	[-4.255469029825977]
								}, {
									"case":	179,
									"scores":	[-4.255469029825977]
								}, {
									"case":	180,
									"scores":	[-4.255469029825977]
								}, {
									"case":	181,
									"scores":	[-4.255469029825977]
								}, {
									"case":	182,
									"scores":	[-4.255469029825977]
								}, {
									"case":	183,
									"scores":	[-4.255469029825977]
								}, {
									"case":	184,
									"scores":	[-4.255469029825977]
								}, {
									"case":	185,
									"scores":	[-4.255469029825977]
								}, {
									"case":	186,
									"scores":	[-4.255469029825977]
								}, {
									"case":	187,
									"scores":	[-4.255469029825977]
								}, {
									"case":	188,
									"scores":	[-4.255469029825977]
								}, {
									"case":	189,
									"scores":	[-4.255469029825977]
								}, {
									"case":	190,
									"scores":	[-4.255469029825977]
								}, {
									"case":	191,
									"scores":	[-4.255469029825977]
								}, {
									"case":	192,
									"scores":	[-4.255469029825977]
								}, {
									"case":	193,
									"scores":	[-4.255469029825977]
								}, {
									"case":	194,
									"scores":	[-4.255469029825977]
								}, {
									"case":	195,
									"scores":	[-4.255469029825977]
								}, {
									"case":	196,
									"scores":	[-4.255469029825977]
								}, {
									"case":	197,
									"scores":	[-4.255469029825977]
								}, {
									"case":	198,
									"scores":	[-4.255469029825977]
								}, {
									"case":	199,
									"scores":	[-4.255469029825977]
								}, {
									"case":	200,
									"scores":	[-4.255469029825977]
								}, {
									"case":	201,
									"scores":	[-4.255469029825977]
								}, {
									"case":	202,
									"scores":	[-4.255469029825977]
								}, {
									"case":	203,
									"scores":	[-4.255469029825977]
								}, {
									"case":	204,
									"scores":	[-4.255469029825977]
								}, {
									"case":	205,
									"scores":	[-4.255469029825977]
								}, {
									"case":	206,
									"scores":	[-4.255469029825977]
								}, {
									"case":	207,
									"scores":	[-4.255469029825977]
								}, {
									"case":	208,
									"scores":	[-4.255469029825977]
								}, {
									"case":	209,
									"scores":	[-4.255469029825977]
								}, {
									"case":	210,
									"scores":	[-4.255469029825977]
								}, {
									"case":	211,
									"scores":	[-4.255469029825977]
								}, {
									"case":	212,
									"scores":	[-4.255469029825977]
								}, {
									"case":	213,
									"scores":	[-4.255469029825977]
								}, {
									"case":	214,
									"scores":	[-4.255469029825977]
								}, {
									"case":	215,
									"scores":	[-4.255469029825977]
								}, {
									"case":	216,
									"scores":	[-4.255469029825977]
								}, {
									"case":	217,
									"scores":	[-4.255469029825977]
								}, {
									"case":	218,
									"scores":	[-4.255469029825977]
								}, {
									"case":	219,
									"scores":	[-4.255469029825977]
								}, {
									"case":	220,
									"scores":	[-4.255469029825977]
								}, {
									"case":	221,
									"scores":	[-4.255469029825977]
								}, {
									"case":	222,
									"scores":	[-4.255469029825977]
								}, {
									"case":	223,
									"scores":	[-4.255469029825977]
								}, {
									"case":	224,
									"scores":	[-4.255469029825977]
								}, {
									"case":	225,
									"scores":	[-4.255469029825977]
								}, {
									"case":	226,
									"scores":	[-4.255469029825977]
								}, {
									"case":	227,
									"scores":	[-4.255469029825977]
								}, {
									"case":	228,
									"scores":	[-4.255469029825977]
								}, {
									"case":	229,
									"scores":	[-4.255469029825977]
								}, {
									"case":	230,
									"scores":	[-4.255469029825977]
								}, {
									"case":	231,
									"scores":	[-4.255469029825977]
								}, {
									"case":	232,
									"scores":	[-4.255469029825977]
								}, {
									"case":	233,
									"scores":	[-4.255469029825977]
								}, {
									"case":	234,
									"scores":	[-4.255469029825977]
								}, {
									"case":	235,
									"scores":	[-4.255469029825977]
								}, {
									"case":	236,
									"scores":	[-4.255469029825977]
								}, {
									"case":	237,
									"scores":	[-4.255469029825977]
								}, {
									"case":	238,
									"scores":	[-4.255469029825977]
								}, {
									"case":	239,
									"scores":	[-4.255469029825977]
								}, {
									"case":	240,
									"scores":	[-4.255469029825977]
								}, {
									"case":	241,
									"scores":	[-4.255469029825977]
								}, {
									"case":	242,
									"scores":	[-4.255469029825977]
								}, {
									"case":	243,
									"scores":	[-4.255469029825977]
								}, {
									"case":	244,
									"scores":	[-4.255469029825977]
								}, {
									"case":	245,
									"scores":	[-4.255469029825977]
								}, {
									"case":	246,
									"scores":	[-4.255469029825977]
								}, {
									"case":	247,
									"scores":	[-4.255469029825977]
								}, {
									"case":	248,
									"scores":	[-4.255469029825977]
								}, {
									"case":	249,
									"scores":	[-4.255469029825977]
								}, {
									"case":	250,
									"scores":	[-4.255469029825977]
								}, {
									"case":	251,
									"scores":	[-4.255469029825977]
								}, {
									"case":	252,
									"scores":	[-4.255469029825977]
								}, {
									"case":	253,
									"scores":	[-4.255469029825977]
								}, {
									"case":	254,
									"scores":	[-4.255469029825977]
								}, {
									"case":	255,
									"scores":	[-4.255469029825977]
								}, {
									"case":	256,
									"scores":	[-4.255469029825977]
								}, {
									"case":	257,
									"scores":	[-4.255469029825977]
								}, {
									"case":	258,
									"scores":	[-4.255469029825977]
								}, {
									"case":	259,
									"scores":	[-4.255469029825977]
								}, {
									"case":	260,
									"scores":	[-4.255469029825977]
								}, {
									"case":	261,
									"scores":	[-4.255469029825977]
								}, {
									"case":	262,
									"scores":	[-4.255469029825977]
								}, {
									"case":	263,
									"scores":	[-4.255469029825977]
								}, {
									"case":	264,
									"scores":	[-4.255469029825977]
								}, {
									"case":	265,
									"scores":	[-4.255469029825977]
								}, {
									"case":	266,
									"scores":	[-4.255469029825977]
								}, {
									"case":	267,
									"scores":	[-4.255469029825977]
								}, {
									"case":	268,
									"scores":	[-4.255469029825977]
								}, {
									"case":	269,
									"scores":	[-4.255469029825977]
								}, {
									"case":	270,
									"scores":	[-4.255469029825977]
								}, {
									"case":	271,
									"scores":	[-4.255469029825977]
								}, {
									"case":	272,
									"scores":	[-4.255469029825977]
								}, {
									"case":	273,
									"scores":	[-4.255469029825977]
								}, {
									"case":	274,
									"scores":	[-4.255469029825977]
								}, {
									"case":	275,
									"scores":	[-4.255469029825977]
								}, {
									"case":	276,
									"scores":	[-4.255469029825977]
								}, {
									"case":	277,
									"scores":	[-4.255469029825977]
								}, {
									"case":	278,
									"scores":	[-4.255469029825977]
								}, {
									"case":	279,
									"scores":	[-4.255469029825977]
								}, {
									"case":	280,
									"scores":	[-4.255469029825977]
								}, {
									"case":	281,
									"scores":	[-4.255469029825977]
								}, {
									"case":	282,
									"scores":	[-4.255469029825977]
								}, {
									"case":	283,
									"scores":	[-4.255469029825977]
								}, {
									"case":	284,
									"scores":	[-4.255469029825977]
								}, {
									"case":	285,
									"scores":	[-4.255469029825977]
								}, {
									"case":	286,
									"scores":	[-4.255469029825977]
								}, {
									"case":	287,
									"scores":	[-4.255469029825977]
								}, {
									"case":	288,
									"scores":	[-4.255469029825977]
								}, {
									"case":	289,
									"scores":	[-4.255469029825977]
								}, {
									"case":	290,
									"scores":	[-4.255469029825977]
								}, {
									"case":	291,
									"scores":	[-4.255469029825977]
								}, {
									"case":	292,
									"scores":	[-4.255469029825977]
								}, {
									"case":	293,
									"scores":	[-4.255469029825977]
								}, {
									"case":	294,
									"scores":	[-4.255469029825977]
								}, {
									"case":	295,
									"scores":	[-4.255469029825977]
								}, {
									"case":	296,
									"scores":	[-4.255469029825977]
								}, {
									"case":	297,
									"scores":	[-4.255469029825977]
								}, {
									"case":	298,
									"scores":	[-4.255469029825977]
								}, {
									"case":	299,
									"scores":	[-4.255469029825977]
								}, {
									"case":	300,
									"scores":	[-4.255469029825977]
								}, {
									"case":	301,
									"scores":	[-4.255469029825977]
								}, {
									"case":	302,
									"scores":	[-4.255469029825977]
								}, {
									"case":	303,
									"scores":	[-4.255469029825977]
								}, {
									"case":	304,
									"scores":	[-4.255469029825977]
								}, {
									"case":	305,
									"scores":	[-4.255469029825977]
								}, {
									"case":	306,
									"scores":	[-4.255469029825977]
								}, {
									"case":	307,
									"scores":	[-4.255469029825977]
								}, {
									"case":	308,
									"scores":	[-4.255469029825977]
								}, {
									"case":	309,
									"scores":	[-4.255469029825977]
								}, {
									"case":	310,
									"scores":	[-4.255469029825977]
								}, {
									"case":	311,
									"scores":	[-4.255469029825977]
								}, {
									"case":	312,
									"scores":	[-4.255469029825977]
								}, {
									"case":	313,
									"scores":	[-4.255469029825977]
								}, {
									"case":	314,
									"scores":	[-4.255469029825977]
								}, {
									"case":	315,
									"scores":	[-4.255469029825977]
								}, {
									"case":	316,
									"scores":	[-4.255469029825977]
								}, {
									"case":	317,
									"scores":	[-4.255469029825977]
								}, {
									"case":	318,
									"scores":	[-4.255469029825977]
								}, {
									"case":	319,
									"scores":	[-4.255469029825977]
								}, {
									"case":	320,
									"scores":	[-4.255469029825977]
								}, {
									"case":	321,
									"scores":	[-4.255469029825977]
								}, {
									"case":	322,
									"scores":	[-4.255469029825977]
								}, {
									"case":	323,
									"scores":	[-4.255469029825977]
								}, {
									"case":	324,
									"scores":	[-4.255469029825977]
								}, {
									"case":	325,
									"scores":	[-4.255469029825977]
								}, {
									"case":	326,
									"scores":	[-4.255469029825977]
								}, {
									"case":	327,
									"scores":	[-4.255469029825977]
								}, {
									"case":	328,
									"scores":	[-4.255469029825977]
								}, {
									"case":	329,
									"scores":	[-4.255469029825977]
								}, {
									"case":	330,
									"scores":	[-4.255469029825977]
								}, {
									"case":	331,
									"scores":	[-4.255469029825977]
								}, {
									"case":	332,
									"scores":	[-4.255469029825977]
								}, {
									"case":	333,
									"scores":	[-4.255469029825977]
								}, {
									"case":	334,
									"scores":	[-4.255469029825977]
								}, {
									"case":	335,
									"scores":	[-4.255469029825977]
								}, {
									"case":	336,
									"scores":	[-4.255469029825977]
								}, {
									"case":	337,
									"scores":	[-4.255469029825977]
								}, {
									"case":	338,
									"scores":	[-4.255469029825977]
								}, {
									"case":	339,
									"scores":	[-4.255469029825977]
								}, {
									"case":	340,
									"scores":	[-4.255469029825977]
								}, {
									"case":	341,
									"scores":	[-4.255469029825977]
								}, {
									"case":	342,
									"scores":	[-4.255469029825977]
								}, {
									"case":	343,
									"scores":	[-4.255469029825977]
								}, {
									"case":	344,
									"scores":	[-4.255469029825977]
								}, {
									"case":	345,
									"scores":	[-4.255469029825977]
								}, {
									"case":	346,
									"scores":	[-4.255469029825977]
								}, {
									"case":	347,
									"scores":	[-4.255469029825977]
								}, {
									"case":	348,
									"scores":	[-4.255469029825977]
								}, {
									"case":	349,
									"scores":	[-4.255469029825977]
								}, {
									"case":	350,
									"scores":	[-4.255469029825977]
								}, {
									"case":	351,
									"scores":	[-4.255469029825977]
								}, {
									"case":	352,
									"scores":	[-4.255469029825977]
								}, {
									"case":	353,
									"scores":	[-4.255469029825977]
								}, {
									"case":	354,
									"scores":	[-4.255469029825977]
								}, {
									"case":	355,
									"scores":	[-4.255469029825977]
								}, {
									"case":	356,
									"scores":	[-4.255469029825977]
								}, {
									"case":	357,
									"scores":	[-4.255469029825977]
								}, {
									"case":	358,
									"scores":	[-4.255469029825977]
								}, {
									"case":	359,
									"scores":	[-4.255469029825977]
								}, {
									"case":	360,
									"scores":	[-4.255469029825977]
								}, {
									"case":	361,
									"scores":	[-4.255469029825977]
								}, {
									"case":	362,
									"scores":	[-4.255469029825977]
								}, {
									"case":	363,
									"scores":	[-4.255469029825977]
								}, {
									"case":	364,
									"scores":	[-4.255469029825977]
								}, {
									"case":	365,
									"scores":	[-4.255469029825977]
								}, {
									"case":	366,
									"scores":	[-4.255469029825977]
								}, {
									"case":	367,
									"scores":	[-4.255469029825977]
								}, {
									"case":	368,
									"scores":	[-4.255469029825977]
								}, {
									"case":	369,
									"scores":	[-4.255469029825977]
								}, {
									"case":	370,
									"scores":	[-4.255469029825977]
								}, {
									"case":	371,
									"scores":	[-4.255469029825977]
								}, {
									"case":	372,
									"scores":	[-4.255469029825977]
								}, {
									"case":	373,
									"scores":	[-4.255469029825977]
								}, {
									"case":	374,
									"scores":	[-4.255469029825977]
								}, {
									"case":	375,
									"scores":	[-4.255469029825977]
								}, {
									"case":	376,
									"scores":	[-4.255469029825977]
								}, {
									"case":	377,
									"scores":	[-4.255469029825977]
								}, {
									"case":	378,
									"scores":	[-4.255469029825977]
								}, {
									"case":	379,
									"scores":	[-4.255469029825977]
								}, {
									"case":	380,
									"scores":	[-4.255469029825977]
								}, {
									"case":	381,
									"scores":	[-4.255469029825977]
								}, {
									"case":	382,
									"scores":	[-4.255469029825977]
								}, {
									"case":	383,
									"scores":	[-4.255469029825977]
								}, {
									"case":	384,
									"scores":	[-4.255469029825977]
								}, {
									"case":	385,
									"scores":	[-4.255469029825977]
								}, {
									"case":	386,
									"scores":	[-4.255469029825977]
								}, {
									"case":	387,
									"scores":	[-4.255469029825977]
								}, {
									"case":	388,
									"scores":	[-4.255469029825977]
								}, {
									"case":	389,
									"scores":	[-4.255469029825977]
								}, {
									"case":	390,
									"scores":	[-4.255469029825977]
								}, {
									"case":	391,
									"scores":	[-4.255469029825977]
								}, {
									"case":	392,
									"scores":	[-4.255469029825977]
								}, {
									"case":	393,
									"scores":	[-4.255469029825977]
								}, {
									"case":	394,
									"scores":	[-4.255469029825977]
								}, {
									"case":	395,
									"scores":	[-4.255469029825977]
								}, {
									"case":	396,
									"scores":	[-4.255469029825977]
								}, {
									"case":	397,
									"scores":	[-4.255469029825977]
								}, {
									"case":	398,
									"scores":	[-4.255469029825977]
								}, {
									"case":	399,
									"scores":	[-4.255469029825977]
								}, {
									"case":	400,
									"scores":	[-4.255469029825977]
								}, {
									"case":	401,
									"scores":	[-4.255469029825977]
								}, {
									"case":	402,
									"scores":	[-4.255469029825977]
								}, {
									"case":	403,
									"scores":	[-4.255469029825977]
								}, {
									"case":	404,
									"scores":	[-4.255469029825977]
								}, {
									"case":	405,
									"scores":	[-4.255469029825977]
								}, {
									"case":	406,
									"scores":	[-4.255469029825977]
								}, {
									"case":	407,
									"scores":	[-4.255469029825977]
								}, {
									"case":	408,
									"scores":	[-4.255469029825977]
								}, {
									"case":	409,
									"scores":	[-4.255469029825977]
								}, {
									"case":	410,
									"scores":	[-4.255469029825977]
								}, {
									"case":	411,
									"scores":	[-4.255469029825977]
								}, {
									"case":	412,
									"scores":	[-4.255469029825977]
								}, {
									"case":	413,
									"scores":	[-4.255469029825977]
								}, {
									"case":	414,
									"scores":	[-4.255469029825977]
								}, {
									"case":	415,
									"scores":	[-4.255469029825977]
								}, {
									"case":	416,
									"scores":	[-4.255469029825977]
								}, {
									"case":	417,
									"scores":	[-4.255469029825977]
								}, {
									"case":	418,
									"scores":	[-4.255469029825977]
								}, {
									"case":	419,
									"scores":	[-4.255469029825977]
								}, {
									"case":	420,
									"scores":	[-4.255469029825977]
								}, {
									"case":	421,
									"scores":	[-4.255469029825977]
								}, {
									"case":	422,
									"scores":	[-4.255469029825977]
								}, {
									"case":	423,
									"scores":	[-4.255469029825977]
								}, {
									"case":	424,
									"scores":	[-4.255469029825977]
								}, {
									"case":	425,
									"scores":	[-4.255469029825977]
								}, {
									"case":	426,
									"scores":	[-4.255469029825977]
								}, {
									"case":	427,
									"scores":	[-4.255469029825977]
								}, {
									"case":	428,
									"scores":	[-4.255469029825977]
								}, {
									"case":	429,
									"scores":	[-4.255469029825977]
								}, {
									"case":	430,
									"scores":	[-4.255469029825977]
								}, {
									"case":	431,
									"scores":	[-4.255469029825977]
								}, {
									"case":	432,
									"scores":	[-4.255469029825977]
								}, {
									"case":	433,
									"scores":	[-4.255469029825977]
								}, {
									"case":	434,
									"scores":	[-4.255469029825977]
								}, {
									"case":	435,
									"scores":	[-4.255469029825977]
								}, {
									"case":	436,
									"scores":	[-4.255469029825977]
								}, {
									"case":	437,
									"scores":	[-4.255469029825977]
								}, {
									"case":	438,
									"scores":	[-4.255469029825977]
								}, {
									"case":	439,
									"scores":	[-4.255469029825977]
								}, {
									"case":	440,
									"scores":	[-4.255469029825977]
								}, {
									"case":	441,
									"scores":	[-4.255469029825977]
								}, {
									"case":	442,
									"scores":	[-4.255469029825977]
								}, {
									"case":	443,
									"scores":	[-4.255469029825977]
								}, {
									"case":	444,
									"scores":	[-4.255469029825977]
								}, {
									"case":	445,
									"scores":	[-4.255469029825977]
								}, {
									"case":	446,
									"scores":	[-4.255469029825977]
								}, {
									"case":	447,
									"scores":	[-4.255469029825977]
								}, {
									"case":	448,
									"scores":	[-4.255469029825977]
								}, {
									"case":	449,
									"scores":	[-4.255469029825977]
								}, {
									"case":	450,
									"scores":	[-4.255469029825977]
								}, {
									"case":	451,
									"scores":	[-4.255469029825977]
								}, {
									"case":	452,
									"scores":	[-4.255469029825977]
								}, {
									"case":	453,
									"scores":	[-4.255469029825977]
								}, {
									"case":	454,
									"scores":	[-4.255469029825977]
								}, {
									"case":	455,
									"scores":	[-4.255469029825977]
								}, {
									"case":	456,
									"scores":	[-4.255469029825977]
								}, {
									"case":	457,
									"scores":	[-4.255469029825977]
								}, {
									"case":	458,
									"scores":	[-4.255469029825977]
								}, {
									"case":	459,
									"scores":	[-4.255469029825977]
								}, {
									"case":	460,
									"scores":	[-4.255469029825977]
								}, {
									"case":	461,
									"scores":	[-4.255469029825977]
								}, {
									"case":	462,
									"scores":	[-4.255469029825977]
								}, {
									"case":	463,
									"scores":	[-4.255469029825977]
								}, {
									"case":	464,
									"scores":	[-4.255469029825977]
								}, {
									"case":	465,
									"scores":	[-4.255469029825977]
								}, {
									"case":	466,
									"scores":	[-4.255469029825977]
								}, {
									"case":	467,
									"scores":	[-4.255469029825977]
								}, {
									"case":	468,
									"scores":	[-4.255469029825977]
								}, {
									"case":	469,
									"scores":	[-4.255469029825977]
								}, {
									"case":	470,
									"scores":	[-4.255469029825977]
								}, {
									"case":	471,
									"scores":	[-4.255469029825977]
								}, {
									"case":	472,
									"scores":	[-4.255469029825977]
								}, {
									"case":	473,
									"scores":	[-4.255469029825977]
								}, {
									"case":	474,
									"scores":	[-4.255469029825977]
								}, {
									"case":	475,
									"scores":	[-4.255469029825977]
								}, {
									"case":	476,
									"scores":	[-4.255469029825977]
								}, {
									"case":	477,
									"scores":	[-4.255469029825977]
								}, {
									"case":	478,
									"scores":	[-4.255469029825977]
								}, {
									"case":	479,
									"scores":	[-4.255469029825977]
								}, {
									"case":	480,
									"scores":	[-4.255469029825977]
								}, {
									"case":	481,
									"scores":	[-4.255469029825977]
								}, {
									"case":	482,
									"scores":	[-4.255469029825977]
								}, {
									"case":	483,
									"scores":	[-4.255469029825977]
								}, {
									"case":	484,
									"scores":	[-4.255469029825977]
								}, {
									"case":	485,
									"scores":	[-4.255469029825977]
								}, {
									"case":	486,
									"scores":	[-4.255469029825977]
								}, {
									"case":	487,
									"scores":	[-4.255469029825977]
								}, {
									"case":	488,
									"scores":	[-4.255469029825977]
								}, {
									"case":	489,
									"scores":	[-4.255469029825977]
								}, {
									"case":	490,
									"scores":	[-4.255469029825977]
								}, {
									"case":	491,
									"scores":	[-4.255469029825977]
								}, {
									"case":	492,
									"scores":	[-4.255469029825977]
								}, {
									"case":	493,
									"scores":	[-4.255469029825977]
								}, {
									"case":	494,
									"scores":	[-4.255469029825977]
								}, {
									"case":	495,
									"scores":	[-4.255469029825977]
								}, {
									"case":	496,
									"scores":	[-4.255469029825977]
								}, {
									"case":	497,
									"scores":	[-4.255469029825977]
								}, {
									"case":	498,
									"scores":	[-4.255469029825977]
								}, {
									"case":	499,
									"scores":	[-4.255469029825977]
								}, {
									"case":	500,
									"scores":	[-4.255469029825977]
								}, {
									"case":	501,
									"scores":	[-4.255469029825977]
								}, {
									"case":	502,
									"scores":	[-4.255469029825977]
								}, {
									"case":	503,
									"scores":	[-4.255469029825977]
								}, {
									"case":	504,
									"scores":	[-4.255469029825977]
								}, {
									"case":	505,
									"scores":	[-4.255469029825977]
								}, {
									"case":	506,
									"scores":	[-4.255469029825977]
								}, {
									"case":	507,
									"scores":	[-4.255469029825977]
								}, {
									"case":	508,
									"scores":	[-4.255469029825977]
								}, {
									"case":	509,
									"scores":	[-4.255469029825977]
								}, {
									"case":	510,
									"scores":	[-4.255469029825977]
								}, {
									"case":	511,
									"scores":	[-4.255469029825977]
								}, {
									"case":	512,
									"scores":	[-4.255469029825977]
								}, {
									"case":	513,
									"scores":	[-4.255469029825977]
								}, {
									"case":	514,
									"scores":	[-4.255469029825977]
								}, {
									"case":	515,
									"scores":	[-4.255469029825977]
								}, {
									"case":	516,
									"scores":	[-4.255469029825977]
								}, {
									"case":	517,
									"scores":	[-4.255469029825977]
								}, {
									"case":	518,
									"scores":	[-4.255469029825977]
								}, {
									"case":	519,
									"scores":	[-4.255469029825977]
								}, {
									"case":	520,
									"scores":	[-4.255469029825977]
								}, {
									"case":	521,
									"scores":	[-4.255469029825977]
								}, {
									"case":	522,
									"scores":	[-4.255469029825977]
								}, {
									"case":	523,
									"scores":	[-4.255469029825977]
								}, {
									"case":	524,
									"scores":	[-4.255469029825977]
								}, {
									"case":	525,
									"scores":	[-4.255469029825977]
								}, {
									"case":	526,
									"scores":	[-4.255469029825977]
								}, {
									"case":	527,
									"scores":	[-4.255469029825977]
								}, {
									"case":	528,
									"scores":	[-4.255469029825977]
								}, {
									"case":	529,
									"scores":	[-4.255469029825977]
								}, {
									"case":	530,
									"scores":	[-4.255469029825977]
								}, {
									"case":	531,
									"scores":	[-4.255469029825977]
								}, {
									"case":	532,
									"scores":	[-4.255469029825977]
								}, {
									"case":	533,
									"scores":	[-4.255469029825977]
								}, {
									"case":	534,
									"scores":	[-4.255469029825977]
								}, {
									"case":	535,
									"scores":	[-4.255469029825977]
								}, {
									"case":	536,
									"scores":	[-4.255469029825977]
								}, {
									"case":	537,
									"scores":	[-4.255469029825977]
								}, {
									"case":	538,
									"scores":	[-4.255469029825977]
								}, {
									"case":	539,
									"scores":	[-4.255469029825977]
								}, {
									"case":	540,
									"scores":	[-4.255469029825977]
								}, {
									"case":	541,
									"scores":	[-4.255469029825977]
								}, {
									"case":	542,
									"scores":	[-4.255469029825977]
								}, {
									"case":	543,
									"scores":	[-4.255469029825977]
								}, {
									"case":	544,
									"scores":	[-4.255469029825977]
								}, {
									"case":	545,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	546,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	547,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	548,
									"scores":	[-7.104056832925977, -7.104056832925977, -7.104056832925977, -7.104056832925977, -7.412479365625976, -7.412479365625976, -7.2588207176259765, -6.8257855601259765, -7.412479365625976, -7.412479365625976, -7.104056832925977, -7.1934795329259771, -7.1934795329259771, -7.104056832925977, -7.104056832925977, -6.6111022298259767, -7.104056832925977, -7.104056832925977, -6.7883650698259768, -7.104056832925977, -7.104056832925977, -7.104056832925977, -7.104056832925977, -7.104056832925977, -6.6111022298259767, -7.104056832925977, -6.6111022298259767, -7.104056832925977]
								}, {
									"case":	549,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	550,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	551,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	552,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	553,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	554,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	555,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	556,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}, {
									"case":	557,
									"scores":	[-9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.6752611656259759, -9.6752611656259759, -9.5216025176259755, -9.08856736012598, -9.6752611656259759, -9.6752611656259759, -9.3668386329259761, -9.4562613329259761, -9.4562613329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -9.3668386329259761, -9.05114686982598, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761, -8.8738840298259767, -9.3668386329259761]
								}]
						}, {
							"switch":	95,
							"types":	[[7], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4, 5, 6]],
							"begin_line":	1396,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (((force && to_stdout) || __is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((force && to_stdout && !list) || __is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (force && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (force && to_stdout) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((force && to_stdout && !list) && !__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -6.7182935381281457, -6.7182935381281457, -6.5302207381281452, -5.8809577381281457, -6.7182935381281457, -6.7182935381281457, -5.8100650651281462, -6.2470300651281452, -6.2470300651281452, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.8100650651281462, -5.5934912651281454, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462]
								}, {
									"case":	2,
									"scores":	[-4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.9943627784281457, -4.9943627784281457, -4.8062899784281461, -4.1570269784281457, -4.9943627784281457, -4.9943627784281457, -4.0861343054281463, -4.5230993054281461, -4.5230993054281461, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -4.0861343054281463, -3.8695605054281459, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463]
								}, {
									"case":	3,
									"scores":	[-4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.9943627784281457, -4.9943627784281457, -4.8062899784281461, -4.1570269784281457, -4.9943627784281457, -4.9943627784281457, -4.0861343054281463, -4.5230993054281461, -4.5230993054281461, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -4.0861343054281463, -3.8695605054281459, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.9943627784281457, -4.9943627784281457, -4.8062899784281461, -4.1570269784281457, -4.9943627784281457, -4.9943627784281457, -4.0861343054281463, -4.5230993054281461, -4.5230993054281461, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -4.0861343054281463, -3.8695605054281459, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463, -3.6047790054281461, -4.0861343054281463]
								}]
						}, {
							"switch":	104,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1396,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1396\", 28, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(work), sizeof (work), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(in), sizeof (in), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(header_bytes), sizeof (header_bytes), &(flags), sizeof (flags), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -6.8280518028259767, -6.8280518028259767, -6.6399790028259762, -5.9907160028259767, -6.8280518028259767, -6.8280518028259767, -5.9198233298259773, -6.3567883298259762, -6.3567883298259762, -5.9198233298259773, -5.9198233298259773, -5.4384680298259767, -5.9198233298259773, -5.9198233298259773, -5.7032495298259764, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.9198233298259773, -5.4384680298259767, -5.9198233298259773, -5.4384680298259767, -5.9198233298259773]
								}]
						}]
				}, {
					"line":	1390,
					"switches":	[{
							"switch":	92,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1391,
							"begin_column":	10,
							"end_line":	1391,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	2,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	3,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	4,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	5,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	6,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	7,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	8,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	9,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	10,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	11,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	12,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	13,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	14,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	15,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	16,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	17,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	18,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	19,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	20,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	21,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	22,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	23,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	24,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	25,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	26,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	27,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	28,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	29,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	30,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	31,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	32,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	33,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	34,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	35,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	36,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	37,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	38,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	39,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	40,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	41,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	42,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	43,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	44,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	45,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	46,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	47,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	48,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	49,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	50,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	51,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	52,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	53,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	54,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	55,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	56,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	57,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	58,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	59,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	60,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	61,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	62,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	63,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	64,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	65,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	66,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	67,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	68,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	69,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	70,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	71,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	72,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	73,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	74,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	75,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	76,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	77,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	78,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	79,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	80,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	81,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	82,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	83,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	84,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	85,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	86,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	87,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	88,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	89,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	90,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	91,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	92,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	93,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	94,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	95,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	96,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	97,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	98,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	99,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	100,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	101,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	102,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	103,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	104,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	105,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	106,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	107,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	108,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	109,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	110,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	111,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	112,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	113,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	114,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	115,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	116,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	117,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	118,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	119,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	120,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	121,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	122,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	123,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	124,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	125,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	126,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	127,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	128,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	129,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	130,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	131,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	132,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	133,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	134,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	135,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	136,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	137,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	138,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	139,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	140,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	141,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	142,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	143,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	144,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	145,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	146,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	147,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	148,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	149,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	150,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	151,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	152,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	153,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	154,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	155,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	156,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	157,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	158,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	159,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	160,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	161,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	162,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	163,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	164,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	165,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	166,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	167,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	168,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	169,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	170,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	171,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	172,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	173,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	174,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	175,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	176,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	177,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	178,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	179,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	180,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	181,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	182,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	183,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	184,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	185,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	186,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	187,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	188,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	189,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	190,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	191,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	192,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	193,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	194,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	195,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	196,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	197,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	198,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	199,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	200,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	201,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	202,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	203,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	204,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	205,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	206,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	207,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	208,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	209,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	210,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	211,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	212,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	213,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	214,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	215,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	216,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	217,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	218,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	219,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	220,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	221,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	222,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	223,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	224,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	225,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	226,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	227,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	228,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	229,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	230,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	231,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	232,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	233,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	234,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	235,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	236,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	237,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	238,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	239,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	240,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	241,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	242,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	243,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	244,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	245,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	246,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	247,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	248,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	249,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	250,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	251,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	252,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	253,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	254,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	255,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	256,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	257,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	258,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	259,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	260,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	261,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	262,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	263,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	264,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	265,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	266,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	267,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	268,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	269,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	270,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	271,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	272,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	273,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	274,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	275,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	276,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	277,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	278,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	279,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	280,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	281,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	282,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	283,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	284,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	285,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	286,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	287,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	288,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	289,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	290,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	291,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	292,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	293,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	294,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	295,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	296,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	297,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	298,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	299,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	300,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	301,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	302,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	303,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	304,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	305,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	306,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	307,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	308,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	309,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	310,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	311,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	312,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	313,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	314,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	315,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	316,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	317,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	318,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	319,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	320,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	321,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	322,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	323,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	324,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	325,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	326,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	327,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	328,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	329,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	330,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	331,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	332,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	333,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	334,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	335,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	336,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	337,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	338,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	339,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	340,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	341,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	342,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	343,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	344,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	345,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	346,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	347,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	348,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	349,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	350,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	351,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	352,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	353,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	354,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	355,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	356,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	357,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	358,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	359,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	360,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	361,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	362,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	363,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	364,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	365,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	366,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	367,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	368,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	369,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	370,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	371,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	372,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	373,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	374,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	375,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	376,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	377,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	378,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	379,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	380,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	381,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	382,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	383,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	384,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	385,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	386,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	387,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	388,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	389,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	390,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	391,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	392,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	393,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	394,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	395,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	396,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	397,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	398,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	399,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	400,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	401,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	402,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	403,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	404,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	405,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	406,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	407,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	408,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	409,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	410,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	411,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	412,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	413,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	414,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	415,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	416,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	417,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	418,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	419,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	420,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	421,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	422,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	423,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	424,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	425,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	426,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	427,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	428,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	429,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	430,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	431,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	432,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	433,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	434,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	435,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	436,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	437,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	438,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	439,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	440,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	441,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	442,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	443,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	444,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	445,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	446,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	447,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	448,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	449,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	450,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	451,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	452,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	453,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	454,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	455,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	456,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	457,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	458,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	459,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	460,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	461,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	462,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	463,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	464,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	465,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	466,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	467,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	468,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	469,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	470,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	471,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	472,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	473,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	474,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	475,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	476,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	477,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	478,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	479,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	480,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	481,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	482,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	483,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	484,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	485,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	486,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	487,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	488,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	489,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	490,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	491,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	492,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	493,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	494,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	495,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	496,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	497,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	498,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	499,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	500,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	501,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	502,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	503,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	504,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	505,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	506,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	507,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	508,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	509,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	510,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	511,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	512,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	513,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	514,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	515,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	516,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	517,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	518,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	519,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	520,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	521,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	522,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	523,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	524,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	525,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	526,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	527,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	528,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	529,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	530,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	531,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	532,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	533,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	534,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	535,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	536,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	537,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	538,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	539,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	540,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	541,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	542,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	543,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	544,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	545,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	546,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	547,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	548,
									"scores":	[-6.845988267443496, -7.4326820729434955, -7.4326820729434955, -7.279023424943496, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.4326820729434955, -7.4326820729434955, -6.8085677771434963, -7.1242595402434965, -7.2136822402434966, -7.2136822402434966, -7.1242595402434965, -7.1242595402434965, -6.6313049371434962, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -6.6313049371434962, -7.1242595402434965, -7.1242595402434965, -7.1242595402434965, -6.6313049371434962, -7.1242595402434965]
								}, {
									"case":	549,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	550,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	551,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	552,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	553,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	554,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	555,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	556,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}, {
									"case":	557,
									"scores":	[-9.1087700674435, -9.6954638729434954, -9.6954638729434954, -9.541805224943495, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.6954638729434954, -9.6954638729434954, -9.0713495771434971, -9.3870413402434956, -9.4764640402434956, -9.4764640402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956, -9.3870413402434956, -9.3870413402434956, -8.8940867371434962, -9.3870413402434956]
								}]
						}, {
							"switch":	93,
							"types":	[[7], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6], []],
							"begin_line":	1391,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\240\", 2) == 0) || __is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\240\", 2) == 0) && !__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8809577381281457, -6.7182935381281457, -6.7182935381281457, -6.5302207381281452, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -6.7182935381281457, -6.7182935381281457, -5.5934912651281454, -5.8100650651281462, -6.2470300651281452, -6.2470300651281452, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462, -5.8100650651281462, -5.8100650651281462, -5.3287097651281456, -5.8100650651281462]
								}, {
									"case":	2,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -4.3520597474281457, -3.2272574744281459, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -4.3520597474281457, -3.2272574744281459, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}]
						}, {
							"switch":	105,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1391,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1391\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(in), sizeof (in), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(insize), sizeof (insize), &(insize), sizeof (insize), &(header_bytes), sizeof (header_bytes), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(flags), sizeof (flags), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"\\037\\240\", 2) == 0)) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0109187101434962, -6.8482545101434962, -6.8482545101434962, -6.6601817101434957, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -6.8482545101434962, -6.8482545101434962, -5.7234522371434959, -5.9400260371434968, -6.3769910371434957, -6.3769910371434957, -5.9400260371434968, -5.9400260371434968, -5.4586707371434962, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.4586707371434962, -5.9400260371434968, -5.9400260371434968, -5.9400260371434968, -5.4586707371434962, -5.9400260371434968]
								}, {
									"case":	2,
									"scores":	[-5.2580766791434961, -6.095412479143496, -6.095412479143496, -5.9073396791434956, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -6.095412479143496, -6.095412479143496, -4.9706102061434958, -5.1871840061434957, -5.6241490061434956, -5.6241490061434956, -5.1871840061434957, -5.1871840061434957, -4.705828706143496, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -4.705828706143496, -5.1871840061434957, -5.1871840061434957, -5.1871840061434957, -4.705828706143496, -5.1871840061434957]
								}]
						}]
				}, {
					"line":	1385,
					"switches":	[{
							"switch":	90,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1386,
							"begin_column":	10,
							"end_line":	1386,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	2,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	3,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	4,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	5,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	6,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	7,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	8,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	9,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	10,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	11,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	12,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	13,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	14,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	15,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	16,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	17,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	18,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	19,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	20,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	21,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	22,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	23,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	24,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	25,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	26,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	27,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	28,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	29,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	30,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	31,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	32,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	33,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	34,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	35,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	36,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	37,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	38,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	39,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	40,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	41,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	42,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	43,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	44,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	45,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	46,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	47,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	48,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	49,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	50,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	51,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	52,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	53,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	54,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	55,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	56,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	57,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	58,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	59,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	60,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	61,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	62,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	63,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	64,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	65,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	66,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	67,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	68,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	69,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	70,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	71,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	72,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	73,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	74,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	75,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	76,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	77,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	78,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	79,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	80,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	81,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	82,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	83,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	84,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	85,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	86,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	87,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	88,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	89,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	90,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	91,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	92,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	93,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	94,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	95,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	96,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	97,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	98,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	99,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	100,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	101,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	102,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	103,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	104,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	105,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	106,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	107,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	108,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	109,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	110,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	111,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	112,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	113,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	114,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	115,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	116,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	117,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	118,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	119,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	120,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	121,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	122,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	123,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	124,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	125,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	126,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	127,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	128,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	129,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	130,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	131,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	132,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	133,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	134,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	135,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	136,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	137,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	138,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	139,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	140,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	141,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	142,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	143,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	144,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	145,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	146,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	147,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	148,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	149,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	150,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	151,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	152,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	153,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	154,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	155,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	156,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	157,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	158,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	159,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	160,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	161,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	162,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	163,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	164,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	165,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	166,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	167,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	168,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	169,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	170,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	171,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	172,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	173,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	174,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	175,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	176,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	177,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	178,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	179,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	180,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	181,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	182,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	183,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	184,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	185,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	186,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	187,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	188,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	189,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	190,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	191,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	192,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	193,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	194,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	195,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	196,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	197,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	198,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	199,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	200,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	201,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	202,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	203,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	204,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	205,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	206,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	207,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	208,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	209,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	210,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	211,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	212,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	213,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	214,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	215,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	216,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	217,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	218,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	219,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	220,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	221,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	222,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	223,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	224,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	225,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	226,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	227,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	228,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	229,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	230,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	231,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	232,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	233,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	234,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	235,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	236,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	237,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	238,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	239,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	240,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	241,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	242,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	243,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	244,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	245,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	246,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	247,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	248,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	249,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	250,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	251,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	252,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	253,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	254,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	255,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	256,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	257,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	258,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	259,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	260,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	261,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	262,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	263,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	264,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	265,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	266,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	267,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	268,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	269,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	270,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	271,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	272,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	273,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	274,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	275,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	276,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	277,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	278,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	279,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	280,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	281,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	282,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	283,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	284,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	285,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	286,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	287,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	288,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	289,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	290,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	291,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	292,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	293,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	294,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	295,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	296,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	297,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	298,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	299,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	300,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	301,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	302,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	303,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	304,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	305,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	306,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	307,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	308,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	309,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	310,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	311,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	312,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	313,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	314,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	315,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	316,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	317,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	318,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	319,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	320,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	321,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	322,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	323,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	324,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	325,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	326,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	327,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	328,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	329,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	330,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	331,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	332,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	333,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	334,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	335,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	336,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	337,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	338,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	339,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	340,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	341,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	342,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	343,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	344,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	345,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	346,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	347,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	348,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	349,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	350,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	351,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	352,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	353,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	354,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	355,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	356,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	357,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	358,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	359,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	360,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	361,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	362,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	363,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	364,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	365,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	366,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	367,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	368,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	369,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	370,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	371,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	372,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	373,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	374,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	375,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	376,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	377,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	378,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	379,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	380,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	381,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	382,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	383,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	384,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	385,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	386,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	387,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	388,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	389,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	390,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	391,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	392,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	393,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	394,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	395,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	396,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	397,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	398,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	399,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	400,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	401,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	402,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	403,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	404,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	405,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	406,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	407,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	408,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	409,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	410,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	411,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	412,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	413,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	414,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	415,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	416,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	417,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	418,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	419,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	420,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	421,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	422,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	423,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	424,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	425,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	426,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	427,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	428,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	429,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	430,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	431,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	432,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	433,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	434,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	435,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	436,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	437,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	438,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	439,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	440,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	441,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	442,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	443,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	444,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	445,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	446,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	447,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	448,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	449,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	450,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	451,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	452,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	453,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	454,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	455,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	456,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	457,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	458,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	459,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	460,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	461,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	462,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	463,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	464,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	465,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	466,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	467,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	468,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	469,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	470,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	471,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	472,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	473,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	474,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	475,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	476,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	477,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	478,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	479,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	480,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	481,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	482,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	483,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	484,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	485,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	486,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	487,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	488,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	489,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	490,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	491,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	492,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	493,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	494,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	495,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	496,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	497,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	498,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	499,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	500,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	501,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	502,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	503,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	504,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	505,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	506,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	507,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	508,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	509,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	510,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	511,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	512,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	513,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	514,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	515,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	516,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	517,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	518,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	519,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	520,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	521,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	522,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	523,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	524,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	525,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	526,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	527,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	528,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	529,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	530,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	531,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	532,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	533,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	534,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	535,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	536,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	537,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	538,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	539,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	540,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	541,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	542,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	543,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	544,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	545,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	546,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	547,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	548,
									"scores":	[-7.007609925983652, -7.5943037314836515, -7.5943037314836515, -7.4406450834836519, -6.9701894356836522, -7.5943037314836515, -7.2858811987836525, -7.2858811987836525, -7.2858811987836525, -7.2858811987836525, -7.5943037314836515, -7.2858811987836525, -7.2858811987836525, -7.3753038987836526, -7.3753038987836526, -7.2858811987836525, -7.2858811987836525, -7.2858811987836525, -7.2858811987836525, -6.7929265956836522, -6.7929265956836522, -7.2858811987836525, -7.2858811987836525, -7.2858811987836525, -7.2858811987836525, -7.2858811987836525, -6.7929265956836522, -7.2858811987836525]
								}, {
									"case":	549,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	550,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	551,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	552,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	553,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	554,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	555,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	556,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}, {
									"case":	557,
									"scores":	[-9.2703917259836537, -9.85708553148365, -9.85708553148365, -9.70342688348365, -9.2329712356836531, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.85708553148365, -9.54866299878365, -9.54866299878365, -9.63808569878365, -9.63808569878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.05570839568365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.54866299878365, -9.05570839568365, -9.54866299878365]
								}]
						}, {
							"switch":	91,
							"types":	[[7], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6], []],
							"begin_line":	1386,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\235\", 2) == 0) || __is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\235\", 2) == 0) && !__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2386547071281457, -6.0759905071281448, -6.0759905071281448, -5.8879177071281461, -4.9511882341281455, -6.0759905071281448, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -6.0759905071281448, -5.1677620341281454, -5.1677620341281454, -5.6047270341281461, -5.6047270341281461, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -4.6864067341281457, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.1677620341281454]
								}, {
									"case":	2,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}]
						}, {
							"switch":	106,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1386,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n        work = unlzw;\n        method = 1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1386\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(insize), sizeof (insize), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(insize), sizeof (insize), &(flags), sizeof (flags), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"\\037\\235\", 2) == 0)) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1725403686836522, -7.0098761686836522, -7.0098761686836522, -6.8218033686836517, -5.8850738956836519, -7.0098761686836522, -6.1016476956836527, -6.1016476956836527, -6.1016476956836527, -6.1016476956836527, -7.0098761686836522, -6.1016476956836527, -6.1016476956836527, -6.5386126956836517, -6.5386126956836517, -6.1016476956836527, -6.1016476956836527, -6.1016476956836527, -6.1016476956836527, -5.6202923956836521, -5.6202923956836521, -6.1016476956836527, -6.1016476956836527, -6.1016476956836527, -6.1016476956836527, -6.1016476956836527, -5.6202923956836521, -6.1016476956836527]
								}, {
									"case":	2,
									"scores":	[-5.4196983376836521, -6.257034137683652, -6.257034137683652, -6.0689613376836515, -5.1322318646836518, -6.257034137683652, -5.3488056646836517, -5.3488056646836517, -5.3488056646836517, -5.3488056646836517, -6.257034137683652, -5.3488056646836517, -5.3488056646836517, -5.7857706646836515, -5.7857706646836515, -5.3488056646836517, -5.3488056646836517, -5.3488056646836517, -5.3488056646836517, -4.867450364683652, -4.867450364683652, -5.3488056646836517, -5.3488056646836517, -5.3488056646836517, -5.3488056646836517, -5.3488056646836517, -4.867450364683652, -5.3488056646836517]
								}]
						}]
				}, {
					"line":	1381,
					"switches":	[{
							"switch":	88,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1382,
							"begin_column":	10,
							"end_line":	1382,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.45749610300117]
								}, {
									"case":	2,
									"scores":	[-4.45749610300117]
								}, {
									"case":	3,
									"scores":	[-4.45749610300117]
								}, {
									"case":	4,
									"scores":	[-4.45749610300117]
								}, {
									"case":	5,
									"scores":	[-4.45749610300117]
								}, {
									"case":	6,
									"scores":	[-4.45749610300117]
								}, {
									"case":	7,
									"scores":	[-4.45749610300117]
								}, {
									"case":	8,
									"scores":	[-4.45749610300117]
								}, {
									"case":	9,
									"scores":	[-4.45749610300117]
								}, {
									"case":	10,
									"scores":	[-4.45749610300117]
								}, {
									"case":	11,
									"scores":	[-4.45749610300117]
								}, {
									"case":	12,
									"scores":	[-4.45749610300117]
								}, {
									"case":	13,
									"scores":	[-4.45749610300117]
								}, {
									"case":	14,
									"scores":	[-4.45749610300117]
								}, {
									"case":	15,
									"scores":	[-4.45749610300117]
								}, {
									"case":	16,
									"scores":	[-4.45749610300117]
								}, {
									"case":	17,
									"scores":	[-4.45749610300117]
								}, {
									"case":	18,
									"scores":	[-4.45749610300117]
								}, {
									"case":	19,
									"scores":	[-4.45749610300117]
								}, {
									"case":	20,
									"scores":	[-4.45749610300117]
								}, {
									"case":	21,
									"scores":	[-4.45749610300117]
								}, {
									"case":	22,
									"scores":	[-4.45749610300117]
								}, {
									"case":	23,
									"scores":	[-4.45749610300117]
								}, {
									"case":	24,
									"scores":	[-4.45749610300117]
								}, {
									"case":	25,
									"scores":	[-4.45749610300117]
								}, {
									"case":	26,
									"scores":	[-4.45749610300117]
								}, {
									"case":	27,
									"scores":	[-4.45749610300117]
								}, {
									"case":	28,
									"scores":	[-4.45749610300117]
								}, {
									"case":	29,
									"scores":	[-4.45749610300117]
								}, {
									"case":	30,
									"scores":	[-4.45749610300117]
								}, {
									"case":	31,
									"scores":	[-4.45749610300117]
								}, {
									"case":	32,
									"scores":	[-4.45749610300117]
								}, {
									"case":	33,
									"scores":	[-4.45749610300117]
								}, {
									"case":	34,
									"scores":	[-4.45749610300117]
								}, {
									"case":	35,
									"scores":	[-4.45749610300117]
								}, {
									"case":	36,
									"scores":	[-4.45749610300117]
								}, {
									"case":	37,
									"scores":	[-4.45749610300117]
								}, {
									"case":	38,
									"scores":	[-4.45749610300117]
								}, {
									"case":	39,
									"scores":	[-4.45749610300117]
								}, {
									"case":	40,
									"scores":	[-4.45749610300117]
								}, {
									"case":	41,
									"scores":	[-4.45749610300117]
								}, {
									"case":	42,
									"scores":	[-4.45749610300117]
								}, {
									"case":	43,
									"scores":	[-4.45749610300117]
								}, {
									"case":	44,
									"scores":	[-4.45749610300117]
								}, {
									"case":	45,
									"scores":	[-4.45749610300117]
								}, {
									"case":	46,
									"scores":	[-4.45749610300117]
								}, {
									"case":	47,
									"scores":	[-4.45749610300117]
								}, {
									"case":	48,
									"scores":	[-4.45749610300117]
								}, {
									"case":	49,
									"scores":	[-4.45749610300117]
								}, {
									"case":	50,
									"scores":	[-4.45749610300117]
								}, {
									"case":	51,
									"scores":	[-4.45749610300117]
								}, {
									"case":	52,
									"scores":	[-4.45749610300117]
								}, {
									"case":	53,
									"scores":	[-4.45749610300117]
								}, {
									"case":	54,
									"scores":	[-4.45749610300117]
								}, {
									"case":	55,
									"scores":	[-4.45749610300117]
								}, {
									"case":	56,
									"scores":	[-4.45749610300117]
								}, {
									"case":	57,
									"scores":	[-4.45749610300117]
								}, {
									"case":	58,
									"scores":	[-4.45749610300117]
								}, {
									"case":	59,
									"scores":	[-4.45749610300117]
								}, {
									"case":	60,
									"scores":	[-4.45749610300117]
								}, {
									"case":	61,
									"scores":	[-4.45749610300117]
								}, {
									"case":	62,
									"scores":	[-4.45749610300117]
								}, {
									"case":	63,
									"scores":	[-4.45749610300117]
								}, {
									"case":	64,
									"scores":	[-4.45749610300117]
								}, {
									"case":	65,
									"scores":	[-4.45749610300117]
								}, {
									"case":	66,
									"scores":	[-4.45749610300117]
								}, {
									"case":	67,
									"scores":	[-4.45749610300117]
								}, {
									"case":	68,
									"scores":	[-4.45749610300117]
								}, {
									"case":	69,
									"scores":	[-4.45749610300117]
								}, {
									"case":	70,
									"scores":	[-4.45749610300117]
								}, {
									"case":	71,
									"scores":	[-4.45749610300117]
								}, {
									"case":	72,
									"scores":	[-4.45749610300117]
								}, {
									"case":	73,
									"scores":	[-4.45749610300117]
								}, {
									"case":	74,
									"scores":	[-4.45749610300117]
								}, {
									"case":	75,
									"scores":	[-4.45749610300117]
								}, {
									"case":	76,
									"scores":	[-4.45749610300117]
								}, {
									"case":	77,
									"scores":	[-4.45749610300117]
								}, {
									"case":	78,
									"scores":	[-4.45749610300117]
								}, {
									"case":	79,
									"scores":	[-4.45749610300117]
								}, {
									"case":	80,
									"scores":	[-4.45749610300117]
								}, {
									"case":	81,
									"scores":	[-4.45749610300117]
								}, {
									"case":	82,
									"scores":	[-4.45749610300117]
								}, {
									"case":	83,
									"scores":	[-4.45749610300117]
								}, {
									"case":	84,
									"scores":	[-4.45749610300117]
								}, {
									"case":	85,
									"scores":	[-4.45749610300117]
								}, {
									"case":	86,
									"scores":	[-4.45749610300117]
								}, {
									"case":	87,
									"scores":	[-4.45749610300117]
								}, {
									"case":	88,
									"scores":	[-4.45749610300117]
								}, {
									"case":	89,
									"scores":	[-4.45749610300117]
								}, {
									"case":	90,
									"scores":	[-4.45749610300117]
								}, {
									"case":	91,
									"scores":	[-4.45749610300117]
								}, {
									"case":	92,
									"scores":	[-4.45749610300117]
								}, {
									"case":	93,
									"scores":	[-4.45749610300117]
								}, {
									"case":	94,
									"scores":	[-4.45749610300117]
								}, {
									"case":	95,
									"scores":	[-4.45749610300117]
								}, {
									"case":	96,
									"scores":	[-4.45749610300117]
								}, {
									"case":	97,
									"scores":	[-4.45749610300117]
								}, {
									"case":	98,
									"scores":	[-4.45749610300117]
								}, {
									"case":	99,
									"scores":	[-4.45749610300117]
								}, {
									"case":	100,
									"scores":	[-4.45749610300117]
								}, {
									"case":	101,
									"scores":	[-4.45749610300117]
								}, {
									"case":	102,
									"scores":	[-4.45749610300117]
								}, {
									"case":	103,
									"scores":	[-4.45749610300117]
								}, {
									"case":	104,
									"scores":	[-4.45749610300117]
								}, {
									"case":	105,
									"scores":	[-4.45749610300117]
								}, {
									"case":	106,
									"scores":	[-4.45749610300117]
								}, {
									"case":	107,
									"scores":	[-4.45749610300117]
								}, {
									"case":	108,
									"scores":	[-4.45749610300117]
								}, {
									"case":	109,
									"scores":	[-4.45749610300117]
								}, {
									"case":	110,
									"scores":	[-4.45749610300117]
								}, {
									"case":	111,
									"scores":	[-4.45749610300117]
								}, {
									"case":	112,
									"scores":	[-4.45749610300117]
								}, {
									"case":	113,
									"scores":	[-4.45749610300117]
								}, {
									"case":	114,
									"scores":	[-4.45749610300117]
								}, {
									"case":	115,
									"scores":	[-4.45749610300117]
								}, {
									"case":	116,
									"scores":	[-4.45749610300117]
								}, {
									"case":	117,
									"scores":	[-4.45749610300117]
								}, {
									"case":	118,
									"scores":	[-4.45749610300117]
								}, {
									"case":	119,
									"scores":	[-4.45749610300117]
								}, {
									"case":	120,
									"scores":	[-4.45749610300117]
								}, {
									"case":	121,
									"scores":	[-4.45749610300117]
								}, {
									"case":	122,
									"scores":	[-4.45749610300117]
								}, {
									"case":	123,
									"scores":	[-4.45749610300117]
								}, {
									"case":	124,
									"scores":	[-4.45749610300117]
								}, {
									"case":	125,
									"scores":	[-4.45749610300117]
								}, {
									"case":	126,
									"scores":	[-4.45749610300117]
								}, {
									"case":	127,
									"scores":	[-4.45749610300117]
								}, {
									"case":	128,
									"scores":	[-4.45749610300117]
								}, {
									"case":	129,
									"scores":	[-4.45749610300117]
								}, {
									"case":	130,
									"scores":	[-4.45749610300117]
								}, {
									"case":	131,
									"scores":	[-4.45749610300117]
								}, {
									"case":	132,
									"scores":	[-4.45749610300117]
								}, {
									"case":	133,
									"scores":	[-4.45749610300117]
								}, {
									"case":	134,
									"scores":	[-4.45749610300117]
								}, {
									"case":	135,
									"scores":	[-4.45749610300117]
								}, {
									"case":	136,
									"scores":	[-4.45749610300117]
								}, {
									"case":	137,
									"scores":	[-4.45749610300117]
								}, {
									"case":	138,
									"scores":	[-4.45749610300117]
								}, {
									"case":	139,
									"scores":	[-4.45749610300117]
								}, {
									"case":	140,
									"scores":	[-4.45749610300117]
								}, {
									"case":	141,
									"scores":	[-4.45749610300117]
								}, {
									"case":	142,
									"scores":	[-4.45749610300117]
								}, {
									"case":	143,
									"scores":	[-4.45749610300117]
								}, {
									"case":	144,
									"scores":	[-4.45749610300117]
								}, {
									"case":	145,
									"scores":	[-4.45749610300117]
								}, {
									"case":	146,
									"scores":	[-4.45749610300117]
								}, {
									"case":	147,
									"scores":	[-4.45749610300117]
								}, {
									"case":	148,
									"scores":	[-4.45749610300117]
								}, {
									"case":	149,
									"scores":	[-4.45749610300117]
								}, {
									"case":	150,
									"scores":	[-4.45749610300117]
								}, {
									"case":	151,
									"scores":	[-4.45749610300117]
								}, {
									"case":	152,
									"scores":	[-4.45749610300117]
								}, {
									"case":	153,
									"scores":	[-4.45749610300117]
								}, {
									"case":	154,
									"scores":	[-4.45749610300117]
								}, {
									"case":	155,
									"scores":	[-4.45749610300117]
								}, {
									"case":	156,
									"scores":	[-4.45749610300117]
								}, {
									"case":	157,
									"scores":	[-4.45749610300117]
								}, {
									"case":	158,
									"scores":	[-4.45749610300117]
								}, {
									"case":	159,
									"scores":	[-4.45749610300117]
								}, {
									"case":	160,
									"scores":	[-4.45749610300117]
								}, {
									"case":	161,
									"scores":	[-4.45749610300117]
								}, {
									"case":	162,
									"scores":	[-4.45749610300117]
								}, {
									"case":	163,
									"scores":	[-4.45749610300117]
								}, {
									"case":	164,
									"scores":	[-4.45749610300117]
								}, {
									"case":	165,
									"scores":	[-4.45749610300117]
								}, {
									"case":	166,
									"scores":	[-4.45749610300117]
								}, {
									"case":	167,
									"scores":	[-4.45749610300117]
								}, {
									"case":	168,
									"scores":	[-4.45749610300117]
								}, {
									"case":	169,
									"scores":	[-4.45749610300117]
								}, {
									"case":	170,
									"scores":	[-4.45749610300117]
								}, {
									"case":	171,
									"scores":	[-4.45749610300117]
								}, {
									"case":	172,
									"scores":	[-4.45749610300117]
								}, {
									"case":	173,
									"scores":	[-4.45749610300117]
								}, {
									"case":	174,
									"scores":	[-4.45749610300117]
								}, {
									"case":	175,
									"scores":	[-4.45749610300117]
								}, {
									"case":	176,
									"scores":	[-4.45749610300117]
								}, {
									"case":	177,
									"scores":	[-4.45749610300117]
								}, {
									"case":	178,
									"scores":	[-4.45749610300117]
								}, {
									"case":	179,
									"scores":	[-4.45749610300117]
								}, {
									"case":	180,
									"scores":	[-4.45749610300117]
								}, {
									"case":	181,
									"scores":	[-4.45749610300117]
								}, {
									"case":	182,
									"scores":	[-4.45749610300117]
								}, {
									"case":	183,
									"scores":	[-4.45749610300117]
								}, {
									"case":	184,
									"scores":	[-4.45749610300117]
								}, {
									"case":	185,
									"scores":	[-4.45749610300117]
								}, {
									"case":	186,
									"scores":	[-4.45749610300117]
								}, {
									"case":	187,
									"scores":	[-4.45749610300117]
								}, {
									"case":	188,
									"scores":	[-4.45749610300117]
								}, {
									"case":	189,
									"scores":	[-4.45749610300117]
								}, {
									"case":	190,
									"scores":	[-4.45749610300117]
								}, {
									"case":	191,
									"scores":	[-4.45749610300117]
								}, {
									"case":	192,
									"scores":	[-4.45749610300117]
								}, {
									"case":	193,
									"scores":	[-4.45749610300117]
								}, {
									"case":	194,
									"scores":	[-4.45749610300117]
								}, {
									"case":	195,
									"scores":	[-4.45749610300117]
								}, {
									"case":	196,
									"scores":	[-4.45749610300117]
								}, {
									"case":	197,
									"scores":	[-4.45749610300117]
								}, {
									"case":	198,
									"scores":	[-4.45749610300117]
								}, {
									"case":	199,
									"scores":	[-4.45749610300117]
								}, {
									"case":	200,
									"scores":	[-4.45749610300117]
								}, {
									"case":	201,
									"scores":	[-4.45749610300117]
								}, {
									"case":	202,
									"scores":	[-4.45749610300117]
								}, {
									"case":	203,
									"scores":	[-4.45749610300117]
								}, {
									"case":	204,
									"scores":	[-4.45749610300117]
								}, {
									"case":	205,
									"scores":	[-4.45749610300117]
								}, {
									"case":	206,
									"scores":	[-4.45749610300117]
								}, {
									"case":	207,
									"scores":	[-4.45749610300117]
								}, {
									"case":	208,
									"scores":	[-4.45749610300117]
								}, {
									"case":	209,
									"scores":	[-4.45749610300117]
								}, {
									"case":	210,
									"scores":	[-4.45749610300117]
								}, {
									"case":	211,
									"scores":	[-4.45749610300117]
								}, {
									"case":	212,
									"scores":	[-4.45749610300117]
								}, {
									"case":	213,
									"scores":	[-4.45749610300117]
								}, {
									"case":	214,
									"scores":	[-4.45749610300117]
								}, {
									"case":	215,
									"scores":	[-4.45749610300117]
								}, {
									"case":	216,
									"scores":	[-4.45749610300117]
								}, {
									"case":	217,
									"scores":	[-4.45749610300117]
								}, {
									"case":	218,
									"scores":	[-4.45749610300117]
								}, {
									"case":	219,
									"scores":	[-4.45749610300117]
								}, {
									"case":	220,
									"scores":	[-4.45749610300117]
								}, {
									"case":	221,
									"scores":	[-4.45749610300117]
								}, {
									"case":	222,
									"scores":	[-4.45749610300117]
								}, {
									"case":	223,
									"scores":	[-4.45749610300117]
								}, {
									"case":	224,
									"scores":	[-4.45749610300117]
								}, {
									"case":	225,
									"scores":	[-4.45749610300117]
								}, {
									"case":	226,
									"scores":	[-4.45749610300117]
								}, {
									"case":	227,
									"scores":	[-4.45749610300117]
								}, {
									"case":	228,
									"scores":	[-4.45749610300117]
								}, {
									"case":	229,
									"scores":	[-4.45749610300117]
								}, {
									"case":	230,
									"scores":	[-4.45749610300117]
								}, {
									"case":	231,
									"scores":	[-4.45749610300117]
								}, {
									"case":	232,
									"scores":	[-4.45749610300117]
								}, {
									"case":	233,
									"scores":	[-4.45749610300117]
								}, {
									"case":	234,
									"scores":	[-4.45749610300117]
								}, {
									"case":	235,
									"scores":	[-4.45749610300117]
								}, {
									"case":	236,
									"scores":	[-4.45749610300117]
								}, {
									"case":	237,
									"scores":	[-4.45749610300117]
								}, {
									"case":	238,
									"scores":	[-4.45749610300117]
								}, {
									"case":	239,
									"scores":	[-4.45749610300117]
								}, {
									"case":	240,
									"scores":	[-4.45749610300117]
								}, {
									"case":	241,
									"scores":	[-4.45749610300117]
								}, {
									"case":	242,
									"scores":	[-4.45749610300117]
								}, {
									"case":	243,
									"scores":	[-4.45749610300117]
								}, {
									"case":	244,
									"scores":	[-4.45749610300117]
								}, {
									"case":	245,
									"scores":	[-4.45749610300117]
								}, {
									"case":	246,
									"scores":	[-4.45749610300117]
								}, {
									"case":	247,
									"scores":	[-4.45749610300117]
								}, {
									"case":	248,
									"scores":	[-4.45749610300117]
								}, {
									"case":	249,
									"scores":	[-4.45749610300117]
								}, {
									"case":	250,
									"scores":	[-4.45749610300117]
								}, {
									"case":	251,
									"scores":	[-4.45749610300117]
								}, {
									"case":	252,
									"scores":	[-4.45749610300117]
								}, {
									"case":	253,
									"scores":	[-4.45749610300117]
								}, {
									"case":	254,
									"scores":	[-4.45749610300117]
								}, {
									"case":	255,
									"scores":	[-4.45749610300117]
								}, {
									"case":	256,
									"scores":	[-4.45749610300117]
								}, {
									"case":	257,
									"scores":	[-4.45749610300117]
								}, {
									"case":	258,
									"scores":	[-4.45749610300117]
								}, {
									"case":	259,
									"scores":	[-4.45749610300117]
								}, {
									"case":	260,
									"scores":	[-4.45749610300117]
								}, {
									"case":	261,
									"scores":	[-4.45749610300117]
								}, {
									"case":	262,
									"scores":	[-4.45749610300117]
								}, {
									"case":	263,
									"scores":	[-4.45749610300117]
								}, {
									"case":	264,
									"scores":	[-4.45749610300117]
								}, {
									"case":	265,
									"scores":	[-4.45749610300117]
								}, {
									"case":	266,
									"scores":	[-4.45749610300117]
								}, {
									"case":	267,
									"scores":	[-4.45749610300117]
								}, {
									"case":	268,
									"scores":	[-4.45749610300117]
								}, {
									"case":	269,
									"scores":	[-4.45749610300117]
								}, {
									"case":	270,
									"scores":	[-4.45749610300117]
								}, {
									"case":	271,
									"scores":	[-4.45749610300117]
								}, {
									"case":	272,
									"scores":	[-4.45749610300117]
								}, {
									"case":	273,
									"scores":	[-4.45749610300117]
								}, {
									"case":	274,
									"scores":	[-4.45749610300117]
								}, {
									"case":	275,
									"scores":	[-4.45749610300117]
								}, {
									"case":	276,
									"scores":	[-4.45749610300117]
								}, {
									"case":	277,
									"scores":	[-4.45749610300117]
								}, {
									"case":	278,
									"scores":	[-4.45749610300117]
								}, {
									"case":	279,
									"scores":	[-4.45749610300117]
								}, {
									"case":	280,
									"scores":	[-4.45749610300117]
								}, {
									"case":	281,
									"scores":	[-4.45749610300117]
								}, {
									"case":	282,
									"scores":	[-4.45749610300117]
								}, {
									"case":	283,
									"scores":	[-4.45749610300117]
								}, {
									"case":	284,
									"scores":	[-4.45749610300117]
								}, {
									"case":	285,
									"scores":	[-4.45749610300117]
								}, {
									"case":	286,
									"scores":	[-4.45749610300117]
								}, {
									"case":	287,
									"scores":	[-4.45749610300117]
								}, {
									"case":	288,
									"scores":	[-4.45749610300117]
								}, {
									"case":	289,
									"scores":	[-4.45749610300117]
								}, {
									"case":	290,
									"scores":	[-4.45749610300117]
								}, {
									"case":	291,
									"scores":	[-4.45749610300117]
								}, {
									"case":	292,
									"scores":	[-4.45749610300117]
								}, {
									"case":	293,
									"scores":	[-4.45749610300117]
								}, {
									"case":	294,
									"scores":	[-4.45749610300117]
								}, {
									"case":	295,
									"scores":	[-4.45749610300117]
								}, {
									"case":	296,
									"scores":	[-4.45749610300117]
								}, {
									"case":	297,
									"scores":	[-4.45749610300117]
								}, {
									"case":	298,
									"scores":	[-4.45749610300117]
								}, {
									"case":	299,
									"scores":	[-4.45749610300117]
								}, {
									"case":	300,
									"scores":	[-4.45749610300117]
								}, {
									"case":	301,
									"scores":	[-4.45749610300117]
								}, {
									"case":	302,
									"scores":	[-4.45749610300117]
								}, {
									"case":	303,
									"scores":	[-4.45749610300117]
								}, {
									"case":	304,
									"scores":	[-4.45749610300117]
								}, {
									"case":	305,
									"scores":	[-4.45749610300117]
								}, {
									"case":	306,
									"scores":	[-4.45749610300117]
								}, {
									"case":	307,
									"scores":	[-4.45749610300117]
								}, {
									"case":	308,
									"scores":	[-4.45749610300117]
								}, {
									"case":	309,
									"scores":	[-4.45749610300117]
								}, {
									"case":	310,
									"scores":	[-4.45749610300117]
								}, {
									"case":	311,
									"scores":	[-4.45749610300117]
								}, {
									"case":	312,
									"scores":	[-4.45749610300117]
								}, {
									"case":	313,
									"scores":	[-4.45749610300117]
								}, {
									"case":	314,
									"scores":	[-4.45749610300117]
								}, {
									"case":	315,
									"scores":	[-4.45749610300117]
								}, {
									"case":	316,
									"scores":	[-4.45749610300117]
								}, {
									"case":	317,
									"scores":	[-4.45749610300117]
								}, {
									"case":	318,
									"scores":	[-4.45749610300117]
								}, {
									"case":	319,
									"scores":	[-4.45749610300117]
								}, {
									"case":	320,
									"scores":	[-4.45749610300117]
								}, {
									"case":	321,
									"scores":	[-4.45749610300117]
								}, {
									"case":	322,
									"scores":	[-4.45749610300117]
								}, {
									"case":	323,
									"scores":	[-4.45749610300117]
								}, {
									"case":	324,
									"scores":	[-4.45749610300117]
								}, {
									"case":	325,
									"scores":	[-4.45749610300117]
								}, {
									"case":	326,
									"scores":	[-4.45749610300117]
								}, {
									"case":	327,
									"scores":	[-4.45749610300117]
								}, {
									"case":	328,
									"scores":	[-4.45749610300117]
								}, {
									"case":	329,
									"scores":	[-4.45749610300117]
								}, {
									"case":	330,
									"scores":	[-4.45749610300117]
								}, {
									"case":	331,
									"scores":	[-4.45749610300117]
								}, {
									"case":	332,
									"scores":	[-4.45749610300117]
								}, {
									"case":	333,
									"scores":	[-4.45749610300117]
								}, {
									"case":	334,
									"scores":	[-4.45749610300117]
								}, {
									"case":	335,
									"scores":	[-4.45749610300117]
								}, {
									"case":	336,
									"scores":	[-4.45749610300117]
								}, {
									"case":	337,
									"scores":	[-4.45749610300117]
								}, {
									"case":	338,
									"scores":	[-4.45749610300117]
								}, {
									"case":	339,
									"scores":	[-4.45749610300117]
								}, {
									"case":	340,
									"scores":	[-4.45749610300117]
								}, {
									"case":	341,
									"scores":	[-4.45749610300117]
								}, {
									"case":	342,
									"scores":	[-4.45749610300117]
								}, {
									"case":	343,
									"scores":	[-4.45749610300117]
								}, {
									"case":	344,
									"scores":	[-4.45749610300117]
								}, {
									"case":	345,
									"scores":	[-4.45749610300117]
								}, {
									"case":	346,
									"scores":	[-4.45749610300117]
								}, {
									"case":	347,
									"scores":	[-4.45749610300117]
								}, {
									"case":	348,
									"scores":	[-4.45749610300117]
								}, {
									"case":	349,
									"scores":	[-4.45749610300117]
								}, {
									"case":	350,
									"scores":	[-4.45749610300117]
								}, {
									"case":	351,
									"scores":	[-4.45749610300117]
								}, {
									"case":	352,
									"scores":	[-4.45749610300117]
								}, {
									"case":	353,
									"scores":	[-4.45749610300117]
								}, {
									"case":	354,
									"scores":	[-4.45749610300117]
								}, {
									"case":	355,
									"scores":	[-4.45749610300117]
								}, {
									"case":	356,
									"scores":	[-4.45749610300117]
								}, {
									"case":	357,
									"scores":	[-4.45749610300117]
								}, {
									"case":	358,
									"scores":	[-4.45749610300117]
								}, {
									"case":	359,
									"scores":	[-4.45749610300117]
								}, {
									"case":	360,
									"scores":	[-4.45749610300117]
								}, {
									"case":	361,
									"scores":	[-4.45749610300117]
								}, {
									"case":	362,
									"scores":	[-4.45749610300117]
								}, {
									"case":	363,
									"scores":	[-4.45749610300117]
								}, {
									"case":	364,
									"scores":	[-4.45749610300117]
								}, {
									"case":	365,
									"scores":	[-4.45749610300117]
								}, {
									"case":	366,
									"scores":	[-4.45749610300117]
								}, {
									"case":	367,
									"scores":	[-4.45749610300117]
								}, {
									"case":	368,
									"scores":	[-4.45749610300117]
								}, {
									"case":	369,
									"scores":	[-4.45749610300117]
								}, {
									"case":	370,
									"scores":	[-4.45749610300117]
								}, {
									"case":	371,
									"scores":	[-4.45749610300117]
								}, {
									"case":	372,
									"scores":	[-4.45749610300117]
								}, {
									"case":	373,
									"scores":	[-4.45749610300117]
								}, {
									"case":	374,
									"scores":	[-4.45749610300117]
								}, {
									"case":	375,
									"scores":	[-4.45749610300117]
								}, {
									"case":	376,
									"scores":	[-4.45749610300117]
								}, {
									"case":	377,
									"scores":	[-4.45749610300117]
								}, {
									"case":	378,
									"scores":	[-4.45749610300117]
								}, {
									"case":	379,
									"scores":	[-4.45749610300117]
								}, {
									"case":	380,
									"scores":	[-4.45749610300117]
								}, {
									"case":	381,
									"scores":	[-4.45749610300117]
								}, {
									"case":	382,
									"scores":	[-4.45749610300117]
								}, {
									"case":	383,
									"scores":	[-4.45749610300117]
								}, {
									"case":	384,
									"scores":	[-4.45749610300117]
								}, {
									"case":	385,
									"scores":	[-4.45749610300117]
								}, {
									"case":	386,
									"scores":	[-4.45749610300117]
								}, {
									"case":	387,
									"scores":	[-4.45749610300117]
								}, {
									"case":	388,
									"scores":	[-4.45749610300117]
								}, {
									"case":	389,
									"scores":	[-4.45749610300117]
								}, {
									"case":	390,
									"scores":	[-4.45749610300117]
								}, {
									"case":	391,
									"scores":	[-4.45749610300117]
								}, {
									"case":	392,
									"scores":	[-4.45749610300117]
								}, {
									"case":	393,
									"scores":	[-4.45749610300117]
								}, {
									"case":	394,
									"scores":	[-4.45749610300117]
								}, {
									"case":	395,
									"scores":	[-4.45749610300117]
								}, {
									"case":	396,
									"scores":	[-4.45749610300117]
								}, {
									"case":	397,
									"scores":	[-4.45749610300117]
								}, {
									"case":	398,
									"scores":	[-4.45749610300117]
								}, {
									"case":	399,
									"scores":	[-4.45749610300117]
								}, {
									"case":	400,
									"scores":	[-4.45749610300117]
								}, {
									"case":	401,
									"scores":	[-4.45749610300117]
								}, {
									"case":	402,
									"scores":	[-4.45749610300117]
								}, {
									"case":	403,
									"scores":	[-4.45749610300117]
								}, {
									"case":	404,
									"scores":	[-4.45749610300117]
								}, {
									"case":	405,
									"scores":	[-4.45749610300117]
								}, {
									"case":	406,
									"scores":	[-4.45749610300117]
								}, {
									"case":	407,
									"scores":	[-4.45749610300117]
								}, {
									"case":	408,
									"scores":	[-4.45749610300117]
								}, {
									"case":	409,
									"scores":	[-4.45749610300117]
								}, {
									"case":	410,
									"scores":	[-4.45749610300117]
								}, {
									"case":	411,
									"scores":	[-4.45749610300117]
								}, {
									"case":	412,
									"scores":	[-4.45749610300117]
								}, {
									"case":	413,
									"scores":	[-4.45749610300117]
								}, {
									"case":	414,
									"scores":	[-4.45749610300117]
								}, {
									"case":	415,
									"scores":	[-4.45749610300117]
								}, {
									"case":	416,
									"scores":	[-4.45749610300117]
								}, {
									"case":	417,
									"scores":	[-4.45749610300117]
								}, {
									"case":	418,
									"scores":	[-4.45749610300117]
								}, {
									"case":	419,
									"scores":	[-4.45749610300117]
								}, {
									"case":	420,
									"scores":	[-4.45749610300117]
								}, {
									"case":	421,
									"scores":	[-4.45749610300117]
								}, {
									"case":	422,
									"scores":	[-4.45749610300117]
								}, {
									"case":	423,
									"scores":	[-4.45749610300117]
								}, {
									"case":	424,
									"scores":	[-4.45749610300117]
								}, {
									"case":	425,
									"scores":	[-4.45749610300117]
								}, {
									"case":	426,
									"scores":	[-4.45749610300117]
								}, {
									"case":	427,
									"scores":	[-4.45749610300117]
								}, {
									"case":	428,
									"scores":	[-4.45749610300117]
								}, {
									"case":	429,
									"scores":	[-4.45749610300117]
								}, {
									"case":	430,
									"scores":	[-4.45749610300117]
								}, {
									"case":	431,
									"scores":	[-4.45749610300117]
								}, {
									"case":	432,
									"scores":	[-4.45749610300117]
								}, {
									"case":	433,
									"scores":	[-4.45749610300117]
								}, {
									"case":	434,
									"scores":	[-4.45749610300117]
								}, {
									"case":	435,
									"scores":	[-4.45749610300117]
								}, {
									"case":	436,
									"scores":	[-4.45749610300117]
								}, {
									"case":	437,
									"scores":	[-4.45749610300117]
								}, {
									"case":	438,
									"scores":	[-4.45749610300117]
								}, {
									"case":	439,
									"scores":	[-4.45749610300117]
								}, {
									"case":	440,
									"scores":	[-4.45749610300117]
								}, {
									"case":	441,
									"scores":	[-4.45749610300117]
								}, {
									"case":	442,
									"scores":	[-4.45749610300117]
								}, {
									"case":	443,
									"scores":	[-4.45749610300117]
								}, {
									"case":	444,
									"scores":	[-4.45749610300117]
								}, {
									"case":	445,
									"scores":	[-4.45749610300117]
								}, {
									"case":	446,
									"scores":	[-4.45749610300117]
								}, {
									"case":	447,
									"scores":	[-4.45749610300117]
								}, {
									"case":	448,
									"scores":	[-4.45749610300117]
								}, {
									"case":	449,
									"scores":	[-4.45749610300117]
								}, {
									"case":	450,
									"scores":	[-4.45749610300117]
								}, {
									"case":	451,
									"scores":	[-4.45749610300117]
								}, {
									"case":	452,
									"scores":	[-4.45749610300117]
								}, {
									"case":	453,
									"scores":	[-4.45749610300117]
								}, {
									"case":	454,
									"scores":	[-4.45749610300117]
								}, {
									"case":	455,
									"scores":	[-4.45749610300117]
								}, {
									"case":	456,
									"scores":	[-4.45749610300117]
								}, {
									"case":	457,
									"scores":	[-4.45749610300117]
								}, {
									"case":	458,
									"scores":	[-4.45749610300117]
								}, {
									"case":	459,
									"scores":	[-4.45749610300117]
								}, {
									"case":	460,
									"scores":	[-4.45749610300117]
								}, {
									"case":	461,
									"scores":	[-4.45749610300117]
								}, {
									"case":	462,
									"scores":	[-4.45749610300117]
								}, {
									"case":	463,
									"scores":	[-4.45749610300117]
								}, {
									"case":	464,
									"scores":	[-4.45749610300117]
								}, {
									"case":	465,
									"scores":	[-4.45749610300117]
								}, {
									"case":	466,
									"scores":	[-4.45749610300117]
								}, {
									"case":	467,
									"scores":	[-4.45749610300117]
								}, {
									"case":	468,
									"scores":	[-4.45749610300117]
								}, {
									"case":	469,
									"scores":	[-4.45749610300117]
								}, {
									"case":	470,
									"scores":	[-4.45749610300117]
								}, {
									"case":	471,
									"scores":	[-4.45749610300117]
								}, {
									"case":	472,
									"scores":	[-4.45749610300117]
								}, {
									"case":	473,
									"scores":	[-4.45749610300117]
								}, {
									"case":	474,
									"scores":	[-4.45749610300117]
								}, {
									"case":	475,
									"scores":	[-4.45749610300117]
								}, {
									"case":	476,
									"scores":	[-4.45749610300117]
								}, {
									"case":	477,
									"scores":	[-4.45749610300117]
								}, {
									"case":	478,
									"scores":	[-4.45749610300117]
								}, {
									"case":	479,
									"scores":	[-4.45749610300117]
								}, {
									"case":	480,
									"scores":	[-4.45749610300117]
								}, {
									"case":	481,
									"scores":	[-4.45749610300117]
								}, {
									"case":	482,
									"scores":	[-4.45749610300117]
								}, {
									"case":	483,
									"scores":	[-4.45749610300117]
								}, {
									"case":	484,
									"scores":	[-4.45749610300117]
								}, {
									"case":	485,
									"scores":	[-4.45749610300117]
								}, {
									"case":	486,
									"scores":	[-4.45749610300117]
								}, {
									"case":	487,
									"scores":	[-4.45749610300117]
								}, {
									"case":	488,
									"scores":	[-4.45749610300117]
								}, {
									"case":	489,
									"scores":	[-4.45749610300117]
								}, {
									"case":	490,
									"scores":	[-4.45749610300117]
								}, {
									"case":	491,
									"scores":	[-4.45749610300117]
								}, {
									"case":	492,
									"scores":	[-4.45749610300117]
								}, {
									"case":	493,
									"scores":	[-4.45749610300117]
								}, {
									"case":	494,
									"scores":	[-4.45749610300117]
								}, {
									"case":	495,
									"scores":	[-4.45749610300117]
								}, {
									"case":	496,
									"scores":	[-4.45749610300117]
								}, {
									"case":	497,
									"scores":	[-4.45749610300117]
								}, {
									"case":	498,
									"scores":	[-4.45749610300117]
								}, {
									"case":	499,
									"scores":	[-4.45749610300117]
								}, {
									"case":	500,
									"scores":	[-4.45749610300117]
								}, {
									"case":	501,
									"scores":	[-4.45749610300117]
								}, {
									"case":	502,
									"scores":	[-4.45749610300117]
								}, {
									"case":	503,
									"scores":	[-4.45749610300117]
								}, {
									"case":	504,
									"scores":	[-4.45749610300117]
								}, {
									"case":	505,
									"scores":	[-4.45749610300117]
								}, {
									"case":	506,
									"scores":	[-4.45749610300117]
								}, {
									"case":	507,
									"scores":	[-4.45749610300117]
								}, {
									"case":	508,
									"scores":	[-4.45749610300117]
								}, {
									"case":	509,
									"scores":	[-4.45749610300117]
								}, {
									"case":	510,
									"scores":	[-4.45749610300117]
								}, {
									"case":	511,
									"scores":	[-4.45749610300117]
								}, {
									"case":	512,
									"scores":	[-4.45749610300117]
								}, {
									"case":	513,
									"scores":	[-4.45749610300117]
								}, {
									"case":	514,
									"scores":	[-4.45749610300117]
								}, {
									"case":	515,
									"scores":	[-4.45749610300117]
								}, {
									"case":	516,
									"scores":	[-4.45749610300117]
								}, {
									"case":	517,
									"scores":	[-4.45749610300117]
								}, {
									"case":	518,
									"scores":	[-4.45749610300117]
								}, {
									"case":	519,
									"scores":	[-4.45749610300117]
								}, {
									"case":	520,
									"scores":	[-4.45749610300117]
								}, {
									"case":	521,
									"scores":	[-4.45749610300117]
								}, {
									"case":	522,
									"scores":	[-4.45749610300117]
								}, {
									"case":	523,
									"scores":	[-4.45749610300117]
								}, {
									"case":	524,
									"scores":	[-4.45749610300117]
								}, {
									"case":	525,
									"scores":	[-4.45749610300117]
								}, {
									"case":	526,
									"scores":	[-4.45749610300117]
								}, {
									"case":	527,
									"scores":	[-4.45749610300117]
								}, {
									"case":	528,
									"scores":	[-4.45749610300117]
								}, {
									"case":	529,
									"scores":	[-4.45749610300117]
								}, {
									"case":	530,
									"scores":	[-4.45749610300117]
								}, {
									"case":	531,
									"scores":	[-4.45749610300117]
								}, {
									"case":	532,
									"scores":	[-4.45749610300117]
								}, {
									"case":	533,
									"scores":	[-4.45749610300117]
								}, {
									"case":	534,
									"scores":	[-4.45749610300117]
								}, {
									"case":	535,
									"scores":	[-4.45749610300117]
								}, {
									"case":	536,
									"scores":	[-4.45749610300117]
								}, {
									"case":	537,
									"scores":	[-4.45749610300117]
								}, {
									"case":	538,
									"scores":	[-4.45749610300117]
								}, {
									"case":	539,
									"scores":	[-4.45749610300117]
								}, {
									"case":	540,
									"scores":	[-4.45749610300117]
								}, {
									"case":	541,
									"scores":	[-4.45749610300117]
								}, {
									"case":	542,
									"scores":	[-4.45749610300117]
								}, {
									"case":	543,
									"scores":	[-4.45749610300117]
								}, {
									"case":	544,
									"scores":	[-4.45749610300117]
								}, {
									"case":	545,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	546,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	547,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	548,
									"scores":	[-7.02781263330117, -7.61450643880117, -7.61450643880117, -7.46084779080117, -6.99039214300117, -7.61450643880117, -7.61450643880117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -6.81312930300117, -7.39550660610117, -7.39550660610117, -7.30608390610117, -7.30608390610117, -6.81312930300117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -7.30608390610117, -6.81312930300117, -7.30608390610117]
								}, {
									"case":	549,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	550,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	551,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	552,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	553,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	554,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	555,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	556,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}, {
									"case":	557,
									"scores":	[-9.29059443330117, -9.87728823880117, -9.87728823880117, -9.72362959080117, -9.25317394300117, -9.87728823880117, -9.87728823880117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.65828840610117, -9.65828840610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.56886570610117, -9.07591110300117, -9.56886570610117]
								}]
						}, {
							"switch":	89,
							"types":	[[7], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6], []],
							"begin_line":	1382,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\036\", 2) == 0) || __is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\036\", 2) == 0) && !__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2386547071281457, -6.0759905071281448, -6.0759905071281448, -5.8879177071281461, -4.9511882341281455, -6.0759905071281448, -6.0759905071281448, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.6047270341281461, -5.6047270341281461, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -5.1677620341281454, -4.6864067341281457, -5.1677620341281454]
								}, {
									"case":	2,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -4.3520597474281457, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.5147239474281458, -4.3520597474281457, -4.3520597474281457, -4.1639869474281461, -3.2272574744281459, -4.3520597474281457, -4.3520597474281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.8807962744281461, -3.8807962744281461, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -3.4438312744281458, -2.9624759744281457, -3.4438312744281458]
								}]
						}, {
							"switch":	107,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1382,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n        work = unpack;\n        method = 2;\n    } else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n        work = unlzw;\n        method = 1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1382\", 28, &(work), sizeof (work), &(method), sizeof (method), &(method), sizeof (method), &(last_member), sizeof (last_member), &(in), sizeof (in), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"\\037\\036\", 2) == 0)) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.19274307600117, -7.03007887600117, -7.03007887600117, -6.84200607600117, -5.9052766030011714, -7.03007887600117, -7.03007887600117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -5.64049510300117, -6.55881540300117, -6.55881540300117, -6.12185040300117, -6.12185040300117, -5.64049510300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -6.12185040300117, -5.64049510300117, -6.12185040300117]
								}, {
									"case":	2,
									"scores":	[-5.43990104500117, -6.27723684500117, -6.27723684500117, -6.08916404500117, -5.15243457200117, -6.27723684500117, -6.27723684500117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -4.88765307200117, -5.80597337200117, -5.80597337200117, -5.36900837200117, -5.36900837200117, -4.88765307200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -5.36900837200117, -4.88765307200117, -5.36900837200117]
								}]
						}]
				}, {
					"line":	1370,
					"switches":	[{
							"switch":	86,
							"types":	[[], [], [], [], [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], [], [], [], [], [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], [], [], [], [], [], []],
							"begin_line":	1371,
							"begin_column":	10,
							"end_line":	1371,
							"end_column":	10,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (-2)", "bytes_in = (-3)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (16)", "bytes_in = (192)", "bytes_in = (2)", "bytes_in = (24)", "bytes_in = (3)", "bytes_in = (32)", "bytes_in = (4)", "bytes_in = (8)", "bytes_out = (-1)", "bytes_out = (-2)", "bytes_out = (-3)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (16)", "bytes_out = (192)", "bytes_out = (2)", "bytes_out = (24)", "bytes_out = (3)", "bytes_out = (32)", "bytes_out = (4)", "bytes_out = (8)", "exit_code = (-1)", "exit_code = (-2)", "exit_code = (-3)", "exit_code = (0)", "exit_code = (1)", "exit_code = (16)", "exit_code = (192)", "exit_code = (2)", "exit_code = (24)", "exit_code = (3)", "exit_code = (32)", "exit_code = (4)", "exit_code = (8)", "exit_code = (imagic1)", "exit_code = (in)", "exiting_signal = (-1)", "exiting_signal = (-2)", "exiting_signal = (-3)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (16)", "exiting_signal = (192)", "exiting_signal = (2)", "exiting_signal = (24)", "exiting_signal = (3)", "exiting_signal = (32)", "exiting_signal = (4)", "exiting_signal = (8)", "exiting_signal = (imagic1)", "exiting_signal = (in)", "flags = (-1)", "flags = (-2)", "flags = (-3)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (192)", "flags = (2)", "flags = (24)", "flags = (3)", "flags = (32)", "flags = (4)", "flags = (8)", "flags = (flags)", "foreground = (-1)", "foreground = (-2)", "foreground = (-3)", "foreground = (0)", "foreground = (1)", "foreground = (16)", "foreground = (192)", "foreground = (2)", "foreground = (24)", "foreground = (3)", "foreground = (32)", "foreground = (4)", "foreground = (8)", "foreground = (imagic1)", "foreground = (in)", "header_bytes = (-1)", "header_bytes = (-2)", "header_bytes = (-3)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (16)", "header_bytes = (192)", "header_bytes = (2)", "header_bytes = (24)", "header_bytes = (3)", "header_bytes = (32)", "header_bytes = (4)", "header_bytes = (8)", "ifd = (-1)", "ifd = (-2)", "ifd = (-3)", "ifd = (0)", "ifd = (1)", "ifd = (16)", "ifd = (192)", "ifd = (2)", "ifd = (24)", "ifd = (3)", "ifd = (32)", "ifd = (4)", "ifd = (8)", "ifd = (imagic1)", "ifd = (in)", "ifile_size = (-1)", "ifile_size = (-2)", "ifile_size = (-3)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (16)", "ifile_size = (192)", "ifile_size = (2)", "ifile_size = (24)", "ifile_size = (3)", "ifile_size = (32)", "ifile_size = (4)", "ifile_size = (8)", "imagic1 = (-1)", "imagic1 = (-2)", "imagic1 = (-3)", "imagic1 = (0)", "imagic1 = (1)", "imagic1 = (16)", "imagic1 = (192)", "imagic1 = (2)", "imagic1 = (24)", "imagic1 = (3)", "imagic1 = (32)", "imagic1 = (4)", "imagic1 = (8)", "imagic1 = (imagic1)", "imagic1 = (in)", "inptr = (-1)", "inptr = (-2)", "inptr = (-3)", "inptr = (0)", "inptr = (1)", "inptr = (16)", "inptr = (192)", "inptr = (2)", "inptr = (24)", "inptr = (3)", "inptr = (32)", "inptr = (4)", "inptr = (8)", "last_member = (-1)", "last_member = (-2)", "last_member = (-3)", "last_member = (0)", "last_member = (1)", "last_member = (16)", "last_member = (192)", "last_member = (2)", "last_member = (24)", "last_member = (3)", "last_member = (32)", "last_member = (4)", "last_member = (8)", "last_member = (imagic1)", "last_member = (in)", "list = (-1)", "list = (-2)", "list = (-3)", "list = (0)", "list = (1)", "list = (16)", "list = (192)", "list = (2)", "list = (24)", "list = (3)", "list = (32)", "list = (4)", "list = (8)", "list = (imagic1)", "list = (in)", "magic[0] = (-1)", "magic[0] = (-2)", "magic[0] = (-3)", "magic[0] = (0)", "magic[0] = (1)", "magic[0] = (16)", "magic[0] = (192)", "magic[0] = (2)", "magic[0] = (24)", "magic[0] = (3)", "magic[0] = (32)", "magic[0] = (4)", "magic[0] = (8)", "magic[1] = (-1)", "magic[1] = (-2)", "magic[1] = (-3)", "magic[1] = (0)", "magic[1] = (1)", "magic[1] = (16)", "magic[1] = (192)", "magic[1] = (2)", "magic[1] = (24)", "magic[1] = (3)", "magic[1] = (32)", "magic[1] = (4)", "magic[1] = (8)", "method = (-1)", "method = (-2)", "method = (-3)", "method = (0)", "method = (1)", "method = (16)", "method = (192)", "method = (2)", "method = (24)", "method = (3)", "method = (32)", "method = (4)", "method = (8)", "method = (imagic1)", "method = (in)", "no_name = (-1)", "no_name = (-2)", "no_name = (-3)", "no_name = (0)", "no_name = (1)", "no_name = (16)", "no_name = (192)", "no_name = (2)", "no_name = (24)", "no_name = (3)", "no_name = (32)", "no_name = (4)", "no_name = (8)", "no_name = (imagic1)", "no_name = (in)", "no_time = (-1)", "no_time = (-2)", "no_time = (-3)", "no_time = (0)", "no_time = (1)", "no_time = (16)", "no_time = (192)", "no_time = (2)", "no_time = (24)", "no_time = (3)", "no_time = (32)", "no_time = (4)", "no_time = (8)", "no_time = (imagic1)", "no_time = (in)", "ofd = (-1)", "ofd = (-2)", "ofd = (-3)", "ofd = (0)", "ofd = (1)", "ofd = (16)", "ofd = (192)", "ofd = (2)", "ofd = (24)", "ofd = (3)", "ofd = (32)", "ofd = (4)", "ofd = (8)", "ofd = (imagic1)", "ofd = (in)", "part_nb = (-1)", "part_nb = (-2)", "part_nb = (-3)", "part_nb = (0)", "part_nb = (1)", "part_nb = (16)", "part_nb = (192)", "part_nb = (2)", "part_nb = (24)", "part_nb = (3)", "part_nb = (32)", "part_nb = (4)", "part_nb = (8)", "part_nb = (imagic1)", "part_nb = (in)", "quiet = (-1)", "quiet = (-2)", "quiet = (-3)", "quiet = (0)", "quiet = (1)", "quiet = (16)", "quiet = (192)", "quiet = (2)", "quiet = (24)", "quiet = (3)", "quiet = (32)", "quiet = (4)", "quiet = (8)", "quiet = (imagic1)", "quiet = (in)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (-2)", "remove_ofname_fd = (-3)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (16)", "remove_ofname_fd = (192)", "remove_ofname_fd = (2)", "remove_ofname_fd = (24)", "remove_ofname_fd = (3)", "remove_ofname_fd = (32)", "remove_ofname_fd = (4)", "remove_ofname_fd = (8)", "remove_ofname_fd = (imagic1)", "remove_ofname_fd = (in)", "save_orig_name = (-1)", "save_orig_name = (-2)", "save_orig_name = (-3)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (16)", "save_orig_name = (192)", "save_orig_name = (2)", "save_orig_name = (24)", "save_orig_name = (3)", "save_orig_name = (32)", "save_orig_name = (4)", "save_orig_name = (8)", "save_orig_name = (imagic1)", "save_orig_name = (in)", "stamp = (-1)", "stamp = (-2)", "stamp = (-3)", "stamp = (0)", "stamp = (1)", "stamp = (16)", "stamp = (192)", "stamp = (2)", "stamp = (24)", "stamp = (3)", "stamp = (32)", "stamp = (4)", "stamp = (8)", "stamp = (stamp)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (-2)", "time_stamp.tv_nsec = (-3)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (16)", "time_stamp.tv_nsec = (192)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (24)", "time_stamp.tv_nsec = (3)", "time_stamp.tv_nsec = (32)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_nsec = (8)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (-2)", "time_stamp.tv_sec = (-3)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (16)", "time_stamp.tv_sec = (192)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (24)", "time_stamp.tv_sec = (3)", "time_stamp.tv_sec = (32)", "time_stamp.tv_sec = (4)", "time_stamp.tv_sec = (8)", "to_stdout = (-1)", "to_stdout = (-2)", "to_stdout = (-3)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (16)", "to_stdout = (192)", "to_stdout = (2)", "to_stdout = (24)", "to_stdout = (3)", "to_stdout = (32)", "to_stdout = (4)", "to_stdout = (8)", "to_stdout = (imagic1)", "to_stdout = (in)", "total_in = (-1)", "total_in = (-2)", "total_in = (-3)", "total_in = (0)", "total_in = (1)", "total_in = (16)", "total_in = (192)", "total_in = (2)", "total_in = (24)", "total_in = (3)", "total_in = (32)", "total_in = (4)", "total_in = (8)", "total_out = (-1)", "total_out = (-2)", "total_out = (-3)", "total_out = (0)", "total_out = (1)", "total_out = (16)", "total_out = (192)", "total_out = (2)", "total_out = (24)", "total_out = (3)", "total_out = (32)", "total_out = (4)", "total_out = (8)", "verbose = (-1)", "verbose = (-2)", "verbose = (-3)", "verbose = (0)", "verbose = (1)", "verbose = (16)", "verbose = (192)", "verbose = (2)", "verbose = (24)", "verbose = (3)", "verbose = (32)", "verbose = (4)", "verbose = (8)", "verbose = (imagic1)", "verbose = (in)", "z_len = (-1)", "z_len = (-2)", "z_len = (-3)", "z_len = (0)", "z_len = (1)", "z_len = (16)", "z_len = (192)", "z_len = (2)", "z_len = (24)", "z_len = (3)", "z_len = (32)", "z_len = (4)", "z_len = (8)", "z_len = (stamp)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "imagic1 = (inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "imagic1 = 0", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[0] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(1))", "magic[1] = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "magic[1] = (char)imagic1", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "time_stamp.tv_sec = stamp", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -1;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -2;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return -3;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 0;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 16;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 192;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 1;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 24;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 2;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 32;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 3;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 4;\n", "if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.47769881031869]
								}, {
									"case":	2,
									"scores":	[-4.47769881031869]
								}, {
									"case":	3,
									"scores":	[-4.47769881031869]
								}, {
									"case":	4,
									"scores":	[-4.47769881031869]
								}, {
									"case":	5,
									"scores":	[-4.47769881031869]
								}, {
									"case":	6,
									"scores":	[-4.47769881031869]
								}, {
									"case":	7,
									"scores":	[-4.47769881031869]
								}, {
									"case":	8,
									"scores":	[-4.47769881031869]
								}, {
									"case":	9,
									"scores":	[-4.47769881031869]
								}, {
									"case":	10,
									"scores":	[-4.47769881031869]
								}, {
									"case":	11,
									"scores":	[-4.47769881031869]
								}, {
									"case":	12,
									"scores":	[-4.47769881031869]
								}, {
									"case":	13,
									"scores":	[-4.47769881031869]
								}, {
									"case":	14,
									"scores":	[-4.47769881031869]
								}, {
									"case":	15,
									"scores":	[-4.47769881031869]
								}, {
									"case":	16,
									"scores":	[-4.47769881031869]
								}, {
									"case":	17,
									"scores":	[-4.47769881031869]
								}, {
									"case":	18,
									"scores":	[-4.47769881031869]
								}, {
									"case":	19,
									"scores":	[-4.47769881031869]
								}, {
									"case":	20,
									"scores":	[-4.47769881031869]
								}, {
									"case":	21,
									"scores":	[-4.47769881031869]
								}, {
									"case":	22,
									"scores":	[-4.47769881031869]
								}, {
									"case":	23,
									"scores":	[-4.47769881031869]
								}, {
									"case":	24,
									"scores":	[-4.47769881031869]
								}, {
									"case":	25,
									"scores":	[-4.47769881031869]
								}, {
									"case":	26,
									"scores":	[-4.47769881031869]
								}, {
									"case":	27,
									"scores":	[-4.47769881031869]
								}, {
									"case":	28,
									"scores":	[-4.47769881031869]
								}, {
									"case":	29,
									"scores":	[-4.47769881031869]
								}, {
									"case":	30,
									"scores":	[-4.47769881031869]
								}, {
									"case":	31,
									"scores":	[-4.47769881031869]
								}, {
									"case":	32,
									"scores":	[-4.47769881031869]
								}, {
									"case":	33,
									"scores":	[-4.47769881031869]
								}, {
									"case":	34,
									"scores":	[-4.47769881031869]
								}, {
									"case":	35,
									"scores":	[-4.47769881031869]
								}, {
									"case":	36,
									"scores":	[-4.47769881031869]
								}, {
									"case":	37,
									"scores":	[-4.47769881031869]
								}, {
									"case":	38,
									"scores":	[-4.47769881031869]
								}, {
									"case":	39,
									"scores":	[-4.47769881031869]
								}, {
									"case":	40,
									"scores":	[-4.47769881031869]
								}, {
									"case":	41,
									"scores":	[-4.47769881031869]
								}, {
									"case":	42,
									"scores":	[-4.47769881031869]
								}, {
									"case":	43,
									"scores":	[-4.47769881031869]
								}, {
									"case":	44,
									"scores":	[-4.47769881031869]
								}, {
									"case":	45,
									"scores":	[-4.47769881031869]
								}, {
									"case":	46,
									"scores":	[-4.47769881031869]
								}, {
									"case":	47,
									"scores":	[-4.47769881031869]
								}, {
									"case":	48,
									"scores":	[-4.47769881031869]
								}, {
									"case":	49,
									"scores":	[-4.47769881031869]
								}, {
									"case":	50,
									"scores":	[-4.47769881031869]
								}, {
									"case":	51,
									"scores":	[-4.47769881031869]
								}, {
									"case":	52,
									"scores":	[-4.47769881031869]
								}, {
									"case":	53,
									"scores":	[-4.47769881031869]
								}, {
									"case":	54,
									"scores":	[-4.47769881031869]
								}, {
									"case":	55,
									"scores":	[-4.47769881031869]
								}, {
									"case":	56,
									"scores":	[-4.47769881031869]
								}, {
									"case":	57,
									"scores":	[-4.47769881031869]
								}, {
									"case":	58,
									"scores":	[-4.47769881031869]
								}, {
									"case":	59,
									"scores":	[-4.47769881031869]
								}, {
									"case":	60,
									"scores":	[-4.47769881031869]
								}, {
									"case":	61,
									"scores":	[-4.47769881031869]
								}, {
									"case":	62,
									"scores":	[-4.47769881031869]
								}, {
									"case":	63,
									"scores":	[-4.47769881031869]
								}, {
									"case":	64,
									"scores":	[-4.47769881031869]
								}, {
									"case":	65,
									"scores":	[-4.47769881031869]
								}, {
									"case":	66,
									"scores":	[-4.47769881031869]
								}, {
									"case":	67,
									"scores":	[-4.47769881031869]
								}, {
									"case":	68,
									"scores":	[-4.47769881031869]
								}, {
									"case":	69,
									"scores":	[-4.47769881031869]
								}, {
									"case":	70,
									"scores":	[-4.47769881031869]
								}, {
									"case":	71,
									"scores":	[-4.47769881031869]
								}, {
									"case":	72,
									"scores":	[-4.47769881031869]
								}, {
									"case":	73,
									"scores":	[-4.47769881031869]
								}, {
									"case":	74,
									"scores":	[-4.47769881031869]
								}, {
									"case":	75,
									"scores":	[-4.47769881031869]
								}, {
									"case":	76,
									"scores":	[-4.47769881031869]
								}, {
									"case":	77,
									"scores":	[-4.47769881031869]
								}, {
									"case":	78,
									"scores":	[-4.47769881031869]
								}, {
									"case":	79,
									"scores":	[-4.47769881031869]
								}, {
									"case":	80,
									"scores":	[-4.47769881031869]
								}, {
									"case":	81,
									"scores":	[-4.47769881031869]
								}, {
									"case":	82,
									"scores":	[-4.47769881031869]
								}, {
									"case":	83,
									"scores":	[-4.47769881031869]
								}, {
									"case":	84,
									"scores":	[-4.47769881031869]
								}, {
									"case":	85,
									"scores":	[-4.47769881031869]
								}, {
									"case":	86,
									"scores":	[-4.47769881031869]
								}, {
									"case":	87,
									"scores":	[-4.47769881031869]
								}, {
									"case":	88,
									"scores":	[-4.47769881031869]
								}, {
									"case":	89,
									"scores":	[-4.47769881031869]
								}, {
									"case":	90,
									"scores":	[-4.47769881031869]
								}, {
									"case":	91,
									"scores":	[-4.47769881031869]
								}, {
									"case":	92,
									"scores":	[-4.47769881031869]
								}, {
									"case":	93,
									"scores":	[-4.47769881031869]
								}, {
									"case":	94,
									"scores":	[-4.47769881031869]
								}, {
									"case":	95,
									"scores":	[-4.47769881031869]
								}, {
									"case":	96,
									"scores":	[-4.47769881031869]
								}, {
									"case":	97,
									"scores":	[-4.47769881031869]
								}, {
									"case":	98,
									"scores":	[-4.47769881031869]
								}, {
									"case":	99,
									"scores":	[-4.47769881031869]
								}, {
									"case":	100,
									"scores":	[-4.47769881031869]
								}, {
									"case":	101,
									"scores":	[-4.47769881031869]
								}, {
									"case":	102,
									"scores":	[-4.47769881031869]
								}, {
									"case":	103,
									"scores":	[-4.47769881031869]
								}, {
									"case":	104,
									"scores":	[-4.47769881031869]
								}, {
									"case":	105,
									"scores":	[-4.47769881031869]
								}, {
									"case":	106,
									"scores":	[-4.47769881031869]
								}, {
									"case":	107,
									"scores":	[-4.47769881031869]
								}, {
									"case":	108,
									"scores":	[-4.47769881031869]
								}, {
									"case":	109,
									"scores":	[-4.47769881031869]
								}, {
									"case":	110,
									"scores":	[-4.47769881031869]
								}, {
									"case":	111,
									"scores":	[-4.47769881031869]
								}, {
									"case":	112,
									"scores":	[-4.47769881031869]
								}, {
									"case":	113,
									"scores":	[-4.47769881031869]
								}, {
									"case":	114,
									"scores":	[-4.47769881031869]
								}, {
									"case":	115,
									"scores":	[-4.47769881031869]
								}, {
									"case":	116,
									"scores":	[-4.47769881031869]
								}, {
									"case":	117,
									"scores":	[-4.47769881031869]
								}, {
									"case":	118,
									"scores":	[-4.47769881031869]
								}, {
									"case":	119,
									"scores":	[-4.47769881031869]
								}, {
									"case":	120,
									"scores":	[-4.47769881031869]
								}, {
									"case":	121,
									"scores":	[-4.47769881031869]
								}, {
									"case":	122,
									"scores":	[-4.47769881031869]
								}, {
									"case":	123,
									"scores":	[-4.47769881031869]
								}, {
									"case":	124,
									"scores":	[-4.47769881031869]
								}, {
									"case":	125,
									"scores":	[-4.47769881031869]
								}, {
									"case":	126,
									"scores":	[-4.47769881031869]
								}, {
									"case":	127,
									"scores":	[-4.47769881031869]
								}, {
									"case":	128,
									"scores":	[-4.47769881031869]
								}, {
									"case":	129,
									"scores":	[-4.47769881031869]
								}, {
									"case":	130,
									"scores":	[-4.47769881031869]
								}, {
									"case":	131,
									"scores":	[-4.47769881031869]
								}, {
									"case":	132,
									"scores":	[-4.47769881031869]
								}, {
									"case":	133,
									"scores":	[-4.47769881031869]
								}, {
									"case":	134,
									"scores":	[-4.47769881031869]
								}, {
									"case":	135,
									"scores":	[-4.47769881031869]
								}, {
									"case":	136,
									"scores":	[-4.47769881031869]
								}, {
									"case":	137,
									"scores":	[-4.47769881031869]
								}, {
									"case":	138,
									"scores":	[-4.47769881031869]
								}, {
									"case":	139,
									"scores":	[-4.47769881031869]
								}, {
									"case":	140,
									"scores":	[-4.47769881031869]
								}, {
									"case":	141,
									"scores":	[-4.47769881031869]
								}, {
									"case":	142,
									"scores":	[-4.47769881031869]
								}, {
									"case":	143,
									"scores":	[-4.47769881031869]
								}, {
									"case":	144,
									"scores":	[-4.47769881031869]
								}, {
									"case":	145,
									"scores":	[-4.47769881031869]
								}, {
									"case":	146,
									"scores":	[-4.47769881031869]
								}, {
									"case":	147,
									"scores":	[-4.47769881031869]
								}, {
									"case":	148,
									"scores":	[-4.47769881031869]
								}, {
									"case":	149,
									"scores":	[-4.47769881031869]
								}, {
									"case":	150,
									"scores":	[-4.47769881031869]
								}, {
									"case":	151,
									"scores":	[-4.47769881031869]
								}, {
									"case":	152,
									"scores":	[-4.47769881031869]
								}, {
									"case":	153,
									"scores":	[-4.47769881031869]
								}, {
									"case":	154,
									"scores":	[-4.47769881031869]
								}, {
									"case":	155,
									"scores":	[-4.47769881031869]
								}, {
									"case":	156,
									"scores":	[-4.47769881031869]
								}, {
									"case":	157,
									"scores":	[-4.47769881031869]
								}, {
									"case":	158,
									"scores":	[-4.47769881031869]
								}, {
									"case":	159,
									"scores":	[-4.47769881031869]
								}, {
									"case":	160,
									"scores":	[-4.47769881031869]
								}, {
									"case":	161,
									"scores":	[-4.47769881031869]
								}, {
									"case":	162,
									"scores":	[-4.47769881031869]
								}, {
									"case":	163,
									"scores":	[-4.47769881031869]
								}, {
									"case":	164,
									"scores":	[-4.47769881031869]
								}, {
									"case":	165,
									"scores":	[-4.47769881031869]
								}, {
									"case":	166,
									"scores":	[-4.47769881031869]
								}, {
									"case":	167,
									"scores":	[-4.47769881031869]
								}, {
									"case":	168,
									"scores":	[-4.47769881031869]
								}, {
									"case":	169,
									"scores":	[-4.47769881031869]
								}, {
									"case":	170,
									"scores":	[-4.47769881031869]
								}, {
									"case":	171,
									"scores":	[-4.47769881031869]
								}, {
									"case":	172,
									"scores":	[-4.47769881031869]
								}, {
									"case":	173,
									"scores":	[-4.47769881031869]
								}, {
									"case":	174,
									"scores":	[-4.47769881031869]
								}, {
									"case":	175,
									"scores":	[-4.47769881031869]
								}, {
									"case":	176,
									"scores":	[-4.47769881031869]
								}, {
									"case":	177,
									"scores":	[-4.47769881031869]
								}, {
									"case":	178,
									"scores":	[-4.47769881031869]
								}, {
									"case":	179,
									"scores":	[-4.47769881031869]
								}, {
									"case":	180,
									"scores":	[-4.47769881031869]
								}, {
									"case":	181,
									"scores":	[-4.47769881031869]
								}, {
									"case":	182,
									"scores":	[-4.47769881031869]
								}, {
									"case":	183,
									"scores":	[-4.47769881031869]
								}, {
									"case":	184,
									"scores":	[-4.47769881031869]
								}, {
									"case":	185,
									"scores":	[-4.47769881031869]
								}, {
									"case":	186,
									"scores":	[-4.47769881031869]
								}, {
									"case":	187,
									"scores":	[-4.47769881031869]
								}, {
									"case":	188,
									"scores":	[-4.47769881031869]
								}, {
									"case":	189,
									"scores":	[-4.47769881031869]
								}, {
									"case":	190,
									"scores":	[-4.47769881031869]
								}, {
									"case":	191,
									"scores":	[-4.47769881031869]
								}, {
									"case":	192,
									"scores":	[-4.47769881031869]
								}, {
									"case":	193,
									"scores":	[-4.47769881031869]
								}, {
									"case":	194,
									"scores":	[-4.47769881031869]
								}, {
									"case":	195,
									"scores":	[-4.47769881031869]
								}, {
									"case":	196,
									"scores":	[-4.47769881031869]
								}, {
									"case":	197,
									"scores":	[-4.47769881031869]
								}, {
									"case":	198,
									"scores":	[-4.47769881031869]
								}, {
									"case":	199,
									"scores":	[-4.47769881031869]
								}, {
									"case":	200,
									"scores":	[-4.47769881031869]
								}, {
									"case":	201,
									"scores":	[-4.47769881031869]
								}, {
									"case":	202,
									"scores":	[-4.47769881031869]
								}, {
									"case":	203,
									"scores":	[-4.47769881031869]
								}, {
									"case":	204,
									"scores":	[-4.47769881031869]
								}, {
									"case":	205,
									"scores":	[-4.47769881031869]
								}, {
									"case":	206,
									"scores":	[-4.47769881031869]
								}, {
									"case":	207,
									"scores":	[-4.47769881031869]
								}, {
									"case":	208,
									"scores":	[-4.47769881031869]
								}, {
									"case":	209,
									"scores":	[-4.47769881031869]
								}, {
									"case":	210,
									"scores":	[-4.47769881031869]
								}, {
									"case":	211,
									"scores":	[-4.47769881031869]
								}, {
									"case":	212,
									"scores":	[-4.47769881031869]
								}, {
									"case":	213,
									"scores":	[-4.47769881031869]
								}, {
									"case":	214,
									"scores":	[-4.47769881031869]
								}, {
									"case":	215,
									"scores":	[-4.47769881031869]
								}, {
									"case":	216,
									"scores":	[-4.47769881031869]
								}, {
									"case":	217,
									"scores":	[-4.47769881031869]
								}, {
									"case":	218,
									"scores":	[-4.47769881031869]
								}, {
									"case":	219,
									"scores":	[-4.47769881031869]
								}, {
									"case":	220,
									"scores":	[-4.47769881031869]
								}, {
									"case":	221,
									"scores":	[-4.47769881031869]
								}, {
									"case":	222,
									"scores":	[-4.47769881031869]
								}, {
									"case":	223,
									"scores":	[-4.47769881031869]
								}, {
									"case":	224,
									"scores":	[-4.47769881031869]
								}, {
									"case":	225,
									"scores":	[-4.47769881031869]
								}, {
									"case":	226,
									"scores":	[-4.47769881031869]
								}, {
									"case":	227,
									"scores":	[-4.47769881031869]
								}, {
									"case":	228,
									"scores":	[-4.47769881031869]
								}, {
									"case":	229,
									"scores":	[-4.47769881031869]
								}, {
									"case":	230,
									"scores":	[-4.47769881031869]
								}, {
									"case":	231,
									"scores":	[-4.47769881031869]
								}, {
									"case":	232,
									"scores":	[-4.47769881031869]
								}, {
									"case":	233,
									"scores":	[-4.47769881031869]
								}, {
									"case":	234,
									"scores":	[-4.47769881031869]
								}, {
									"case":	235,
									"scores":	[-4.47769881031869]
								}, {
									"case":	236,
									"scores":	[-4.47769881031869]
								}, {
									"case":	237,
									"scores":	[-4.47769881031869]
								}, {
									"case":	238,
									"scores":	[-4.47769881031869]
								}, {
									"case":	239,
									"scores":	[-4.47769881031869]
								}, {
									"case":	240,
									"scores":	[-4.47769881031869]
								}, {
									"case":	241,
									"scores":	[-4.47769881031869]
								}, {
									"case":	242,
									"scores":	[-4.47769881031869]
								}, {
									"case":	243,
									"scores":	[-4.47769881031869]
								}, {
									"case":	244,
									"scores":	[-4.47769881031869]
								}, {
									"case":	245,
									"scores":	[-4.47769881031869]
								}, {
									"case":	246,
									"scores":	[-4.47769881031869]
								}, {
									"case":	247,
									"scores":	[-4.47769881031869]
								}, {
									"case":	248,
									"scores":	[-4.47769881031869]
								}, {
									"case":	249,
									"scores":	[-4.47769881031869]
								}, {
									"case":	250,
									"scores":	[-4.47769881031869]
								}, {
									"case":	251,
									"scores":	[-4.47769881031869]
								}, {
									"case":	252,
									"scores":	[-4.47769881031869]
								}, {
									"case":	253,
									"scores":	[-4.47769881031869]
								}, {
									"case":	254,
									"scores":	[-4.47769881031869]
								}, {
									"case":	255,
									"scores":	[-4.47769881031869]
								}, {
									"case":	256,
									"scores":	[-4.47769881031869]
								}, {
									"case":	257,
									"scores":	[-4.47769881031869]
								}, {
									"case":	258,
									"scores":	[-4.47769881031869]
								}, {
									"case":	259,
									"scores":	[-4.47769881031869]
								}, {
									"case":	260,
									"scores":	[-4.47769881031869]
								}, {
									"case":	261,
									"scores":	[-4.47769881031869]
								}, {
									"case":	262,
									"scores":	[-4.47769881031869]
								}, {
									"case":	263,
									"scores":	[-4.47769881031869]
								}, {
									"case":	264,
									"scores":	[-4.47769881031869]
								}, {
									"case":	265,
									"scores":	[-4.47769881031869]
								}, {
									"case":	266,
									"scores":	[-4.47769881031869]
								}, {
									"case":	267,
									"scores":	[-4.47769881031869]
								}, {
									"case":	268,
									"scores":	[-4.47769881031869]
								}, {
									"case":	269,
									"scores":	[-4.47769881031869]
								}, {
									"case":	270,
									"scores":	[-4.47769881031869]
								}, {
									"case":	271,
									"scores":	[-4.47769881031869]
								}, {
									"case":	272,
									"scores":	[-4.47769881031869]
								}, {
									"case":	273,
									"scores":	[-4.47769881031869]
								}, {
									"case":	274,
									"scores":	[-4.47769881031869]
								}, {
									"case":	275,
									"scores":	[-4.47769881031869]
								}, {
									"case":	276,
									"scores":	[-4.47769881031869]
								}, {
									"case":	277,
									"scores":	[-4.47769881031869]
								}, {
									"case":	278,
									"scores":	[-4.47769881031869]
								}, {
									"case":	279,
									"scores":	[-4.47769881031869]
								}, {
									"case":	280,
									"scores":	[-4.47769881031869]
								}, {
									"case":	281,
									"scores":	[-4.47769881031869]
								}, {
									"case":	282,
									"scores":	[-4.47769881031869]
								}, {
									"case":	283,
									"scores":	[-4.47769881031869]
								}, {
									"case":	284,
									"scores":	[-4.47769881031869]
								}, {
									"case":	285,
									"scores":	[-4.47769881031869]
								}, {
									"case":	286,
									"scores":	[-4.47769881031869]
								}, {
									"case":	287,
									"scores":	[-4.47769881031869]
								}, {
									"case":	288,
									"scores":	[-4.47769881031869]
								}, {
									"case":	289,
									"scores":	[-4.47769881031869]
								}, {
									"case":	290,
									"scores":	[-4.47769881031869]
								}, {
									"case":	291,
									"scores":	[-4.47769881031869]
								}, {
									"case":	292,
									"scores":	[-4.47769881031869]
								}, {
									"case":	293,
									"scores":	[-4.47769881031869]
								}, {
									"case":	294,
									"scores":	[-4.47769881031869]
								}, {
									"case":	295,
									"scores":	[-4.47769881031869]
								}, {
									"case":	296,
									"scores":	[-4.47769881031869]
								}, {
									"case":	297,
									"scores":	[-4.47769881031869]
								}, {
									"case":	298,
									"scores":	[-4.47769881031869]
								}, {
									"case":	299,
									"scores":	[-4.47769881031869]
								}, {
									"case":	300,
									"scores":	[-4.47769881031869]
								}, {
									"case":	301,
									"scores":	[-4.47769881031869]
								}, {
									"case":	302,
									"scores":	[-4.47769881031869]
								}, {
									"case":	303,
									"scores":	[-4.47769881031869]
								}, {
									"case":	304,
									"scores":	[-4.47769881031869]
								}, {
									"case":	305,
									"scores":	[-4.47769881031869]
								}, {
									"case":	306,
									"scores":	[-4.47769881031869]
								}, {
									"case":	307,
									"scores":	[-4.47769881031869]
								}, {
									"case":	308,
									"scores":	[-4.47769881031869]
								}, {
									"case":	309,
									"scores":	[-4.47769881031869]
								}, {
									"case":	310,
									"scores":	[-4.47769881031869]
								}, {
									"case":	311,
									"scores":	[-4.47769881031869]
								}, {
									"case":	312,
									"scores":	[-4.47769881031869]
								}, {
									"case":	313,
									"scores":	[-4.47769881031869]
								}, {
									"case":	314,
									"scores":	[-4.47769881031869]
								}, {
									"case":	315,
									"scores":	[-4.47769881031869]
								}, {
									"case":	316,
									"scores":	[-4.47769881031869]
								}, {
									"case":	317,
									"scores":	[-4.47769881031869]
								}, {
									"case":	318,
									"scores":	[-4.47769881031869]
								}, {
									"case":	319,
									"scores":	[-4.47769881031869]
								}, {
									"case":	320,
									"scores":	[-4.47769881031869]
								}, {
									"case":	321,
									"scores":	[-4.47769881031869]
								}, {
									"case":	322,
									"scores":	[-4.47769881031869]
								}, {
									"case":	323,
									"scores":	[-4.47769881031869]
								}, {
									"case":	324,
									"scores":	[-4.47769881031869]
								}, {
									"case":	325,
									"scores":	[-4.47769881031869]
								}, {
									"case":	326,
									"scores":	[-4.47769881031869]
								}, {
									"case":	327,
									"scores":	[-4.47769881031869]
								}, {
									"case":	328,
									"scores":	[-4.47769881031869]
								}, {
									"case":	329,
									"scores":	[-4.47769881031869]
								}, {
									"case":	330,
									"scores":	[-4.47769881031869]
								}, {
									"case":	331,
									"scores":	[-4.47769881031869]
								}, {
									"case":	332,
									"scores":	[-4.47769881031869]
								}, {
									"case":	333,
									"scores":	[-4.47769881031869]
								}, {
									"case":	334,
									"scores":	[-4.47769881031869]
								}, {
									"case":	335,
									"scores":	[-4.47769881031869]
								}, {
									"case":	336,
									"scores":	[-4.47769881031869]
								}, {
									"case":	337,
									"scores":	[-4.47769881031869]
								}, {
									"case":	338,
									"scores":	[-4.47769881031869]
								}, {
									"case":	339,
									"scores":	[-4.47769881031869]
								}, {
									"case":	340,
									"scores":	[-4.47769881031869]
								}, {
									"case":	341,
									"scores":	[-4.47769881031869]
								}, {
									"case":	342,
									"scores":	[-4.47769881031869]
								}, {
									"case":	343,
									"scores":	[-4.47769881031869]
								}, {
									"case":	344,
									"scores":	[-4.47769881031869]
								}, {
									"case":	345,
									"scores":	[-4.47769881031869]
								}, {
									"case":	346,
									"scores":	[-4.47769881031869]
								}, {
									"case":	347,
									"scores":	[-4.47769881031869]
								}, {
									"case":	348,
									"scores":	[-4.47769881031869]
								}, {
									"case":	349,
									"scores":	[-4.47769881031869]
								}, {
									"case":	350,
									"scores":	[-4.47769881031869]
								}, {
									"case":	351,
									"scores":	[-4.47769881031869]
								}, {
									"case":	352,
									"scores":	[-4.47769881031869]
								}, {
									"case":	353,
									"scores":	[-4.47769881031869]
								}, {
									"case":	354,
									"scores":	[-4.47769881031869]
								}, {
									"case":	355,
									"scores":	[-4.47769881031869]
								}, {
									"case":	356,
									"scores":	[-4.47769881031869]
								}, {
									"case":	357,
									"scores":	[-4.47769881031869]
								}, {
									"case":	358,
									"scores":	[-4.47769881031869]
								}, {
									"case":	359,
									"scores":	[-4.47769881031869]
								}, {
									"case":	360,
									"scores":	[-4.47769881031869]
								}, {
									"case":	361,
									"scores":	[-4.47769881031869]
								}, {
									"case":	362,
									"scores":	[-4.47769881031869]
								}, {
									"case":	363,
									"scores":	[-4.47769881031869]
								}, {
									"case":	364,
									"scores":	[-4.47769881031869]
								}, {
									"case":	365,
									"scores":	[-4.47769881031869]
								}, {
									"case":	366,
									"scores":	[-4.47769881031869]
								}, {
									"case":	367,
									"scores":	[-4.47769881031869]
								}, {
									"case":	368,
									"scores":	[-4.47769881031869]
								}, {
									"case":	369,
									"scores":	[-4.47769881031869]
								}, {
									"case":	370,
									"scores":	[-4.47769881031869]
								}, {
									"case":	371,
									"scores":	[-4.47769881031869]
								}, {
									"case":	372,
									"scores":	[-4.47769881031869]
								}, {
									"case":	373,
									"scores":	[-4.47769881031869]
								}, {
									"case":	374,
									"scores":	[-4.47769881031869]
								}, {
									"case":	375,
									"scores":	[-4.47769881031869]
								}, {
									"case":	376,
									"scores":	[-4.47769881031869]
								}, {
									"case":	377,
									"scores":	[-4.47769881031869]
								}, {
									"case":	378,
									"scores":	[-4.47769881031869]
								}, {
									"case":	379,
									"scores":	[-4.47769881031869]
								}, {
									"case":	380,
									"scores":	[-4.47769881031869]
								}, {
									"case":	381,
									"scores":	[-4.47769881031869]
								}, {
									"case":	382,
									"scores":	[-4.47769881031869]
								}, {
									"case":	383,
									"scores":	[-4.47769881031869]
								}, {
									"case":	384,
									"scores":	[-4.47769881031869]
								}, {
									"case":	385,
									"scores":	[-4.47769881031869]
								}, {
									"case":	386,
									"scores":	[-4.47769881031869]
								}, {
									"case":	387,
									"scores":	[-4.47769881031869]
								}, {
									"case":	388,
									"scores":	[-4.47769881031869]
								}, {
									"case":	389,
									"scores":	[-4.47769881031869]
								}, {
									"case":	390,
									"scores":	[-4.47769881031869]
								}, {
									"case":	391,
									"scores":	[-4.47769881031869]
								}, {
									"case":	392,
									"scores":	[-4.47769881031869]
								}, {
									"case":	393,
									"scores":	[-4.47769881031869]
								}, {
									"case":	394,
									"scores":	[-4.47769881031869]
								}, {
									"case":	395,
									"scores":	[-4.47769881031869]
								}, {
									"case":	396,
									"scores":	[-4.47769881031869]
								}, {
									"case":	397,
									"scores":	[-4.47769881031869]
								}, {
									"case":	398,
									"scores":	[-4.47769881031869]
								}, {
									"case":	399,
									"scores":	[-4.47769881031869]
								}, {
									"case":	400,
									"scores":	[-4.47769881031869]
								}, {
									"case":	401,
									"scores":	[-4.47769881031869]
								}, {
									"case":	402,
									"scores":	[-4.47769881031869]
								}, {
									"case":	403,
									"scores":	[-4.47769881031869]
								}, {
									"case":	404,
									"scores":	[-4.47769881031869]
								}, {
									"case":	405,
									"scores":	[-4.47769881031869]
								}, {
									"case":	406,
									"scores":	[-4.47769881031869]
								}, {
									"case":	407,
									"scores":	[-4.47769881031869]
								}, {
									"case":	408,
									"scores":	[-4.47769881031869]
								}, {
									"case":	409,
									"scores":	[-4.47769881031869]
								}, {
									"case":	410,
									"scores":	[-4.47769881031869]
								}, {
									"case":	411,
									"scores":	[-4.47769881031869]
								}, {
									"case":	412,
									"scores":	[-4.47769881031869]
								}, {
									"case":	413,
									"scores":	[-4.47769881031869]
								}, {
									"case":	414,
									"scores":	[-4.47769881031869]
								}, {
									"case":	415,
									"scores":	[-4.47769881031869]
								}, {
									"case":	416,
									"scores":	[-4.47769881031869]
								}, {
									"case":	417,
									"scores":	[-4.47769881031869]
								}, {
									"case":	418,
									"scores":	[-4.47769881031869]
								}, {
									"case":	419,
									"scores":	[-4.47769881031869]
								}, {
									"case":	420,
									"scores":	[-4.47769881031869]
								}, {
									"case":	421,
									"scores":	[-4.47769881031869]
								}, {
									"case":	422,
									"scores":	[-4.47769881031869]
								}, {
									"case":	423,
									"scores":	[-4.47769881031869]
								}, {
									"case":	424,
									"scores":	[-4.47769881031869]
								}, {
									"case":	425,
									"scores":	[-4.47769881031869]
								}, {
									"case":	426,
									"scores":	[-4.47769881031869]
								}, {
									"case":	427,
									"scores":	[-4.47769881031869]
								}, {
									"case":	428,
									"scores":	[-4.47769881031869]
								}, {
									"case":	429,
									"scores":	[-4.47769881031869]
								}, {
									"case":	430,
									"scores":	[-4.47769881031869]
								}, {
									"case":	431,
									"scores":	[-4.47769881031869]
								}, {
									"case":	432,
									"scores":	[-4.47769881031869]
								}, {
									"case":	433,
									"scores":	[-4.47769881031869]
								}, {
									"case":	434,
									"scores":	[-4.47769881031869]
								}, {
									"case":	435,
									"scores":	[-4.47769881031869]
								}, {
									"case":	436,
									"scores":	[-4.47769881031869]
								}, {
									"case":	437,
									"scores":	[-4.47769881031869]
								}, {
									"case":	438,
									"scores":	[-4.47769881031869]
								}, {
									"case":	439,
									"scores":	[-4.47769881031869]
								}, {
									"case":	440,
									"scores":	[-4.47769881031869]
								}, {
									"case":	441,
									"scores":	[-4.47769881031869]
								}, {
									"case":	442,
									"scores":	[-4.47769881031869]
								}, {
									"case":	443,
									"scores":	[-4.47769881031869]
								}, {
									"case":	444,
									"scores":	[-4.47769881031869]
								}, {
									"case":	445,
									"scores":	[-4.47769881031869]
								}, {
									"case":	446,
									"scores":	[-4.47769881031869]
								}, {
									"case":	447,
									"scores":	[-4.47769881031869]
								}, {
									"case":	448,
									"scores":	[-4.47769881031869]
								}, {
									"case":	449,
									"scores":	[-4.47769881031869]
								}, {
									"case":	450,
									"scores":	[-4.47769881031869]
								}, {
									"case":	451,
									"scores":	[-4.47769881031869]
								}, {
									"case":	452,
									"scores":	[-4.47769881031869]
								}, {
									"case":	453,
									"scores":	[-4.47769881031869]
								}, {
									"case":	454,
									"scores":	[-4.47769881031869]
								}, {
									"case":	455,
									"scores":	[-4.47769881031869]
								}, {
									"case":	456,
									"scores":	[-4.47769881031869]
								}, {
									"case":	457,
									"scores":	[-4.47769881031869]
								}, {
									"case":	458,
									"scores":	[-4.47769881031869]
								}, {
									"case":	459,
									"scores":	[-4.47769881031869]
								}, {
									"case":	460,
									"scores":	[-4.47769881031869]
								}, {
									"case":	461,
									"scores":	[-4.47769881031869]
								}, {
									"case":	462,
									"scores":	[-4.47769881031869]
								}, {
									"case":	463,
									"scores":	[-4.47769881031869]
								}, {
									"case":	464,
									"scores":	[-4.47769881031869]
								}, {
									"case":	465,
									"scores":	[-4.47769881031869]
								}, {
									"case":	466,
									"scores":	[-4.47769881031869]
								}, {
									"case":	467,
									"scores":	[-4.47769881031869]
								}, {
									"case":	468,
									"scores":	[-4.47769881031869]
								}, {
									"case":	469,
									"scores":	[-4.47769881031869]
								}, {
									"case":	470,
									"scores":	[-4.47769881031869]
								}, {
									"case":	471,
									"scores":	[-4.47769881031869]
								}, {
									"case":	472,
									"scores":	[-4.47769881031869]
								}, {
									"case":	473,
									"scores":	[-4.47769881031869]
								}, {
									"case":	474,
									"scores":	[-4.47769881031869]
								}, {
									"case":	475,
									"scores":	[-4.47769881031869]
								}, {
									"case":	476,
									"scores":	[-4.47769881031869]
								}, {
									"case":	477,
									"scores":	[-4.47769881031869]
								}, {
									"case":	478,
									"scores":	[-4.47769881031869]
								}, {
									"case":	479,
									"scores":	[-4.47769881031869]
								}, {
									"case":	480,
									"scores":	[-4.47769881031869]
								}, {
									"case":	481,
									"scores":	[-4.47769881031869]
								}, {
									"case":	482,
									"scores":	[-4.47769881031869]
								}, {
									"case":	483,
									"scores":	[-4.47769881031869]
								}, {
									"case":	484,
									"scores":	[-4.47769881031869]
								}, {
									"case":	485,
									"scores":	[-4.47769881031869]
								}, {
									"case":	486,
									"scores":	[-4.47769881031869]
								}, {
									"case":	487,
									"scores":	[-4.47769881031869]
								}, {
									"case":	488,
									"scores":	[-4.47769881031869]
								}, {
									"case":	489,
									"scores":	[-4.47769881031869]
								}, {
									"case":	490,
									"scores":	[-4.47769881031869]
								}, {
									"case":	491,
									"scores":	[-4.47769881031869]
								}, {
									"case":	492,
									"scores":	[-4.47769881031869]
								}, {
									"case":	493,
									"scores":	[-4.47769881031869]
								}, {
									"case":	494,
									"scores":	[-4.47769881031869]
								}, {
									"case":	495,
									"scores":	[-4.47769881031869]
								}, {
									"case":	496,
									"scores":	[-4.47769881031869]
								}, {
									"case":	497,
									"scores":	[-4.47769881031869]
								}, {
									"case":	498,
									"scores":	[-4.47769881031869]
								}, {
									"case":	499,
									"scores":	[-4.47769881031869]
								}, {
									"case":	500,
									"scores":	[-4.47769881031869]
								}, {
									"case":	501,
									"scores":	[-4.47769881031869]
								}, {
									"case":	502,
									"scores":	[-4.47769881031869]
								}, {
									"case":	503,
									"scores":	[-4.47769881031869]
								}, {
									"case":	504,
									"scores":	[-4.47769881031869]
								}, {
									"case":	505,
									"scores":	[-4.47769881031869]
								}, {
									"case":	506,
									"scores":	[-4.47769881031869]
								}, {
									"case":	507,
									"scores":	[-4.47769881031869]
								}, {
									"case":	508,
									"scores":	[-4.47769881031869]
								}, {
									"case":	509,
									"scores":	[-4.47769881031869]
								}, {
									"case":	510,
									"scores":	[-4.47769881031869]
								}, {
									"case":	511,
									"scores":	[-4.47769881031869]
								}, {
									"case":	512,
									"scores":	[-4.47769881031869]
								}, {
									"case":	513,
									"scores":	[-4.47769881031869]
								}, {
									"case":	514,
									"scores":	[-4.47769881031869]
								}, {
									"case":	515,
									"scores":	[-4.47769881031869]
								}, {
									"case":	516,
									"scores":	[-4.47769881031869]
								}, {
									"case":	517,
									"scores":	[-4.47769881031869]
								}, {
									"case":	518,
									"scores":	[-4.47769881031869]
								}, {
									"case":	519,
									"scores":	[-4.47769881031869]
								}, {
									"case":	520,
									"scores":	[-4.47769881031869]
								}, {
									"case":	521,
									"scores":	[-4.47769881031869]
								}, {
									"case":	522,
									"scores":	[-4.47769881031869]
								}, {
									"case":	523,
									"scores":	[-4.47769881031869]
								}, {
									"case":	524,
									"scores":	[-4.47769881031869]
								}, {
									"case":	525,
									"scores":	[-4.47769881031869]
								}, {
									"case":	526,
									"scores":	[-4.47769881031869]
								}, {
									"case":	527,
									"scores":	[-4.47769881031869]
								}, {
									"case":	528,
									"scores":	[-4.47769881031869]
								}, {
									"case":	529,
									"scores":	[-4.47769881031869]
								}, {
									"case":	530,
									"scores":	[-4.47769881031869]
								}, {
									"case":	531,
									"scores":	[-4.47769881031869]
								}, {
									"case":	532,
									"scores":	[-4.47769881031869]
								}, {
									"case":	533,
									"scores":	[-4.47769881031869]
								}, {
									"case":	534,
									"scores":	[-4.47769881031869]
								}, {
									"case":	535,
									"scores":	[-4.47769881031869]
								}, {
									"case":	536,
									"scores":	[-4.47769881031869]
								}, {
									"case":	537,
									"scores":	[-4.47769881031869]
								}, {
									"case":	538,
									"scores":	[-4.47769881031869]
								}, {
									"case":	539,
									"scores":	[-4.47769881031869]
								}, {
									"case":	540,
									"scores":	[-4.47769881031869]
								}, {
									"case":	541,
									"scores":	[-4.47769881031869]
								}, {
									"case":	542,
									"scores":	[-4.47769881031869]
								}, {
									"case":	543,
									"scores":	[-4.47769881031869]
								}, {
									"case":	544,
									"scores":	[-4.47769881031869]
								}, {
									"case":	545,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	546,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	547,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	548,
									"scores":	[-7.63741314611869, -7.63741314611869, -7.32628661341869, -7.32628661341869, -7.32628661341869, -7.32628661341869, -7.04801534061869, -6.01151805031869, -6.83333201031869, -7.48105049811869, -7.63470914611869, -7.32628661341869, -7.63470914611869, -7.32628661341869, -7.32628661341869, -7.32628661341869, -7.32628661341869, -7.41570931341869, -7.41570931341869, -7.32628661341869, -7.32628661341869, -6.83333201031869, -7.32628661341869, -7.32628661341869, -7.32628661341869, -7.32628661341869, -6.83333201031869, -7.32628661341869]
								}, {
									"case":	549,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	550,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	551,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	552,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	553,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	554,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	555,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	556,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}, {
									"case":	557,
									"scores":	[-9.90019494611869, -9.90019494611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.31079714061869, -8.27429985031869, -9.09611381031869, -9.74383229811869, -9.89749094611869, -9.58906841341869, -9.89749094611869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.67849111341869, -9.67849111341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.58906841341869, -9.09611381031869, -9.58906841341869]
								}]
						}, {
							"switch":	87,
							"types":	[[14], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [7, 8, 9, 10, 11, 12, 13], [], [4, 5, 6]],
							"begin_line":	1371,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (((memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2) || __is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) || __is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && __printf__((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && bcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && printf((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) && !__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(work), sizeof (work), &(in), sizeof (in), &(insize), sizeof (insize), &(insize), sizeof (insize), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(method), sizeof (method), &(list), sizeof (list), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(program_name), sizeof (program_name), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time))) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1735194311281472, -4.1735194311281472, -5.4824919581281453, -5.4824919581281453, -5.5533846311281456, -4.6011745581281467, -5.4824919581281453, -5.4824919581281453, -5.0011366581281456, -6.202647631128146, -6.3907204311281465, -6.3907204311281465, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.919456958128146, -5.4824919581281453, -5.919456958128146, -5.4824919581281453, -5.4824919581281453, -5.0011366581281456, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.4824919581281453, -5.0011366581281456, -5.4824919581281453]
								}, {
									"case":	2,
									"scores":	[-1.2862315141281466, -1.2862315141281466, -2.5952040411281461, -2.5952040411281461, -2.6660967141281464, -1.7138866411281457, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -3.3153597141281463, -3.5034325141281464, -3.5034325141281464, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461]
								}, {
									"case":	3,
									"scores":	[-1.2862315141281466, -1.2862315141281466, -2.5952040411281461, -2.5952040411281461, -2.6660967141281464, -1.7138866411281457, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -3.3153597141281463, -3.5034325141281464, -3.5034325141281464, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-1.2862315141281466, -1.2862315141281466, -2.5952040411281461, -2.5952040411281461, -2.6660967141281464, -1.7138866411281457, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -3.3153597141281463, -3.5034325141281464, -3.5034325141281464, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -3.0321690411281463, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.5952040411281461, -2.1138487411281459, -2.5952040411281461]
								}]
						}, {
							"switch":	108,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1371,
							"begin_column":	12,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)))\n    if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n        inptr = 0;\n        work = unzip;\n        if (check_zipfile(in) != 0)\n            return -1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n        work = unpack;\n        method = 2;\n    } else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n        work = unlzw;\n        method = 1;\n        last_member = 1;\n    } else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n        work = unlzh;\n        method = 3;\n        last_member = 1;\n    } else if (force && to_stdout && !list) {\n        method = 0;\n        work = copy;\n        inptr = 0;\n        last_member = 1;\n    }\n", "if (!__is_neg(\"\", \"L1371\", 28, &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(header_bytes), sizeof (header_bytes), &(part_nb), sizeof (part_nb), &(insize), sizeof (insize), &(insize), sizeof (insize), &(work), sizeof (work), &(in), sizeof (in), &(flags), sizeof (flags), &(last_member), sizeof (last_member), &(method), sizeof (method), &(list), sizeof (list), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(no_name), sizeof (no_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time)) && (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0)) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.83308058331869, -4.83308058331869, -6.14205311031869, -6.14205311031869, -6.14205311031869, -6.14205311031869, -6.21294578331869, -5.26073571031869, -5.66069781031869, -6.86220878331869, -7.05028158331869, -6.14205311031869, -7.05028158331869, -6.14205311031869, -6.14205311031869, -6.14205311031869, -6.14205311031869, -6.57901811031869, -6.57901811031869, -6.14205311031869, -6.14205311031869, -5.66069781031869, -6.14205311031869, -6.14205311031869, -6.14205311031869, -6.14205311031869, -5.66069781031869, -6.14205311031869]
								}, {
									"case":	2,
									"scores":	[-3.23161131901869, -3.23161131901869, -4.54058384601869, -4.54058384601869, -4.54058384601869, -4.54058384601869, -4.61147651901869, -3.65926644601869, -4.05922854601869, -5.26073951901869, -5.44881231901869, -4.54058384601869, -5.44881231901869, -4.54058384601869, -4.54058384601869, -4.54058384601869, -4.54058384601869, -4.97754884601869, -4.97754884601869, -4.54058384601869, -4.54058384601869, -4.05922854601869, -4.54058384601869, -4.54058384601869, -4.54058384601869, -4.54058384601869, -4.05922854601869, -4.54058384601869]
								}]
						}]
				}, {
					"line":	1269,
					"switches":	[{
							"switch":	85,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [4, 5, 6, 7, 8, 9, 10], [], [3]],
							"begin_line":	1270,
							"begin_column":	5,
							"end_line":	1401,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1270\", 28, &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(work), sizeof (work), &(flags), sizeof (flags), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet))) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if ((memcmp(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) || __is_neg(\"\", \"L1270\", 28, &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(method), sizeof (method), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(last_member), sizeof (last_member), &(header_bytes), sizeof (header_bytes), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(part_nb), sizeof (part_nb), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(imagic1), sizeof (imagic1), &(work), sizeof (work), &(flags), sizeof (flags), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(force), sizeof (force), &(stamp), sizeof (stamp), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(no_name), sizeof (no_name), &(list), sizeof (list), &(in), sizeof (in), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet))) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (__printf__(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (bcmp(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || __printf__(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || bcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (memcmp(magic, \"\\037\\213\", 2) == 0 || printf(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n", "if (printf(magic, \"\\037\\213\", 2) == 0 || memcmp(magic, \"\\037\\236\", 2) == 0) {\n    method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if (method != 8) {\n        rpl_fprintf(stderr, \"%s: %s: unknown method %d -- not supported\\n\", program_name, ifname, method);\n        exit_code = 1;\n        return -1;\n    }\n    work = unzip;\n    flags = (uch)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 32) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is encrypted -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        return -1;\n    }\n    if ((flags & 2) != 0) {\n        rpl_fprintf(stderr, \"%s: %s is a multi-part gzip file -- not supported\\n\", program_name, ifname);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    if ((flags & 192) != 0) {\n        rpl_fprintf(stderr, \"%s: %s has flags 0x%x -- not supported\\n\", program_name, ifname, flags);\n        exit_code = 1;\n        if (force <= 1)\n            return -1;\n    }\n    stamp = (ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 16;\n    stamp |= ((ulg)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 24;\n    if (stamp != 0 && !no_time) {\n        time_stamp.tv_sec = stamp;\n        time_stamp.tv_nsec = 0;\n    }\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    if ((flags & 2) != 0) {\n        unsigned int part = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        part |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: part number %u\\n\", program_name, ifname, part);\n        }\n    }\n    if ((flags & 4) != 0) {\n        unsigned int len = (unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n        len |= ((unsigned int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))) << 8;\n        if (verbose) {\n            rpl_fprintf(stderr, \"%s: %s: extra field of %u bytes ignored\\n\", program_name, ifname, len);\n        }\n        while (len--)\n            (void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n    }\n    if ((flags & 8) != 0) {\n        if (no_name || (to_stdout && !list) || part_nb > 1) {\n            char c;\n            do {\n                c = (inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n            } while (c != 0);\n        } else {\n            char *p = gzip_base_name(ofname);\n            char *base = p;\n            for (;;) {\n                *p = (char)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0));\n                if (*p++ == '\\x00')\n                    break;\n                if (p >= ofname + sizeof (ofname)) {\n                    gzip_error(\"corrupted input -- file name too large\");\n                }\n            }\n            p = gzip_base_name(base);\n            memmove(base, p, strlen(p) + 1);\n            if (!list) {\n                ;\n                if (base)\n                    list = 0;\n            }\n        }\n    }\n    if ((flags & 16) != 0) {\n        while ((inptr < insize ? inbuf[inptr++] : fill_inbuf(0)) != 0)\n            ;\n    }\n    if (part_nb == 1) {\n        header_bytes = inptr + 2 * sizeof(long);\n    }\n} else if (memcmp(magic, \"PK\\003\\004\", 2) == 0 && inptr == 2 && memcmp((char *)inbuf, \"PK\\003\\004\", 4) == 0) {\n    inptr = 0;\n    work = unzip;\n    if (check_zipfile(in) != 0)\n        return -1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\036\", 2) == 0) {\n    work = unpack;\n    method = 2;\n} else if (memcmp(magic, \"\\037\\235\", 2) == 0) {\n    work = unlzw;\n    method = 1;\n    last_member = 1;\n} else if (memcmp(magic, \"\\037\\240\", 2) == 0) {\n    work = unlzh;\n    method = 3;\n    last_member = 1;\n} else if (force && to_stdout && !list) {\n    method = 0;\n    work = copy;\n    inptr = 0;\n    last_member = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.914190083728144, -8.1181592007281456, -6.5468856057281464, -7.914190083728144, -8.1181592007281456, -6.5468856057281464, -10.980748788728148, -10.331485788728147, -9.5042387687281469, -9.5042387687281469, -7.6021771687281454, -11.408563945728147, -11.408563945728147, -8.65655796872815, -9.7126118417281457, -8.56651294172815, -9.6417191687281463, -9.6417191687281463, -8.50255216872815, -7.0140555417281458, -9.6417191687281463, -9.6417191687281463, -9.6417191687281463, -9.6417191687281463, -10.549947641728147, -8.76040176872815, -9.6417191687281463, -9.6417191687281463]
								}, {
									"case":	2,
									"scores":	[-2.8057891894281459, -3.0097583064281457, -1.4384847114281478, -2.8057891894281459, -3.0097583064281457, -1.4384847114281478, -5.8723478944281462, -5.2230848944281458, -4.3958378744281461, -4.3958378744281461, -2.4937762744281455, -6.3001630514281466, -6.3001630514281466, -3.5481570744281461, -4.6042109474281459, -3.4581120474281457, -4.5333182744281455, -4.5333182744281455, -3.3941512744281459, -1.9056546474281459, -4.5333182744281455, -4.5333182744281455, -4.5333182744281455, -4.5333182744281455, -5.4415467474281449, -3.6520008744281456, -4.5333182744281455, -4.5333182744281455]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	324,
			"size":	35
		}, {
			"switch":	0,
			"case":	325,
			"size":	35
		}, {
			"switch":	0,
			"case":	326,
			"size":	35
		}, {
			"switch":	0,
			"case":	327,
			"size":	35
		}, {
			"switch":	0,
			"case":	328,
			"size":	35
		}, {
			"switch":	0,
			"case":	329,
			"size":	35
		}, {
			"switch":	0,
			"case":	330,
			"size":	35
		}, {
			"switch":	1,
			"case":	1,
			"size":	35
		}, {
			"switch":	1,
			"case":	2,
			"size":	35
		}, {
			"switch":	2,
			"case":	324,
			"size":	35
		}, {
			"switch":	2,
			"case":	325,
			"size":	35
		}, {
			"switch":	2,
			"case":	326,
			"size":	35
		}, {
			"switch":	2,
			"case":	327,
			"size":	35
		}, {
			"switch":	2,
			"case":	328,
			"size":	35
		}, {
			"switch":	2,
			"case":	329,
			"size":	35
		}, {
			"switch":	3,
			"case":	1,
			"size":	35
		}, {
			"switch":	4,
			"case":	200,
			"size":	6
		}, {
			"switch":	4,
			"case":	201,
			"size":	6
		}, {
			"switch":	4,
			"case":	202,
			"size":	6
		}, {
			"switch":	4,
			"case":	203,
			"size":	6
		}, {
			"switch":	5,
			"case":	1,
			"size":	6
		}, {
			"switch":	5,
			"case":	2,
			"size":	6
		}, {
			"switch":	5,
			"case":	3,
			"size":	6
		}, {
			"switch":	6,
			"case":	200,
			"size":	6
		}, {
			"switch":	6,
			"case":	201,
			"size":	6
		}, {
			"switch":	6,
			"case":	202,
			"size":	6
		}, {
			"switch":	6,
			"case":	203,
			"size":	6
		}, {
			"switch":	7,
			"case":	1,
			"size":	6
		}, {
			"switch":	7,
			"case":	2,
			"size":	6
		}, {
			"switch":	7,
			"case":	52,
			"size":	6
		}, {
			"switch":	8,
			"case":	200,
			"size":	6
		}, {
			"switch":	8,
			"case":	201,
			"size":	6
		}, {
			"switch":	8,
			"case":	202,
			"size":	6
		}, {
			"switch":	8,
			"case":	203,
			"size":	6
		}, {
			"switch":	9,
			"case":	1,
			"size":	6
		}, {
			"switch":	10,
			"case":	1,
			"size":	6
		}, {
			"switch":	10,
			"case":	2,
			"size":	6
		}, {
			"switch":	11,
			"case":	1,
			"size":	6
		}, {
			"switch":	11,
			"case":	2,
			"size":	6
		}, {
			"switch":	12,
			"case":	200,
			"size":	6
		}, {
			"switch":	12,
			"case":	201,
			"size":	6
		}, {
			"switch":	12,
			"case":	202,
			"size":	6
		}, {
			"switch":	12,
			"case":	203,
			"size":	6
		}, {
			"switch":	13,
			"case":	1,
			"size":	6
		}, {
			"switch":	14,
			"case":	243,
			"size":	28
		}, {
			"switch":	15,
			"case":	1,
			"size":	28
		}, {
			"switch":	15,
			"case":	2,
			"size":	28
		}, {
			"switch":	15,
			"case":	3,
			"size":	28
		}, {
			"switch":	15,
			"case":	79,
			"size":	28
		}, {
			"switch":	16,
			"case":	1,
			"size":	28
		}, {
			"switch":	16,
			"case":	2,
			"size":	28
		}, {
			"switch":	17,
			"case":	243,
			"size":	28
		}, {
			"switch":	18,
			"case":	1,
			"size":	28
		}, {
			"switch":	18,
			"case":	2,
			"size":	28
		}, {
			"switch":	18,
			"case":	4,
			"size":	28
		}, {
			"switch":	19,
			"case":	1,
			"size":	28
		}, {
			"switch":	20,
			"case":	243,
			"size":	28
		}, {
			"switch":	21,
			"case":	1,
			"size":	28
		}, {
			"switch":	21,
			"case":	2,
			"size":	28
		}, {
			"switch":	21,
			"case":	3,
			"size":	28
		}, {
			"switch":	21,
			"case":	8,
			"size":	28
		}, {
			"switch":	22,
			"case":	1,
			"size":	28
		}, {
			"switch":	23,
			"case":	243,
			"size":	28
		}, {
			"switch":	24,
			"case":	1,
			"size":	28
		}, {
			"switch":	25,
			"case":	243,
			"size":	28
		}, {
			"switch":	26,
			"case":	1,
			"size":	28
		}, {
			"switch":	27,
			"case":	244,
			"size":	50
		}, {
			"switch":	28,
			"case":	1,
			"size":	50
		}, {
			"switch":	28,
			"case":	2,
			"size":	50
		}, {
			"switch":	28,
			"case":	61,
			"size":	50
		}, {
			"switch":	29,
			"case":	1,
			"size":	50
		}, {
			"switch":	29,
			"case":	2,
			"size":	50
		}, {
			"switch":	30,
			"case":	244,
			"size":	56
		}, {
			"switch":	31,
			"case":	1,
			"size":	56
		}, {
			"switch":	32,
			"case":	244,
			"size":	56
		}, {
			"switch":	33,
			"case":	1,
			"size":	56
		}, {
			"switch":	34,
			"case":	245,
			"size":	56
		}, {
			"switch":	35,
			"case":	1,
			"size":	56
		}, {
			"switch":	35,
			"case":	2,
			"size":	56
		}, {
			"switch":	35,
			"case":	4,
			"size":	56
		}, {
			"switch":	36,
			"case":	245,
			"size":	56
		}, {
			"switch":	37,
			"case":	1,
			"size":	56
		}, {
			"switch":	38,
			"case":	1,
			"size":	56
		}, {
			"switch":	38,
			"case":	2,
			"size":	56
		}, {
			"switch":	39,
			"case":	243,
			"size":	28
		}, {
			"switch":	40,
			"case":	1,
			"size":	28
		}, {
			"switch":	41,
			"case":	243,
			"size":	28
		}, {
			"switch":	42,
			"case":	1,
			"size":	28
		}, {
			"switch":	43,
			"case":	243,
			"size":	28
		}, {
			"switch":	44,
			"case":	1,
			"size":	28
		}, {
			"switch":	45,
			"case":	243,
			"size":	28
		}, {
			"switch":	46,
			"case":	1,
			"size":	28
		}, {
			"switch":	47,
			"case":	243,
			"size":	28
		}, {
			"switch":	48,
			"case":	1,
			"size":	28
		}, {
			"switch":	48,
			"case":	2,
			"size":	28
		}, {
			"switch":	48,
			"case":	3,
			"size":	28
		}, {
			"switch":	49,
			"case":	243,
			"size":	28
		}, {
			"switch":	50,
			"case":	1,
			"size":	28
		}, {
			"switch":	51,
			"case":	243,
			"size":	28
		}, {
			"switch":	52,
			"case":	1,
			"size":	28
		}, {
			"switch":	52,
			"case":	2,
			"size":	28
		}, {
			"switch":	52,
			"case":	3,
			"size":	28
		}, {
			"switch":	53,
			"case":	1,
			"size":	28
		}, {
			"switch":	53,
			"case":	2,
			"size":	28
		}, {
			"switch":	54,
			"case":	1,
			"size":	28
		}, {
			"switch":	54,
			"case":	2,
			"size":	28
		}, {
			"switch":	55,
			"case":	243,
			"size":	28
		}, {
			"switch":	56,
			"case":	1,
			"size":	28
		}, {
			"switch":	56,
			"case":	2,
			"size":	28
		}, {
			"switch":	56,
			"case":	3,
			"size":	28
		}, {
			"switch":	57,
			"case":	1,
			"size":	28
		}, {
			"switch":	57,
			"case":	2,
			"size":	28
		}, {
			"switch":	58,
			"case":	243,
			"size":	28
		}, {
			"switch":	59,
			"case":	243,
			"size":	28
		}, {
			"switch":	59,
			"case":	244,
			"size":	28
		}, {
			"switch":	60,
			"case":	1,
			"size":	28
		}, {
			"switch":	60,
			"case":	2,
			"size":	28
		}, {
			"switch":	60,
			"case":	69,
			"size":	28
		}, {
			"switch":	61,
			"case":	1,
			"size":	28
		}, {
			"switch":	61,
			"case":	2,
			"size":	28
		}, {
			"switch":	62,
			"case":	243,
			"size":	28
		}, {
			"switch":	62,
			"case":	244,
			"size":	28
		}, {
			"switch":	63,
			"case":	1,
			"size":	28
		}, {
			"switch":	63,
			"case":	2,
			"size":	28
		}, {
			"switch":	63,
			"case":	3,
			"size":	28
		}, {
			"switch":	64,
			"case":	243,
			"size":	28
		}, {
			"switch":	64,
			"case":	244,
			"size":	28
		}, {
			"switch":	65,
			"case":	1,
			"size":	28
		}, {
			"switch":	65,
			"case":	2,
			"size":	28
		}, {
			"switch":	66,
			"case":	243,
			"size":	28
		}, {
			"switch":	66,
			"case":	244,
			"size":	28
		}, {
			"switch":	67,
			"case":	1,
			"size":	28
		}, {
			"switch":	68,
			"case":	243,
			"size":	28
		}, {
			"switch":	68,
			"case":	244,
			"size":	28
		}, {
			"switch":	69,
			"case":	1,
			"size":	28
		}, {
			"switch":	69,
			"case":	2,
			"size":	28
		}, {
			"switch":	69,
			"case":	3,
			"size":	28
		}, {
			"switch":	70,
			"case":	1,
			"size":	28
		}, {
			"switch":	71,
			"case":	243,
			"size":	28
		}, {
			"switch":	71,
			"case":	244,
			"size":	28
		}, {
			"switch":	72,
			"case":	1,
			"size":	28
		}, {
			"switch":	73,
			"case":	1,
			"size":	28
		}, {
			"switch":	74,
			"case":	243,
			"size":	28
		}, {
			"switch":	75,
			"case":	1,
			"size":	28
		}, {
			"switch":	75,
			"case":	2,
			"size":	28
		}, {
			"switch":	75,
			"case":	3,
			"size":	28
		}, {
			"switch":	76,
			"case":	1,
			"size":	28
		}, {
			"switch":	76,
			"case":	2,
			"size":	28
		}, {
			"switch":	78,
			"case":	1,
			"size":	28
		}, {
			"switch":	78,
			"case":	3,
			"size":	28
		}, {
			"switch":	79,
			"case":	545,
			"size":	28
		}, {
			"switch":	79,
			"case":	546,
			"size":	28
		}, {
			"switch":	79,
			"case":	547,
			"size":	28
		}, {
			"switch":	79,
			"case":	548,
			"size":	28
		}, {
			"switch":	79,
			"case":	549,
			"size":	28
		}, {
			"switch":	79,
			"case":	550,
			"size":	28
		}, {
			"switch":	79,
			"case":	551,
			"size":	28
		}, {
			"switch":	79,
			"case":	552,
			"size":	28
		}, {
			"switch":	79,
			"case":	553,
			"size":	28
		}, {
			"switch":	79,
			"case":	554,
			"size":	28
		}, {
			"switch":	79,
			"case":	555,
			"size":	28
		}, {
			"switch":	79,
			"case":	556,
			"size":	28
		}, {
			"switch":	79,
			"case":	557,
			"size":	28
		}, {
			"switch":	80,
			"case":	1,
			"size":	28
		}, {
			"switch":	81,
			"case":	545,
			"size":	28
		}, {
			"switch":	81,
			"case":	546,
			"size":	28
		}, {
			"switch":	81,
			"case":	547,
			"size":	28
		}, {
			"switch":	81,
			"case":	548,
			"size":	28
		}, {
			"switch":	81,
			"case":	549,
			"size":	28
		}, {
			"switch":	81,
			"case":	550,
			"size":	28
		}, {
			"switch":	81,
			"case":	551,
			"size":	28
		}, {
			"switch":	81,
			"case":	552,
			"size":	28
		}, {
			"switch":	81,
			"case":	553,
			"size":	28
		}, {
			"switch":	81,
			"case":	554,
			"size":	28
		}, {
			"switch":	81,
			"case":	555,
			"size":	28
		}, {
			"switch":	81,
			"case":	556,
			"size":	28
		}, {
			"switch":	81,
			"case":	557,
			"size":	28
		}, {
			"switch":	82,
			"case":	1,
			"size":	28
		}, {
			"switch":	83,
			"case":	545,
			"size":	28
		}, {
			"switch":	83,
			"case":	546,
			"size":	28
		}, {
			"switch":	83,
			"case":	547,
			"size":	28
		}, {
			"switch":	83,
			"case":	548,
			"size":	28
		}, {
			"switch":	83,
			"case":	549,
			"size":	28
		}, {
			"switch":	83,
			"case":	550,
			"size":	28
		}, {
			"switch":	83,
			"case":	551,
			"size":	28
		}, {
			"switch":	83,
			"case":	552,
			"size":	28
		}, {
			"switch":	83,
			"case":	553,
			"size":	28
		}, {
			"switch":	83,
			"case":	554,
			"size":	28
		}, {
			"switch":	83,
			"case":	555,
			"size":	28
		}, {
			"switch":	83,
			"case":	556,
			"size":	28
		}, {
			"switch":	83,
			"case":	557,
			"size":	28
		}, {
			"switch":	84,
			"case":	1,
			"size":	28
		}, {
			"switch":	85,
			"case":	1,
			"size":	28
		}, {
			"switch":	85,
			"case":	2,
			"size":	28
		}, {
			"switch":	86,
			"case":	545,
			"size":	28
		}, {
			"switch":	86,
			"case":	546,
			"size":	28
		}, {
			"switch":	86,
			"case":	547,
			"size":	28
		}, {
			"switch":	86,
			"case":	548,
			"size":	28
		}, {
			"switch":	86,
			"case":	549,
			"size":	28
		}, {
			"switch":	86,
			"case":	550,
			"size":	28
		}, {
			"switch":	86,
			"case":	551,
			"size":	28
		}, {
			"switch":	86,
			"case":	552,
			"size":	28
		}, {
			"switch":	86,
			"case":	553,
			"size":	28
		}, {
			"switch":	86,
			"case":	554,
			"size":	28
		}, {
			"switch":	86,
			"case":	555,
			"size":	28
		}, {
			"switch":	86,
			"case":	556,
			"size":	28
		}, {
			"switch":	86,
			"case":	557,
			"size":	28
		}, {
			"switch":	87,
			"case":	1,
			"size":	28
		}, {
			"switch":	87,
			"case":	2,
			"size":	28
		}, {
			"switch":	87,
			"case":	3,
			"size":	28
		}, {
			"switch":	87,
			"case":	14,
			"size":	28
		}, {
			"switch":	88,
			"case":	545,
			"size":	28
		}, {
			"switch":	88,
			"case":	546,
			"size":	28
		}, {
			"switch":	88,
			"case":	547,
			"size":	28
		}, {
			"switch":	88,
			"case":	548,
			"size":	28
		}, {
			"switch":	88,
			"case":	549,
			"size":	28
		}, {
			"switch":	88,
			"case":	550,
			"size":	28
		}, {
			"switch":	88,
			"case":	551,
			"size":	28
		}, {
			"switch":	88,
			"case":	552,
			"size":	28
		}, {
			"switch":	88,
			"case":	553,
			"size":	28
		}, {
			"switch":	88,
			"case":	554,
			"size":	28
		}, {
			"switch":	88,
			"case":	555,
			"size":	28
		}, {
			"switch":	88,
			"case":	556,
			"size":	28
		}, {
			"switch":	88,
			"case":	557,
			"size":	28
		}, {
			"switch":	89,
			"case":	1,
			"size":	28
		}, {
			"switch":	89,
			"case":	2,
			"size":	28
		}, {
			"switch":	89,
			"case":	7,
			"size":	28
		}, {
			"switch":	90,
			"case":	545,
			"size":	28
		}, {
			"switch":	90,
			"case":	546,
			"size":	28
		}, {
			"switch":	90,
			"case":	547,
			"size":	28
		}, {
			"switch":	90,
			"case":	548,
			"size":	28
		}, {
			"switch":	90,
			"case":	549,
			"size":	28
		}, {
			"switch":	90,
			"case":	550,
			"size":	28
		}, {
			"switch":	90,
			"case":	551,
			"size":	28
		}, {
			"switch":	90,
			"case":	552,
			"size":	28
		}, {
			"switch":	90,
			"case":	553,
			"size":	28
		}, {
			"switch":	90,
			"case":	554,
			"size":	28
		}, {
			"switch":	90,
			"case":	555,
			"size":	28
		}, {
			"switch":	90,
			"case":	556,
			"size":	28
		}, {
			"switch":	90,
			"case":	557,
			"size":	28
		}, {
			"switch":	91,
			"case":	1,
			"size":	28
		}, {
			"switch":	91,
			"case":	2,
			"size":	28
		}, {
			"switch":	91,
			"case":	7,
			"size":	28
		}, {
			"switch":	92,
			"case":	545,
			"size":	28
		}, {
			"switch":	92,
			"case":	546,
			"size":	28
		}, {
			"switch":	92,
			"case":	547,
			"size":	28
		}, {
			"switch":	92,
			"case":	548,
			"size":	28
		}, {
			"switch":	92,
			"case":	549,
			"size":	28
		}, {
			"switch":	92,
			"case":	550,
			"size":	28
		}, {
			"switch":	92,
			"case":	551,
			"size":	28
		}, {
			"switch":	92,
			"case":	552,
			"size":	28
		}, {
			"switch":	92,
			"case":	553,
			"size":	28
		}, {
			"switch":	92,
			"case":	554,
			"size":	28
		}, {
			"switch":	92,
			"case":	555,
			"size":	28
		}, {
			"switch":	92,
			"case":	556,
			"size":	28
		}, {
			"switch":	92,
			"case":	557,
			"size":	28
		}, {
			"switch":	93,
			"case":	1,
			"size":	28
		}, {
			"switch":	93,
			"case":	2,
			"size":	28
		}, {
			"switch":	93,
			"case":	7,
			"size":	28
		}, {
			"switch":	94,
			"case":	545,
			"size":	28
		}, {
			"switch":	94,
			"case":	546,
			"size":	28
		}, {
			"switch":	94,
			"case":	547,
			"size":	28
		}, {
			"switch":	94,
			"case":	548,
			"size":	28
		}, {
			"switch":	94,
			"case":	549,
			"size":	28
		}, {
			"switch":	94,
			"case":	550,
			"size":	28
		}, {
			"switch":	94,
			"case":	551,
			"size":	28
		}, {
			"switch":	94,
			"case":	552,
			"size":	28
		}, {
			"switch":	94,
			"case":	553,
			"size":	28
		}, {
			"switch":	94,
			"case":	554,
			"size":	28
		}, {
			"switch":	94,
			"case":	555,
			"size":	28
		}, {
			"switch":	94,
			"case":	556,
			"size":	28
		}, {
			"switch":	94,
			"case":	557,
			"size":	28
		}, {
			"switch":	95,
			"case":	1,
			"size":	28
		}, {
			"switch":	95,
			"case":	2,
			"size":	28
		}, {
			"switch":	95,
			"case":	3,
			"size":	28
		}, {
			"switch":	95,
			"case":	7,
			"size":	28
		}, {
			"switch":	96,
			"case":	545,
			"size":	28
		}, {
			"switch":	96,
			"case":	546,
			"size":	28
		}, {
			"switch":	96,
			"case":	547,
			"size":	28
		}, {
			"switch":	96,
			"case":	548,
			"size":	28
		}, {
			"switch":	96,
			"case":	549,
			"size":	28
		}, {
			"switch":	96,
			"case":	550,
			"size":	28
		}, {
			"switch":	96,
			"case":	551,
			"size":	28
		}, {
			"switch":	96,
			"case":	552,
			"size":	28
		}, {
			"switch":	96,
			"case":	553,
			"size":	28
		}, {
			"switch":	96,
			"case":	554,
			"size":	28
		}, {
			"switch":	96,
			"case":	555,
			"size":	28
		}, {
			"switch":	96,
			"case":	556,
			"size":	28
		}, {
			"switch":	96,
			"case":	557,
			"size":	28
		}, {
			"switch":	97,
			"case":	1,
			"size":	28
		}, {
			"switch":	98,
			"case":	545,
			"size":	28
		}, {
			"switch":	98,
			"case":	546,
			"size":	28
		}, {
			"switch":	98,
			"case":	547,
			"size":	28
		}, {
			"switch":	98,
			"case":	548,
			"size":	28
		}, {
			"switch":	98,
			"case":	549,
			"size":	28
		}, {
			"switch":	98,
			"case":	550,
			"size":	28
		}, {
			"switch":	98,
			"case":	551,
			"size":	28
		}, {
			"switch":	98,
			"case":	552,
			"size":	28
		}, {
			"switch":	98,
			"case":	553,
			"size":	28
		}, {
			"switch":	98,
			"case":	554,
			"size":	28
		}, {
			"switch":	98,
			"case":	555,
			"size":	28
		}, {
			"switch":	98,
			"case":	556,
			"size":	28
		}, {
			"switch":	98,
			"case":	557,
			"size":	28
		}, {
			"switch":	99,
			"case":	1,
			"size":	28
		}, {
			"switch":	100,
			"case":	545,
			"size":	28
		}, {
			"switch":	100,
			"case":	546,
			"size":	28
		}, {
			"switch":	100,
			"case":	547,
			"size":	28
		}, {
			"switch":	100,
			"case":	548,
			"size":	28
		}, {
			"switch":	100,
			"case":	549,
			"size":	28
		}, {
			"switch":	100,
			"case":	550,
			"size":	28
		}, {
			"switch":	100,
			"case":	551,
			"size":	28
		}, {
			"switch":	100,
			"case":	552,
			"size":	28
		}, {
			"switch":	100,
			"case":	553,
			"size":	28
		}, {
			"switch":	100,
			"case":	554,
			"size":	28
		}, {
			"switch":	100,
			"case":	555,
			"size":	28
		}, {
			"switch":	100,
			"case":	556,
			"size":	28
		}, {
			"switch":	100,
			"case":	557,
			"size":	28
		}, {
			"switch":	101,
			"case":	1,
			"size":	28
		}, {
			"switch":	102,
			"case":	545,
			"size":	28
		}, {
			"switch":	102,
			"case":	546,
			"size":	28
		}, {
			"switch":	102,
			"case":	547,
			"size":	28
		}, {
			"switch":	102,
			"case":	548,
			"size":	28
		}, {
			"switch":	102,
			"case":	549,
			"size":	28
		}, {
			"switch":	102,
			"case":	550,
			"size":	28
		}, {
			"switch":	102,
			"case":	551,
			"size":	28
		}, {
			"switch":	102,
			"case":	552,
			"size":	28
		}, {
			"switch":	102,
			"case":	553,
			"size":	28
		}, {
			"switch":	102,
			"case":	554,
			"size":	28
		}, {
			"switch":	102,
			"case":	555,
			"size":	28
		}, {
			"switch":	102,
			"case":	556,
			"size":	28
		}, {
			"switch":	102,
			"case":	557,
			"size":	28
		}, {
			"switch":	103,
			"case":	1,
			"size":	28
		}, {
			"switch":	104,
			"case":	1,
			"size":	28
		}, {
			"switch":	105,
			"case":	1,
			"size":	28
		}, {
			"switch":	105,
			"case":	2,
			"size":	28
		}, {
			"switch":	106,
			"case":	1,
			"size":	28
		}, {
			"switch":	106,
			"case":	2,
			"size":	28
		}, {
			"switch":	107,
			"case":	1,
			"size":	28
		}, {
			"switch":	107,
			"case":	2,
			"size":	28
		}, {
			"switch":	108,
			"case":	1,
			"size":	28
		}, {
			"switch":	108,
			"case":	2,
			"size":	28
		}],
	"func_locations":	[{
			"file":	"gzip.c",
			"functions":	[{
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"abort_gzip",
					"begin":	1856,
					"end":	1861
				}, {
					"function":	"abort_gzip_signal",
					"begin":	1866,
					"end":	1877
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"check_ofname",
					"begin":	1607,
					"end":	1629
				}, {
					"function":	"copy_stat",
					"begin":	1636,
					"end":	1692
				}, {
					"function":	"create_outfile",
					"begin":	893,
					"end":	944
				}, {
					"function":	"do_exit",
					"begin":	1809,
					"end":	1831
				}, {
					"function":	"do_list",
					"begin":	1435,
					"end":	1537
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstat64",
					"begin":	511,
					"end":	515
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"fstatat64",
					"begin":	518,
					"end":	523
				}, {
					"function":	"get_method",
					"begin":	1238,
					"end":	1428
				}, {
					"function":	"get_stat_atime",
					"begin":	103,
					"end":	114
				}, {
					"function":	"get_stat_atime_ns",
					"begin":	49,
					"end":	59
				}, {
					"function":	"get_stat_birthtime",
					"begin":	146,
					"end":	185
				}, {
					"function":	"get_stat_birthtime_ns",
					"begin":	88,
					"end":	100
				}, {
					"function":	"get_stat_ctime",
					"begin":	117,
					"end":	128
				}, {
					"function":	"get_stat_ctime_ns",
					"begin":	62,
					"end":	72
				}, {
					"function":	"get_stat_mtime",
					"begin":	131,
					"end":	142
				}, {
					"function":	"get_stat_mtime_ns",
					"begin":	75,
					"end":	85
				}, {
					"function":	"get_suffix",
					"begin":	958,
					"end":	998
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"getline",
					"begin":	114,
					"end":	118
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"help",
					"begin":	318,
					"end":	365
				}, {
					"function":	"ignore_ptr",
					"begin":	36,
					"end":	36
				}, {
					"function":	"ignore_value",
					"begin":	35,
					"end":	35
				}, {
					"function":	"input_eof",
					"begin":	572,
					"end":	588
				}, {
					"function":	"install_signal_handlers",
					"begin":	1766,
					"end":	1804
				}, {
					"function":	"license",
					"begin":	368,
					"end":	374
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"lstat64",
					"begin":	504,
					"end":	508
				}, {
					"function":	"main",
					"begin":	394,
					"end":	569
				}, {
					"function":	"make_ofname",
					"begin":	1149,
					"end":	1224
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"open_and_stat",
					"begin":	1004,
					"end":	1037
				}, {
					"function":	"open_input_file",
					"begin":	1047,
					"end":	1143
				}, {
					"function":	"progerror",
					"begin":	384,
					"end":	391
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"remove_output_file",
					"begin":	1836,
					"end":	1851
				}, {
					"function":	"rpl_fseek",
					"begin":	282,
					"end":	286
				}, {
					"function":	"shorten_name",
					"begin":	1548,
					"end":	1601
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"stat64",
					"begin":	497,
					"end":	501
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"treat_dir",
					"begin":	1699,
					"end":	1761
				}, {
					"function":	"treat_file",
					"begin":	685,
					"end":	882
				}, {
					"function":	"treat_stdin",
					"begin":	593,
					"end":	680
				}, {
					"function":	"try_help",
					"begin":	309,
					"end":	315
				}, {
					"function":	"version",
					"begin":	377,
					"end":	382
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}]
		}]
}
