{
	"switch_num":	36,
	"case_num":	[228, 50, 2, 229, 3, 2, 228, 23, 228, 3, 1, 228, 682, 227, 452, 227, 448, 228, 465, 227, 3, 1, 228, 243, 227, 3, 1, 227, 5, 1, 228, 13, 2, 228, 10, 2],
	"switch_cluster":	[[2, 5, 7, 10, 12, 14, 16, 18, 21, 23, 26, 29, 32, 35], [1, 4, 9, 20, 25, 28, 31, 34], [0, 3, 6, 8, 11, 13, 15, 17, 19, 22, 24, 27, 30, 33], []],
	"priority":	[{
			"file":	"libtiff/tif_aux.c",
			"line":	40,
			"primary_score":	999945,
			"second_score":	4366
		}, {
			"file":	"libtiff/tif_aux.c",
			"line":	41,
			"primary_score":	999945,
			"second_score":	4365
		}, {
			"file":	"libtiff/tif_aux.c",
			"line":	46,
			"primary_score":	999945,
			"second_score":	4364
		}, {
			"file":	"libtiff/tif_aux.c",
			"line":	47,
			"primary_score":	999945,
			"second_score":	4363
		}, {
			"file":	"libtiff/tif_aux.c",
			"line":	49,
			"primary_score":	999945,
			"second_score":	4361
		}, {
			"file":	"libtiff/tif_aux.c",
			"line":	53,
			"primary_score":	999945,
			"second_score":	4360
		}, {
			"file":	"libtiff/tif_aux.c",
			"line":	59,
			"primary_score":	999945,
			"second_score":	4367
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	51,
			"primary_score":	999945,
			"second_score":	11860
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	52,
			"primary_score":	999950,
			"second_score":	11859
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	53,
			"primary_score":	999945,
			"second_score":	6250
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	54,
			"primary_score":	999945,
			"second_score":	6248
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	56,
			"primary_score":	999945,
			"second_score":	6203
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	62,
			"primary_score":	999945,
			"second_score":	6202
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	71,
			"primary_score":	999945,
			"second_score":	6201
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	73,
			"primary_score":	999945,
			"second_score":	6200
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	79,
			"primary_score":	999945,
			"second_score":	6199
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	80,
			"primary_score":	999945,
			"second_score":	6198
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	82,
			"primary_score":	999945,
			"second_score":	6197
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	83,
			"primary_score":	999945,
			"second_score":	5922
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	84,
			"primary_score":	999945,
			"second_score":	5921
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	91,
			"primary_score":	999945,
			"second_score":	5920
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	94,
			"primary_score":	999945,
			"second_score":	5918
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	104,
			"primary_score":	999945,
			"second_score":	5917
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	124,
			"primary_score":	999945,
			"second_score":	11863
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	125,
			"primary_score":	999945,
			"second_score":	11862
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	127,
			"primary_score":	999945,
			"second_score":	11861
		}, {
			"file":	"libtiff/tif_close.c",
			"line":	128,
			"primary_score":	999945,
			"second_score":	5915
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	128,
			"primary_score":	999947,
			"second_score":	10
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	129,
			"primary_score":	999947,
			"second_score":	8
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	132,
			"primary_score":	999947,
			"second_score":	19
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	133,
			"primary_score":	999945,
			"second_score":	5760
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	138,
			"primary_score":	999945,
			"second_score":	2292
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	139,
			"primary_score":	999945,
			"second_score":	2291
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	140,
			"primary_score":	999945,
			"second_score":	2290
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	141,
			"primary_score":	999945,
			"second_score":	2289
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	142,
			"primary_score":	999945,
			"second_score":	2288
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	143,
			"primary_score":	999945,
			"second_score":	2287
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	144,
			"primary_score":	999945,
			"second_score":	2286
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	145,
			"primary_score":	999945,
			"second_score":	2285
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	146,
			"primary_score":	999945,
			"second_score":	2284
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	147,
			"primary_score":	999945,
			"second_score":	2283
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	148,
			"primary_score":	999945,
			"second_score":	2282
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	149,
			"primary_score":	999945,
			"second_score":	2281
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	150,
			"primary_score":	999945,
			"second_score":	2280
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	151,
			"primary_score":	999945,
			"second_score":	2279
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	152,
			"primary_score":	999945,
			"second_score":	2278
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	153,
			"primary_score":	999945,
			"second_score":	2277
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	154,
			"primary_score":	999945,
			"second_score":	2276
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	155,
			"primary_score":	999945,
			"second_score":	2275
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	156,
			"primary_score":	999945,
			"second_score":	2274
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	157,
			"primary_score":	999945,
			"second_score":	2273
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	163,
			"primary_score":	999945,
			"second_score":	2299
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	165,
			"primary_score":	999945,
			"second_score":	2293
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	172,
			"primary_score":	999945,
			"second_score":	2272
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	189,
			"primary_score":	999945,
			"second_score":	2298
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	190,
			"primary_score":	999945,
			"second_score":	2297
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	192,
			"primary_score":	999945,
			"second_score":	2296
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	195,
			"primary_score":	999945,
			"second_score":	2295
		}, {
			"file":	"libtiff/tif_compress.c",
			"line":	197,
			"primary_score":	999945,
			"second_score":	2294
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	141,
			"primary_score":	999945,
			"second_score":	744
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	143,
			"primary_score":	999945,
			"second_score":	743
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	144,
			"primary_score":	999945,
			"second_score":	742
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	145,
			"primary_score":	999945,
			"second_score":	741
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	146,
			"primary_score":	999945,
			"second_score":	740
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	148,
			"primary_score":	999945,
			"second_score":	739
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	154,
			"primary_score":	999945,
			"second_score":	1741
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	157,
			"primary_score":	999945,
			"second_score":	1561
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	167,
			"primary_score":	999945,
			"second_score":	880
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	179,
			"primary_score":	999945,
			"second_score":	879
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	187,
			"primary_score":	999945,
			"second_score":	1936
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	188,
			"primary_score":	999945,
			"second_score":	1935
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	189,
			"primary_score":	999956,
			"second_score":	1934
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	196,
			"primary_score":	999945,
			"second_score":	2300
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	197,
			"primary_score":	999945,
			"second_score":	2261
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	200,
			"primary_score":	999945,
			"second_score":	2260
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	203,
			"primary_score":	999945,
			"second_score":	738
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	222,
			"primary_score":	999945,
			"second_score":	2041
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	224,
			"primary_score":	999945,
			"second_score":	2040
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	225,
			"primary_score":	999945,
			"second_score":	2039
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	228,
			"primary_score":	999945,
			"second_score":	1207
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	230,
			"primary_score":	999945,
			"second_score":	1206
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	231,
			"primary_score":	999945,
			"second_score":	1205
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	232,
			"primary_score":	999945,
			"second_score":	1204
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	233,
			"primary_score":	999945,
			"second_score":	1203
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	235,
			"primary_score":	999945,
			"second_score":	1202
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	256,
			"primary_score":	999945,
			"second_score":	988
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	258,
			"primary_score":	999945,
			"second_score":	987
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	259,
			"primary_score":	999945,
			"second_score":	986
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	610,
			"primary_score":	999945,
			"second_score":	737
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	611,
			"primary_score":	999945,
			"second_score":	736
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	612,
			"primary_score":	999945,
			"second_score":	719
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	615,
			"primary_score":	999945,
			"second_score":	718
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	617,
			"primary_score":	999945,
			"second_score":	717
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	646,
			"primary_score":	999945,
			"second_score":	781
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	647,
			"primary_score":	999945,
			"second_score":	747
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	652,
			"primary_score":	999945,
			"second_score":	746
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	665,
			"primary_score":	999945,
			"second_score":	745
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	678,
			"primary_score":	999945,
			"second_score":	786
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	679,
			"primary_score":	999945,
			"second_score":	785
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	681,
			"primary_score":	999945,
			"second_score":	784
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	682,
			"primary_score":	999945,
			"second_score":	783
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	683,
			"primary_score":	999945,
			"second_score":	716
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	684,
			"primary_score":	999945,
			"second_score":	715
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	696,
			"primary_score":	999945,
			"second_score":	782
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	703,
			"primary_score":	999945,
			"second_score":	135
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	704,
			"primary_score":	999945,
			"second_score":	134
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	706,
			"primary_score":	999945,
			"second_score":	133
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	712,
			"primary_score":	999953,
			"second_score":	404
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	715,
			"primary_score":	999946,
			"second_score":	354
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	718,
			"primary_score":	999954,
			"second_score":	312
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	724,
			"primary_score":	999954,
			"second_score":	266
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	736,
			"primary_score":	999954,
			"second_score":	232
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	739,
			"primary_score":	999947,
			"second_score":	178
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	760,
			"primary_score":	999947,
			"second_score":	132
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	981,
			"primary_score":	999945,
			"second_score":	131
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	991,
			"primary_score":	999945,
			"second_score":	174
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	992,
			"primary_score":	999945,
			"second_score":	173
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	994,
			"primary_score":	999945,
			"second_score":	172
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	995,
			"primary_score":	999945,
			"second_score":	171
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	996,
			"primary_score":	999945,
			"second_score":	130
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	997,
			"primary_score":	999945,
			"second_score":	129
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1009,
			"primary_score":	999945,
			"second_score":	170
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1010,
			"primary_score":	999945,
			"second_score":	136
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1027,
			"primary_score":	999945,
			"second_score":	5531
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1028,
			"primary_score":	999945,
			"second_score":	5530
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1030,
			"primary_score":	999945,
			"second_score":	5529
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1031,
			"primary_score":	999945,
			"second_score":	5527
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1032,
			"primary_score":	999945,
			"second_score":	5524
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1033,
			"primary_score":	999945,
			"second_score":	5521
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1034,
			"primary_score":	999945,
			"second_score":	5518
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1035,
			"primary_score":	999945,
			"second_score":	5515
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1036,
			"primary_score":	999945,
			"second_score":	5512
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1037,
			"primary_score":	999945,
			"second_score":	5509
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1038,
			"primary_score":	999945,
			"second_score":	5506
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1039,
			"primary_score":	999945,
			"second_score":	5503
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1040,
			"primary_score":	999945,
			"second_score":	10228
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1041,
			"primary_score":	999945,
			"second_score":	10222
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1042,
			"primary_score":	999945,
			"second_score":	5494
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1043,
			"primary_score":	999945,
			"second_score":	5493
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1046,
			"primary_score":	999945,
			"second_score":	5492
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1051,
			"primary_score":	999945,
			"second_score":	5491
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1052,
			"primary_score":	999945,
			"second_score":	5490
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1079,
			"primary_score":	999950,
			"second_score":	10207
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1080,
			"primary_score":	999950,
			"second_score":	6258
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1081,
			"primary_score":	999950,
			"second_score":	6257
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1082,
			"primary_score":	999950,
			"second_score":	6256
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1083,
			"primary_score":	999950,
			"second_score":	6255
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1084,
			"primary_score":	999950,
			"second_score":	6254
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1086,
			"primary_score":	999950,
			"second_score":	6253
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1095,
			"primary_score":	999945,
			"second_score":	5486
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1096,
			"primary_score":	999945,
			"second_score":	5485
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1098,
			"primary_score":	999945,
			"second_score":	5484
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1099,
			"primary_score":	999945,
			"second_score":	5482
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1101,
			"primary_score":	999945,
			"second_score":	2378
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1102,
			"primary_score":	999945,
			"second_score":	2376
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1103,
			"primary_score":	999945,
			"second_score":	2375
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1104,
			"primary_score":	999945,
			"second_score":	2374
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1105,
			"primary_score":	999945,
			"second_score":	2373
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1106,
			"primary_score":	999945,
			"second_score":	2372
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1107,
			"primary_score":	999945,
			"second_score":	2371
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1108,
			"primary_score":	999945,
			"second_score":	2370
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1109,
			"primary_score":	999945,
			"second_score":	2369
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1110,
			"primary_score":	999945,
			"second_score":	2368
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1111,
			"primary_score":	999945,
			"second_score":	2367
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1112,
			"primary_score":	999945,
			"second_score":	2366
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1113,
			"primary_score":	999945,
			"second_score":	2365
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1114,
			"primary_score":	999945,
			"second_score":	2364
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1115,
			"primary_score":	999945,
			"second_score":	2363
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1116,
			"primary_score":	999945,
			"second_score":	2362
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1117,
			"primary_score":	999945,
			"second_score":	2361
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1118,
			"primary_score":	999945,
			"second_score":	2360
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1119,
			"primary_score":	999945,
			"second_score":	2359
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1120,
			"primary_score":	999945,
			"second_score":	2358
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1121,
			"primary_score":	999945,
			"second_score":	2357
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1122,
			"primary_score":	999945,
			"second_score":	2356
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1127,
			"primary_score":	999945,
			"second_score":	2355
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1129,
			"primary_score":	999945,
			"second_score":	2354
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1138,
			"primary_score":	999945,
			"second_score":	2236
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1145,
			"primary_score":	999945,
			"second_score":	2235
		}, {
			"file":	"libtiff/tif_dir.c",
			"line":	1147,
			"primary_score":	999945,
			"second_score":	2234
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	264,
			"primary_score":	999945,
			"second_score":	5483
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	276,
			"primary_score":	999945,
			"second_score":	5481
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	277,
			"primary_score":	999950,
			"second_score":	10200
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	279,
			"primary_score":	999950,
			"second_score":	10199
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	280,
			"primary_score":	999950,
			"second_score":	9924
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	281,
			"primary_score":	999950,
			"second_score":	9923
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	288,
			"primary_score":	999950,
			"second_score":	9922
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	289,
			"primary_score":	999950,
			"second_score":	9920
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	291,
			"primary_score":	999945,
			"second_score":	5480
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	300,
			"primary_score":	999945,
			"second_score":	141
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	301,
			"primary_score":	999945,
			"second_score":	140
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	303,
			"primary_score":	999945,
			"second_score":	139
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	304,
			"primary_score":	999945,
			"second_score":	142
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	306,
			"primary_score":	999945,
			"second_score":	138
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	327,
			"primary_score":	999945,
			"second_score":	5479
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	328,
			"primary_score":	999945,
			"second_score":	5478
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	329,
			"primary_score":	999945,
			"second_score":	5477
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	330,
			"primary_score":	999945,
			"second_score":	5476
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	332,
			"primary_score":	999945,
			"second_score":	5475
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	333,
			"primary_score":	999945,
			"second_score":	4378
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	335,
			"primary_score":	999945,
			"second_score":	4371
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	344,
			"primary_score":	999945,
			"second_score":	4370
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	346,
			"primary_score":	999945,
			"second_score":	4369
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	352,
			"primary_score":	999945,
			"second_score":	4368
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	356,
			"primary_score":	999945,
			"second_score":	4359
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	361,
			"primary_score":	999945,
			"second_score":	4358
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	362,
			"primary_score":	999945,
			"second_score":	4357
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	366,
			"primary_score":	999945,
			"second_score":	4356
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	369,
			"primary_score":	999945,
			"second_score":	2379
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	399,
			"primary_score":	999945,
			"second_score":	637
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	467,
			"primary_score":	999945,
			"second_score":	169
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	468,
			"primary_score":	999945,
			"second_score":	168
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	469,
			"primary_score":	999945,
			"second_score":	167
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	470,
			"primary_score":	999945,
			"second_score":	166
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	472,
			"primary_score":	999945,
			"second_score":	722
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	475,
			"primary_score":	999945,
			"second_score":	165
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	476,
			"primary_score":	999945,
			"second_score":	4372
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	481,
			"primary_score":	999945,
			"second_score":	164
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	482,
			"primary_score":	999945,
			"second_score":	163
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	484,
			"primary_score":	999945,
			"second_score":	162
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	487,
			"primary_score":	999945,
			"second_score":	137
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	520,
			"primary_score":	999945,
			"second_score":	727
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	521,
			"primary_score":	999945,
			"second_score":	721
		}, {
			"file":	"libtiff/tif_dirinfo.c",
			"line":	528,
			"primary_score":	999945,
			"second_score":	720
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	256,
			"primary_score":	999945,
			"second_score":	794
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	257,
			"primary_score":	999945,
			"second_score":	793
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	259,
			"primary_score":	999945,
			"second_score":	792
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	280,
			"primary_score":	999945,
			"second_score":	789
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	342,
			"primary_score":	999945,
			"second_score":	1274
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	343,
			"primary_score":	999945,
			"second_score":	1273
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	345,
			"primary_score":	999945,
			"second_score":	1272
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	366,
			"primary_score":	999945,
			"second_score":	1271
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	367,
			"primary_score":	999945,
			"second_score":	1270
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	368,
			"primary_score":	999945,
			"second_score":	1267
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	369,
			"primary_score":	999945,
			"second_score":	1266
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	717,
			"primary_score":	999945,
			"second_score":	641
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	718,
			"primary_score":	999945,
			"second_score":	640
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	719,
			"primary_score":	999945,
			"second_score":	639
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	720,
			"primary_score":	999945,
			"second_score":	638
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	721,
			"primary_score":	999945,
			"second_score":	636
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	726,
			"primary_score":	999945,
			"second_score":	635
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	728,
			"primary_score":	999945,
			"second_score":	634
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	730,
			"primary_score":	999945,
			"second_score":	633
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	731,
			"primary_score":	999945,
			"second_score":	632
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	732,
			"primary_score":	999945,
			"second_score":	631
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	733,
			"primary_score":	999945,
			"second_score":	630
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	734,
			"primary_score":	999945,
			"second_score":	628
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	736,
			"primary_score":	999945,
			"second_score":	627
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	738,
			"primary_score":	999945,
			"second_score":	626
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	739,
			"primary_score":	999950,
			"second_score":	625
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	774,
			"primary_score":	999945,
			"second_score":	623
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	775,
			"primary_score":	999945,
			"second_score":	622
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1809,
			"primary_score":	999945,
			"second_score":	647
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1810,
			"primary_score":	999945,
			"second_score":	646
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1811,
			"primary_score":	999945,
			"second_score":	645
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1812,
			"primary_score":	999945,
			"second_score":	644
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1813,
			"primary_score":	999945,
			"second_score":	643
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1827,
			"primary_score":	999945,
			"second_score":	642
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1828,
			"primary_score":	999945,
			"second_score":	621
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1833,
			"primary_score":	999945,
			"second_score":	620
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1861,
			"primary_score":	999945,
			"second_score":	619
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1862,
			"primary_score":	999945,
			"second_score":	617
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1867,
			"primary_score":	999945,
			"second_score":	616
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1898,
			"primary_score":	999957,
			"second_score":	615
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1899,
			"primary_score":	999957,
			"second_score":	614
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1900,
			"primary_score":	999957,
			"second_score":	613
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1901,
			"primary_score":	999957,
			"second_score":	612
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1902,
			"primary_score":	999957,
			"second_score":	611
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1903,
			"primary_score":	999957,
			"second_score":	610
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1905,
			"primary_score":	999957,
			"second_score":	609
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1907,
			"primary_score":	999957,
			"second_score":	608
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1910,
			"primary_score":	999957,
			"second_score":	607
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1963,
			"primary_score":	999945,
			"second_score":	606
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1964,
			"primary_score":	999945,
			"second_score":	604
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1969,
			"primary_score":	999945,
			"second_score":	603
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	1970,
			"primary_score":	999945,
			"second_score":	602
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	2730,
			"primary_score":	999945,
			"second_score":	791
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	2731,
			"primary_score":	999945,
			"second_score":	790
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3278,
			"primary_score":	999945,
			"second_score":	5789
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3279,
			"primary_score":	999945,
			"second_score":	5788
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3280,
			"primary_score":	999945,
			"second_score":	5787
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3281,
			"primary_score":	999945,
			"second_score":	5786
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3282,
			"primary_score":	999945,
			"second_score":	5785
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3283,
			"primary_score":	999945,
			"second_score":	5784
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3284,
			"primary_score":	999945,
			"second_score":	5783
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3285,
			"primary_score":	999945,
			"second_score":	5782
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3286,
			"primary_score":	999945,
			"second_score":	5781
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3288,
			"primary_score":	999945,
			"second_score":	5761
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3289,
			"primary_score":	999945,
			"second_score":	5759
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3290,
			"primary_score":	999945,
			"second_score":	5758
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3291,
			"primary_score":	999945,
			"second_score":	5561
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3297,
			"primary_score":	999945,
			"second_score":	5560
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3298,
			"primary_score":	999945,
			"second_score":	5533
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3300,
			"primary_score":	999945,
			"second_score":	5532
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3301,
			"primary_score":	999945,
			"second_score":	5487
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3308,
			"primary_score":	999945,
			"second_score":	2233
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3326,
			"primary_score":	999945,
			"second_score":	2158
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3327,
			"primary_score":	999945,
			"second_score":	2145
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3329,
			"primary_score":	999945,
			"second_score":	2144
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3331,
			"primary_score":	999945,
			"second_score":	2012
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3333,
			"primary_score":	999945,
			"second_score":	2011
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3334,
			"primary_score":	999945,
			"second_score":	2001
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3342,
			"primary_score":	999945,
			"second_score":	2000
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3343,
			"primary_score":	999945,
			"second_score":	1999
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3344,
			"primary_score":	999945,
			"second_score":	1998
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3345,
			"primary_score":	999945,
			"second_score":	1991
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3347,
			"primary_score":	999945,
			"second_score":	1990
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3352,
			"primary_score":	999945,
			"second_score":	1989
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3354,
			"primary_score":	999945,
			"second_score":	1910
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3364,
			"primary_score":	999945,
			"second_score":	1909
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3366,
			"primary_score":	999945,
			"second_score":	1122
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3368,
			"primary_score":	999945,
			"second_score":	1121
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3369,
			"primary_score":	999945,
			"second_score":	1092
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3391,
			"primary_score":	999945,
			"second_score":	1091
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3393,
			"primary_score":	999945,
			"second_score":	1090
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3394,
			"primary_score":	999945,
			"second_score":	1089
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3398,
			"primary_score":	999945,
			"second_score":	1088
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3405,
			"primary_score":	999945,
			"second_score":	1123
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3417,
			"primary_score":	999945,
			"second_score":	959
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3418,
			"primary_score":	999945,
			"second_score":	958
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3431,
			"primary_score":	999945,
			"second_score":	957
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3451,
			"primary_score":	999945,
			"second_score":	956
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3459,
			"primary_score":	999945,
			"second_score":	955
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3460,
			"primary_score":	999945,
			"second_score":	954
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3461,
			"primary_score":	999945,
			"second_score":	948
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3462,
			"primary_score":	999945,
			"second_score":	947
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3463,
			"primary_score":	999945,
			"second_score":	946
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3464,
			"primary_score":	999945,
			"second_score":	945
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3469,
			"primary_score":	999945,
			"second_score":	944
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3475,
			"primary_score":	999945,
			"second_score":	943
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3476,
			"primary_score":	999945,
			"second_score":	942
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3478,
			"primary_score":	999945,
			"second_score":	941
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3500,
			"primary_score":	999945,
			"second_score":	940
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3502,
			"primary_score":	999945,
			"second_score":	596
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3522,
			"primary_score":	999945,
			"second_score":	936
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3523,
			"primary_score":	999945,
			"second_score":	935
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3524,
			"primary_score":	999945,
			"second_score":	934
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3525,
			"primary_score":	999945,
			"second_score":	927
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3527,
			"primary_score":	999945,
			"second_score":	926
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3532,
			"primary_score":	999945,
			"second_score":	925
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3535,
			"primary_score":	999945,
			"second_score":	855
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3555,
			"primary_score":	999945,
			"second_score":	655
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3560,
			"primary_score":	999945,
			"second_score":	597
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3614,
			"primary_score":	999945,
			"second_score":	711
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3633,
			"primary_score":	999945,
			"second_score":	595
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3681,
			"primary_score":	999945,
			"second_score":	594
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3691,
			"primary_score":	999945,
			"second_score":	593
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3696,
			"primary_score":	999945,
			"second_score":	592
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3736,
			"primary_score":	999945,
			"second_score":	591
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3750,
			"primary_score":	999945,
			"second_score":	571
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3769,
			"primary_score":	999945,
			"second_score":	570
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3771,
			"primary_score":	999945,
			"second_score":	569
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3772,
			"primary_score":	999945,
			"second_score":	567
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3774,
			"primary_score":	999945,
			"second_score":	566
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3775,
			"primary_score":	999945,
			"second_score":	565
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3781,
			"primary_score":	999945,
			"second_score":	564
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3796,
			"primary_score":	999945,
			"second_score":	563
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3807,
			"primary_score":	999945,
			"second_score":	560
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3809,
			"primary_score":	999979,
			"second_score":	559
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3814,
			"primary_score":	999945,
			"second_score":	521
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3815,
			"primary_score":	999945,
			"second_score":	520
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3816,
			"primary_score":	999945,
			"second_score":	519
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3817,
			"primary_score":	999945,
			"second_score":	518
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3818,
			"primary_score":	999945,
			"second_score":	517
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3820,
			"primary_score":	999945,
			"second_score":	516
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3821,
			"primary_score":	999945,
			"second_score":	493
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3827,
			"primary_score":	999945,
			"second_score":	492
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3835,
			"primary_score":	999945,
			"second_score":	491
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3841,
			"primary_score":	999945,
			"second_score":	456
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3851,
			"primary_score":	999945,
			"second_score":	5559
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3852,
			"primary_score":	999945,
			"second_score":	5558
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3853,
			"primary_score":	999945,
			"second_score":	5557
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3854,
			"primary_score":	999945,
			"second_score":	5556
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3855,
			"primary_score":	999945,
			"second_score":	5555
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3856,
			"primary_score":	999945,
			"second_score":	5554
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3858,
			"primary_score":	999945,
			"second_score":	5535
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3864,
			"primary_score":	999945,
			"second_score":	5534
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3871,
			"primary_score":	999945,
			"second_score":	2010
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3872,
			"primary_score":	999945,
			"second_score":	2009
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3873,
			"primary_score":	999945,
			"second_score":	2008
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3874,
			"primary_score":	999945,
			"second_score":	2007
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3876,
			"primary_score":	999945,
			"second_score":	2003
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3877,
			"primary_score":	999945,
			"second_score":	2002
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3885,
			"primary_score":	999945,
			"second_score":	847
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3886,
			"primary_score":	999945,
			"second_score":	846
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3887,
			"primary_score":	999945,
			"second_score":	845
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3888,
			"primary_score":	999945,
			"second_score":	844
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3890,
			"primary_score":	999945,
			"second_score":	813
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3895,
			"primary_score":	999945,
			"second_score":	812
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3896,
			"primary_score":	999945,
			"second_score":	811
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3897,
			"primary_score":	999945,
			"second_score":	810
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3898,
			"primary_score":	999945,
			"second_score":	815
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3899,
			"primary_score":	999945,
			"second_score":	814
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3901,
			"primary_score":	999945,
			"second_score":	824
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3903,
			"primary_score":	999945,
			"second_score":	809
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3905,
			"primary_score":	999945,
			"second_score":	808
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3907,
			"primary_score":	999945,
			"second_score":	807
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3908,
			"primary_score":	999945,
			"second_score":	806
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	3911,
			"primary_score":	999945,
			"second_score":	805
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4129,
			"primary_score":	999945,
			"second_score":	5780
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4131,
			"primary_score":	999945,
			"second_score":	5779
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4134,
			"primary_score":	999945,
			"second_score":	5778
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4139,
			"primary_score":	999945,
			"second_score":	5777
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4141,
			"primary_score":	999945,
			"second_score":	5776
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4142,
			"primary_score":	999945,
			"second_score":	5775
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4148,
			"primary_score":	999945,
			"second_score":	5774
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4150,
			"primary_score":	999945,
			"second_score":	5766
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4152,
			"primary_score":	999945,
			"second_score":	5765
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4153,
			"primary_score":	999945,
			"second_score":	5764
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4156,
			"primary_score":	999945,
			"second_score":	5763
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4158,
			"primary_score":	999945,
			"second_score":	5762
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4193,
			"primary_score":	999945,
			"second_score":	5757
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4195,
			"primary_score":	999945,
			"second_score":	5756
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4196,
			"primary_score":	999945,
			"second_score":	5755
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4197,
			"primary_score":	999945,
			"second_score":	5754
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4198,
			"primary_score":	999945,
			"second_score":	5753
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4199,
			"primary_score":	999945,
			"second_score":	5752
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4200,
			"primary_score":	999945,
			"second_score":	5751
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4201,
			"primary_score":	999945,
			"second_score":	5750
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4203,
			"primary_score":	999945,
			"second_score":	5749
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4205,
			"primary_score":	999945,
			"second_score":	5748
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4206,
			"primary_score":	999945,
			"second_score":	5747
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4207,
			"primary_score":	999945,
			"second_score":	5746
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4208,
			"primary_score":	999945,
			"second_score":	5745
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4284,
			"primary_score":	999945,
			"second_score":	5744
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4285,
			"primary_score":	999945,
			"second_score":	5743
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4286,
			"primary_score":	999945,
			"second_score":	5742
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4301,
			"primary_score":	999945,
			"second_score":	5741
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4303,
			"primary_score":	999945,
			"second_score":	5740
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4304,
			"primary_score":	999945,
			"second_score":	5739
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4309,
			"primary_score":	999945,
			"second_score":	5738
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4312,
			"primary_score":	999945,
			"second_score":	5736
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4313,
			"primary_score":	999945,
			"second_score":	5735
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4315,
			"primary_score":	999945,
			"second_score":	5734
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4321,
			"primary_score":	999945,
			"second_score":	5733
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4348,
			"primary_score":	999945,
			"second_score":	5732
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4351,
			"primary_score":	999945,
			"second_score":	5723
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4353,
			"primary_score":	999945,
			"second_score":	5722
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4354,
			"primary_score":	999945,
			"second_score":	5721
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4360,
			"primary_score":	999945,
			"second_score":	5720
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4363,
			"primary_score":	999945,
			"second_score":	5718
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4364,
			"primary_score":	999945,
			"second_score":	5717
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4365,
			"primary_score":	999945,
			"second_score":	5716
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4367,
			"primary_score":	999945,
			"second_score":	5715
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4368,
			"primary_score":	999945,
			"second_score":	5714
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4369,
			"primary_score":	999945,
			"second_score":	5713
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4372,
			"primary_score":	999945,
			"second_score":	5712
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4374,
			"primary_score":	999945,
			"second_score":	5710
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4376,
			"primary_score":	999945,
			"second_score":	5709
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4391,
			"primary_score":	999945,
			"second_score":	5708
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4394,
			"primary_score":	999945,
			"second_score":	5699
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4399,
			"primary_score":	999945,
			"second_score":	5698
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4400,
			"primary_score":	999945,
			"second_score":	5697
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4401,
			"primary_score":	999945,
			"second_score":	5696
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4403,
			"primary_score":	999945,
			"second_score":	5578
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4405,
			"primary_score":	999945,
			"second_score":	5577
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4406,
			"primary_score":	999945,
			"second_score":	5576
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4407,
			"primary_score":	999945,
			"second_score":	5575
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4409,
			"primary_score":	999945,
			"second_score":	5574
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4410,
			"primary_score":	999945,
			"second_score":	5573
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4411,
			"primary_score":	999945,
			"second_score":	5572
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4413,
			"primary_score":	999945,
			"second_score":	5571
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4415,
			"primary_score":	999945,
			"second_score":	5570
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4416,
			"primary_score":	999945,
			"second_score":	5569
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4417,
			"primary_score":	999945,
			"second_score":	5568
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4418,
			"primary_score":	999945,
			"second_score":	5567
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4429,
			"primary_score":	999945,
			"second_score":	5566
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4431,
			"primary_score":	999945,
			"second_score":	5565
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4432,
			"primary_score":	999945,
			"second_score":	5563
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4433,
			"primary_score":	999945,
			"second_score":	5562
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4442,
			"primary_score":	999945,
			"second_score":	852
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4443,
			"primary_score":	999945,
			"second_score":	851
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4444,
			"primary_score":	999945,
			"second_score":	850
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4445,
			"primary_score":	999945,
			"second_score":	849
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4446,
			"primary_score":	999945,
			"second_score":	848
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4447,
			"primary_score":	999945,
			"second_score":	804
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4448,
			"primary_score":	999945,
			"second_score":	803
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4449,
			"primary_score":	999945,
			"second_score":	802
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4450,
			"primary_score":	999945,
			"second_score":	801
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4451,
			"primary_score":	999945,
			"second_score":	800
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4452,
			"primary_score":	999945,
			"second_score":	799
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4520,
			"primary_score":	999945,
			"second_score":	798
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4521,
			"primary_score":	999945,
			"second_score":	797
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4522,
			"primary_score":	999945,
			"second_score":	796
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4523,
			"primary_score":	999945,
			"second_score":	795
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4524,
			"primary_score":	999945,
			"second_score":	788
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4526,
			"primary_score":	999945,
			"second_score":	787
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4530,
			"primary_score":	999945,
			"second_score":	714
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4533,
			"primary_score":	999945,
			"second_score":	1278
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4534,
			"primary_score":	999945,
			"second_score":	1277
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4535,
			"primary_score":	999945,
			"second_score":	1276
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4536,
			"primary_score":	999945,
			"second_score":	1275
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4537,
			"primary_score":	999945,
			"second_score":	1265
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4539,
			"primary_score":	999945,
			"second_score":	1264
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	4543,
			"primary_score":	999945,
			"second_score":	1178
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5076,
			"primary_score":	999945,
			"second_score":	713
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5081,
			"primary_score":	999945,
			"second_score":	712
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5091,
			"primary_score":	999945,
			"second_score":	651
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5092,
			"primary_score":	999945,
			"second_score":	650
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5093,
			"primary_score":	999945,
			"second_score":	649
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5094,
			"primary_score":	999945,
			"second_score":	648
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5095,
			"primary_score":	999945,
			"second_score":	601
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5100,
			"primary_score":	999945,
			"second_score":	600
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5116,
			"primary_score":	999945,
			"second_score":	599
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5117,
			"primary_score":	999945,
			"second_score":	598
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5186,
			"primary_score":	999979,
			"second_score":	558
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5187,
			"primary_score":	999979,
			"second_score":	557
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5188,
			"primary_score":	999979,
			"second_score":	556
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5189,
			"primary_score":	999979,
			"second_score":	555
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5190,
			"primary_score":	999979,
			"second_score":	533
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5191,
			"primary_score":	999979,
			"second_score":	532
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5192,
			"primary_score":	999979,
			"second_score":	531
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5193,
			"primary_score":	999979,
			"second_score":	530
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5194,
			"primary_score":	999979,
			"second_score":	529
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5195,
			"primary_score":	999979,
			"second_score":	528
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5201,
			"primary_score":	999979,
			"second_score":	527
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5204,
			"primary_score":	999979,
			"second_score":	526
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5205,
			"primary_score":	999979,
			"second_score":	525
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5206,
			"primary_score":	999979,
			"second_score":	524
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5214,
			"primary_score":	999979,
			"second_score":	523
		}, {
			"file":	"libtiff/tif_dirread.c",
			"line":	5215,
			"primary_score":	999980,
			"second_score":	522
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	129,
			"primary_score":	999950,
			"second_score":	11850
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	311,
			"primary_score":	999950,
			"second_score":	11849
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	312,
			"primary_score":	999950,
			"second_score":	11848
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	313,
			"primary_score":	999950,
			"second_score":	11847
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	314,
			"primary_score":	999950,
			"second_score":	11846
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	315,
			"primary_score":	999950,
			"second_score":	11845
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	316,
			"primary_score":	999950,
			"second_score":	11844
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	317,
			"primary_score":	999950,
			"second_score":	11843
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	324,
			"primary_score":	999950,
			"second_score":	11842
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	326,
			"primary_score":	999950,
			"second_score":	11841
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	336,
			"primary_score":	999950,
			"second_score":	11840
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	341,
			"primary_score":	999950,
			"second_score":	11838
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	349,
			"primary_score":	999950,
			"second_score":	11837
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	351,
			"primary_score":	999950,
			"second_score":	11836
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	352,
			"primary_score":	999950,
			"second_score":	11834
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	353,
			"primary_score":	999950,
			"second_score":	11833
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	354,
			"primary_score":	999950,
			"second_score":	11832
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	356,
			"primary_score":	999950,
			"second_score":	11831
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	358,
			"primary_score":	999950,
			"second_score":	11830
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	359,
			"primary_score":	999950,
			"second_score":	11829
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	360,
			"primary_score":	999950,
			"second_score":	11828
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	361,
			"primary_score":	999950,
			"second_score":	11827
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	363,
			"primary_score":	999950,
			"second_score":	11278
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	364,
			"primary_score":	999950,
			"second_score":	11277
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	366,
			"primary_score":	999950,
			"second_score":	11276
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	368,
			"primary_score":	999950,
			"second_score":	11275
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	370,
			"primary_score":	999950,
			"second_score":	11252
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	373,
			"primary_score":	999950,
			"second_score":	11226
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	380,
			"primary_score":	999950,
			"second_score":	11225
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	387,
			"primary_score":	999950,
			"second_score":	11224
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	394,
			"primary_score":	999950,
			"second_score":	11223
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	399,
			"primary_score":	999950,
			"second_score":	11222
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	401,
			"primary_score":	999950,
			"second_score":	11221
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	404,
			"primary_score":	999950,
			"second_score":	11182
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	406,
			"primary_score":	999950,
			"second_score":	11181
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	409,
			"primary_score":	999950,
			"second_score":	11150
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	411,
			"primary_score":	999950,
			"second_score":	11149
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	414,
			"primary_score":	999950,
			"second_score":	11115
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	419,
			"primary_score":	999950,
			"second_score":	11114
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	424,
			"primary_score":	999950,
			"second_score":	11113
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	429,
			"primary_score":	999950,
			"second_score":	11112
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	431,
			"primary_score":	999950,
			"second_score":	11111
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	434,
			"primary_score":	999950,
			"second_score":	11074
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	436,
			"primary_score":	999951,
			"second_score":	11073
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	439,
			"primary_score":	999950,
			"second_score":	11032
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	444,
			"primary_score":	999950,
			"second_score":	11031
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	449,
			"primary_score":	999950,
			"second_score":	11030
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	451,
			"primary_score":	999950,
			"second_score":	11029
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	454,
			"primary_score":	999950,
			"second_score":	10986
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	459,
			"primary_score":	999950,
			"second_score":	10985
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	464,
			"primary_score":	999950,
			"second_score":	10984
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	466,
			"primary_score":	999950,
			"second_score":	10983
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	468,
			"primary_score":	999950,
			"second_score":	10982
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	477,
			"primary_score":	999950,
			"second_score":	10916
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	479,
			"primary_score":	999950,
			"second_score":	10915
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	481,
			"primary_score":	999950,
			"second_score":	10914
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	490,
			"primary_score":	999950,
			"second_score":	10854
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	495,
			"primary_score":	999950,
			"second_score":	10853
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	506,
			"primary_score":	999950,
			"second_score":	10852
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	511,
			"primary_score":	999950,
			"second_score":	10851
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	516,
			"primary_score":	999950,
			"second_score":	10850
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	521,
			"primary_score":	999950,
			"second_score":	10849
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	526,
			"primary_score":	999950,
			"second_score":	10848
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	531,
			"primary_score":	999950,
			"second_score":	10847
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	536,
			"primary_score":	999950,
			"second_score":	10846
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	541,
			"primary_score":	999950,
			"second_score":	10845
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	546,
			"primary_score":	999950,
			"second_score":	10844
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	551,
			"primary_score":	999950,
			"second_score":	10843
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	556,
			"primary_score":	999950,
			"second_score":	10842
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	561,
			"primary_score":	999950,
			"second_score":	10841
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	562,
			"primary_score":	999950,
			"second_score":	10840
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	563,
			"primary_score":	999950,
			"second_score":	10839
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	564,
			"primary_score":	999950,
			"second_score":	10427
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	565,
			"primary_score":	999950,
			"second_score":	10426
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	566,
			"primary_score":	999950,
			"second_score":	10425
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	625,
			"primary_score":	999950,
			"second_score":	10424
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	698,
			"primary_score":	999950,
			"second_score":	10423
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	699,
			"primary_score":	999950,
			"second_score":	10422
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	700,
			"primary_score":	999950,
			"second_score":	11315
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	701,
			"primary_score":	999950,
			"second_score":	11313
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	706,
			"primary_score":	999950,
			"second_score":	11312
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	708,
			"primary_score":	999950,
			"second_score":	11311
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	713,
			"primary_score":	999950,
			"second_score":	11288
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	715,
			"primary_score":	999950,
			"second_score":	11287
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	716,
			"primary_score":	999950,
			"second_score":	11286
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	719,
			"primary_score":	999950,
			"second_score":	11285
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	720,
			"primary_score":	999950,
			"second_score":	11284
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	721,
			"primary_score":	999950,
			"second_score":	11283
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	722,
			"primary_score":	999950,
			"second_score":	11282
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	727,
			"primary_score":	999950,
			"second_score":	11281
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	729,
			"primary_score":	999950,
			"second_score":	11280
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	730,
			"primary_score":	999950,
			"second_score":	11279
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	732,
			"primary_score":	999950,
			"second_score":	10421
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	734,
			"primary_score":	999950,
			"second_score":	10420
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	750,
			"primary_score":	999950,
			"second_score":	10419
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	751,
			"primary_score":	999950,
			"second_score":	10417
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	756,
			"primary_score":	999950,
			"second_score":	10416
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	758,
			"primary_score":	999950,
			"second_score":	10415
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	759,
			"primary_score":	999950,
			"second_score":	10414
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	760,
			"primary_score":	999950,
			"second_score":	10413
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	761,
			"primary_score":	999950,
			"second_score":	10412
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	762,
			"primary_score":	999950,
			"second_score":	10411
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	764,
			"primary_score":	999950,
			"second_score":	10410
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	765,
			"primary_score":	999950,
			"second_score":	10409
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	766,
			"primary_score":	999950,
			"second_score":	10408
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	768,
			"primary_score":	999950,
			"second_score":	10290
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	769,
			"primary_score":	999950,
			"second_score":	10289
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	771,
			"primary_score":	999950,
			"second_score":	10288
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	772,
			"primary_score":	999950,
			"second_score":	10287
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	773,
			"primary_score":	999950,
			"second_score":	10286
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	775,
			"primary_score":	999950,
			"second_score":	10285
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	776,
			"primary_score":	999950,
			"second_score":	10284
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	777,
			"primary_score":	999950,
			"second_score":	10283
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	779,
			"primary_score":	999950,
			"second_score":	10282
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	780,
			"primary_score":	999950,
			"second_score":	10281
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	781,
			"primary_score":	999950,
			"second_score":	10279
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	782,
			"primary_score":	999950,
			"second_score":	10278
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	784,
			"primary_score":	999950,
			"second_score":	10277
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	816,
			"primary_score":	999950,
			"second_score":	10276
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	817,
			"primary_score":	999950,
			"second_score":	10274
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	818,
			"primary_score":	999950,
			"second_score":	10273
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	823,
			"primary_score":	999950,
			"second_score":	10269
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	828,
			"primary_score":	999950,
			"second_score":	10265
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	829,
			"primary_score":	999950,
			"second_score":	10263
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	831,
			"primary_score":	999950,
			"second_score":	10262
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	832,
			"primary_score":	999950,
			"second_score":	10211
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	833,
			"primary_score":	999950,
			"second_score":	10210
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	838,
			"primary_score":	999950,
			"second_score":	10208
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	840,
			"primary_score":	999950,
			"second_score":	6252
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	999,
			"primary_score":	999950,
			"second_score":	11028
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1001,
			"primary_score":	999950,
			"second_score":	11773
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1002,
			"primary_score":	999950,
			"second_score":	11772
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1004,
			"primary_score":	999950,
			"second_score":	11027
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1021,
			"primary_score":	999950,
			"second_score":	11220
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1022,
			"primary_score":	999950,
			"second_score":	11219
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1023,
			"primary_score":	999950,
			"second_score":	11218
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1024,
			"primary_score":	999950,
			"second_score":	11217
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1025,
			"primary_score":	999950,
			"second_score":	11216
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1026,
			"primary_score":	999950,
			"second_score":	11215
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1028,
			"primary_score":	999950,
			"second_score":	11803
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1029,
			"primary_score":	999950,
			"second_score":	11802
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1031,
			"primary_score":	999950,
			"second_score":	11214
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1032,
			"primary_score":	999950,
			"second_score":	11212
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1037,
			"primary_score":	999950,
			"second_score":	11211
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1039,
			"primary_score":	999950,
			"second_score":	11210
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1040,
			"primary_score":	999950,
			"second_score":	11185
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1041,
			"primary_score":	999950,
			"second_score":	11183
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1380,
			"primary_score":	999950,
			"second_score":	11072
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1382,
			"primary_score":	999950,
			"second_score":	11780
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1383,
			"primary_score":	999950,
			"second_score":	11779
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1385,
			"primary_score":	999950,
			"second_score":	11071
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1386,
			"primary_score":	999950,
			"second_score":	11070
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1439,
			"primary_score":	999950,
			"second_score":	10913
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1440,
			"primary_score":	999950,
			"second_score":	10912
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1441,
			"primary_score":	999950,
			"second_score":	10911
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1442,
			"primary_score":	999950,
			"second_score":	10910
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1443,
			"primary_score":	999950,
			"second_score":	10909
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1444,
			"primary_score":	999950,
			"second_score":	10908
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1446,
			"primary_score":	999950,
			"second_score":	11749
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1447,
			"primary_score":	999950,
			"second_score":	11748
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1449,
			"primary_score":	999950,
			"second_score":	10907
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1450,
			"primary_score":	999950,
			"second_score":	10906
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1452,
			"primary_score":	999950,
			"second_score":	10905
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1454,
			"primary_score":	999950,
			"second_score":	10904
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1460,
			"primary_score":	999950,
			"second_score":	10903
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1462,
			"primary_score":	999950,
			"second_score":	10902
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1463,
			"primary_score":	999950,
			"second_score":	10901
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1464,
			"primary_score":	999950,
			"second_score":	10900
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1465,
			"primary_score":	999950,
			"second_score":	10898
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1470,
			"primary_score":	999950,
			"second_score":	10897
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1472,
			"primary_score":	999950,
			"second_score":	10896
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1473,
			"primary_score":	999950,
			"second_score":	10857
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1495,
			"primary_score":	999950,
			"second_score":	10855
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1678,
			"primary_score":	999950,
			"second_score":	11026
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1679,
			"primary_score":	999950,
			"second_score":	11025
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1680,
			"primary_score":	999950,
			"second_score":	11024
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1681,
			"primary_score":	999950,
			"second_score":	11023
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1683,
			"primary_score":	999950,
			"second_score":	11022
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1689,
			"primary_score":	999950,
			"second_score":	10895
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1690,
			"primary_score":	999950,
			"second_score":	10894
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1691,
			"primary_score":	999950,
			"second_score":	10893
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	1693,
			"primary_score":	999950,
			"second_score":	10892
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2017,
			"primary_score":	999950,
			"second_score":	10891
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2018,
			"primary_score":	999950,
			"second_score":	10890
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2019,
			"primary_score":	999950,
			"second_score":	10889
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2020,
			"primary_score":	999950,
			"second_score":	10888
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2022,
			"primary_score":	999950,
			"second_score":	10872
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2023,
			"primary_score":	999950,
			"second_score":	10871
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2024,
			"primary_score":	999950,
			"second_score":	10870
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2025,
			"primary_score":	999950,
			"second_score":	10873
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2027,
			"primary_score":	999950,
			"second_score":	10869
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2029,
			"primary_score":	999950,
			"second_score":	10868
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2030,
			"primary_score":	999950,
			"second_score":	10867
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2033,
			"primary_score":	999950,
			"second_score":	10866
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2034,
			"primary_score":	999950,
			"second_score":	10865
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2035,
			"primary_score":	999950,
			"second_score":	10864
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2036,
			"primary_score":	999950,
			"second_score":	10863
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2037,
			"primary_score":	999950,
			"second_score":	10862
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2038,
			"primary_score":	999950,
			"second_score":	10861
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2080,
			"primary_score":	999950,
			"second_score":	10859
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2081,
			"primary_score":	999950,
			"second_score":	10858
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2090,
			"primary_score":	999950,
			"second_score":	11310
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2092,
			"primary_score":	999950,
			"second_score":	11309
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2097,
			"primary_score":	999950,
			"second_score":	11305
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2147,
			"primary_score":	999950,
			"second_score":	11304
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2149,
			"primary_score":	999950,
			"second_score":	11303
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2150,
			"primary_score":	999950,
			"second_score":	11302
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2151,
			"primary_score":	999950,
			"second_score":	11301
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2152,
			"primary_score":	999950,
			"second_score":	11300
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2154,
			"primary_score":	999950,
			"second_score":	11299
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2158,
			"primary_score":	999950,
			"second_score":	11298
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2159,
			"primary_score":	999950,
			"second_score":	11297
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2160,
			"primary_score":	999950,
			"second_score":	11293
		}, {
			"file":	"libtiff/tif_dirwrite.c",
			"line":	2165,
			"primary_score":	999950,
			"second_score":	11289
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	37,
			"primary_score":	999956,
			"second_score":	562
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	38,
			"primary_score":	999956,
			"second_score":	561
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	47,
			"primary_score":	999976,
			"second_score":	11908
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	48,
			"primary_score":	999976,
			"second_score":	11907
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	49,
			"primary_score":	999976,
			"second_score":	11906
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	51,
			"primary_score":	999976,
			"second_score":	11905
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	52,
			"primary_score":	999976,
			"second_score":	11904
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	55,
			"primary_score":	999976,
			"second_score":	11903
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	61,
			"primary_score":	999976,
			"second_score":	11902
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	62,
			"primary_score":	999976,
			"second_score":	11901
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	63,
			"primary_score":	999976,
			"second_score":	11899
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	64,
			"primary_score":	999976,
			"second_score":	11898
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	65,
			"primary_score":	999976,
			"second_score":	11897
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	66,
			"primary_score":	999976,
			"second_score":	11896
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	67,
			"primary_score":	999976,
			"second_score":	11895
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	71,
			"primary_score":	999976,
			"second_score":	11894
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	80,
			"primary_score":	999960,
			"second_score":	6
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	81,
			"primary_score":	999960,
			"second_score":	5
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	82,
			"primary_score":	999960,
			"second_score":	4
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	94,
			"primary_score":	999960,
			"second_score":	3
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	95,
			"primary_score":	999960,
			"second_score":	2
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	118,
			"primary_score":	999945,
			"second_score":	2271
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	119,
			"primary_score":	999945,
			"second_score":	2270
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	120,
			"primary_score":	999945,
			"second_score":	2269
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	121,
			"primary_score":	999945,
			"second_score":	2268
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	122,
			"primary_score":	999945,
			"second_score":	2267
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	123,
			"primary_score":	999945,
			"second_score":	2266
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	124,
			"primary_score":	999945,
			"second_score":	2265
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	125,
			"primary_score":	999945,
			"second_score":	2264
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	126,
			"primary_score":	999945,
			"second_score":	2263
		}, {
			"file":	"libtiff/tif_dumpmode.c",
			"line":	127,
			"primary_score":	999945,
			"second_score":	2262
		}, {
			"file":	"libtiff/tif_flush.c",
			"line":	36,
			"primary_score":	999950,
			"second_score":	11858
		}, {
			"file":	"libtiff/tif_flush.c",
			"line":	37,
			"primary_score":	999950,
			"second_score":	11857
		}, {
			"file":	"libtiff/tif_flush.c",
			"line":	39,
			"primary_score":	999993,
			"second_score":	11851
		}, {
			"file":	"libtiff/tif_flush.c",
			"line":	43,
			"primary_score":	999993,
			"second_score":	6251
		}, {
			"file":	"libtiff/tif_flush.c",
			"line":	58,
			"primary_score":	999950,
			"second_score":	11856
		}, {
			"file":	"libtiff/tif_flush.c",
			"line":	60,
			"primary_score":	999985,
			"second_score":	11855
		}, {
			"file":	"libtiff/tif_flush.c",
			"line":	65,
			"primary_score":	999985,
			"second_score":	11854
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	51,
			"primary_score":	999945,
			"second_score":	5879
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	53,
			"primary_score":	999945,
			"second_score":	5878
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	56,
			"primary_score":	999945,
			"second_score":	5877
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	58,
			"primary_score":	999945,
			"second_score":	5876
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	62,
			"primary_score":	999950,
			"second_score":	15929
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	63,
			"primary_score":	999950,
			"second_score":	15928
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	64,
			"primary_score":	999950,
			"second_score":	15927
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	69,
			"primary_score":	999945,
			"second_score":	5875
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	85,
			"primary_score":	999945,
			"second_score":	5898
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	86,
			"primary_score":	999945,
			"second_score":	5897
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	87,
			"primary_score":	999945,
			"second_score":	5896
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	88,
			"primary_score":	999945,
			"second_score":	5895
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	93,
			"primary_score":	999945,
			"second_score":	5894
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	94,
			"primary_score":	999945,
			"second_score":	5893
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	95,
			"primary_score":	999945,
			"second_score":	5892
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	96,
			"primary_score":	999945,
			"second_score":	5891
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	97,
			"primary_score":	999945,
			"second_score":	5890
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	98,
			"primary_score":	999945,
			"second_score":	5889
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	99,
			"primary_score":	999945,
			"second_score":	5888
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	100,
			"primary_score":	999945,
			"second_score":	5887
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	101,
			"primary_score":	999945,
			"second_score":	5886
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	102,
			"primary_score":	999945,
			"second_score":	5885
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	103,
			"primary_score":	999945,
			"second_score":	5884
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	107,
			"primary_score":	999945,
			"second_score":	5883
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	108,
			"primary_score":	999945,
			"second_score":	5882
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	112,
			"primary_score":	999945,
			"second_score":	5881
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	116,
			"primary_score":	999945,
			"second_score":	5880
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	117,
			"primary_score":	999945,
			"second_score":	5874
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	119,
			"primary_score":	999945,
			"second_score":	5873
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	120,
			"primary_score":	999945,
			"second_score":	5871
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	124,
			"primary_score":	999945,
			"second_score":	5870
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	125,
			"primary_score":	999945,
			"second_score":	5868
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	126,
			"primary_score":	999945,
			"second_score":	5867
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	127,
			"primary_score":	999945,
			"second_score":	5866
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	128,
			"primary_score":	999945,
			"second_score":	5865
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	129,
			"primary_score":	999945,
			"second_score":	5864
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	130,
			"primary_score":	999945,
			"second_score":	5863
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	131,
			"primary_score":	999945,
			"second_score":	5862
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	132,
			"primary_score":	999945,
			"second_score":	5861
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	133,
			"primary_score":	999945,
			"second_score":	5860
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	138,
			"primary_score":	999945,
			"second_score":	5859
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	139,
			"primary_score":	999945,
			"second_score":	5858
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	140,
			"primary_score":	999945,
			"second_score":	5857
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	141,
			"primary_score":	999945,
			"second_score":	5856
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	142,
			"primary_score":	999945,
			"second_score":	5855
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	143,
			"primary_score":	999945,
			"second_score":	5854
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	144,
			"primary_score":	999945,
			"second_score":	5853
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	147,
			"primary_score":	999945,
			"second_score":	5852
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	148,
			"primary_score":	999945,
			"second_score":	5851
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	151,
			"primary_score":	999945,
			"second_score":	5850
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	157,
			"primary_score":	999945,
			"second_score":	5829
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	158,
			"primary_score":	999945,
			"second_score":	5828
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	159,
			"primary_score":	999945,
			"second_score":	5827
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	162,
			"primary_score":	999945,
			"second_score":	5826
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	163,
			"primary_score":	999945,
			"second_score":	5825
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	218,
			"primary_score":	999945,
			"second_score":	5824
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	271,
			"primary_score":	999945,
			"second_score":	5823
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	273,
			"primary_score":	999950,
			"second_score":	15872
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	285,
			"primary_score":	999950,
			"second_score":	15871
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	288,
			"primary_score":	999950,
			"second_score":	15870
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	290,
			"primary_score":	999950,
			"second_score":	15869
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	291,
			"primary_score":	999950,
			"second_score":	15868
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	292,
			"primary_score":	999950,
			"second_score":	15867
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	294,
			"primary_score":	999950,
			"second_score":	15866
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	316,
			"primary_score":	999950,
			"second_score":	15865
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	317,
			"primary_score":	999950,
			"second_score":	15861
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	325,
			"primary_score":	999950,
			"second_score":	15857
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	337,
			"primary_score":	999950,
			"second_score":	15856
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	339,
			"primary_score":	999950,
			"second_score":	12602
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	340,
			"primary_score":	999950,
			"second_score":	12601
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	341,
			"primary_score":	999950,
			"second_score":	12600
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	342,
			"primary_score":	999950,
			"second_score":	12599
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	343,
			"primary_score":	999950,
			"second_score":	12598
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	348,
			"primary_score":	999945,
			"second_score":	5819
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	369,
			"primary_score":	999945,
			"second_score":	5818
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	378,
			"primary_score":	999945,
			"second_score":	5817
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	380,
			"primary_score":	999945,
			"second_score":	5816
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	388,
			"primary_score":	999945,
			"second_score":	5815
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	390,
			"primary_score":	999945,
			"second_score":	5814
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	392,
			"primary_score":	999945,
			"second_score":	5813
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	426,
			"primary_score":	999945,
			"second_score":	5812
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	427,
			"primary_score":	999945,
			"second_score":	5811
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	428,
			"primary_score":	999945,
			"second_score":	5810
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	436,
			"primary_score":	999945,
			"second_score":	5809
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	442,
			"primary_score":	999945,
			"second_score":	5808
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	445,
			"primary_score":	999945,
			"second_score":	5807
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	453,
			"primary_score":	999945,
			"second_score":	5806
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	455,
			"primary_score":	999945,
			"second_score":	5805
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	456,
			"primary_score":	999945,
			"second_score":	5804
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	458,
			"primary_score":	999945,
			"second_score":	5792
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	459,
			"primary_score":	999945,
			"second_score":	5791
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	464,
			"primary_score":	999945,
			"second_score":	5790
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	465,
			"primary_score":	999945,
			"second_score":	455
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	466,
			"primary_score":	999945,
			"second_score":	454
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	467,
			"primary_score":	999945,
			"second_score":	453
		}, {
			"file":	"libtiff/tif_open.c",
			"line":	578,
			"primary_score":	999949,
			"second_score":	447
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	126,
			"primary_score":	999955,
			"second_score":	88
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	127,
			"primary_score":	999955,
			"second_score":	87
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	128,
			"primary_score":	999955,
			"second_score":	86
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	129,
			"primary_score":	999955,
			"second_score":	85
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	130,
			"primary_score":	999955,
			"second_score":	84
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	131,
			"primary_score":	999955,
			"second_score":	83
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	132,
			"primary_score":	999955,
			"second_score":	82
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	133,
			"primary_score":	999955,
			"second_score":	81
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	134,
			"primary_score":	999955,
			"second_score":	80
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	136,
			"primary_score":	999955,
			"second_score":	76
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	148,
			"primary_score":	999955,
			"second_score":	75
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	149,
			"primary_score":	999955,
			"second_score":	74
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	151,
			"primary_score":	999955,
			"second_score":	73
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	152,
			"primary_score":	999955,
			"second_score":	72
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	153,
			"primary_score":	999955,
			"second_score":	71
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	154,
			"primary_score":	999955,
			"second_score":	70
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	155,
			"primary_score":	999955,
			"second_score":	69
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	157,
			"primary_score":	999955,
			"second_score":	68
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	158,
			"primary_score":	999955,
			"second_score":	37
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	160,
			"primary_score":	999955,
			"second_score":	36
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	162,
			"primary_score":	999955,
			"second_score":	35
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	164,
			"primary_score":	999955,
			"second_score":	7
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	272,
			"primary_score":	999949,
			"second_score":	34
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	273,
			"primary_score":	999949,
			"second_score":	33
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	275,
			"primary_score":	999949,
			"second_score":	32
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	277,
			"primary_score":	999949,
			"second_score":	31
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	278,
			"primary_score":	999949,
			"second_score":	30
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	285,
			"primary_score":	999949,
			"second_score":	29
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	299,
			"primary_score":	999949,
			"second_score":	28
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	301,
			"primary_score":	999949,
			"second_score":	27
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	311,
			"primary_score":	999949,
			"second_score":	26
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	328,
			"primary_score":	999949,
			"second_score":	25
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	329,
			"primary_score":	999949,
			"second_score":	24
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	362,
			"primary_score":	999949,
			"second_score":	23
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	640,
			"primary_score":	999949,
			"second_score":	22
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	642,
			"primary_score":	999949,
			"second_score":	21
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	643,
			"primary_score":	999949,
			"second_score":	20
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	645,
			"primary_score":	999949,
			"second_score":	17
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	647,
			"primary_score":	999949,
			"second_score":	16
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	648,
			"primary_score":	999949,
			"second_score":	15
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	649,
			"primary_score":	999949,
			"second_score":	14
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	656,
			"primary_score":	999949,
			"second_score":	13
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	657,
			"primary_score":	999949,
			"second_score":	12
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	659,
			"primary_score":	999949,
			"second_score":	11
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	701,
			"primary_score":	999947,
			"second_score":	79
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	705,
			"primary_score":	999947,
			"second_score":	78
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	711,
			"primary_score":	999947,
			"second_score":	77
		}, {
			"file":	"libtiff/tif_read.c",
			"line":	717,
			"primary_score":	999948,
			"second_score":	11912
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	50,
			"primary_score":	999945,
			"second_score":	43
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	52,
			"primary_score":	999945,
			"second_score":	42
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	57,
			"primary_score":	999945,
			"second_score":	41
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	89,
			"primary_score":	999945,
			"second_score":	93
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	90,
			"primary_score":	999945,
			"second_score":	92
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	92,
			"primary_score":	999945,
			"second_score":	91
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	94,
			"primary_score":	999945,
			"second_score":	90
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	97,
			"primary_score":	999945,
			"second_score":	89
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	106,
			"primary_score":	999945,
			"second_score":	63
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	107,
			"primary_score":	999945,
			"second_score":	62
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	108,
			"primary_score":	999945,
			"second_score":	61
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	110,
			"primary_score":	999945,
			"second_score":	60
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	147,
			"primary_score":	999945,
			"second_score":	59
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	152,
			"primary_score":	999955,
			"second_score":	67
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	153,
			"primary_score":	999955,
			"second_score":	66
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	154,
			"primary_score":	999955,
			"second_score":	65
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	155,
			"primary_score":	999955,
			"second_score":	64
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	156,
			"primary_score":	999955,
			"second_score":	40
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	157,
			"primary_score":	999955,
			"second_score":	39
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	162,
			"primary_score":	999955,
			"second_score":	38
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	217,
			"primary_score":	999945,
			"second_score":	124
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	218,
			"primary_score":	999945,
			"second_score":	123
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	219,
			"primary_score":	999945,
			"second_score":	122
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	221,
			"primary_score":	999945,
			"second_score":	121
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	226,
			"primary_score":	999945,
			"second_score":	128
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	227,
			"primary_score":	999945,
			"second_score":	127
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	228,
			"primary_score":	999945,
			"second_score":	126
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	229,
			"primary_score":	999945,
			"second_score":	125
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	230,
			"primary_score":	999945,
			"second_score":	97
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	231,
			"primary_score":	999945,
			"second_score":	96
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	236,
			"primary_score":	999945,
			"second_score":	95
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	288,
			"primary_score":	999945,
			"second_score":	58
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	289,
			"primary_score":	999945,
			"second_score":	57
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	290,
			"primary_score":	999945,
			"second_score":	56
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	291,
			"primary_score":	999945,
			"second_score":	55
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	293,
			"primary_score":	999945,
			"second_score":	54
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	322,
			"primary_score":	999945,
			"second_score":	53
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	323,
			"primary_score":	999945,
			"second_score":	52
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	324,
			"primary_score":	999945,
			"second_score":	48
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	329,
			"primary_score":	999945,
			"second_score":	44
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	334,
			"primary_score":	999945,
			"second_score":	515
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	335,
			"primary_score":	999945,
			"second_score":	514
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	336,
			"primary_score":	999945,
			"second_score":	513
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	337,
			"primary_score":	999945,
			"second_score":	512
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	338,
			"primary_score":	999945,
			"second_score":	496
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	339,
			"primary_score":	999945,
			"second_score":	495
		}, {
			"file":	"libtiff/tif_strip.c",
			"line":	344,
			"primary_score":	999945,
			"second_score":	494
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	50,
			"primary_score":	999979,
			"second_score":	536
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	52,
			"primary_score":	999979,
			"second_score":	535
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	57,
			"primary_score":	999979,
			"second_score":	534
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	172,
			"primary_score":	999979,
			"second_score":	549
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	173,
			"primary_score":	999979,
			"second_score":	548
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	175,
			"primary_score":	999979,
			"second_score":	547
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	177,
			"primary_score":	999979,
			"second_score":	546
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	179,
			"primary_score":	999979,
			"second_score":	542
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	180,
			"primary_score":	999979,
			"second_score":	541
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	182,
			"primary_score":	999979,
			"second_score":	537
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	206,
			"primary_score":	999979,
			"second_score":	554
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	207,
			"primary_score":	999979,
			"second_score":	553
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	208,
			"primary_score":	999979,
			"second_score":	552
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	211,
			"primary_score":	999979,
			"second_score":	551
		}, {
			"file":	"libtiff/tif_tile.c",
			"line":	248,
			"primary_score":	999979,
			"second_score":	550
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	61,
			"primary_score":	999945,
			"second_score":	5822
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	62,
			"primary_score":	999945,
			"second_score":	5821
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	67,
			"primary_score":	999945,
			"second_score":	5820
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	73,
			"primary_score":	999951,
			"second_score":	10268
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	74,
			"primary_score":	999951,
			"second_score":	10267
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	79,
			"primary_score":	999951,
			"second_score":	10266
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	85,
			"primary_score":	999951,
			"second_score":	10272
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	86,
			"primary_score":	999951,
			"second_score":	10271
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	91,
			"primary_score":	999951,
			"second_score":	10270
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	97,
			"primary_score":	999946,
			"second_score":	5914
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	103,
			"primary_score":	999945,
			"second_score":	590
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	104,
			"primary_score":	999945,
			"second_score":	589
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	107,
			"primary_score":	999945,
			"second_score":	587
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	116,
			"primary_score":	999945,
			"second_score":	5803
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	117,
			"primary_score":	999945,
			"second_score":	5798
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	118,
			"primary_score":	999945,
			"second_score":	5797
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	119,
			"primary_score":	999945,
			"second_score":	5796
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	121,
			"primary_score":	999945,
			"second_score":	5795
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	122,
			"primary_score":	999945,
			"second_score":	5794
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	123,
			"primary_score":	999945,
			"second_score":	5793
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	156,
			"primary_score":	999945,
			"second_score":	5900
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	158,
			"primary_score":	999945,
			"second_score":	5899
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	163,
			"primary_score":	999945,
			"second_score":	452
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	164,
			"primary_score":	999945,
			"second_score":	451
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	165,
			"primary_score":	999945,
			"second_score":	450
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	174,
			"primary_score":	999945,
			"second_score":	5913
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	175,
			"primary_score":	999945,
			"second_score":	5912
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	176,
			"primary_score":	999945,
			"second_score":	5911
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	178,
			"primary_score":	999945,
			"second_score":	5910
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	179,
			"primary_score":	999945,
			"second_score":	5904
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	187,
			"primary_score":	999945,
			"second_score":	5903
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	188,
			"primary_score":	999945,
			"second_score":	5902
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	193,
			"primary_score":	999945,
			"second_score":	5901
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	194,
			"primary_score":	999945,
			"second_score":	449
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	196,
			"primary_score":	999945,
			"second_score":	448
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	259,
			"primary_score":	999944,
			"second_score":	94
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	265,
			"primary_score":	999944,
			"second_score":	568
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	271,
			"primary_score":	999945,
			"second_score":	4362
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	277,
			"primary_score":	999945,
			"second_score":	2377
		}, {
			"file":	"libtiff/tif_unix.c",
			"line":	283,
			"primary_score":	999945,
			"second_score":	1
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	184,
			"primary_score":	999963,
			"second_score":	12043
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	185,
			"primary_score":	999963,
			"second_score":	12042
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	186,
			"primary_score":	999963,
			"second_score":	12041
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	188,
			"primary_score":	999963,
			"second_score":	12040
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	199,
			"primary_score":	999963,
			"second_score":	11983
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	215,
			"primary_score":	999963,
			"second_score":	11982
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	217,
			"primary_score":	999963,
			"second_score":	11929
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	218,
			"primary_score":	999963,
			"second_score":	11928
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	219,
			"primary_score":	999963,
			"second_score":	11927
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	220,
			"primary_score":	999963,
			"second_score":	11926
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	222,
			"primary_score":	999963,
			"second_score":	11923
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	225,
			"primary_score":	999963,
			"second_score":	11922
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	226,
			"primary_score":	999963,
			"second_score":	11921
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	228,
			"primary_score":	999963,
			"second_score":	11920
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	237,
			"primary_score":	999963,
			"second_score":	11919
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	238,
			"primary_score":	999963,
			"second_score":	11918
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	239,
			"primary_score":	999963,
			"second_score":	11917
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	243,
			"primary_score":	999963,
			"second_score":	11913
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	245,
			"primary_score":	999963,
			"second_score":	11909
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	247,
			"primary_score":	999963,
			"second_score":	11893
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	249,
			"primary_score":	999963,
			"second_score":	11890
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	252,
			"primary_score":	999963,
			"second_score":	11889
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	255,
			"primary_score":	999963,
			"second_score":	11866
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	256,
			"primary_score":	999963,
			"second_score":	11865
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	257,
			"primary_score":	999963,
			"second_score":	11864
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	448,
			"primary_score":	999950,
			"second_score":	12033
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	450,
			"primary_score":	999950,
			"second_score":	12032
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	455,
			"primary_score":	999950,
			"second_score":	12031
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	458,
			"primary_score":	999950,
			"second_score":	12025
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	459,
			"primary_score":	999950,
			"second_score":	12024
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	461,
			"primary_score":	999950,
			"second_score":	12023
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	463,
			"primary_score":	999950,
			"second_score":	12021
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	465,
			"primary_score":	999950,
			"second_score":	12019
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	471,
			"primary_score":	999950,
			"second_score":	12018
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	472,
			"primary_score":	999950,
			"second_score":	12016
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	473,
			"primary_score":	999950,
			"second_score":	12014
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	474,
			"primary_score":	999950,
			"second_score":	12013
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	475,
			"primary_score":	999950,
			"second_score":	12012
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	488,
			"primary_score":	999950,
			"second_score":	12039
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	492,
			"primary_score":	999950,
			"second_score":	12038
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	509,
			"primary_score":	999950,
			"second_score":	12037
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	514,
			"primary_score":	999950,
			"second_score":	12036
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	521,
			"primary_score":	999973,
			"second_score":	12035
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	529,
			"primary_score":	999950,
			"second_score":	12034
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	535,
			"primary_score":	999950,
			"second_score":	12011
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	542,
			"primary_score":	999950,
			"second_score":	12010
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	543,
			"primary_score":	999950,
			"second_score":	12009
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	544,
			"primary_score":	999950,
			"second_score":	11986
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	546,
			"primary_score":	999950,
			"second_score":	11985
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	547,
			"primary_score":	999950,
			"second_score":	11984
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	556,
			"primary_score":	999950,
			"second_score":	11981
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	558,
			"primary_score":	999950,
			"second_score":	11980
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	565,
			"primary_score":	999950,
			"second_score":	11979
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	566,
			"primary_score":	999950,
			"second_score":	11978
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	571,
			"primary_score":	999950,
			"second_score":	11943
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	572,
			"primary_score":	999951,
			"second_score":	11942
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	573,
			"primary_score":	999950,
			"second_score":	11941
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	575,
			"primary_score":	999950,
			"second_score":	11940
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	576,
			"primary_score":	999950,
			"second_score":	11939
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	577,
			"primary_score":	999950,
			"second_score":	11937
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	581,
			"primary_score":	999950,
			"second_score":	11936
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	584,
			"primary_score":	999950,
			"second_score":	11935
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	585,
			"primary_score":	999950,
			"second_score":	11934
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	586,
			"primary_score":	999950,
			"second_score":	11933
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	587,
			"primary_score":	999950,
			"second_score":	11932
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	588,
			"primary_score":	999950,
			"second_score":	11931
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	589,
			"primary_score":	999950,
			"second_score":	11930
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	632,
			"primary_score":	999950,
			"second_score":	11888
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	633,
			"primary_score":	999950,
			"second_score":	11887
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	634,
			"primary_score":	999950,
			"second_score":	11886
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	636,
			"primary_score":	999950,
			"second_score":	11885
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	640,
			"primary_score":	999950,
			"second_score":	11884
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	641,
			"primary_score":	999950,
			"second_score":	11883
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	677,
			"primary_score":	999950,
			"second_score":	11882
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	678,
			"primary_score":	999950,
			"second_score":	11878
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	681,
			"primary_score":	999950,
			"second_score":	11877
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	682,
			"primary_score":	999950,
			"second_score":	11876
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	683,
			"primary_score":	999950,
			"second_score":	11875
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	684,
			"primary_score":	999950,
			"second_score":	11874
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	689,
			"primary_score":	999950,
			"second_score":	11873
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	694,
			"primary_score":	999950,
			"second_score":	11869
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	695,
			"primary_score":	999950,
			"second_score":	11868
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	696,
			"primary_score":	999950,
			"second_score":	11867
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	707,
			"primary_score":	999980,
			"second_score":	11853
		}, {
			"file":	"libtiff/tif_write.c",
			"line":	719,
			"primary_score":	999980,
			"second_score":	11852
		}],
	"mutation_info":	[{
			"file":	"libtiff/tif_read.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"libtiff/tif_read.c",
			"lines":	[{
					"line":	126,
					"switches":	[]
				}, {
					"line":	127,
					"switches":	[]
				}, {
					"line":	128,
					"switches":	[]
				}, {
					"line":	129,
					"switches":	[]
				}, {
					"line":	130,
					"switches":	[]
				}, {
					"line":	131,
					"switches":	[]
				}, {
					"line":	132,
					"switches":	[]
				}, {
					"line":	133,
					"switches":	[]
				}, {
					"line":	134,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	135,
							"begin_column":	0,
							"end_line":	135,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif, 0, sizeof (*(tif)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return -1;\n", "if (__is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 0;\n", "if (__is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.235334346942885]
								}, {
									"case":	2,
									"scores":	[-6.235334346942885]
								}, {
									"case":	3,
									"scores":	[-6.235334346942885]
								}, {
									"case":	4,
									"scores":	[-6.235334346942885]
								}, {
									"case":	5,
									"scores":	[-6.235334346942885]
								}, {
									"case":	6,
									"scores":	[-6.235334346942885]
								}, {
									"case":	7,
									"scores":	[-6.235334346942885]
								}, {
									"case":	8,
									"scores":	[-6.235334346942885]
								}, {
									"case":	9,
									"scores":	[-6.235334346942885]
								}, {
									"case":	10,
									"scores":	[-6.235334346942885]
								}, {
									"case":	11,
									"scores":	[-6.235334346942885]
								}, {
									"case":	12,
									"scores":	[-6.235334346942885]
								}, {
									"case":	13,
									"scores":	[-6.235334346942885]
								}, {
									"case":	14,
									"scores":	[-6.235334346942885]
								}, {
									"case":	15,
									"scores":	[-6.235334346942885]
								}, {
									"case":	16,
									"scores":	[-6.235334346942885]
								}, {
									"case":	17,
									"scores":	[-6.235334346942885]
								}, {
									"case":	18,
									"scores":	[-6.235334346942885]
								}, {
									"case":	19,
									"scores":	[-6.235334346942885]
								}, {
									"case":	20,
									"scores":	[-6.235334346942885]
								}, {
									"case":	21,
									"scores":	[-6.235334346942885]
								}, {
									"case":	22,
									"scores":	[-6.235334346942885]
								}, {
									"case":	23,
									"scores":	[-6.235334346942885]
								}, {
									"case":	24,
									"scores":	[-6.235334346942885]
								}, {
									"case":	25,
									"scores":	[-6.235334346942885]
								}, {
									"case":	26,
									"scores":	[-6.235334346942885]
								}, {
									"case":	27,
									"scores":	[-6.235334346942885]
								}, {
									"case":	28,
									"scores":	[-6.235334346942885]
								}, {
									"case":	29,
									"scores":	[-6.235334346942885]
								}, {
									"case":	30,
									"scores":	[-6.235334346942885]
								}, {
									"case":	31,
									"scores":	[-6.235334346942885]
								}, {
									"case":	32,
									"scores":	[-6.235334346942885]
								}, {
									"case":	33,
									"scores":	[-6.235334346942885]
								}, {
									"case":	34,
									"scores":	[-6.235334346942885]
								}, {
									"case":	35,
									"scores":	[-6.235334346942885]
								}, {
									"case":	36,
									"scores":	[-6.235334346942885]
								}, {
									"case":	37,
									"scores":	[-6.235334346942885]
								}, {
									"case":	38,
									"scores":	[-6.235334346942885]
								}, {
									"case":	39,
									"scores":	[-6.235334346942885]
								}, {
									"case":	40,
									"scores":	[-6.235334346942885]
								}, {
									"case":	41,
									"scores":	[-6.235334346942885]
								}, {
									"case":	42,
									"scores":	[-6.235334346942885]
								}, {
									"case":	43,
									"scores":	[-6.235334346942885]
								}, {
									"case":	44,
									"scores":	[-6.235334346942885]
								}, {
									"case":	45,
									"scores":	[-6.235334346942885]
								}, {
									"case":	46,
									"scores":	[-6.235334346942885]
								}, {
									"case":	47,
									"scores":	[-6.235334346942885]
								}, {
									"case":	48,
									"scores":	[-6.235334346942885]
								}, {
									"case":	49,
									"scores":	[-6.235334346942885]
								}, {
									"case":	50,
									"scores":	[-6.235334346942885]
								}, {
									"case":	51,
									"scores":	[-6.235334346942885]
								}, {
									"case":	52,
									"scores":	[-6.235334346942885]
								}, {
									"case":	53,
									"scores":	[-6.235334346942885]
								}, {
									"case":	54,
									"scores":	[-6.235334346942885]
								}, {
									"case":	55,
									"scores":	[-6.235334346942885]
								}, {
									"case":	56,
									"scores":	[-6.235334346942885]
								}, {
									"case":	57,
									"scores":	[-6.235334346942885]
								}, {
									"case":	58,
									"scores":	[-6.235334346942885]
								}, {
									"case":	59,
									"scores":	[-6.235334346942885]
								}, {
									"case":	60,
									"scores":	[-6.235334346942885]
								}, {
									"case":	61,
									"scores":	[-6.235334346942885]
								}, {
									"case":	62,
									"scores":	[-6.235334346942885]
								}, {
									"case":	63,
									"scores":	[-6.235334346942885]
								}, {
									"case":	64,
									"scores":	[-6.235334346942885]
								}, {
									"case":	65,
									"scores":	[-6.235334346942885]
								}, {
									"case":	66,
									"scores":	[-6.235334346942885]
								}, {
									"case":	67,
									"scores":	[-6.235334346942885]
								}, {
									"case":	68,
									"scores":	[-6.235334346942885]
								}, {
									"case":	69,
									"scores":	[-6.235334346942885]
								}, {
									"case":	70,
									"scores":	[-6.235334346942885]
								}, {
									"case":	71,
									"scores":	[-6.235334346942885]
								}, {
									"case":	72,
									"scores":	[-6.235334346942885]
								}, {
									"case":	73,
									"scores":	[-6.235334346942885]
								}, {
									"case":	74,
									"scores":	[-6.235334346942885]
								}, {
									"case":	75,
									"scores":	[-6.235334346942885]
								}, {
									"case":	76,
									"scores":	[-6.235334346942885]
								}, {
									"case":	77,
									"scores":	[-6.235334346942885]
								}, {
									"case":	78,
									"scores":	[-6.235334346942885]
								}, {
									"case":	79,
									"scores":	[-6.235334346942885]
								}, {
									"case":	80,
									"scores":	[-6.235334346942885]
								}, {
									"case":	81,
									"scores":	[-6.235334346942885]
								}, {
									"case":	82,
									"scores":	[-6.235334346942885]
								}, {
									"case":	83,
									"scores":	[-6.235334346942885]
								}, {
									"case":	84,
									"scores":	[-6.235334346942885]
								}, {
									"case":	85,
									"scores":	[-6.235334346942885]
								}, {
									"case":	86,
									"scores":	[-6.235334346942885]
								}, {
									"case":	87,
									"scores":	[-6.235334346942885]
								}, {
									"case":	88,
									"scores":	[-6.235334346942885]
								}, {
									"case":	89,
									"scores":	[-6.235334346942885]
								}, {
									"case":	90,
									"scores":	[-6.235334346942885]
								}, {
									"case":	91,
									"scores":	[-6.235334346942885]
								}, {
									"case":	92,
									"scores":	[-6.235334346942885]
								}, {
									"case":	93,
									"scores":	[-6.235334346942885]
								}, {
									"case":	94,
									"scores":	[-6.235334346942885]
								}, {
									"case":	95,
									"scores":	[-6.235334346942885]
								}, {
									"case":	96,
									"scores":	[-6.235334346942885]
								}, {
									"case":	97,
									"scores":	[-6.235334346942885]
								}, {
									"case":	98,
									"scores":	[-6.235334346942885]
								}, {
									"case":	99,
									"scores":	[-6.235334346942885]
								}, {
									"case":	100,
									"scores":	[-6.235334346942885]
								}, {
									"case":	101,
									"scores":	[-6.235334346942885]
								}, {
									"case":	102,
									"scores":	[-6.235334346942885]
								}, {
									"case":	103,
									"scores":	[-6.235334346942885]
								}, {
									"case":	104,
									"scores":	[-6.235334346942885]
								}, {
									"case":	105,
									"scores":	[-6.235334346942885]
								}, {
									"case":	106,
									"scores":	[-6.235334346942885]
								}, {
									"case":	107,
									"scores":	[-6.235334346942885]
								}, {
									"case":	108,
									"scores":	[-6.235334346942885]
								}, {
									"case":	109,
									"scores":	[-6.235334346942885]
								}, {
									"case":	110,
									"scores":	[-6.235334346942885]
								}, {
									"case":	111,
									"scores":	[-6.235334346942885]
								}, {
									"case":	112,
									"scores":	[-6.235334346942885]
								}, {
									"case":	113,
									"scores":	[-6.235334346942885]
								}, {
									"case":	114,
									"scores":	[-6.235334346942885]
								}, {
									"case":	115,
									"scores":	[-6.235334346942885]
								}, {
									"case":	116,
									"scores":	[-6.235334346942885]
								}, {
									"case":	117,
									"scores":	[-6.235334346942885]
								}, {
									"case":	118,
									"scores":	[-6.235334346942885]
								}, {
									"case":	119,
									"scores":	[-6.235334346942885]
								}, {
									"case":	120,
									"scores":	[-6.235334346942885]
								}, {
									"case":	121,
									"scores":	[-6.235334346942885]
								}, {
									"case":	122,
									"scores":	[-6.235334346942885]
								}, {
									"case":	123,
									"scores":	[-6.235334346942885]
								}, {
									"case":	124,
									"scores":	[-6.235334346942885]
								}, {
									"case":	125,
									"scores":	[-6.235334346942885]
								}, {
									"case":	126,
									"scores":	[-6.235334346942885]
								}, {
									"case":	127,
									"scores":	[-6.235334346942885]
								}, {
									"case":	128,
									"scores":	[-6.235334346942885]
								}, {
									"case":	129,
									"scores":	[-6.235334346942885]
								}, {
									"case":	130,
									"scores":	[-6.235334346942885]
								}, {
									"case":	131,
									"scores":	[-6.235334346942885]
								}, {
									"case":	132,
									"scores":	[-6.235334346942885]
								}, {
									"case":	133,
									"scores":	[-6.235334346942885]
								}, {
									"case":	134,
									"scores":	[-6.235334346942885]
								}, {
									"case":	135,
									"scores":	[-6.235334346942885]
								}, {
									"case":	136,
									"scores":	[-6.235334346942885]
								}, {
									"case":	137,
									"scores":	[-6.235334346942885]
								}, {
									"case":	138,
									"scores":	[-6.235334346942885]
								}, {
									"case":	139,
									"scores":	[-6.235334346942885]
								}, {
									"case":	140,
									"scores":	[-6.235334346942885]
								}, {
									"case":	141,
									"scores":	[-6.235334346942885]
								}, {
									"case":	142,
									"scores":	[-6.235334346942885]
								}, {
									"case":	143,
									"scores":	[-6.235334346942885]
								}, {
									"case":	144,
									"scores":	[-6.235334346942885]
								}, {
									"case":	145,
									"scores":	[-6.235334346942885]
								}, {
									"case":	146,
									"scores":	[-6.235334346942885]
								}, {
									"case":	147,
									"scores":	[-6.235334346942885]
								}, {
									"case":	148,
									"scores":	[-6.235334346942885]
								}, {
									"case":	149,
									"scores":	[-6.235334346942885]
								}, {
									"case":	150,
									"scores":	[-6.235334346942885]
								}, {
									"case":	151,
									"scores":	[-6.235334346942885]
								}, {
									"case":	152,
									"scores":	[-6.235334346942885]
								}, {
									"case":	153,
									"scores":	[-6.235334346942885]
								}, {
									"case":	154,
									"scores":	[-6.235334346942885]
								}, {
									"case":	155,
									"scores":	[-6.235334346942885]
								}, {
									"case":	156,
									"scores":	[-6.235334346942885]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-9.7988636812428851, -12.284847416942885, -11.692004741242885, -11.710053166942885, -11.966922563942886, -11.106882966942885, -11.106882966942885, -11.106882966942885, -11.106882966942885, -11.106882966942885, -11.397969166942884, -11.404670866942885, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.798745066942885, -11.798745066942885, -11.798745066942885, -11.836169466942884]
								}, {
									"case":	227,
									"scores":	[-7.7804176812428851, -10.266401416942884, -9.6735587412428856, -9.6916071669428838, -9.9484765639428847, -9.0884369669428846, -9.0884369669428846, -9.0884369669428846, -9.0884369669428846, -9.0884369669428846, -9.3795231669428851, -9.386224866942884, -9.8177234669428852, -9.8177234669428852, -9.8244251669428841, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8244251669428841, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8244251669428841, -9.8177234669428852, -9.8177234669428852, -9.8244251669428841, -9.8177234669428852, -9.8244251669428841, -9.8177234669428852, -9.8244251669428841, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8177234669428852, -9.8244251669428841, -9.8177234669428852, -9.7802990669428844, -9.7802990669428844, -9.7802990669428844, -9.8177234669428852]
								}, {
									"case":	228,
									"scores":	[-9.7988636812428851, -12.284847416942885, -11.692004741242885, -11.710053166942885, -11.966922563942886, -11.106882966942885, -11.106882966942885, -11.106882966942885, -11.106882966942885, -11.106882966942885, -11.397969166942884, -11.404670866942885, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.836169466942884, -11.842871166942885, -11.836169466942884, -11.798745066942885, -11.798745066942885, -11.798745066942885, -11.836169466942884]
								}]
						}, {
							"switch":	1,
							"types":	[[50], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], []],
							"begin_line":	135,
							"begin_column":	2,
							"end_line":	136,
							"end_column":	24,
							"patch_codes":	["if (__is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if ((!TIFFCheckRead(tif, 0)) || __is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if (!TIFFCheckRead(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFFillStrip(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFFillTile(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFGetField(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFGetFieldDefaulted(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitCCITTFax3(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitCCITTFax4(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitCCITTRLE(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitCCITTRLEW(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitDumpMode(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitJPEG(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitLZW(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitNeXT(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitOJPEG(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitPackBits(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitPixarLog(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitSGILog(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitThunderScan(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFInitZIP(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFRGBAImageOK(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFReadEXIFDirectory(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFSetCompressionScheme(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFSetDirectory(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFSetField(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFSetFileno(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFSetMode(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFSetSubDirectory(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFStartStrip(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFStartTile(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!TIFFUnlinkDirectory(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!_TIFFNoPreCode(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!_TIFFNoSeek(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!_TIFFgetMode(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!__overflow(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!creat(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!fgetpos(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!fprintf(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!fputs(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!fsetpos(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!open(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!printf(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!rename(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!sprintf(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!strcasecmp(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!strcmp(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!strcoll(tif, 0))\n    return ((tmsize_t)(-1));\n", "if (!vprintf(tif, 0))\n    return ((tmsize_t)(-1));\n", "if ((!TIFFCheckRead(tif, 0)) && !__is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9336574407281457, -3.0364786254281455, -4.5399211007281455, -4.2666695254281457, -4.2935349974281456, -3.742790325428146, -3.742790325428146, -3.742790325428146, -3.742790325428146, -3.742790325428146, -4.053409625428146, -4.4021988254281457, -4.5648170254281455, -4.5648170254281455, -4.9136062254281461, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.9136062254281461, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.9136062254281461, -4.5648170254281455, -4.5648170254281455, -4.9136062254281461, -4.5648170254281455, -4.9136062254281461, -4.5648170254281455, -4.9136062254281461, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.5648170254281455, -4.9136062254281461, -4.5648170254281455, -5.3677691254281461, -5.3677691254281461, -5.3677691254281461, -4.5648170254281455]
								}, {
									"case":	2,
									"scores":	[-5.4309100005281463, -3.5337311852281457, -5.0371736605281461, -4.7639220852281454, -4.7907875572281462, -4.2400428852281458, -4.2400428852281458, -4.2400428852281458, -4.2400428852281458, -4.2400428852281458, -4.5506621852281457, -4.8994513852281454, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.8650216852281458, -5.8650216852281458, -5.8650216852281458, -5.0620695852281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-5.4309100005281463, -3.5337311852281457, -5.0371736605281461, -4.7639220852281454, -4.7907875572281462, -4.2400428852281458, -4.2400428852281458, -4.2400428852281458, -4.2400428852281458, -4.2400428852281458, -4.5506621852281457, -4.8994513852281454, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.0620695852281461, -5.4108587852281458, -5.0620695852281461, -5.8650216852281458, -5.8650216852281458, -5.8650216852281458, -5.0620695852281461]
								}]
						}, {
							"switch":	2,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	135,
							"begin_column":	2,
							"end_line":	136,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(buf), sizeof (buf), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    if (!TIFFCheckRead(tif, 0))\n        return ((tmsize_t)(-1));\n", "if (!__is_neg(\"\", \"L135\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(td), sizeof (td), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(buf), sizeof (buf), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)) && (!TIFFCheckRead(tif, 0)))\n    return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.3802197822428859, -6.4830409669428848, -7.9864834422428856, -7.713231866942885, -7.7400973389428849, -7.1893526669428853, -7.1893526669428853, -7.1893526669428853, -7.1893526669428853, -7.1893526669428853, -7.4999719669428853, -8.0113793669428848, -7.8487611669428849, -8.0113793669428848, -8.3601685669428853, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.3601685669428853, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.3601685669428853, -8.0113793669428848, -8.0113793669428848, -8.3601685669428853, -8.0113793669428848, -8.3601685669428853, -8.0113793669428848, -8.3601685669428853, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.0113793669428848, -8.3601685669428853, -8.0113793669428848, -8.8143314669428854, -8.8143314669428854, -8.8143314669428854, -8.0113793669428848]
								}, {
									"case":	2,
									"scores":	[-9.061034642042884, -7.1638558267428847, -8.6672983020428855, -8.3940467267428858, -8.4209121987428848, -7.8701675267428852, -7.8701675267428852, -7.8701675267428852, -7.8701675267428852, -7.8701675267428852, -8.1807868267428852, -8.529576026742884, -8.6921942267428847, -8.6921942267428847, -9.0409834267428852, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -9.0409834267428852, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -9.0409834267428852, -8.6921942267428847, -8.6921942267428847, -9.0409834267428852, -8.6921942267428847, -9.0409834267428852, -8.6921942267428847, -9.0409834267428852, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -8.6921942267428847, -9.0409834267428852, -8.6921942267428847, -9.4951463267428853, -9.4951463267428853, -9.4951463267428853, -8.6921942267428847]
								}]
						}]
				}, {
					"line":	136,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [227, 228, 229], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157], [], [], [], [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], [], [], [], [], [], []],
							"begin_line":	137,
							"begin_column":	0,
							"end_line":	137,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td, 0, sizeof (*(td)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif, 0, sizeof (*(tif)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	2,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	3,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	4,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	5,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	6,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	7,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	8,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	9,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	10,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	11,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	12,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	13,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	14,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	15,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	16,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	17,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	18,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	19,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	20,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	21,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	22,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	23,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	24,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	25,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	26,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	27,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	28,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	29,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	30,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	31,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	32,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	33,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	34,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	35,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	36,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	37,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	38,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	39,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	40,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	41,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	42,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	43,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	44,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	45,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	46,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	47,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	48,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	49,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	50,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	51,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	52,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	53,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	54,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	55,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	56,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	57,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	58,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	59,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	60,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	61,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	62,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	63,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	64,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	65,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	66,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	67,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	68,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	69,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	70,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	71,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	72,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	73,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	74,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	75,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	76,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	77,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	78,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	79,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	80,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	81,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	82,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	83,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	84,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	85,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	86,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	87,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	88,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	89,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	90,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	91,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	92,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	93,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	94,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	95,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	96,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	97,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	98,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	99,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	100,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	101,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	102,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	103,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	104,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	105,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	106,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	107,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	108,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	109,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	110,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	111,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	112,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	113,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	114,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	115,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	116,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	117,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	118,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	119,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	120,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	121,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	122,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	123,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	124,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	125,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	126,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	127,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	128,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	129,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	130,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	131,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	132,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	133,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	134,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	135,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	136,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	137,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	138,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	139,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	140,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	141,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	142,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	143,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	144,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	145,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	146,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	147,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	148,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	149,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	150,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	151,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	152,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	153,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	154,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	155,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	156,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	157,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	158,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	159,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	160,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	161,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	162,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	163,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	164,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	165,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	166,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	167,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	168,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	169,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	170,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	171,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	172,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	173,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	174,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	175,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	176,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	177,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	178,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	179,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	180,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	181,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	182,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	183,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	184,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	185,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	186,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	187,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	188,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	189,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	190,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	191,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	192,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	193,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	194,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	195,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	196,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	197,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	198,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	199,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	200,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	201,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	202,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	203,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	204,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	205,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	206,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	207,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	208,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	209,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	210,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	211,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	212,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	213,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	214,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	215,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	216,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	217,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	218,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	219,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	220,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	221,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	222,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	223,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	224,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	225,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	226,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	227,
									"scores":	[-12.097764429625364, -11.021695733925366, -12.535964729625366, -11.583882573925365, -12.867652353625367, -12.970107719625366, -12.603668999625366, -12.598603606625366, -12.087846259625366, -12.087846259625366, -12.087846259625366, -12.087846259625366, -12.378932459625366, -12.385634159625365, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.182056759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.823834459625367, -12.817132759625366, -12.823834459625367, -12.823834459625367, -12.817132759625366, -12.817132759625366, -12.823834459625367, -12.817132759625366, -12.182056759625366, -12.823834459625367, -12.817132759625366, -12.779708359625367]
								}, {
									"case":	228,
									"scores":	[-10.079318429625365, -9.0032497339253652, -10.517518729625365, -9.5654365739253642, -10.849206353625366, -10.951661719625367, -10.585222999625366, -10.580157606625367, -10.069400259625366, -10.069400259625366, -10.069400259625366, -10.069400259625366, -10.360486459625367, -10.367188159625366, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.163610759625366, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.798686759625365, -10.805388459625366, -10.798686759625365, -10.805388459625366, -10.805388459625366, -10.798686759625365, -10.798686759625365, -10.805388459625366, -10.798686759625365, -10.163610759625366, -10.805388459625366, -10.798686759625365, -10.761262359625366]
								}, {
									"case":	229,
									"scores":	[-12.097764429625364, -11.021695733925366, -12.535964729625366, -11.583882573925365, -12.867652353625367, -12.970107719625366, -12.603668999625366, -12.598603606625366, -12.087846259625366, -12.087846259625366, -12.087846259625366, -12.087846259625366, -12.378932459625366, -12.385634159625365, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.182056759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.817132759625366, -12.823834459625367, -12.817132759625366, -12.823834459625367, -12.823834459625367, -12.817132759625366, -12.817132759625366, -12.823834459625367, -12.817132759625366, -12.182056759625366, -12.823834459625367, -12.817132759625366, -12.779708359625367]
								}]
						}, {
							"switch":	4,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	137,
							"begin_column":	2,
							"end_line":	143,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues))) {\n    TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips);\n    return ((tmsize_t)(-1));\n}\n", "if ((strip >= td->td_nstrips) || __is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues))) {\n    TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips);\n    return ((tmsize_t)(-1));\n}\n", "if ((strip >= td->td_nstrips) && !__is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues))) {\n    TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips);\n    return ((tmsize_t)(-1));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.99337915642814645, -2.5801260317281471, -1.5047865564281468, -3.0916064054281467, -3.5186767314281462, -3.099845916428146, -3.8346258614281457, -2.8244565284281453, -2.7918908564281457, -2.7918908564281457, -2.7918908564281457, -2.7918908564281457, -3.1025101564281456, -3.4512993564281458, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.2543492714281457, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.6139175564281456, -3.9627067564281457, -3.6139175564281456, -3.9627067564281457, -3.9627067564281457, -3.6139175564281456, -3.6139175564281456, -3.9627067564281457, -3.6139175564281456, -3.2543492714281457, -3.9627067564281457, -3.6139175564281456, -4.4168696564281458]
								}, {
									"case":	2,
									"scores":	[-1.0709417794281459, -2.6576886547281462, -1.5823491794281463, -3.1691690284281457, -3.5962393544281461, -3.1774085394281464, -3.912188484428146, -2.9020191514281457, -2.8694534794281461, -2.8694534794281461, -2.8694534794281461, -2.8694534794281461, -3.180072779428146, -3.5288619794281462, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.3319118944281461, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -4.0402693794281461, -3.6914801794281464, -4.0402693794281461, -4.0402693794281461, -3.6914801794281464, -3.6914801794281464, -4.0402693794281461, -3.6914801794281464, -3.3319118944281461, -4.0402693794281461, -3.6914801794281464, -4.4944322794281462]
								}, {
									"case":	3,
									"scores":	[-1.0709417794281459, -2.6576886547281462, -1.5823491794281463, -3.1691690284281457, -3.5962393544281461, -3.1774085394281464, -3.912188484428146, -2.9020191514281457, -2.8694534794281461, -2.8694534794281461, -2.8694534794281461, -2.8694534794281461, -3.180072779428146, -3.5288619794281462, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.3319118944281461, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -3.6914801794281464, -4.0402693794281461, -3.6914801794281464, -4.0402693794281461, -4.0402693794281461, -3.6914801794281464, -3.6914801794281464, -4.0402693794281461, -3.6914801794281464, -3.3319118944281461, -4.0402693794281461, -3.6914801794281464, -4.4944322794281462]
								}]
						}, {
							"switch":	5,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	137,
							"begin_column":	2,
							"end_line":	143,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    if (strip >= td->td_nstrips) {\n        TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips);\n        return ((tmsize_t)(-1));\n    }\n", "if (!__is_neg(\"\", \"L137\", 45, &(strip), sizeof (strip), &(td), sizeof (td), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)) && (strip >= td->td_nstrips)) {\n    TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips);\n    return ((tmsize_t)(-1));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6518952596253653, -7.2386421349253656, -6.1633026596253657, -7.750122508625366, -8.1771928346253659, -7.7583620196253653, -8.4931419646253659, -7.4829726316253655, -7.450406959625365, -7.450406959625365, -7.450406959625365, -7.450406959625365, -7.7610262596253659, -8.1098154596253664, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -7.9128653746253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.2724336596253654, -8.6212228596253659, -8.2724336596253654, -8.6212228596253659, -8.6212228596253659, -8.2724336596253654, -8.2724336596253654, -8.6212228596253659, -8.2724336596253654, -7.9128653746253654, -8.6212228596253659, -8.2724336596253654, -9.075385759625366]
								}, {
									"case":	2,
									"scores":	[-4.3726930796253658, -5.959439954925366, -4.8841004796253662, -6.4709203286253656, -6.8979906546253655, -6.4791598396253658, -7.2139397846253654, -6.203770451625366, -6.1712047796253664, -6.1712047796253664, -6.1712047796253664, -6.1712047796253664, -6.4818240796253663, -6.830613279625366, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.6336631946253659, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -6.9932314796253658, -7.3420206796253655, -6.9932314796253658, -7.3420206796253655, -7.3420206796253655, -6.9932314796253658, -6.9932314796253658, -7.3420206796253655, -6.9932314796253658, -6.6336631946253659, -7.3420206796253655, -6.9932314796253658, -7.7961835796253656]
								}]
						}]
				}, {
					"line":	148,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	149,
							"begin_column":	0,
							"end_line":	149,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td, 0, sizeof (*(td)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L149\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L149\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L149\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.194928932307846]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-6.194928932307846]
								}, {
									"case":	6,
									"scores":	[-6.194928932307846]
								}, {
									"case":	7,
									"scores":	[-6.194928932307846]
								}, {
									"case":	8,
									"scores":	[-6.194928932307846]
								}, {
									"case":	9,
									"scores":	[-6.194928932307846]
								}, {
									"case":	10,
									"scores":	[-6.194928932307846]
								}, {
									"case":	11,
									"scores":	[-6.194928932307846]
								}, {
									"case":	12,
									"scores":	[-6.194928932307846]
								}, {
									"case":	13,
									"scores":	[-6.194928932307846]
								}, {
									"case":	14,
									"scores":	[-6.194928932307846]
								}, {
									"case":	15,
									"scores":	[-6.194928932307846]
								}, {
									"case":	16,
									"scores":	[-6.194928932307846]
								}, {
									"case":	17,
									"scores":	[-6.194928932307846]
								}, {
									"case":	18,
									"scores":	[-6.194928932307846]
								}, {
									"case":	19,
									"scores":	[-6.194928932307846]
								}, {
									"case":	20,
									"scores":	[-6.194928932307846]
								}, {
									"case":	21,
									"scores":	[-6.194928932307846]
								}, {
									"case":	22,
									"scores":	[-6.194928932307846]
								}, {
									"case":	23,
									"scores":	[-6.194928932307846]
								}, {
									"case":	24,
									"scores":	[-6.194928932307846]
								}, {
									"case":	25,
									"scores":	[-6.194928932307846]
								}, {
									"case":	26,
									"scores":	[-6.194928932307846]
								}, {
									"case":	27,
									"scores":	[-6.194928932307846]
								}, {
									"case":	28,
									"scores":	[-6.194928932307846]
								}, {
									"case":	29,
									"scores":	[-6.194928932307846]
								}, {
									"case":	30,
									"scores":	[-6.194928932307846]
								}, {
									"case":	31,
									"scores":	[-6.194928932307846]
								}, {
									"case":	32,
									"scores":	[-6.194928932307846]
								}, {
									"case":	33,
									"scores":	[-6.194928932307846]
								}, {
									"case":	34,
									"scores":	[-6.194928932307846]
								}, {
									"case":	35,
									"scores":	[-6.194928932307846]
								}, {
									"case":	36,
									"scores":	[-6.194928932307846]
								}, {
									"case":	37,
									"scores":	[-6.194928932307846]
								}, {
									"case":	38,
									"scores":	[-6.194928932307846]
								}, {
									"case":	39,
									"scores":	[-6.194928932307846]
								}, {
									"case":	40,
									"scores":	[-6.194928932307846]
								}, {
									"case":	41,
									"scores":	[-6.194928932307846]
								}, {
									"case":	42,
									"scores":	[-6.194928932307846]
								}, {
									"case":	43,
									"scores":	[-6.194928932307846]
								}, {
									"case":	44,
									"scores":	[-6.194928932307846]
								}, {
									"case":	45,
									"scores":	[-6.194928932307846]
								}, {
									"case":	46,
									"scores":	[-6.194928932307846]
								}, {
									"case":	47,
									"scores":	[-6.194928932307846]
								}, {
									"case":	48,
									"scores":	[-6.194928932307846]
								}, {
									"case":	49,
									"scores":	[-6.194928932307846]
								}, {
									"case":	50,
									"scores":	[-6.194928932307846]
								}, {
									"case":	51,
									"scores":	[-6.194928932307846]
								}, {
									"case":	52,
									"scores":	[-6.194928932307846]
								}, {
									"case":	53,
									"scores":	[-6.194928932307846]
								}, {
									"case":	54,
									"scores":	[-6.194928932307846]
								}, {
									"case":	55,
									"scores":	[-6.194928932307846]
								}, {
									"case":	56,
									"scores":	[-6.194928932307846]
								}, {
									"case":	57,
									"scores":	[-6.194928932307846]
								}, {
									"case":	58,
									"scores":	[-6.194928932307846]
								}, {
									"case":	59,
									"scores":	[-6.194928932307846]
								}, {
									"case":	60,
									"scores":	[-6.194928932307846]
								}, {
									"case":	61,
									"scores":	[-6.194928932307846]
								}, {
									"case":	62,
									"scores":	[-6.194928932307846]
								}, {
									"case":	63,
									"scores":	[-6.194928932307846]
								}, {
									"case":	64,
									"scores":	[-6.194928932307846]
								}, {
									"case":	65,
									"scores":	[-6.194928932307846]
								}, {
									"case":	66,
									"scores":	[-6.194928932307846]
								}, {
									"case":	67,
									"scores":	[-6.194928932307846]
								}, {
									"case":	68,
									"scores":	[-6.194928932307846]
								}, {
									"case":	69,
									"scores":	[-6.194928932307846]
								}, {
									"case":	70,
									"scores":	[-6.194928932307846]
								}, {
									"case":	71,
									"scores":	[-6.194928932307846]
								}, {
									"case":	72,
									"scores":	[-6.194928932307846]
								}, {
									"case":	73,
									"scores":	[-6.194928932307846]
								}, {
									"case":	74,
									"scores":	[-6.194928932307846]
								}, {
									"case":	75,
									"scores":	[-6.194928932307846]
								}, {
									"case":	76,
									"scores":	[-6.194928932307846]
								}, {
									"case":	77,
									"scores":	[-6.194928932307846]
								}, {
									"case":	78,
									"scores":	[-6.194928932307846]
								}, {
									"case":	79,
									"scores":	[-6.194928932307846]
								}, {
									"case":	80,
									"scores":	[-6.194928932307846]
								}, {
									"case":	81,
									"scores":	[-6.194928932307846]
								}, {
									"case":	82,
									"scores":	[-6.194928932307846]
								}, {
									"case":	83,
									"scores":	[-6.194928932307846]
								}, {
									"case":	84,
									"scores":	[-6.194928932307846]
								}, {
									"case":	85,
									"scores":	[-6.194928932307846]
								}, {
									"case":	86,
									"scores":	[-6.194928932307846]
								}, {
									"case":	87,
									"scores":	[-6.194928932307846]
								}, {
									"case":	88,
									"scores":	[-6.194928932307846]
								}, {
									"case":	89,
									"scores":	[-6.194928932307846]
								}, {
									"case":	90,
									"scores":	[-6.194928932307846]
								}, {
									"case":	91,
									"scores":	[-6.194928932307846]
								}, {
									"case":	92,
									"scores":	[-6.194928932307846]
								}, {
									"case":	93,
									"scores":	[-6.194928932307846]
								}, {
									"case":	94,
									"scores":	[-6.194928932307846]
								}, {
									"case":	95,
									"scores":	[-6.194928932307846]
								}, {
									"case":	96,
									"scores":	[-6.194928932307846]
								}, {
									"case":	97,
									"scores":	[-6.194928932307846]
								}, {
									"case":	98,
									"scores":	[-6.194928932307846]
								}, {
									"case":	99,
									"scores":	[-6.194928932307846]
								}, {
									"case":	100,
									"scores":	[-6.194928932307846]
								}, {
									"case":	101,
									"scores":	[-6.194928932307846]
								}, {
									"case":	102,
									"scores":	[-6.194928932307846]
								}, {
									"case":	103,
									"scores":	[-6.194928932307846]
								}, {
									"case":	104,
									"scores":	[-6.194928932307846]
								}, {
									"case":	105,
									"scores":	[-6.194928932307846]
								}, {
									"case":	106,
									"scores":	[-6.194928932307846]
								}, {
									"case":	107,
									"scores":	[-6.194928932307846]
								}, {
									"case":	108,
									"scores":	[-6.194928932307846]
								}, {
									"case":	109,
									"scores":	[-6.194928932307846]
								}, {
									"case":	110,
									"scores":	[-6.194928932307846]
								}, {
									"case":	111,
									"scores":	[-6.194928932307846]
								}, {
									"case":	112,
									"scores":	[-6.194928932307846]
								}, {
									"case":	113,
									"scores":	[-6.194928932307846]
								}, {
									"case":	114,
									"scores":	[-6.194928932307846]
								}, {
									"case":	115,
									"scores":	[-6.194928932307846]
								}, {
									"case":	116,
									"scores":	[-6.194928932307846]
								}, {
									"case":	117,
									"scores":	[-6.194928932307846]
								}, {
									"case":	118,
									"scores":	[-6.194928932307846]
								}, {
									"case":	119,
									"scores":	[-6.194928932307846]
								}, {
									"case":	120,
									"scores":	[-6.194928932307846]
								}, {
									"case":	121,
									"scores":	[-6.194928932307846]
								}, {
									"case":	122,
									"scores":	[-6.194928932307846]
								}, {
									"case":	123,
									"scores":	[-6.194928932307846]
								}, {
									"case":	124,
									"scores":	[-6.194928932307846]
								}, {
									"case":	125,
									"scores":	[-6.194928932307846]
								}, {
									"case":	126,
									"scores":	[-6.194928932307846]
								}, {
									"case":	127,
									"scores":	[-6.194928932307846]
								}, {
									"case":	128,
									"scores":	[-6.194928932307846]
								}, {
									"case":	129,
									"scores":	[-6.194928932307846]
								}, {
									"case":	130,
									"scores":	[-6.194928932307846]
								}, {
									"case":	131,
									"scores":	[-6.194928932307846]
								}, {
									"case":	132,
									"scores":	[-6.194928932307846]
								}, {
									"case":	133,
									"scores":	[-6.194928932307846]
								}, {
									"case":	134,
									"scores":	[-6.194928932307846]
								}, {
									"case":	135,
									"scores":	[-6.194928932307846]
								}, {
									"case":	136,
									"scores":	[-6.194928932307846]
								}, {
									"case":	137,
									"scores":	[-6.194928932307846]
								}, {
									"case":	138,
									"scores":	[-6.194928932307846]
								}, {
									"case":	139,
									"scores":	[-6.194928932307846]
								}, {
									"case":	140,
									"scores":	[-6.194928932307846]
								}, {
									"case":	141,
									"scores":	[-6.194928932307846]
								}, {
									"case":	142,
									"scores":	[-6.194928932307846]
								}, {
									"case":	143,
									"scores":	[-6.194928932307846]
								}, {
									"case":	144,
									"scores":	[-6.194928932307846]
								}, {
									"case":	145,
									"scores":	[-6.194928932307846]
								}, {
									"case":	146,
									"scores":	[-6.194928932307846]
								}, {
									"case":	147,
									"scores":	[-6.194928932307846]
								}, {
									"case":	148,
									"scores":	[-6.194928932307846]
								}, {
									"case":	149,
									"scores":	[-6.194928932307846]
								}, {
									"case":	150,
									"scores":	[-6.194928932307846]
								}, {
									"case":	151,
									"scores":	[-6.194928932307846]
								}, {
									"case":	152,
									"scores":	[-6.194928932307846]
								}, {
									"case":	153,
									"scores":	[-6.194928932307846]
								}, {
									"case":	154,
									"scores":	[-6.194928932307846]
								}, {
									"case":	155,
									"scores":	[-6.194928932307846]
								}, {
									"case":	156,
									"scores":	[-6.194928932307846]
								}, {
									"case":	157,
									"scores":	[-6.194928932307846]
								}, {
									"case":	158,
									"scores":	[-6.194928932307846]
								}, {
									"case":	159,
									"scores":	[-6.194928932307846]
								}, {
									"case":	160,
									"scores":	[-6.194928932307846]
								}, {
									"case":	161,
									"scores":	[-6.194928932307846]
								}, {
									"case":	162,
									"scores":	[-6.194928932307846]
								}, {
									"case":	163,
									"scores":	[-6.194928932307846]
								}, {
									"case":	164,
									"scores":	[-6.194928932307846]
								}, {
									"case":	165,
									"scores":	[-6.194928932307846]
								}, {
									"case":	166,
									"scores":	[-6.194928932307846]
								}, {
									"case":	167,
									"scores":	[-6.194928932307846]
								}, {
									"case":	168,
									"scores":	[-6.194928932307846]
								}, {
									"case":	169,
									"scores":	[-6.194928932307846]
								}, {
									"case":	170,
									"scores":	[-6.194928932307846]
								}, {
									"case":	171,
									"scores":	[-6.194928932307846]
								}, {
									"case":	172,
									"scores":	[-6.194928932307846]
								}, {
									"case":	173,
									"scores":	[-6.194928932307846]
								}, {
									"case":	174,
									"scores":	[-6.194928932307846]
								}, {
									"case":	175,
									"scores":	[-6.194928932307846]
								}, {
									"case":	176,
									"scores":	[-6.194928932307846]
								}, {
									"case":	177,
									"scores":	[-6.194928932307846]
								}, {
									"case":	178,
									"scores":	[-6.194928932307846]
								}, {
									"case":	179,
									"scores":	[-6.194928932307846]
								}, {
									"case":	180,
									"scores":	[-6.194928932307846]
								}, {
									"case":	181,
									"scores":	[-6.194928932307846]
								}, {
									"case":	182,
									"scores":	[-6.194928932307846]
								}, {
									"case":	183,
									"scores":	[-6.194928932307846]
								}, {
									"case":	184,
									"scores":	[-6.194928932307846]
								}, {
									"case":	185,
									"scores":	[-6.194928932307846]
								}, {
									"case":	186,
									"scores":	[-6.194928932307846]
								}, {
									"case":	187,
									"scores":	[-6.194928932307846]
								}, {
									"case":	188,
									"scores":	[-6.194928932307846]
								}, {
									"case":	189,
									"scores":	[-6.194928932307846]
								}, {
									"case":	190,
									"scores":	[-6.194928932307846]
								}, {
									"case":	191,
									"scores":	[-6.194928932307846]
								}, {
									"case":	192,
									"scores":	[-6.194928932307846]
								}, {
									"case":	193,
									"scores":	[-6.194928932307846]
								}, {
									"case":	194,
									"scores":	[-6.194928932307846]
								}, {
									"case":	195,
									"scores":	[-6.194928932307846]
								}, {
									"case":	196,
									"scores":	[-6.194928932307846]
								}, {
									"case":	197,
									"scores":	[-6.194928932307846]
								}, {
									"case":	198,
									"scores":	[-6.194928932307846]
								}, {
									"case":	199,
									"scores":	[-6.194928932307846]
								}, {
									"case":	200,
									"scores":	[-6.194928932307846]
								}, {
									"case":	201,
									"scores":	[-6.194928932307846]
								}, {
									"case":	202,
									"scores":	[-6.194928932307846]
								}, {
									"case":	203,
									"scores":	[-6.194928932307846]
								}, {
									"case":	204,
									"scores":	[-6.194928932307846]
								}, {
									"case":	205,
									"scores":	[-6.194928932307846]
								}, {
									"case":	206,
									"scores":	[-6.194928932307846]
								}, {
									"case":	207,
									"scores":	[-6.194928932307846]
								}, {
									"case":	208,
									"scores":	[-6.194928932307846]
								}, {
									"case":	209,
									"scores":	[-6.194928932307846]
								}, {
									"case":	210,
									"scores":	[-6.194928932307846]
								}, {
									"case":	211,
									"scores":	[-6.194928932307846]
								}, {
									"case":	212,
									"scores":	[-6.194928932307846]
								}, {
									"case":	213,
									"scores":	[-6.194928932307846]
								}, {
									"case":	214,
									"scores":	[-6.194928932307846]
								}, {
									"case":	215,
									"scores":	[-6.194928932307846]
								}, {
									"case":	216,
									"scores":	[-6.194928932307846]
								}, {
									"case":	217,
									"scores":	[-6.194928932307846]
								}, {
									"case":	218,
									"scores":	[-6.194928932307846]
								}, {
									"case":	219,
									"scores":	[-6.194928932307846]
								}, {
									"case":	220,
									"scores":	[-6.194928932307846]
								}, {
									"case":	221,
									"scores":	[-6.194928932307846]
								}, {
									"case":	222,
									"scores":	[-6.194928932307846]
								}, {
									"case":	223,
									"scores":	[-6.194928932307846]
								}, {
									"case":	224,
									"scores":	[-6.194928932307846]
								}, {
									"case":	225,
									"scores":	[-6.194928932307846]
								}, {
									"case":	226,
									"scores":	[-11.021400326607846, -11.674134930307847, -11.728223012307847, -11.839235292307846, -11.834581366307846, -11.834751189307845, -11.834169899307845, -11.323412552307847, -11.323412552307847, -12.119565062307846, -12.819984952307848, -11.323412552307847, -11.614498752307846, -11.621200452307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -11.417623052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.059400752307846, -12.052699052307846, -12.059400752307846, -12.059400752307846, -12.052699052307846, -12.052699052307846, -12.059400752307846, -12.052699052307846, -11.417623052307846, -12.059400752307846, -12.052699052307846, -12.015274652307845]
								}, {
									"case":	227,
									"scores":	[-9.0029543266078456, -9.6556889303078464, -9.7097770123078462, -9.8207892923078468, -9.8161353663078472, -9.8163051893078457, -9.8157238993078462, -9.304966552307846, -9.304966552307846, -10.101119062307847, -10.801538952307848, -9.304966552307846, -9.5960527523078447, -9.6027544523078454, -10.034253052307847, -10.034253052307847, -10.034253052307847, -9.3991770523078451, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.034253052307847, -10.040954752307846, -10.034253052307847, -10.040954752307846, -10.040954752307846, -10.034253052307847, -10.034253052307847, -10.040954752307846, -10.034253052307847, -9.3991770523078451, -10.040954752307846, -10.034253052307847, -9.9968286523078458]
								}, {
									"case":	228,
									"scores":	[-11.021400326607846, -11.674134930307847, -11.728223012307847, -11.839235292307846, -11.834581366307846, -11.834751189307845, -11.834169899307845, -11.323412552307847, -11.323412552307847, -12.119565062307846, -12.819984952307848, -11.323412552307847, -11.614498752307846, -11.621200452307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -11.417623052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.052699052307846, -12.059400752307846, -12.052699052307846, -12.059400752307846, -12.059400752307846, -12.052699052307846, -12.052699052307846, -12.059400752307846, -12.052699052307846, -11.417623052307846, -12.059400752307846, -12.052699052307846, -12.015274652307845]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	149,
							"begin_column":	2,
							"end_line":	149,
							"end_column":	19,
							"patch_codes":	["if (!__is_neg(\"\", \"L149\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_nstrips), sizeof (td->td_nstrips), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rowsperstrip = td->td_rowsperstrip;\n", "{\n}\n", "rowsperstrip = (&buf)->td_rowsperstrip", "rowsperstrip = (&module)->td_rowsperstrip", "rowsperstrip = (&plane)->td_rowsperstrip", "rowsperstrip = (&rows)->td_rowsperstrip", "rowsperstrip = (&rowsperstrip)->td_rowsperstrip", "rowsperstrip = (&size)->td_rowsperstrip", "rowsperstrip = (&strip)->td_rowsperstrip", "rowsperstrip = (&stripinplane)->td_rowsperstrip", "rowsperstrip = (&stripsize)->td_rowsperstrip", "rowsperstrip = (&stripsperplane)->td_rowsperstrip", "rowsperstrip = (&td)->td_rowsperstrip", "rowsperstrip = (&tif)->td_rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_rowsperstrip"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5228248726078455, -6.772208127307846, -7.8173563523078462, -6.6532826573078463, -7.4638274973078467, -7.1425953343078463, -7.462769924307846, -7.4302042523078455, -7.4302042523078455, -7.7321422013078465, -9.0155469973078457, -7.4302042523078455, -7.7408235523078464, -8.0896127523078469, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -7.8926626673078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.2522309523078459, -8.6010201523078464, -8.2522309523078459, -8.6010201523078464, -8.6010201523078464, -8.2522309523078459, -8.2522309523078459, -8.6010201523078464, -8.2522309523078459, -7.8926626673078459, -8.6010201523078464, -8.2522309523078459, -9.0551830523078465]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-6.194928932307846]
								}, {
									"case":	6,
									"scores":	[-6.194928932307846]
								}, {
									"case":	7,
									"scores":	[-6.194928932307846]
								}, {
									"case":	8,
									"scores":	[-6.194928932307846]
								}, {
									"case":	9,
									"scores":	[-6.194928932307846]
								}, {
									"case":	10,
									"scores":	[-6.194928932307846]
								}, {
									"case":	11,
									"scores":	[-6.194928932307846]
								}, {
									"case":	12,
									"scores":	[-6.194928932307846]
								}, {
									"case":	13,
									"scores":	[-6.194928932307846]
								}, {
									"case":	14,
									"scores":	[-6.194928932307846]
								}, {
									"case":	15,
									"scores":	[-6.194928932307846]
								}, {
									"case":	16,
									"scores":	[-6.194928932307846]
								}, {
									"case":	17,
									"scores":	[-6.194928932307846]
								}, {
									"case":	18,
									"scores":	[-6.194928932307846]
								}, {
									"case":	19,
									"scores":	[-6.194928932307846]
								}, {
									"case":	20,
									"scores":	[-6.194928932307846]
								}, {
									"case":	21,
									"scores":	[-6.194928932307846]
								}, {
									"case":	22,
									"scores":	[-6.194928932307846]
								}, {
									"case":	23,
									"scores":	[-6.194928932307846]
								}]
						}]
				}, {
					"line":	149,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	150,
							"begin_column":	0,
							"end_line":	150,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td, 0, sizeof (*(td)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L150\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_nstrips), sizeof (td->td_nstrips), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L150\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_nstrips), sizeof (td->td_nstrips), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L150\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_nstrips), sizeof (td->td_nstrips), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	2,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	3,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	4,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	5,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	6,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	7,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	8,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	9,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	10,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	11,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	12,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	13,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	14,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	15,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	16,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	17,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	18,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	19,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	20,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	21,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	22,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	23,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	24,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	25,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	26,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	27,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	28,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	29,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	30,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	31,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	32,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	33,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	34,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	35,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	36,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	37,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	38,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	39,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	40,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	41,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	42,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	43,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	44,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	45,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	46,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	47,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	48,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	49,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	50,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	51,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	52,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	53,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	54,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	55,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	56,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	57,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	58,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	59,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	60,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	61,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	62,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	63,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	64,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	65,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	66,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	67,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	68,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	69,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	70,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	71,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	72,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	73,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	74,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	75,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	76,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	77,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	78,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	79,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	80,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	81,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	82,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	83,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	84,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	85,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	86,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	87,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	88,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	89,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	90,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	91,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	92,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	93,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	94,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	95,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	96,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	97,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	98,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	99,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	100,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	101,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	102,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	103,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	104,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	105,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	106,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	107,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	108,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	109,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	110,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	111,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	112,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	113,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	114,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	115,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	116,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	117,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	118,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	119,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	120,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	121,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	122,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	123,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	124,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	125,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	126,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	127,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	128,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	129,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	130,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	131,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	132,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	133,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	134,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	135,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	136,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	137,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	138,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	139,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	140,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	141,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	142,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	143,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	144,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	145,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	146,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	147,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	148,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	149,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	150,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	151,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	152,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	153,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	154,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	155,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	156,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	157,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	158,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	159,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	160,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	161,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	162,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	163,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	164,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	165,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	166,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	167,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	168,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	169,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	170,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	171,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	172,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	173,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	174,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	175,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	176,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	177,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	178,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	179,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	180,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	181,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	182,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	183,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	184,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	185,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	186,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	187,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	188,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	189,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	190,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	191,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	192,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	193,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	194,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	195,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	196,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	197,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	198,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	199,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	200,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	201,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	202,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	203,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	204,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	205,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	206,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	207,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	208,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	209,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	210,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	211,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	212,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	213,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	214,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	215,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	216,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	217,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	218,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	219,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	220,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	221,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	222,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	223,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	224,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	225,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	226,
									"scores":	[-11.850046619290326, -9.9312652429903263, -11.979737604990326, -12.881345344990327, -13.086352658990327, -13.086522481990327, -13.085941191990328, -13.085941191990328, -12.575183844990327, -14.071756244990327, -12.575183844990327, -13.371336354990326, -12.866270044990328, -12.872971744990327, -13.304470344990326, -13.304470344990326, -13.304470344990326, -12.669394344990327, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.311172044990327, -13.304470344990326, -13.311172044990327, -13.311172044990327, -13.304470344990326, -13.304470344990326, -13.311172044990327, -13.304470344990326, -12.669394344990327, -13.311172044990327, -13.304470344990326, -13.267045944990327]
								}, {
									"case":	227,
									"scores":	[-9.83160061929033, -7.9128192429903272, -9.9612916049903273, -10.862899344990328, -11.067906658990328, -11.068076481990328, -11.067495191990329, -11.067495191990329, -10.556737844990327, -12.053310244990328, -10.556737844990327, -11.352890354990327, -10.847824044990329, -10.854525744990328, -11.286024344990327, -11.286024344990327, -11.286024344990327, -10.650948344990326, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.286024344990327, -11.292726044990328, -11.286024344990327, -11.292726044990328, -11.292726044990328, -11.286024344990327, -11.286024344990327, -11.292726044990328, -11.286024344990327, -10.650948344990326, -11.292726044990328, -11.286024344990327, -11.248599944990328]
								}, {
									"case":	228,
									"scores":	[-11.850046619290326, -9.9312652429903263, -11.979737604990326, -12.881345344990327, -13.086352658990327, -13.086522481990327, -13.085941191990328, -13.085941191990328, -12.575183844990327, -14.071756244990327, -12.575183844990327, -13.371336354990326, -12.866270044990328, -12.872971744990327, -13.304470344990326, -13.304470344990326, -13.304470344990326, -12.669394344990327, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.304470344990326, -13.311172044990327, -13.304470344990326, -13.311172044990327, -13.311172044990327, -13.304470344990326, -13.304470344990326, -13.311172044990327, -13.304470344990326, -12.669394344990327, -13.311172044990327, -13.304470344990326, -13.267045944990327]
								}]
						}, {
							"switch":	9,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	150,
							"begin_column":	2,
							"end_line":	151,
							"end_column":	20,
							"patch_codes":	["if (__is_neg(\"\", \"L150\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_nstrips), sizeof (td->td_nstrips), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rowsperstrip = td->td_imagelength;\n", "if ((rowsperstrip > td->td_imagelength) || __is_neg(\"\", \"L150\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_nstrips), sizeof (td->td_nstrips), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rowsperstrip = td->td_imagelength;\n", "if ((rowsperstrip > td->td_imagelength) && !__is_neg(\"\", \"L150\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_imagelength), sizeof (td->td_imagelength), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_nstrips), sizeof (td->td_nstrips), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rowsperstrip = td->td_imagelength;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5084843127281466, -1.5845380604281476, -2.6213001974281473, -5.2378903924281461, -4.8877130374281466, -4.5327918744281464, -4.8529664644281461, -4.8529664644281461, -4.8204007924281465, -6.4057435374281466, -4.8204007924281465, -5.1223387414281456, -5.1310200924281464, -5.4798092924281461, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.282859207428146, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.6424274924281468, -5.9912166924281465, -5.6424274924281468, -5.9912166924281465, -5.9912166924281465, -5.6424274924281468, -5.6424274924281468, -5.9912166924281465, -5.6424274924281468, -5.282859207428146, -5.9912166924281465, -5.6424274924281468, -6.4453795924281465]
								}, {
									"case":	2,
									"scores":	[-2.7977431377281476, 1.1262031145718532, 0.089440977571857427, -2.5271492174281471, -2.1769718624281462, -1.8220506994281465, -2.1422252894281466, -2.1422252894281466, -2.109659617428147, -3.6950023624281472, -2.109659617428147, -2.4115975664281466, -2.4202789174281469, -2.7690681174281471, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.572118032428147, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -3.280475517428147, -2.9316863174281469, -3.280475517428147, -3.280475517428147, -2.9316863174281469, -2.9316863174281469, -3.280475517428147, -2.9316863174281469, -2.572118032428147, -3.280475517428147, -2.9316863174281469, -3.7346384174281471]
								}, {
									"case":	3,
									"scores":	[-2.7977431377281476, 1.1262031145718532, 0.089440977571857427, -2.5271492174281471, -2.1769718624281462, -1.8220506994281465, -2.1422252894281466, -2.1422252894281466, -2.109659617428147, -3.6950023624281472, -2.109659617428147, -2.4115975664281466, -2.4202789174281469, -2.7690681174281471, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.572118032428147, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -2.9316863174281469, -3.280475517428147, -2.9316863174281469, -3.280475517428147, -3.280475517428147, -2.9316863174281469, -2.9316863174281469, -3.280475517428147, -2.9316863174281469, -2.572118032428147, -3.280475517428147, -2.9316863174281469, -3.7346384174281471]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	150,
							"begin_column":	2,
							"end_line":	151,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L150\", 45, &(td->td_imagelength), sizeof (td->td_imagelength), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_nstrips), sizeof (td->td_nstrips), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    if (rowsperstrip > td->td_imagelength)\n        rowsperstrip = td->td_imagelength;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3341959499903266, -8.2213800652903259, -4.2974338129903273, -7.9507861449903263, -7.6006087899903267, -7.2456876269903265, -7.5658622169903271, -7.5658622169903271, -7.5332965449903266, -9.1186392899903268, -7.5332965449903266, -7.8352344939903267, -7.8439158449903257, -8.1927050449903263, -8.355323244990327, -8.355323244990327, -8.355323244990327, -7.995754959990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.355323244990327, -8.70411244499033, -8.355323244990327, -8.70411244499033, -8.70411244499033, -8.355323244990327, -8.355323244990327, -8.70411244499033, -8.355323244990327, -7.995754959990327, -8.70411244499033, -8.355323244990327, -9.15827534499033]
								}]
						}]
				}, {
					"line":	151,
					"switches":	[{
							"switch":	11,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	152,
							"begin_column":	0,
							"end_line":	152,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td, 0, sizeof (*(td)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L152\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_nstrips), sizeof (td->td_nstrips), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L152\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_nstrips), sizeof (td->td_nstrips), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L152\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_nstrips), sizeof (td->td_nstrips), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.154523517672807]
								}, {
									"case":	2,
									"scores":	[-6.154523517672807]
								}, {
									"case":	3,
									"scores":	[-6.154523517672807]
								}, {
									"case":	4,
									"scores":	[-6.154523517672807]
								}, {
									"case":	5,
									"scores":	[-6.154523517672807]
								}, {
									"case":	6,
									"scores":	[-6.154523517672807]
								}, {
									"case":	7,
									"scores":	[-6.154523517672807]
								}, {
									"case":	8,
									"scores":	[-6.154523517672807]
								}, {
									"case":	9,
									"scores":	[-6.154523517672807]
								}, {
									"case":	10,
									"scores":	[-6.154523517672807]
								}, {
									"case":	11,
									"scores":	[-6.154523517672807]
								}, {
									"case":	12,
									"scores":	[-6.154523517672807]
								}, {
									"case":	13,
									"scores":	[-6.154523517672807]
								}, {
									"case":	14,
									"scores":	[-6.154523517672807]
								}, {
									"case":	15,
									"scores":	[-6.154523517672807]
								}, {
									"case":	16,
									"scores":	[-6.154523517672807]
								}, {
									"case":	17,
									"scores":	[-6.154523517672807]
								}, {
									"case":	18,
									"scores":	[-6.154523517672807]
								}, {
									"case":	19,
									"scores":	[-6.154523517672807]
								}, {
									"case":	20,
									"scores":	[-6.154523517672807]
								}, {
									"case":	21,
									"scores":	[-6.154523517672807]
								}, {
									"case":	22,
									"scores":	[-6.154523517672807]
								}, {
									"case":	23,
									"scores":	[-6.154523517672807]
								}, {
									"case":	24,
									"scores":	[-6.154523517672807]
								}, {
									"case":	25,
									"scores":	[-6.154523517672807]
								}, {
									"case":	26,
									"scores":	[-6.154523517672807]
								}, {
									"case":	27,
									"scores":	[-6.154523517672807]
								}, {
									"case":	28,
									"scores":	[-6.154523517672807]
								}, {
									"case":	29,
									"scores":	[-6.154523517672807]
								}, {
									"case":	30,
									"scores":	[-6.154523517672807]
								}, {
									"case":	31,
									"scores":	[-6.154523517672807]
								}, {
									"case":	32,
									"scores":	[-6.154523517672807]
								}, {
									"case":	33,
									"scores":	[-6.154523517672807]
								}, {
									"case":	34,
									"scores":	[-6.154523517672807]
								}, {
									"case":	35,
									"scores":	[-6.154523517672807]
								}, {
									"case":	36,
									"scores":	[-6.154523517672807]
								}, {
									"case":	37,
									"scores":	[-6.154523517672807]
								}, {
									"case":	38,
									"scores":	[-6.154523517672807]
								}, {
									"case":	39,
									"scores":	[-6.154523517672807]
								}, {
									"case":	40,
									"scores":	[-6.154523517672807]
								}, {
									"case":	41,
									"scores":	[-6.154523517672807]
								}, {
									"case":	42,
									"scores":	[-6.154523517672807]
								}, {
									"case":	43,
									"scores":	[-6.154523517672807]
								}, {
									"case":	44,
									"scores":	[-6.154523517672807]
								}, {
									"case":	45,
									"scores":	[-6.154523517672807]
								}, {
									"case":	46,
									"scores":	[-6.154523517672807]
								}, {
									"case":	47,
									"scores":	[-6.154523517672807]
								}, {
									"case":	48,
									"scores":	[-6.154523517672807]
								}, {
									"case":	49,
									"scores":	[-6.154523517672807]
								}, {
									"case":	50,
									"scores":	[-6.154523517672807]
								}, {
									"case":	51,
									"scores":	[-6.154523517672807]
								}, {
									"case":	52,
									"scores":	[-6.154523517672807]
								}, {
									"case":	53,
									"scores":	[-6.154523517672807]
								}, {
									"case":	54,
									"scores":	[-6.154523517672807]
								}, {
									"case":	55,
									"scores":	[-6.154523517672807]
								}, {
									"case":	56,
									"scores":	[-6.154523517672807]
								}, {
									"case":	57,
									"scores":	[-6.154523517672807]
								}, {
									"case":	58,
									"scores":	[-6.154523517672807]
								}, {
									"case":	59,
									"scores":	[-6.154523517672807]
								}, {
									"case":	60,
									"scores":	[-6.154523517672807]
								}, {
									"case":	61,
									"scores":	[-6.154523517672807]
								}, {
									"case":	62,
									"scores":	[-6.154523517672807]
								}, {
									"case":	63,
									"scores":	[-6.154523517672807]
								}, {
									"case":	64,
									"scores":	[-6.154523517672807]
								}, {
									"case":	65,
									"scores":	[-6.154523517672807]
								}, {
									"case":	66,
									"scores":	[-6.154523517672807]
								}, {
									"case":	67,
									"scores":	[-6.154523517672807]
								}, {
									"case":	68,
									"scores":	[-6.154523517672807]
								}, {
									"case":	69,
									"scores":	[-6.154523517672807]
								}, {
									"case":	70,
									"scores":	[-6.154523517672807]
								}, {
									"case":	71,
									"scores":	[-6.154523517672807]
								}, {
									"case":	72,
									"scores":	[-6.154523517672807]
								}, {
									"case":	73,
									"scores":	[-6.154523517672807]
								}, {
									"case":	74,
									"scores":	[-6.154523517672807]
								}, {
									"case":	75,
									"scores":	[-6.154523517672807]
								}, {
									"case":	76,
									"scores":	[-6.154523517672807]
								}, {
									"case":	77,
									"scores":	[-6.154523517672807]
								}, {
									"case":	78,
									"scores":	[-6.154523517672807]
								}, {
									"case":	79,
									"scores":	[-6.154523517672807]
								}, {
									"case":	80,
									"scores":	[-6.154523517672807]
								}, {
									"case":	81,
									"scores":	[-6.154523517672807]
								}, {
									"case":	82,
									"scores":	[-6.154523517672807]
								}, {
									"case":	83,
									"scores":	[-6.154523517672807]
								}, {
									"case":	84,
									"scores":	[-6.154523517672807]
								}, {
									"case":	85,
									"scores":	[-6.154523517672807]
								}, {
									"case":	86,
									"scores":	[-6.154523517672807]
								}, {
									"case":	87,
									"scores":	[-6.154523517672807]
								}, {
									"case":	88,
									"scores":	[-6.154523517672807]
								}, {
									"case":	89,
									"scores":	[-6.154523517672807]
								}, {
									"case":	90,
									"scores":	[-6.154523517672807]
								}, {
									"case":	91,
									"scores":	[-6.154523517672807]
								}, {
									"case":	92,
									"scores":	[-6.154523517672807]
								}, {
									"case":	93,
									"scores":	[-6.154523517672807]
								}, {
									"case":	94,
									"scores":	[-6.154523517672807]
								}, {
									"case":	95,
									"scores":	[-6.154523517672807]
								}, {
									"case":	96,
									"scores":	[-6.154523517672807]
								}, {
									"case":	97,
									"scores":	[-6.154523517672807]
								}, {
									"case":	98,
									"scores":	[-6.154523517672807]
								}, {
									"case":	99,
									"scores":	[-6.154523517672807]
								}, {
									"case":	100,
									"scores":	[-6.154523517672807]
								}, {
									"case":	101,
									"scores":	[-6.154523517672807]
								}, {
									"case":	102,
									"scores":	[-6.154523517672807]
								}, {
									"case":	103,
									"scores":	[-6.154523517672807]
								}, {
									"case":	104,
									"scores":	[-6.154523517672807]
								}, {
									"case":	105,
									"scores":	[-6.154523517672807]
								}, {
									"case":	106,
									"scores":	[-6.154523517672807]
								}, {
									"case":	107,
									"scores":	[-6.154523517672807]
								}, {
									"case":	108,
									"scores":	[-6.154523517672807]
								}, {
									"case":	109,
									"scores":	[-6.154523517672807]
								}, {
									"case":	110,
									"scores":	[-6.154523517672807]
								}, {
									"case":	111,
									"scores":	[-6.154523517672807]
								}, {
									"case":	112,
									"scores":	[-6.154523517672807]
								}, {
									"case":	113,
									"scores":	[-6.154523517672807]
								}, {
									"case":	114,
									"scores":	[-6.154523517672807]
								}, {
									"case":	115,
									"scores":	[-6.154523517672807]
								}, {
									"case":	116,
									"scores":	[-6.154523517672807]
								}, {
									"case":	117,
									"scores":	[-6.154523517672807]
								}, {
									"case":	118,
									"scores":	[-6.154523517672807]
								}, {
									"case":	119,
									"scores":	[-6.154523517672807]
								}, {
									"case":	120,
									"scores":	[-6.154523517672807]
								}, {
									"case":	121,
									"scores":	[-6.154523517672807]
								}, {
									"case":	122,
									"scores":	[-6.154523517672807]
								}, {
									"case":	123,
									"scores":	[-6.154523517672807]
								}, {
									"case":	124,
									"scores":	[-6.154523517672807]
								}, {
									"case":	125,
									"scores":	[-6.154523517672807]
								}, {
									"case":	126,
									"scores":	[-6.154523517672807]
								}, {
									"case":	127,
									"scores":	[-6.154523517672807]
								}, {
									"case":	128,
									"scores":	[-6.154523517672807]
								}, {
									"case":	129,
									"scores":	[-6.154523517672807]
								}, {
									"case":	130,
									"scores":	[-6.154523517672807]
								}, {
									"case":	131,
									"scores":	[-6.154523517672807]
								}, {
									"case":	132,
									"scores":	[-6.154523517672807]
								}, {
									"case":	133,
									"scores":	[-6.154523517672807]
								}, {
									"case":	134,
									"scores":	[-6.154523517672807]
								}, {
									"case":	135,
									"scores":	[-6.154523517672807]
								}, {
									"case":	136,
									"scores":	[-6.154523517672807]
								}, {
									"case":	137,
									"scores":	[-6.154523517672807]
								}, {
									"case":	138,
									"scores":	[-6.154523517672807]
								}, {
									"case":	139,
									"scores":	[-6.154523517672807]
								}, {
									"case":	140,
									"scores":	[-6.154523517672807]
								}, {
									"case":	141,
									"scores":	[-6.154523517672807]
								}, {
									"case":	142,
									"scores":	[-6.154523517672807]
								}, {
									"case":	143,
									"scores":	[-6.154523517672807]
								}, {
									"case":	144,
									"scores":	[-6.154523517672807]
								}, {
									"case":	145,
									"scores":	[-6.154523517672807]
								}, {
									"case":	146,
									"scores":	[-6.154523517672807]
								}, {
									"case":	147,
									"scores":	[-6.154523517672807]
								}, {
									"case":	148,
									"scores":	[-6.154523517672807]
								}, {
									"case":	149,
									"scores":	[-6.154523517672807]
								}, {
									"case":	150,
									"scores":	[-6.154523517672807]
								}, {
									"case":	151,
									"scores":	[-6.154523517672807]
								}, {
									"case":	152,
									"scores":	[-6.154523517672807]
								}, {
									"case":	153,
									"scores":	[-6.154523517672807]
								}, {
									"case":	154,
									"scores":	[-6.154523517672807]
								}, {
									"case":	155,
									"scores":	[-6.154523517672807]
								}, {
									"case":	156,
									"scores":	[-6.154523517672807]
								}, {
									"case":	157,
									"scores":	[-6.154523517672807]
								}, {
									"case":	158,
									"scores":	[-6.154523517672807]
								}, {
									"case":	159,
									"scores":	[-6.154523517672807]
								}, {
									"case":	160,
									"scores":	[-6.154523517672807]
								}, {
									"case":	161,
									"scores":	[-6.154523517672807]
								}, {
									"case":	162,
									"scores":	[-6.154523517672807]
								}, {
									"case":	163,
									"scores":	[-6.154523517672807]
								}, {
									"case":	164,
									"scores":	[-6.154523517672807]
								}, {
									"case":	165,
									"scores":	[-6.154523517672807]
								}, {
									"case":	166,
									"scores":	[-6.154523517672807]
								}, {
									"case":	167,
									"scores":	[-6.154523517672807]
								}, {
									"case":	168,
									"scores":	[-6.154523517672807]
								}, {
									"case":	169,
									"scores":	[-6.154523517672807]
								}, {
									"case":	170,
									"scores":	[-6.154523517672807]
								}, {
									"case":	171,
									"scores":	[-6.154523517672807]
								}, {
									"case":	172,
									"scores":	[-6.154523517672807]
								}, {
									"case":	173,
									"scores":	[-6.154523517672807]
								}, {
									"case":	174,
									"scores":	[-6.154523517672807]
								}, {
									"case":	175,
									"scores":	[-6.154523517672807]
								}, {
									"case":	176,
									"scores":	[-6.154523517672807]
								}, {
									"case":	177,
									"scores":	[-6.154523517672807]
								}, {
									"case":	178,
									"scores":	[-6.154523517672807]
								}, {
									"case":	179,
									"scores":	[-6.154523517672807]
								}, {
									"case":	180,
									"scores":	[-6.154523517672807]
								}, {
									"case":	181,
									"scores":	[-6.154523517672807]
								}, {
									"case":	182,
									"scores":	[-6.154523517672807]
								}, {
									"case":	183,
									"scores":	[-6.154523517672807]
								}, {
									"case":	184,
									"scores":	[-6.154523517672807]
								}, {
									"case":	185,
									"scores":	[-6.154523517672807]
								}, {
									"case":	186,
									"scores":	[-6.154523517672807]
								}, {
									"case":	187,
									"scores":	[-6.154523517672807]
								}, {
									"case":	188,
									"scores":	[-6.154523517672807]
								}, {
									"case":	189,
									"scores":	[-6.154523517672807]
								}, {
									"case":	190,
									"scores":	[-6.154523517672807]
								}, {
									"case":	191,
									"scores":	[-6.154523517672807]
								}, {
									"case":	192,
									"scores":	[-6.154523517672807]
								}, {
									"case":	193,
									"scores":	[-6.154523517672807]
								}, {
									"case":	194,
									"scores":	[-6.154523517672807]
								}, {
									"case":	195,
									"scores":	[-6.154523517672807]
								}, {
									"case":	196,
									"scores":	[-6.154523517672807]
								}, {
									"case":	197,
									"scores":	[-6.154523517672807]
								}, {
									"case":	198,
									"scores":	[-6.154523517672807]
								}, {
									"case":	199,
									"scores":	[-6.154523517672807]
								}, {
									"case":	200,
									"scores":	[-6.154523517672807]
								}, {
									"case":	201,
									"scores":	[-6.154523517672807]
								}, {
									"case":	202,
									"scores":	[-6.154523517672807]
								}, {
									"case":	203,
									"scores":	[-6.154523517672807]
								}, {
									"case":	204,
									"scores":	[-6.154523517672807]
								}, {
									"case":	205,
									"scores":	[-6.154523517672807]
								}, {
									"case":	206,
									"scores":	[-6.154523517672807]
								}, {
									"case":	207,
									"scores":	[-6.154523517672807]
								}, {
									"case":	208,
									"scores":	[-6.154523517672807]
								}, {
									"case":	209,
									"scores":	[-6.154523517672807]
								}, {
									"case":	210,
									"scores":	[-6.154523517672807]
								}, {
									"case":	211,
									"scores":	[-6.154523517672807]
								}, {
									"case":	212,
									"scores":	[-6.154523517672807]
								}, {
									"case":	213,
									"scores":	[-6.154523517672807]
								}, {
									"case":	214,
									"scores":	[-6.154523517672807]
								}, {
									"case":	215,
									"scores":	[-6.154523517672807]
								}, {
									"case":	216,
									"scores":	[-6.154523517672807]
								}, {
									"case":	217,
									"scores":	[-6.154523517672807]
								}, {
									"case":	218,
									"scores":	[-6.154523517672807]
								}, {
									"case":	219,
									"scores":	[-6.154523517672807]
								}, {
									"case":	220,
									"scores":	[-6.154523517672807]
								}, {
									"case":	221,
									"scores":	[-6.154523517672807]
								}, {
									"case":	222,
									"scores":	[-6.154523517672807]
								}, {
									"case":	223,
									"scores":	[-6.154523517672807]
								}, {
									"case":	224,
									"scores":	[-6.154523517672807]
								}, {
									"case":	225,
									"scores":	[-6.154523517672807]
								}, {
									"case":	226,
									"scores":	[-10.127731911972806, -7.035124823672807, -10.934954235672807, -9.0765793046728067, -11.364207774672806, -11.364765935672807, -11.363626484672807, -11.363626484672807, -11.159030637672807, -12.351487937672808, -10.852869137672807, -11.143955337672807, -11.649021647672807, -11.150657037672806, -11.582155637672807, -11.582155637672807, -11.582155637672807, -10.947079637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.588857337672806, -11.582155637672807, -11.588857337672806, -11.588857337672806, -11.582155637672807, -11.582155637672807, -11.588857337672806, -11.582155637672807, -10.947079637672807, -11.588857337672806, -11.582155637672807, -11.544731237672806]
								}, {
									"case":	227,
									"scores":	[-8.1092859119728065, -5.016678823672807, -8.916508235672806, -7.0581333046728068, -9.3457617746728054, -9.3463199356728062, -9.3451804846728059, -9.3451804846728059, -9.1405846376728057, -10.333041937672807, -8.83442313767281, -9.1255093376728063, -9.6305756476728064, -9.132211037672807, -9.56370963767281, -9.56370963767281, -9.56370963767281, -8.9286336376728066, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.56370963767281, -9.5704113376728071, -9.56370963767281, -9.5704113376728071, -9.5704113376728071, -9.56370963767281, -9.56370963767281, -9.5704113376728071, -9.56370963767281, -8.9286336376728066, -9.5704113376728071, -9.56370963767281, -9.5262852376728073]
								}, {
									"case":	228,
									"scores":	[-10.127731911972806, -7.035124823672807, -10.934954235672807, -9.0765793046728067, -11.364207774672806, -11.364765935672807, -11.363626484672807, -11.363626484672807, -11.159030637672807, -12.351487937672808, -10.852869137672807, -11.143955337672807, -11.649021647672807, -11.150657037672806, -11.582155637672807, -11.582155637672807, -11.582155637672807, -10.947079637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.582155637672807, -11.588857337672806, -11.582155637672807, -11.588857337672806, -11.588857337672806, -11.582155637672807, -11.582155637672807, -11.588857337672806, -11.582155637672807, -10.947079637672807, -11.588857337672806, -11.582155637672807, -11.544731237672806]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	152,
							"begin_column":	2,
							"end_line":	152,
							"end_column":	66,
							"patch_codes":	["if (!__is_neg(\"\", \"L152\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripsperplane), sizeof (stripsperplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripinplane), sizeof (stripinplane), &(plane), sizeof (plane), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_nstrips), sizeof (td->td_nstrips), &(buf), sizeof (buf), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip);\n", "{\n}\n", "stripsperplane = (((&buf)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&module)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&plane)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&rows)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&rowsperstrip)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&size)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&strip)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&stripinplane)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&stripsize)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&stripsperplane)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((&tif)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (0 * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (buf != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (buf == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (module != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (module == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane != rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane != stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane + rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane + stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane - rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane - stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane == rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (plane == stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows != stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows + stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows - stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows == stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip != plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip != rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip != stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip != stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip != stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip + plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip + rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip + stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip + stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip + stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip - plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip - rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip - stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip - stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip - stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip == plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip == rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip == stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip == stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip == stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size != plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size != rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size != rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size != stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size != stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size != stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size + plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size + rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size + rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size + stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size + stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size + stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size - plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size - rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size - rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size - stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size - stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size - stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size == plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size == rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size == rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size == stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size == stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (size == stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip != stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip + stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip - stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip == stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane != plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane != rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane != stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane + plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane + rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane + stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane - plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane - rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane - stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane == plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane == rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane == stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize * stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsize == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane != plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane != rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane != stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane != stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane * plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane * rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane * rowsperstrip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane * size) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane * strip) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane * stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane * stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane + 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane + plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane + rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane + stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane + stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane - 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane - plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane - rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane - stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane - stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane == plane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane == rows) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane == stripinplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane == stripsize) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (stripsperplane) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (td != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (td == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (tif != 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + (tif == 0) - 1) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0 * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (buf != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (buf == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (module != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (module == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane != rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane != stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane + rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane + stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane - rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane - stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane == rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (plane == stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows != stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows + stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows - stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rows == stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip != plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip != rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip != stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip != stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip != stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip + plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip + rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip + stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip + stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip + stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip - plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip - rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip - stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip - stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip - stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip == plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip == rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip == stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip == stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (rowsperstrip == stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size != plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size != rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size != rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size != stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size != stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size != stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size + plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size + rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size + rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size + stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size + stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size + stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size - plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size - rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size - rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size - stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size - stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size - stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size == plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size == rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size == rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size == stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size == stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (size == stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip != stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip + stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip - stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (strip == stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane != plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane != rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane != stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane + plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane + rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane + stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane - plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane - rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane - stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane == plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane == rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripinplane == stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize * stripsperplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsize == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane != plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane != rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane != stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane != stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane * plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane * rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane * rowsperstrip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane * size)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane * strip)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane * stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane * stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane + 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane + plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane + rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane + stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane + stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane - 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane - plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane - rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane - stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane - stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane == plane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane == rows)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane == stripinplane)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (stripsperplane == stripsize)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (td != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (td == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (tif != 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - (tif == 0)) / rowsperstrip)", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (0 * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (buf != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (buf == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (module != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (module == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane != rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane != stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane + rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane + stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane - rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane - stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane == rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (plane == stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows != stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows + stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows - stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows == stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip != plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip != rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip != stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip != stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip != stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip + plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip + rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip + stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip + stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip + stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip - plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip - rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip - stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip - stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip - stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip == plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip == rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip == stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip == stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip == stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size != plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size != rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size != rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size != stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size != stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size != stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size + plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size + rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size + rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size + stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size + stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size + stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size - plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size - rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size - rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size - stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size - stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size - stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size == plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size == rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size == rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size == stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size == stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (size == stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip != stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip + stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip - stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip == stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane != plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane != rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane != stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane + plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane + rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane + stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane - plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane - rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane - stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane == plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane == rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane == stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize * stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsize == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane != plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane != rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane != stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane != stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane * plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane * rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane * rowsperstrip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane * size))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane * strip))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane * stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane * stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane + 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane + plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane + rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane + stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane + stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane - 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane - plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane - rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane - stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane - stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane == plane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane == rows))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane == stripinplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane == stripsize))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (stripsperplane))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (td != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (td == 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (tif != 0))", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / (tif == 0))", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3398353579728068, -3.522304445072808, -6.3759753706728066, -4.6240273296728072, -5.6979423196728067, -6.7189166520728065, -6.6843175096728071, -6.6843175096728071, -7.0692414376728072, -8.34535968267281, -6.6517518376728066, -6.9623711376728066, -6.9536897866728067, -7.3111603376728072, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.114210252672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.473778537672807, -7.8225677376728076, -7.473778537672807, -7.8225677376728076, -7.8225677376728076, -7.473778537672807, -7.473778537672807, -7.8225677376728076, -7.473778537672807, -7.114210252672807, -7.8225677376728076, -7.473778537672807, -8.27673063767281]
								}, {
									"case":	2,
									"scores":	[-6.154523517672807]
								}, {
									"case":	3,
									"scores":	[-6.154523517672807]
								}, {
									"case":	4,
									"scores":	[-6.154523517672807]
								}, {
									"case":	5,
									"scores":	[-6.154523517672807]
								}, {
									"case":	6,
									"scores":	[-6.154523517672807]
								}, {
									"case":	7,
									"scores":	[-6.154523517672807]
								}, {
									"case":	8,
									"scores":	[-6.154523517672807]
								}, {
									"case":	9,
									"scores":	[-6.154523517672807]
								}, {
									"case":	10,
									"scores":	[-6.154523517672807]
								}, {
									"case":	11,
									"scores":	[-6.154523517672807]
								}, {
									"case":	12,
									"scores":	[-6.154523517672807]
								}, {
									"case":	13,
									"scores":	[-6.154523517672807]
								}, {
									"case":	14,
									"scores":	[-6.154523517672807]
								}, {
									"case":	15,
									"scores":	[-6.154523517672807]
								}, {
									"case":	16,
									"scores":	[-6.154523517672807]
								}, {
									"case":	17,
									"scores":	[-6.154523517672807]
								}, {
									"case":	18,
									"scores":	[-6.154523517672807]
								}, {
									"case":	19,
									"scores":	[-6.154523517672807]
								}, {
									"case":	20,
									"scores":	[-6.154523517672807]
								}, {
									"case":	21,
									"scores":	[-6.154523517672807]
								}, {
									"case":	22,
									"scores":	[-6.154523517672807]
								}, {
									"case":	23,
									"scores":	[-6.154523517672807]
								}, {
									"case":	24,
									"scores":	[-6.154523517672807]
								}, {
									"case":	25,
									"scores":	[-6.154523517672807]
								}, {
									"case":	26,
									"scores":	[-6.154523517672807]
								}, {
									"case":	27,
									"scores":	[-6.154523517672807]
								}, {
									"case":	28,
									"scores":	[-6.154523517672807]
								}, {
									"case":	29,
									"scores":	[-6.154523517672807]
								}, {
									"case":	30,
									"scores":	[-6.154523517672807]
								}, {
									"case":	31,
									"scores":	[-6.154523517672807]
								}, {
									"case":	32,
									"scores":	[-6.154523517672807]
								}, {
									"case":	33,
									"scores":	[-6.154523517672807]
								}, {
									"case":	34,
									"scores":	[-6.154523517672807]
								}, {
									"case":	35,
									"scores":	[-6.154523517672807]
								}, {
									"case":	36,
									"scores":	[-6.154523517672807]
								}, {
									"case":	37,
									"scores":	[-6.154523517672807]
								}, {
									"case":	38,
									"scores":	[-6.154523517672807]
								}, {
									"case":	39,
									"scores":	[-6.154523517672807]
								}, {
									"case":	40,
									"scores":	[-6.154523517672807]
								}, {
									"case":	41,
									"scores":	[-6.154523517672807]
								}, {
									"case":	42,
									"scores":	[-6.154523517672807]
								}, {
									"case":	43,
									"scores":	[-6.154523517672807]
								}, {
									"case":	44,
									"scores":	[-6.154523517672807]
								}, {
									"case":	45,
									"scores":	[-6.154523517672807]
								}, {
									"case":	46,
									"scores":	[-6.154523517672807]
								}, {
									"case":	47,
									"scores":	[-6.154523517672807]
								}, {
									"case":	48,
									"scores":	[-6.154523517672807]
								}, {
									"case":	49,
									"scores":	[-6.154523517672807]
								}, {
									"case":	50,
									"scores":	[-6.154523517672807]
								}, {
									"case":	51,
									"scores":	[-6.154523517672807]
								}, {
									"case":	52,
									"scores":	[-6.154523517672807]
								}, {
									"case":	53,
									"scores":	[-6.154523517672807]
								}, {
									"case":	54,
									"scores":	[-6.154523517672807]
								}, {
									"case":	55,
									"scores":	[-6.154523517672807]
								}, {
									"case":	56,
									"scores":	[-6.154523517672807]
								}, {
									"case":	57,
									"scores":	[-6.154523517672807]
								}, {
									"case":	58,
									"scores":	[-6.154523517672807]
								}, {
									"case":	59,
									"scores":	[-6.154523517672807]
								}, {
									"case":	60,
									"scores":	[-6.154523517672807]
								}, {
									"case":	61,
									"scores":	[-6.154523517672807]
								}, {
									"case":	62,
									"scores":	[-6.154523517672807]
								}, {
									"case":	63,
									"scores":	[-6.154523517672807]
								}, {
									"case":	64,
									"scores":	[-6.154523517672807]
								}, {
									"case":	65,
									"scores":	[-6.154523517672807]
								}, {
									"case":	66,
									"scores":	[-6.154523517672807]
								}, {
									"case":	67,
									"scores":	[-6.154523517672807]
								}, {
									"case":	68,
									"scores":	[-6.154523517672807]
								}, {
									"case":	69,
									"scores":	[-6.154523517672807]
								}, {
									"case":	70,
									"scores":	[-6.154523517672807]
								}, {
									"case":	71,
									"scores":	[-6.154523517672807]
								}, {
									"case":	72,
									"scores":	[-6.154523517672807]
								}, {
									"case":	73,
									"scores":	[-6.154523517672807]
								}, {
									"case":	74,
									"scores":	[-6.154523517672807]
								}, {
									"case":	75,
									"scores":	[-6.154523517672807]
								}, {
									"case":	76,
									"scores":	[-6.154523517672807]
								}, {
									"case":	77,
									"scores":	[-6.154523517672807]
								}, {
									"case":	78,
									"scores":	[-6.154523517672807]
								}, {
									"case":	79,
									"scores":	[-6.154523517672807]
								}, {
									"case":	80,
									"scores":	[-6.154523517672807]
								}, {
									"case":	81,
									"scores":	[-6.154523517672807]
								}, {
									"case":	82,
									"scores":	[-6.154523517672807]
								}, {
									"case":	83,
									"scores":	[-6.154523517672807]
								}, {
									"case":	84,
									"scores":	[-6.154523517672807]
								}, {
									"case":	85,
									"scores":	[-6.154523517672807]
								}, {
									"case":	86,
									"scores":	[-6.154523517672807]
								}, {
									"case":	87,
									"scores":	[-6.154523517672807]
								}, {
									"case":	88,
									"scores":	[-6.154523517672807]
								}, {
									"case":	89,
									"scores":	[-6.154523517672807]
								}, {
									"case":	90,
									"scores":	[-6.154523517672807]
								}, {
									"case":	91,
									"scores":	[-6.154523517672807]
								}, {
									"case":	92,
									"scores":	[-6.154523517672807]
								}, {
									"case":	93,
									"scores":	[-6.154523517672807]
								}, {
									"case":	94,
									"scores":	[-6.154523517672807]
								}, {
									"case":	95,
									"scores":	[-6.154523517672807]
								}, {
									"case":	96,
									"scores":	[-6.154523517672807]
								}, {
									"case":	97,
									"scores":	[-6.154523517672807]
								}, {
									"case":	98,
									"scores":	[-6.154523517672807]
								}, {
									"case":	99,
									"scores":	[-6.154523517672807]
								}, {
									"case":	100,
									"scores":	[-6.154523517672807]
								}, {
									"case":	101,
									"scores":	[-6.154523517672807]
								}, {
									"case":	102,
									"scores":	[-6.154523517672807]
								}, {
									"case":	103,
									"scores":	[-6.154523517672807]
								}, {
									"case":	104,
									"scores":	[-6.154523517672807]
								}, {
									"case":	105,
									"scores":	[-6.154523517672807]
								}, {
									"case":	106,
									"scores":	[-6.154523517672807]
								}, {
									"case":	107,
									"scores":	[-6.154523517672807]
								}, {
									"case":	108,
									"scores":	[-6.154523517672807]
								}, {
									"case":	109,
									"scores":	[-6.154523517672807]
								}, {
									"case":	110,
									"scores":	[-6.154523517672807]
								}, {
									"case":	111,
									"scores":	[-6.154523517672807]
								}, {
									"case":	112,
									"scores":	[-6.154523517672807]
								}, {
									"case":	113,
									"scores":	[-6.154523517672807]
								}, {
									"case":	114,
									"scores":	[-6.154523517672807]
								}, {
									"case":	115,
									"scores":	[-6.154523517672807]
								}, {
									"case":	116,
									"scores":	[-6.154523517672807]
								}, {
									"case":	117,
									"scores":	[-6.154523517672807]
								}, {
									"case":	118,
									"scores":	[-6.154523517672807]
								}, {
									"case":	119,
									"scores":	[-6.154523517672807]
								}, {
									"case":	120,
									"scores":	[-6.154523517672807]
								}, {
									"case":	121,
									"scores":	[-6.154523517672807]
								}, {
									"case":	122,
									"scores":	[-6.154523517672807]
								}, {
									"case":	123,
									"scores":	[-6.154523517672807]
								}, {
									"case":	124,
									"scores":	[-6.154523517672807]
								}, {
									"case":	125,
									"scores":	[-6.154523517672807]
								}, {
									"case":	126,
									"scores":	[-6.154523517672807]
								}, {
									"case":	127,
									"scores":	[-6.154523517672807]
								}, {
									"case":	128,
									"scores":	[-6.154523517672807]
								}, {
									"case":	129,
									"scores":	[-6.154523517672807]
								}, {
									"case":	130,
									"scores":	[-6.154523517672807]
								}, {
									"case":	131,
									"scores":	[-6.154523517672807]
								}, {
									"case":	132,
									"scores":	[-6.154523517672807]
								}, {
									"case":	133,
									"scores":	[-6.154523517672807]
								}, {
									"case":	134,
									"scores":	[-6.154523517672807]
								}, {
									"case":	135,
									"scores":	[-6.154523517672807]
								}, {
									"case":	136,
									"scores":	[-6.154523517672807]
								}, {
									"case":	137,
									"scores":	[-6.154523517672807]
								}, {
									"case":	138,
									"scores":	[-6.154523517672807]
								}, {
									"case":	139,
									"scores":	[-6.154523517672807]
								}, {
									"case":	140,
									"scores":	[-6.154523517672807]
								}, {
									"case":	141,
									"scores":	[-6.154523517672807]
								}, {
									"case":	142,
									"scores":	[-6.154523517672807]
								}, {
									"case":	143,
									"scores":	[-6.154523517672807]
								}, {
									"case":	144,
									"scores":	[-6.154523517672807]
								}, {
									"case":	145,
									"scores":	[-6.154523517672807]
								}, {
									"case":	146,
									"scores":	[-6.154523517672807]
								}, {
									"case":	147,
									"scores":	[-6.154523517672807]
								}, {
									"case":	148,
									"scores":	[-6.154523517672807]
								}, {
									"case":	149,
									"scores":	[-6.154523517672807]
								}, {
									"case":	150,
									"scores":	[-6.154523517672807]
								}, {
									"case":	151,
									"scores":	[-6.154523517672807]
								}, {
									"case":	152,
									"scores":	[-6.154523517672807]
								}, {
									"case":	153,
									"scores":	[-6.154523517672807]
								}, {
									"case":	154,
									"scores":	[-6.154523517672807]
								}, {
									"case":	155,
									"scores":	[-6.154523517672807]
								}, {
									"case":	156,
									"scores":	[-6.154523517672807]
								}, {
									"case":	157,
									"scores":	[-6.154523517672807]
								}, {
									"case":	158,
									"scores":	[-6.154523517672807]
								}, {
									"case":	159,
									"scores":	[-6.154523517672807]
								}, {
									"case":	160,
									"scores":	[-6.154523517672807]
								}, {
									"case":	161,
									"scores":	[-6.154523517672807]
								}, {
									"case":	162,
									"scores":	[-6.154523517672807]
								}, {
									"case":	163,
									"scores":	[-6.154523517672807]
								}, {
									"case":	164,
									"scores":	[-6.154523517672807]
								}, {
									"case":	165,
									"scores":	[-6.154523517672807]
								}, {
									"case":	166,
									"scores":	[-6.154523517672807]
								}, {
									"case":	167,
									"scores":	[-6.154523517672807]
								}, {
									"case":	168,
									"scores":	[-6.154523517672807]
								}, {
									"case":	169,
									"scores":	[-6.154523517672807]
								}, {
									"case":	170,
									"scores":	[-6.154523517672807]
								}, {
									"case":	171,
									"scores":	[-6.154523517672807]
								}, {
									"case":	172,
									"scores":	[-6.154523517672807]
								}, {
									"case":	173,
									"scores":	[-6.154523517672807]
								}, {
									"case":	174,
									"scores":	[-6.154523517672807]
								}, {
									"case":	175,
									"scores":	[-6.154523517672807]
								}, {
									"case":	176,
									"scores":	[-6.154523517672807]
								}, {
									"case":	177,
									"scores":	[-6.154523517672807]
								}, {
									"case":	178,
									"scores":	[-6.154523517672807]
								}, {
									"case":	179,
									"scores":	[-6.154523517672807]
								}, {
									"case":	180,
									"scores":	[-6.154523517672807]
								}, {
									"case":	181,
									"scores":	[-6.154523517672807]
								}, {
									"case":	182,
									"scores":	[-6.154523517672807]
								}, {
									"case":	183,
									"scores":	[-6.154523517672807]
								}, {
									"case":	184,
									"scores":	[-6.154523517672807]
								}, {
									"case":	185,
									"scores":	[-6.154523517672807]
								}, {
									"case":	186,
									"scores":	[-6.154523517672807]
								}, {
									"case":	187,
									"scores":	[-6.154523517672807]
								}, {
									"case":	188,
									"scores":	[-6.154523517672807]
								}, {
									"case":	189,
									"scores":	[-6.154523517672807]
								}, {
									"case":	190,
									"scores":	[-6.154523517672807]
								}, {
									"case":	191,
									"scores":	[-6.154523517672807]
								}, {
									"case":	192,
									"scores":	[-6.154523517672807]
								}, {
									"case":	193,
									"scores":	[-6.154523517672807]
								}, {
									"case":	194,
									"scores":	[-6.154523517672807]
								}, {
									"case":	195,
									"scores":	[-6.154523517672807]
								}, {
									"case":	196,
									"scores":	[-6.154523517672807]
								}, {
									"case":	197,
									"scores":	[-6.154523517672807]
								}, {
									"case":	198,
									"scores":	[-6.154523517672807]
								}, {
									"case":	199,
									"scores":	[-6.154523517672807]
								}, {
									"case":	200,
									"scores":	[-6.154523517672807]
								}, {
									"case":	201,
									"scores":	[-6.154523517672807]
								}, {
									"case":	202,
									"scores":	[-6.154523517672807]
								}, {
									"case":	203,
									"scores":	[-6.154523517672807]
								}, {
									"case":	204,
									"scores":	[-6.154523517672807]
								}, {
									"case":	205,
									"scores":	[-6.154523517672807]
								}, {
									"case":	206,
									"scores":	[-6.154523517672807]
								}, {
									"case":	207,
									"scores":	[-6.154523517672807]
								}, {
									"case":	208,
									"scores":	[-6.154523517672807]
								}, {
									"case":	209,
									"scores":	[-6.154523517672807]
								}, {
									"case":	210,
									"scores":	[-6.154523517672807]
								}, {
									"case":	211,
									"scores":	[-6.154523517672807]
								}, {
									"case":	212,
									"scores":	[-6.154523517672807]
								}, {
									"case":	213,
									"scores":	[-6.154523517672807]
								}, {
									"case":	214,
									"scores":	[-6.154523517672807]
								}, {
									"case":	215,
									"scores":	[-6.154523517672807]
								}, {
									"case":	216,
									"scores":	[-6.154523517672807]
								}, {
									"case":	217,
									"scores":	[-6.154523517672807]
								}, {
									"case":	218,
									"scores":	[-6.154523517672807]
								}, {
									"case":	219,
									"scores":	[-6.154523517672807]
								}, {
									"case":	220,
									"scores":	[-6.154523517672807]
								}, {
									"case":	221,
									"scores":	[-6.154523517672807]
								}, {
									"case":	222,
									"scores":	[-6.154523517672807]
								}, {
									"case":	223,
									"scores":	[-6.154523517672807]
								}, {
									"case":	224,
									"scores":	[-6.154523517672807]
								}, {
									"case":	225,
									"scores":	[-6.154523517672807]
								}, {
									"case":	226,
									"scores":	[-6.154523517672807]
								}, {
									"case":	227,
									"scores":	[-6.154523517672807]
								}, {
									"case":	228,
									"scores":	[-6.154523517672807]
								}, {
									"case":	229,
									"scores":	[-6.154523517672807]
								}, {
									"case":	230,
									"scores":	[-6.154523517672807]
								}, {
									"case":	231,
									"scores":	[-6.154523517672807]
								}, {
									"case":	232,
									"scores":	[-6.154523517672807]
								}, {
									"case":	233,
									"scores":	[-6.154523517672807]
								}, {
									"case":	234,
									"scores":	[-6.154523517672807]
								}, {
									"case":	235,
									"scores":	[-6.154523517672807]
								}, {
									"case":	236,
									"scores":	[-6.154523517672807]
								}, {
									"case":	237,
									"scores":	[-6.154523517672807]
								}, {
									"case":	238,
									"scores":	[-6.154523517672807]
								}, {
									"case":	239,
									"scores":	[-6.154523517672807]
								}, {
									"case":	240,
									"scores":	[-6.154523517672807]
								}, {
									"case":	241,
									"scores":	[-6.154523517672807]
								}, {
									"case":	242,
									"scores":	[-6.154523517672807]
								}, {
									"case":	243,
									"scores":	[-6.154523517672807]
								}, {
									"case":	244,
									"scores":	[-6.154523517672807]
								}, {
									"case":	245,
									"scores":	[-6.154523517672807]
								}, {
									"case":	246,
									"scores":	[-6.154523517672807]
								}, {
									"case":	247,
									"scores":	[-6.154523517672807]
								}, {
									"case":	248,
									"scores":	[-6.154523517672807]
								}, {
									"case":	249,
									"scores":	[-6.154523517672807]
								}, {
									"case":	250,
									"scores":	[-6.154523517672807]
								}, {
									"case":	251,
									"scores":	[-6.154523517672807]
								}, {
									"case":	252,
									"scores":	[-6.154523517672807]
								}, {
									"case":	253,
									"scores":	[-6.154523517672807]
								}, {
									"case":	254,
									"scores":	[-6.154523517672807]
								}, {
									"case":	255,
									"scores":	[-6.154523517672807]
								}, {
									"case":	256,
									"scores":	[-6.154523517672807]
								}, {
									"case":	257,
									"scores":	[-6.154523517672807]
								}, {
									"case":	258,
									"scores":	[-6.154523517672807]
								}, {
									"case":	259,
									"scores":	[-6.154523517672807]
								}, {
									"case":	260,
									"scores":	[-6.154523517672807]
								}, {
									"case":	261,
									"scores":	[-6.154523517672807]
								}, {
									"case":	262,
									"scores":	[-6.154523517672807]
								}, {
									"case":	263,
									"scores":	[-6.154523517672807]
								}, {
									"case":	264,
									"scores":	[-6.154523517672807]
								}, {
									"case":	265,
									"scores":	[-6.154523517672807]
								}, {
									"case":	266,
									"scores":	[-6.154523517672807]
								}, {
									"case":	267,
									"scores":	[-6.154523517672807]
								}, {
									"case":	268,
									"scores":	[-6.154523517672807]
								}, {
									"case":	269,
									"scores":	[-6.154523517672807]
								}, {
									"case":	270,
									"scores":	[-6.154523517672807]
								}, {
									"case":	271,
									"scores":	[-6.154523517672807]
								}, {
									"case":	272,
									"scores":	[-6.154523517672807]
								}, {
									"case":	273,
									"scores":	[-6.154523517672807]
								}, {
									"case":	274,
									"scores":	[-6.154523517672807]
								}, {
									"case":	275,
									"scores":	[-6.154523517672807]
								}, {
									"case":	276,
									"scores":	[-6.154523517672807]
								}, {
									"case":	277,
									"scores":	[-6.154523517672807]
								}, {
									"case":	278,
									"scores":	[-6.154523517672807]
								}, {
									"case":	279,
									"scores":	[-6.154523517672807]
								}, {
									"case":	280,
									"scores":	[-6.154523517672807]
								}, {
									"case":	281,
									"scores":	[-6.154523517672807]
								}, {
									"case":	282,
									"scores":	[-6.154523517672807]
								}, {
									"case":	283,
									"scores":	[-6.154523517672807]
								}, {
									"case":	284,
									"scores":	[-6.154523517672807]
								}, {
									"case":	285,
									"scores":	[-6.154523517672807]
								}, {
									"case":	286,
									"scores":	[-6.154523517672807]
								}, {
									"case":	287,
									"scores":	[-6.154523517672807]
								}, {
									"case":	288,
									"scores":	[-6.154523517672807]
								}, {
									"case":	289,
									"scores":	[-6.154523517672807]
								}, {
									"case":	290,
									"scores":	[-6.154523517672807]
								}, {
									"case":	291,
									"scores":	[-6.154523517672807]
								}, {
									"case":	292,
									"scores":	[-6.154523517672807]
								}, {
									"case":	293,
									"scores":	[-6.154523517672807]
								}, {
									"case":	294,
									"scores":	[-6.154523517672807]
								}, {
									"case":	295,
									"scores":	[-6.154523517672807]
								}, {
									"case":	296,
									"scores":	[-6.154523517672807]
								}, {
									"case":	297,
									"scores":	[-6.154523517672807]
								}, {
									"case":	298,
									"scores":	[-6.154523517672807]
								}, {
									"case":	299,
									"scores":	[-6.154523517672807]
								}, {
									"case":	300,
									"scores":	[-6.154523517672807]
								}, {
									"case":	301,
									"scores":	[-6.154523517672807]
								}, {
									"case":	302,
									"scores":	[-6.154523517672807]
								}, {
									"case":	303,
									"scores":	[-6.154523517672807]
								}, {
									"case":	304,
									"scores":	[-6.154523517672807]
								}, {
									"case":	305,
									"scores":	[-6.154523517672807]
								}, {
									"case":	306,
									"scores":	[-6.154523517672807]
								}, {
									"case":	307,
									"scores":	[-6.154523517672807]
								}, {
									"case":	308,
									"scores":	[-6.154523517672807]
								}, {
									"case":	309,
									"scores":	[-6.154523517672807]
								}, {
									"case":	310,
									"scores":	[-6.154523517672807]
								}, {
									"case":	311,
									"scores":	[-6.154523517672807]
								}, {
									"case":	312,
									"scores":	[-6.154523517672807]
								}, {
									"case":	313,
									"scores":	[-6.154523517672807]
								}, {
									"case":	314,
									"scores":	[-6.154523517672807]
								}, {
									"case":	315,
									"scores":	[-6.154523517672807]
								}, {
									"case":	316,
									"scores":	[-6.154523517672807]
								}, {
									"case":	317,
									"scores":	[-6.154523517672807]
								}, {
									"case":	318,
									"scores":	[-6.154523517672807]
								}, {
									"case":	319,
									"scores":	[-6.154523517672807]
								}, {
									"case":	320,
									"scores":	[-6.154523517672807]
								}, {
									"case":	321,
									"scores":	[-6.154523517672807]
								}, {
									"case":	322,
									"scores":	[-6.154523517672807]
								}, {
									"case":	323,
									"scores":	[-6.154523517672807]
								}, {
									"case":	324,
									"scores":	[-6.154523517672807]
								}, {
									"case":	325,
									"scores":	[-6.154523517672807]
								}, {
									"case":	326,
									"scores":	[-6.154523517672807]
								}, {
									"case":	327,
									"scores":	[-6.154523517672807]
								}, {
									"case":	328,
									"scores":	[-6.154523517672807]
								}, {
									"case":	329,
									"scores":	[-6.154523517672807]
								}, {
									"case":	330,
									"scores":	[-6.154523517672807]
								}, {
									"case":	331,
									"scores":	[-6.154523517672807]
								}, {
									"case":	332,
									"scores":	[-6.154523517672807]
								}, {
									"case":	333,
									"scores":	[-6.154523517672807]
								}, {
									"case":	334,
									"scores":	[-6.154523517672807]
								}, {
									"case":	335,
									"scores":	[-6.154523517672807]
								}, {
									"case":	336,
									"scores":	[-6.154523517672807]
								}, {
									"case":	337,
									"scores":	[-6.154523517672807]
								}, {
									"case":	338,
									"scores":	[-6.154523517672807]
								}, {
									"case":	339,
									"scores":	[-6.154523517672807]
								}, {
									"case":	340,
									"scores":	[-6.154523517672807]
								}, {
									"case":	341,
									"scores":	[-6.154523517672807]
								}, {
									"case":	342,
									"scores":	[-6.154523517672807]
								}, {
									"case":	343,
									"scores":	[-6.154523517672807]
								}, {
									"case":	344,
									"scores":	[-6.154523517672807]
								}, {
									"case":	345,
									"scores":	[-6.154523517672807]
								}, {
									"case":	346,
									"scores":	[-6.154523517672807]
								}, {
									"case":	347,
									"scores":	[-6.154523517672807]
								}, {
									"case":	348,
									"scores":	[-6.154523517672807]
								}, {
									"case":	349,
									"scores":	[-6.154523517672807]
								}, {
									"case":	350,
									"scores":	[-6.154523517672807]
								}, {
									"case":	351,
									"scores":	[-6.154523517672807]
								}, {
									"case":	352,
									"scores":	[-6.154523517672807]
								}, {
									"case":	353,
									"scores":	[-6.154523517672807]
								}, {
									"case":	354,
									"scores":	[-6.154523517672807]
								}, {
									"case":	355,
									"scores":	[-6.154523517672807]
								}, {
									"case":	356,
									"scores":	[-6.154523517672807]
								}, {
									"case":	357,
									"scores":	[-6.154523517672807]
								}, {
									"case":	358,
									"scores":	[-6.154523517672807]
								}, {
									"case":	359,
									"scores":	[-6.154523517672807]
								}, {
									"case":	360,
									"scores":	[-6.154523517672807]
								}, {
									"case":	361,
									"scores":	[-6.154523517672807]
								}, {
									"case":	362,
									"scores":	[-6.154523517672807]
								}, {
									"case":	363,
									"scores":	[-6.154523517672807]
								}, {
									"case":	364,
									"scores":	[-6.154523517672807]
								}, {
									"case":	365,
									"scores":	[-6.154523517672807]
								}, {
									"case":	366,
									"scores":	[-6.154523517672807]
								}, {
									"case":	367,
									"scores":	[-6.154523517672807]
								}, {
									"case":	368,
									"scores":	[-6.154523517672807]
								}, {
									"case":	369,
									"scores":	[-6.154523517672807]
								}, {
									"case":	370,
									"scores":	[-6.154523517672807]
								}, {
									"case":	371,
									"scores":	[-6.154523517672807]
								}, {
									"case":	372,
									"scores":	[-6.154523517672807]
								}, {
									"case":	373,
									"scores":	[-6.154523517672807]
								}, {
									"case":	374,
									"scores":	[-6.154523517672807]
								}, {
									"case":	375,
									"scores":	[-6.154523517672807]
								}, {
									"case":	376,
									"scores":	[-6.154523517672807]
								}, {
									"case":	377,
									"scores":	[-6.154523517672807]
								}, {
									"case":	378,
									"scores":	[-6.154523517672807]
								}, {
									"case":	379,
									"scores":	[-6.154523517672807]
								}, {
									"case":	380,
									"scores":	[-6.154523517672807]
								}, {
									"case":	381,
									"scores":	[-6.154523517672807]
								}, {
									"case":	382,
									"scores":	[-6.154523517672807]
								}, {
									"case":	383,
									"scores":	[-6.154523517672807]
								}, {
									"case":	384,
									"scores":	[-6.154523517672807]
								}, {
									"case":	385,
									"scores":	[-6.154523517672807]
								}, {
									"case":	386,
									"scores":	[-6.154523517672807]
								}, {
									"case":	387,
									"scores":	[-6.154523517672807]
								}, {
									"case":	388,
									"scores":	[-6.154523517672807]
								}, {
									"case":	389,
									"scores":	[-6.154523517672807]
								}, {
									"case":	390,
									"scores":	[-6.154523517672807]
								}, {
									"case":	391,
									"scores":	[-6.154523517672807]
								}, {
									"case":	392,
									"scores":	[-6.154523517672807]
								}, {
									"case":	393,
									"scores":	[-6.154523517672807]
								}, {
									"case":	394,
									"scores":	[-6.154523517672807]
								}, {
									"case":	395,
									"scores":	[-6.154523517672807]
								}, {
									"case":	396,
									"scores":	[-6.154523517672807]
								}, {
									"case":	397,
									"scores":	[-6.154523517672807]
								}, {
									"case":	398,
									"scores":	[-6.154523517672807]
								}, {
									"case":	399,
									"scores":	[-6.154523517672807]
								}, {
									"case":	400,
									"scores":	[-6.154523517672807]
								}, {
									"case":	401,
									"scores":	[-6.154523517672807]
								}, {
									"case":	402,
									"scores":	[-6.154523517672807]
								}, {
									"case":	403,
									"scores":	[-6.154523517672807]
								}, {
									"case":	404,
									"scores":	[-6.154523517672807]
								}, {
									"case":	405,
									"scores":	[-6.154523517672807]
								}, {
									"case":	406,
									"scores":	[-6.154523517672807]
								}, {
									"case":	407,
									"scores":	[-6.154523517672807]
								}, {
									"case":	408,
									"scores":	[-6.154523517672807]
								}, {
									"case":	409,
									"scores":	[-6.154523517672807]
								}, {
									"case":	410,
									"scores":	[-6.154523517672807]
								}, {
									"case":	411,
									"scores":	[-6.154523517672807]
								}, {
									"case":	412,
									"scores":	[-6.154523517672807]
								}, {
									"case":	413,
									"scores":	[-6.154523517672807]
								}, {
									"case":	414,
									"scores":	[-6.154523517672807]
								}, {
									"case":	415,
									"scores":	[-6.154523517672807]
								}, {
									"case":	416,
									"scores":	[-6.154523517672807]
								}, {
									"case":	417,
									"scores":	[-6.154523517672807]
								}, {
									"case":	418,
									"scores":	[-6.154523517672807]
								}, {
									"case":	419,
									"scores":	[-6.154523517672807]
								}, {
									"case":	420,
									"scores":	[-6.154523517672807]
								}, {
									"case":	421,
									"scores":	[-6.154523517672807]
								}, {
									"case":	422,
									"scores":	[-6.154523517672807]
								}, {
									"case":	423,
									"scores":	[-6.154523517672807]
								}, {
									"case":	424,
									"scores":	[-6.154523517672807]
								}, {
									"case":	425,
									"scores":	[-6.154523517672807]
								}, {
									"case":	426,
									"scores":	[-6.154523517672807]
								}, {
									"case":	427,
									"scores":	[-6.154523517672807]
								}, {
									"case":	428,
									"scores":	[-6.154523517672807]
								}, {
									"case":	429,
									"scores":	[-6.154523517672807]
								}, {
									"case":	430,
									"scores":	[-6.154523517672807]
								}, {
									"case":	431,
									"scores":	[-6.154523517672807]
								}, {
									"case":	432,
									"scores":	[-6.154523517672807]
								}, {
									"case":	433,
									"scores":	[-6.154523517672807]
								}, {
									"case":	434,
									"scores":	[-6.154523517672807]
								}, {
									"case":	435,
									"scores":	[-6.154523517672807]
								}, {
									"case":	436,
									"scores":	[-6.154523517672807]
								}, {
									"case":	437,
									"scores":	[-6.154523517672807]
								}, {
									"case":	438,
									"scores":	[-6.154523517672807]
								}, {
									"case":	439,
									"scores":	[-6.154523517672807]
								}, {
									"case":	440,
									"scores":	[-6.154523517672807]
								}, {
									"case":	441,
									"scores":	[-6.154523517672807]
								}, {
									"case":	442,
									"scores":	[-6.154523517672807]
								}, {
									"case":	443,
									"scores":	[-6.154523517672807]
								}, {
									"case":	444,
									"scores":	[-6.154523517672807]
								}, {
									"case":	445,
									"scores":	[-6.154523517672807]
								}, {
									"case":	446,
									"scores":	[-6.154523517672807]
								}, {
									"case":	447,
									"scores":	[-6.154523517672807]
								}, {
									"case":	448,
									"scores":	[-6.154523517672807]
								}, {
									"case":	449,
									"scores":	[-6.154523517672807]
								}, {
									"case":	450,
									"scores":	[-6.154523517672807]
								}, {
									"case":	451,
									"scores":	[-6.154523517672807]
								}, {
									"case":	452,
									"scores":	[-6.154523517672807]
								}, {
									"case":	453,
									"scores":	[-6.154523517672807]
								}, {
									"case":	454,
									"scores":	[-6.154523517672807]
								}, {
									"case":	455,
									"scores":	[-6.154523517672807]
								}, {
									"case":	456,
									"scores":	[-6.154523517672807]
								}, {
									"case":	457,
									"scores":	[-6.154523517672807]
								}, {
									"case":	458,
									"scores":	[-6.154523517672807]
								}, {
									"case":	459,
									"scores":	[-6.154523517672807]
								}, {
									"case":	460,
									"scores":	[-6.154523517672807]
								}, {
									"case":	461,
									"scores":	[-6.154523517672807]
								}, {
									"case":	462,
									"scores":	[-6.154523517672807]
								}, {
									"case":	463,
									"scores":	[-6.154523517672807]
								}, {
									"case":	464,
									"scores":	[-6.154523517672807]
								}, {
									"case":	465,
									"scores":	[-6.154523517672807]
								}, {
									"case":	466,
									"scores":	[-6.154523517672807]
								}, {
									"case":	467,
									"scores":	[-6.154523517672807]
								}, {
									"case":	468,
									"scores":	[-6.154523517672807]
								}, {
									"case":	469,
									"scores":	[-6.154523517672807]
								}, {
									"case":	470,
									"scores":	[-6.154523517672807]
								}, {
									"case":	471,
									"scores":	[-6.154523517672807]
								}, {
									"case":	472,
									"scores":	[-6.154523517672807]
								}, {
									"case":	473,
									"scores":	[-6.154523517672807]
								}, {
									"case":	474,
									"scores":	[-6.154523517672807]
								}, {
									"case":	475,
									"scores":	[-6.154523517672807]
								}, {
									"case":	476,
									"scores":	[-6.154523517672807]
								}, {
									"case":	477,
									"scores":	[-6.154523517672807]
								}, {
									"case":	478,
									"scores":	[-6.154523517672807]
								}, {
									"case":	479,
									"scores":	[-6.154523517672807]
								}, {
									"case":	480,
									"scores":	[-6.154523517672807]
								}, {
									"case":	481,
									"scores":	[-6.154523517672807]
								}, {
									"case":	482,
									"scores":	[-6.154523517672807]
								}, {
									"case":	483,
									"scores":	[-6.154523517672807]
								}, {
									"case":	484,
									"scores":	[-6.154523517672807]
								}, {
									"case":	485,
									"scores":	[-6.154523517672807]
								}, {
									"case":	486,
									"scores":	[-6.154523517672807]
								}, {
									"case":	487,
									"scores":	[-6.154523517672807]
								}, {
									"case":	488,
									"scores":	[-6.154523517672807]
								}, {
									"case":	489,
									"scores":	[-6.154523517672807]
								}, {
									"case":	490,
									"scores":	[-6.154523517672807]
								}, {
									"case":	491,
									"scores":	[-6.154523517672807]
								}, {
									"case":	492,
									"scores":	[-6.154523517672807]
								}, {
									"case":	493,
									"scores":	[-6.154523517672807]
								}, {
									"case":	494,
									"scores":	[-6.154523517672807]
								}, {
									"case":	495,
									"scores":	[-6.154523517672807]
								}, {
									"case":	496,
									"scores":	[-6.154523517672807]
								}, {
									"case":	497,
									"scores":	[-6.154523517672807]
								}, {
									"case":	498,
									"scores":	[-6.154523517672807]
								}, {
									"case":	499,
									"scores":	[-6.154523517672807]
								}, {
									"case":	500,
									"scores":	[-6.154523517672807]
								}, {
									"case":	501,
									"scores":	[-6.154523517672807]
								}, {
									"case":	502,
									"scores":	[-6.154523517672807]
								}, {
									"case":	503,
									"scores":	[-6.154523517672807]
								}, {
									"case":	504,
									"scores":	[-6.154523517672807]
								}, {
									"case":	505,
									"scores":	[-6.154523517672807]
								}, {
									"case":	506,
									"scores":	[-6.154523517672807]
								}, {
									"case":	507,
									"scores":	[-6.154523517672807]
								}, {
									"case":	508,
									"scores":	[-6.154523517672807]
								}, {
									"case":	509,
									"scores":	[-6.154523517672807]
								}, {
									"case":	510,
									"scores":	[-6.154523517672807]
								}, {
									"case":	511,
									"scores":	[-6.154523517672807]
								}, {
									"case":	512,
									"scores":	[-6.154523517672807]
								}, {
									"case":	513,
									"scores":	[-6.154523517672807]
								}, {
									"case":	514,
									"scores":	[-6.154523517672807]
								}, {
									"case":	515,
									"scores":	[-6.154523517672807]
								}, {
									"case":	516,
									"scores":	[-6.154523517672807]
								}, {
									"case":	517,
									"scores":	[-6.154523517672807]
								}, {
									"case":	518,
									"scores":	[-6.154523517672807]
								}, {
									"case":	519,
									"scores":	[-6.154523517672807]
								}, {
									"case":	520,
									"scores":	[-6.154523517672807]
								}, {
									"case":	521,
									"scores":	[-6.154523517672807]
								}, {
									"case":	522,
									"scores":	[-6.154523517672807]
								}, {
									"case":	523,
									"scores":	[-6.154523517672807]
								}, {
									"case":	524,
									"scores":	[-6.154523517672807]
								}, {
									"case":	525,
									"scores":	[-6.154523517672807]
								}, {
									"case":	526,
									"scores":	[-6.154523517672807]
								}, {
									"case":	527,
									"scores":	[-6.154523517672807]
								}, {
									"case":	528,
									"scores":	[-6.154523517672807]
								}, {
									"case":	529,
									"scores":	[-6.154523517672807]
								}, {
									"case":	530,
									"scores":	[-6.154523517672807]
								}, {
									"case":	531,
									"scores":	[-6.154523517672807]
								}, {
									"case":	532,
									"scores":	[-6.154523517672807]
								}, {
									"case":	533,
									"scores":	[-6.154523517672807]
								}, {
									"case":	534,
									"scores":	[-6.154523517672807]
								}, {
									"case":	535,
									"scores":	[-6.154523517672807]
								}, {
									"case":	536,
									"scores":	[-6.154523517672807]
								}, {
									"case":	537,
									"scores":	[-6.154523517672807]
								}, {
									"case":	538,
									"scores":	[-6.154523517672807]
								}, {
									"case":	539,
									"scores":	[-6.154523517672807]
								}, {
									"case":	540,
									"scores":	[-6.154523517672807]
								}, {
									"case":	541,
									"scores":	[-6.154523517672807]
								}, {
									"case":	542,
									"scores":	[-6.154523517672807]
								}, {
									"case":	543,
									"scores":	[-6.154523517672807]
								}, {
									"case":	544,
									"scores":	[-6.154523517672807]
								}, {
									"case":	545,
									"scores":	[-6.154523517672807]
								}, {
									"case":	546,
									"scores":	[-6.154523517672807]
								}, {
									"case":	547,
									"scores":	[-6.154523517672807]
								}, {
									"case":	548,
									"scores":	[-6.154523517672807]
								}, {
									"case":	549,
									"scores":	[-6.154523517672807]
								}, {
									"case":	550,
									"scores":	[-6.154523517672807]
								}, {
									"case":	551,
									"scores":	[-6.154523517672807]
								}, {
									"case":	552,
									"scores":	[-6.154523517672807]
								}, {
									"case":	553,
									"scores":	[-6.154523517672807]
								}, {
									"case":	554,
									"scores":	[-6.154523517672807]
								}, {
									"case":	555,
									"scores":	[-6.154523517672807]
								}, {
									"case":	556,
									"scores":	[-6.154523517672807]
								}, {
									"case":	557,
									"scores":	[-6.154523517672807]
								}, {
									"case":	558,
									"scores":	[-6.154523517672807]
								}, {
									"case":	559,
									"scores":	[-6.154523517672807]
								}, {
									"case":	560,
									"scores":	[-6.154523517672807]
								}, {
									"case":	561,
									"scores":	[-6.154523517672807]
								}, {
									"case":	562,
									"scores":	[-6.154523517672807]
								}, {
									"case":	563,
									"scores":	[-6.154523517672807]
								}, {
									"case":	564,
									"scores":	[-6.154523517672807]
								}, {
									"case":	565,
									"scores":	[-6.154523517672807]
								}, {
									"case":	566,
									"scores":	[-6.154523517672807]
								}, {
									"case":	567,
									"scores":	[-6.154523517672807]
								}, {
									"case":	568,
									"scores":	[-6.154523517672807]
								}, {
									"case":	569,
									"scores":	[-6.154523517672807]
								}, {
									"case":	570,
									"scores":	[-6.154523517672807]
								}, {
									"case":	571,
									"scores":	[-6.154523517672807]
								}, {
									"case":	572,
									"scores":	[-6.154523517672807]
								}, {
									"case":	573,
									"scores":	[-6.154523517672807]
								}, {
									"case":	574,
									"scores":	[-6.154523517672807]
								}, {
									"case":	575,
									"scores":	[-6.154523517672807]
								}, {
									"case":	576,
									"scores":	[-6.154523517672807]
								}, {
									"case":	577,
									"scores":	[-6.154523517672807]
								}, {
									"case":	578,
									"scores":	[-6.154523517672807]
								}, {
									"case":	579,
									"scores":	[-6.154523517672807]
								}, {
									"case":	580,
									"scores":	[-6.154523517672807]
								}, {
									"case":	581,
									"scores":	[-6.154523517672807]
								}, {
									"case":	582,
									"scores":	[-6.154523517672807]
								}, {
									"case":	583,
									"scores":	[-6.154523517672807]
								}, {
									"case":	584,
									"scores":	[-6.154523517672807]
								}, {
									"case":	585,
									"scores":	[-6.154523517672807]
								}, {
									"case":	586,
									"scores":	[-6.154523517672807]
								}, {
									"case":	587,
									"scores":	[-6.154523517672807]
								}, {
									"case":	588,
									"scores":	[-6.154523517672807]
								}, {
									"case":	589,
									"scores":	[-6.154523517672807]
								}, {
									"case":	590,
									"scores":	[-6.154523517672807]
								}, {
									"case":	591,
									"scores":	[-6.154523517672807]
								}, {
									"case":	592,
									"scores":	[-6.154523517672807]
								}, {
									"case":	593,
									"scores":	[-6.154523517672807]
								}, {
									"case":	594,
									"scores":	[-6.154523517672807]
								}, {
									"case":	595,
									"scores":	[-6.154523517672807]
								}, {
									"case":	596,
									"scores":	[-6.154523517672807]
								}, {
									"case":	597,
									"scores":	[-6.154523517672807]
								}, {
									"case":	598,
									"scores":	[-6.154523517672807]
								}, {
									"case":	599,
									"scores":	[-6.154523517672807]
								}, {
									"case":	600,
									"scores":	[-6.154523517672807]
								}, {
									"case":	601,
									"scores":	[-6.154523517672807]
								}, {
									"case":	602,
									"scores":	[-6.154523517672807]
								}, {
									"case":	603,
									"scores":	[-6.154523517672807]
								}, {
									"case":	604,
									"scores":	[-6.154523517672807]
								}, {
									"case":	605,
									"scores":	[-6.154523517672807]
								}, {
									"case":	606,
									"scores":	[-6.154523517672807]
								}, {
									"case":	607,
									"scores":	[-6.154523517672807]
								}, {
									"case":	608,
									"scores":	[-6.154523517672807]
								}, {
									"case":	609,
									"scores":	[-6.154523517672807]
								}, {
									"case":	610,
									"scores":	[-6.154523517672807]
								}, {
									"case":	611,
									"scores":	[-6.154523517672807]
								}, {
									"case":	612,
									"scores":	[-6.154523517672807]
								}, {
									"case":	613,
									"scores":	[-6.154523517672807]
								}, {
									"case":	614,
									"scores":	[-6.154523517672807]
								}, {
									"case":	615,
									"scores":	[-6.154523517672807]
								}, {
									"case":	616,
									"scores":	[-6.154523517672807]
								}, {
									"case":	617,
									"scores":	[-6.154523517672807]
								}, {
									"case":	618,
									"scores":	[-6.154523517672807]
								}, {
									"case":	619,
									"scores":	[-6.154523517672807]
								}, {
									"case":	620,
									"scores":	[-6.154523517672807]
								}, {
									"case":	621,
									"scores":	[-6.154523517672807]
								}, {
									"case":	622,
									"scores":	[-6.154523517672807]
								}, {
									"case":	623,
									"scores":	[-6.154523517672807]
								}, {
									"case":	624,
									"scores":	[-6.154523517672807]
								}, {
									"case":	625,
									"scores":	[-6.154523517672807]
								}, {
									"case":	626,
									"scores":	[-6.154523517672807]
								}, {
									"case":	627,
									"scores":	[-6.154523517672807]
								}, {
									"case":	628,
									"scores":	[-6.154523517672807]
								}, {
									"case":	629,
									"scores":	[-6.154523517672807]
								}, {
									"case":	630,
									"scores":	[-6.154523517672807]
								}, {
									"case":	631,
									"scores":	[-6.154523517672807]
								}, {
									"case":	632,
									"scores":	[-6.154523517672807]
								}, {
									"case":	633,
									"scores":	[-6.154523517672807]
								}, {
									"case":	634,
									"scores":	[-6.154523517672807]
								}, {
									"case":	635,
									"scores":	[-6.154523517672807]
								}, {
									"case":	636,
									"scores":	[-6.154523517672807]
								}, {
									"case":	637,
									"scores":	[-6.154523517672807]
								}, {
									"case":	638,
									"scores":	[-6.154523517672807]
								}, {
									"case":	639,
									"scores":	[-6.154523517672807]
								}, {
									"case":	640,
									"scores":	[-6.154523517672807]
								}, {
									"case":	641,
									"scores":	[-6.154523517672807]
								}, {
									"case":	642,
									"scores":	[-6.154523517672807]
								}, {
									"case":	643,
									"scores":	[-6.154523517672807]
								}, {
									"case":	644,
									"scores":	[-6.154523517672807]
								}, {
									"case":	645,
									"scores":	[-6.154523517672807]
								}, {
									"case":	646,
									"scores":	[-6.154523517672807]
								}, {
									"case":	647,
									"scores":	[-6.154523517672807]
								}, {
									"case":	648,
									"scores":	[-6.154523517672807]
								}, {
									"case":	649,
									"scores":	[-6.154523517672807]
								}, {
									"case":	650,
									"scores":	[-6.154523517672807]
								}, {
									"case":	651,
									"scores":	[-6.154523517672807]
								}, {
									"case":	652,
									"scores":	[-6.154523517672807]
								}, {
									"case":	653,
									"scores":	[-6.154523517672807]
								}, {
									"case":	654,
									"scores":	[-6.154523517672807]
								}, {
									"case":	655,
									"scores":	[-6.154523517672807]
								}, {
									"case":	656,
									"scores":	[-6.154523517672807]
								}, {
									"case":	657,
									"scores":	[-6.154523517672807]
								}, {
									"case":	658,
									"scores":	[-6.154523517672807]
								}, {
									"case":	659,
									"scores":	[-6.154523517672807]
								}, {
									"case":	660,
									"scores":	[-6.154523517672807]
								}, {
									"case":	661,
									"scores":	[-6.154523517672807]
								}, {
									"case":	662,
									"scores":	[-6.154523517672807]
								}, {
									"case":	663,
									"scores":	[-6.154523517672807]
								}, {
									"case":	664,
									"scores":	[-6.154523517672807]
								}, {
									"case":	665,
									"scores":	[-6.154523517672807]
								}, {
									"case":	666,
									"scores":	[-6.154523517672807]
								}, {
									"case":	667,
									"scores":	[-6.154523517672807]
								}, {
									"case":	668,
									"scores":	[-6.154523517672807]
								}, {
									"case":	669,
									"scores":	[-6.154523517672807]
								}, {
									"case":	670,
									"scores":	[-6.154523517672807]
								}, {
									"case":	671,
									"scores":	[-6.154523517672807]
								}, {
									"case":	672,
									"scores":	[-6.154523517672807]
								}, {
									"case":	673,
									"scores":	[-6.154523517672807]
								}, {
									"case":	674,
									"scores":	[-6.154523517672807]
								}, {
									"case":	675,
									"scores":	[-6.154523517672807]
								}, {
									"case":	676,
									"scores":	[-6.154523517672807]
								}, {
									"case":	677,
									"scores":	[-6.154523517672807]
								}, {
									"case":	678,
									"scores":	[-6.154523517672807]
								}, {
									"case":	679,
									"scores":	[-6.154523517672807]
								}, {
									"case":	680,
									"scores":	[-6.154523517672807]
								}, {
									"case":	681,
									"scores":	[-6.154523517672807]
								}, {
									"case":	682,
									"scores":	[-6.154523517672807]
								}]
						}]
				}, {
					"line":	152,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [225, 226, 227], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [], [], [], [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [], [], [], [], [], []],
							"begin_line":	153,
							"begin_column":	0,
							"end_line":	153,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L153\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td->td_imagelength), sizeof (td->td_imagelength), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L153\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td->td_imagelength), sizeof (td->td_imagelength), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L153\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td->td_imagelength), sizeof (td->td_imagelength), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	2,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	3,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	4,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	5,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	6,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	7,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	8,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	9,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	10,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	11,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	12,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	13,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	14,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	15,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	16,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	17,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	18,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	19,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	20,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	21,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	22,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	23,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	24,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	25,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	26,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	27,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	28,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	29,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	30,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	31,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	32,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	33,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	34,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	35,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	36,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	37,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	38,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	39,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	40,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	41,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	42,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	43,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	44,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	45,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	46,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	47,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	48,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	49,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	50,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	51,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	52,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	53,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	54,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	55,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	56,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	57,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	58,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	59,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	60,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	61,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	62,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	63,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	64,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	65,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	66,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	67,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	68,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	69,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	70,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	71,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	72,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	73,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	74,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	75,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	76,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	77,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	78,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	79,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	80,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	81,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	82,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	83,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	84,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	85,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	86,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	87,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	88,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	89,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	90,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	91,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	92,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	93,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	94,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	95,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	96,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	97,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	98,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	99,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	100,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	101,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	102,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	103,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	104,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	105,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	106,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	107,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	108,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	109,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	110,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	111,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	112,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	113,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	114,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	115,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	116,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	117,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	118,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	119,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	120,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	121,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	122,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	123,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	124,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	125,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	126,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	127,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	128,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	129,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	130,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	131,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	132,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	133,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	134,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	135,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	136,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	137,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	138,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	139,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	140,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	141,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	142,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	143,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	144,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	145,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	146,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	147,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	148,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	149,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	150,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	151,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	152,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	153,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	154,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	155,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	156,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	157,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	158,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	159,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	160,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	161,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	162,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	163,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	164,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	165,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	166,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	167,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	168,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	169,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	170,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	171,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	172,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	173,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	174,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	175,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	176,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	177,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	178,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	179,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	180,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	181,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	182,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	183,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	184,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	185,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	186,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	187,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	188,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	189,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	190,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	191,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	192,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	193,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	194,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	195,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	196,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	197,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	198,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	199,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	200,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	201,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	202,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	203,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	204,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	205,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	206,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	207,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	208,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	209,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	210,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	211,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	212,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	213,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	214,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	215,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	216,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	217,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	218,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	219,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	220,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	221,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	222,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	223,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	224,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	225,
									"scores":	[-11.638400225355287, -8.98649102535529, -11.873360512355287, -12.233783204655287, -9.69588645435529, -12.301304777355288, -11.270028427355287, -12.650587027355288, -12.096708930355287, -12.044209230355287, -11.790547430355288, -12.081633630355288, -12.088335330355287, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -11.884757930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.526535630355287, -12.519833930355288, -12.526535630355287, -12.526535630355287, -12.519833930355288, -12.519833930355288, -12.526535630355287, -12.519833930355288, -11.884757930355288, -12.526535630355287, -12.519833930355288, -12.482409530355287]
								}, {
									"case":	226,
									"scores":	[-9.6199542253552863, -6.9680450253552877, -9.85491451235529, -10.215337204655288, -7.6774404543552874, -10.282858777355287, -9.25158242735529, -10.632141027355289, -10.078262930355287, -10.025763230355288, -9.77210143035529, -10.063187630355287, -10.069889330355288, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -9.86631193035529, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.501387930355289, -10.508089630355288, -10.501387930355289, -10.508089630355288, -10.508089630355288, -10.501387930355289, -10.501387930355289, -10.508089630355288, -10.501387930355289, -9.86631193035529, -10.508089630355288, -10.501387930355289, -10.463963530355288]
								}, {
									"case":	227,
									"scores":	[-11.638400225355287, -8.98649102535529, -11.873360512355287, -12.233783204655287, -9.69588645435529, -12.301304777355288, -11.270028427355287, -12.650587027355288, -12.096708930355287, -12.044209230355287, -11.790547430355288, -12.081633630355288, -12.088335330355287, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -11.884757930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.519833930355288, -12.526535630355287, -12.519833930355288, -12.526535630355287, -12.526535630355287, -12.519833930355288, -12.519833930355288, -12.526535630355287, -12.519833930355288, -11.884757930355288, -12.526535630355287, -12.519833930355288, -12.482409530355287]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	153,
							"begin_column":	2,
							"end_line":	153,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L153\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(stripinplane), sizeof (stripinplane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td->td_imagelength), sizeof (td->td_imagelength), &(rows), sizeof (rows), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    stripinplane = (strip % stripsperplane);\n", "{\n}\n", "stripinplane = ((0 * plane) % stripsperplane)", "stripinplane = ((0 * rows) % stripsperplane)", "stripinplane = ((0 * rowsperstrip) % stripsperplane)", "stripinplane = ((0 * size) % stripsperplane)", "stripinplane = ((0 * strip) % stripsperplane)", "stripinplane = ((0 * stripinplane) % stripsperplane)", "stripinplane = ((0 * stripsize) % stripsperplane)", "stripinplane = ((0 * stripsperplane) % stripsperplane)", "stripinplane = ((buf != 0) % stripsperplane)", "stripinplane = ((buf == 0) % stripsperplane)", "stripinplane = ((module != 0) % stripsperplane)", "stripinplane = ((module == 0) % stripsperplane)", "stripinplane = ((plane != 0) % stripsperplane)", "stripinplane = ((plane != rows) % stripsperplane)", "stripinplane = ((plane != stripsize) % stripsperplane)", "stripinplane = ((plane * rows) % stripsperplane)", "stripinplane = ((plane * rowsperstrip) % stripsperplane)", "stripinplane = ((plane * size) % stripsperplane)", "stripinplane = ((plane * strip) % stripsperplane)", "stripinplane = ((plane * stripinplane) % stripsperplane)", "stripinplane = ((plane * stripsize) % stripsperplane)", "stripinplane = ((plane * stripsperplane) % stripsperplane)", "stripinplane = ((plane + 0) % stripsperplane)", "stripinplane = ((plane + rows) % stripsperplane)", "stripinplane = ((plane + stripsize) % stripsperplane)", "stripinplane = ((plane - 0) % stripsperplane)", "stripinplane = ((plane - rows) % stripsperplane)", "stripinplane = ((plane - stripsize) % stripsperplane)", "stripinplane = ((plane == 0) % stripsperplane)", "stripinplane = ((plane == rows) % stripsperplane)", "stripinplane = ((plane == stripsize) % stripsperplane)", "stripinplane = ((rows != 0) % stripsperplane)", "stripinplane = ((rows != stripsize) % stripsperplane)", "stripinplane = ((rows * plane) % stripsperplane)", "stripinplane = ((rows * rowsperstrip) % stripsperplane)", "stripinplane = ((rows * size) % stripsperplane)", "stripinplane = ((rows * strip) % stripsperplane)", "stripinplane = ((rows * stripinplane) % stripsperplane)", "stripinplane = ((rows * stripsize) % stripsperplane)", "stripinplane = ((rows * stripsperplane) % stripsperplane)", "stripinplane = ((rows + 0) % stripsperplane)", "stripinplane = ((rows + stripsize) % stripsperplane)", "stripinplane = ((rows - 0) % stripsperplane)", "stripinplane = ((rows - stripsize) % stripsperplane)", "stripinplane = ((rows == 0) % stripsperplane)", "stripinplane = ((rows == stripsize) % stripsperplane)", "stripinplane = ((rows) % stripsperplane)", "stripinplane = ((rowsperstrip != 0) % stripsperplane)", "stripinplane = ((rowsperstrip != plane) % stripsperplane)", "stripinplane = ((rowsperstrip != rows) % stripsperplane)", "stripinplane = ((rowsperstrip != stripinplane) % stripsperplane)", "stripinplane = ((rowsperstrip != stripsize) % stripsperplane)", "stripinplane = ((rowsperstrip != stripsperplane) % stripsperplane)", "stripinplane = ((rowsperstrip * plane) % stripsperplane)", "stripinplane = ((rowsperstrip * rows) % stripsperplane)", "stripinplane = ((rowsperstrip * size) % stripsperplane)", "stripinplane = ((rowsperstrip * strip) % stripsperplane)", "stripinplane = ((rowsperstrip * stripinplane) % stripsperplane)", "stripinplane = ((rowsperstrip * stripsize) % stripsperplane)", "stripinplane = ((rowsperstrip * stripsperplane) % stripsperplane)", "stripinplane = ((rowsperstrip + 0) % stripsperplane)", "stripinplane = ((rowsperstrip + plane) % stripsperplane)", "stripinplane = ((rowsperstrip + rows) % stripsperplane)", "stripinplane = ((rowsperstrip + stripinplane) % stripsperplane)", "stripinplane = ((rowsperstrip + stripsize) % stripsperplane)", "stripinplane = ((rowsperstrip + stripsperplane) % stripsperplane)", "stripinplane = ((rowsperstrip - 0) % stripsperplane)", "stripinplane = ((rowsperstrip - plane) % stripsperplane)", "stripinplane = ((rowsperstrip - rows) % stripsperplane)", "stripinplane = ((rowsperstrip - stripinplane) % stripsperplane)", "stripinplane = ((rowsperstrip - stripsize) % stripsperplane)", "stripinplane = ((rowsperstrip - stripsperplane) % stripsperplane)", "stripinplane = ((rowsperstrip == 0) % stripsperplane)", "stripinplane = ((rowsperstrip == plane) % stripsperplane)", "stripinplane = ((rowsperstrip == rows) % stripsperplane)", "stripinplane = ((rowsperstrip == stripinplane) % stripsperplane)", "stripinplane = ((rowsperstrip == stripsize) % stripsperplane)", "stripinplane = ((rowsperstrip == stripsperplane) % stripsperplane)", "stripinplane = ((rowsperstrip) % stripsperplane)", "stripinplane = ((size != 0) % stripsperplane)", "stripinplane = ((size != plane) % stripsperplane)", "stripinplane = ((size != rows) % stripsperplane)", "stripinplane = ((size != rowsperstrip) % stripsperplane)", "stripinplane = ((size != stripinplane) % stripsperplane)", "stripinplane = ((size != stripsize) % stripsperplane)", "stripinplane = ((size != stripsperplane) % stripsperplane)", "stripinplane = ((size * plane) % stripsperplane)", "stripinplane = ((size * rows) % stripsperplane)", "stripinplane = ((size * rowsperstrip) % stripsperplane)", "stripinplane = ((size * strip) % stripsperplane)", "stripinplane = ((size * stripinplane) % stripsperplane)", "stripinplane = ((size * stripsize) % stripsperplane)", "stripinplane = ((size * stripsperplane) % stripsperplane)", "stripinplane = ((size + 0) % stripsperplane)", "stripinplane = ((size + plane) % stripsperplane)", "stripinplane = ((size + rows) % stripsperplane)", "stripinplane = ((size + rowsperstrip) % stripsperplane)", "stripinplane = ((size + stripinplane) % stripsperplane)", "stripinplane = ((size + stripsize) % stripsperplane)", "stripinplane = ((size + stripsperplane) % stripsperplane)", "stripinplane = ((size - 0) % stripsperplane)", "stripinplane = ((size - plane) % stripsperplane)", "stripinplane = ((size - rows) % stripsperplane)", "stripinplane = ((size - rowsperstrip) % stripsperplane)", "stripinplane = ((size - stripinplane) % stripsperplane)", "stripinplane = ((size - stripsize) % stripsperplane)", "stripinplane = ((size - stripsperplane) % stripsperplane)", "stripinplane = ((size == 0) % stripsperplane)", "stripinplane = ((size == plane) % stripsperplane)", "stripinplane = ((size == rows) % stripsperplane)", "stripinplane = ((size == rowsperstrip) % stripsperplane)", "stripinplane = ((size == stripinplane) % stripsperplane)", "stripinplane = ((size == stripsize) % stripsperplane)", "stripinplane = ((size == stripsperplane) % stripsperplane)", "stripinplane = ((strip != 0) % stripsperplane)", "stripinplane = ((strip != plane) % stripsperplane)", "stripinplane = ((strip != rows) % stripsperplane)", "stripinplane = ((strip != rowsperstrip) % stripsperplane)", "stripinplane = ((strip != size) % stripsperplane)", "stripinplane = ((strip != stripinplane) % stripsperplane)", "stripinplane = ((strip != stripsize) % stripsperplane)", "stripinplane = ((strip != stripsperplane) % stripsperplane)", "stripinplane = ((strip * plane) % stripsperplane)", "stripinplane = ((strip * rows) % stripsperplane)", "stripinplane = ((strip * rowsperstrip) % stripsperplane)", "stripinplane = ((strip * size) % stripsperplane)", "stripinplane = ((strip * stripinplane) % stripsperplane)", "stripinplane = ((strip * stripsize) % stripsperplane)", "stripinplane = ((strip * stripsperplane) % stripsperplane)", "stripinplane = ((strip + 0) % stripsperplane)", "stripinplane = ((strip + plane) % stripsperplane)", "stripinplane = ((strip + rows) % stripsperplane)", "stripinplane = ((strip + rowsperstrip) % stripsperplane)", "stripinplane = ((strip + size) % stripsperplane)", "stripinplane = ((strip + stripinplane) % stripsperplane)", "stripinplane = ((strip + stripsize) % stripsperplane)", "stripinplane = ((strip + stripsperplane) % stripsperplane)", "stripinplane = ((strip - 0) % stripsperplane)", "stripinplane = ((strip - plane) % stripsperplane)", "stripinplane = ((strip - rows) % stripsperplane)", "stripinplane = ((strip - rowsperstrip) % stripsperplane)", "stripinplane = ((strip - size) % stripsperplane)", "stripinplane = ((strip - stripinplane) % stripsperplane)", "stripinplane = ((strip - stripsize) % stripsperplane)", "stripinplane = ((strip - stripsperplane) % stripsperplane)", "stripinplane = ((strip == 0) % stripsperplane)", "stripinplane = ((strip == plane) % stripsperplane)", "stripinplane = ((strip == rows) % stripsperplane)", "stripinplane = ((strip == rowsperstrip) % stripsperplane)", "stripinplane = ((strip == size) % stripsperplane)", "stripinplane = ((strip == stripinplane) % stripsperplane)", "stripinplane = ((strip == stripsize) % stripsperplane)", "stripinplane = ((strip == stripsperplane) % stripsperplane)", "stripinplane = ((strip) % stripsperplane)", "stripinplane = ((stripinplane != 0) % stripsperplane)", "stripinplane = ((stripinplane != plane) % stripsperplane)", "stripinplane = ((stripinplane != rows) % stripsperplane)", "stripinplane = ((stripinplane != stripsize) % stripsperplane)", "stripinplane = ((stripinplane * plane) % stripsperplane)", "stripinplane = ((stripinplane * rows) % stripsperplane)", "stripinplane = ((stripinplane * rowsperstrip) % stripsperplane)", "stripinplane = ((stripinplane * size) % stripsperplane)", "stripinplane = ((stripinplane * strip) % stripsperplane)", "stripinplane = ((stripinplane * stripsize) % stripsperplane)", "stripinplane = ((stripinplane * stripsperplane) % stripsperplane)", "stripinplane = ((stripinplane + 0) % stripsperplane)", "stripinplane = ((stripinplane + plane) % stripsperplane)", "stripinplane = ((stripinplane + rows) % stripsperplane)", "stripinplane = ((stripinplane + stripsize) % stripsperplane)", "stripinplane = ((stripinplane - 0) % stripsperplane)", "stripinplane = ((stripinplane - plane) % stripsperplane)", "stripinplane = ((stripinplane - rows) % stripsperplane)", "stripinplane = ((stripinplane - stripsize) % stripsperplane)", "stripinplane = ((stripinplane == 0) % stripsperplane)", "stripinplane = ((stripinplane == plane) % stripsperplane)", "stripinplane = ((stripinplane == rows) % stripsperplane)", "stripinplane = ((stripinplane == stripsize) % stripsperplane)", "stripinplane = ((stripinplane) % stripsperplane)", "stripinplane = ((stripsize != 0) % stripsperplane)", "stripinplane = ((stripsize * plane) % stripsperplane)", "stripinplane = ((stripsize * rows) % stripsperplane)", "stripinplane = ((stripsize * rowsperstrip) % stripsperplane)", "stripinplane = ((stripsize * size) % stripsperplane)", "stripinplane = ((stripsize * strip) % stripsperplane)", "stripinplane = ((stripsize * stripinplane) % stripsperplane)", "stripinplane = ((stripsize * stripsperplane) % stripsperplane)", "stripinplane = ((stripsize + 0) % stripsperplane)", "stripinplane = ((stripsize - 0) % stripsperplane)", "stripinplane = ((stripsize == 0) % stripsperplane)", "stripinplane = ((stripsperplane != 0) % stripsperplane)", "stripinplane = ((stripsperplane != plane) % stripsperplane)", "stripinplane = ((stripsperplane != rows) % stripsperplane)", "stripinplane = ((stripsperplane != stripinplane) % stripsperplane)", "stripinplane = ((stripsperplane != stripsize) % stripsperplane)", "stripinplane = ((stripsperplane * plane) % stripsperplane)", "stripinplane = ((stripsperplane * rows) % stripsperplane)", "stripinplane = ((stripsperplane * rowsperstrip) % stripsperplane)", "stripinplane = ((stripsperplane * size) % stripsperplane)", "stripinplane = ((stripsperplane * strip) % stripsperplane)", "stripinplane = ((stripsperplane * stripinplane) % stripsperplane)", "stripinplane = ((stripsperplane * stripsize) % stripsperplane)", "stripinplane = ((stripsperplane + 0) % stripsperplane)", "stripinplane = ((stripsperplane + plane) % stripsperplane)", "stripinplane = ((stripsperplane + rows) % stripsperplane)", "stripinplane = ((stripsperplane + stripinplane) % stripsperplane)", "stripinplane = ((stripsperplane + stripsize) % stripsperplane)", "stripinplane = ((stripsperplane - 0) % stripsperplane)", "stripinplane = ((stripsperplane - plane) % stripsperplane)", "stripinplane = ((stripsperplane - rows) % stripsperplane)", "stripinplane = ((stripsperplane - stripinplane) % stripsperplane)", "stripinplane = ((stripsperplane - stripsize) % stripsperplane)", "stripinplane = ((stripsperplane == 0) % stripsperplane)", "stripinplane = ((stripsperplane == plane) % stripsperplane)", "stripinplane = ((stripsperplane == rows) % stripsperplane)", "stripinplane = ((stripsperplane == stripinplane) % stripsperplane)", "stripinplane = ((stripsperplane == stripsize) % stripsperplane)", "stripinplane = ((stripsperplane) % stripsperplane)", "stripinplane = ((td != 0) % stripsperplane)", "stripinplane = ((td == 0) % stripsperplane)", "stripinplane = ((tif != 0) % stripsperplane)", "stripinplane = ((tif == 0) % stripsperplane)", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip % (0 * plane))", "stripinplane = (strip % (0 * rows))", "stripinplane = (strip % (0 * rowsperstrip))", "stripinplane = (strip % (0 * size))", "stripinplane = (strip % (0 * strip))", "stripinplane = (strip % (0 * stripinplane))", "stripinplane = (strip % (0 * stripsize))", "stripinplane = (strip % (0 * stripsperplane))", "stripinplane = (strip % (buf != 0))", "stripinplane = (strip % (buf == 0))", "stripinplane = (strip % (module != 0))", "stripinplane = (strip % (module == 0))", "stripinplane = (strip % (plane != 0))", "stripinplane = (strip % (plane != rows))", "stripinplane = (strip % (plane != stripsize))", "stripinplane = (strip % (plane * rows))", "stripinplane = (strip % (plane * rowsperstrip))", "stripinplane = (strip % (plane * size))", "stripinplane = (strip % (plane * strip))", "stripinplane = (strip % (plane * stripinplane))", "stripinplane = (strip % (plane * stripsize))", "stripinplane = (strip % (plane * stripsperplane))", "stripinplane = (strip % (plane + 0))", "stripinplane = (strip % (plane + rows))", "stripinplane = (strip % (plane + stripsize))", "stripinplane = (strip % (plane - 0))", "stripinplane = (strip % (plane - rows))", "stripinplane = (strip % (plane - stripsize))", "stripinplane = (strip % (plane == 0))", "stripinplane = (strip % (plane == rows))", "stripinplane = (strip % (plane == stripsize))", "stripinplane = (strip % (rows != 0))", "stripinplane = (strip % (rows != stripsize))", "stripinplane = (strip % (rows * plane))", "stripinplane = (strip % (rows * rowsperstrip))", "stripinplane = (strip % (rows * size))", "stripinplane = (strip % (rows * strip))", "stripinplane = (strip % (rows * stripinplane))", "stripinplane = (strip % (rows * stripsize))", "stripinplane = (strip % (rows * stripsperplane))", "stripinplane = (strip % (rows + 0))", "stripinplane = (strip % (rows + stripsize))", "stripinplane = (strip % (rows - 0))", "stripinplane = (strip % (rows - stripsize))", "stripinplane = (strip % (rows == 0))", "stripinplane = (strip % (rows == stripsize))", "stripinplane = (strip % (rows))", "stripinplane = (strip % (rowsperstrip != 0))", "stripinplane = (strip % (rowsperstrip != plane))", "stripinplane = (strip % (rowsperstrip != rows))", "stripinplane = (strip % (rowsperstrip != stripinplane))", "stripinplane = (strip % (rowsperstrip != stripsize))", "stripinplane = (strip % (rowsperstrip != stripsperplane))", "stripinplane = (strip % (rowsperstrip * plane))", "stripinplane = (strip % (rowsperstrip * rows))", "stripinplane = (strip % (rowsperstrip * size))", "stripinplane = (strip % (rowsperstrip * strip))", "stripinplane = (strip % (rowsperstrip * stripinplane))", "stripinplane = (strip % (rowsperstrip * stripsize))", "stripinplane = (strip % (rowsperstrip * stripsperplane))", "stripinplane = (strip % (rowsperstrip + 0))", "stripinplane = (strip % (rowsperstrip + plane))", "stripinplane = (strip % (rowsperstrip + rows))", "stripinplane = (strip % (rowsperstrip + stripinplane))", "stripinplane = (strip % (rowsperstrip + stripsize))", "stripinplane = (strip % (rowsperstrip + stripsperplane))", "stripinplane = (strip % (rowsperstrip - 0))", "stripinplane = (strip % (rowsperstrip - plane))", "stripinplane = (strip % (rowsperstrip - rows))", "stripinplane = (strip % (rowsperstrip - stripinplane))", "stripinplane = (strip % (rowsperstrip - stripsize))", "stripinplane = (strip % (rowsperstrip - stripsperplane))", "stripinplane = (strip % (rowsperstrip == 0))", "stripinplane = (strip % (rowsperstrip == plane))", "stripinplane = (strip % (rowsperstrip == rows))", "stripinplane = (strip % (rowsperstrip == stripinplane))", "stripinplane = (strip % (rowsperstrip == stripsize))", "stripinplane = (strip % (rowsperstrip == stripsperplane))", "stripinplane = (strip % (rowsperstrip))", "stripinplane = (strip % (size != 0))", "stripinplane = (strip % (size != plane))", "stripinplane = (strip % (size != rows))", "stripinplane = (strip % (size != rowsperstrip))", "stripinplane = (strip % (size != stripinplane))", "stripinplane = (strip % (size != stripsize))", "stripinplane = (strip % (size != stripsperplane))", "stripinplane = (strip % (size * plane))", "stripinplane = (strip % (size * rows))", "stripinplane = (strip % (size * rowsperstrip))", "stripinplane = (strip % (size * strip))", "stripinplane = (strip % (size * stripinplane))", "stripinplane = (strip % (size * stripsize))", "stripinplane = (strip % (size * stripsperplane))", "stripinplane = (strip % (size + 0))", "stripinplane = (strip % (size + plane))", "stripinplane = (strip % (size + rows))", "stripinplane = (strip % (size + rowsperstrip))", "stripinplane = (strip % (size + stripinplane))", "stripinplane = (strip % (size + stripsize))", "stripinplane = (strip % (size + stripsperplane))", "stripinplane = (strip % (size - 0))", "stripinplane = (strip % (size - plane))", "stripinplane = (strip % (size - rows))", "stripinplane = (strip % (size - rowsperstrip))", "stripinplane = (strip % (size - stripinplane))", "stripinplane = (strip % (size - stripsize))", "stripinplane = (strip % (size - stripsperplane))", "stripinplane = (strip % (size == 0))", "stripinplane = (strip % (size == plane))", "stripinplane = (strip % (size == rows))", "stripinplane = (strip % (size == rowsperstrip))", "stripinplane = (strip % (size == stripinplane))", "stripinplane = (strip % (size == stripsize))", "stripinplane = (strip % (size == stripsperplane))", "stripinplane = (strip % (strip != 0))", "stripinplane = (strip % (strip != plane))", "stripinplane = (strip % (strip != rows))", "stripinplane = (strip % (strip != rowsperstrip))", "stripinplane = (strip % (strip != size))", "stripinplane = (strip % (strip != stripinplane))", "stripinplane = (strip % (strip != stripsize))", "stripinplane = (strip % (strip != stripsperplane))", "stripinplane = (strip % (strip * plane))", "stripinplane = (strip % (strip * rows))", "stripinplane = (strip % (strip * rowsperstrip))", "stripinplane = (strip % (strip * size))", "stripinplane = (strip % (strip * stripinplane))", "stripinplane = (strip % (strip * stripsize))", "stripinplane = (strip % (strip * stripsperplane))", "stripinplane = (strip % (strip + 0))", "stripinplane = (strip % (strip + plane))", "stripinplane = (strip % (strip + rows))", "stripinplane = (strip % (strip + rowsperstrip))", "stripinplane = (strip % (strip + size))", "stripinplane = (strip % (strip + stripinplane))", "stripinplane = (strip % (strip + stripsize))", "stripinplane = (strip % (strip + stripsperplane))", "stripinplane = (strip % (strip - 0))", "stripinplane = (strip % (strip - plane))", "stripinplane = (strip % (strip - rows))", "stripinplane = (strip % (strip - rowsperstrip))", "stripinplane = (strip % (strip - size))", "stripinplane = (strip % (strip - stripinplane))", "stripinplane = (strip % (strip - stripsize))", "stripinplane = (strip % (strip - stripsperplane))", "stripinplane = (strip % (strip == 0))", "stripinplane = (strip % (strip == plane))", "stripinplane = (strip % (strip == rows))", "stripinplane = (strip % (strip == rowsperstrip))", "stripinplane = (strip % (strip == size))", "stripinplane = (strip % (strip == stripinplane))", "stripinplane = (strip % (strip == stripsize))", "stripinplane = (strip % (strip == stripsperplane))", "stripinplane = (strip % (strip))", "stripinplane = (strip % (stripinplane != 0))", "stripinplane = (strip % (stripinplane != plane))", "stripinplane = (strip % (stripinplane != rows))", "stripinplane = (strip % (stripinplane != stripsize))", "stripinplane = (strip % (stripinplane * plane))", "stripinplane = (strip % (stripinplane * rows))", "stripinplane = (strip % (stripinplane * rowsperstrip))", "stripinplane = (strip % (stripinplane * size))", "stripinplane = (strip % (stripinplane * strip))", "stripinplane = (strip % (stripinplane * stripsize))", "stripinplane = (strip % (stripinplane * stripsperplane))", "stripinplane = (strip % (stripinplane + 0))", "stripinplane = (strip % (stripinplane + plane))", "stripinplane = (strip % (stripinplane + rows))", "stripinplane = (strip % (stripinplane + stripsize))", "stripinplane = (strip % (stripinplane - 0))", "stripinplane = (strip % (stripinplane - plane))", "stripinplane = (strip % (stripinplane - rows))", "stripinplane = (strip % (stripinplane - stripsize))", "stripinplane = (strip % (stripinplane == 0))", "stripinplane = (strip % (stripinplane == plane))", "stripinplane = (strip % (stripinplane == rows))", "stripinplane = (strip % (stripinplane == stripsize))", "stripinplane = (strip % (stripinplane))", "stripinplane = (strip % (stripsize != 0))", "stripinplane = (strip % (stripsize * plane))", "stripinplane = (strip % (stripsize * rows))", "stripinplane = (strip % (stripsize * rowsperstrip))", "stripinplane = (strip % (stripsize * size))", "stripinplane = (strip % (stripsize * strip))", "stripinplane = (strip % (stripsize * stripinplane))", "stripinplane = (strip % (stripsize * stripsperplane))", "stripinplane = (strip % (stripsize + 0))", "stripinplane = (strip % (stripsize - 0))", "stripinplane = (strip % (stripsize == 0))", "stripinplane = (strip % (stripsperplane != 0))", "stripinplane = (strip % (stripsperplane != plane))", "stripinplane = (strip % (stripsperplane != rows))", "stripinplane = (strip % (stripsperplane != stripinplane))", "stripinplane = (strip % (stripsperplane != stripsize))", "stripinplane = (strip % (stripsperplane * plane))", "stripinplane = (strip % (stripsperplane * rows))", "stripinplane = (strip % (stripsperplane * rowsperstrip))", "stripinplane = (strip % (stripsperplane * size))", "stripinplane = (strip % (stripsperplane * strip))", "stripinplane = (strip % (stripsperplane * stripinplane))", "stripinplane = (strip % (stripsperplane * stripsize))", "stripinplane = (strip % (stripsperplane + 0))", "stripinplane = (strip % (stripsperplane + plane))", "stripinplane = (strip % (stripsperplane + rows))", "stripinplane = (strip % (stripsperplane + stripinplane))", "stripinplane = (strip % (stripsperplane + stripsize))", "stripinplane = (strip % (stripsperplane - 0))", "stripinplane = (strip % (stripsperplane - plane))", "stripinplane = (strip % (stripsperplane - rows))", "stripinplane = (strip % (stripsperplane - stripinplane))", "stripinplane = (strip % (stripsperplane - stripsize))", "stripinplane = (strip % (stripsperplane == 0))", "stripinplane = (strip % (stripsperplane == plane))", "stripinplane = (strip % (stripsperplane == rows))", "stripinplane = (strip % (stripsperplane == stripinplane))", "stripinplane = (strip % (stripsperplane == stripsize))", "stripinplane = (strip % (stripsperplane))", "stripinplane = (strip % (td != 0))", "stripinplane = (strip % (td == 0))", "stripinplane = (strip % (tif != 0))", "stripinplane = (strip % (tif == 0))", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4735033633552872, -5.3502851683552874, -6.8626262327552876, -8.01142400165529, -5.7607099137552877, -6.9734788023552881, -6.1117716823552879, -7.4579688023552873, -7.3247137303552874, -8.0207955303552865, -6.9072241303552877, -7.2178434303552876, -7.5666326303552873, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.3696825453552872, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -7.7292508303552871, -8.07804003035529, -7.7292508303552871, -8.07804003035529, -8.07804003035529, -7.7292508303552871, -7.7292508303552871, -8.07804003035529, -7.7292508303552871, -7.3696825453552872, -8.07804003035529, -7.7292508303552871, -8.53220293035529]
								}, {
									"case":	2,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	3,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	4,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	5,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	6,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	7,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	8,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	9,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	10,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	11,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	12,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	13,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	14,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	15,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	16,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	17,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	18,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	19,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	20,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	21,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	22,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	23,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	24,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	25,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	26,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	27,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	28,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	29,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	30,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	31,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	32,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	33,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	34,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	35,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	36,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	37,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	38,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	39,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	40,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	41,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	42,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	43,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	44,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	45,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	46,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	47,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	48,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	49,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	50,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	51,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	52,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	53,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	54,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	55,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	56,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	57,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	58,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	59,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	60,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	61,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	62,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	63,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	64,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	65,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	66,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	67,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	68,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	69,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	70,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	71,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	72,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	73,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	74,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	75,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	76,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	77,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	78,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	79,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	80,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	81,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	82,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	83,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	84,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	85,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	86,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	87,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	88,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	89,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	90,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	91,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	92,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	93,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	94,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	95,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	96,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	97,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	98,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	99,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	100,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	101,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	102,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	103,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	104,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	105,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	106,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	107,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	108,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	109,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	110,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	111,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	112,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	113,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	114,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	115,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	116,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	117,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	118,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	119,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	120,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	121,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	122,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	123,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	124,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	125,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	126,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	127,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	128,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	129,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	130,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	131,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	132,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	133,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	134,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	135,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	136,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	137,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	138,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	139,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	140,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	141,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	142,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	143,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	144,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	145,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	146,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	147,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	148,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	149,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	150,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	151,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	152,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	153,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	154,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	155,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	156,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	157,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	158,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	159,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	160,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	161,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	162,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	163,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	164,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	165,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	166,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	167,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	168,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	169,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	170,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	171,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	172,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	173,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	174,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	175,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	176,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	177,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	178,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	179,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	180,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	181,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	182,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	183,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	184,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	185,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	186,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	187,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	188,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	189,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	190,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	191,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	192,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	193,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	194,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	195,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	196,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	197,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	198,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	199,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	200,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	201,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	202,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	203,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	204,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	205,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	206,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	207,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	208,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	209,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	210,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	211,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	212,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	213,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	214,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	215,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	216,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	217,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	218,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	219,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	220,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	221,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	222,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	223,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	224,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	225,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	226,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	227,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	228,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	229,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	230,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	231,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	232,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	233,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	234,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	235,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	236,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	237,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	238,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	239,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	240,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	241,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	242,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	243,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	244,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	245,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	246,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	247,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	248,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	249,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	250,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	251,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	252,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	253,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	254,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	255,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	256,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	257,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	258,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	259,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	260,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	261,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	262,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	263,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	264,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	265,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	266,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	267,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	268,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	269,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	270,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	271,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	272,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	273,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	274,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	275,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	276,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	277,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	278,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	279,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	280,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	281,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	282,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	283,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	284,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	285,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	286,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	287,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	288,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	289,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	290,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	291,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	292,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	293,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	294,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	295,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	296,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	297,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	298,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	299,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	300,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	301,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	302,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	303,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	304,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	305,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	306,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	307,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	308,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	309,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	310,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	311,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	312,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	313,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	314,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	315,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	316,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	317,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	318,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	319,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	320,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	321,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	322,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	323,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	324,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	325,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	326,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	327,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	328,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	329,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	330,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	331,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	332,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	333,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	334,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	335,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	336,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	337,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	338,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	339,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	340,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	341,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	342,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	343,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	344,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	345,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	346,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	347,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	348,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	349,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	350,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	351,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	352,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	353,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	354,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	355,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	356,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	357,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	358,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	359,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	360,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	361,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	362,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	363,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	364,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	365,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	366,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	367,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	368,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	369,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	370,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	371,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	372,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	373,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	374,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	375,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	376,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	377,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	378,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	379,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	380,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	381,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	382,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	383,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	384,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	385,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	386,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	387,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	388,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	389,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	390,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	391,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	392,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	393,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	394,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	395,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	396,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	397,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	398,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	399,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	400,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	401,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	402,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	403,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	404,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	405,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	406,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	407,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	408,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	409,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	410,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	411,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	412,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	413,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	414,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	415,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	416,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	417,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	418,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	419,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	420,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	421,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	422,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	423,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	424,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	425,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	426,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	427,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	428,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	429,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	430,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	431,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	432,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	433,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	434,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	435,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	436,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	437,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	438,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	439,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	440,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	441,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	442,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	443,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	444,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	445,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	446,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	447,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	448,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	449,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	450,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	451,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	452,
									"scores":	[-6.1343208103552875]
								}]
						}]
				}, {
					"line":	153,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [225, 226, 227], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [], [], [], [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [], [], [], [], [], []],
							"begin_line":	154,
							"begin_column":	0,
							"end_line":	154,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L154\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L154\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L154\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.114118103037768]
								}, {
									"case":	2,
									"scores":	[-6.114118103037768]
								}, {
									"case":	3,
									"scores":	[-6.114118103037768]
								}, {
									"case":	4,
									"scores":	[-6.114118103037768]
								}, {
									"case":	5,
									"scores":	[-6.114118103037768]
								}, {
									"case":	6,
									"scores":	[-6.114118103037768]
								}, {
									"case":	7,
									"scores":	[-6.114118103037768]
								}, {
									"case":	8,
									"scores":	[-6.114118103037768]
								}, {
									"case":	9,
									"scores":	[-6.114118103037768]
								}, {
									"case":	10,
									"scores":	[-6.114118103037768]
								}, {
									"case":	11,
									"scores":	[-6.114118103037768]
								}, {
									"case":	12,
									"scores":	[-6.114118103037768]
								}, {
									"case":	13,
									"scores":	[-6.114118103037768]
								}, {
									"case":	14,
									"scores":	[-6.114118103037768]
								}, {
									"case":	15,
									"scores":	[-6.114118103037768]
								}, {
									"case":	16,
									"scores":	[-6.114118103037768]
								}, {
									"case":	17,
									"scores":	[-6.114118103037768]
								}, {
									"case":	18,
									"scores":	[-6.114118103037768]
								}, {
									"case":	19,
									"scores":	[-6.114118103037768]
								}, {
									"case":	20,
									"scores":	[-6.114118103037768]
								}, {
									"case":	21,
									"scores":	[-6.114118103037768]
								}, {
									"case":	22,
									"scores":	[-6.114118103037768]
								}, {
									"case":	23,
									"scores":	[-6.114118103037768]
								}, {
									"case":	24,
									"scores":	[-6.114118103037768]
								}, {
									"case":	25,
									"scores":	[-6.114118103037768]
								}, {
									"case":	26,
									"scores":	[-6.114118103037768]
								}, {
									"case":	27,
									"scores":	[-6.114118103037768]
								}, {
									"case":	28,
									"scores":	[-6.114118103037768]
								}, {
									"case":	29,
									"scores":	[-6.114118103037768]
								}, {
									"case":	30,
									"scores":	[-6.114118103037768]
								}, {
									"case":	31,
									"scores":	[-6.114118103037768]
								}, {
									"case":	32,
									"scores":	[-6.114118103037768]
								}, {
									"case":	33,
									"scores":	[-6.114118103037768]
								}, {
									"case":	34,
									"scores":	[-6.114118103037768]
								}, {
									"case":	35,
									"scores":	[-6.114118103037768]
								}, {
									"case":	36,
									"scores":	[-6.114118103037768]
								}, {
									"case":	37,
									"scores":	[-6.114118103037768]
								}, {
									"case":	38,
									"scores":	[-6.114118103037768]
								}, {
									"case":	39,
									"scores":	[-6.114118103037768]
								}, {
									"case":	40,
									"scores":	[-6.114118103037768]
								}, {
									"case":	41,
									"scores":	[-6.114118103037768]
								}, {
									"case":	42,
									"scores":	[-6.114118103037768]
								}, {
									"case":	43,
									"scores":	[-6.114118103037768]
								}, {
									"case":	44,
									"scores":	[-6.114118103037768]
								}, {
									"case":	45,
									"scores":	[-6.114118103037768]
								}, {
									"case":	46,
									"scores":	[-6.114118103037768]
								}, {
									"case":	47,
									"scores":	[-6.114118103037768]
								}, {
									"case":	48,
									"scores":	[-6.114118103037768]
								}, {
									"case":	49,
									"scores":	[-6.114118103037768]
								}, {
									"case":	50,
									"scores":	[-6.114118103037768]
								}, {
									"case":	51,
									"scores":	[-6.114118103037768]
								}, {
									"case":	52,
									"scores":	[-6.114118103037768]
								}, {
									"case":	53,
									"scores":	[-6.114118103037768]
								}, {
									"case":	54,
									"scores":	[-6.114118103037768]
								}, {
									"case":	55,
									"scores":	[-6.114118103037768]
								}, {
									"case":	56,
									"scores":	[-6.114118103037768]
								}, {
									"case":	57,
									"scores":	[-6.114118103037768]
								}, {
									"case":	58,
									"scores":	[-6.114118103037768]
								}, {
									"case":	59,
									"scores":	[-6.114118103037768]
								}, {
									"case":	60,
									"scores":	[-6.114118103037768]
								}, {
									"case":	61,
									"scores":	[-6.114118103037768]
								}, {
									"case":	62,
									"scores":	[-6.114118103037768]
								}, {
									"case":	63,
									"scores":	[-6.114118103037768]
								}, {
									"case":	64,
									"scores":	[-6.114118103037768]
								}, {
									"case":	65,
									"scores":	[-6.114118103037768]
								}, {
									"case":	66,
									"scores":	[-6.114118103037768]
								}, {
									"case":	67,
									"scores":	[-6.114118103037768]
								}, {
									"case":	68,
									"scores":	[-6.114118103037768]
								}, {
									"case":	69,
									"scores":	[-6.114118103037768]
								}, {
									"case":	70,
									"scores":	[-6.114118103037768]
								}, {
									"case":	71,
									"scores":	[-6.114118103037768]
								}, {
									"case":	72,
									"scores":	[-6.114118103037768]
								}, {
									"case":	73,
									"scores":	[-6.114118103037768]
								}, {
									"case":	74,
									"scores":	[-6.114118103037768]
								}, {
									"case":	75,
									"scores":	[-6.114118103037768]
								}, {
									"case":	76,
									"scores":	[-6.114118103037768]
								}, {
									"case":	77,
									"scores":	[-6.114118103037768]
								}, {
									"case":	78,
									"scores":	[-6.114118103037768]
								}, {
									"case":	79,
									"scores":	[-6.114118103037768]
								}, {
									"case":	80,
									"scores":	[-6.114118103037768]
								}, {
									"case":	81,
									"scores":	[-6.114118103037768]
								}, {
									"case":	82,
									"scores":	[-6.114118103037768]
								}, {
									"case":	83,
									"scores":	[-6.114118103037768]
								}, {
									"case":	84,
									"scores":	[-6.114118103037768]
								}, {
									"case":	85,
									"scores":	[-6.114118103037768]
								}, {
									"case":	86,
									"scores":	[-6.114118103037768]
								}, {
									"case":	87,
									"scores":	[-6.114118103037768]
								}, {
									"case":	88,
									"scores":	[-6.114118103037768]
								}, {
									"case":	89,
									"scores":	[-6.114118103037768]
								}, {
									"case":	90,
									"scores":	[-6.114118103037768]
								}, {
									"case":	91,
									"scores":	[-6.114118103037768]
								}, {
									"case":	92,
									"scores":	[-6.114118103037768]
								}, {
									"case":	93,
									"scores":	[-6.114118103037768]
								}, {
									"case":	94,
									"scores":	[-6.114118103037768]
								}, {
									"case":	95,
									"scores":	[-6.114118103037768]
								}, {
									"case":	96,
									"scores":	[-6.114118103037768]
								}, {
									"case":	97,
									"scores":	[-6.114118103037768]
								}, {
									"case":	98,
									"scores":	[-6.114118103037768]
								}, {
									"case":	99,
									"scores":	[-6.114118103037768]
								}, {
									"case":	100,
									"scores":	[-6.114118103037768]
								}, {
									"case":	101,
									"scores":	[-6.114118103037768]
								}, {
									"case":	102,
									"scores":	[-6.114118103037768]
								}, {
									"case":	103,
									"scores":	[-6.114118103037768]
								}, {
									"case":	104,
									"scores":	[-6.114118103037768]
								}, {
									"case":	105,
									"scores":	[-6.114118103037768]
								}, {
									"case":	106,
									"scores":	[-6.114118103037768]
								}, {
									"case":	107,
									"scores":	[-6.114118103037768]
								}, {
									"case":	108,
									"scores":	[-6.114118103037768]
								}, {
									"case":	109,
									"scores":	[-6.114118103037768]
								}, {
									"case":	110,
									"scores":	[-6.114118103037768]
								}, {
									"case":	111,
									"scores":	[-6.114118103037768]
								}, {
									"case":	112,
									"scores":	[-6.114118103037768]
								}, {
									"case":	113,
									"scores":	[-6.114118103037768]
								}, {
									"case":	114,
									"scores":	[-6.114118103037768]
								}, {
									"case":	115,
									"scores":	[-6.114118103037768]
								}, {
									"case":	116,
									"scores":	[-6.114118103037768]
								}, {
									"case":	117,
									"scores":	[-6.114118103037768]
								}, {
									"case":	118,
									"scores":	[-6.114118103037768]
								}, {
									"case":	119,
									"scores":	[-6.114118103037768]
								}, {
									"case":	120,
									"scores":	[-6.114118103037768]
								}, {
									"case":	121,
									"scores":	[-6.114118103037768]
								}, {
									"case":	122,
									"scores":	[-6.114118103037768]
								}, {
									"case":	123,
									"scores":	[-6.114118103037768]
								}, {
									"case":	124,
									"scores":	[-6.114118103037768]
								}, {
									"case":	125,
									"scores":	[-6.114118103037768]
								}, {
									"case":	126,
									"scores":	[-6.114118103037768]
								}, {
									"case":	127,
									"scores":	[-6.114118103037768]
								}, {
									"case":	128,
									"scores":	[-6.114118103037768]
								}, {
									"case":	129,
									"scores":	[-6.114118103037768]
								}, {
									"case":	130,
									"scores":	[-6.114118103037768]
								}, {
									"case":	131,
									"scores":	[-6.114118103037768]
								}, {
									"case":	132,
									"scores":	[-6.114118103037768]
								}, {
									"case":	133,
									"scores":	[-6.114118103037768]
								}, {
									"case":	134,
									"scores":	[-6.114118103037768]
								}, {
									"case":	135,
									"scores":	[-6.114118103037768]
								}, {
									"case":	136,
									"scores":	[-6.114118103037768]
								}, {
									"case":	137,
									"scores":	[-6.114118103037768]
								}, {
									"case":	138,
									"scores":	[-6.114118103037768]
								}, {
									"case":	139,
									"scores":	[-6.114118103037768]
								}, {
									"case":	140,
									"scores":	[-6.114118103037768]
								}, {
									"case":	141,
									"scores":	[-6.114118103037768]
								}, {
									"case":	142,
									"scores":	[-6.114118103037768]
								}, {
									"case":	143,
									"scores":	[-6.114118103037768]
								}, {
									"case":	144,
									"scores":	[-6.114118103037768]
								}, {
									"case":	145,
									"scores":	[-6.114118103037768]
								}, {
									"case":	146,
									"scores":	[-6.114118103037768]
								}, {
									"case":	147,
									"scores":	[-6.114118103037768]
								}, {
									"case":	148,
									"scores":	[-6.114118103037768]
								}, {
									"case":	149,
									"scores":	[-6.114118103037768]
								}, {
									"case":	150,
									"scores":	[-6.114118103037768]
								}, {
									"case":	151,
									"scores":	[-6.114118103037768]
								}, {
									"case":	152,
									"scores":	[-6.114118103037768]
								}, {
									"case":	153,
									"scores":	[-6.114118103037768]
								}, {
									"case":	154,
									"scores":	[-6.114118103037768]
								}, {
									"case":	155,
									"scores":	[-6.114118103037768]
								}, {
									"case":	156,
									"scores":	[-6.114118103037768]
								}, {
									"case":	157,
									"scores":	[-6.114118103037768]
								}, {
									"case":	158,
									"scores":	[-6.114118103037768]
								}, {
									"case":	159,
									"scores":	[-6.114118103037768]
								}, {
									"case":	160,
									"scores":	[-6.114118103037768]
								}, {
									"case":	161,
									"scores":	[-6.114118103037768]
								}, {
									"case":	162,
									"scores":	[-6.114118103037768]
								}, {
									"case":	163,
									"scores":	[-6.114118103037768]
								}, {
									"case":	164,
									"scores":	[-6.114118103037768]
								}, {
									"case":	165,
									"scores":	[-6.114118103037768]
								}, {
									"case":	166,
									"scores":	[-6.114118103037768]
								}, {
									"case":	167,
									"scores":	[-6.114118103037768]
								}, {
									"case":	168,
									"scores":	[-6.114118103037768]
								}, {
									"case":	169,
									"scores":	[-6.114118103037768]
								}, {
									"case":	170,
									"scores":	[-6.114118103037768]
								}, {
									"case":	171,
									"scores":	[-6.114118103037768]
								}, {
									"case":	172,
									"scores":	[-6.114118103037768]
								}, {
									"case":	173,
									"scores":	[-6.114118103037768]
								}, {
									"case":	174,
									"scores":	[-6.114118103037768]
								}, {
									"case":	175,
									"scores":	[-6.114118103037768]
								}, {
									"case":	176,
									"scores":	[-6.114118103037768]
								}, {
									"case":	177,
									"scores":	[-6.114118103037768]
								}, {
									"case":	178,
									"scores":	[-6.114118103037768]
								}, {
									"case":	179,
									"scores":	[-6.114118103037768]
								}, {
									"case":	180,
									"scores":	[-6.114118103037768]
								}, {
									"case":	181,
									"scores":	[-6.114118103037768]
								}, {
									"case":	182,
									"scores":	[-6.114118103037768]
								}, {
									"case":	183,
									"scores":	[-6.114118103037768]
								}, {
									"case":	184,
									"scores":	[-6.114118103037768]
								}, {
									"case":	185,
									"scores":	[-6.114118103037768]
								}, {
									"case":	186,
									"scores":	[-6.114118103037768]
								}, {
									"case":	187,
									"scores":	[-6.114118103037768]
								}, {
									"case":	188,
									"scores":	[-6.114118103037768]
								}, {
									"case":	189,
									"scores":	[-6.114118103037768]
								}, {
									"case":	190,
									"scores":	[-6.114118103037768]
								}, {
									"case":	191,
									"scores":	[-6.114118103037768]
								}, {
									"case":	192,
									"scores":	[-6.114118103037768]
								}, {
									"case":	193,
									"scores":	[-6.114118103037768]
								}, {
									"case":	194,
									"scores":	[-6.114118103037768]
								}, {
									"case":	195,
									"scores":	[-6.114118103037768]
								}, {
									"case":	196,
									"scores":	[-6.114118103037768]
								}, {
									"case":	197,
									"scores":	[-6.114118103037768]
								}, {
									"case":	198,
									"scores":	[-6.114118103037768]
								}, {
									"case":	199,
									"scores":	[-6.114118103037768]
								}, {
									"case":	200,
									"scores":	[-6.114118103037768]
								}, {
									"case":	201,
									"scores":	[-6.114118103037768]
								}, {
									"case":	202,
									"scores":	[-6.114118103037768]
								}, {
									"case":	203,
									"scores":	[-6.114118103037768]
								}, {
									"case":	204,
									"scores":	[-6.114118103037768]
								}, {
									"case":	205,
									"scores":	[-6.114118103037768]
								}, {
									"case":	206,
									"scores":	[-6.114118103037768]
								}, {
									"case":	207,
									"scores":	[-6.114118103037768]
								}, {
									"case":	208,
									"scores":	[-6.114118103037768]
								}, {
									"case":	209,
									"scores":	[-6.114118103037768]
								}, {
									"case":	210,
									"scores":	[-6.114118103037768]
								}, {
									"case":	211,
									"scores":	[-6.114118103037768]
								}, {
									"case":	212,
									"scores":	[-6.114118103037768]
								}, {
									"case":	213,
									"scores":	[-6.114118103037768]
								}, {
									"case":	214,
									"scores":	[-6.114118103037768]
								}, {
									"case":	215,
									"scores":	[-6.114118103037768]
								}, {
									"case":	216,
									"scores":	[-6.114118103037768]
								}, {
									"case":	217,
									"scores":	[-6.114118103037768]
								}, {
									"case":	218,
									"scores":	[-6.114118103037768]
								}, {
									"case":	219,
									"scores":	[-6.114118103037768]
								}, {
									"case":	220,
									"scores":	[-6.114118103037768]
								}, {
									"case":	221,
									"scores":	[-6.114118103037768]
								}, {
									"case":	222,
									"scores":	[-6.114118103037768]
								}, {
									"case":	223,
									"scores":	[-6.114118103037768]
								}, {
									"case":	224,
									"scores":	[-6.114118103037768]
								}, {
									"case":	225,
									"scores":	[-11.194345411037768, -8.96556121103777, -11.852018354037767, -12.213580497337768, -9.67568374703777, -9.56363613403777, -12.497566320037768, -11.249825720037768, -12.044163483037767, -12.281102070037768, -12.499631223037769, -12.061430923037769, -12.068132623037767, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -11.864555223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.506332923037768, -12.499631223037769, -12.506332923037768, -12.506332923037768, -12.499631223037769, -12.499631223037769, -12.506332923037768, -12.499631223037769, -11.864555223037769, -12.506332923037768, -12.499631223037769, -12.462206823037768]
								}, {
									"case":	226,
									"scores":	[-9.1758994110377667, -6.9471152110377679, -9.83357235403777, -10.195134497337769, -7.6572377470377679, -7.5451901340377683, -10.479120320037769, -9.23137972003777, -10.025717483037768, -10.262656070037767, -10.48118522303777, -10.042984923037768, -10.049686623037768, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -9.84610922303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.48118522303777, -10.487886923037768, -10.48118522303777, -10.487886923037768, -10.487886923037768, -10.48118522303777, -10.48118522303777, -10.487886923037768, -10.48118522303777, -9.84610922303777, -10.487886923037768, -10.48118522303777, -10.443760823037769]
								}, {
									"case":	227,
									"scores":	[-11.194345411037768, -8.96556121103777, -11.852018354037767, -12.213580497337768, -9.67568374703777, -9.56363613403777, -12.497566320037768, -11.249825720037768, -12.044163483037767, -12.281102070037768, -12.499631223037769, -12.061430923037769, -12.068132623037767, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -11.864555223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.499631223037769, -12.506332923037768, -12.499631223037769, -12.506332923037768, -12.506332923037768, -12.499631223037769, -12.499631223037769, -12.506332923037768, -12.499631223037769, -11.864555223037769, -12.506332923037768, -12.499631223037769, -12.462206823037768]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	154,
							"begin_column":	2,
							"end_line":	154,
							"end_column":	29,
							"patch_codes":	["if (!__is_neg(\"\", \"L154\", 45, &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(size), sizeof (size), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    plane = (strip / stripsperplane);\n", "{\n}\n", "plane = ((0 * plane) / stripsperplane)", "plane = ((0 * rows) / stripsperplane)", "plane = ((0 * rowsperstrip) / stripsperplane)", "plane = ((0 * size) / stripsperplane)", "plane = ((0 * strip) / stripsperplane)", "plane = ((0 * stripinplane) / stripsperplane)", "plane = ((0 * stripsize) / stripsperplane)", "plane = ((0 * stripsperplane) / stripsperplane)", "plane = ((buf != 0) / stripsperplane)", "plane = ((buf == 0) / stripsperplane)", "plane = ((module != 0) / stripsperplane)", "plane = ((module == 0) / stripsperplane)", "plane = ((plane != 0) / stripsperplane)", "plane = ((plane != rows) / stripsperplane)", "plane = ((plane != stripsize) / stripsperplane)", "plane = ((plane * rows) / stripsperplane)", "plane = ((plane * rowsperstrip) / stripsperplane)", "plane = ((plane * size) / stripsperplane)", "plane = ((plane * strip) / stripsperplane)", "plane = ((plane * stripinplane) / stripsperplane)", "plane = ((plane * stripsize) / stripsperplane)", "plane = ((plane * stripsperplane) / stripsperplane)", "plane = ((plane + 0) / stripsperplane)", "plane = ((plane + rows) / stripsperplane)", "plane = ((plane + stripsize) / stripsperplane)", "plane = ((plane - 0) / stripsperplane)", "plane = ((plane - rows) / stripsperplane)", "plane = ((plane - stripsize) / stripsperplane)", "plane = ((plane == 0) / stripsperplane)", "plane = ((plane == rows) / stripsperplane)", "plane = ((plane == stripsize) / stripsperplane)", "plane = ((rows != 0) / stripsperplane)", "plane = ((rows != stripsize) / stripsperplane)", "plane = ((rows * plane) / stripsperplane)", "plane = ((rows * rowsperstrip) / stripsperplane)", "plane = ((rows * size) / stripsperplane)", "plane = ((rows * strip) / stripsperplane)", "plane = ((rows * stripinplane) / stripsperplane)", "plane = ((rows * stripsize) / stripsperplane)", "plane = ((rows * stripsperplane) / stripsperplane)", "plane = ((rows + 0) / stripsperplane)", "plane = ((rows + stripsize) / stripsperplane)", "plane = ((rows - 0) / stripsperplane)", "plane = ((rows - stripsize) / stripsperplane)", "plane = ((rows == 0) / stripsperplane)", "plane = ((rows == stripsize) / stripsperplane)", "plane = ((rows) / stripsperplane)", "plane = ((rowsperstrip != 0) / stripsperplane)", "plane = ((rowsperstrip != plane) / stripsperplane)", "plane = ((rowsperstrip != rows) / stripsperplane)", "plane = ((rowsperstrip != stripinplane) / stripsperplane)", "plane = ((rowsperstrip != stripsize) / stripsperplane)", "plane = ((rowsperstrip != stripsperplane) / stripsperplane)", "plane = ((rowsperstrip * plane) / stripsperplane)", "plane = ((rowsperstrip * rows) / stripsperplane)", "plane = ((rowsperstrip * size) / stripsperplane)", "plane = ((rowsperstrip * strip) / stripsperplane)", "plane = ((rowsperstrip * stripinplane) / stripsperplane)", "plane = ((rowsperstrip * stripsize) / stripsperplane)", "plane = ((rowsperstrip * stripsperplane) / stripsperplane)", "plane = ((rowsperstrip + 0) / stripsperplane)", "plane = ((rowsperstrip + plane) / stripsperplane)", "plane = ((rowsperstrip + rows) / stripsperplane)", "plane = ((rowsperstrip + stripinplane) / stripsperplane)", "plane = ((rowsperstrip + stripsize) / stripsperplane)", "plane = ((rowsperstrip + stripsperplane) / stripsperplane)", "plane = ((rowsperstrip - 0) / stripsperplane)", "plane = ((rowsperstrip - plane) / stripsperplane)", "plane = ((rowsperstrip - rows) / stripsperplane)", "plane = ((rowsperstrip - stripinplane) / stripsperplane)", "plane = ((rowsperstrip - stripsize) / stripsperplane)", "plane = ((rowsperstrip - stripsperplane) / stripsperplane)", "plane = ((rowsperstrip == 0) / stripsperplane)", "plane = ((rowsperstrip == plane) / stripsperplane)", "plane = ((rowsperstrip == rows) / stripsperplane)", "plane = ((rowsperstrip == stripinplane) / stripsperplane)", "plane = ((rowsperstrip == stripsize) / stripsperplane)", "plane = ((rowsperstrip == stripsperplane) / stripsperplane)", "plane = ((rowsperstrip) / stripsperplane)", "plane = ((size != 0) / stripsperplane)", "plane = ((size != plane) / stripsperplane)", "plane = ((size != rows) / stripsperplane)", "plane = ((size != rowsperstrip) / stripsperplane)", "plane = ((size != stripinplane) / stripsperplane)", "plane = ((size != stripsize) / stripsperplane)", "plane = ((size != stripsperplane) / stripsperplane)", "plane = ((size * plane) / stripsperplane)", "plane = ((size * rows) / stripsperplane)", "plane = ((size * rowsperstrip) / stripsperplane)", "plane = ((size * strip) / stripsperplane)", "plane = ((size * stripinplane) / stripsperplane)", "plane = ((size * stripsize) / stripsperplane)", "plane = ((size * stripsperplane) / stripsperplane)", "plane = ((size + 0) / stripsperplane)", "plane = ((size + plane) / stripsperplane)", "plane = ((size + rows) / stripsperplane)", "plane = ((size + rowsperstrip) / stripsperplane)", "plane = ((size + stripinplane) / stripsperplane)", "plane = ((size + stripsize) / stripsperplane)", "plane = ((size + stripsperplane) / stripsperplane)", "plane = ((size - 0) / stripsperplane)", "plane = ((size - plane) / stripsperplane)", "plane = ((size - rows) / stripsperplane)", "plane = ((size - rowsperstrip) / stripsperplane)", "plane = ((size - stripinplane) / stripsperplane)", "plane = ((size - stripsize) / stripsperplane)", "plane = ((size - stripsperplane) / stripsperplane)", "plane = ((size == 0) / stripsperplane)", "plane = ((size == plane) / stripsperplane)", "plane = ((size == rows) / stripsperplane)", "plane = ((size == rowsperstrip) / stripsperplane)", "plane = ((size == stripinplane) / stripsperplane)", "plane = ((size == stripsize) / stripsperplane)", "plane = ((size == stripsperplane) / stripsperplane)", "plane = ((strip != 0) / stripsperplane)", "plane = ((strip != plane) / stripsperplane)", "plane = ((strip != rows) / stripsperplane)", "plane = ((strip != rowsperstrip) / stripsperplane)", "plane = ((strip != size) / stripsperplane)", "plane = ((strip != stripinplane) / stripsperplane)", "plane = ((strip != stripsize) / stripsperplane)", "plane = ((strip != stripsperplane) / stripsperplane)", "plane = ((strip * plane) / stripsperplane)", "plane = ((strip * rows) / stripsperplane)", "plane = ((strip * rowsperstrip) / stripsperplane)", "plane = ((strip * size) / stripsperplane)", "plane = ((strip * stripinplane) / stripsperplane)", "plane = ((strip * stripsize) / stripsperplane)", "plane = ((strip * stripsperplane) / stripsperplane)", "plane = ((strip + 0) / stripsperplane)", "plane = ((strip + plane) / stripsperplane)", "plane = ((strip + rows) / stripsperplane)", "plane = ((strip + rowsperstrip) / stripsperplane)", "plane = ((strip + size) / stripsperplane)", "plane = ((strip + stripinplane) / stripsperplane)", "plane = ((strip + stripsize) / stripsperplane)", "plane = ((strip + stripsperplane) / stripsperplane)", "plane = ((strip - 0) / stripsperplane)", "plane = ((strip - plane) / stripsperplane)", "plane = ((strip - rows) / stripsperplane)", "plane = ((strip - rowsperstrip) / stripsperplane)", "plane = ((strip - size) / stripsperplane)", "plane = ((strip - stripinplane) / stripsperplane)", "plane = ((strip - stripsize) / stripsperplane)", "plane = ((strip - stripsperplane) / stripsperplane)", "plane = ((strip == 0) / stripsperplane)", "plane = ((strip == plane) / stripsperplane)", "plane = ((strip == rows) / stripsperplane)", "plane = ((strip == rowsperstrip) / stripsperplane)", "plane = ((strip == size) / stripsperplane)", "plane = ((strip == stripinplane) / stripsperplane)", "plane = ((strip == stripsize) / stripsperplane)", "plane = ((strip == stripsperplane) / stripsperplane)", "plane = ((strip) / stripsperplane)", "plane = ((stripinplane != 0) / stripsperplane)", "plane = ((stripinplane != plane) / stripsperplane)", "plane = ((stripinplane != rows) / stripsperplane)", "plane = ((stripinplane != stripsize) / stripsperplane)", "plane = ((stripinplane * plane) / stripsperplane)", "plane = ((stripinplane * rows) / stripsperplane)", "plane = ((stripinplane * rowsperstrip) / stripsperplane)", "plane = ((stripinplane * size) / stripsperplane)", "plane = ((stripinplane * strip) / stripsperplane)", "plane = ((stripinplane * stripsize) / stripsperplane)", "plane = ((stripinplane * stripsperplane) / stripsperplane)", "plane = ((stripinplane + 0) / stripsperplane)", "plane = ((stripinplane + plane) / stripsperplane)", "plane = ((stripinplane + rows) / stripsperplane)", "plane = ((stripinplane + stripsize) / stripsperplane)", "plane = ((stripinplane - 0) / stripsperplane)", "plane = ((stripinplane - plane) / stripsperplane)", "plane = ((stripinplane - rows) / stripsperplane)", "plane = ((stripinplane - stripsize) / stripsperplane)", "plane = ((stripinplane == 0) / stripsperplane)", "plane = ((stripinplane == plane) / stripsperplane)", "plane = ((stripinplane == rows) / stripsperplane)", "plane = ((stripinplane == stripsize) / stripsperplane)", "plane = ((stripinplane) / stripsperplane)", "plane = ((stripsize != 0) / stripsperplane)", "plane = ((stripsize * plane) / stripsperplane)", "plane = ((stripsize * rows) / stripsperplane)", "plane = ((stripsize * rowsperstrip) / stripsperplane)", "plane = ((stripsize * size) / stripsperplane)", "plane = ((stripsize * strip) / stripsperplane)", "plane = ((stripsize * stripinplane) / stripsperplane)", "plane = ((stripsize * stripsperplane) / stripsperplane)", "plane = ((stripsize + 0) / stripsperplane)", "plane = ((stripsize - 0) / stripsperplane)", "plane = ((stripsize == 0) / stripsperplane)", "plane = ((stripsperplane != 0) / stripsperplane)", "plane = ((stripsperplane != plane) / stripsperplane)", "plane = ((stripsperplane != rows) / stripsperplane)", "plane = ((stripsperplane != stripinplane) / stripsperplane)", "plane = ((stripsperplane != stripsize) / stripsperplane)", "plane = ((stripsperplane * plane) / stripsperplane)", "plane = ((stripsperplane * rows) / stripsperplane)", "plane = ((stripsperplane * rowsperstrip) / stripsperplane)", "plane = ((stripsperplane * size) / stripsperplane)", "plane = ((stripsperplane * strip) / stripsperplane)", "plane = ((stripsperplane * stripinplane) / stripsperplane)", "plane = ((stripsperplane * stripsize) / stripsperplane)", "plane = ((stripsperplane + 0) / stripsperplane)", "plane = ((stripsperplane + plane) / stripsperplane)", "plane = ((stripsperplane + rows) / stripsperplane)", "plane = ((stripsperplane + stripinplane) / stripsperplane)", "plane = ((stripsperplane + stripsize) / stripsperplane)", "plane = ((stripsperplane - 0) / stripsperplane)", "plane = ((stripsperplane - plane) / stripsperplane)", "plane = ((stripsperplane - rows) / stripsperplane)", "plane = ((stripsperplane - stripinplane) / stripsperplane)", "plane = ((stripsperplane - stripsize) / stripsperplane)", "plane = ((stripsperplane == 0) / stripsperplane)", "plane = ((stripsperplane == plane) / stripsperplane)", "plane = ((stripsperplane == rows) / stripsperplane)", "plane = ((stripsperplane == stripinplane) / stripsperplane)", "plane = ((stripsperplane == stripsize) / stripsperplane)", "plane = ((stripsperplane) / stripsperplane)", "plane = ((td != 0) / stripsperplane)", "plane = ((td == 0) / stripsperplane)", "plane = ((tif != 0) / stripsperplane)", "plane = ((tif == 0) / stripsperplane)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "plane = (strip / (0 * plane))", "plane = (strip / (0 * rows))", "plane = (strip / (0 * rowsperstrip))", "plane = (strip / (0 * size))", "plane = (strip / (0 * strip))", "plane = (strip / (0 * stripinplane))", "plane = (strip / (0 * stripsize))", "plane = (strip / (0 * stripsperplane))", "plane = (strip / (buf != 0))", "plane = (strip / (buf == 0))", "plane = (strip / (module != 0))", "plane = (strip / (module == 0))", "plane = (strip / (plane != 0))", "plane = (strip / (plane != rows))", "plane = (strip / (plane != stripsize))", "plane = (strip / (plane * rows))", "plane = (strip / (plane * rowsperstrip))", "plane = (strip / (plane * size))", "plane = (strip / (plane * strip))", "plane = (strip / (plane * stripinplane))", "plane = (strip / (plane * stripsize))", "plane = (strip / (plane * stripsperplane))", "plane = (strip / (plane + 0))", "plane = (strip / (plane + rows))", "plane = (strip / (plane + stripsize))", "plane = (strip / (plane - 0))", "plane = (strip / (plane - rows))", "plane = (strip / (plane - stripsize))", "plane = (strip / (plane == 0))", "plane = (strip / (plane == rows))", "plane = (strip / (plane == stripsize))", "plane = (strip / (rows != 0))", "plane = (strip / (rows != stripsize))", "plane = (strip / (rows * plane))", "plane = (strip / (rows * rowsperstrip))", "plane = (strip / (rows * size))", "plane = (strip / (rows * strip))", "plane = (strip / (rows * stripinplane))", "plane = (strip / (rows * stripsize))", "plane = (strip / (rows * stripsperplane))", "plane = (strip / (rows + 0))", "plane = (strip / (rows + stripsize))", "plane = (strip / (rows - 0))", "plane = (strip / (rows - stripsize))", "plane = (strip / (rows == 0))", "plane = (strip / (rows == stripsize))", "plane = (strip / (rows))", "plane = (strip / (rowsperstrip != 0))", "plane = (strip / (rowsperstrip != plane))", "plane = (strip / (rowsperstrip != rows))", "plane = (strip / (rowsperstrip != stripinplane))", "plane = (strip / (rowsperstrip != stripsize))", "plane = (strip / (rowsperstrip != stripsperplane))", "plane = (strip / (rowsperstrip * plane))", "plane = (strip / (rowsperstrip * rows))", "plane = (strip / (rowsperstrip * size))", "plane = (strip / (rowsperstrip * strip))", "plane = (strip / (rowsperstrip * stripinplane))", "plane = (strip / (rowsperstrip * stripsize))", "plane = (strip / (rowsperstrip * stripsperplane))", "plane = (strip / (rowsperstrip + 0))", "plane = (strip / (rowsperstrip + plane))", "plane = (strip / (rowsperstrip + rows))", "plane = (strip / (rowsperstrip + stripinplane))", "plane = (strip / (rowsperstrip + stripsize))", "plane = (strip / (rowsperstrip + stripsperplane))", "plane = (strip / (rowsperstrip - 0))", "plane = (strip / (rowsperstrip - plane))", "plane = (strip / (rowsperstrip - rows))", "plane = (strip / (rowsperstrip - stripinplane))", "plane = (strip / (rowsperstrip - stripsize))", "plane = (strip / (rowsperstrip - stripsperplane))", "plane = (strip / (rowsperstrip == 0))", "plane = (strip / (rowsperstrip == plane))", "plane = (strip / (rowsperstrip == rows))", "plane = (strip / (rowsperstrip == stripinplane))", "plane = (strip / (rowsperstrip == stripsize))", "plane = (strip / (rowsperstrip == stripsperplane))", "plane = (strip / (rowsperstrip))", "plane = (strip / (size != 0))", "plane = (strip / (size != plane))", "plane = (strip / (size != rows))", "plane = (strip / (size != rowsperstrip))", "plane = (strip / (size != stripinplane))", "plane = (strip / (size != stripsize))", "plane = (strip / (size != stripsperplane))", "plane = (strip / (size * plane))", "plane = (strip / (size * rows))", "plane = (strip / (size * rowsperstrip))", "plane = (strip / (size * strip))", "plane = (strip / (size * stripinplane))", "plane = (strip / (size * stripsize))", "plane = (strip / (size * stripsperplane))", "plane = (strip / (size + 0))", "plane = (strip / (size + plane))", "plane = (strip / (size + rows))", "plane = (strip / (size + rowsperstrip))", "plane = (strip / (size + stripinplane))", "plane = (strip / (size + stripsize))", "plane = (strip / (size + stripsperplane))", "plane = (strip / (size - 0))", "plane = (strip / (size - plane))", "plane = (strip / (size - rows))", "plane = (strip / (size - rowsperstrip))", "plane = (strip / (size - stripinplane))", "plane = (strip / (size - stripsize))", "plane = (strip / (size - stripsperplane))", "plane = (strip / (size == 0))", "plane = (strip / (size == plane))", "plane = (strip / (size == rows))", "plane = (strip / (size == rowsperstrip))", "plane = (strip / (size == stripinplane))", "plane = (strip / (size == stripsize))", "plane = (strip / (size == stripsperplane))", "plane = (strip / (strip != 0))", "plane = (strip / (strip != plane))", "plane = (strip / (strip != rows))", "plane = (strip / (strip != rowsperstrip))", "plane = (strip / (strip != size))", "plane = (strip / (strip != stripinplane))", "plane = (strip / (strip != stripsize))", "plane = (strip / (strip != stripsperplane))", "plane = (strip / (strip * plane))", "plane = (strip / (strip * rows))", "plane = (strip / (strip * rowsperstrip))", "plane = (strip / (strip * size))", "plane = (strip / (strip * stripinplane))", "plane = (strip / (strip * stripsize))", "plane = (strip / (strip * stripsperplane))", "plane = (strip / (strip + 0))", "plane = (strip / (strip + plane))", "plane = (strip / (strip + rows))", "plane = (strip / (strip + rowsperstrip))", "plane = (strip / (strip + size))", "plane = (strip / (strip + stripinplane))", "plane = (strip / (strip + stripsize))", "plane = (strip / (strip + stripsperplane))", "plane = (strip / (strip - 0))", "plane = (strip / (strip - plane))", "plane = (strip / (strip - rows))", "plane = (strip / (strip - rowsperstrip))", "plane = (strip / (strip - size))", "plane = (strip / (strip - stripinplane))", "plane = (strip / (strip - stripsize))", "plane = (strip / (strip - stripsperplane))", "plane = (strip / (strip == 0))", "plane = (strip / (strip == plane))", "plane = (strip / (strip == rows))", "plane = (strip / (strip == rowsperstrip))", "plane = (strip / (strip == size))", "plane = (strip / (strip == stripinplane))", "plane = (strip / (strip == stripsize))", "plane = (strip / (strip == stripsperplane))", "plane = (strip / (strip))", "plane = (strip / (stripinplane != 0))", "plane = (strip / (stripinplane != plane))", "plane = (strip / (stripinplane != rows))", "plane = (strip / (stripinplane != stripsize))", "plane = (strip / (stripinplane * plane))", "plane = (strip / (stripinplane * rows))", "plane = (strip / (stripinplane * rowsperstrip))", "plane = (strip / (stripinplane * size))", "plane = (strip / (stripinplane * strip))", "plane = (strip / (stripinplane * stripsize))", "plane = (strip / (stripinplane * stripsperplane))", "plane = (strip / (stripinplane + 0))", "plane = (strip / (stripinplane + plane))", "plane = (strip / (stripinplane + rows))", "plane = (strip / (stripinplane + stripsize))", "plane = (strip / (stripinplane - 0))", "plane = (strip / (stripinplane - plane))", "plane = (strip / (stripinplane - rows))", "plane = (strip / (stripinplane - stripsize))", "plane = (strip / (stripinplane == 0))", "plane = (strip / (stripinplane == plane))", "plane = (strip / (stripinplane == rows))", "plane = (strip / (stripinplane == stripsize))", "plane = (strip / (stripinplane))", "plane = (strip / (stripsize != 0))", "plane = (strip / (stripsize * plane))", "plane = (strip / (stripsize * rows))", "plane = (strip / (stripsize * rowsperstrip))", "plane = (strip / (stripsize * size))", "plane = (strip / (stripsize * strip))", "plane = (strip / (stripsize * stripinplane))", "plane = (strip / (stripsize * stripsperplane))", "plane = (strip / (stripsize + 0))", "plane = (strip / (stripsize - 0))", "plane = (strip / (stripsize == 0))", "plane = (strip / (stripsperplane != 0))", "plane = (strip / (stripsperplane != plane))", "plane = (strip / (stripsperplane != rows))", "plane = (strip / (stripsperplane != stripinplane))", "plane = (strip / (stripsperplane != stripsize))", "plane = (strip / (stripsperplane * plane))", "plane = (strip / (stripsperplane * rows))", "plane = (strip / (stripsperplane * rowsperstrip))", "plane = (strip / (stripsperplane * size))", "plane = (strip / (stripsperplane * strip))", "plane = (strip / (stripsperplane * stripinplane))", "plane = (strip / (stripsperplane * stripsize))", "plane = (strip / (stripsperplane + 0))", "plane = (strip / (stripsperplane + plane))", "plane = (strip / (stripsperplane + rows))", "plane = (strip / (stripsperplane + stripinplane))", "plane = (strip / (stripsperplane + stripsize))", "plane = (strip / (stripsperplane - 0))", "plane = (strip / (stripsperplane - plane))", "plane = (strip / (stripsperplane - rows))", "plane = (strip / (stripsperplane - stripinplane))", "plane = (strip / (stripsperplane - stripsize))", "plane = (strip / (stripsperplane == 0))", "plane = (strip / (stripsperplane == plane))", "plane = (strip / (stripsperplane == rows))", "plane = (strip / (stripsperplane == stripinplane))", "plane = (strip / (stripsperplane == stripsize))", "plane = (strip / (stripsperplane))", "plane = (strip / (td != 0))", "plane = (strip / (td == 0))", "plane = (strip / (tif != 0))", "plane = (strip / (tif == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1280591390377683, -5.4093780440377675, -6.9207104230377681, -7.4268326943377678, -4.8760376064377677, -5.1316660304377679, -7.5449473950377683, -5.4583515590377685, -7.9948880830377682, -6.9195870950377678, -7.7090481230377677, -7.1976407230377681, -7.5464299230377678, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.3494798380377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -7.7090481230377677, -8.05783732303777, -7.7090481230377677, -8.05783732303777, -8.05783732303777, -7.7090481230377677, -7.7090481230377677, -8.05783732303777, -7.7090481230377677, -7.3494798380377677, -8.05783732303777, -7.7090481230377677, -8.51200022303777]
								}, {
									"case":	2,
									"scores":	[-6.114118103037768]
								}, {
									"case":	3,
									"scores":	[-6.114118103037768]
								}, {
									"case":	4,
									"scores":	[-6.114118103037768]
								}, {
									"case":	5,
									"scores":	[-6.114118103037768]
								}, {
									"case":	6,
									"scores":	[-6.114118103037768]
								}, {
									"case":	7,
									"scores":	[-6.114118103037768]
								}, {
									"case":	8,
									"scores":	[-6.114118103037768]
								}, {
									"case":	9,
									"scores":	[-6.114118103037768]
								}, {
									"case":	10,
									"scores":	[-6.114118103037768]
								}, {
									"case":	11,
									"scores":	[-6.114118103037768]
								}, {
									"case":	12,
									"scores":	[-6.114118103037768]
								}, {
									"case":	13,
									"scores":	[-6.114118103037768]
								}, {
									"case":	14,
									"scores":	[-6.114118103037768]
								}, {
									"case":	15,
									"scores":	[-6.114118103037768]
								}, {
									"case":	16,
									"scores":	[-6.114118103037768]
								}, {
									"case":	17,
									"scores":	[-6.114118103037768]
								}, {
									"case":	18,
									"scores":	[-6.114118103037768]
								}, {
									"case":	19,
									"scores":	[-6.114118103037768]
								}, {
									"case":	20,
									"scores":	[-6.114118103037768]
								}, {
									"case":	21,
									"scores":	[-6.114118103037768]
								}, {
									"case":	22,
									"scores":	[-6.114118103037768]
								}, {
									"case":	23,
									"scores":	[-6.114118103037768]
								}, {
									"case":	24,
									"scores":	[-6.114118103037768]
								}, {
									"case":	25,
									"scores":	[-6.114118103037768]
								}, {
									"case":	26,
									"scores":	[-6.114118103037768]
								}, {
									"case":	27,
									"scores":	[-6.114118103037768]
								}, {
									"case":	28,
									"scores":	[-6.114118103037768]
								}, {
									"case":	29,
									"scores":	[-6.114118103037768]
								}, {
									"case":	30,
									"scores":	[-6.114118103037768]
								}, {
									"case":	31,
									"scores":	[-6.114118103037768]
								}, {
									"case":	32,
									"scores":	[-6.114118103037768]
								}, {
									"case":	33,
									"scores":	[-6.114118103037768]
								}, {
									"case":	34,
									"scores":	[-6.114118103037768]
								}, {
									"case":	35,
									"scores":	[-6.114118103037768]
								}, {
									"case":	36,
									"scores":	[-6.114118103037768]
								}, {
									"case":	37,
									"scores":	[-6.114118103037768]
								}, {
									"case":	38,
									"scores":	[-6.114118103037768]
								}, {
									"case":	39,
									"scores":	[-6.114118103037768]
								}, {
									"case":	40,
									"scores":	[-6.114118103037768]
								}, {
									"case":	41,
									"scores":	[-6.114118103037768]
								}, {
									"case":	42,
									"scores":	[-6.114118103037768]
								}, {
									"case":	43,
									"scores":	[-6.114118103037768]
								}, {
									"case":	44,
									"scores":	[-6.114118103037768]
								}, {
									"case":	45,
									"scores":	[-6.114118103037768]
								}, {
									"case":	46,
									"scores":	[-6.114118103037768]
								}, {
									"case":	47,
									"scores":	[-6.114118103037768]
								}, {
									"case":	48,
									"scores":	[-6.114118103037768]
								}, {
									"case":	49,
									"scores":	[-6.114118103037768]
								}, {
									"case":	50,
									"scores":	[-6.114118103037768]
								}, {
									"case":	51,
									"scores":	[-6.114118103037768]
								}, {
									"case":	52,
									"scores":	[-6.114118103037768]
								}, {
									"case":	53,
									"scores":	[-6.114118103037768]
								}, {
									"case":	54,
									"scores":	[-6.114118103037768]
								}, {
									"case":	55,
									"scores":	[-6.114118103037768]
								}, {
									"case":	56,
									"scores":	[-6.114118103037768]
								}, {
									"case":	57,
									"scores":	[-6.114118103037768]
								}, {
									"case":	58,
									"scores":	[-6.114118103037768]
								}, {
									"case":	59,
									"scores":	[-6.114118103037768]
								}, {
									"case":	60,
									"scores":	[-6.114118103037768]
								}, {
									"case":	61,
									"scores":	[-6.114118103037768]
								}, {
									"case":	62,
									"scores":	[-6.114118103037768]
								}, {
									"case":	63,
									"scores":	[-6.114118103037768]
								}, {
									"case":	64,
									"scores":	[-6.114118103037768]
								}, {
									"case":	65,
									"scores":	[-6.114118103037768]
								}, {
									"case":	66,
									"scores":	[-6.114118103037768]
								}, {
									"case":	67,
									"scores":	[-6.114118103037768]
								}, {
									"case":	68,
									"scores":	[-6.114118103037768]
								}, {
									"case":	69,
									"scores":	[-6.114118103037768]
								}, {
									"case":	70,
									"scores":	[-6.114118103037768]
								}, {
									"case":	71,
									"scores":	[-6.114118103037768]
								}, {
									"case":	72,
									"scores":	[-6.114118103037768]
								}, {
									"case":	73,
									"scores":	[-6.114118103037768]
								}, {
									"case":	74,
									"scores":	[-6.114118103037768]
								}, {
									"case":	75,
									"scores":	[-6.114118103037768]
								}, {
									"case":	76,
									"scores":	[-6.114118103037768]
								}, {
									"case":	77,
									"scores":	[-6.114118103037768]
								}, {
									"case":	78,
									"scores":	[-6.114118103037768]
								}, {
									"case":	79,
									"scores":	[-6.114118103037768]
								}, {
									"case":	80,
									"scores":	[-6.114118103037768]
								}, {
									"case":	81,
									"scores":	[-6.114118103037768]
								}, {
									"case":	82,
									"scores":	[-6.114118103037768]
								}, {
									"case":	83,
									"scores":	[-6.114118103037768]
								}, {
									"case":	84,
									"scores":	[-6.114118103037768]
								}, {
									"case":	85,
									"scores":	[-6.114118103037768]
								}, {
									"case":	86,
									"scores":	[-6.114118103037768]
								}, {
									"case":	87,
									"scores":	[-6.114118103037768]
								}, {
									"case":	88,
									"scores":	[-6.114118103037768]
								}, {
									"case":	89,
									"scores":	[-6.114118103037768]
								}, {
									"case":	90,
									"scores":	[-6.114118103037768]
								}, {
									"case":	91,
									"scores":	[-6.114118103037768]
								}, {
									"case":	92,
									"scores":	[-6.114118103037768]
								}, {
									"case":	93,
									"scores":	[-6.114118103037768]
								}, {
									"case":	94,
									"scores":	[-6.114118103037768]
								}, {
									"case":	95,
									"scores":	[-6.114118103037768]
								}, {
									"case":	96,
									"scores":	[-6.114118103037768]
								}, {
									"case":	97,
									"scores":	[-6.114118103037768]
								}, {
									"case":	98,
									"scores":	[-6.114118103037768]
								}, {
									"case":	99,
									"scores":	[-6.114118103037768]
								}, {
									"case":	100,
									"scores":	[-6.114118103037768]
								}, {
									"case":	101,
									"scores":	[-6.114118103037768]
								}, {
									"case":	102,
									"scores":	[-6.114118103037768]
								}, {
									"case":	103,
									"scores":	[-6.114118103037768]
								}, {
									"case":	104,
									"scores":	[-6.114118103037768]
								}, {
									"case":	105,
									"scores":	[-6.114118103037768]
								}, {
									"case":	106,
									"scores":	[-6.114118103037768]
								}, {
									"case":	107,
									"scores":	[-6.114118103037768]
								}, {
									"case":	108,
									"scores":	[-6.114118103037768]
								}, {
									"case":	109,
									"scores":	[-6.114118103037768]
								}, {
									"case":	110,
									"scores":	[-6.114118103037768]
								}, {
									"case":	111,
									"scores":	[-6.114118103037768]
								}, {
									"case":	112,
									"scores":	[-6.114118103037768]
								}, {
									"case":	113,
									"scores":	[-6.114118103037768]
								}, {
									"case":	114,
									"scores":	[-6.114118103037768]
								}, {
									"case":	115,
									"scores":	[-6.114118103037768]
								}, {
									"case":	116,
									"scores":	[-6.114118103037768]
								}, {
									"case":	117,
									"scores":	[-6.114118103037768]
								}, {
									"case":	118,
									"scores":	[-6.114118103037768]
								}, {
									"case":	119,
									"scores":	[-6.114118103037768]
								}, {
									"case":	120,
									"scores":	[-6.114118103037768]
								}, {
									"case":	121,
									"scores":	[-6.114118103037768]
								}, {
									"case":	122,
									"scores":	[-6.114118103037768]
								}, {
									"case":	123,
									"scores":	[-6.114118103037768]
								}, {
									"case":	124,
									"scores":	[-6.114118103037768]
								}, {
									"case":	125,
									"scores":	[-6.114118103037768]
								}, {
									"case":	126,
									"scores":	[-6.114118103037768]
								}, {
									"case":	127,
									"scores":	[-6.114118103037768]
								}, {
									"case":	128,
									"scores":	[-6.114118103037768]
								}, {
									"case":	129,
									"scores":	[-6.114118103037768]
								}, {
									"case":	130,
									"scores":	[-6.114118103037768]
								}, {
									"case":	131,
									"scores":	[-6.114118103037768]
								}, {
									"case":	132,
									"scores":	[-6.114118103037768]
								}, {
									"case":	133,
									"scores":	[-6.114118103037768]
								}, {
									"case":	134,
									"scores":	[-6.114118103037768]
								}, {
									"case":	135,
									"scores":	[-6.114118103037768]
								}, {
									"case":	136,
									"scores":	[-6.114118103037768]
								}, {
									"case":	137,
									"scores":	[-6.114118103037768]
								}, {
									"case":	138,
									"scores":	[-6.114118103037768]
								}, {
									"case":	139,
									"scores":	[-6.114118103037768]
								}, {
									"case":	140,
									"scores":	[-6.114118103037768]
								}, {
									"case":	141,
									"scores":	[-6.114118103037768]
								}, {
									"case":	142,
									"scores":	[-6.114118103037768]
								}, {
									"case":	143,
									"scores":	[-6.114118103037768]
								}, {
									"case":	144,
									"scores":	[-6.114118103037768]
								}, {
									"case":	145,
									"scores":	[-6.114118103037768]
								}, {
									"case":	146,
									"scores":	[-6.114118103037768]
								}, {
									"case":	147,
									"scores":	[-6.114118103037768]
								}, {
									"case":	148,
									"scores":	[-6.114118103037768]
								}, {
									"case":	149,
									"scores":	[-6.114118103037768]
								}, {
									"case":	150,
									"scores":	[-6.114118103037768]
								}, {
									"case":	151,
									"scores":	[-6.114118103037768]
								}, {
									"case":	152,
									"scores":	[-6.114118103037768]
								}, {
									"case":	153,
									"scores":	[-6.114118103037768]
								}, {
									"case":	154,
									"scores":	[-6.114118103037768]
								}, {
									"case":	155,
									"scores":	[-6.114118103037768]
								}, {
									"case":	156,
									"scores":	[-6.114118103037768]
								}, {
									"case":	157,
									"scores":	[-6.114118103037768]
								}, {
									"case":	158,
									"scores":	[-6.114118103037768]
								}, {
									"case":	159,
									"scores":	[-6.114118103037768]
								}, {
									"case":	160,
									"scores":	[-6.114118103037768]
								}, {
									"case":	161,
									"scores":	[-6.114118103037768]
								}, {
									"case":	162,
									"scores":	[-6.114118103037768]
								}, {
									"case":	163,
									"scores":	[-6.114118103037768]
								}, {
									"case":	164,
									"scores":	[-6.114118103037768]
								}, {
									"case":	165,
									"scores":	[-6.114118103037768]
								}, {
									"case":	166,
									"scores":	[-6.114118103037768]
								}, {
									"case":	167,
									"scores":	[-6.114118103037768]
								}, {
									"case":	168,
									"scores":	[-6.114118103037768]
								}, {
									"case":	169,
									"scores":	[-6.114118103037768]
								}, {
									"case":	170,
									"scores":	[-6.114118103037768]
								}, {
									"case":	171,
									"scores":	[-6.114118103037768]
								}, {
									"case":	172,
									"scores":	[-6.114118103037768]
								}, {
									"case":	173,
									"scores":	[-6.114118103037768]
								}, {
									"case":	174,
									"scores":	[-6.114118103037768]
								}, {
									"case":	175,
									"scores":	[-6.114118103037768]
								}, {
									"case":	176,
									"scores":	[-6.114118103037768]
								}, {
									"case":	177,
									"scores":	[-6.114118103037768]
								}, {
									"case":	178,
									"scores":	[-6.114118103037768]
								}, {
									"case":	179,
									"scores":	[-6.114118103037768]
								}, {
									"case":	180,
									"scores":	[-6.114118103037768]
								}, {
									"case":	181,
									"scores":	[-6.114118103037768]
								}, {
									"case":	182,
									"scores":	[-6.114118103037768]
								}, {
									"case":	183,
									"scores":	[-6.114118103037768]
								}, {
									"case":	184,
									"scores":	[-6.114118103037768]
								}, {
									"case":	185,
									"scores":	[-6.114118103037768]
								}, {
									"case":	186,
									"scores":	[-6.114118103037768]
								}, {
									"case":	187,
									"scores":	[-6.114118103037768]
								}, {
									"case":	188,
									"scores":	[-6.114118103037768]
								}, {
									"case":	189,
									"scores":	[-6.114118103037768]
								}, {
									"case":	190,
									"scores":	[-6.114118103037768]
								}, {
									"case":	191,
									"scores":	[-6.114118103037768]
								}, {
									"case":	192,
									"scores":	[-6.114118103037768]
								}, {
									"case":	193,
									"scores":	[-6.114118103037768]
								}, {
									"case":	194,
									"scores":	[-6.114118103037768]
								}, {
									"case":	195,
									"scores":	[-6.114118103037768]
								}, {
									"case":	196,
									"scores":	[-6.114118103037768]
								}, {
									"case":	197,
									"scores":	[-6.114118103037768]
								}, {
									"case":	198,
									"scores":	[-6.114118103037768]
								}, {
									"case":	199,
									"scores":	[-6.114118103037768]
								}, {
									"case":	200,
									"scores":	[-6.114118103037768]
								}, {
									"case":	201,
									"scores":	[-6.114118103037768]
								}, {
									"case":	202,
									"scores":	[-6.114118103037768]
								}, {
									"case":	203,
									"scores":	[-6.114118103037768]
								}, {
									"case":	204,
									"scores":	[-6.114118103037768]
								}, {
									"case":	205,
									"scores":	[-6.114118103037768]
								}, {
									"case":	206,
									"scores":	[-6.114118103037768]
								}, {
									"case":	207,
									"scores":	[-6.114118103037768]
								}, {
									"case":	208,
									"scores":	[-6.114118103037768]
								}, {
									"case":	209,
									"scores":	[-6.114118103037768]
								}, {
									"case":	210,
									"scores":	[-6.114118103037768]
								}, {
									"case":	211,
									"scores":	[-6.114118103037768]
								}, {
									"case":	212,
									"scores":	[-6.114118103037768]
								}, {
									"case":	213,
									"scores":	[-6.114118103037768]
								}, {
									"case":	214,
									"scores":	[-6.114118103037768]
								}, {
									"case":	215,
									"scores":	[-6.114118103037768]
								}, {
									"case":	216,
									"scores":	[-6.114118103037768]
								}, {
									"case":	217,
									"scores":	[-6.114118103037768]
								}, {
									"case":	218,
									"scores":	[-6.114118103037768]
								}, {
									"case":	219,
									"scores":	[-6.114118103037768]
								}, {
									"case":	220,
									"scores":	[-6.114118103037768]
								}, {
									"case":	221,
									"scores":	[-6.114118103037768]
								}, {
									"case":	222,
									"scores":	[-6.114118103037768]
								}, {
									"case":	223,
									"scores":	[-6.114118103037768]
								}, {
									"case":	224,
									"scores":	[-6.114118103037768]
								}, {
									"case":	225,
									"scores":	[-6.114118103037768]
								}, {
									"case":	226,
									"scores":	[-6.114118103037768]
								}, {
									"case":	227,
									"scores":	[-6.114118103037768]
								}, {
									"case":	228,
									"scores":	[-6.114118103037768]
								}, {
									"case":	229,
									"scores":	[-6.114118103037768]
								}, {
									"case":	230,
									"scores":	[-6.114118103037768]
								}, {
									"case":	231,
									"scores":	[-6.114118103037768]
								}, {
									"case":	232,
									"scores":	[-6.114118103037768]
								}, {
									"case":	233,
									"scores":	[-6.114118103037768]
								}, {
									"case":	234,
									"scores":	[-6.114118103037768]
								}, {
									"case":	235,
									"scores":	[-6.114118103037768]
								}, {
									"case":	236,
									"scores":	[-6.114118103037768]
								}, {
									"case":	237,
									"scores":	[-6.114118103037768]
								}, {
									"case":	238,
									"scores":	[-6.114118103037768]
								}, {
									"case":	239,
									"scores":	[-6.114118103037768]
								}, {
									"case":	240,
									"scores":	[-6.114118103037768]
								}, {
									"case":	241,
									"scores":	[-6.114118103037768]
								}, {
									"case":	242,
									"scores":	[-6.114118103037768]
								}, {
									"case":	243,
									"scores":	[-6.114118103037768]
								}, {
									"case":	244,
									"scores":	[-6.114118103037768]
								}, {
									"case":	245,
									"scores":	[-6.114118103037768]
								}, {
									"case":	246,
									"scores":	[-6.114118103037768]
								}, {
									"case":	247,
									"scores":	[-6.114118103037768]
								}, {
									"case":	248,
									"scores":	[-6.114118103037768]
								}, {
									"case":	249,
									"scores":	[-6.114118103037768]
								}, {
									"case":	250,
									"scores":	[-6.114118103037768]
								}, {
									"case":	251,
									"scores":	[-6.114118103037768]
								}, {
									"case":	252,
									"scores":	[-6.114118103037768]
								}, {
									"case":	253,
									"scores":	[-6.114118103037768]
								}, {
									"case":	254,
									"scores":	[-6.114118103037768]
								}, {
									"case":	255,
									"scores":	[-6.114118103037768]
								}, {
									"case":	256,
									"scores":	[-6.114118103037768]
								}, {
									"case":	257,
									"scores":	[-6.114118103037768]
								}, {
									"case":	258,
									"scores":	[-6.114118103037768]
								}, {
									"case":	259,
									"scores":	[-6.114118103037768]
								}, {
									"case":	260,
									"scores":	[-6.114118103037768]
								}, {
									"case":	261,
									"scores":	[-6.114118103037768]
								}, {
									"case":	262,
									"scores":	[-6.114118103037768]
								}, {
									"case":	263,
									"scores":	[-6.114118103037768]
								}, {
									"case":	264,
									"scores":	[-6.114118103037768]
								}, {
									"case":	265,
									"scores":	[-6.114118103037768]
								}, {
									"case":	266,
									"scores":	[-6.114118103037768]
								}, {
									"case":	267,
									"scores":	[-6.114118103037768]
								}, {
									"case":	268,
									"scores":	[-6.114118103037768]
								}, {
									"case":	269,
									"scores":	[-6.114118103037768]
								}, {
									"case":	270,
									"scores":	[-6.114118103037768]
								}, {
									"case":	271,
									"scores":	[-6.114118103037768]
								}, {
									"case":	272,
									"scores":	[-6.114118103037768]
								}, {
									"case":	273,
									"scores":	[-6.114118103037768]
								}, {
									"case":	274,
									"scores":	[-6.114118103037768]
								}, {
									"case":	275,
									"scores":	[-6.114118103037768]
								}, {
									"case":	276,
									"scores":	[-6.114118103037768]
								}, {
									"case":	277,
									"scores":	[-6.114118103037768]
								}, {
									"case":	278,
									"scores":	[-6.114118103037768]
								}, {
									"case":	279,
									"scores":	[-6.114118103037768]
								}, {
									"case":	280,
									"scores":	[-6.114118103037768]
								}, {
									"case":	281,
									"scores":	[-6.114118103037768]
								}, {
									"case":	282,
									"scores":	[-6.114118103037768]
								}, {
									"case":	283,
									"scores":	[-6.114118103037768]
								}, {
									"case":	284,
									"scores":	[-6.114118103037768]
								}, {
									"case":	285,
									"scores":	[-6.114118103037768]
								}, {
									"case":	286,
									"scores":	[-6.114118103037768]
								}, {
									"case":	287,
									"scores":	[-6.114118103037768]
								}, {
									"case":	288,
									"scores":	[-6.114118103037768]
								}, {
									"case":	289,
									"scores":	[-6.114118103037768]
								}, {
									"case":	290,
									"scores":	[-6.114118103037768]
								}, {
									"case":	291,
									"scores":	[-6.114118103037768]
								}, {
									"case":	292,
									"scores":	[-6.114118103037768]
								}, {
									"case":	293,
									"scores":	[-6.114118103037768]
								}, {
									"case":	294,
									"scores":	[-6.114118103037768]
								}, {
									"case":	295,
									"scores":	[-6.114118103037768]
								}, {
									"case":	296,
									"scores":	[-6.114118103037768]
								}, {
									"case":	297,
									"scores":	[-6.114118103037768]
								}, {
									"case":	298,
									"scores":	[-6.114118103037768]
								}, {
									"case":	299,
									"scores":	[-6.114118103037768]
								}, {
									"case":	300,
									"scores":	[-6.114118103037768]
								}, {
									"case":	301,
									"scores":	[-6.114118103037768]
								}, {
									"case":	302,
									"scores":	[-6.114118103037768]
								}, {
									"case":	303,
									"scores":	[-6.114118103037768]
								}, {
									"case":	304,
									"scores":	[-6.114118103037768]
								}, {
									"case":	305,
									"scores":	[-6.114118103037768]
								}, {
									"case":	306,
									"scores":	[-6.114118103037768]
								}, {
									"case":	307,
									"scores":	[-6.114118103037768]
								}, {
									"case":	308,
									"scores":	[-6.114118103037768]
								}, {
									"case":	309,
									"scores":	[-6.114118103037768]
								}, {
									"case":	310,
									"scores":	[-6.114118103037768]
								}, {
									"case":	311,
									"scores":	[-6.114118103037768]
								}, {
									"case":	312,
									"scores":	[-6.114118103037768]
								}, {
									"case":	313,
									"scores":	[-6.114118103037768]
								}, {
									"case":	314,
									"scores":	[-6.114118103037768]
								}, {
									"case":	315,
									"scores":	[-6.114118103037768]
								}, {
									"case":	316,
									"scores":	[-6.114118103037768]
								}, {
									"case":	317,
									"scores":	[-6.114118103037768]
								}, {
									"case":	318,
									"scores":	[-6.114118103037768]
								}, {
									"case":	319,
									"scores":	[-6.114118103037768]
								}, {
									"case":	320,
									"scores":	[-6.114118103037768]
								}, {
									"case":	321,
									"scores":	[-6.114118103037768]
								}, {
									"case":	322,
									"scores":	[-6.114118103037768]
								}, {
									"case":	323,
									"scores":	[-6.114118103037768]
								}, {
									"case":	324,
									"scores":	[-6.114118103037768]
								}, {
									"case":	325,
									"scores":	[-6.114118103037768]
								}, {
									"case":	326,
									"scores":	[-6.114118103037768]
								}, {
									"case":	327,
									"scores":	[-6.114118103037768]
								}, {
									"case":	328,
									"scores":	[-6.114118103037768]
								}, {
									"case":	329,
									"scores":	[-6.114118103037768]
								}, {
									"case":	330,
									"scores":	[-6.114118103037768]
								}, {
									"case":	331,
									"scores":	[-6.114118103037768]
								}, {
									"case":	332,
									"scores":	[-6.114118103037768]
								}, {
									"case":	333,
									"scores":	[-6.114118103037768]
								}, {
									"case":	334,
									"scores":	[-6.114118103037768]
								}, {
									"case":	335,
									"scores":	[-6.114118103037768]
								}, {
									"case":	336,
									"scores":	[-6.114118103037768]
								}, {
									"case":	337,
									"scores":	[-6.114118103037768]
								}, {
									"case":	338,
									"scores":	[-6.114118103037768]
								}, {
									"case":	339,
									"scores":	[-6.114118103037768]
								}, {
									"case":	340,
									"scores":	[-6.114118103037768]
								}, {
									"case":	341,
									"scores":	[-6.114118103037768]
								}, {
									"case":	342,
									"scores":	[-6.114118103037768]
								}, {
									"case":	343,
									"scores":	[-6.114118103037768]
								}, {
									"case":	344,
									"scores":	[-6.114118103037768]
								}, {
									"case":	345,
									"scores":	[-6.114118103037768]
								}, {
									"case":	346,
									"scores":	[-6.114118103037768]
								}, {
									"case":	347,
									"scores":	[-6.114118103037768]
								}, {
									"case":	348,
									"scores":	[-6.114118103037768]
								}, {
									"case":	349,
									"scores":	[-6.114118103037768]
								}, {
									"case":	350,
									"scores":	[-6.114118103037768]
								}, {
									"case":	351,
									"scores":	[-6.114118103037768]
								}, {
									"case":	352,
									"scores":	[-6.114118103037768]
								}, {
									"case":	353,
									"scores":	[-6.114118103037768]
								}, {
									"case":	354,
									"scores":	[-6.114118103037768]
								}, {
									"case":	355,
									"scores":	[-6.114118103037768]
								}, {
									"case":	356,
									"scores":	[-6.114118103037768]
								}, {
									"case":	357,
									"scores":	[-6.114118103037768]
								}, {
									"case":	358,
									"scores":	[-6.114118103037768]
								}, {
									"case":	359,
									"scores":	[-6.114118103037768]
								}, {
									"case":	360,
									"scores":	[-6.114118103037768]
								}, {
									"case":	361,
									"scores":	[-6.114118103037768]
								}, {
									"case":	362,
									"scores":	[-6.114118103037768]
								}, {
									"case":	363,
									"scores":	[-6.114118103037768]
								}, {
									"case":	364,
									"scores":	[-6.114118103037768]
								}, {
									"case":	365,
									"scores":	[-6.114118103037768]
								}, {
									"case":	366,
									"scores":	[-6.114118103037768]
								}, {
									"case":	367,
									"scores":	[-6.114118103037768]
								}, {
									"case":	368,
									"scores":	[-6.114118103037768]
								}, {
									"case":	369,
									"scores":	[-6.114118103037768]
								}, {
									"case":	370,
									"scores":	[-6.114118103037768]
								}, {
									"case":	371,
									"scores":	[-6.114118103037768]
								}, {
									"case":	372,
									"scores":	[-6.114118103037768]
								}, {
									"case":	373,
									"scores":	[-6.114118103037768]
								}, {
									"case":	374,
									"scores":	[-6.114118103037768]
								}, {
									"case":	375,
									"scores":	[-6.114118103037768]
								}, {
									"case":	376,
									"scores":	[-6.114118103037768]
								}, {
									"case":	377,
									"scores":	[-6.114118103037768]
								}, {
									"case":	378,
									"scores":	[-6.114118103037768]
								}, {
									"case":	379,
									"scores":	[-6.114118103037768]
								}, {
									"case":	380,
									"scores":	[-6.114118103037768]
								}, {
									"case":	381,
									"scores":	[-6.114118103037768]
								}, {
									"case":	382,
									"scores":	[-6.114118103037768]
								}, {
									"case":	383,
									"scores":	[-6.114118103037768]
								}, {
									"case":	384,
									"scores":	[-6.114118103037768]
								}, {
									"case":	385,
									"scores":	[-6.114118103037768]
								}, {
									"case":	386,
									"scores":	[-6.114118103037768]
								}, {
									"case":	387,
									"scores":	[-6.114118103037768]
								}, {
									"case":	388,
									"scores":	[-6.114118103037768]
								}, {
									"case":	389,
									"scores":	[-6.114118103037768]
								}, {
									"case":	390,
									"scores":	[-6.114118103037768]
								}, {
									"case":	391,
									"scores":	[-6.114118103037768]
								}, {
									"case":	392,
									"scores":	[-6.114118103037768]
								}, {
									"case":	393,
									"scores":	[-6.114118103037768]
								}, {
									"case":	394,
									"scores":	[-6.114118103037768]
								}, {
									"case":	395,
									"scores":	[-6.114118103037768]
								}, {
									"case":	396,
									"scores":	[-6.114118103037768]
								}, {
									"case":	397,
									"scores":	[-6.114118103037768]
								}, {
									"case":	398,
									"scores":	[-6.114118103037768]
								}, {
									"case":	399,
									"scores":	[-6.114118103037768]
								}, {
									"case":	400,
									"scores":	[-6.114118103037768]
								}, {
									"case":	401,
									"scores":	[-6.114118103037768]
								}, {
									"case":	402,
									"scores":	[-6.114118103037768]
								}, {
									"case":	403,
									"scores":	[-6.114118103037768]
								}, {
									"case":	404,
									"scores":	[-6.114118103037768]
								}, {
									"case":	405,
									"scores":	[-6.114118103037768]
								}, {
									"case":	406,
									"scores":	[-6.114118103037768]
								}, {
									"case":	407,
									"scores":	[-6.114118103037768]
								}, {
									"case":	408,
									"scores":	[-6.114118103037768]
								}, {
									"case":	409,
									"scores":	[-6.114118103037768]
								}, {
									"case":	410,
									"scores":	[-6.114118103037768]
								}, {
									"case":	411,
									"scores":	[-6.114118103037768]
								}, {
									"case":	412,
									"scores":	[-6.114118103037768]
								}, {
									"case":	413,
									"scores":	[-6.114118103037768]
								}, {
									"case":	414,
									"scores":	[-6.114118103037768]
								}, {
									"case":	415,
									"scores":	[-6.114118103037768]
								}, {
									"case":	416,
									"scores":	[-6.114118103037768]
								}, {
									"case":	417,
									"scores":	[-6.114118103037768]
								}, {
									"case":	418,
									"scores":	[-6.114118103037768]
								}, {
									"case":	419,
									"scores":	[-6.114118103037768]
								}, {
									"case":	420,
									"scores":	[-6.114118103037768]
								}, {
									"case":	421,
									"scores":	[-6.114118103037768]
								}, {
									"case":	422,
									"scores":	[-6.114118103037768]
								}, {
									"case":	423,
									"scores":	[-6.114118103037768]
								}, {
									"case":	424,
									"scores":	[-6.114118103037768]
								}, {
									"case":	425,
									"scores":	[-6.114118103037768]
								}, {
									"case":	426,
									"scores":	[-6.114118103037768]
								}, {
									"case":	427,
									"scores":	[-6.114118103037768]
								}, {
									"case":	428,
									"scores":	[-6.114118103037768]
								}, {
									"case":	429,
									"scores":	[-6.114118103037768]
								}, {
									"case":	430,
									"scores":	[-6.114118103037768]
								}, {
									"case":	431,
									"scores":	[-6.114118103037768]
								}, {
									"case":	432,
									"scores":	[-6.114118103037768]
								}, {
									"case":	433,
									"scores":	[-6.114118103037768]
								}, {
									"case":	434,
									"scores":	[-6.114118103037768]
								}, {
									"case":	435,
									"scores":	[-6.114118103037768]
								}, {
									"case":	436,
									"scores":	[-6.114118103037768]
								}, {
									"case":	437,
									"scores":	[-6.114118103037768]
								}, {
									"case":	438,
									"scores":	[-6.114118103037768]
								}, {
									"case":	439,
									"scores":	[-6.114118103037768]
								}, {
									"case":	440,
									"scores":	[-6.114118103037768]
								}, {
									"case":	441,
									"scores":	[-6.114118103037768]
								}, {
									"case":	442,
									"scores":	[-6.114118103037768]
								}, {
									"case":	443,
									"scores":	[-6.114118103037768]
								}, {
									"case":	444,
									"scores":	[-6.114118103037768]
								}, {
									"case":	445,
									"scores":	[-6.114118103037768]
								}, {
									"case":	446,
									"scores":	[-6.114118103037768]
								}, {
									"case":	447,
									"scores":	[-6.114118103037768]
								}, {
									"case":	448,
									"scores":	[-6.114118103037768]
								}]
						}]
				}, {
					"line":	154,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	155,
							"begin_column":	0,
							"end_line":	155,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td, 0, sizeof (*(td)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L155\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L155\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L155\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	2,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	3,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	4,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	5,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	6,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	7,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	8,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	9,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	10,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	11,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	12,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	13,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	14,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	15,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	16,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	17,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	18,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	19,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	20,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	21,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	22,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	23,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	24,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	25,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	26,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	27,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	28,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	29,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	30,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	31,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	32,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	33,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	34,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	35,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	36,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	37,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	38,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	39,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	40,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	41,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	42,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	43,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	44,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	45,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	46,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	47,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	48,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	49,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	50,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	51,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	52,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	53,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	54,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	55,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	56,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	57,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	58,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	59,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	60,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	61,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	62,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	63,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	64,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	65,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	66,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	67,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	68,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	69,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	70,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	71,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	72,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	73,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	74,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	75,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	76,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	77,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	78,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	79,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	80,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	81,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	82,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	83,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	84,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	85,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	86,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	87,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	88,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	89,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	90,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	91,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	92,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	93,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	94,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	95,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	96,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	97,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	98,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	99,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	100,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	101,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	102,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	103,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	104,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	105,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	106,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	107,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	108,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	109,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	110,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	111,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	112,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	113,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	114,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	115,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	116,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	117,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	118,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	119,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	120,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	121,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	122,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	123,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	124,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	125,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	126,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	127,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	128,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	129,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	130,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	131,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	132,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	133,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	134,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	135,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	136,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	137,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	138,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	139,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	140,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	141,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	142,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	143,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	144,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	145,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	146,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	147,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	148,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	149,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	150,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	151,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	152,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	153,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	154,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	155,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	156,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	157,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	158,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	159,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	160,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	161,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	162,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	163,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	164,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	165,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	166,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	167,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	168,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	169,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	170,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	171,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	172,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	173,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	174,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	175,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	176,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	177,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	178,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	179,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	180,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	181,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	182,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	183,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	184,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	185,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	186,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	187,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	188,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	189,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	190,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	191,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	192,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	193,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	194,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	195,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	196,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	197,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	198,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	199,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	200,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	201,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	202,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	203,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	204,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	205,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	206,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	207,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	208,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	209,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	210,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	211,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	212,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	213,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	214,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	215,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	216,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	217,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	218,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	219,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	220,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	221,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	222,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	223,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	224,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	225,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	226,
									"scores":	[-9.79817679002025, -10.484863769720249, -8.07586216672025, -11.247573896720247, -10.346366386720248, -10.816670108720247, -8.58788590872025, -8.58861301572025, -11.223254775720248, -12.250487362720248, -11.240522215720247, -11.678722515720249, -11.247223915720248, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.043646515720248, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.685424215720248, -11.678722515720249, -11.685424215720248, -11.685424215720248, -11.678722515720249, -11.678722515720249, -11.685424215720248, -11.678722515720249, -11.043646515720248, -11.685424215720248, -11.678722515720249, -11.641298115720248]
								}, {
									"case":	227,
									"scores":	[-7.7797307900202481, -8.46641776972025, -6.0574161667202482, -9.22912789672025, -8.32792038672025, -8.79822410872025, -6.5694399087202484, -6.57016701572025, -9.20480877572025, -10.232041362720249, -9.22207621572025, -9.66027651572025, -9.2287779157202472, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.02520051572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66027651572025, -9.66697821572025, -9.66027651572025, -9.66697821572025, -9.66697821572025, -9.66027651572025, -9.66027651572025, -9.66697821572025, -9.66027651572025, -9.02520051572025, -9.66697821572025, -9.66027651572025, -9.62285211572025]
								}, {
									"case":	228,
									"scores":	[-9.79817679002025, -10.484863769720249, -8.07586216672025, -11.247573896720247, -10.346366386720248, -10.816670108720247, -8.58788590872025, -8.58861301572025, -11.223254775720248, -12.250487362720248, -11.240522215720247, -11.678722515720249, -11.247223915720248, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.043646515720248, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.678722515720249, -11.685424215720248, -11.678722515720249, -11.685424215720248, -11.685424215720248, -11.678722515720249, -11.678722515720249, -11.685424215720248, -11.678722515720249, -11.043646515720248, -11.685424215720248, -11.678722515720249, -11.641298115720248]
								}]
						}, {
							"switch":	18,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	155,
							"begin_column":	2,
							"end_line":	155,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L155\", 45, &(td), sizeof (td), &(rowsperstrip), sizeof (rowsperstrip), &(stripinplane), sizeof (stripinplane), &(rows), sizeof (rows), &(td->td_imagelength), sizeof (td->td_imagelength), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(tif), sizeof (tif), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rows = td->td_imagelength - stripinplane * rowsperstrip;\n", "{\n}\n", "rows = (&buf)->td_imagelength - stripinplane * rowsperstrip", "rows = (&module)->td_imagelength - stripinplane * rowsperstrip", "rows = (&plane)->td_imagelength - stripinplane * rowsperstrip", "rows = (&rows)->td_imagelength - stripinplane * rowsperstrip", "rows = (&rowsperstrip)->td_imagelength - stripinplane * rowsperstrip", "rows = (&size)->td_imagelength - stripinplane * rowsperstrip", "rows = (&strip)->td_imagelength - stripinplane * rowsperstrip", "rows = (&stripinplane)->td_imagelength - stripinplane * rowsperstrip", "rows = (&stripsize)->td_imagelength - stripinplane * rowsperstrip", "rows = (&stripsperplane)->td_imagelength - stripinplane * rowsperstrip", "rows = (&td)->td_imagelength - stripinplane * rowsperstrip", "rows = (&tif)->td_imagelength - stripinplane * rowsperstrip", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rows = td->td_imagelength - (0 * plane) * rowsperstrip", "rows = td->td_imagelength - (0 * rows) * rowsperstrip", "rows = td->td_imagelength - (0 * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (0 * size) * rowsperstrip", "rows = td->td_imagelength - (0 * strip) * rowsperstrip", "rows = td->td_imagelength - (0 * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (0 * stripsize) * rowsperstrip", "rows = td->td_imagelength - (0 * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (buf != 0) * rowsperstrip", "rows = td->td_imagelength - (buf == 0) * rowsperstrip", "rows = td->td_imagelength - (module != 0) * rowsperstrip", "rows = td->td_imagelength - (module == 0) * rowsperstrip", "rows = td->td_imagelength - (plane != 0) * rowsperstrip", "rows = td->td_imagelength - (plane != rows) * rowsperstrip", "rows = td->td_imagelength - (plane != stripsize) * rowsperstrip", "rows = td->td_imagelength - (plane * rows) * rowsperstrip", "rows = td->td_imagelength - (plane * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (plane * size) * rowsperstrip", "rows = td->td_imagelength - (plane * strip) * rowsperstrip", "rows = td->td_imagelength - (plane * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (plane * stripsize) * rowsperstrip", "rows = td->td_imagelength - (plane * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (plane + 0) * rowsperstrip", "rows = td->td_imagelength - (plane + rows) * rowsperstrip", "rows = td->td_imagelength - (plane + stripsize) * rowsperstrip", "rows = td->td_imagelength - (plane - 0) * rowsperstrip", "rows = td->td_imagelength - (plane - rows) * rowsperstrip", "rows = td->td_imagelength - (plane - stripsize) * rowsperstrip", "rows = td->td_imagelength - (plane == 0) * rowsperstrip", "rows = td->td_imagelength - (plane == rows) * rowsperstrip", "rows = td->td_imagelength - (plane == stripsize) * rowsperstrip", "rows = td->td_imagelength - (rows != 0) * rowsperstrip", "rows = td->td_imagelength - (rows != stripsize) * rowsperstrip", "rows = td->td_imagelength - (rows * plane) * rowsperstrip", "rows = td->td_imagelength - (rows * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (rows * size) * rowsperstrip", "rows = td->td_imagelength - (rows * strip) * rowsperstrip", "rows = td->td_imagelength - (rows * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (rows * stripsize) * rowsperstrip", "rows = td->td_imagelength - (rows * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (rows + 0) * rowsperstrip", "rows = td->td_imagelength - (rows + stripsize) * rowsperstrip", "rows = td->td_imagelength - (rows - 0) * rowsperstrip", "rows = td->td_imagelength - (rows - stripsize) * rowsperstrip", "rows = td->td_imagelength - (rows == 0) * rowsperstrip", "rows = td->td_imagelength - (rows == stripsize) * rowsperstrip", "rows = td->td_imagelength - (rows) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip != 0) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip != plane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip != rows) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip != stripinplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip != stripsize) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip != stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip * plane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip * rows) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip * size) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip * strip) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip * stripsize) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip + 0) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip + plane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip + rows) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip + stripinplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip + stripsize) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip + stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip - 0) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip - plane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip - rows) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip - stripinplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip - stripsize) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip - stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip == 0) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip == plane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip == rows) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip == stripinplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip == stripsize) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip == stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (size != 0) * rowsperstrip", "rows = td->td_imagelength - (size != plane) * rowsperstrip", "rows = td->td_imagelength - (size != rows) * rowsperstrip", "rows = td->td_imagelength - (size != rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (size != stripinplane) * rowsperstrip", "rows = td->td_imagelength - (size != stripsize) * rowsperstrip", "rows = td->td_imagelength - (size != stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (size * plane) * rowsperstrip", "rows = td->td_imagelength - (size * rows) * rowsperstrip", "rows = td->td_imagelength - (size * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (size * strip) * rowsperstrip", "rows = td->td_imagelength - (size * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (size * stripsize) * rowsperstrip", "rows = td->td_imagelength - (size * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (size + 0) * rowsperstrip", "rows = td->td_imagelength - (size + plane) * rowsperstrip", "rows = td->td_imagelength - (size + rows) * rowsperstrip", "rows = td->td_imagelength - (size + rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (size + stripinplane) * rowsperstrip", "rows = td->td_imagelength - (size + stripsize) * rowsperstrip", "rows = td->td_imagelength - (size + stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (size - 0) * rowsperstrip", "rows = td->td_imagelength - (size - plane) * rowsperstrip", "rows = td->td_imagelength - (size - rows) * rowsperstrip", "rows = td->td_imagelength - (size - rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (size - stripinplane) * rowsperstrip", "rows = td->td_imagelength - (size - stripsize) * rowsperstrip", "rows = td->td_imagelength - (size - stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (size == 0) * rowsperstrip", "rows = td->td_imagelength - (size == plane) * rowsperstrip", "rows = td->td_imagelength - (size == rows) * rowsperstrip", "rows = td->td_imagelength - (size == rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (size == stripinplane) * rowsperstrip", "rows = td->td_imagelength - (size == stripsize) * rowsperstrip", "rows = td->td_imagelength - (size == stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (strip != 0) * rowsperstrip", "rows = td->td_imagelength - (strip != plane) * rowsperstrip", "rows = td->td_imagelength - (strip != rows) * rowsperstrip", "rows = td->td_imagelength - (strip != rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (strip != size) * rowsperstrip", "rows = td->td_imagelength - (strip != stripinplane) * rowsperstrip", "rows = td->td_imagelength - (strip != stripsize) * rowsperstrip", "rows = td->td_imagelength - (strip != stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (strip * plane) * rowsperstrip", "rows = td->td_imagelength - (strip * rows) * rowsperstrip", "rows = td->td_imagelength - (strip * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (strip * size) * rowsperstrip", "rows = td->td_imagelength - (strip * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (strip * stripsize) * rowsperstrip", "rows = td->td_imagelength - (strip * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (strip + 0) * rowsperstrip", "rows = td->td_imagelength - (strip + plane) * rowsperstrip", "rows = td->td_imagelength - (strip + rows) * rowsperstrip", "rows = td->td_imagelength - (strip + rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (strip + size) * rowsperstrip", "rows = td->td_imagelength - (strip + stripinplane) * rowsperstrip", "rows = td->td_imagelength - (strip + stripsize) * rowsperstrip", "rows = td->td_imagelength - (strip + stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (strip - 0) * rowsperstrip", "rows = td->td_imagelength - (strip - plane) * rowsperstrip", "rows = td->td_imagelength - (strip - rows) * rowsperstrip", "rows = td->td_imagelength - (strip - rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (strip - size) * rowsperstrip", "rows = td->td_imagelength - (strip - stripinplane) * rowsperstrip", "rows = td->td_imagelength - (strip - stripsize) * rowsperstrip", "rows = td->td_imagelength - (strip - stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (strip == 0) * rowsperstrip", "rows = td->td_imagelength - (strip == plane) * rowsperstrip", "rows = td->td_imagelength - (strip == rows) * rowsperstrip", "rows = td->td_imagelength - (strip == rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (strip == size) * rowsperstrip", "rows = td->td_imagelength - (strip == stripinplane) * rowsperstrip", "rows = td->td_imagelength - (strip == stripsize) * rowsperstrip", "rows = td->td_imagelength - (strip == stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (strip) * rowsperstrip", "rows = td->td_imagelength - (stripinplane != 0) * rowsperstrip", "rows = td->td_imagelength - (stripinplane != plane) * rowsperstrip", "rows = td->td_imagelength - (stripinplane != rows) * rowsperstrip", "rows = td->td_imagelength - (stripinplane != stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripinplane * plane) * rowsperstrip", "rows = td->td_imagelength - (stripinplane * rows) * rowsperstrip", "rows = td->td_imagelength - (stripinplane * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (stripinplane * size) * rowsperstrip", "rows = td->td_imagelength - (stripinplane * strip) * rowsperstrip", "rows = td->td_imagelength - (stripinplane * stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripinplane * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (stripinplane + 0) * rowsperstrip", "rows = td->td_imagelength - (stripinplane + plane) * rowsperstrip", "rows = td->td_imagelength - (stripinplane + rows) * rowsperstrip", "rows = td->td_imagelength - (stripinplane + stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripinplane - 0) * rowsperstrip", "rows = td->td_imagelength - (stripinplane - plane) * rowsperstrip", "rows = td->td_imagelength - (stripinplane - rows) * rowsperstrip", "rows = td->td_imagelength - (stripinplane - stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripinplane == 0) * rowsperstrip", "rows = td->td_imagelength - (stripinplane == plane) * rowsperstrip", "rows = td->td_imagelength - (stripinplane == rows) * rowsperstrip", "rows = td->td_imagelength - (stripinplane == stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripinplane) * rowsperstrip", "rows = td->td_imagelength - (stripsize != 0) * rowsperstrip", "rows = td->td_imagelength - (stripsize * plane) * rowsperstrip", "rows = td->td_imagelength - (stripsize * rows) * rowsperstrip", "rows = td->td_imagelength - (stripsize * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (stripsize * size) * rowsperstrip", "rows = td->td_imagelength - (stripsize * strip) * rowsperstrip", "rows = td->td_imagelength - (stripsize * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (stripsize * stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (stripsize + 0) * rowsperstrip", "rows = td->td_imagelength - (stripsize - 0) * rowsperstrip", "rows = td->td_imagelength - (stripsize == 0) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane != 0) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane != plane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane != rows) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane != stripinplane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane != stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane * plane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane * rows) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane * rowsperstrip) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane * size) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane * strip) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane * stripinplane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane * stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane + 0) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane + plane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane + rows) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane + stripinplane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane + stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane - 0) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane - plane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane - rows) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane - stripinplane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane - stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane == 0) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane == plane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane == rows) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane == stripinplane) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane == stripsize) * rowsperstrip", "rows = td->td_imagelength - (stripsperplane) * rowsperstrip", "rows = td->td_imagelength - (td != 0) * rowsperstrip", "rows = td->td_imagelength - (td == 0) * rowsperstrip", "rows = td->td_imagelength - (tif != 0) * rowsperstrip", "rows = td->td_imagelength - (tif == 0) * rowsperstrip", "rows = td->td_imagelength - stripinplane * (0 * plane)", "rows = td->td_imagelength - stripinplane * (0 * rows)", "rows = td->td_imagelength - stripinplane * (0 * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (0 * size)", "rows = td->td_imagelength - stripinplane * (0 * strip)", "rows = td->td_imagelength - stripinplane * (0 * stripinplane)", "rows = td->td_imagelength - stripinplane * (0 * stripsize)", "rows = td->td_imagelength - stripinplane * (0 * stripsperplane)", "rows = td->td_imagelength - stripinplane * (buf != 0)", "rows = td->td_imagelength - stripinplane * (buf == 0)", "rows = td->td_imagelength - stripinplane * (module != 0)", "rows = td->td_imagelength - stripinplane * (module == 0)", "rows = td->td_imagelength - stripinplane * (plane != 0)", "rows = td->td_imagelength - stripinplane * (plane != rows)", "rows = td->td_imagelength - stripinplane * (plane != stripsize)", "rows = td->td_imagelength - stripinplane * (plane * rows)", "rows = td->td_imagelength - stripinplane * (plane * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (plane * size)", "rows = td->td_imagelength - stripinplane * (plane * strip)", "rows = td->td_imagelength - stripinplane * (plane * stripinplane)", "rows = td->td_imagelength - stripinplane * (plane * stripsize)", "rows = td->td_imagelength - stripinplane * (plane * stripsperplane)", "rows = td->td_imagelength - stripinplane * (plane + 0)", "rows = td->td_imagelength - stripinplane * (plane + rows)", "rows = td->td_imagelength - stripinplane * (plane + stripsize)", "rows = td->td_imagelength - stripinplane * (plane - 0)", "rows = td->td_imagelength - stripinplane * (plane - rows)", "rows = td->td_imagelength - stripinplane * (plane - stripsize)", "rows = td->td_imagelength - stripinplane * (plane == 0)", "rows = td->td_imagelength - stripinplane * (plane == rows)", "rows = td->td_imagelength - stripinplane * (plane == stripsize)", "rows = td->td_imagelength - stripinplane * (rows != 0)", "rows = td->td_imagelength - stripinplane * (rows != stripsize)", "rows = td->td_imagelength - stripinplane * (rows * plane)", "rows = td->td_imagelength - stripinplane * (rows * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (rows * size)", "rows = td->td_imagelength - stripinplane * (rows * strip)", "rows = td->td_imagelength - stripinplane * (rows * stripinplane)", "rows = td->td_imagelength - stripinplane * (rows * stripsize)", "rows = td->td_imagelength - stripinplane * (rows * stripsperplane)", "rows = td->td_imagelength - stripinplane * (rows + 0)", "rows = td->td_imagelength - stripinplane * (rows + stripsize)", "rows = td->td_imagelength - stripinplane * (rows - 0)", "rows = td->td_imagelength - stripinplane * (rows - stripsize)", "rows = td->td_imagelength - stripinplane * (rows == 0)", "rows = td->td_imagelength - stripinplane * (rows == stripsize)", "rows = td->td_imagelength - stripinplane * (rows)", "rows = td->td_imagelength - stripinplane * (rowsperstrip != 0)", "rows = td->td_imagelength - stripinplane * (rowsperstrip != plane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip != rows)", "rows = td->td_imagelength - stripinplane * (rowsperstrip != stripinplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip != stripsize)", "rows = td->td_imagelength - stripinplane * (rowsperstrip != stripsperplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip * plane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip * rows)", "rows = td->td_imagelength - stripinplane * (rowsperstrip * size)", "rows = td->td_imagelength - stripinplane * (rowsperstrip * strip)", "rows = td->td_imagelength - stripinplane * (rowsperstrip * stripinplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip * stripsize)", "rows = td->td_imagelength - stripinplane * (rowsperstrip * stripsperplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip + 0)", "rows = td->td_imagelength - stripinplane * (rowsperstrip + plane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip + rows)", "rows = td->td_imagelength - stripinplane * (rowsperstrip + stripinplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip + stripsize)", "rows = td->td_imagelength - stripinplane * (rowsperstrip + stripsperplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip - 0)", "rows = td->td_imagelength - stripinplane * (rowsperstrip - plane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip - rows)", "rows = td->td_imagelength - stripinplane * (rowsperstrip - stripinplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip - stripsize)", "rows = td->td_imagelength - stripinplane * (rowsperstrip - stripsperplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip == 0)", "rows = td->td_imagelength - stripinplane * (rowsperstrip == plane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip == rows)", "rows = td->td_imagelength - stripinplane * (rowsperstrip == stripinplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip == stripsize)", "rows = td->td_imagelength - stripinplane * (rowsperstrip == stripsperplane)", "rows = td->td_imagelength - stripinplane * (rowsperstrip)", "rows = td->td_imagelength - stripinplane * (size != 0)", "rows = td->td_imagelength - stripinplane * (size != plane)", "rows = td->td_imagelength - stripinplane * (size != rows)", "rows = td->td_imagelength - stripinplane * (size != rowsperstrip)", "rows = td->td_imagelength - stripinplane * (size != stripinplane)", "rows = td->td_imagelength - stripinplane * (size != stripsize)", "rows = td->td_imagelength - stripinplane * (size != stripsperplane)", "rows = td->td_imagelength - stripinplane * (size * plane)", "rows = td->td_imagelength - stripinplane * (size * rows)", "rows = td->td_imagelength - stripinplane * (size * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (size * strip)", "rows = td->td_imagelength - stripinplane * (size * stripinplane)", "rows = td->td_imagelength - stripinplane * (size * stripsize)", "rows = td->td_imagelength - stripinplane * (size * stripsperplane)", "rows = td->td_imagelength - stripinplane * (size + 0)", "rows = td->td_imagelength - stripinplane * (size + plane)", "rows = td->td_imagelength - stripinplane * (size + rows)", "rows = td->td_imagelength - stripinplane * (size + rowsperstrip)", "rows = td->td_imagelength - stripinplane * (size + stripinplane)", "rows = td->td_imagelength - stripinplane * (size + stripsize)", "rows = td->td_imagelength - stripinplane * (size + stripsperplane)", "rows = td->td_imagelength - stripinplane * (size - 0)", "rows = td->td_imagelength - stripinplane * (size - plane)", "rows = td->td_imagelength - stripinplane * (size - rows)", "rows = td->td_imagelength - stripinplane * (size - rowsperstrip)", "rows = td->td_imagelength - stripinplane * (size - stripinplane)", "rows = td->td_imagelength - stripinplane * (size - stripsize)", "rows = td->td_imagelength - stripinplane * (size - stripsperplane)", "rows = td->td_imagelength - stripinplane * (size == 0)", "rows = td->td_imagelength - stripinplane * (size == plane)", "rows = td->td_imagelength - stripinplane * (size == rows)", "rows = td->td_imagelength - stripinplane * (size == rowsperstrip)", "rows = td->td_imagelength - stripinplane * (size == stripinplane)", "rows = td->td_imagelength - stripinplane * (size == stripsize)", "rows = td->td_imagelength - stripinplane * (size == stripsperplane)", "rows = td->td_imagelength - stripinplane * (strip != 0)", "rows = td->td_imagelength - stripinplane * (strip != plane)", "rows = td->td_imagelength - stripinplane * (strip != rows)", "rows = td->td_imagelength - stripinplane * (strip != rowsperstrip)", "rows = td->td_imagelength - stripinplane * (strip != size)", "rows = td->td_imagelength - stripinplane * (strip != stripinplane)", "rows = td->td_imagelength - stripinplane * (strip != stripsize)", "rows = td->td_imagelength - stripinplane * (strip != stripsperplane)", "rows = td->td_imagelength - stripinplane * (strip * plane)", "rows = td->td_imagelength - stripinplane * (strip * rows)", "rows = td->td_imagelength - stripinplane * (strip * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (strip * size)", "rows = td->td_imagelength - stripinplane * (strip * stripinplane)", "rows = td->td_imagelength - stripinplane * (strip * stripsize)", "rows = td->td_imagelength - stripinplane * (strip * stripsperplane)", "rows = td->td_imagelength - stripinplane * (strip + 0)", "rows = td->td_imagelength - stripinplane * (strip + plane)", "rows = td->td_imagelength - stripinplane * (strip + rows)", "rows = td->td_imagelength - stripinplane * (strip + rowsperstrip)", "rows = td->td_imagelength - stripinplane * (strip + size)", "rows = td->td_imagelength - stripinplane * (strip + stripinplane)", "rows = td->td_imagelength - stripinplane * (strip + stripsize)", "rows = td->td_imagelength - stripinplane * (strip + stripsperplane)", "rows = td->td_imagelength - stripinplane * (strip - 0)", "rows = td->td_imagelength - stripinplane * (strip - plane)", "rows = td->td_imagelength - stripinplane * (strip - rows)", "rows = td->td_imagelength - stripinplane * (strip - rowsperstrip)", "rows = td->td_imagelength - stripinplane * (strip - size)", "rows = td->td_imagelength - stripinplane * (strip - stripinplane)", "rows = td->td_imagelength - stripinplane * (strip - stripsize)", "rows = td->td_imagelength - stripinplane * (strip - stripsperplane)", "rows = td->td_imagelength - stripinplane * (strip == 0)", "rows = td->td_imagelength - stripinplane * (strip == plane)", "rows = td->td_imagelength - stripinplane * (strip == rows)", "rows = td->td_imagelength - stripinplane * (strip == rowsperstrip)", "rows = td->td_imagelength - stripinplane * (strip == size)", "rows = td->td_imagelength - stripinplane * (strip == stripinplane)", "rows = td->td_imagelength - stripinplane * (strip == stripsize)", "rows = td->td_imagelength - stripinplane * (strip == stripsperplane)", "rows = td->td_imagelength - stripinplane * (strip)", "rows = td->td_imagelength - stripinplane * (stripinplane != 0)", "rows = td->td_imagelength - stripinplane * (stripinplane != plane)", "rows = td->td_imagelength - stripinplane * (stripinplane != rows)", "rows = td->td_imagelength - stripinplane * (stripinplane != stripsize)", "rows = td->td_imagelength - stripinplane * (stripinplane * plane)", "rows = td->td_imagelength - stripinplane * (stripinplane * rows)", "rows = td->td_imagelength - stripinplane * (stripinplane * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (stripinplane * size)", "rows = td->td_imagelength - stripinplane * (stripinplane * strip)", "rows = td->td_imagelength - stripinplane * (stripinplane * stripsize)", "rows = td->td_imagelength - stripinplane * (stripinplane * stripsperplane)", "rows = td->td_imagelength - stripinplane * (stripinplane + 0)", "rows = td->td_imagelength - stripinplane * (stripinplane + plane)", "rows = td->td_imagelength - stripinplane * (stripinplane + rows)", "rows = td->td_imagelength - stripinplane * (stripinplane + stripsize)", "rows = td->td_imagelength - stripinplane * (stripinplane - 0)", "rows = td->td_imagelength - stripinplane * (stripinplane - plane)", "rows = td->td_imagelength - stripinplane * (stripinplane - rows)", "rows = td->td_imagelength - stripinplane * (stripinplane - stripsize)", "rows = td->td_imagelength - stripinplane * (stripinplane == 0)", "rows = td->td_imagelength - stripinplane * (stripinplane == plane)", "rows = td->td_imagelength - stripinplane * (stripinplane == rows)", "rows = td->td_imagelength - stripinplane * (stripinplane == stripsize)", "rows = td->td_imagelength - stripinplane * (stripinplane)", "rows = td->td_imagelength - stripinplane * (stripsize != 0)", "rows = td->td_imagelength - stripinplane * (stripsize * plane)", "rows = td->td_imagelength - stripinplane * (stripsize * rows)", "rows = td->td_imagelength - stripinplane * (stripsize * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (stripsize * size)", "rows = td->td_imagelength - stripinplane * (stripsize * strip)", "rows = td->td_imagelength - stripinplane * (stripsize * stripinplane)", "rows = td->td_imagelength - stripinplane * (stripsize * stripsperplane)", "rows = td->td_imagelength - stripinplane * (stripsize + 0)", "rows = td->td_imagelength - stripinplane * (stripsize - 0)", "rows = td->td_imagelength - stripinplane * (stripsize == 0)", "rows = td->td_imagelength - stripinplane * (stripsperplane != 0)", "rows = td->td_imagelength - stripinplane * (stripsperplane != plane)", "rows = td->td_imagelength - stripinplane * (stripsperplane != rows)", "rows = td->td_imagelength - stripinplane * (stripsperplane != stripinplane)", "rows = td->td_imagelength - stripinplane * (stripsperplane != stripsize)", "rows = td->td_imagelength - stripinplane * (stripsperplane * plane)", "rows = td->td_imagelength - stripinplane * (stripsperplane * rows)", "rows = td->td_imagelength - stripinplane * (stripsperplane * rowsperstrip)", "rows = td->td_imagelength - stripinplane * (stripsperplane * size)", "rows = td->td_imagelength - stripinplane * (stripsperplane * strip)", "rows = td->td_imagelength - stripinplane * (stripsperplane * stripinplane)", "rows = td->td_imagelength - stripinplane * (stripsperplane * stripsize)", "rows = td->td_imagelength - stripinplane * (stripsperplane + 0)", "rows = td->td_imagelength - stripinplane * (stripsperplane + plane)", "rows = td->td_imagelength - stripinplane * (stripsperplane + rows)", "rows = td->td_imagelength - stripinplane * (stripsperplane + stripinplane)", "rows = td->td_imagelength - stripinplane * (stripsperplane + stripsize)", "rows = td->td_imagelength - stripinplane * (stripsperplane - 0)", "rows = td->td_imagelength - stripinplane * (stripsperplane - plane)", "rows = td->td_imagelength - stripinplane * (stripsperplane - rows)", "rows = td->td_imagelength - stripinplane * (stripsperplane - stripinplane)", "rows = td->td_imagelength - stripinplane * (stripsperplane - stripsize)", "rows = td->td_imagelength - stripinplane * (stripsperplane == 0)", "rows = td->td_imagelength - stripinplane * (stripsperplane == plane)", "rows = td->td_imagelength - stripinplane * (stripsperplane == rows)", "rows = td->td_imagelength - stripinplane * (stripsperplane == stripinplane)", "rows = td->td_imagelength - stripinplane * (stripsperplane == stripsize)", "rows = td->td_imagelength - stripinplane * (stripsperplane)", "rows = td->td_imagelength - stripinplane * (td != 0)", "rows = td->td_imagelength - stripinplane * (td == 0)", "rows = td->td_imagelength - stripinplane * (tif != 0)", "rows = td->td_imagelength - stripinplane * (tif == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.70979931172025, -5.1237555517202482, -5.7669402207202483, -6.7171526877202483, -6.7621100747202485, -7.3512470317202485, -6.6325659367202485, -6.63140982072025, -8.55187537572025, -8.23117238772025, -7.7546280157202485, -8.26603541572025, -8.10341721572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -7.90646713072025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.26603541572025, -8.61482461572025, -8.26603541572025, -8.61482461572025, -8.61482461572025, -8.26603541572025, -8.26603541572025, -8.61482461572025, -8.26603541572025, -7.90646713072025, -8.61482461572025, -8.26603541572025, -9.06898751572025]
								}, {
									"case":	2,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	3,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	4,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	5,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	6,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	7,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	8,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	9,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	10,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	11,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	12,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	13,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	14,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	15,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	16,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	17,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	18,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	19,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	20,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	21,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	22,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	23,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	24,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	25,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	26,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	27,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	28,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	29,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	30,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	31,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	32,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	33,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	34,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	35,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	36,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	37,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	38,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	39,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	40,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	41,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	42,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	43,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	44,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	45,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	46,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	47,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	48,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	49,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	50,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	51,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	52,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	53,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	54,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	55,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	56,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	57,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	58,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	59,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	60,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	61,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	62,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	63,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	64,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	65,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	66,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	67,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	68,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	69,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	70,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	71,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	72,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	73,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	74,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	75,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	76,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	77,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	78,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	79,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	80,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	81,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	82,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	83,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	84,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	85,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	86,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	87,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	88,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	89,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	90,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	91,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	92,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	93,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	94,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	95,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	96,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	97,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	98,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	99,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	100,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	101,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	102,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	103,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	104,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	105,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	106,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	107,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	108,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	109,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	110,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	111,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	112,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	113,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	114,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	115,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	116,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	117,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	118,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	119,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	120,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	121,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	122,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	123,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	124,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	125,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	126,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	127,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	128,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	129,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	130,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	131,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	132,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	133,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	134,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	135,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	136,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	137,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	138,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	139,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	140,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	141,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	142,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	143,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	144,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	145,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	146,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	147,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	148,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	149,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	150,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	151,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	152,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	153,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	154,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	155,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	156,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	157,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	158,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	159,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	160,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	161,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	162,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	163,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	164,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	165,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	166,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	167,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	168,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	169,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	170,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	171,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	172,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	173,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	174,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	175,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	176,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	177,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	178,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	179,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	180,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	181,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	182,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	183,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	184,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	185,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	186,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	187,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	188,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	189,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	190,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	191,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	192,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	193,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	194,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	195,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	196,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	197,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	198,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	199,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	200,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	201,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	202,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	203,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	204,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	205,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	206,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	207,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	208,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	209,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	210,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	211,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	212,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	213,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	214,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	215,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	216,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	217,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	218,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	219,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	220,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	221,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	222,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	223,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	224,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	225,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	226,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	227,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	228,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	229,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	230,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	231,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	232,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	233,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	234,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	235,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	236,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	237,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	238,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	239,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	240,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	241,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	242,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	243,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	244,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	245,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	246,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	247,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	248,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	249,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	250,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	251,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	252,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	253,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	254,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	255,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	256,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	257,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	258,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	259,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	260,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	261,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	262,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	263,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	264,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	265,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	266,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	267,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	268,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	269,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	270,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	271,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	272,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	273,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	274,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	275,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	276,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	277,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	278,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	279,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	280,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	281,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	282,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	283,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	284,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	285,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	286,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	287,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	288,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	289,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	290,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	291,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	292,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	293,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	294,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	295,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	296,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	297,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	298,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	299,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	300,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	301,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	302,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	303,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	304,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	305,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	306,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	307,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	308,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	309,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	310,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	311,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	312,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	313,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	314,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	315,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	316,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	317,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	318,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	319,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	320,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	321,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	322,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	323,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	324,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	325,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	326,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	327,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	328,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	329,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	330,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	331,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	332,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	333,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	334,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	335,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	336,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	337,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	338,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	339,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	340,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	341,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	342,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	343,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	344,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	345,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	346,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	347,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	348,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	349,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	350,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	351,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	352,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	353,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	354,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	355,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	356,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	357,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	358,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	359,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	360,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	361,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	362,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	363,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	364,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	365,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	366,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	367,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	368,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	369,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	370,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	371,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	372,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	373,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	374,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	375,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	376,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	377,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	378,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	379,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	380,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	381,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	382,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	383,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	384,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	385,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	386,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	387,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	388,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	389,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	390,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	391,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	392,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	393,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	394,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	395,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	396,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	397,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	398,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	399,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	400,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	401,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	402,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	403,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	404,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	405,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	406,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	407,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	408,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	409,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	410,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	411,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	412,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	413,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	414,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	415,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	416,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	417,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	418,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	419,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	420,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	421,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	422,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	423,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	424,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	425,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	426,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	427,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	428,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	429,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	430,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	431,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	432,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	433,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	434,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	435,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	436,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	437,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	438,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	439,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	440,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	441,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	442,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	443,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	444,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	445,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	446,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	447,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	448,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	449,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	450,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	451,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	452,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	453,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	454,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	455,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	456,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	457,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	458,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	459,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	460,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	461,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	462,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	463,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	464,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	465,
									"scores":	[-6.0939153957202485]
								}]
						}]
				}, {
					"line":	155,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [225, 226, 227], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [], [], [], [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [], [], [], [], [], []],
							"begin_line":	156,
							"begin_column":	0,
							"end_line":	156,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L156\", 45, &(rowsperstrip), sizeof (rowsperstrip), &(rows), sizeof (rows), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return -1;\n", "if (__is_neg(\"\", \"L156\", 45, &(rowsperstrip), sizeof (rowsperstrip), &(rows), sizeof (rows), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 0;\n", "if (__is_neg(\"\", \"L156\", 45, &(rowsperstrip), sizeof (rowsperstrip), &(rows), sizeof (rows), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.07371268840273]
								}, {
									"case":	2,
									"scores":	[-6.07371268840273]
								}, {
									"case":	3,
									"scores":	[-6.07371268840273]
								}, {
									"case":	4,
									"scores":	[-6.07371268840273]
								}, {
									"case":	5,
									"scores":	[-6.07371268840273]
								}, {
									"case":	6,
									"scores":	[-6.07371268840273]
								}, {
									"case":	7,
									"scores":	[-6.07371268840273]
								}, {
									"case":	8,
									"scores":	[-6.07371268840273]
								}, {
									"case":	9,
									"scores":	[-6.07371268840273]
								}, {
									"case":	10,
									"scores":	[-6.07371268840273]
								}, {
									"case":	11,
									"scores":	[-6.07371268840273]
								}, {
									"case":	12,
									"scores":	[-6.07371268840273]
								}, {
									"case":	13,
									"scores":	[-6.07371268840273]
								}, {
									"case":	14,
									"scores":	[-6.07371268840273]
								}, {
									"case":	15,
									"scores":	[-6.07371268840273]
								}, {
									"case":	16,
									"scores":	[-6.07371268840273]
								}, {
									"case":	17,
									"scores":	[-6.07371268840273]
								}, {
									"case":	18,
									"scores":	[-6.07371268840273]
								}, {
									"case":	19,
									"scores":	[-6.07371268840273]
								}, {
									"case":	20,
									"scores":	[-6.07371268840273]
								}, {
									"case":	21,
									"scores":	[-6.07371268840273]
								}, {
									"case":	22,
									"scores":	[-6.07371268840273]
								}, {
									"case":	23,
									"scores":	[-6.07371268840273]
								}, {
									"case":	24,
									"scores":	[-6.07371268840273]
								}, {
									"case":	25,
									"scores":	[-6.07371268840273]
								}, {
									"case":	26,
									"scores":	[-6.07371268840273]
								}, {
									"case":	27,
									"scores":	[-6.07371268840273]
								}, {
									"case":	28,
									"scores":	[-6.07371268840273]
								}, {
									"case":	29,
									"scores":	[-6.07371268840273]
								}, {
									"case":	30,
									"scores":	[-6.07371268840273]
								}, {
									"case":	31,
									"scores":	[-6.07371268840273]
								}, {
									"case":	32,
									"scores":	[-6.07371268840273]
								}, {
									"case":	33,
									"scores":	[-6.07371268840273]
								}, {
									"case":	34,
									"scores":	[-6.07371268840273]
								}, {
									"case":	35,
									"scores":	[-6.07371268840273]
								}, {
									"case":	36,
									"scores":	[-6.07371268840273]
								}, {
									"case":	37,
									"scores":	[-6.07371268840273]
								}, {
									"case":	38,
									"scores":	[-6.07371268840273]
								}, {
									"case":	39,
									"scores":	[-6.07371268840273]
								}, {
									"case":	40,
									"scores":	[-6.07371268840273]
								}, {
									"case":	41,
									"scores":	[-6.07371268840273]
								}, {
									"case":	42,
									"scores":	[-6.07371268840273]
								}, {
									"case":	43,
									"scores":	[-6.07371268840273]
								}, {
									"case":	44,
									"scores":	[-6.07371268840273]
								}, {
									"case":	45,
									"scores":	[-6.07371268840273]
								}, {
									"case":	46,
									"scores":	[-6.07371268840273]
								}, {
									"case":	47,
									"scores":	[-6.07371268840273]
								}, {
									"case":	48,
									"scores":	[-6.07371268840273]
								}, {
									"case":	49,
									"scores":	[-6.07371268840273]
								}, {
									"case":	50,
									"scores":	[-6.07371268840273]
								}, {
									"case":	51,
									"scores":	[-6.07371268840273]
								}, {
									"case":	52,
									"scores":	[-6.07371268840273]
								}, {
									"case":	53,
									"scores":	[-6.07371268840273]
								}, {
									"case":	54,
									"scores":	[-6.07371268840273]
								}, {
									"case":	55,
									"scores":	[-6.07371268840273]
								}, {
									"case":	56,
									"scores":	[-6.07371268840273]
								}, {
									"case":	57,
									"scores":	[-6.07371268840273]
								}, {
									"case":	58,
									"scores":	[-6.07371268840273]
								}, {
									"case":	59,
									"scores":	[-6.07371268840273]
								}, {
									"case":	60,
									"scores":	[-6.07371268840273]
								}, {
									"case":	61,
									"scores":	[-6.07371268840273]
								}, {
									"case":	62,
									"scores":	[-6.07371268840273]
								}, {
									"case":	63,
									"scores":	[-6.07371268840273]
								}, {
									"case":	64,
									"scores":	[-6.07371268840273]
								}, {
									"case":	65,
									"scores":	[-6.07371268840273]
								}, {
									"case":	66,
									"scores":	[-6.07371268840273]
								}, {
									"case":	67,
									"scores":	[-6.07371268840273]
								}, {
									"case":	68,
									"scores":	[-6.07371268840273]
								}, {
									"case":	69,
									"scores":	[-6.07371268840273]
								}, {
									"case":	70,
									"scores":	[-6.07371268840273]
								}, {
									"case":	71,
									"scores":	[-6.07371268840273]
								}, {
									"case":	72,
									"scores":	[-6.07371268840273]
								}, {
									"case":	73,
									"scores":	[-6.07371268840273]
								}, {
									"case":	74,
									"scores":	[-6.07371268840273]
								}, {
									"case":	75,
									"scores":	[-6.07371268840273]
								}, {
									"case":	76,
									"scores":	[-6.07371268840273]
								}, {
									"case":	77,
									"scores":	[-6.07371268840273]
								}, {
									"case":	78,
									"scores":	[-6.07371268840273]
								}, {
									"case":	79,
									"scores":	[-6.07371268840273]
								}, {
									"case":	80,
									"scores":	[-6.07371268840273]
								}, {
									"case":	81,
									"scores":	[-6.07371268840273]
								}, {
									"case":	82,
									"scores":	[-6.07371268840273]
								}, {
									"case":	83,
									"scores":	[-6.07371268840273]
								}, {
									"case":	84,
									"scores":	[-6.07371268840273]
								}, {
									"case":	85,
									"scores":	[-6.07371268840273]
								}, {
									"case":	86,
									"scores":	[-6.07371268840273]
								}, {
									"case":	87,
									"scores":	[-6.07371268840273]
								}, {
									"case":	88,
									"scores":	[-6.07371268840273]
								}, {
									"case":	89,
									"scores":	[-6.07371268840273]
								}, {
									"case":	90,
									"scores":	[-6.07371268840273]
								}, {
									"case":	91,
									"scores":	[-6.07371268840273]
								}, {
									"case":	92,
									"scores":	[-6.07371268840273]
								}, {
									"case":	93,
									"scores":	[-6.07371268840273]
								}, {
									"case":	94,
									"scores":	[-6.07371268840273]
								}, {
									"case":	95,
									"scores":	[-6.07371268840273]
								}, {
									"case":	96,
									"scores":	[-6.07371268840273]
								}, {
									"case":	97,
									"scores":	[-6.07371268840273]
								}, {
									"case":	98,
									"scores":	[-6.07371268840273]
								}, {
									"case":	99,
									"scores":	[-6.07371268840273]
								}, {
									"case":	100,
									"scores":	[-6.07371268840273]
								}, {
									"case":	101,
									"scores":	[-6.07371268840273]
								}, {
									"case":	102,
									"scores":	[-6.07371268840273]
								}, {
									"case":	103,
									"scores":	[-6.07371268840273]
								}, {
									"case":	104,
									"scores":	[-6.07371268840273]
								}, {
									"case":	105,
									"scores":	[-6.07371268840273]
								}, {
									"case":	106,
									"scores":	[-6.07371268840273]
								}, {
									"case":	107,
									"scores":	[-6.07371268840273]
								}, {
									"case":	108,
									"scores":	[-6.07371268840273]
								}, {
									"case":	109,
									"scores":	[-6.07371268840273]
								}, {
									"case":	110,
									"scores":	[-6.07371268840273]
								}, {
									"case":	111,
									"scores":	[-6.07371268840273]
								}, {
									"case":	112,
									"scores":	[-6.07371268840273]
								}, {
									"case":	113,
									"scores":	[-6.07371268840273]
								}, {
									"case":	114,
									"scores":	[-6.07371268840273]
								}, {
									"case":	115,
									"scores":	[-6.07371268840273]
								}, {
									"case":	116,
									"scores":	[-6.07371268840273]
								}, {
									"case":	117,
									"scores":	[-6.07371268840273]
								}, {
									"case":	118,
									"scores":	[-6.07371268840273]
								}, {
									"case":	119,
									"scores":	[-6.07371268840273]
								}, {
									"case":	120,
									"scores":	[-6.07371268840273]
								}, {
									"case":	121,
									"scores":	[-6.07371268840273]
								}, {
									"case":	122,
									"scores":	[-6.07371268840273]
								}, {
									"case":	123,
									"scores":	[-6.07371268840273]
								}, {
									"case":	124,
									"scores":	[-6.07371268840273]
								}, {
									"case":	125,
									"scores":	[-6.07371268840273]
								}, {
									"case":	126,
									"scores":	[-6.07371268840273]
								}, {
									"case":	127,
									"scores":	[-6.07371268840273]
								}, {
									"case":	128,
									"scores":	[-6.07371268840273]
								}, {
									"case":	129,
									"scores":	[-6.07371268840273]
								}, {
									"case":	130,
									"scores":	[-6.07371268840273]
								}, {
									"case":	131,
									"scores":	[-6.07371268840273]
								}, {
									"case":	132,
									"scores":	[-6.07371268840273]
								}, {
									"case":	133,
									"scores":	[-6.07371268840273]
								}, {
									"case":	134,
									"scores":	[-6.07371268840273]
								}, {
									"case":	135,
									"scores":	[-6.07371268840273]
								}, {
									"case":	136,
									"scores":	[-6.07371268840273]
								}, {
									"case":	137,
									"scores":	[-6.07371268840273]
								}, {
									"case":	138,
									"scores":	[-6.07371268840273]
								}, {
									"case":	139,
									"scores":	[-6.07371268840273]
								}, {
									"case":	140,
									"scores":	[-6.07371268840273]
								}, {
									"case":	141,
									"scores":	[-6.07371268840273]
								}, {
									"case":	142,
									"scores":	[-6.07371268840273]
								}, {
									"case":	143,
									"scores":	[-6.07371268840273]
								}, {
									"case":	144,
									"scores":	[-6.07371268840273]
								}, {
									"case":	145,
									"scores":	[-6.07371268840273]
								}, {
									"case":	146,
									"scores":	[-6.07371268840273]
								}, {
									"case":	147,
									"scores":	[-6.07371268840273]
								}, {
									"case":	148,
									"scores":	[-6.07371268840273]
								}, {
									"case":	149,
									"scores":	[-6.07371268840273]
								}, {
									"case":	150,
									"scores":	[-6.07371268840273]
								}, {
									"case":	151,
									"scores":	[-6.07371268840273]
								}, {
									"case":	152,
									"scores":	[-6.07371268840273]
								}, {
									"case":	153,
									"scores":	[-6.07371268840273]
								}, {
									"case":	154,
									"scores":	[-6.07371268840273]
								}, {
									"case":	155,
									"scores":	[-6.07371268840273]
								}, {
									"case":	156,
									"scores":	[-6.07371268840273]
								}, {
									"case":	157,
									"scores":	[-6.07371268840273]
								}, {
									"case":	158,
									"scores":	[-6.07371268840273]
								}, {
									"case":	159,
									"scores":	[-6.07371268840273]
								}, {
									"case":	160,
									"scores":	[-6.07371268840273]
								}, {
									"case":	161,
									"scores":	[-6.07371268840273]
								}, {
									"case":	162,
									"scores":	[-6.07371268840273]
								}, {
									"case":	163,
									"scores":	[-6.07371268840273]
								}, {
									"case":	164,
									"scores":	[-6.07371268840273]
								}, {
									"case":	165,
									"scores":	[-6.07371268840273]
								}, {
									"case":	166,
									"scores":	[-6.07371268840273]
								}, {
									"case":	167,
									"scores":	[-6.07371268840273]
								}, {
									"case":	168,
									"scores":	[-6.07371268840273]
								}, {
									"case":	169,
									"scores":	[-6.07371268840273]
								}, {
									"case":	170,
									"scores":	[-6.07371268840273]
								}, {
									"case":	171,
									"scores":	[-6.07371268840273]
								}, {
									"case":	172,
									"scores":	[-6.07371268840273]
								}, {
									"case":	173,
									"scores":	[-6.07371268840273]
								}, {
									"case":	174,
									"scores":	[-6.07371268840273]
								}, {
									"case":	175,
									"scores":	[-6.07371268840273]
								}, {
									"case":	176,
									"scores":	[-6.07371268840273]
								}, {
									"case":	177,
									"scores":	[-6.07371268840273]
								}, {
									"case":	178,
									"scores":	[-6.07371268840273]
								}, {
									"case":	179,
									"scores":	[-6.07371268840273]
								}, {
									"case":	180,
									"scores":	[-6.07371268840273]
								}, {
									"case":	181,
									"scores":	[-6.07371268840273]
								}, {
									"case":	182,
									"scores":	[-6.07371268840273]
								}, {
									"case":	183,
									"scores":	[-6.07371268840273]
								}, {
									"case":	184,
									"scores":	[-6.07371268840273]
								}, {
									"case":	185,
									"scores":	[-6.07371268840273]
								}, {
									"case":	186,
									"scores":	[-6.07371268840273]
								}, {
									"case":	187,
									"scores":	[-6.07371268840273]
								}, {
									"case":	188,
									"scores":	[-6.07371268840273]
								}, {
									"case":	189,
									"scores":	[-6.07371268840273]
								}, {
									"case":	190,
									"scores":	[-6.07371268840273]
								}, {
									"case":	191,
									"scores":	[-6.07371268840273]
								}, {
									"case":	192,
									"scores":	[-6.07371268840273]
								}, {
									"case":	193,
									"scores":	[-6.07371268840273]
								}, {
									"case":	194,
									"scores":	[-6.07371268840273]
								}, {
									"case":	195,
									"scores":	[-6.07371268840273]
								}, {
									"case":	196,
									"scores":	[-6.07371268840273]
								}, {
									"case":	197,
									"scores":	[-6.07371268840273]
								}, {
									"case":	198,
									"scores":	[-6.07371268840273]
								}, {
									"case":	199,
									"scores":	[-6.07371268840273]
								}, {
									"case":	200,
									"scores":	[-6.07371268840273]
								}, {
									"case":	201,
									"scores":	[-6.07371268840273]
								}, {
									"case":	202,
									"scores":	[-6.07371268840273]
								}, {
									"case":	203,
									"scores":	[-6.07371268840273]
								}, {
									"case":	204,
									"scores":	[-6.07371268840273]
								}, {
									"case":	205,
									"scores":	[-6.07371268840273]
								}, {
									"case":	206,
									"scores":	[-6.07371268840273]
								}, {
									"case":	207,
									"scores":	[-6.07371268840273]
								}, {
									"case":	208,
									"scores":	[-6.07371268840273]
								}, {
									"case":	209,
									"scores":	[-6.07371268840273]
								}, {
									"case":	210,
									"scores":	[-6.07371268840273]
								}, {
									"case":	211,
									"scores":	[-6.07371268840273]
								}, {
									"case":	212,
									"scores":	[-6.07371268840273]
								}, {
									"case":	213,
									"scores":	[-6.07371268840273]
								}, {
									"case":	214,
									"scores":	[-6.07371268840273]
								}, {
									"case":	215,
									"scores":	[-6.07371268840273]
								}, {
									"case":	216,
									"scores":	[-6.07371268840273]
								}, {
									"case":	217,
									"scores":	[-6.07371268840273]
								}, {
									"case":	218,
									"scores":	[-6.07371268840273]
								}, {
									"case":	219,
									"scores":	[-6.07371268840273]
								}, {
									"case":	220,
									"scores":	[-6.07371268840273]
								}, {
									"case":	221,
									"scores":	[-6.07371268840273]
								}, {
									"case":	222,
									"scores":	[-6.07371268840273]
								}, {
									"case":	223,
									"scores":	[-6.07371268840273]
								}, {
									"case":	224,
									"scores":	[-6.07371268840273]
								}, {
									"case":	225,
									"scores":	[-10.643509048402729, -8.97696120940273, -12.03174990840273, -9.31482281840273, -11.85006792440273, -11.947283068402729, -11.540698401402729, -11.24961220140273, -9.31264130840273, -12.937630028402729, -12.87093384140273, -12.402750808402729, -11.97125220840273, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -11.767674808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.40945250840273, -12.402750808402729, -12.40945250840273, -12.40945250840273, -12.402750808402729, -12.402750808402729, -12.40945250840273, -12.402750808402729, -11.767674808402729, -12.40945250840273, -12.402750808402729, -12.36532640840273]
								}, {
									"case":	226,
									"scores":	[-8.62506304840273, -6.95851520940273, -10.01330390840273, -7.29637681840273, -9.83162192440273, -9.92883706840273, -9.52225240140273, -9.23116620140273, -7.29419530840273, -10.919184028402729, -10.852487841402731, -10.38430480840273, -9.95280620840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -9.74922880840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.38430480840273, -10.391006508402729, -10.38430480840273, -10.391006508402729, -10.391006508402729, -10.38430480840273, -10.38430480840273, -10.391006508402729, -10.38430480840273, -9.74922880840273, -10.391006508402729, -10.38430480840273, -10.346880408402729]
								}, {
									"case":	227,
									"scores":	[-10.643509048402729, -8.97696120940273, -12.03174990840273, -9.31482281840273, -11.85006792440273, -11.947283068402729, -11.540698401402729, -11.24961220140273, -9.31264130840273, -12.937630028402729, -12.87093384140273, -12.402750808402729, -11.97125220840273, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -11.767674808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.402750808402729, -12.40945250840273, -12.402750808402729, -12.40945250840273, -12.40945250840273, -12.402750808402729, -12.402750808402729, -12.40945250840273, -12.402750808402729, -11.767674808402729, -12.40945250840273, -12.402750808402729, -12.36532640840273]
								}]
						}, {
							"switch":	20,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	156,
							"begin_column":	2,
							"end_line":	157,
							"end_column":	8,
							"patch_codes":	["if (__is_neg(\"\", \"L156\", 45, &(rowsperstrip), sizeof (rowsperstrip), &(rows), sizeof (rows), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rows = rowsperstrip;\n", "if ((rows > rowsperstrip) || __is_neg(\"\", \"L156\", 45, &(rowsperstrip), sizeof (rowsperstrip), &(rows), sizeof (rows), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rows = rowsperstrip;\n", "if ((rows > rowsperstrip) && !__is_neg(\"\", \"L156\", 45, &(rowsperstrip), sizeof (rowsperstrip), &(rows), sizeof (rows), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    rows = rowsperstrip;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.70261690082814754, -0.035760123428148827, -3.7557649544281473, -2.114211705828148, -3.8461520734281471, -2.8781488184281487, -2.8328240744281472, -2.5222047744281473, -2.1129868634281479, -3.8224194034281465, -3.987586991428147, -3.7476124584281472, -3.5849942584281473, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.3880441734281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -3.7476124584281472, -4.0964016584281469, -3.7476124584281472, -4.0964016584281469, -4.0964016584281469, -3.7476124584281472, -3.7476124584281472, -4.0964016584281469, -3.7476124584281472, -3.3880441734281472, -4.0964016584281469, -3.7476124584281472, -4.5505645584281478]
								}, {
									"case":	2,
									"scores":	[-0.60583003982814665, 0.0610267375718534, -3.658978093428146, -2.0174248448281467, -3.7493652124281458, -2.781361957428147, -2.7360372134281459, -2.4254179134281464, -2.0162000024281466, -3.725632542428146, -3.8908001304281461, -3.6508255974281458, -3.488207397428146, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.2912573124281459, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.999614797428146, -3.6508255974281458, -3.999614797428146, -3.999614797428146, -3.6508255974281458, -3.6508255974281458, -3.999614797428146, -3.6508255974281458, -3.2912573124281459, -3.999614797428146, -3.6508255974281458, -4.453777697428146]
								}, {
									"case":	3,
									"scores":	[-0.60583003982814665, 0.0610267375718534, -3.658978093428146, -2.0174248448281467, -3.7493652124281458, -2.781361957428147, -2.7360372134281459, -2.4254179134281464, -2.0162000024281466, -3.725632542428146, -3.8908001304281461, -3.6508255974281458, -3.488207397428146, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.2912573124281459, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.6508255974281458, -3.999614797428146, -3.6508255974281458, -3.999614797428146, -3.999614797428146, -3.6508255974281458, -3.6508255974281458, -3.999614797428146, -3.6508255974281458, -3.2912573124281459, -3.999614797428146, -3.6508255974281458, -4.453777697428146]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	156,
							"begin_column":	2,
							"end_line":	157,
							"end_column":	8,
							"patch_codes":	["if (!__is_neg(\"\", \"L156\", 45, &(rowsperstrip), sizeof (rowsperstrip), &(rows), sizeof (rows), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(td->td_imagelength), sizeof (td->td_imagelength), &(tif), sizeof (tif), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(stripsize), sizeof (stripsize), &(size), sizeof (size), &(td->td_rowsperstrip), sizeof (td->td_rowsperstrip), &(buf), sizeof (buf), &(td->td_nstrips), sizeof (td->td_nstrips), &(td->td_imagewidth), sizeof (td->td_imagewidth), &(td->td_imagedepth), sizeof (td->td_imagedepth), &(td->td_tilewidth), sizeof (td->td_tilewidth), &(td->td_tilelength), sizeof (td->td_tilelength), &(td->td_tiledepth), sizeof (td->td_tiledepth), &(td->td_subfiletype), sizeof (td->td_subfiletype), &(td->td_bitspersample), sizeof (td->td_bitspersample), &(td->td_sampleformat), sizeof (td->td_sampleformat), &(td->td_compression), sizeof (td->td_compression), &(td->td_photometric), sizeof (td->td_photometric), &(td->td_threshholding), sizeof (td->td_threshholding), &(td->td_fillorder), sizeof (td->td_fillorder), &(td->td_orientation), sizeof (td->td_orientation), &(td->td_samplesperpixel), sizeof (td->td_samplesperpixel), &(td->td_minsamplevalue), sizeof (td->td_minsamplevalue), &(td->td_maxsamplevalue), sizeof (td->td_maxsamplevalue), &(td->td_resolutionunit), sizeof (td->td_resolutionunit), &(td->td_planarconfig), sizeof (td->td_planarconfig), &(td->td_extrasamples), sizeof (td->td_extrasamples), &(td->td_sampleinfo), sizeof (td->td_sampleinfo), &(td->td_stripsperimage), sizeof (td->td_stripsperimage), &(td->td_stripoffset), sizeof (td->td_stripoffset), &(td->td_stripbytecount), sizeof (td->td_stripbytecount), &(td->td_stripbytecountsorted), sizeof (td->td_stripbytecountsorted), &(td->td_nsubifd), sizeof (td->td_nsubifd), &(td->td_subifd), sizeof (td->td_subifd), &(td->td_ycbcrpositioning), sizeof (td->td_ycbcrpositioning), &(td->td_inknameslen), sizeof (td->td_inknameslen), &(td->td_inknames), sizeof (td->td_inknames), &(td->td_customValueCount), sizeof (td->td_customValueCount), &(td->td_customValues), sizeof (td->td_customValues)))\n    if (rows > rowsperstrip)\n        rows = rowsperstrip;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.20083715080273, -4.53398037340273, -8.25398520440273, -6.61243195580273, -8.34437232340273, -7.37636906840273, -7.33104432440273, -7.02042502440273, -6.61120711340273, -8.32063965340273, -8.48580724140273, -8.24583270840273, -8.08321450840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -7.88626442340273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.24583270840273, -8.59462190840273, -8.24583270840273, -8.59462190840273, -8.59462190840273, -8.24583270840273, -8.24583270840273, -8.59462190840273, -8.24583270840273, -7.88626442340273, -8.59462190840273, -8.24583270840273, -9.04878480840273]
								}]
						}]
				}, {
					"line":	157,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	158,
							"begin_column":	0,
							"end_line":	158,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif, 0, sizeof (*(tif)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L158\", 74, &(tif), sizeof (tif), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(rowsperstrip), sizeof (rowsperstrip), &(size), sizeof (size), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return -1;\n", "if (__is_neg(\"\", \"L158\", 74, &(tif), sizeof (tif), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(rowsperstrip), sizeof (rowsperstrip), &(size), sizeof (size), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 0;\n", "if (__is_neg(\"\", \"L158\", 74, &(tif), sizeof (tif), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(rowsperstrip), sizeof (rowsperstrip), &(size), sizeof (size), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.05350998108521]
								}, {
									"case":	2,
									"scores":	[-6.05350998108521]
								}, {
									"case":	3,
									"scores":	[-6.05350998108521]
								}, {
									"case":	4,
									"scores":	[-6.05350998108521]
								}, {
									"case":	5,
									"scores":	[-6.05350998108521]
								}, {
									"case":	6,
									"scores":	[-6.05350998108521]
								}, {
									"case":	7,
									"scores":	[-6.05350998108521]
								}, {
									"case":	8,
									"scores":	[-6.05350998108521]
								}, {
									"case":	9,
									"scores":	[-6.05350998108521]
								}, {
									"case":	10,
									"scores":	[-6.05350998108521]
								}, {
									"case":	11,
									"scores":	[-6.05350998108521]
								}, {
									"case":	12,
									"scores":	[-6.05350998108521]
								}, {
									"case":	13,
									"scores":	[-6.05350998108521]
								}, {
									"case":	14,
									"scores":	[-6.05350998108521]
								}, {
									"case":	15,
									"scores":	[-6.05350998108521]
								}, {
									"case":	16,
									"scores":	[-6.05350998108521]
								}, {
									"case":	17,
									"scores":	[-6.05350998108521]
								}, {
									"case":	18,
									"scores":	[-6.05350998108521]
								}, {
									"case":	19,
									"scores":	[-6.05350998108521]
								}, {
									"case":	20,
									"scores":	[-6.05350998108521]
								}, {
									"case":	21,
									"scores":	[-6.05350998108521]
								}, {
									"case":	22,
									"scores":	[-6.05350998108521]
								}, {
									"case":	23,
									"scores":	[-6.05350998108521]
								}, {
									"case":	24,
									"scores":	[-6.05350998108521]
								}, {
									"case":	25,
									"scores":	[-6.05350998108521]
								}, {
									"case":	26,
									"scores":	[-6.05350998108521]
								}, {
									"case":	27,
									"scores":	[-6.05350998108521]
								}, {
									"case":	28,
									"scores":	[-6.05350998108521]
								}, {
									"case":	29,
									"scores":	[-6.05350998108521]
								}, {
									"case":	30,
									"scores":	[-6.05350998108521]
								}, {
									"case":	31,
									"scores":	[-6.05350998108521]
								}, {
									"case":	32,
									"scores":	[-6.05350998108521]
								}, {
									"case":	33,
									"scores":	[-6.05350998108521]
								}, {
									"case":	34,
									"scores":	[-6.05350998108521]
								}, {
									"case":	35,
									"scores":	[-6.05350998108521]
								}, {
									"case":	36,
									"scores":	[-6.05350998108521]
								}, {
									"case":	37,
									"scores":	[-6.05350998108521]
								}, {
									"case":	38,
									"scores":	[-6.05350998108521]
								}, {
									"case":	39,
									"scores":	[-6.05350998108521]
								}, {
									"case":	40,
									"scores":	[-6.05350998108521]
								}, {
									"case":	41,
									"scores":	[-6.05350998108521]
								}, {
									"case":	42,
									"scores":	[-6.05350998108521]
								}, {
									"case":	43,
									"scores":	[-6.05350998108521]
								}, {
									"case":	44,
									"scores":	[-6.05350998108521]
								}, {
									"case":	45,
									"scores":	[-6.05350998108521]
								}, {
									"case":	46,
									"scores":	[-6.05350998108521]
								}, {
									"case":	47,
									"scores":	[-6.05350998108521]
								}, {
									"case":	48,
									"scores":	[-6.05350998108521]
								}, {
									"case":	49,
									"scores":	[-6.05350998108521]
								}, {
									"case":	50,
									"scores":	[-6.05350998108521]
								}, {
									"case":	51,
									"scores":	[-6.05350998108521]
								}, {
									"case":	52,
									"scores":	[-6.05350998108521]
								}, {
									"case":	53,
									"scores":	[-6.05350998108521]
								}, {
									"case":	54,
									"scores":	[-6.05350998108521]
								}, {
									"case":	55,
									"scores":	[-6.05350998108521]
								}, {
									"case":	56,
									"scores":	[-6.05350998108521]
								}, {
									"case":	57,
									"scores":	[-6.05350998108521]
								}, {
									"case":	58,
									"scores":	[-6.05350998108521]
								}, {
									"case":	59,
									"scores":	[-6.05350998108521]
								}, {
									"case":	60,
									"scores":	[-6.05350998108521]
								}, {
									"case":	61,
									"scores":	[-6.05350998108521]
								}, {
									"case":	62,
									"scores":	[-6.05350998108521]
								}, {
									"case":	63,
									"scores":	[-6.05350998108521]
								}, {
									"case":	64,
									"scores":	[-6.05350998108521]
								}, {
									"case":	65,
									"scores":	[-6.05350998108521]
								}, {
									"case":	66,
									"scores":	[-6.05350998108521]
								}, {
									"case":	67,
									"scores":	[-6.05350998108521]
								}, {
									"case":	68,
									"scores":	[-6.05350998108521]
								}, {
									"case":	69,
									"scores":	[-6.05350998108521]
								}, {
									"case":	70,
									"scores":	[-6.05350998108521]
								}, {
									"case":	71,
									"scores":	[-6.05350998108521]
								}, {
									"case":	72,
									"scores":	[-6.05350998108521]
								}, {
									"case":	73,
									"scores":	[-6.05350998108521]
								}, {
									"case":	74,
									"scores":	[-6.05350998108521]
								}, {
									"case":	75,
									"scores":	[-6.05350998108521]
								}, {
									"case":	76,
									"scores":	[-6.05350998108521]
								}, {
									"case":	77,
									"scores":	[-6.05350998108521]
								}, {
									"case":	78,
									"scores":	[-6.05350998108521]
								}, {
									"case":	79,
									"scores":	[-6.05350998108521]
								}, {
									"case":	80,
									"scores":	[-6.05350998108521]
								}, {
									"case":	81,
									"scores":	[-6.05350998108521]
								}, {
									"case":	82,
									"scores":	[-6.05350998108521]
								}, {
									"case":	83,
									"scores":	[-6.05350998108521]
								}, {
									"case":	84,
									"scores":	[-6.05350998108521]
								}, {
									"case":	85,
									"scores":	[-6.05350998108521]
								}, {
									"case":	86,
									"scores":	[-6.05350998108521]
								}, {
									"case":	87,
									"scores":	[-6.05350998108521]
								}, {
									"case":	88,
									"scores":	[-6.05350998108521]
								}, {
									"case":	89,
									"scores":	[-6.05350998108521]
								}, {
									"case":	90,
									"scores":	[-6.05350998108521]
								}, {
									"case":	91,
									"scores":	[-6.05350998108521]
								}, {
									"case":	92,
									"scores":	[-6.05350998108521]
								}, {
									"case":	93,
									"scores":	[-6.05350998108521]
								}, {
									"case":	94,
									"scores":	[-6.05350998108521]
								}, {
									"case":	95,
									"scores":	[-6.05350998108521]
								}, {
									"case":	96,
									"scores":	[-6.05350998108521]
								}, {
									"case":	97,
									"scores":	[-6.05350998108521]
								}, {
									"case":	98,
									"scores":	[-6.05350998108521]
								}, {
									"case":	99,
									"scores":	[-6.05350998108521]
								}, {
									"case":	100,
									"scores":	[-6.05350998108521]
								}, {
									"case":	101,
									"scores":	[-6.05350998108521]
								}, {
									"case":	102,
									"scores":	[-6.05350998108521]
								}, {
									"case":	103,
									"scores":	[-6.05350998108521]
								}, {
									"case":	104,
									"scores":	[-6.05350998108521]
								}, {
									"case":	105,
									"scores":	[-6.05350998108521]
								}, {
									"case":	106,
									"scores":	[-6.05350998108521]
								}, {
									"case":	107,
									"scores":	[-6.05350998108521]
								}, {
									"case":	108,
									"scores":	[-6.05350998108521]
								}, {
									"case":	109,
									"scores":	[-6.05350998108521]
								}, {
									"case":	110,
									"scores":	[-6.05350998108521]
								}, {
									"case":	111,
									"scores":	[-6.05350998108521]
								}, {
									"case":	112,
									"scores":	[-6.05350998108521]
								}, {
									"case":	113,
									"scores":	[-6.05350998108521]
								}, {
									"case":	114,
									"scores":	[-6.05350998108521]
								}, {
									"case":	115,
									"scores":	[-6.05350998108521]
								}, {
									"case":	116,
									"scores":	[-6.05350998108521]
								}, {
									"case":	117,
									"scores":	[-6.05350998108521]
								}, {
									"case":	118,
									"scores":	[-6.05350998108521]
								}, {
									"case":	119,
									"scores":	[-6.05350998108521]
								}, {
									"case":	120,
									"scores":	[-6.05350998108521]
								}, {
									"case":	121,
									"scores":	[-6.05350998108521]
								}, {
									"case":	122,
									"scores":	[-6.05350998108521]
								}, {
									"case":	123,
									"scores":	[-6.05350998108521]
								}, {
									"case":	124,
									"scores":	[-6.05350998108521]
								}, {
									"case":	125,
									"scores":	[-6.05350998108521]
								}, {
									"case":	126,
									"scores":	[-6.05350998108521]
								}, {
									"case":	127,
									"scores":	[-6.05350998108521]
								}, {
									"case":	128,
									"scores":	[-6.05350998108521]
								}, {
									"case":	129,
									"scores":	[-6.05350998108521]
								}, {
									"case":	130,
									"scores":	[-6.05350998108521]
								}, {
									"case":	131,
									"scores":	[-6.05350998108521]
								}, {
									"case":	132,
									"scores":	[-6.05350998108521]
								}, {
									"case":	133,
									"scores":	[-6.05350998108521]
								}, {
									"case":	134,
									"scores":	[-6.05350998108521]
								}, {
									"case":	135,
									"scores":	[-6.05350998108521]
								}, {
									"case":	136,
									"scores":	[-6.05350998108521]
								}, {
									"case":	137,
									"scores":	[-6.05350998108521]
								}, {
									"case":	138,
									"scores":	[-6.05350998108521]
								}, {
									"case":	139,
									"scores":	[-6.05350998108521]
								}, {
									"case":	140,
									"scores":	[-6.05350998108521]
								}, {
									"case":	141,
									"scores":	[-6.05350998108521]
								}, {
									"case":	142,
									"scores":	[-6.05350998108521]
								}, {
									"case":	143,
									"scores":	[-6.05350998108521]
								}, {
									"case":	144,
									"scores":	[-6.05350998108521]
								}, {
									"case":	145,
									"scores":	[-6.05350998108521]
								}, {
									"case":	146,
									"scores":	[-6.05350998108521]
								}, {
									"case":	147,
									"scores":	[-6.05350998108521]
								}, {
									"case":	148,
									"scores":	[-6.05350998108521]
								}, {
									"case":	149,
									"scores":	[-6.05350998108521]
								}, {
									"case":	150,
									"scores":	[-6.05350998108521]
								}, {
									"case":	151,
									"scores":	[-6.05350998108521]
								}, {
									"case":	152,
									"scores":	[-6.05350998108521]
								}, {
									"case":	153,
									"scores":	[-6.05350998108521]
								}, {
									"case":	154,
									"scores":	[-6.05350998108521]
								}, {
									"case":	155,
									"scores":	[-6.05350998108521]
								}, {
									"case":	156,
									"scores":	[-6.05350998108521]
								}, {
									"case":	157,
									"scores":	[-6.05350998108521]
								}, {
									"case":	158,
									"scores":	[-6.05350998108521]
								}, {
									"case":	159,
									"scores":	[-6.05350998108521]
								}, {
									"case":	160,
									"scores":	[-6.05350998108521]
								}, {
									"case":	161,
									"scores":	[-6.05350998108521]
								}, {
									"case":	162,
									"scores":	[-6.05350998108521]
								}, {
									"case":	163,
									"scores":	[-6.05350998108521]
								}, {
									"case":	164,
									"scores":	[-6.05350998108521]
								}, {
									"case":	165,
									"scores":	[-6.05350998108521]
								}, {
									"case":	166,
									"scores":	[-6.05350998108521]
								}, {
									"case":	167,
									"scores":	[-6.05350998108521]
								}, {
									"case":	168,
									"scores":	[-6.05350998108521]
								}, {
									"case":	169,
									"scores":	[-6.05350998108521]
								}, {
									"case":	170,
									"scores":	[-6.05350998108521]
								}, {
									"case":	171,
									"scores":	[-6.05350998108521]
								}, {
									"case":	172,
									"scores":	[-6.05350998108521]
								}, {
									"case":	173,
									"scores":	[-6.05350998108521]
								}, {
									"case":	174,
									"scores":	[-6.05350998108521]
								}, {
									"case":	175,
									"scores":	[-6.05350998108521]
								}, {
									"case":	176,
									"scores":	[-6.05350998108521]
								}, {
									"case":	177,
									"scores":	[-6.05350998108521]
								}, {
									"case":	178,
									"scores":	[-6.05350998108521]
								}, {
									"case":	179,
									"scores":	[-6.05350998108521]
								}, {
									"case":	180,
									"scores":	[-6.05350998108521]
								}, {
									"case":	181,
									"scores":	[-6.05350998108521]
								}, {
									"case":	182,
									"scores":	[-6.05350998108521]
								}, {
									"case":	183,
									"scores":	[-6.05350998108521]
								}, {
									"case":	184,
									"scores":	[-6.05350998108521]
								}, {
									"case":	185,
									"scores":	[-6.05350998108521]
								}, {
									"case":	186,
									"scores":	[-6.05350998108521]
								}, {
									"case":	187,
									"scores":	[-6.05350998108521]
								}, {
									"case":	188,
									"scores":	[-6.05350998108521]
								}, {
									"case":	189,
									"scores":	[-6.05350998108521]
								}, {
									"case":	190,
									"scores":	[-6.05350998108521]
								}, {
									"case":	191,
									"scores":	[-6.05350998108521]
								}, {
									"case":	192,
									"scores":	[-6.05350998108521]
								}, {
									"case":	193,
									"scores":	[-6.05350998108521]
								}, {
									"case":	194,
									"scores":	[-6.05350998108521]
								}, {
									"case":	195,
									"scores":	[-6.05350998108521]
								}, {
									"case":	196,
									"scores":	[-6.05350998108521]
								}, {
									"case":	197,
									"scores":	[-6.05350998108521]
								}, {
									"case":	198,
									"scores":	[-6.05350998108521]
								}, {
									"case":	199,
									"scores":	[-6.05350998108521]
								}, {
									"case":	200,
									"scores":	[-6.05350998108521]
								}, {
									"case":	201,
									"scores":	[-6.05350998108521]
								}, {
									"case":	202,
									"scores":	[-6.05350998108521]
								}, {
									"case":	203,
									"scores":	[-6.05350998108521]
								}, {
									"case":	204,
									"scores":	[-6.05350998108521]
								}, {
									"case":	205,
									"scores":	[-6.05350998108521]
								}, {
									"case":	206,
									"scores":	[-6.05350998108521]
								}, {
									"case":	207,
									"scores":	[-6.05350998108521]
								}, {
									"case":	208,
									"scores":	[-6.05350998108521]
								}, {
									"case":	209,
									"scores":	[-6.05350998108521]
								}, {
									"case":	210,
									"scores":	[-6.05350998108521]
								}, {
									"case":	211,
									"scores":	[-6.05350998108521]
								}, {
									"case":	212,
									"scores":	[-6.05350998108521]
								}, {
									"case":	213,
									"scores":	[-6.05350998108521]
								}, {
									"case":	214,
									"scores":	[-6.05350998108521]
								}, {
									"case":	215,
									"scores":	[-6.05350998108521]
								}, {
									"case":	216,
									"scores":	[-6.05350998108521]
								}, {
									"case":	217,
									"scores":	[-6.05350998108521]
								}, {
									"case":	218,
									"scores":	[-6.05350998108521]
								}, {
									"case":	219,
									"scores":	[-6.05350998108521]
								}, {
									"case":	220,
									"scores":	[-6.05350998108521]
								}, {
									"case":	221,
									"scores":	[-6.05350998108521]
								}, {
									"case":	222,
									"scores":	[-6.05350998108521]
								}, {
									"case":	223,
									"scores":	[-6.05350998108521]
								}, {
									"case":	224,
									"scores":	[-6.05350998108521]
								}, {
									"case":	225,
									"scores":	[-6.05350998108521]
								}, {
									"case":	226,
									"scores":	[-9.94480606108521, -6.97106527108521, -12.34435860508521, -10.729077121085208, -12.706746134085209, -11.86756220108521, -11.088333111085209, -11.243692694085208, -11.08542449408521, -9.14845360108521, -11.807064501085209, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.20113870108521, -12.20113870108521, -12.20113870108521, -12.238563101085211]
								}, {
									"case":	227,
									"scores":	[-7.92636006108521, -4.95261927108521, -10.325912605085211, -8.71063112108521, -10.68830013408521, -9.84911620108521, -9.06988711108521, -9.22524669408521, -9.06697849408521, -7.13000760108521, -9.78861850108521, -10.220117101085211, -10.220117101085211, -10.22681880108521, -10.22681880108521, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.22681880108521, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.22681880108521, -10.220117101085211, -10.220117101085211, -10.22681880108521, -10.220117101085211, -10.22681880108521, -10.220117101085211, -10.22681880108521, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.220117101085211, -10.22681880108521, -10.220117101085211, -10.182692701085209, -10.182692701085209, -10.182692701085209, -10.220117101085211]
								}, {
									"case":	228,
									"scores":	[-9.94480606108521, -6.97106527108521, -12.34435860508521, -10.729077121085208, -12.706746134085209, -11.86756220108521, -11.088333111085209, -11.243692694085208, -11.08542449408521, -9.14845360108521, -11.807064501085209, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.238563101085211, -12.245264801085209, -12.238563101085211, -12.20113870108521, -12.20113870108521, -12.20113870108521, -12.238563101085211]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [3, 4], [], [], [], [], [], [], [], [2]],
							"begin_line":	158,
							"begin_column":	2,
							"end_line":	158,
							"end_column":	35,
							"patch_codes":	["if (!__is_neg(\"\", \"L158\", 74, &(tif), sizeof (tif), &(rows), sizeof (rows), &(stripsize), sizeof (stripsize), &(rowsperstrip), sizeof (rowsperstrip), &(size), sizeof (size), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(strip), sizeof (strip), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    stripsize = TIFFVStripSize(tif, rows);\n", "{\n}\n", "stripsize = TIFFRawStripSize(tif, rows)", "stripsize = TIFFVTileSize(tif, rows)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((&buf), rows)", "stripsize = TIFFVStripSize((&module), rows)", "stripsize = TIFFVStripSize((&plane), rows)", "stripsize = TIFFVStripSize((&rows), rows)", "stripsize = TIFFVStripSize((&rowsperstrip), rows)", "stripsize = TIFFVStripSize((&size), rows)", "stripsize = TIFFVStripSize((&strip), rows)", "stripsize = TIFFVStripSize((&stripinplane), rows)", "stripsize = TIFFVStripSize((&stripsize), rows)", "stripsize = TIFFVStripSize((&stripsperplane), rows)", "stripsize = TIFFVStripSize((&td), rows)", "stripsize = TIFFVStripSize((&tif), rows)", "stripsize = TIFFVStripSize((tif), rows)", "stripsize = TIFFVStripSize(tif, (0 * plane))", "stripsize = TIFFVStripSize(tif, (0 * rows))", "stripsize = TIFFVStripSize(tif, (0 * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (0 * size))", "stripsize = TIFFVStripSize(tif, (0 * strip))", "stripsize = TIFFVStripSize(tif, (0 * stripinplane))", "stripsize = TIFFVStripSize(tif, (0 * stripsize))", "stripsize = TIFFVStripSize(tif, (0 * stripsperplane))", "stripsize = TIFFVStripSize(tif, (buf != 0))", "stripsize = TIFFVStripSize(tif, (buf == 0))", "stripsize = TIFFVStripSize(tif, (module != 0))", "stripsize = TIFFVStripSize(tif, (module == 0))", "stripsize = TIFFVStripSize(tif, (plane != 0))", "stripsize = TIFFVStripSize(tif, (plane != rows))", "stripsize = TIFFVStripSize(tif, (plane != stripsize))", "stripsize = TIFFVStripSize(tif, (plane * rows))", "stripsize = TIFFVStripSize(tif, (plane * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (plane * size))", "stripsize = TIFFVStripSize(tif, (plane * strip))", "stripsize = TIFFVStripSize(tif, (plane * stripinplane))", "stripsize = TIFFVStripSize(tif, (plane * stripsize))", "stripsize = TIFFVStripSize(tif, (plane * stripsperplane))", "stripsize = TIFFVStripSize(tif, (plane + 0))", "stripsize = TIFFVStripSize(tif, (plane + rows))", "stripsize = TIFFVStripSize(tif, (plane + stripsize))", "stripsize = TIFFVStripSize(tif, (plane - 0))", "stripsize = TIFFVStripSize(tif, (plane - rows))", "stripsize = TIFFVStripSize(tif, (plane - stripsize))", "stripsize = TIFFVStripSize(tif, (plane == 0))", "stripsize = TIFFVStripSize(tif, (plane == rows))", "stripsize = TIFFVStripSize(tif, (plane == stripsize))", "stripsize = TIFFVStripSize(tif, (rows != 0))", "stripsize = TIFFVStripSize(tif, (rows != stripsize))", "stripsize = TIFFVStripSize(tif, (rows * plane))", "stripsize = TIFFVStripSize(tif, (rows * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (rows * size))", "stripsize = TIFFVStripSize(tif, (rows * strip))", "stripsize = TIFFVStripSize(tif, (rows * stripinplane))", "stripsize = TIFFVStripSize(tif, (rows * stripsize))", "stripsize = TIFFVStripSize(tif, (rows * stripsperplane))", "stripsize = TIFFVStripSize(tif, (rows + 0))", "stripsize = TIFFVStripSize(tif, (rows + stripsize))", "stripsize = TIFFVStripSize(tif, (rows - 0))", "stripsize = TIFFVStripSize(tif, (rows - stripsize))", "stripsize = TIFFVStripSize(tif, (rows == 0))", "stripsize = TIFFVStripSize(tif, (rows == stripsize))", "stripsize = TIFFVStripSize(tif, (rows))", "stripsize = TIFFVStripSize(tif, (rowsperstrip != 0))", "stripsize = TIFFVStripSize(tif, (rowsperstrip != plane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip != rows))", "stripsize = TIFFVStripSize(tif, (rowsperstrip != stripinplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip != stripsize))", "stripsize = TIFFVStripSize(tif, (rowsperstrip != stripsperplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip * plane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip * rows))", "stripsize = TIFFVStripSize(tif, (rowsperstrip * size))", "stripsize = TIFFVStripSize(tif, (rowsperstrip * strip))", "stripsize = TIFFVStripSize(tif, (rowsperstrip * stripinplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip * stripsize))", "stripsize = TIFFVStripSize(tif, (rowsperstrip * stripsperplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip + 0))", "stripsize = TIFFVStripSize(tif, (rowsperstrip + plane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip + rows))", "stripsize = TIFFVStripSize(tif, (rowsperstrip + stripinplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip + stripsize))", "stripsize = TIFFVStripSize(tif, (rowsperstrip + stripsperplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip - 0))", "stripsize = TIFFVStripSize(tif, (rowsperstrip - plane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip - rows))", "stripsize = TIFFVStripSize(tif, (rowsperstrip - stripinplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip - stripsize))", "stripsize = TIFFVStripSize(tif, (rowsperstrip - stripsperplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip == 0))", "stripsize = TIFFVStripSize(tif, (rowsperstrip == plane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip == rows))", "stripsize = TIFFVStripSize(tif, (rowsperstrip == stripinplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip == stripsize))", "stripsize = TIFFVStripSize(tif, (rowsperstrip == stripsperplane))", "stripsize = TIFFVStripSize(tif, (rowsperstrip))", "stripsize = TIFFVStripSize(tif, (size != 0))", "stripsize = TIFFVStripSize(tif, (size != plane))", "stripsize = TIFFVStripSize(tif, (size != rows))", "stripsize = TIFFVStripSize(tif, (size != rowsperstrip))", "stripsize = TIFFVStripSize(tif, (size != stripinplane))", "stripsize = TIFFVStripSize(tif, (size != stripsize))", "stripsize = TIFFVStripSize(tif, (size != stripsperplane))", "stripsize = TIFFVStripSize(tif, (size * plane))", "stripsize = TIFFVStripSize(tif, (size * rows))", "stripsize = TIFFVStripSize(tif, (size * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (size * strip))", "stripsize = TIFFVStripSize(tif, (size * stripinplane))", "stripsize = TIFFVStripSize(tif, (size * stripsize))", "stripsize = TIFFVStripSize(tif, (size * stripsperplane))", "stripsize = TIFFVStripSize(tif, (size + 0))", "stripsize = TIFFVStripSize(tif, (size + plane))", "stripsize = TIFFVStripSize(tif, (size + rows))", "stripsize = TIFFVStripSize(tif, (size + rowsperstrip))", "stripsize = TIFFVStripSize(tif, (size + stripinplane))", "stripsize = TIFFVStripSize(tif, (size + stripsize))", "stripsize = TIFFVStripSize(tif, (size + stripsperplane))", "stripsize = TIFFVStripSize(tif, (size - 0))", "stripsize = TIFFVStripSize(tif, (size - plane))", "stripsize = TIFFVStripSize(tif, (size - rows))", "stripsize = TIFFVStripSize(tif, (size - rowsperstrip))", "stripsize = TIFFVStripSize(tif, (size - stripinplane))", "stripsize = TIFFVStripSize(tif, (size - stripsize))", "stripsize = TIFFVStripSize(tif, (size - stripsperplane))", "stripsize = TIFFVStripSize(tif, (size == 0))", "stripsize = TIFFVStripSize(tif, (size == plane))", "stripsize = TIFFVStripSize(tif, (size == rows))", "stripsize = TIFFVStripSize(tif, (size == rowsperstrip))", "stripsize = TIFFVStripSize(tif, (size == stripinplane))", "stripsize = TIFFVStripSize(tif, (size == stripsize))", "stripsize = TIFFVStripSize(tif, (size == stripsperplane))", "stripsize = TIFFVStripSize(tif, (strip != 0))", "stripsize = TIFFVStripSize(tif, (strip != plane))", "stripsize = TIFFVStripSize(tif, (strip != rows))", "stripsize = TIFFVStripSize(tif, (strip != rowsperstrip))", "stripsize = TIFFVStripSize(tif, (strip != size))", "stripsize = TIFFVStripSize(tif, (strip != stripinplane))", "stripsize = TIFFVStripSize(tif, (strip != stripsize))", "stripsize = TIFFVStripSize(tif, (strip != stripsperplane))", "stripsize = TIFFVStripSize(tif, (strip * plane))", "stripsize = TIFFVStripSize(tif, (strip * rows))", "stripsize = TIFFVStripSize(tif, (strip * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (strip * size))", "stripsize = TIFFVStripSize(tif, (strip * stripinplane))", "stripsize = TIFFVStripSize(tif, (strip * stripsize))", "stripsize = TIFFVStripSize(tif, (strip * stripsperplane))", "stripsize = TIFFVStripSize(tif, (strip + 0))", "stripsize = TIFFVStripSize(tif, (strip + plane))", "stripsize = TIFFVStripSize(tif, (strip + rows))", "stripsize = TIFFVStripSize(tif, (strip + rowsperstrip))", "stripsize = TIFFVStripSize(tif, (strip + size))", "stripsize = TIFFVStripSize(tif, (strip + stripinplane))", "stripsize = TIFFVStripSize(tif, (strip + stripsize))", "stripsize = TIFFVStripSize(tif, (strip + stripsperplane))", "stripsize = TIFFVStripSize(tif, (strip - 0))", "stripsize = TIFFVStripSize(tif, (strip - plane))", "stripsize = TIFFVStripSize(tif, (strip - rows))", "stripsize = TIFFVStripSize(tif, (strip - rowsperstrip))", "stripsize = TIFFVStripSize(tif, (strip - size))", "stripsize = TIFFVStripSize(tif, (strip - stripinplane))", "stripsize = TIFFVStripSize(tif, (strip - stripsize))", "stripsize = TIFFVStripSize(tif, (strip - stripsperplane))", "stripsize = TIFFVStripSize(tif, (strip == 0))", "stripsize = TIFFVStripSize(tif, (strip == plane))", "stripsize = TIFFVStripSize(tif, (strip == rows))", "stripsize = TIFFVStripSize(tif, (strip == rowsperstrip))", "stripsize = TIFFVStripSize(tif, (strip == size))", "stripsize = TIFFVStripSize(tif, (strip == stripinplane))", "stripsize = TIFFVStripSize(tif, (strip == stripsize))", "stripsize = TIFFVStripSize(tif, (strip == stripsperplane))", "stripsize = TIFFVStripSize(tif, (strip))", "stripsize = TIFFVStripSize(tif, (stripinplane != 0))", "stripsize = TIFFVStripSize(tif, (stripinplane != plane))", "stripsize = TIFFVStripSize(tif, (stripinplane != rows))", "stripsize = TIFFVStripSize(tif, (stripinplane != stripsize))", "stripsize = TIFFVStripSize(tif, (stripinplane * plane))", "stripsize = TIFFVStripSize(tif, (stripinplane * rows))", "stripsize = TIFFVStripSize(tif, (stripinplane * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (stripinplane * size))", "stripsize = TIFFVStripSize(tif, (stripinplane * strip))", "stripsize = TIFFVStripSize(tif, (stripinplane * stripsize))", "stripsize = TIFFVStripSize(tif, (stripinplane * stripsperplane))", "stripsize = TIFFVStripSize(tif, (stripinplane + 0))", "stripsize = TIFFVStripSize(tif, (stripinplane + plane))", "stripsize = TIFFVStripSize(tif, (stripinplane + rows))", "stripsize = TIFFVStripSize(tif, (stripinplane + stripsize))", "stripsize = TIFFVStripSize(tif, (stripinplane - 0))", "stripsize = TIFFVStripSize(tif, (stripinplane - plane))", "stripsize = TIFFVStripSize(tif, (stripinplane - rows))", "stripsize = TIFFVStripSize(tif, (stripinplane - stripsize))", "stripsize = TIFFVStripSize(tif, (stripinplane == 0))", "stripsize = TIFFVStripSize(tif, (stripinplane == plane))", "stripsize = TIFFVStripSize(tif, (stripinplane == rows))", "stripsize = TIFFVStripSize(tif, (stripinplane == stripsize))", "stripsize = TIFFVStripSize(tif, (stripinplane))", "stripsize = TIFFVStripSize(tif, (stripsize != 0))", "stripsize = TIFFVStripSize(tif, (stripsize * plane))", "stripsize = TIFFVStripSize(tif, (stripsize * rows))", "stripsize = TIFFVStripSize(tif, (stripsize * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (stripsize * size))", "stripsize = TIFFVStripSize(tif, (stripsize * strip))", "stripsize = TIFFVStripSize(tif, (stripsize * stripinplane))", "stripsize = TIFFVStripSize(tif, (stripsize * stripsperplane))", "stripsize = TIFFVStripSize(tif, (stripsize + 0))", "stripsize = TIFFVStripSize(tif, (stripsize - 0))", "stripsize = TIFFVStripSize(tif, (stripsize == 0))", "stripsize = TIFFVStripSize(tif, (stripsperplane != 0))", "stripsize = TIFFVStripSize(tif, (stripsperplane != plane))", "stripsize = TIFFVStripSize(tif, (stripsperplane != rows))", "stripsize = TIFFVStripSize(tif, (stripsperplane != stripinplane))", "stripsize = TIFFVStripSize(tif, (stripsperplane != stripsize))", "stripsize = TIFFVStripSize(tif, (stripsperplane * plane))", "stripsize = TIFFVStripSize(tif, (stripsperplane * rows))", "stripsize = TIFFVStripSize(tif, (stripsperplane * rowsperstrip))", "stripsize = TIFFVStripSize(tif, (stripsperplane * size))", "stripsize = TIFFVStripSize(tif, (stripsperplane * strip))", "stripsize = TIFFVStripSize(tif, (stripsperplane * stripinplane))", "stripsize = TIFFVStripSize(tif, (stripsperplane * stripsize))", "stripsize = TIFFVStripSize(tif, (stripsperplane + 0))", "stripsize = TIFFVStripSize(tif, (stripsperplane + plane))", "stripsize = TIFFVStripSize(tif, (stripsperplane + rows))", "stripsize = TIFFVStripSize(tif, (stripsperplane + stripinplane))", "stripsize = TIFFVStripSize(tif, (stripsperplane + stripsize))", "stripsize = TIFFVStripSize(tif, (stripsperplane - 0))", "stripsize = TIFFVStripSize(tif, (stripsperplane - plane))", "stripsize = TIFFVStripSize(tif, (stripsperplane - rows))", "stripsize = TIFFVStripSize(tif, (stripsperplane - stripinplane))", "stripsize = TIFFVStripSize(tif, (stripsperplane - stripsize))", "stripsize = TIFFVStripSize(tif, (stripsperplane == 0))", "stripsize = TIFFVStripSize(tif, (stripsperplane == plane))", "stripsize = TIFFVStripSize(tif, (stripsperplane == rows))", "stripsize = TIFFVStripSize(tif, (stripsperplane == stripinplane))", "stripsize = TIFFVStripSize(tif, (stripsperplane == stripsize))", "stripsize = TIFFVStripSize(tif, (stripsperplane))", "stripsize = TIFFVStripSize(tif, (td != 0))", "stripsize = TIFFVStripSize(tif, (td == 0))", "stripsize = TIFFVStripSize(tif, (tif != 0))", "stripsize = TIFFVStripSize(tif, (tif == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.86962040108521, -5.20159680608521, -6.69874294608521, -6.76618704348521, -8.89986153408521, -8.66803949708521, -7.43454804348521, -7.81859091708521, -7.43447931708521, -7.02526140608521, -8.49726880108521, -8.65988700108521, -8.65988700108521, -9.00867620108521, -9.00867620108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -9.00867620108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -9.00867620108521, -8.65988700108521, -8.65988700108521, -9.00867620108521, -8.65988700108521, -9.00867620108521, -8.65988700108521, -9.00867620108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -8.65988700108521, -9.00867620108521, -8.65988700108521, -9.46283910108521, -9.46283910108521, -9.46283910108521, -8.65988700108521]
								}, {
									"case":	2,
									"scores":	[-6.05350998108521]
								}, {
									"case":	3,
									"scores":	[-6.05350998108521]
								}, {
									"case":	4,
									"scores":	[-6.05350998108521]
								}, {
									"case":	5,
									"scores":	[-6.05350998108521]
								}, {
									"case":	6,
									"scores":	[-6.05350998108521]
								}, {
									"case":	7,
									"scores":	[-6.05350998108521]
								}, {
									"case":	8,
									"scores":	[-6.05350998108521]
								}, {
									"case":	9,
									"scores":	[-6.05350998108521]
								}, {
									"case":	10,
									"scores":	[-6.05350998108521]
								}, {
									"case":	11,
									"scores":	[-6.05350998108521]
								}, {
									"case":	12,
									"scores":	[-6.05350998108521]
								}, {
									"case":	13,
									"scores":	[-6.05350998108521]
								}, {
									"case":	14,
									"scores":	[-6.05350998108521]
								}, {
									"case":	15,
									"scores":	[-6.05350998108521]
								}, {
									"case":	16,
									"scores":	[-6.05350998108521]
								}, {
									"case":	17,
									"scores":	[-6.05350998108521]
								}, {
									"case":	18,
									"scores":	[-6.05350998108521]
								}, {
									"case":	19,
									"scores":	[-6.05350998108521]
								}, {
									"case":	20,
									"scores":	[-6.05350998108521]
								}, {
									"case":	21,
									"scores":	[-6.05350998108521]
								}, {
									"case":	22,
									"scores":	[-6.05350998108521]
								}, {
									"case":	23,
									"scores":	[-6.05350998108521]
								}, {
									"case":	24,
									"scores":	[-6.05350998108521]
								}, {
									"case":	25,
									"scores":	[-6.05350998108521]
								}, {
									"case":	26,
									"scores":	[-6.05350998108521]
								}, {
									"case":	27,
									"scores":	[-6.05350998108521]
								}, {
									"case":	28,
									"scores":	[-6.05350998108521]
								}, {
									"case":	29,
									"scores":	[-6.05350998108521]
								}, {
									"case":	30,
									"scores":	[-6.05350998108521]
								}, {
									"case":	31,
									"scores":	[-6.05350998108521]
								}, {
									"case":	32,
									"scores":	[-6.05350998108521]
								}, {
									"case":	33,
									"scores":	[-6.05350998108521]
								}, {
									"case":	34,
									"scores":	[-6.05350998108521]
								}, {
									"case":	35,
									"scores":	[-6.05350998108521]
								}, {
									"case":	36,
									"scores":	[-6.05350998108521]
								}, {
									"case":	37,
									"scores":	[-6.05350998108521]
								}, {
									"case":	38,
									"scores":	[-6.05350998108521]
								}, {
									"case":	39,
									"scores":	[-6.05350998108521]
								}, {
									"case":	40,
									"scores":	[-6.05350998108521]
								}, {
									"case":	41,
									"scores":	[-6.05350998108521]
								}, {
									"case":	42,
									"scores":	[-6.05350998108521]
								}, {
									"case":	43,
									"scores":	[-6.05350998108521]
								}, {
									"case":	44,
									"scores":	[-6.05350998108521]
								}, {
									"case":	45,
									"scores":	[-6.05350998108521]
								}, {
									"case":	46,
									"scores":	[-6.05350998108521]
								}, {
									"case":	47,
									"scores":	[-6.05350998108521]
								}, {
									"case":	48,
									"scores":	[-6.05350998108521]
								}, {
									"case":	49,
									"scores":	[-6.05350998108521]
								}, {
									"case":	50,
									"scores":	[-6.05350998108521]
								}, {
									"case":	51,
									"scores":	[-6.05350998108521]
								}, {
									"case":	52,
									"scores":	[-6.05350998108521]
								}, {
									"case":	53,
									"scores":	[-6.05350998108521]
								}, {
									"case":	54,
									"scores":	[-6.05350998108521]
								}, {
									"case":	55,
									"scores":	[-6.05350998108521]
								}, {
									"case":	56,
									"scores":	[-6.05350998108521]
								}, {
									"case":	57,
									"scores":	[-6.05350998108521]
								}, {
									"case":	58,
									"scores":	[-6.05350998108521]
								}, {
									"case":	59,
									"scores":	[-6.05350998108521]
								}, {
									"case":	60,
									"scores":	[-6.05350998108521]
								}, {
									"case":	61,
									"scores":	[-6.05350998108521]
								}, {
									"case":	62,
									"scores":	[-6.05350998108521]
								}, {
									"case":	63,
									"scores":	[-6.05350998108521]
								}, {
									"case":	64,
									"scores":	[-6.05350998108521]
								}, {
									"case":	65,
									"scores":	[-6.05350998108521]
								}, {
									"case":	66,
									"scores":	[-6.05350998108521]
								}, {
									"case":	67,
									"scores":	[-6.05350998108521]
								}, {
									"case":	68,
									"scores":	[-6.05350998108521]
								}, {
									"case":	69,
									"scores":	[-6.05350998108521]
								}, {
									"case":	70,
									"scores":	[-6.05350998108521]
								}, {
									"case":	71,
									"scores":	[-6.05350998108521]
								}, {
									"case":	72,
									"scores":	[-6.05350998108521]
								}, {
									"case":	73,
									"scores":	[-6.05350998108521]
								}, {
									"case":	74,
									"scores":	[-6.05350998108521]
								}, {
									"case":	75,
									"scores":	[-6.05350998108521]
								}, {
									"case":	76,
									"scores":	[-6.05350998108521]
								}, {
									"case":	77,
									"scores":	[-6.05350998108521]
								}, {
									"case":	78,
									"scores":	[-6.05350998108521]
								}, {
									"case":	79,
									"scores":	[-6.05350998108521]
								}, {
									"case":	80,
									"scores":	[-6.05350998108521]
								}, {
									"case":	81,
									"scores":	[-6.05350998108521]
								}, {
									"case":	82,
									"scores":	[-6.05350998108521]
								}, {
									"case":	83,
									"scores":	[-6.05350998108521]
								}, {
									"case":	84,
									"scores":	[-6.05350998108521]
								}, {
									"case":	85,
									"scores":	[-6.05350998108521]
								}, {
									"case":	86,
									"scores":	[-6.05350998108521]
								}, {
									"case":	87,
									"scores":	[-6.05350998108521]
								}, {
									"case":	88,
									"scores":	[-6.05350998108521]
								}, {
									"case":	89,
									"scores":	[-6.05350998108521]
								}, {
									"case":	90,
									"scores":	[-6.05350998108521]
								}, {
									"case":	91,
									"scores":	[-6.05350998108521]
								}, {
									"case":	92,
									"scores":	[-6.05350998108521]
								}, {
									"case":	93,
									"scores":	[-6.05350998108521]
								}, {
									"case":	94,
									"scores":	[-6.05350998108521]
								}, {
									"case":	95,
									"scores":	[-6.05350998108521]
								}, {
									"case":	96,
									"scores":	[-6.05350998108521]
								}, {
									"case":	97,
									"scores":	[-6.05350998108521]
								}, {
									"case":	98,
									"scores":	[-6.05350998108521]
								}, {
									"case":	99,
									"scores":	[-6.05350998108521]
								}, {
									"case":	100,
									"scores":	[-6.05350998108521]
								}, {
									"case":	101,
									"scores":	[-6.05350998108521]
								}, {
									"case":	102,
									"scores":	[-6.05350998108521]
								}, {
									"case":	103,
									"scores":	[-6.05350998108521]
								}, {
									"case":	104,
									"scores":	[-6.05350998108521]
								}, {
									"case":	105,
									"scores":	[-6.05350998108521]
								}, {
									"case":	106,
									"scores":	[-6.05350998108521]
								}, {
									"case":	107,
									"scores":	[-6.05350998108521]
								}, {
									"case":	108,
									"scores":	[-6.05350998108521]
								}, {
									"case":	109,
									"scores":	[-6.05350998108521]
								}, {
									"case":	110,
									"scores":	[-6.05350998108521]
								}, {
									"case":	111,
									"scores":	[-6.05350998108521]
								}, {
									"case":	112,
									"scores":	[-6.05350998108521]
								}, {
									"case":	113,
									"scores":	[-6.05350998108521]
								}, {
									"case":	114,
									"scores":	[-6.05350998108521]
								}, {
									"case":	115,
									"scores":	[-6.05350998108521]
								}, {
									"case":	116,
									"scores":	[-6.05350998108521]
								}, {
									"case":	117,
									"scores":	[-6.05350998108521]
								}, {
									"case":	118,
									"scores":	[-6.05350998108521]
								}, {
									"case":	119,
									"scores":	[-6.05350998108521]
								}, {
									"case":	120,
									"scores":	[-6.05350998108521]
								}, {
									"case":	121,
									"scores":	[-6.05350998108521]
								}, {
									"case":	122,
									"scores":	[-6.05350998108521]
								}, {
									"case":	123,
									"scores":	[-6.05350998108521]
								}, {
									"case":	124,
									"scores":	[-6.05350998108521]
								}, {
									"case":	125,
									"scores":	[-6.05350998108521]
								}, {
									"case":	126,
									"scores":	[-6.05350998108521]
								}, {
									"case":	127,
									"scores":	[-6.05350998108521]
								}, {
									"case":	128,
									"scores":	[-6.05350998108521]
								}, {
									"case":	129,
									"scores":	[-6.05350998108521]
								}, {
									"case":	130,
									"scores":	[-6.05350998108521]
								}, {
									"case":	131,
									"scores":	[-6.05350998108521]
								}, {
									"case":	132,
									"scores":	[-6.05350998108521]
								}, {
									"case":	133,
									"scores":	[-6.05350998108521]
								}, {
									"case":	134,
									"scores":	[-6.05350998108521]
								}, {
									"case":	135,
									"scores":	[-6.05350998108521]
								}, {
									"case":	136,
									"scores":	[-6.05350998108521]
								}, {
									"case":	137,
									"scores":	[-6.05350998108521]
								}, {
									"case":	138,
									"scores":	[-6.05350998108521]
								}, {
									"case":	139,
									"scores":	[-6.05350998108521]
								}, {
									"case":	140,
									"scores":	[-6.05350998108521]
								}, {
									"case":	141,
									"scores":	[-6.05350998108521]
								}, {
									"case":	142,
									"scores":	[-6.05350998108521]
								}, {
									"case":	143,
									"scores":	[-6.05350998108521]
								}, {
									"case":	144,
									"scores":	[-6.05350998108521]
								}, {
									"case":	145,
									"scores":	[-6.05350998108521]
								}, {
									"case":	146,
									"scores":	[-6.05350998108521]
								}, {
									"case":	147,
									"scores":	[-6.05350998108521]
								}, {
									"case":	148,
									"scores":	[-6.05350998108521]
								}, {
									"case":	149,
									"scores":	[-6.05350998108521]
								}, {
									"case":	150,
									"scores":	[-6.05350998108521]
								}, {
									"case":	151,
									"scores":	[-6.05350998108521]
								}, {
									"case":	152,
									"scores":	[-6.05350998108521]
								}, {
									"case":	153,
									"scores":	[-6.05350998108521]
								}, {
									"case":	154,
									"scores":	[-6.05350998108521]
								}, {
									"case":	155,
									"scores":	[-6.05350998108521]
								}, {
									"case":	156,
									"scores":	[-6.05350998108521]
								}, {
									"case":	157,
									"scores":	[-6.05350998108521]
								}, {
									"case":	158,
									"scores":	[-6.05350998108521]
								}, {
									"case":	159,
									"scores":	[-6.05350998108521]
								}, {
									"case":	160,
									"scores":	[-6.05350998108521]
								}, {
									"case":	161,
									"scores":	[-6.05350998108521]
								}, {
									"case":	162,
									"scores":	[-6.05350998108521]
								}, {
									"case":	163,
									"scores":	[-6.05350998108521]
								}, {
									"case":	164,
									"scores":	[-6.05350998108521]
								}, {
									"case":	165,
									"scores":	[-6.05350998108521]
								}, {
									"case":	166,
									"scores":	[-6.05350998108521]
								}, {
									"case":	167,
									"scores":	[-6.05350998108521]
								}, {
									"case":	168,
									"scores":	[-6.05350998108521]
								}, {
									"case":	169,
									"scores":	[-6.05350998108521]
								}, {
									"case":	170,
									"scores":	[-6.05350998108521]
								}, {
									"case":	171,
									"scores":	[-6.05350998108521]
								}, {
									"case":	172,
									"scores":	[-6.05350998108521]
								}, {
									"case":	173,
									"scores":	[-6.05350998108521]
								}, {
									"case":	174,
									"scores":	[-6.05350998108521]
								}, {
									"case":	175,
									"scores":	[-6.05350998108521]
								}, {
									"case":	176,
									"scores":	[-6.05350998108521]
								}, {
									"case":	177,
									"scores":	[-6.05350998108521]
								}, {
									"case":	178,
									"scores":	[-6.05350998108521]
								}, {
									"case":	179,
									"scores":	[-6.05350998108521]
								}, {
									"case":	180,
									"scores":	[-6.05350998108521]
								}, {
									"case":	181,
									"scores":	[-6.05350998108521]
								}, {
									"case":	182,
									"scores":	[-6.05350998108521]
								}, {
									"case":	183,
									"scores":	[-6.05350998108521]
								}, {
									"case":	184,
									"scores":	[-6.05350998108521]
								}, {
									"case":	185,
									"scores":	[-6.05350998108521]
								}, {
									"case":	186,
									"scores":	[-6.05350998108521]
								}, {
									"case":	187,
									"scores":	[-6.05350998108521]
								}, {
									"case":	188,
									"scores":	[-6.05350998108521]
								}, {
									"case":	189,
									"scores":	[-6.05350998108521]
								}, {
									"case":	190,
									"scores":	[-6.05350998108521]
								}, {
									"case":	191,
									"scores":	[-6.05350998108521]
								}, {
									"case":	192,
									"scores":	[-6.05350998108521]
								}, {
									"case":	193,
									"scores":	[-6.05350998108521]
								}, {
									"case":	194,
									"scores":	[-6.05350998108521]
								}, {
									"case":	195,
									"scores":	[-6.05350998108521]
								}, {
									"case":	196,
									"scores":	[-6.05350998108521]
								}, {
									"case":	197,
									"scores":	[-6.05350998108521]
								}, {
									"case":	198,
									"scores":	[-6.05350998108521]
								}, {
									"case":	199,
									"scores":	[-6.05350998108521]
								}, {
									"case":	200,
									"scores":	[-6.05350998108521]
								}, {
									"case":	201,
									"scores":	[-6.05350998108521]
								}, {
									"case":	202,
									"scores":	[-6.05350998108521]
								}, {
									"case":	203,
									"scores":	[-6.05350998108521]
								}, {
									"case":	204,
									"scores":	[-6.05350998108521]
								}, {
									"case":	205,
									"scores":	[-6.05350998108521]
								}, {
									"case":	206,
									"scores":	[-6.05350998108521]
								}, {
									"case":	207,
									"scores":	[-6.05350998108521]
								}, {
									"case":	208,
									"scores":	[-6.05350998108521]
								}, {
									"case":	209,
									"scores":	[-6.05350998108521]
								}, {
									"case":	210,
									"scores":	[-6.05350998108521]
								}, {
									"case":	211,
									"scores":	[-6.05350998108521]
								}, {
									"case":	212,
									"scores":	[-6.05350998108521]
								}, {
									"case":	213,
									"scores":	[-6.05350998108521]
								}, {
									"case":	214,
									"scores":	[-6.05350998108521]
								}, {
									"case":	215,
									"scores":	[-6.05350998108521]
								}, {
									"case":	216,
									"scores":	[-6.05350998108521]
								}, {
									"case":	217,
									"scores":	[-6.05350998108521]
								}, {
									"case":	218,
									"scores":	[-6.05350998108521]
								}, {
									"case":	219,
									"scores":	[-6.05350998108521]
								}, {
									"case":	220,
									"scores":	[-6.05350998108521]
								}, {
									"case":	221,
									"scores":	[-6.05350998108521]
								}, {
									"case":	222,
									"scores":	[-6.05350998108521]
								}, {
									"case":	223,
									"scores":	[-6.05350998108521]
								}, {
									"case":	224,
									"scores":	[-6.05350998108521]
								}, {
									"case":	225,
									"scores":	[-6.05350998108521]
								}, {
									"case":	226,
									"scores":	[-6.05350998108521]
								}, {
									"case":	227,
									"scores":	[-6.05350998108521]
								}, {
									"case":	228,
									"scores":	[-6.05350998108521]
								}, {
									"case":	229,
									"scores":	[-6.05350998108521]
								}, {
									"case":	230,
									"scores":	[-6.05350998108521]
								}, {
									"case":	231,
									"scores":	[-6.05350998108521]
								}, {
									"case":	232,
									"scores":	[-6.05350998108521]
								}, {
									"case":	233,
									"scores":	[-6.05350998108521]
								}, {
									"case":	234,
									"scores":	[-6.05350998108521]
								}, {
									"case":	235,
									"scores":	[-6.05350998108521]
								}, {
									"case":	236,
									"scores":	[-6.05350998108521]
								}, {
									"case":	237,
									"scores":	[-6.05350998108521]
								}, {
									"case":	238,
									"scores":	[-6.05350998108521]
								}, {
									"case":	239,
									"scores":	[-6.05350998108521]
								}, {
									"case":	240,
									"scores":	[-6.05350998108521]
								}, {
									"case":	241,
									"scores":	[-6.05350998108521]
								}, {
									"case":	242,
									"scores":	[-6.05350998108521]
								}, {
									"case":	243,
									"scores":	[-6.05350998108521]
								}]
						}]
				}, {
					"line":	158,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [225, 226, 227], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [], [], [], [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [], [], [], [], [], []],
							"begin_line":	159,
							"begin_column":	0,
							"end_line":	159,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L159\", 74, &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(rows), sizeof (rows), &(size), sizeof (size), &(rowsperstrip), sizeof (rowsperstrip), &(strip), sizeof (strip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return -1;\n", "if (__is_neg(\"\", \"L159\", 74, &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(rows), sizeof (rows), &(size), sizeof (size), &(rowsperstrip), sizeof (rowsperstrip), &(strip), sizeof (strip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 0;\n", "if (__is_neg(\"\", \"L159\", 74, &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(rows), sizeof (rows), &(size), sizeof (size), &(rowsperstrip), sizeof (rowsperstrip), &(strip), sizeof (strip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	2,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	3,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	4,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	5,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	6,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	7,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	8,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	9,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	10,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	11,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	12,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	13,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	14,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	15,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	16,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	17,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	18,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	19,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	20,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	21,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	22,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	23,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	24,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	25,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	26,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	27,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	28,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	29,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	30,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	31,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	32,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	33,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	34,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	35,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	36,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	37,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	38,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	39,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	40,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	41,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	42,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	43,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	44,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	45,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	46,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	47,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	48,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	49,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	50,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	51,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	52,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	53,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	54,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	55,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	56,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	57,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	58,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	59,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	60,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	61,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	62,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	63,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	64,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	65,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	66,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	67,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	68,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	69,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	70,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	71,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	72,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	73,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	74,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	75,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	76,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	77,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	78,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	79,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	80,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	81,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	82,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	83,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	84,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	85,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	86,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	87,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	88,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	89,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	90,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	91,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	92,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	93,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	94,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	95,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	96,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	97,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	98,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	99,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	100,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	101,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	102,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	103,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	104,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	105,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	106,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	107,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	108,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	109,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	110,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	111,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	112,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	113,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	114,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	115,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	116,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	117,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	118,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	119,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	120,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	121,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	122,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	123,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	124,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	125,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	126,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	127,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	128,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	129,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	130,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	131,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	132,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	133,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	134,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	135,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	136,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	137,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	138,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	139,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	140,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	141,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	142,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	143,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	144,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	145,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	146,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	147,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	148,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	149,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	150,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	151,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	152,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	153,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	154,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	155,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	156,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	157,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	158,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	159,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	160,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	161,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	162,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	163,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	164,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	165,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	166,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	167,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	168,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	169,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	170,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	171,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	172,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	173,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	174,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	175,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	176,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	177,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	178,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	179,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	180,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	181,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	182,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	183,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	184,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	185,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	186,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	187,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	188,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	189,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	190,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	191,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	192,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	193,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	194,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	195,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	196,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	197,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	198,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	199,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	200,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	201,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	202,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	203,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	204,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	205,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	206,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	207,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	208,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	209,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	210,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	211,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	212,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	213,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	214,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	215,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	216,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	217,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	218,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	219,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	220,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	221,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	222,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	223,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	224,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	225,
									"scores":	[-10.119131962545055, -12.061902156845052, -9.712129152545053, -13.072784075545055, -11.227933062545054, -12.166400742545054, -12.366418142545054, -11.587189052545053, -12.008132542545054, -11.875314542545054, -12.173102442545053, -13.226796442545053, -12.737419042545055, -12.744120742545054, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.699994642545054, -12.699994642545054, -12.699994642545054, -12.737419042545055]
								}, {
									"case":	226,
									"scores":	[-8.1006859625450538, -10.043456156845053, -7.693683152545054, -11.054338075545054, -9.2094870625450547, -10.147954742545053, -10.347972142545055, -9.5687430525450541, -9.9896865425450549, -9.8568685425450546, -10.154656442545054, -11.208350442545054, -10.718973042545056, -10.725674742545054, -10.725674742545054, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.725674742545054, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.725674742545054, -10.718973042545056, -10.718973042545056, -10.725674742545054, -10.718973042545056, -10.725674742545054, -10.718973042545056, -10.725674742545054, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.718973042545056, -10.725674742545054, -10.718973042545056, -10.681548642545055, -10.681548642545055, -10.681548642545055, -10.718973042545056]
								}, {
									"case":	227,
									"scores":	[-10.119131962545055, -12.061902156845052, -9.712129152545053, -13.072784075545055, -11.227933062545054, -12.166400742545054, -12.366418142545054, -11.587189052545053, -12.008132542545054, -11.875314542545054, -12.173102442545053, -13.226796442545053, -12.737419042545055, -12.744120742545054, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.737419042545055, -12.744120742545054, -12.737419042545055, -12.699994642545054, -12.699994642545054, -12.699994642545054, -12.737419042545055]
								}]
						}, {
							"switch":	25,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	159,
							"begin_column":	2,
							"end_line":	160,
							"end_column":	24,
							"patch_codes":	["if (__is_neg(\"\", \"L159\", 74, &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(rows), sizeof (rows), &(size), sizeof (size), &(rowsperstrip), sizeof (rowsperstrip), &(strip), sizeof (strip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if ((stripsize == 0) || __is_neg(\"\", \"L159\", 74, &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(rows), sizeof (rows), &(size), sizeof (size), &(rowsperstrip), sizeof (rowsperstrip), &(strip), sizeof (strip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if ((stripsize == 0) && !__is_neg(\"\", \"L159\", 74, &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(rows), sizeof (rows), &(size), sizeof (size), &(rowsperstrip), sizeof (rowsperstrip), &(strip), sizeof (strip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.28665477542814521, -5.5054564897281457, -2.8887522794281448, -1.6576369584281454, -3.2580317678281459, -4.7138166254281462, -5.159884221428146, -3.9263927678281458, -4.3297050254281455, -4.4031973254281453, -5.0626058254281459, -6.0786141254281461, -5.1517317254281458, -5.5005209254281455, -5.5005209254281455, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.5005209254281455, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.5005209254281455, -5.1517317254281458, -5.1517317254281458, -5.5005209254281455, -5.1517317254281458, -5.5005209254281455, -5.1517317254281458, -5.5005209254281455, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.1517317254281458, -5.5005209254281455, -5.1517317254281458, -5.9546838254281456, -5.9546838254281456, -5.9546838254281456, -5.1517317254281458]
								}, {
									"case":	2,
									"scores":	[-0.24978063272814488, -5.4685823470281454, -2.8518781367281454, -1.6207628157281477, -3.2211576251281464, -4.6769424827281458, -5.1230100787281456, -3.8895186251281455, -4.2928308827281461, -4.3663231827281459, -5.0257316827281464, -6.0417399827281457, -5.1148575827281455, -5.4636467827281461, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.9178096827281461, -5.9178096827281461, -5.9178096827281461, -5.1148575827281455]
								}, {
									"case":	3,
									"scores":	[-0.24978063272814488, -5.4685823470281454, -2.8518781367281454, -1.6207628157281477, -3.2211576251281464, -4.6769424827281458, -5.1230100787281456, -3.8895186251281455, -4.2928308827281461, -4.3663231827281459, -5.0257316827281464, -6.0417399827281457, -5.1148575827281455, -5.4636467827281461, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.1148575827281455, -5.4636467827281461, -5.1148575827281455, -5.9178096827281461, -5.9178096827281461, -5.9178096827281461, -5.1148575827281455]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	159,
							"begin_column":	2,
							"end_line":	160,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L159\", 74, &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(rows), sizeof (rows), &(size), sizeof (size), &(rowsperstrip), sizeof (rowsperstrip), &(strip), sizeof (strip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(plane), sizeof (plane), &(buf), sizeof (buf), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    if (stripsize == 0)\n        return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.8365433925450536, -9.0553451068450528, -6.4386408965450537, -5.2075255755450529, -6.8079203849450538, -8.2637052425450541, -8.709772838545053, -7.4762813849450538, -7.8795936425450535, -7.9530859425450533, -8.6124944425450529, -9.628502742545054, -8.7016203425450538, -9.0504095425450544, -9.0504095425450544, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -9.0504095425450544, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -9.0504095425450544, -8.7016203425450538, -8.7016203425450538, -9.0504095425450544, -8.7016203425450538, -9.0504095425450544, -8.7016203425450538, -9.0504095425450544, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -8.7016203425450538, -9.0504095425450544, -8.7016203425450538, -9.5045724425450544, -9.5045724425450544, -9.5045724425450544, -8.7016203425450538]
								}]
						}]
				}, {
					"line":	160,
					"switches":	[{
							"switch":	27,
							"types":	[[], [], [], [], [225, 226, 227], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [], [], [], [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [], [], [], [], [], []],
							"begin_line":	161,
							"begin_column":	0,
							"end_line":	161,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane)))\n    return -1;\n", "if (__is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane)))\n    return 0;\n", "if (__is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	2,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	3,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	4,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	5,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	6,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	7,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	8,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	9,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	10,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	11,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	12,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	13,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	14,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	15,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	16,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	17,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	18,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	19,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	20,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	21,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	22,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	23,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	24,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	25,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	26,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	27,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	28,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	29,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	30,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	31,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	32,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	33,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	34,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	35,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	36,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	37,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	38,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	39,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	40,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	41,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	42,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	43,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	44,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	45,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	46,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	47,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	48,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	49,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	50,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	51,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	52,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	53,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	54,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	55,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	56,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	57,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	58,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	59,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	60,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	61,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	62,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	63,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	64,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	65,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	66,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	67,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	68,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	69,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	70,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	71,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	72,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	73,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	74,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	75,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	76,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	77,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	78,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	79,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	80,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	81,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	82,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	83,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	84,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	85,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	86,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	87,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	88,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	89,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	90,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	91,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	92,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	93,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	94,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	95,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	96,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	97,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	98,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	99,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	100,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	101,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	102,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	103,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	104,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	105,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	106,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	107,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	108,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	109,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	110,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	111,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	112,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	113,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	114,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	115,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	116,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	117,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	118,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	119,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	120,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	121,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	122,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	123,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	124,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	125,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	126,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	127,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	128,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	129,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	130,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	131,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	132,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	133,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	134,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	135,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	136,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	137,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	138,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	139,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	140,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	141,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	142,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	143,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	144,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	145,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	146,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	147,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	148,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	149,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	150,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	151,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	152,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	153,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	154,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	155,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	156,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	157,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	158,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	159,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	160,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	161,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	162,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	163,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	164,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	165,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	166,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	167,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	168,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	169,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	170,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	171,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	172,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	173,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	174,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	175,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	176,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	177,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	178,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	179,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	180,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	181,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	182,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	183,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	184,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	185,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	186,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	187,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	188,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	189,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	190,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	191,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	192,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	193,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	194,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	195,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	196,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	197,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	198,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	199,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	200,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	201,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	202,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	203,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	204,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	205,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	206,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	207,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	208,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	209,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	210,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	211,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	212,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	213,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	214,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	215,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	216,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	217,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	218,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	219,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	220,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	221,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	222,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	223,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	224,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	225,
									"scores":	[-11.304918168227534, -9.1675471272275342, -12.573271549527536, -12.677770135227535, -10.223498545227535, -12.684471835227535, -11.737120945227534, -12.386683935227534, -12.482077535227535, -12.519501935227535, -12.519501935227535]
								}, {
									"case":	226,
									"scores":	[-9.2864721682275331, -7.1491011272275342, -10.554825549527536, -10.659324135227536, -8.2050525452275345, -10.666025835227536, -9.7186749452275336, -10.368237935227533, -10.463631535227535, -10.501055935227534, -10.501055935227534]
								}, {
									"case":	227,
									"scores":	[-11.304918168227534, -9.1675471272275342, -12.573271549527536, -12.677770135227535, -10.223498545227535, -12.684471835227535, -11.737120945227534, -12.386683935227534, -12.482077535227535, -12.519501935227535, -12.519501935227535]
								}]
						}, {
							"switch":	28,
							"types":	[[5], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4]],
							"begin_line":	161,
							"begin_column":	2,
							"end_line":	162,
							"end_column":	13,
							"patch_codes":	["if (__is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane)))\n    stripsize = size;\n", "if ((((size != (tmsize_t)(-1))) || __is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane))) && (size < stripsize))\n    stripsize = size;\n", "if (((size != (tmsize_t)(-1)) && (size < stripsize)) || __is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane)))\n    stripsize = size;\n", "if ((size != (tmsize_t)(-1)))\n    stripsize = size;\n", "if (((size != (tmsize_t)(-1)) && (size < stripsize)) && !__is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane)))\n    stripsize = size;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.5254493844281476, -2.8335936774281452, -5.4042218487281453, -4.6125819844281448, -3.5079466384281455, -5.6818001844281465, -3.876001284428146, -5.022391684428146, -5.7518514844281459, -4.9488993844281461, -4.9488993844281461]
								}, {
									"case":	2,
									"scores":	[-1.8039127624281468, -3.1120570554281466, -5.6826852267281458, -4.8910453624281462, -3.786410016428146, -5.9602635624281461, -4.1544646624281469, -5.3008550624281465, -6.0303148624281455, -5.2273627624281458, -5.2273627624281458]
								}, {
									"case":	3,
									"scores":	[-1.8039127624281468, -3.1120570554281466, -5.6826852267281458, -4.8910453624281462, -3.786410016428146, -5.9602635624281461, -4.1544646624281469, -5.3008550624281465, -6.0303148624281455, -5.2273627624281458, -5.2273627624281458]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-1.8039127624281468, -3.1120570554281466, -5.6826852267281458, -4.8910453624281462, -3.786410016428146, -5.9602635624281461, -4.1544646624281469, -5.3008550624281465, -6.0303148624281455, -5.2273627624281458, -5.2273627624281458]
								}]
						}, {
							"switch":	29,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	161,
							"begin_column":	2,
							"end_line":	162,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L161\", 11, &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(tif), sizeof (tif), &(strip), sizeof (strip), &(rows), sizeof (rows), &(buf), sizeof (buf), &(rowsperstrip), sizeof (rowsperstrip), &(plane), sizeof (plane), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane)))\n    if ((size != (tmsize_t)(-1)) && (size < stripsize))\n        stripsize = size;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5003906952275337, -5.8085349882275343, -8.3791631595275344, -7.587523295227534, -6.4828879492275338, -8.6567414952275339, -6.8509425952275338, -7.9973329952275343, -8.726792795227535, -7.9238406952275344, -7.9238406952275344]
								}]
						}]
				}, {
					"line":	162,
					"switches":	[{
							"switch":	30,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	163,
							"begin_column":	0,
							"end_line":	163,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif, 0, sizeof (*(tif)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return -1;\n", "if (__is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 0;\n", "if (__is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	2,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	3,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	4,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	5,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	6,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	7,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	8,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	9,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	10,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	11,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	12,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	13,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	14,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	15,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	16,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	17,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	18,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	19,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	20,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	21,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	22,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	23,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	24,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	25,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	26,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	27,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	28,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	29,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	30,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	31,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	32,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	33,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	34,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	35,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	36,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	37,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	38,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	39,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	40,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	41,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	42,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	43,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	44,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	45,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	46,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	47,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	48,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	49,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	50,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	51,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	52,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	53,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	54,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	55,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	56,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	57,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	58,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	59,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	60,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	61,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	62,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	63,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	64,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	65,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	66,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	67,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	68,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	69,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	70,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	71,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	72,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	73,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	74,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	75,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	76,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	77,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	78,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	79,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	80,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	81,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	82,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	83,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	84,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	85,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	86,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	87,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	88,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	89,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	90,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	91,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	92,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	93,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	94,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	95,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	96,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	97,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	98,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	99,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	100,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	101,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	102,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	103,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	104,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	105,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	106,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	107,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	108,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	109,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	110,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	111,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	112,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	113,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	114,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	115,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	116,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	117,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	118,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	119,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	120,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	121,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	122,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	123,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	124,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	125,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	126,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	127,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	128,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	129,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	130,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	131,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	132,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	133,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	134,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	135,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	136,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	137,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	138,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	139,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	140,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	141,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	142,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	143,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	144,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	145,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	146,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	147,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	148,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	149,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	150,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	151,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	152,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	153,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	154,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	155,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	156,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	157,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	158,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	159,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	160,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	161,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	162,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	163,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	164,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	165,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	166,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	167,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	168,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	169,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	170,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	171,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	172,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	173,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	174,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	175,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	176,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	177,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	178,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	179,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	180,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	181,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	182,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	183,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	184,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	185,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	186,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	187,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	188,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	189,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	190,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	191,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	192,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	193,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	194,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	195,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	196,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	197,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	198,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	199,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	200,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	201,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	202,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	203,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	204,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	205,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	206,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	207,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	208,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	209,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	210,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	211,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	212,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	213,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	214,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	215,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	216,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	217,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	218,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	219,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	220,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	221,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	222,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	223,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	224,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	225,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	226,
									"scores":	[-11.250400442210015, -11.354899027910015, -12.067575915910014, -9.9986361159100134, -12.722439027910017, -12.424651127910016, -13.776133027910015, -13.776133027910015, -12.558419727910016, -12.557469127910016, -12.520044727910017, -12.557469127910016, -12.557469127910016, -13.293457327910016, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.249331227910016, -13.249331227910016, -13.249331227910016, -13.286755627910015]
								}, {
									"case":	227,
									"scores":	[-9.2319544422100144, -9.3364530279100144, -10.049129915910015, -7.9801901159100144, -10.703993027910016, -10.406205127910017, -11.757687027910016, -11.757687027910016, -10.539973727910017, -10.539023127910017, -10.501598727910018, -10.539023127910017, -10.539023127910017, -11.275011327910017, -11.275011327910017, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.275011327910017, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.275011327910017, -11.268309627910016, -11.268309627910016, -11.275011327910017, -11.268309627910016, -11.275011327910017, -11.268309627910016, -11.275011327910017, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.268309627910016, -11.275011327910017, -11.268309627910016, -11.230885227910017, -11.230885227910017, -11.230885227910017, -11.268309627910016]
								}, {
									"case":	228,
									"scores":	[-11.250400442210015, -11.354899027910015, -12.067575915910014, -9.9986361159100134, -12.722439027910017, -12.424651127910016, -13.776133027910015, -13.776133027910015, -12.558419727910016, -12.557469127910016, -12.520044727910017, -12.557469127910016, -12.557469127910016, -13.293457327910016, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.286755627910015, -13.293457327910016, -13.286755627910015, -13.249331227910016, -13.249331227910016, -13.249331227910016, -13.286755627910015]
								}]
						}, {
							"switch":	31,
							"types":	[[13], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], []],
							"begin_line":	163,
							"begin_column":	2,
							"end_line":	164,
							"end_column":	24,
							"patch_codes":	["if (__is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if ((!TIFFFillStrip(tif, strip)) || __is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if (!TIFFFillStrip(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!TIFFFillTile(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!TIFFGetField(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!TIFFGetFieldDefaulted(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!TIFFSetField(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!TIFFStartStrip(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!TIFFStartTile(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!_TIFFNoSeek(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!creat(tif, strip))\n    return ((tmsize_t)(-1));\n", "if (!printf(tif, strip))\n    return ((tmsize_t)(-1));\n", "if ((!TIFFFillStrip(tif, strip)) && !__is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7507937897281458, -4.0151756254281459, -2.5970100134281462, -2.9766476184281458, -4.4374571254281463, -3.7780486254281458, -4.6840984254281457, -6.1738944254281458, -4.0604553744281455, -4.4249853254281462, -5.2279374254281459, -4.4249853254281462, -4.4249853254281462, -5.5958012254281453, -5.5958012254281453, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.5958012254281453, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.5958012254281453, -5.2470120254281456, -5.2470120254281456, -5.5958012254281453, -5.2470120254281456, -5.5958012254281453, -5.2470120254281456, -5.5958012254281453, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.2470120254281456, -5.5958012254281453, -5.2470120254281456, -6.0499641254281453, -6.0499641254281453, -6.0499641254281453, -5.2470120254281456]
								}, {
									"case":	2,
									"scores":	[-5.1143329035281457, -4.3787147392281458, -2.9605491272281461, -3.3401867322281458, -4.8009962392281453, -4.1415877392281457, -5.0476375392281456, -6.5374335392281466, -4.4239944882281454, -4.7885244392281461, -5.5914765392281458, -4.7885244392281461, -4.7885244392281461, -5.9593403392281452, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -6.4135032392281452, -6.4135032392281452, -6.4135032392281452, -5.6105511392281455]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-5.1143329035281457, -4.3787147392281458, -2.9605491272281461, -3.3401867322281458, -4.8009962392281453, -4.1415877392281457, -5.0476375392281456, -6.5374335392281466, -4.4239944882281454, -4.7885244392281461, -5.5914765392281458, -4.7885244392281461, -4.7885244392281461, -5.9593403392281452, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.6105511392281455, -5.9593403392281452, -5.6105511392281455, -6.4135032392281452, -6.4135032392281452, -6.4135032392281452, -5.6105511392281455]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	163,
							"begin_column":	2,
							"end_line":	164,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    if (!TIFFFillStrip(tif, strip))\n        return ((tmsize_t)(-1));\n", "if (!__is_neg(\"\", \"L163\", 74, &(tif), sizeof (tif), &(strip), sizeof (strip), &(size), sizeof (size), &(stripsize), sizeof (stripsize), &(buf), sizeof (buf), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)) && (!TIFFFillStrip(tif, strip)))\n    return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8030533522100143, -7.0674351879100143, -5.6492695759100142, -6.0289071809100143, -7.4897166879100148, -6.8303081879100143, -7.7363579879100151, -9.2261539879100152, -7.1127149369100149, -7.4772448879100146, -8.2801969879100152, -7.4772448879100146, -7.4772448879100146, -8.6480607879100155, -8.6480607879100155, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.6480607879100155, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.6480607879100155, -8.299271587910015, -8.299271587910015, -8.6480607879100155, -8.299271587910015, -8.6480607879100155, -8.299271587910015, -8.6480607879100155, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.299271587910015, -8.6480607879100155, -8.299271587910015, -9.1022236879100156, -9.1022236879100156, -9.1022236879100156, -8.299271587910015]
								}, {
									"case":	2,
									"scores":	[-8.3501547660100144, -7.6145366017100145, -6.1963709897100143, -6.5760085947100144, -8.0368181017100149, -7.3774096017100153, -8.2834594017100152, -9.7732554017100153, -7.6598163507100141, -8.0243463017100147, -8.8272984017100153, -8.0243463017100147, -8.0243463017100147, -9.1951622017100156, -9.1951622017100156, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -9.1951622017100156, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -9.1951622017100156, -8.8463730017100151, -8.8463730017100151, -9.1951622017100156, -8.8463730017100151, -9.1951622017100156, -8.8463730017100151, -9.1951622017100156, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -8.8463730017100151, -9.1951622017100156, -8.8463730017100151, -9.6493251017100157, -9.6493251017100157, -9.6493251017100157, -8.8463730017100151]
								}]
						}]
				}, {
					"line":	164,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [226, 227, 228], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	165,
							"begin_column":	0,
							"end_line":	165,
							"end_column":	0,
							"patch_codes":	["memset(&td->td_bitspersample, 0, sizeof (*(&td->td_bitspersample)))", "memset(&td->td_colormap, 0, sizeof (*(&td->td_colormap)))", "memset(&td->td_compression, 0, sizeof (*(&td->td_compression)))", "memset(&td->td_customValueCount, 0, sizeof (*(&td->td_customValueCount)))", "memset(&td->td_customValues, 0, sizeof (*(&td->td_customValues)))", "memset(&td->td_extrasamples, 0, sizeof (*(&td->td_extrasamples)))", "memset(&td->td_fieldsset, 0, sizeof (*(&td->td_fieldsset)))", "memset(&td->td_fillorder, 0, sizeof (*(&td->td_fillorder)))", "memset(&td->td_halftonehints, 0, sizeof (*(&td->td_halftonehints)))", "memset(&td->td_imagedepth, 0, sizeof (*(&td->td_imagedepth)))", "memset(&td->td_imagelength, 0, sizeof (*(&td->td_imagelength)))", "memset(&td->td_imagewidth, 0, sizeof (*(&td->td_imagewidth)))", "memset(&td->td_inknames, 0, sizeof (*(&td->td_inknames)))", "memset(&td->td_inknameslen, 0, sizeof (*(&td->td_inknameslen)))", "memset(&td->td_maxsamplevalue, 0, sizeof (*(&td->td_maxsamplevalue)))", "memset(&td->td_minsamplevalue, 0, sizeof (*(&td->td_minsamplevalue)))", "memset(&td->td_nstrips, 0, sizeof (*(&td->td_nstrips)))", "memset(&td->td_nsubifd, 0, sizeof (*(&td->td_nsubifd)))", "memset(&td->td_orientation, 0, sizeof (*(&td->td_orientation)))", "memset(&td->td_pagenumber, 0, sizeof (*(&td->td_pagenumber)))", "memset(&td->td_photometric, 0, sizeof (*(&td->td_photometric)))", "memset(&td->td_planarconfig, 0, sizeof (*(&td->td_planarconfig)))", "memset(&td->td_resolutionunit, 0, sizeof (*(&td->td_resolutionunit)))", "memset(&td->td_rowsperstrip, 0, sizeof (*(&td->td_rowsperstrip)))", "memset(&td->td_sampleformat, 0, sizeof (*(&td->td_sampleformat)))", "memset(&td->td_sampleinfo, 0, sizeof (*(&td->td_sampleinfo)))", "memset(&td->td_samplesperpixel, 0, sizeof (*(&td->td_samplesperpixel)))", "memset(&td->td_smaxsamplevalue, 0, sizeof (*(&td->td_smaxsamplevalue)))", "memset(&td->td_sminsamplevalue, 0, sizeof (*(&td->td_sminsamplevalue)))", "memset(&td->td_stripbytecount, 0, sizeof (*(&td->td_stripbytecount)))", "memset(&td->td_stripbytecountsorted, 0, sizeof (*(&td->td_stripbytecountsorted)))", "memset(&td->td_stripoffset, 0, sizeof (*(&td->td_stripoffset)))", "memset(&td->td_stripsperimage, 0, sizeof (*(&td->td_stripsperimage)))", "memset(&td->td_subfiletype, 0, sizeof (*(&td->td_subfiletype)))", "memset(&td->td_subifd, 0, sizeof (*(&td->td_subifd)))", "memset(&td->td_threshholding, 0, sizeof (*(&td->td_threshholding)))", "memset(&td->td_tiledepth, 0, sizeof (*(&td->td_tiledepth)))", "memset(&td->td_tilelength, 0, sizeof (*(&td->td_tilelength)))", "memset(&td->td_tilewidth, 0, sizeof (*(&td->td_tilewidth)))", "memset(&td->td_transferfunction, 0, sizeof (*(&td->td_transferfunction)))", "memset(&td->td_xposition, 0, sizeof (*(&td->td_xposition)))", "memset(&td->td_xresolution, 0, sizeof (*(&td->td_xresolution)))", "memset(&td->td_ycbcrpositioning, 0, sizeof (*(&td->td_ycbcrpositioning)))", "memset(&td->td_ycbcrsubsampling, 0, sizeof (*(&td->td_ycbcrsubsampling)))", "memset(&td->td_yposition, 0, sizeof (*(&td->td_yposition)))", "memset(&td->td_yresolution, 0, sizeof (*(&td->td_yresolution)))", "memset(&tif->tif_base, 0, sizeof (*(&tif->tif_base)))", "memset(&tif->tif_cleanup, 0, sizeof (*(&tif->tif_cleanup)))", "memset(&tif->tif_clientdata, 0, sizeof (*(&tif->tif_clientdata)))", "memset(&tif->tif_clientinfo, 0, sizeof (*(&tif->tif_clientinfo)))", "memset(&tif->tif_close, 0, sizeof (*(&tif->tif_close)))", "memset(&tif->tif_closeproc, 0, sizeof (*(&tif->tif_closeproc)))", "memset(&tif->tif_col, 0, sizeof (*(&tif->tif_col)))", "memset(&tif->tif_curdir, 0, sizeof (*(&tif->tif_curdir)))", "memset(&tif->tif_curoff, 0, sizeof (*(&tif->tif_curoff)))", "memset(&tif->tif_curstrip, 0, sizeof (*(&tif->tif_curstrip)))", "memset(&tif->tif_curtile, 0, sizeof (*(&tif->tif_curtile)))", "memset(&tif->tif_customdir, 0, sizeof (*(&tif->tif_customdir)))", "memset(&tif->tif_data, 0, sizeof (*(&tif->tif_data)))", "memset(&tif->tif_dataoff, 0, sizeof (*(&tif->tif_dataoff)))", "memset(&tif->tif_decoderow, 0, sizeof (*(&tif->tif_decoderow)))", "memset(&tif->tif_decodestatus, 0, sizeof (*(&tif->tif_decodestatus)))", "memset(&tif->tif_decodestrip, 0, sizeof (*(&tif->tif_decodestrip)))", "memset(&tif->tif_decodetile, 0, sizeof (*(&tif->tif_decodetile)))", "memset(&tif->tif_defstripsize, 0, sizeof (*(&tif->tif_defstripsize)))", "memset(&tif->tif_deftilesize, 0, sizeof (*(&tif->tif_deftilesize)))", "memset(&tif->tif_dir, 0, sizeof (*(&tif->tif_dir)))", "memset(&tif->tif_dirlist, 0, sizeof (*(&tif->tif_dirlist)))", "memset(&tif->tif_dirlistsize, 0, sizeof (*(&tif->tif_dirlistsize)))", "memset(&tif->tif_dirnumber, 0, sizeof (*(&tif->tif_dirnumber)))", "memset(&tif->tif_diroff, 0, sizeof (*(&tif->tif_diroff)))", "memset(&tif->tif_encoderow, 0, sizeof (*(&tif->tif_encoderow)))", "memset(&tif->tif_encodestatus, 0, sizeof (*(&tif->tif_encodestatus)))", "memset(&tif->tif_encodestrip, 0, sizeof (*(&tif->tif_encodestrip)))", "memset(&tif->tif_encodetile, 0, sizeof (*(&tif->tif_encodetile)))", "memset(&tif->tif_fd, 0, sizeof (*(&tif->tif_fd)))", "memset(&tif->tif_fields, 0, sizeof (*(&tif->tif_fields)))", "memset(&tif->tif_fieldscompat, 0, sizeof (*(&tif->tif_fieldscompat)))", "memset(&tif->tif_fixuptags, 0, sizeof (*(&tif->tif_fixuptags)))", "memset(&tif->tif_flags, 0, sizeof (*(&tif->tif_flags)))", "memset(&tif->tif_foundfield, 0, sizeof (*(&tif->tif_foundfield)))", "memset(&tif->tif_header, 0, sizeof (*(&tif->tif_header)))", "memset(&tif->tif_header_size, 0, sizeof (*(&tif->tif_header_size)))", "memset(&tif->tif_mapproc, 0, sizeof (*(&tif->tif_mapproc)))", "memset(&tif->tif_mode, 0, sizeof (*(&tif->tif_mode)))", "memset(&tif->tif_name, 0, sizeof (*(&tif->tif_name)))", "memset(&tif->tif_nextdiroff, 0, sizeof (*(&tif->tif_nextdiroff)))", "memset(&tif->tif_nfields, 0, sizeof (*(&tif->tif_nfields)))", "memset(&tif->tif_nfieldscompat, 0, sizeof (*(&tif->tif_nfieldscompat)))", "memset(&tif->tif_nsubifd, 0, sizeof (*(&tif->tif_nsubifd)))", "memset(&tif->tif_postdecode, 0, sizeof (*(&tif->tif_postdecode)))", "memset(&tif->tif_postencode, 0, sizeof (*(&tif->tif_postencode)))", "memset(&tif->tif_predecode, 0, sizeof (*(&tif->tif_predecode)))", "memset(&tif->tif_preencode, 0, sizeof (*(&tif->tif_preencode)))", "memset(&tif->tif_rawcc, 0, sizeof (*(&tif->tif_rawcc)))", "memset(&tif->tif_rawcp, 0, sizeof (*(&tif->tif_rawcp)))", "memset(&tif->tif_rawdata, 0, sizeof (*(&tif->tif_rawdata)))", "memset(&tif->tif_rawdatasize, 0, sizeof (*(&tif->tif_rawdatasize)))", "memset(&tif->tif_readproc, 0, sizeof (*(&tif->tif_readproc)))", "memset(&tif->tif_row, 0, sizeof (*(&tif->tif_row)))", "memset(&tif->tif_scanlinesize, 0, sizeof (*(&tif->tif_scanlinesize)))", "memset(&tif->tif_scanlineskew, 0, sizeof (*(&tif->tif_scanlineskew)))", "memset(&tif->tif_seek, 0, sizeof (*(&tif->tif_seek)))", "memset(&tif->tif_seekproc, 0, sizeof (*(&tif->tif_seekproc)))", "memset(&tif->tif_setupdecode, 0, sizeof (*(&tif->tif_setupdecode)))", "memset(&tif->tif_setupencode, 0, sizeof (*(&tif->tif_setupencode)))", "memset(&tif->tif_size, 0, sizeof (*(&tif->tif_size)))", "memset(&tif->tif_sizeproc, 0, sizeof (*(&tif->tif_sizeproc)))", "memset(&tif->tif_subifdoff, 0, sizeof (*(&tif->tif_subifdoff)))", "memset(&tif->tif_tagmethods, 0, sizeof (*(&tif->tif_tagmethods)))", "memset(&tif->tif_tilesize, 0, sizeof (*(&tif->tif_tilesize)))", "memset(&tif->tif_unmapproc, 0, sizeof (*(&tif->tif_unmapproc)))", "memset(&tif->tif_writeproc, 0, sizeof (*(&tif->tif_writeproc)))", "memset(td->td_customValues, 0, sizeof (*(td->td_customValues)))", "memset(td->td_inknames, 0, sizeof (*(td->td_inknames)))", "memset(td->td_sampleinfo, 0, sizeof (*(td->td_sampleinfo)))", "memset(td->td_stripbytecount, 0, sizeof (*(td->td_stripbytecount)))", "memset(td->td_stripoffset, 0, sizeof (*(td->td_stripoffset)))", "memset(td->td_subifd, 0, sizeof (*(td->td_subifd)))", "memset(tif, 0, sizeof (*(tif)))", "memset(tif->tif_base, 0, sizeof (*(tif->tif_base)))", "memset(tif->tif_cleanup, 0, sizeof (*(tif->tif_cleanup)))", "memset(tif->tif_clientdata, 0, sizeof (*(tif->tif_clientdata)))", "memset(tif->tif_clientinfo, 0, sizeof (*(tif->tif_clientinfo)))", "memset(tif->tif_close, 0, sizeof (*(tif->tif_close)))", "memset(tif->tif_closeproc, 0, sizeof (*(tif->tif_closeproc)))", "memset(tif->tif_data, 0, sizeof (*(tif->tif_data)))", "memset(tif->tif_decoderow, 0, sizeof (*(tif->tif_decoderow)))", "memset(tif->tif_decodestrip, 0, sizeof (*(tif->tif_decodestrip)))", "memset(tif->tif_decodetile, 0, sizeof (*(tif->tif_decodetile)))", "memset(tif->tif_defstripsize, 0, sizeof (*(tif->tif_defstripsize)))", "memset(tif->tif_deftilesize, 0, sizeof (*(tif->tif_deftilesize)))", "memset(tif->tif_dirlist, 0, sizeof (*(tif->tif_dirlist)))", "memset(tif->tif_encoderow, 0, sizeof (*(tif->tif_encoderow)))", "memset(tif->tif_encodestrip, 0, sizeof (*(tif->tif_encodestrip)))", "memset(tif->tif_encodetile, 0, sizeof (*(tif->tif_encodetile)))", "memset(tif->tif_fields, 0, sizeof (*(tif->tif_fields)))", "memset(tif->tif_fieldscompat, 0, sizeof (*(tif->tif_fieldscompat)))", "memset(tif->tif_fixuptags, 0, sizeof (*(tif->tif_fixuptags)))", "memset(tif->tif_foundfield, 0, sizeof (*(tif->tif_foundfield)))", "memset(tif->tif_mapproc, 0, sizeof (*(tif->tif_mapproc)))", "memset(tif->tif_name, 0, sizeof (*(tif->tif_name)))", "memset(tif->tif_postdecode, 0, sizeof (*(tif->tif_postdecode)))", "memset(tif->tif_postencode, 0, sizeof (*(tif->tif_postencode)))", "memset(tif->tif_predecode, 0, sizeof (*(tif->tif_predecode)))", "memset(tif->tif_preencode, 0, sizeof (*(tif->tif_preencode)))", "memset(tif->tif_rawcp, 0, sizeof (*(tif->tif_rawcp)))", "memset(tif->tif_rawdata, 0, sizeof (*(tif->tif_rawdata)))", "memset(tif->tif_readproc, 0, sizeof (*(tif->tif_readproc)))", "memset(tif->tif_seek, 0, sizeof (*(tif->tif_seek)))", "memset(tif->tif_seekproc, 0, sizeof (*(tif->tif_seekproc)))", "memset(tif->tif_setupdecode, 0, sizeof (*(tif->tif_setupdecode)))", "memset(tif->tif_setupencode, 0, sizeof (*(tif->tif_setupencode)))", "memset(tif->tif_sizeproc, 0, sizeof (*(tif->tif_sizeproc)))", "memset(tif->tif_unmapproc, 0, sizeof (*(tif->tif_unmapproc)))", "memset(tif->tif_writeproc, 0, sizeof (*(tif->tif_writeproc)))", "(*(tif)->tif_postdecode)(tif, buf, size)", "(*tif->tif_postdecode)((tif), buf, size)", "(*tif->tif_postdecode)(tif, (buf), size)", "TIFFErrorExt((tif)->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "_TIFFfree((tif)->tif_rawdata)", "plane = (-1)", "plane = (0)", "plane = (1)", "plane = (plane)", "rows = (-1)", "rows = (0)", "rows = (1)", "rows = (rows)", "rows = (rowsperstrip)", "rows = (strip)", "rows = (stripinplane)", "rows = (stripsperplane)", "rows = (td)->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = (-1)", "rowsperstrip = (0)", "rowsperstrip = (1)", "rowsperstrip = (rows)", "rowsperstrip = (rowsperstrip)", "rowsperstrip = (strip)", "rowsperstrip = (stripinplane)", "rowsperstrip = (stripsperplane)", "rowsperstrip = (td)->td_imagelength", "rowsperstrip = (td)->td_rowsperstrip", "stripinplane = (-1)", "stripinplane = (0)", "stripinplane = (1)", "stripinplane = (rows)", "stripinplane = (rowsperstrip)", "stripinplane = (strip)", "stripinplane = (stripinplane)", "stripinplane = (stripsperplane)", "stripsize = (-1)", "stripsize = (0)", "stripsize = (1)", "stripsize = (size)", "stripsize = (stripsize)", "stripsize = TIFFVStripSize((tif), rows)", "stripsperplane = (((td)->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "stripsperplane = (-1)", "stripsperplane = (0)", "stripsperplane = (1)", "stripsperplane = (rows)", "stripsperplane = (rowsperstrip)", "stripsperplane = (strip)", "stripsperplane = (stripinplane)", "stripsperplane = (stripsperplane)", "(*tif->tif_postdecode)(tif, buf, size)", "TIFFErrorExt(tif->tif_clientdata, module, \"%uld: Strip out of range, max %uld\", (unsigned long)strip, (unsigned long)td->td_nstrips)", "__assert_fail(\"(cc % 3) == 0\", \"libtiff/tif_read.c\", 733, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 1) == 0\", \"libtiff/tif_read.c\", 725, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 3) == 0\", \"libtiff/tif_read.c\", 741, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(cc & 7) == 0\", \"libtiff/tif_read.c\", 749, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 177, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(tif->tif_flags&TIFF_NOREADRAW)==0\", \"libtiff/tif_read.c\", 607, __extension__ __PRETTY_FUNCTION__)", "plane = (strip / stripsperplane)", "rows = rowsperstrip", "rows = td->td_imagelength - stripinplane * rowsperstrip", "rowsperstrip = td->td_imagelength", "rowsperstrip = td->td_rowsperstrip", "stripinplane = (strip % stripsperplane)", "stripsize = TIFFVStripSize(tif, rows)", "stripsize = size", "stripsperplane = ((td->td_imagelength + rowsperstrip - 1) / rowsperstrip)", "if (__is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return -1;\n", "if (__is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 0;\n", "if (__is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	68,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	69,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	70,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	71,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	72,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	73,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	74,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	75,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	76,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	77,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	78,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	79,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	80,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	81,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	82,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	83,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	84,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	85,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	86,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	87,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	88,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	89,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	90,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	91,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	92,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	93,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	94,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	95,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	96,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	97,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	98,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	99,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	100,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	101,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	102,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	103,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	104,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	105,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	106,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	107,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	108,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	109,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	110,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	111,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	112,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	113,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	114,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	115,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	116,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	117,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	118,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	119,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	120,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	121,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	122,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	123,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	124,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	125,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	126,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	127,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	128,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	129,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	130,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	131,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	132,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	133,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	134,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	135,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	136,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	137,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	138,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	139,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	140,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	141,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	142,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	143,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	144,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	145,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	146,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	147,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	148,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	149,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	150,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	151,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	152,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	153,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	154,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	155,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	156,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	157,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	158,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	159,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	160,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	161,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	162,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	163,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	164,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	165,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	166,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	167,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	168,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	169,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	170,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	171,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	172,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	173,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	174,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	175,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	176,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	177,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	178,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	179,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	180,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	181,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	182,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	183,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	184,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	185,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	186,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	187,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	188,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	189,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	190,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	191,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	192,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	193,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	194,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	195,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	196,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	197,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	198,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	199,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	200,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	201,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	202,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	203,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	204,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	205,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	206,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	207,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	208,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	209,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	210,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	211,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	212,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	213,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	214,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	215,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	216,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	217,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	218,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	219,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	220,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	221,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	222,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	223,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	224,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	225,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	226,
									"scores":	[-10.008535734892495, -10.813655020592494, -10.158791908592494, -10.515867120592494, -11.643598020592496, -12.724685220592496, -13.228187320592495, -9.4506904085924948, -12.009523420592496, -12.009523420592496, -11.972099020592495, -12.009523420592496, -12.009523420592496, -12.745511620592495, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.701385520592495, -12.701385520592495, -12.701385520592495, -12.738809920592496]
								}, {
									"case":	227,
									"scores":	[-7.9900897348924955, -8.7952090205924947, -8.1403459085924936, -8.4974211205924952, -9.6251520205924948, -10.706239220592497, -11.209741320592496, -7.4322444085924957, -9.9910774205924966, -9.9910774205924966, -9.9536530205924958, -9.9910774205924966, -9.9910774205924966, -10.727065620592496, -10.727065620592496, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.727065620592496, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.727065620592496, -10.720363920592497, -10.720363920592497, -10.727065620592496, -10.720363920592497, -10.727065620592496, -10.720363920592497, -10.727065620592496, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.720363920592497, -10.727065620592496, -10.720363920592497, -10.682939520592496, -10.682939520592496, -10.682939520592496, -10.720363920592497]
								}, {
									"case":	228,
									"scores":	[-10.008535734892495, -10.813655020592494, -10.158791908592494, -10.515867120592494, -11.643598020592496, -12.724685220592496, -13.228187320592495, -9.4506904085924948, -12.009523420592496, -12.009523420592496, -11.972099020592495, -12.009523420592496, -12.009523420592496, -12.745511620592495, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.738809920592496, -12.745511620592495, -12.738809920592496, -12.701385520592495, -12.701385520592495, -12.701385520592495, -12.738809920592496]
								}]
						}, {
							"switch":	34,
							"types":	[[10], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9], []],
							"begin_line":	165,
							"begin_column":	2,
							"end_line":	166,
							"end_column":	24,
							"patch_codes":	["if (__is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if (((*tif->tif_decodestrip)(tif, buf, size, plane) <= 0) || __is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n", "if (_TIFFNoRowDecode(tif, buf, size, plane) <= 0)\n    return ((tmsize_t)(-1));\n", "if (_TIFFNoRowEncode(tif, buf, size, plane) <= 0)\n    return ((tmsize_t)(-1));\n", "if (_TIFFNoStripDecode(tif, buf, size, plane) <= 0)\n    return ((tmsize_t)(-1));\n", "if (_TIFFNoStripEncode(tif, buf, size, plane) <= 0)\n    return ((tmsize_t)(-1));\n", "if (_TIFFNoTileDecode(tif, buf, size, plane) <= 0)\n    return ((tmsize_t)(-1));\n", "if (_TIFFNoTileEncode(tif, buf, size, plane) <= 0)\n    return ((tmsize_t)(-1));\n", "if (printf(tif, buf, size, plane) <= 0)\n    return ((tmsize_t)(-1));\n", "if (((*tif->tif_decodestrip)(tif, buf, size, plane) <= 0) && !__is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8156238897281449, -4.0977501254281457, -2.2573030134281455, -3.3648493254281457, -3.4175090254281457, -4.4359047744281455, -4.3443914254281459, -2.6369406184281456, -4.0852783254281455, -4.0852783254281455, -4.8882304254281461, -4.0852783254281455, -4.0852783254281455, -5.2560942254281464, -5.2560942254281464, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -5.2560942254281464, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -5.2560942254281464, -4.9073050254281458, -4.9073050254281458, -5.2560942254281464, -4.9073050254281458, -5.2560942254281464, -4.9073050254281458, -5.2560942254281464, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -4.9073050254281458, -5.2560942254281464, -4.9073050254281458, -5.7102571254281465, -5.7102571254281465, -5.7102571254281465, -4.9073050254281458]
								}, {
									"case":	2,
									"scores":	[-6.238387762828145, -5.5205139985281457, -3.6800668865281461, -4.7876131985281454, -4.8402728985281458, -5.8586686475281464, -5.7671552985281451, -4.0597044915281462, -5.5080421985281465, -5.5080421985281465, -6.3109942985281462, -5.5080421985281465, -5.5080421985281465, -6.6788580985281465, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -7.1330209985281465, -7.1330209985281465, -7.1330209985281465, -6.3300688985281468]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-6.238387762828145, -5.5205139985281457, -3.6800668865281461, -4.7876131985281454, -4.8402728985281458, -5.8586686475281464, -5.7671552985281451, -4.0597044915281462, -5.5080421985281465, -5.5080421985281465, -6.3109942985281462, -5.5080421985281465, -5.5080421985281465, -6.6788580985281465, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.3300688985281468, -6.6788580985281465, -6.3300688985281468, -7.1330209985281465, -7.1330209985281465, -7.1330209985281465, -6.3300688985281468]
								}]
						}, {
							"switch":	35,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	165,
							"begin_column":	2,
							"end_line":	166,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)))\n    if ((*tif->tif_decodestrip)(tif, buf, size, plane) <= 0)\n        return ((tmsize_t)(-1));\n", "if (!__is_neg(\"\", \"L165\", 74, &(tif), sizeof (tif), &(buf), sizeof (buf), &(size), sizeof (size), &(plane), sizeof (plane), &(tif->tif_decodestrip), sizeof (tif->tif_decodestrip), &(strip), sizeof (strip), &(tif->tif_postdecode), sizeof (tif->tif_postdecode), &(stripsize), sizeof (stripsize), &(rows), sizeof (rows), &(rowsperstrip), sizeof (rowsperstrip), &(td), sizeof (td), &(stripinplane), sizeof (stripinplane), &(stripsperplane), sizeof (stripsperplane), &(tif->tif_clientdata), sizeof (tif->tif_clientdata), &(tif->tif_name), sizeof (tif->tif_name), &(tif->tif_fd), sizeof (tif->tif_fd), &(tif->tif_mode), sizeof (tif->tif_mode), &(tif->tif_flags), sizeof (tif->tif_flags), &(tif->tif_diroff), sizeof (tif->tif_diroff), &(tif->tif_nextdiroff), sizeof (tif->tif_nextdiroff), &(tif->tif_dirlist), sizeof (tif->tif_dirlist), &(tif->tif_dirlistsize), sizeof (tif->tif_dirlistsize), &(tif->tif_dirnumber), sizeof (tif->tif_dirnumber), &(tif->tif_header_size), sizeof (tif->tif_header_size), &(tif->tif_row), sizeof (tif->tif_row), &(tif->tif_curdir), sizeof (tif->tif_curdir), &(tif->tif_curstrip), sizeof (tif->tif_curstrip), &(tif->tif_curoff), sizeof (tif->tif_curoff), &(tif->tif_dataoff), sizeof (tif->tif_dataoff), &(tif->tif_nsubifd), sizeof (tif->tif_nsubifd), &(tif->tif_subifdoff), sizeof (tif->tif_subifdoff), &(tif->tif_col), sizeof (tif->tif_col), &(tif->tif_curtile), sizeof (tif->tif_curtile), &(tif->tif_tilesize), sizeof (tif->tif_tilesize), &(tif->tif_decodestatus), sizeof (tif->tif_decodestatus), &(tif->tif_fixuptags), sizeof (tif->tif_fixuptags), &(tif->tif_setupdecode), sizeof (tif->tif_setupdecode), &(tif->tif_predecode), sizeof (tif->tif_predecode), &(tif->tif_setupencode), sizeof (tif->tif_setupencode), &(tif->tif_encodestatus), sizeof (tif->tif_encodestatus), &(tif->tif_preencode), sizeof (tif->tif_preencode), &(tif->tif_postencode), sizeof (tif->tif_postencode), &(tif->tif_decoderow), sizeof (tif->tif_decoderow), &(tif->tif_encoderow), sizeof (tif->tif_encoderow), &(tif->tif_encodestrip), sizeof (tif->tif_encodestrip), &(tif->tif_decodetile), sizeof (tif->tif_decodetile), &(tif->tif_encodetile), sizeof (tif->tif_encodetile), &(tif->tif_close), sizeof (tif->tif_close), &(tif->tif_seek), sizeof (tif->tif_seek), &(tif->tif_cleanup), sizeof (tif->tif_cleanup), &(tif->tif_defstripsize), sizeof (tif->tif_defstripsize), &(tif->tif_deftilesize), sizeof (tif->tif_deftilesize), &(tif->tif_data), sizeof (tif->tif_data), &(tif->tif_scanlinesize), sizeof (tif->tif_scanlinesize), &(tif->tif_scanlineskew), sizeof (tif->tif_scanlineskew), &(tif->tif_rawdata), sizeof (tif->tif_rawdata), &(tif->tif_rawdatasize), sizeof (tif->tif_rawdatasize), &(tif->tif_rawcp), sizeof (tif->tif_rawcp), &(tif->tif_rawcc), sizeof (tif->tif_rawcc), &(tif->tif_base), sizeof (tif->tif_base), &(tif->tif_size), sizeof (tif->tif_size), &(tif->tif_mapproc), sizeof (tif->tif_mapproc), &(tif->tif_unmapproc), sizeof (tif->tif_unmapproc), &(tif->tif_readproc), sizeof (tif->tif_readproc), &(tif->tif_writeproc), sizeof (tif->tif_writeproc), &(tif->tif_seekproc), sizeof (tif->tif_seekproc), &(tif->tif_closeproc), sizeof (tif->tif_closeproc), &(tif->tif_sizeproc), sizeof (tif->tif_sizeproc), &(tif->tif_fields), sizeof (tif->tif_fields), &(tif->tif_nfields), sizeof (tif->tif_nfields), &(tif->tif_foundfield), sizeof (tif->tif_foundfield), &(tif->tif_clientinfo), sizeof (tif->tif_clientinfo), &(tif->tif_fieldscompat), sizeof (tif->tif_fieldscompat), &(tif->tif_nfieldscompat), sizeof (tif->tif_nfieldscompat)) && ((*tif->tif_decodestrip)(tif, buf, size, plane) <= 0))\n    return ((tmsize_t)(-1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5154285048924958, -6.7975547405924956, -4.9571076285924951, -6.0646539405924953, -6.1173136405924948, -7.1357093895924955, -7.044196040592495, -5.3367452335924952, -6.7850829405924946, -6.7850829405924946, -7.5880350405924952, -6.7850829405924946, -6.7850829405924946, -7.9558988405924946, -7.9558988405924946, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.9558988405924946, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.9558988405924946, -7.6071096405924949, -7.6071096405924949, -7.9558988405924946, -7.6071096405924949, -7.9558988405924946, -7.6071096405924949, -7.9558988405924946, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.6071096405924949, -7.9558988405924946, -7.6071096405924949, -8.4100617405924947, -8.4100617405924947, -8.4100617405924947, -7.6071096405924949]
								}, {
									"case":	2,
									"scores":	[-9.1217546779924952, -8.403880913692495, -6.5634338016924945, -7.6709801136924947, -7.7236398136924951, -8.7420355626924948, -8.6505222136924953, -6.9430714066924946, -8.3914091136924949, -8.3914091136924949, -9.1943612136924955, -8.3914091136924949, -8.3914091136924949, -9.5622250136924958, -9.5622250136924958, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.5622250136924958, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.5622250136924958, -9.2134358136924952, -9.2134358136924952, -9.5622250136924958, -9.2134358136924952, -9.5622250136924958, -9.2134358136924952, -9.5622250136924958, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.2134358136924952, -9.5622250136924958, -9.2134358136924952, -10.016387913692496, -10.016387913692496, -10.016387913692496, -9.2134358136924952]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	226,
			"size":	74
		}, {
			"switch":	0,
			"case":	227,
			"size":	74
		}, {
			"switch":	0,
			"case":	228,
			"size":	74
		}, {
			"switch":	1,
			"case":	1,
			"size":	74
		}, {
			"switch":	1,
			"case":	2,
			"size":	74
		}, {
			"switch":	1,
			"case":	50,
			"size":	74
		}, {
			"switch":	2,
			"case":	1,
			"size":	74
		}, {
			"switch":	2,
			"case":	2,
			"size":	74
		}, {
			"switch":	3,
			"case":	227,
			"size":	45
		}, {
			"switch":	3,
			"case":	228,
			"size":	45
		}, {
			"switch":	3,
			"case":	229,
			"size":	45
		}, {
			"switch":	4,
			"case":	1,
			"size":	45
		}, {
			"switch":	4,
			"case":	2,
			"size":	45
		}, {
			"switch":	4,
			"case":	3,
			"size":	45
		}, {
			"switch":	5,
			"case":	1,
			"size":	45
		}, {
			"switch":	5,
			"case":	2,
			"size":	45
		}, {
			"switch":	6,
			"case":	226,
			"size":	45
		}, {
			"switch":	6,
			"case":	227,
			"size":	45
		}, {
			"switch":	6,
			"case":	228,
			"size":	45
		}, {
			"switch":	7,
			"case":	1,
			"size":	45
		}, {
			"switch":	8,
			"case":	226,
			"size":	45
		}, {
			"switch":	8,
			"case":	227,
			"size":	45
		}, {
			"switch":	8,
			"case":	228,
			"size":	45
		}, {
			"switch":	9,
			"case":	1,
			"size":	45
		}, {
			"switch":	9,
			"case":	2,
			"size":	45
		}, {
			"switch":	9,
			"case":	3,
			"size":	45
		}, {
			"switch":	10,
			"case":	1,
			"size":	45
		}, {
			"switch":	11,
			"case":	226,
			"size":	45
		}, {
			"switch":	11,
			"case":	227,
			"size":	45
		}, {
			"switch":	11,
			"case":	228,
			"size":	45
		}, {
			"switch":	12,
			"case":	1,
			"size":	45
		}, {
			"switch":	13,
			"case":	225,
			"size":	45
		}, {
			"switch":	13,
			"case":	226,
			"size":	45
		}, {
			"switch":	13,
			"case":	227,
			"size":	45
		}, {
			"switch":	14,
			"case":	1,
			"size":	45
		}, {
			"switch":	15,
			"case":	225,
			"size":	45
		}, {
			"switch":	15,
			"case":	226,
			"size":	45
		}, {
			"switch":	15,
			"case":	227,
			"size":	45
		}, {
			"switch":	16,
			"case":	1,
			"size":	45
		}, {
			"switch":	17,
			"case":	226,
			"size":	45
		}, {
			"switch":	17,
			"case":	227,
			"size":	45
		}, {
			"switch":	17,
			"case":	228,
			"size":	45
		}, {
			"switch":	18,
			"case":	1,
			"size":	45
		}, {
			"switch":	19,
			"case":	225,
			"size":	45
		}, {
			"switch":	19,
			"case":	226,
			"size":	45
		}, {
			"switch":	19,
			"case":	227,
			"size":	45
		}, {
			"switch":	20,
			"case":	1,
			"size":	45
		}, {
			"switch":	20,
			"case":	2,
			"size":	45
		}, {
			"switch":	20,
			"case":	3,
			"size":	45
		}, {
			"switch":	21,
			"case":	1,
			"size":	45
		}, {
			"switch":	22,
			"case":	226,
			"size":	74
		}, {
			"switch":	22,
			"case":	227,
			"size":	74
		}, {
			"switch":	22,
			"case":	228,
			"size":	74
		}, {
			"switch":	23,
			"case":	1,
			"size":	74
		}, {
			"switch":	24,
			"case":	225,
			"size":	74
		}, {
			"switch":	24,
			"case":	226,
			"size":	74
		}, {
			"switch":	24,
			"case":	227,
			"size":	74
		}, {
			"switch":	25,
			"case":	1,
			"size":	74
		}, {
			"switch":	25,
			"case":	2,
			"size":	74
		}, {
			"switch":	25,
			"case":	3,
			"size":	74
		}, {
			"switch":	26,
			"case":	1,
			"size":	74
		}, {
			"switch":	27,
			"case":	225,
			"size":	11
		}, {
			"switch":	27,
			"case":	226,
			"size":	11
		}, {
			"switch":	27,
			"case":	227,
			"size":	11
		}, {
			"switch":	28,
			"case":	1,
			"size":	11
		}, {
			"switch":	28,
			"case":	2,
			"size":	11
		}, {
			"switch":	28,
			"case":	3,
			"size":	11
		}, {
			"switch":	28,
			"case":	5,
			"size":	11
		}, {
			"switch":	29,
			"case":	1,
			"size":	11
		}, {
			"switch":	30,
			"case":	226,
			"size":	74
		}, {
			"switch":	30,
			"case":	227,
			"size":	74
		}, {
			"switch":	30,
			"case":	228,
			"size":	74
		}, {
			"switch":	31,
			"case":	1,
			"size":	74
		}, {
			"switch":	31,
			"case":	2,
			"size":	74
		}, {
			"switch":	31,
			"case":	13,
			"size":	74
		}, {
			"switch":	32,
			"case":	1,
			"size":	74
		}, {
			"switch":	32,
			"case":	2,
			"size":	74
		}, {
			"switch":	33,
			"case":	226,
			"size":	74
		}, {
			"switch":	33,
			"case":	227,
			"size":	74
		}, {
			"switch":	33,
			"case":	228,
			"size":	74
		}, {
			"switch":	34,
			"case":	1,
			"size":	74
		}, {
			"switch":	34,
			"case":	2,
			"size":	74
		}, {
			"switch":	34,
			"case":	10,
			"size":	74
		}, {
			"switch":	35,
			"case":	1,
			"size":	74
		}, {
			"switch":	35,
			"case":	2,
			"size":	74
		}],
	"func_locations":	[{
			"file":	"libtiff/tif_read.c",
			"functions":	[{
					"function":	"TIFFCheckRead",
					"begin":	699,
					"end":	713
				}, {
					"function":	"TIFFFillStrip",
					"begin":	270,
					"end":	364
				}, {
					"function":	"TIFFFillTile",
					"begin":	509,
					"end":	591
				}, {
					"function":	"TIFFReadBufferSetup",
					"begin":	602,
					"end":	632
				}, {
					"function":	"TIFFReadEncodedStrip",
					"begin":	124,
					"end":	169
				}, {
					"function":	"TIFFReadEncodedTile",
					"begin":	388,
					"end":	413
				}, {
					"function":	"TIFFReadRawStrip",
					"begin":	226,
					"end":	264
				}, {
					"function":	"TIFFReadRawStrip1",
					"begin":	171,
					"end":	221
				}, {
					"function":	"TIFFReadRawTile",
					"begin":	471,
					"end":	503
				}, {
					"function":	"TIFFReadRawTile1",
					"begin":	415,
					"end":	466
				}, {
					"function":	"TIFFReadScanline",
					"begin":	96,
					"end":	118
				}, {
					"function":	"TIFFReadTile",
					"begin":	375,
					"end":	382
				}, {
					"function":	"TIFFSeek",
					"begin":	47,
					"end":	94
				}, {
					"function":	"TIFFStartStrip",
					"begin":	638,
					"end":	662
				}, {
					"function":	"TIFFStartTile",
					"begin":	668,
					"end":	697
				}, {
					"function":	"_TIFFNoPostDecode",
					"begin":	715,
					"end":	719
				}, {
					"function":	"_TIFFSwab16BitData",
					"begin":	721,
					"end":	727
				}, {
					"function":	"_TIFFSwab24BitData",
					"begin":	729,
					"end":	735
				}, {
					"function":	"_TIFFSwab32BitData",
					"begin":	737,
					"end":	743
				}, {
					"function":	"_TIFFSwab64BitData",
					"begin":	745,
					"end":	751
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}]
		}]
}
