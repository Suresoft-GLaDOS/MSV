{
	"switch_num":	62,
	"case_num":	[330, 7, 2, 330, 916, 203, 4, 203, 1, 1, 203, 3, 203, 52, 203, 1, 2, 2, 225, 243, 616, 244, 3, 244, 2, 243, 3, 2, 395, 30, 412, 2, 2, 396, 3, 396, 2, 395, 51, 2, 396, 3, 2, 395, 3, 2, 395, 3, 2, 225, 27, 225, 14, 225, 3, 2, 225, 14, 148, 2, 148, 703],
	"switch_cluster":	[[2, 4, 8, 9, 15, 16, 17, 20, 24, 27, 31, 32, 36, 39, 42, 45, 48, 50, 52, 55, 57, 59, 61], [1, 6, 11, 13, 22, 26, 29, 34, 38, 41, 44, 47, 54], [0, 3, 5, 7, 10, 12, 14, 18, 19, 21, 23, 25, 28, 30, 33, 35, 37, 40, 43, 46, 49, 51, 53, 56, 58, 60], []],
	"priority":	[{
			"file":	"bits.c",
			"line":	110,
			"primary_score":	999999,
			"second_score":	11437
		}, {
			"file":	"bits.c",
			"line":	111,
			"primary_score":	999999,
			"second_score":	11436
		}, {
			"file":	"bits.c",
			"line":	112,
			"primary_score":	999999,
			"second_score":	11435
		}, {
			"file":	"bits.c",
			"line":	120,
			"primary_score":	999999,
			"second_score":	11434
		}, {
			"file":	"bits.c",
			"line":	121,
			"primary_score":	999999,
			"second_score":	11433
		}, {
			"file":	"bits.c",
			"line":	142,
			"primary_score":	999999,
			"second_score":	114
		}, {
			"file":	"bits.c",
			"line":	143,
			"primary_score":	999999,
			"second_score":	113
		}, {
			"file":	"bits.c",
			"line":	144,
			"primary_score":	999999,
			"second_score":	112
		}, {
			"file":	"bits.c",
			"line":	145,
			"primary_score":	999999,
			"second_score":	107
		}, {
			"file":	"bits.c",
			"line":	146,
			"primary_score":	999999,
			"second_score":	106
		}, {
			"file":	"bits.c",
			"line":	148,
			"primary_score":	999999,
			"second_score":	119
		}, {
			"file":	"bits.c",
			"line":	149,
			"primary_score":	999999,
			"second_score":	118
		}, {
			"file":	"bits.c",
			"line":	162,
			"primary_score":	999999,
			"second_score":	162
		}, {
			"file":	"bits.c",
			"line":	163,
			"primary_score":	999999,
			"second_score":	161
		}, {
			"file":	"bits.c",
			"line":	164,
			"primary_score":	999999,
			"second_score":	160
		}, {
			"file":	"bits.c",
			"line":	165,
			"primary_score":	999999,
			"second_score":	159
		}, {
			"file":	"bits.c",
			"line":	167,
			"primary_score":	999999,
			"second_score":	158
		}, {
			"file":	"bits.c",
			"line":	175,
			"primary_score":	999999,
			"second_score":	90
		}, {
			"file":	"bits.c",
			"line":	177,
			"primary_score":	1000000,
			"second_score":	89
		}, {
			"file":	"bits.c",
			"line":	178,
			"primary_score":	1000000,
			"second_score":	88
		}, {
			"file":	"bits.c",
			"line":	180,
			"primary_score":	999999,
			"second_score":	84
		}, {
			"file":	"bits.c",
			"line":	181,
			"primary_score":	999999,
			"second_score":	83
		}, {
			"file":	"deflate.c",
			"line":	300,
			"primary_score":	999999,
			"second_score":	3238
		}, {
			"file":	"deflate.c",
			"line":	302,
			"primary_score":	999999,
			"second_score":	3237
		}, {
			"file":	"deflate.c",
			"line":	303,
			"primary_score":	999999,
			"second_score":	3236
		}, {
			"file":	"deflate.c",
			"line":	309,
			"primary_score":	999999,
			"second_score":	3235
		}, {
			"file":	"deflate.c",
			"line":	315,
			"primary_score":	999999,
			"second_score":	3234
		}, {
			"file":	"deflate.c",
			"line":	316,
			"primary_score":	999999,
			"second_score":	3233
		}, {
			"file":	"deflate.c",
			"line":	318,
			"primary_score":	999999,
			"second_score":	3232
		}, {
			"file":	"deflate.c",
			"line":	320,
			"primary_score":	999999,
			"second_score":	3231
		}, {
			"file":	"deflate.c",
			"line":	321,
			"primary_score":	999999,
			"second_score":	3230
		}, {
			"file":	"deflate.c",
			"line":	323,
			"primary_score":	999999,
			"second_score":	3229
		}, {
			"file":	"deflate.c",
			"line":	328,
			"primary_score":	999999,
			"second_score":	3228
		}, {
			"file":	"deflate.c",
			"line":	329,
			"primary_score":	999999,
			"second_score":	3227
		}, {
			"file":	"deflate.c",
			"line":	334,
			"primary_score":	999999,
			"second_score":	3226
		}, {
			"file":	"deflate.c",
			"line":	337,
			"primary_score":	999999,
			"second_score":	3206
		}, {
			"file":	"deflate.c",
			"line":	341,
			"primary_score":	999999,
			"second_score":	3205
		}, {
			"file":	"deflate.c",
			"line":	345,
			"primary_score":	999999,
			"second_score":	3204
		}, {
			"file":	"deflate.c",
			"line":	347,
			"primary_score":	999999,
			"second_score":	3188
		}, {
			"file":	"deflate.c",
			"line":	348,
			"primary_score":	999999,
			"second_score":	3187
		}, {
			"file":	"deflate.c",
			"line":	528,
			"primary_score":	999999,
			"second_score":	3203
		}, {
			"file":	"deflate.c",
			"line":	529,
			"primary_score":	999999,
			"second_score":	3202
		}, {
			"file":	"deflate.c",
			"line":	535,
			"primary_score":	999999,
			"second_score":	3201
		}, {
			"file":	"deflate.c",
			"line":	540,
			"primary_score":	999999,
			"second_score":	3200
		}, {
			"file":	"deflate.c",
			"line":	566,
			"primary_score":	999999,
			"second_score":	3199
		}, {
			"file":	"deflate.c",
			"line":	567,
			"primary_score":	999999,
			"second_score":	3198
		}, {
			"file":	"deflate.c",
			"line":	568,
			"primary_score":	999999,
			"second_score":	3190
		}, {
			"file":	"deflate.c",
			"line":	569,
			"primary_score":	999999,
			"second_score":	3189
		}, {
			"file":	"deflate.c",
			"line":	674,
			"primary_score":	999999,
			"second_score":	3175
		}, {
			"file":	"deflate.c",
			"line":	675,
			"primary_score":	999999,
			"second_score":	3174
		}, {
			"file":	"deflate.c",
			"line":	676,
			"primary_score":	999999,
			"second_score":	3173
		}, {
			"file":	"deflate.c",
			"line":	677,
			"primary_score":	999999,
			"second_score":	3172
		}, {
			"file":	"deflate.c",
			"line":	678,
			"primary_score":	999999,
			"second_score":	3171
		}, {
			"file":	"deflate.c",
			"line":	680,
			"primary_score":	999999,
			"second_score":	3170
		}, {
			"file":	"deflate.c",
			"line":	683,
			"primary_score":	999999,
			"second_score":	3169
		}, {
			"file":	"deflate.c",
			"line":	687,
			"primary_score":	999999,
			"second_score":	3168
		}, {
			"file":	"deflate.c",
			"line":	691,
			"primary_score":	999999,
			"second_score":	3167
		}, {
			"file":	"deflate.c",
			"line":	692,
			"primary_score":	999999,
			"second_score":	3166
		}, {
			"file":	"deflate.c",
			"line":	694,
			"primary_score":	999999,
			"second_score":	3165
		}, {
			"file":	"deflate.c",
			"line":	716,
			"primary_score":	999999,
			"second_score":	3164
		}, {
			"file":	"deflate.c",
			"line":	741,
			"primary_score":	999999,
			"second_score":	3163
		}, {
			"file":	"deflate.c",
			"line":	756,
			"primary_score":	999999,
			"second_score":	3162
		}, {
			"file":	"deflate.c",
			"line":	757,
			"primary_score":	999999,
			"second_score":	3161
		}, {
			"file":	"deflate.c",
			"line":	758,
			"primary_score":	999999,
			"second_score":	3160
		}, {
			"file":	"deflate.c",
			"line":	760,
			"primary_score":	999999,
			"second_score":	3159
		}, {
			"file":	"deflate.c",
			"line":	767,
			"primary_score":	999999,
			"second_score":	3158
		}, {
			"file":	"deflate.c",
			"line":	769,
			"primary_score":	1000000,
			"second_score":	3156
		}, {
			"file":	"deflate.c",
			"line":	771,
			"primary_score":	999999,
			"second_score":	3148
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	59,
			"primary_score":	999998,
			"second_score":	6
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	60,
			"primary_score":	999998,
			"second_score":	5
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	61,
			"primary_score":	999998,
			"second_score":	4
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	71,
			"primary_score":	999998,
			"second_score":	3
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	78,
			"primary_score":	999998,
			"second_score":	2
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	81,
			"primary_score":	999998,
			"second_score":	25
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	86,
			"primary_score":	999998,
			"second_score":	24
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	93,
			"primary_score":	999998,
			"second_score":	21
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	95,
			"primary_score":	999998,
			"second_score":	15
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	107,
			"primary_score":	999998,
			"second_score":	14
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	109,
			"primary_score":	999998,
			"second_score":	1
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	109,
			"primary_score":	999998,
			"second_score":	13
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	122,
			"primary_score":	999998,
			"second_score":	7
		}, {
			"file":	"gnulib/lib/fd-safer.c",
			"line":	40,
			"primary_score":	999998,
			"second_score":	8184
		}, {
			"file":	"gnulib/lib/fd-safer.c",
			"line":	49,
			"primary_score":	999998,
			"second_score":	8183
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	29,
			"primary_score":	999998,
			"second_score":	23
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	31,
			"primary_score":	999998,
			"second_score":	22
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	31,
			"primary_score":	999998,
			"second_score":	8187
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	33,
			"primary_score":	999998,
			"second_score":	8186
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	45,
			"primary_score":	999998,
			"second_score":	8185
		}, {
			"file":	"gnulib/lib/stat-time.h",
			"line":	135,
			"primary_score":	999999,
			"second_score":	11494
		}, {
			"file":	"gzip.c",
			"line":	410,
			"primary_score":	999998,
			"second_score":	11582
		}, {
			"file":	"gzip.c",
			"line":	411,
			"primary_score":	999998,
			"second_score":	11581
		}, {
			"file":	"gzip.c",
			"line":	413,
			"primary_score":	999998,
			"second_score":	11580
		}, {
			"file":	"gzip.c",
			"line":	415,
			"primary_score":	999998,
			"second_score":	11579
		}, {
			"file":	"gzip.c",
			"line":	416,
			"primary_score":	999998,
			"second_score":	11574
		}, {
			"file":	"gzip.c",
			"line":	418,
			"primary_score":	999998,
			"second_score":	11573
		}, {
			"file":	"gzip.c",
			"line":	421,
			"primary_score":	999998,
			"second_score":	11572
		}, {
			"file":	"gzip.c",
			"line":	425,
			"primary_score":	999998,
			"second_score":	11571
		}, {
			"file":	"gzip.c",
			"line":	426,
			"primary_score":	999998,
			"second_score":	11562
		}, {
			"file":	"gzip.c",
			"line":	447,
			"primary_score":	999998,
			"second_score":	11561
		}, {
			"file":	"gzip.c",
			"line":	448,
			"primary_score":	999998,
			"second_score":	11560
		}, {
			"file":	"gzip.c",
			"line":	450,
			"primary_score":	999998,
			"second_score":	11559
		}, {
			"file":	"gzip.c",
			"line":	452,
			"primary_score":	999998,
			"second_score":	8265
		}, {
			"file":	"gzip.c",
			"line":	466,
			"primary_score":	999998,
			"second_score":	8264
		}, {
			"file":	"gzip.c",
			"line":	468,
			"primary_score":	999998,
			"second_score":	8266
		}, {
			"file":	"gzip.c",
			"line":	532,
			"primary_score":	999998,
			"second_score":	11558
		}, {
			"file":	"gzip.c",
			"line":	533,
			"primary_score":	999998,
			"second_score":	11556
		}, {
			"file":	"gzip.c",
			"line":	535,
			"primary_score":	999998,
			"second_score":	11554
		}, {
			"file":	"gzip.c",
			"line":	539,
			"primary_score":	999998,
			"second_score":	11553
		}, {
			"file":	"gzip.c",
			"line":	544,
			"primary_score":	999998,
			"second_score":	11552
		}, {
			"file":	"gzip.c",
			"line":	549,
			"primary_score":	999998,
			"second_score":	11551
		}, {
			"file":	"gzip.c",
			"line":	552,
			"primary_score":	999998,
			"second_score":	11550
		}, {
			"file":	"gzip.c",
			"line":	553,
			"primary_score":	999998,
			"second_score":	11549
		}, {
			"file":	"gzip.c",
			"line":	554,
			"primary_score":	999998,
			"second_score":	11548
		}, {
			"file":	"gzip.c",
			"line":	555,
			"primary_score":	999998,
			"second_score":	11547
		}, {
			"file":	"gzip.c",
			"line":	557,
			"primary_score":	999998,
			"second_score":	11546
		}, {
			"file":	"gzip.c",
			"line":	563,
			"primary_score":	999998,
			"second_score":	11545
		}, {
			"file":	"gzip.c",
			"line":	564,
			"primary_score":	999998,
			"second_score":	11544
		}, {
			"file":	"gzip.c",
			"line":	567,
			"primary_score":	999998,
			"second_score":	11509
		}, {
			"file":	"gzip.c",
			"line":	568,
			"primary_score":	999998,
			"second_score":	8213
		}, {
			"file":	"gzip.c",
			"line":	569,
			"primary_score":	999998,
			"second_score":	8212
		}, {
			"file":	"gzip.c",
			"line":	571,
			"primary_score":	999998,
			"second_score":	8211
		}, {
			"file":	"gzip.c",
			"line":	572,
			"primary_score":	999998,
			"second_score":	99
		}, {
			"file":	"gzip.c",
			"line":	575,
			"primary_score":	999999,
			"second_score":	11508
		}, {
			"file":	"gzip.c",
			"line":	577,
			"primary_score":	999999,
			"second_score":	40
		}, {
			"file":	"gzip.c",
			"line":	580,
			"primary_score":	999999,
			"second_score":	39
		}, {
			"file":	"gzip.c",
			"line":	588,
			"primary_score":	999999,
			"second_score":	108
		}, {
			"file":	"gzip.c",
			"line":	589,
			"primary_score":	999999,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	591,
			"primary_score":	999999,
			"second_score":	107
		}, {
			"file":	"gzip.c",
			"line":	593,
			"primary_score":	999999,
			"second_score":	106
		}, {
			"file":	"gzip.c",
			"line":	594,
			"primary_score":	999999,
			"second_score":	105
		}, {
			"file":	"gzip.c",
			"line":	608,
			"primary_score":	999999,
			"second_score":	11507
		}, {
			"file":	"gzip.c",
			"line":	630,
			"primary_score":	999999,
			"second_score":	11506
		}, {
			"file":	"gzip.c",
			"line":	631,
			"primary_score":	999999,
			"second_score":	11505
		}, {
			"file":	"gzip.c",
			"line":	633,
			"primary_score":	999999,
			"second_score":	11504
		}, {
			"file":	"gzip.c",
			"line":	634,
			"primary_score":	999999,
			"second_score":	11503
		}, {
			"file":	"gzip.c",
			"line":	636,
			"primary_score":	999999,
			"second_score":	11502
		}, {
			"file":	"gzip.c",
			"line":	637,
			"primary_score":	999999,
			"second_score":	11501
		}, {
			"file":	"gzip.c",
			"line":	640,
			"primary_score":	999999,
			"second_score":	11500
		}, {
			"file":	"gzip.c",
			"line":	645,
			"primary_score":	999999,
			"second_score":	11498
		}, {
			"file":	"gzip.c",
			"line":	646,
			"primary_score":	999999,
			"second_score":	11497
		}, {
			"file":	"gzip.c",
			"line":	647,
			"primary_score":	999999,
			"second_score":	11496
		}, {
			"file":	"gzip.c",
			"line":	648,
			"primary_score":	999999,
			"second_score":	11495
		}, {
			"file":	"gzip.c",
			"line":	650,
			"primary_score":	999999,
			"second_score":	11493
		}, {
			"file":	"gzip.c",
			"line":	651,
			"primary_score":	999999,
			"second_score":	11489
		}, {
			"file":	"gzip.c",
			"line":	652,
			"primary_score":	999999,
			"second_score":	11488
		}, {
			"file":	"gzip.c",
			"line":	654,
			"primary_score":	999999,
			"second_score":	11487
		}, {
			"file":	"gzip.c",
			"line":	655,
			"primary_score":	1000000,
			"second_score":	68
		}, {
			"file":	"gzip.c",
			"line":	660,
			"primary_score":	999999,
			"second_score":	11486
		}, {
			"file":	"gzip.c",
			"line":	667,
			"primary_score":	999999,
			"second_score":	11485
		}, {
			"file":	"gzip.c",
			"line":	668,
			"primary_score":	999999,
			"second_score":	11484
		}, {
			"file":	"gzip.c",
			"line":	670,
			"primary_score":	999999,
			"second_score":	45
		}, {
			"file":	"gzip.c",
			"line":	671,
			"primary_score":	999999,
			"second_score":	42
		}, {
			"file":	"gzip.c",
			"line":	678,
			"primary_score":	999999,
			"second_score":	41
		}, {
			"file":	"gzip.c",
			"line":	701,
			"primary_score":	1000000,
			"second_score":	92
		}, {
			"file":	"gzip.c",
			"line":	702,
			"primary_score":	1000000,
			"second_score":	89
		}, {
			"file":	"gzip.c",
			"line":	703,
			"primary_score":	1000000,
			"second_score":	88
		}, {
			"file":	"gzip.c",
			"line":	709,
			"primary_score":	999998,
			"second_score":	8202
		}, {
			"file":	"gzip.c",
			"line":	710,
			"primary_score":	999998,
			"second_score":	8177
		}, {
			"file":	"gzip.c",
			"line":	714,
			"primary_score":	999998,
			"second_score":	8176
		}, {
			"file":	"gzip.c",
			"line":	728,
			"primary_score":	999998,
			"second_score":	8175
		}, {
			"file":	"gzip.c",
			"line":	775,
			"primary_score":	999998,
			"second_score":	8174
		}, {
			"file":	"gzip.c",
			"line":	776,
			"primary_score":	999998,
			"second_score":	8173
		}, {
			"file":	"gzip.c",
			"line":	777,
			"primary_score":	999998,
			"second_score":	8172
		}, {
			"file":	"gzip.c",
			"line":	783,
			"primary_score":	999998,
			"second_score":	8171
		}, {
			"file":	"gzip.c",
			"line":	784,
			"primary_score":	999998,
			"second_score":	8170
		}, {
			"file":	"gzip.c",
			"line":	791,
			"primary_score":	999998,
			"second_score":	8169
		}, {
			"file":	"gzip.c",
			"line":	792,
			"primary_score":	999998,
			"second_score":	8165
		}, {
			"file":	"gzip.c",
			"line":	794,
			"primary_score":	999998,
			"second_score":	8164
		}, {
			"file":	"gzip.c",
			"line":	795,
			"primary_score":	999998,
			"second_score":	8163
		}, {
			"file":	"gzip.c",
			"line":	796,
			"primary_score":	999998,
			"second_score":	8109
		}, {
			"file":	"gzip.c",
			"line":	801,
			"primary_score":	999998,
			"second_score":	8108
		}, {
			"file":	"gzip.c",
			"line":	812,
			"primary_score":	999998,
			"second_score":	8107
		}, {
			"file":	"gzip.c",
			"line":	813,
			"primary_score":	999998,
			"second_score":	8106
		}, {
			"file":	"gzip.c",
			"line":	824,
			"primary_score":	999998,
			"second_score":	8105
		}, {
			"file":	"gzip.c",
			"line":	826,
			"primary_score":	999998,
			"second_score":	8103
		}, {
			"file":	"gzip.c",
			"line":	832,
			"primary_score":	999998,
			"second_score":	8102
		}, {
			"file":	"gzip.c",
			"line":	833,
			"primary_score":	999998,
			"second_score":	8101
		}, {
			"file":	"gzip.c",
			"line":	838,
			"primary_score":	999999,
			"second_score":	109
		}, {
			"file":	"gzip.c",
			"line":	839,
			"primary_score":	999999,
			"second_score":	104
		}, {
			"file":	"gzip.c",
			"line":	846,
			"primary_score":	999999,
			"second_score":	103
		}, {
			"file":	"gzip.c",
			"line":	849,
			"primary_score":	999999,
			"second_score":	102
		}, {
			"file":	"gzip.c",
			"line":	874,
			"primary_score":	999999,
			"second_score":	101
		}, {
			"file":	"gzip.c",
			"line":	881,
			"primary_score":	999999,
			"second_score":	100
		}, {
			"file":	"gzip.c",
			"line":	1019,
			"primary_score":	999998,
			"second_score":	8190
		}, {
			"file":	"gzip.c",
			"line":	1022,
			"primary_score":	999998,
			"second_score":	8189
		}, {
			"file":	"gzip.c",
			"line":	1040,
			"primary_score":	999998,
			"second_score":	8188
		}, {
			"file":	"gzip.c",
			"line":	1041,
			"primary_score":	999998,
			"second_score":	8182
		}, {
			"file":	"gzip.c",
			"line":	1048,
			"primary_score":	999998,
			"second_score":	8180
		}, {
			"file":	"gzip.c",
			"line":	1064,
			"primary_score":	999998,
			"second_score":	8201
		}, {
			"file":	"gzip.c",
			"line":	1065,
			"primary_score":	999998,
			"second_score":	8200
		}, {
			"file":	"gzip.c",
			"line":	1066,
			"primary_score":	999998,
			"second_score":	8199
		}, {
			"file":	"gzip.c",
			"line":	1067,
			"primary_score":	999998,
			"second_score":	8198
		}, {
			"file":	"gzip.c",
			"line":	1068,
			"primary_score":	999998,
			"second_score":	8197
		}, {
			"file":	"gzip.c",
			"line":	1072,
			"primary_score":	999998,
			"second_score":	8196
		}, {
			"file":	"gzip.c",
			"line":	1073,
			"primary_score":	999998,
			"second_score":	8195
		}, {
			"file":	"gzip.c",
			"line":	1076,
			"primary_score":	999998,
			"second_score":	8194
		}, {
			"file":	"gzip.c",
			"line":	1078,
			"primary_score":	999998,
			"second_score":	8193
		}, {
			"file":	"gzip.c",
			"line":	1081,
			"primary_score":	999998,
			"second_score":	8192
		}, {
			"file":	"gzip.c",
			"line":	1084,
			"primary_score":	999998,
			"second_score":	8191
		}, {
			"file":	"gzip.c",
			"line":	1085,
			"primary_score":	999998,
			"second_score":	8179
		}, {
			"file":	"gzip.c",
			"line":	1086,
			"primary_score":	999998,
			"second_score":	8178
		}, {
			"file":	"gzip.c",
			"line":	1253,
			"primary_score":	999998,
			"second_score":	67
		}, {
			"file":	"gzip.c",
			"line":	1254,
			"primary_score":	999998,
			"second_score":	66
		}, {
			"file":	"gzip.c",
			"line":	1255,
			"primary_score":	999998,
			"second_score":	65
		}, {
			"file":	"gzip.c",
			"line":	1256,
			"primary_score":	999998,
			"second_score":	64
		}, {
			"file":	"gzip.c",
			"line":	1261,
			"primary_score":	999998,
			"second_score":	63
		}, {
			"file":	"gzip.c",
			"line":	1267,
			"primary_score":	999998,
			"second_score":	62
		}, {
			"file":	"gzip.c",
			"line":	1268,
			"primary_score":	999998,
			"second_score":	8138
		}, {
			"file":	"gzip.c",
			"line":	1269,
			"primary_score":	999998,
			"second_score":	8137
		}, {
			"file":	"gzip.c",
			"line":	1271,
			"primary_score":	999998,
			"second_score":	8136
		}, {
			"file":	"gzip.c",
			"line":	1272,
			"primary_score":	999998,
			"second_score":	8135
		}, {
			"file":	"gzip.c",
			"line":	1273,
			"primary_score":	999998,
			"second_score":	8134
		}, {
			"file":	"gzip.c",
			"line":	1274,
			"primary_score":	999998,
			"second_score":	8133
		}, {
			"file":	"gzip.c",
			"line":	1277,
			"primary_score":	999998,
			"second_score":	8132
		}, {
			"file":	"gzip.c",
			"line":	1280,
			"primary_score":	999998,
			"second_score":	8131
		}, {
			"file":	"gzip.c",
			"line":	1281,
			"primary_score":	999998,
			"second_score":	8130
		}, {
			"file":	"gzip.c",
			"line":	1288,
			"primary_score":	999998,
			"second_score":	8129
		}, {
			"file":	"gzip.c",
			"line":	1289,
			"primary_score":	999998,
			"second_score":	8128
		}, {
			"file":	"gzip.c",
			"line":	1291,
			"primary_score":	999998,
			"second_score":	8127
		}, {
			"file":	"gzip.c",
			"line":	1298,
			"primary_score":	999998,
			"second_score":	8126
		}, {
			"file":	"gzip.c",
			"line":	1305,
			"primary_score":	999998,
			"second_score":	8125
		}, {
			"file":	"gzip.c",
			"line":	1312,
			"primary_score":	999998,
			"second_score":	8124
		}, {
			"file":	"gzip.c",
			"line":	1313,
			"primary_score":	999998,
			"second_score":	8123
		}, {
			"file":	"gzip.c",
			"line":	1314,
			"primary_score":	999998,
			"second_score":	8122
		}, {
			"file":	"gzip.c",
			"line":	1315,
			"primary_score":	999998,
			"second_score":	8121
		}, {
			"file":	"gzip.c",
			"line":	1316,
			"primary_score":	999998,
			"second_score":	8120
		}, {
			"file":	"gzip.c",
			"line":	1322,
			"primary_score":	999998,
			"second_score":	8119
		}, {
			"file":	"gzip.c",
			"line":	1323,
			"primary_score":	999998,
			"second_score":	8118
		}, {
			"file":	"gzip.c",
			"line":	1325,
			"primary_score":	999998,
			"second_score":	8117
		}, {
			"file":	"gzip.c",
			"line":	1333,
			"primary_score":	999998,
			"second_score":	8116
		}, {
			"file":	"gzip.c",
			"line":	1344,
			"primary_score":	999998,
			"second_score":	8115
		}, {
			"file":	"gzip.c",
			"line":	1371,
			"primary_score":	999998,
			"second_score":	8114
		}, {
			"file":	"gzip.c",
			"line":	1374,
			"primary_score":	999998,
			"second_score":	8113
		}, {
			"file":	"gzip.c",
			"line":	1375,
			"primary_score":	999998,
			"second_score":	8112
		}, {
			"file":	"gzip.c",
			"line":	1409,
			"primary_score":	999998,
			"second_score":	8111
		}, {
			"file":	"gzip.c",
			"line":	1782,
			"primary_score":	999998,
			"second_score":	11543
		}, {
			"file":	"gzip.c",
			"line":	1783,
			"primary_score":	999998,
			"second_score":	11542
		}, {
			"file":	"gzip.c",
			"line":	1786,
			"primary_score":	999998,
			"second_score":	11541
		}, {
			"file":	"gzip.c",
			"line":	1788,
			"primary_score":	999998,
			"second_score":	11540
		}, {
			"file":	"gzip.c",
			"line":	1789,
			"primary_score":	999998,
			"second_score":	11539
		}, {
			"file":	"gzip.c",
			"line":	1791,
			"primary_score":	999998,
			"second_score":	11524
		}, {
			"file":	"gzip.c",
			"line":	1792,
			"primary_score":	999998,
			"second_score":	11523
		}, {
			"file":	"gzip.c",
			"line":	1793,
			"primary_score":	999998,
			"second_score":	11525
		}, {
			"file":	"gzip.c",
			"line":	1796,
			"primary_score":	999998,
			"second_score":	11522
		}, {
			"file":	"gzip.c",
			"line":	1797,
			"primary_score":	999998,
			"second_score":	11521
		}, {
			"file":	"gzip.c",
			"line":	1798,
			"primary_score":	999998,
			"second_score":	11520
		}, {
			"file":	"gzip.c",
			"line":	1800,
			"primary_score":	999998,
			"second_score":	11519
		}, {
			"file":	"gzip.c",
			"line":	1803,
			"primary_score":	999998,
			"second_score":	11511
		}, {
			"file":	"gzip.c",
			"line":	1804,
			"primary_score":	999998,
			"second_score":	11517
		}, {
			"file":	"gzip.c",
			"line":	1805,
			"primary_score":	999998,
			"second_score":	11510
		}, {
			"file":	"gzip.c",
			"line":	1825,
			"primary_score":	999998,
			"second_score":	38
		}, {
			"file":	"gzip.c",
			"line":	1827,
			"primary_score":	999998,
			"second_score":	37
		}, {
			"file":	"gzip.c",
			"line":	1828,
			"primary_score":	999998,
			"second_score":	36
		}, {
			"file":	"gzip.c",
			"line":	1829,
			"primary_score":	999998,
			"second_score":	35
		}, {
			"file":	"gzip.c",
			"line":	1830,
			"primary_score":	999998,
			"second_score":	34
		}, {
			"file":	"gzip.c",
			"line":	1831,
			"primary_score":	999998,
			"second_score":	33
		}, {
			"file":	"gzip.c",
			"line":	1832,
			"primary_score":	999998,
			"second_score":	32
		}, {
			"file":	"gzip.c",
			"line":	1833,
			"primary_score":	999998,
			"second_score":	31
		}, {
			"file":	"gzip.c",
			"line":	1834,
			"primary_score":	999998,
			"second_score":	30
		}, {
			"file":	"gzip.c",
			"line":	1835,
			"primary_score":	999998,
			"second_score":	29
		}, {
			"file":	"gzip.c",
			"line":	1836,
			"primary_score":	999998,
			"second_score":	28
		}, {
			"file":	"gzip.c",
			"line":	1838,
			"primary_score":	999998,
			"second_score":	27
		}, {
			"file":	"gzip.c",
			"line":	1843,
			"primary_score":	999998,
			"second_score":	26
		}, {
			"file":	"gzip.c",
			"line":	1852,
			"primary_score":	999999,
			"second_score":	45
		}, {
			"file":	"gzip.c",
			"line":	1853,
			"primary_score":	999999,
			"second_score":	44
		}, {
			"file":	"gzip.c",
			"line":	1855,
			"primary_score":	999999,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	1856,
			"primary_score":	999999,
			"second_score":	42
		}, {
			"file":	"gzip.c",
			"line":	1857,
			"primary_score":	999999,
			"second_score":	41
		}, {
			"file":	"gzip.c",
			"line":	1863,
			"primary_score":	999999,
			"second_score":	40
		}, {
			"file":	"gzip.c",
			"line":	1872,
			"primary_score":	999999,
			"second_score":	46
		}, {
			"file":	"gzip.c",
			"line":	1873,
			"primary_score":	999999,
			"second_score":	39
		}, {
			"file":	"inflate.c",
			"line":	301,
			"primary_score":	999998,
			"second_score":	1108
		}, {
			"file":	"inflate.c",
			"line":	302,
			"primary_score":	999998,
			"second_score":	1107
		}, {
			"file":	"inflate.c",
			"line":	303,
			"primary_score":	999998,
			"second_score":	1106
		}, {
			"file":	"inflate.c",
			"line":	304,
			"primary_score":	999998,
			"second_score":	1105
		}, {
			"file":	"inflate.c",
			"line":	305,
			"primary_score":	999998,
			"second_score":	1104
		}, {
			"file":	"inflate.c",
			"line":	306,
			"primary_score":	999998,
			"second_score":	1103
		}, {
			"file":	"inflate.c",
			"line":	307,
			"primary_score":	999998,
			"second_score":	1102
		}, {
			"file":	"inflate.c",
			"line":	308,
			"primary_score":	999998,
			"second_score":	1101
		}, {
			"file":	"inflate.c",
			"line":	309,
			"primary_score":	999998,
			"second_score":	1100
		}, {
			"file":	"inflate.c",
			"line":	310,
			"primary_score":	999998,
			"second_score":	1099
		}, {
			"file":	"inflate.c",
			"line":	311,
			"primary_score":	999998,
			"second_score":	1098
		}, {
			"file":	"inflate.c",
			"line":	312,
			"primary_score":	999998,
			"second_score":	1097
		}, {
			"file":	"inflate.c",
			"line":	313,
			"primary_score":	999998,
			"second_score":	1096
		}, {
			"file":	"inflate.c",
			"line":	314,
			"primary_score":	999998,
			"second_score":	1095
		}, {
			"file":	"inflate.c",
			"line":	315,
			"primary_score":	999998,
			"second_score":	1094
		}, {
			"file":	"inflate.c",
			"line":	316,
			"primary_score":	999998,
			"second_score":	1093
		}, {
			"file":	"inflate.c",
			"line":	317,
			"primary_score":	999998,
			"second_score":	1092
		}, {
			"file":	"inflate.c",
			"line":	318,
			"primary_score":	999998,
			"second_score":	1091
		}, {
			"file":	"inflate.c",
			"line":	319,
			"primary_score":	999998,
			"second_score":	1090
		}, {
			"file":	"inflate.c",
			"line":	323,
			"primary_score":	999998,
			"second_score":	1089
		}, {
			"file":	"inflate.c",
			"line":	324,
			"primary_score":	999998,
			"second_score":	1088
		}, {
			"file":	"inflate.c",
			"line":	325,
			"primary_score":	999998,
			"second_score":	1086
		}, {
			"file":	"inflate.c",
			"line":	327,
			"primary_score":	999998,
			"second_score":	998
		}, {
			"file":	"inflate.c",
			"line":	328,
			"primary_score":	999998,
			"second_score":	997
		}, {
			"file":	"inflate.c",
			"line":	329,
			"primary_score":	999998,
			"second_score":	996
		}, {
			"file":	"inflate.c",
			"line":	331,
			"primary_score":	999998,
			"second_score":	995
		}, {
			"file":	"inflate.c",
			"line":	349,
			"primary_score":	999998,
			"second_score":	994
		}, {
			"file":	"inflate.c",
			"line":	350,
			"primary_score":	999998,
			"second_score":	993
		}, {
			"file":	"inflate.c",
			"line":	352,
			"primary_score":	999998,
			"second_score":	992
		}, {
			"file":	"inflate.c",
			"line":	353,
			"primary_score":	999998,
			"second_score":	991
		}, {
			"file":	"inflate.c",
			"line":	354,
			"primary_score":	999998,
			"second_score":	990
		}, {
			"file":	"inflate.c",
			"line":	356,
			"primary_score":	999998,
			"second_score":	989
		}, {
			"file":	"inflate.c",
			"line":	358,
			"primary_score":	999998,
			"second_score":	988
		}, {
			"file":	"inflate.c",
			"line":	359,
			"primary_score":	999998,
			"second_score":	987
		}, {
			"file":	"inflate.c",
			"line":	360,
			"primary_score":	999998,
			"second_score":	986
		}, {
			"file":	"inflate.c",
			"line":	362,
			"primary_score":	999998,
			"second_score":	985
		}, {
			"file":	"inflate.c",
			"line":	366,
			"primary_score":	999998,
			"second_score":	984
		}, {
			"file":	"inflate.c",
			"line":	369,
			"primary_score":	999998,
			"second_score":	983
		}, {
			"file":	"inflate.c",
			"line":	371,
			"primary_score":	999998,
			"second_score":	982
		}, {
			"file":	"inflate.c",
			"line":	375,
			"primary_score":	999998,
			"second_score":	981
		}, {
			"file":	"inflate.c",
			"line":	376,
			"primary_score":	999998,
			"second_score":	980
		}, {
			"file":	"inflate.c",
			"line":	377,
			"primary_score":	999998,
			"second_score":	978
		}, {
			"file":	"inflate.c",
			"line":	378,
			"primary_score":	999999,
			"second_score":	974
		}, {
			"file":	"inflate.c",
			"line":	383,
			"primary_score":	999998,
			"second_score":	973
		}, {
			"file":	"inflate.c",
			"line":	384,
			"primary_score":	999998,
			"second_score":	971
		}, {
			"file":	"inflate.c",
			"line":	385,
			"primary_score":	999998,
			"second_score":	912
		}, {
			"file":	"inflate.c",
			"line":	386,
			"primary_score":	999998,
			"second_score":	911
		}, {
			"file":	"inflate.c",
			"line":	388,
			"primary_score":	999998,
			"second_score":	910
		}, {
			"file":	"inflate.c",
			"line":	392,
			"primary_score":	999998,
			"second_score":	909
		}, {
			"file":	"inflate.c",
			"line":	393,
			"primary_score":	999998,
			"second_score":	908
		}, {
			"file":	"inflate.c",
			"line":	394,
			"primary_score":	999998,
			"second_score":	907
		}, {
			"file":	"inflate.c",
			"line":	395,
			"primary_score":	999998,
			"second_score":	906
		}, {
			"file":	"inflate.c",
			"line":	396,
			"primary_score":	999998,
			"second_score":	905
		}, {
			"file":	"inflate.c",
			"line":	397,
			"primary_score":	999998,
			"second_score":	904
		}, {
			"file":	"inflate.c",
			"line":	398,
			"primary_score":	999998,
			"second_score":	903
		}, {
			"file":	"inflate.c",
			"line":	401,
			"primary_score":	999998,
			"second_score":	902
		}, {
			"file":	"inflate.c",
			"line":	403,
			"primary_score":	999998,
			"second_score":	901
		}, {
			"file":	"inflate.c",
			"line":	404,
			"primary_score":	999998,
			"second_score":	900
		}, {
			"file":	"inflate.c",
			"line":	408,
			"primary_score":	999998,
			"second_score":	549
		}, {
			"file":	"inflate.c",
			"line":	410,
			"primary_score":	999998,
			"second_score":	898
		}, {
			"file":	"inflate.c",
			"line":	411,
			"primary_score":	999998,
			"second_score":	897
		}, {
			"file":	"inflate.c",
			"line":	414,
			"primary_score":	999998,
			"second_score":	896
		}, {
			"file":	"inflate.c",
			"line":	415,
			"primary_score":	999998,
			"second_score":	895
		}, {
			"file":	"inflate.c",
			"line":	417,
			"primary_score":	999999,
			"second_score":	6526
		}, {
			"file":	"inflate.c",
			"line":	418,
			"primary_score":	999999,
			"second_score":	6525
		}, {
			"file":	"inflate.c",
			"line":	419,
			"primary_score":	999999,
			"second_score":	6524
		}, {
			"file":	"inflate.c",
			"line":	427,
			"primary_score":	999998,
			"second_score":	894
		}, {
			"file":	"inflate.c",
			"line":	430,
			"primary_score":	999998,
			"second_score":	893
		}, {
			"file":	"inflate.c",
			"line":	437,
			"primary_score":	999998,
			"second_score":	892
		}, {
			"file":	"inflate.c",
			"line":	438,
			"primary_score":	999998,
			"second_score":	891
		}, {
			"file":	"inflate.c",
			"line":	439,
			"primary_score":	999998,
			"second_score":	890
		}, {
			"file":	"inflate.c",
			"line":	440,
			"primary_score":	999998,
			"second_score":	889
		}, {
			"file":	"inflate.c",
			"line":	443,
			"primary_score":	999998,
			"second_score":	888
		}, {
			"file":	"inflate.c",
			"line":	445,
			"primary_score":	1000000,
			"second_score":	1167
		}, {
			"file":	"inflate.c",
			"line":	446,
			"primary_score":	1000000,
			"second_score":	1166
		}, {
			"file":	"inflate.c",
			"line":	447,
			"primary_score":	1000000,
			"second_score":	1165
		}, {
			"file":	"inflate.c",
			"line":	448,
			"primary_score":	1000000,
			"second_score":	1164
		}, {
			"file":	"inflate.c",
			"line":	449,
			"primary_score":	1000000,
			"second_score":	1163
		}, {
			"file":	"inflate.c",
			"line":	450,
			"primary_score":	1000000,
			"second_score":	1162
		}, {
			"file":	"inflate.c",
			"line":	455,
			"primary_score":	999998,
			"second_score":	548
		}, {
			"file":	"inflate.c",
			"line":	456,
			"primary_score":	999998,
			"second_score":	547
		}, {
			"file":	"inflate.c",
			"line":	457,
			"primary_score":	999999,
			"second_score":	546
		}, {
			"file":	"inflate.c",
			"line":	458,
			"primary_score":	999998,
			"second_score":	566
		}, {
			"file":	"inflate.c",
			"line":	460,
			"primary_score":	999998,
			"second_score":	1122
		}, {
			"file":	"inflate.c",
			"line":	461,
			"primary_score":	999998,
			"second_score":	1121
		}, {
			"file":	"inflate.c",
			"line":	462,
			"primary_score":	999998,
			"second_score":	1120
		}, {
			"file":	"inflate.c",
			"line":	466,
			"primary_score":	999999,
			"second_score":	565
		}, {
			"file":	"inflate.c",
			"line":	467,
			"primary_score":	999999,
			"second_score":	564
		}, {
			"file":	"inflate.c",
			"line":	471,
			"primary_score":	999998,
			"second_score":	545
		}, {
			"file":	"inflate.c",
			"line":	472,
			"primary_score":	999998,
			"second_score":	544
		}, {
			"file":	"inflate.c",
			"line":	476,
			"primary_score":	999998,
			"second_score":	543
		}, {
			"file":	"inflate.c",
			"line":	478,
			"primary_score":	999998,
			"second_score":	542
		}, {
			"file":	"inflate.c",
			"line":	481,
			"primary_score":	999998,
			"second_score":	541
		}, {
			"file":	"inflate.c",
			"line":	483,
			"primary_score":	1000000,
			"second_score":	1114
		}, {
			"file":	"inflate.c",
			"line":	484,
			"primary_score":	1000000,
			"second_score":	1113
		}, {
			"file":	"inflate.c",
			"line":	491,
			"primary_score":	999998,
			"second_score":	540
		}, {
			"file":	"inflate.c",
			"line":	502,
			"primary_score":	999998,
			"second_score":	169
		}, {
			"file":	"inflate.c",
			"line":	506,
			"primary_score":	999998,
			"second_score":	168
		}, {
			"file":	"inflate.c",
			"line":	507,
			"primary_score":	999998,
			"second_score":	167
		}, {
			"file":	"inflate.c",
			"line":	509,
			"primary_score":	999998,
			"second_score":	166
		}, {
			"file":	"inflate.c",
			"line":	510,
			"primary_score":	999998,
			"second_score":	165
		}, {
			"file":	"inflate.c",
			"line":	511,
			"primary_score":	999998,
			"second_score":	164
		}, {
			"file":	"inflate.c",
			"line":	513,
			"primary_score":	999998,
			"second_score":	163
		}, {
			"file":	"inflate.c",
			"line":	523,
			"primary_score":	999998,
			"second_score":	538
		}, {
			"file":	"inflate.c",
			"line":	524,
			"primary_score":	999998,
			"second_score":	537
		}, {
			"file":	"inflate.c",
			"line":	525,
			"primary_score":	999998,
			"second_score":	536
		}, {
			"file":	"inflate.c",
			"line":	526,
			"primary_score":	999998,
			"second_score":	535
		}, {
			"file":	"inflate.c",
			"line":	527,
			"primary_score":	999998,
			"second_score":	534
		}, {
			"file":	"inflate.c",
			"line":	528,
			"primary_score":	999998,
			"second_score":	533
		}, {
			"file":	"inflate.c",
			"line":	529,
			"primary_score":	999998,
			"second_score":	532
		}, {
			"file":	"inflate.c",
			"line":	533,
			"primary_score":	999998,
			"second_score":	531
		}, {
			"file":	"inflate.c",
			"line":	534,
			"primary_score":	999998,
			"second_score":	530
		}, {
			"file":	"inflate.c",
			"line":	535,
			"primary_score":	999998,
			"second_score":	529
		}, {
			"file":	"inflate.c",
			"line":	538,
			"primary_score":	999998,
			"second_score":	528
		}, {
			"file":	"inflate.c",
			"line":	539,
			"primary_score":	999998,
			"second_score":	527
		}, {
			"file":	"inflate.c",
			"line":	540,
			"primary_score":	999998,
			"second_score":	526
		}, {
			"file":	"inflate.c",
			"line":	542,
			"primary_score":	999999,
			"second_score":	503
		}, {
			"file":	"inflate.c",
			"line":	543,
			"primary_score":	999998,
			"second_score":	501
		}, {
			"file":	"inflate.c",
			"line":	544,
			"primary_score":	999999,
			"second_score":	520
		}, {
			"file":	"inflate.c",
			"line":	545,
			"primary_score":	999999,
			"second_score":	519
		}, {
			"file":	"inflate.c",
			"line":	547,
			"primary_score":	1000000,
			"second_score":	518
		}, {
			"file":	"inflate.c",
			"line":	548,
			"primary_score":	1000000,
			"second_score":	515
		}, {
			"file":	"inflate.c",
			"line":	549,
			"primary_score":	1000000,
			"second_score":	514
		}, {
			"file":	"inflate.c",
			"line":	551,
			"primary_score":	999999,
			"second_score":	500
		}, {
			"file":	"inflate.c",
			"line":	552,
			"primary_score":	999999,
			"second_score":	497
		}, {
			"file":	"inflate.c",
			"line":	554,
			"primary_score":	999999,
			"second_score":	508
		}, {
			"file":	"inflate.c",
			"line":	555,
			"primary_score":	999999,
			"second_score":	507
		}, {
			"file":	"inflate.c",
			"line":	556,
			"primary_score":	999999,
			"second_score":	506
		}, {
			"file":	"inflate.c",
			"line":	565,
			"primary_score":	999999,
			"second_score":	496
		}, {
			"file":	"inflate.c",
			"line":	566,
			"primary_score":	999999,
			"second_score":	495
		}, {
			"file":	"inflate.c",
			"line":	616,
			"primary_score":	999999,
			"second_score":	494
		}, {
			"file":	"inflate.c",
			"line":	617,
			"primary_score":	999999,
			"second_score":	493
		}, {
			"file":	"inflate.c",
			"line":	618,
			"primary_score":	999999,
			"second_score":	492
		}, {
			"file":	"inflate.c",
			"line":	621,
			"primary_score":	999999,
			"second_score":	491
		}, {
			"file":	"inflate.c",
			"line":	684,
			"primary_score":	1000000,
			"second_score":	8046
		}, {
			"file":	"inflate.c",
			"line":	685,
			"primary_score":	1000000,
			"second_score":	8045
		}, {
			"file":	"inflate.c",
			"line":	686,
			"primary_score":	1000000,
			"second_score":	8044
		}, {
			"file":	"inflate.c",
			"line":	687,
			"primary_score":	1000000,
			"second_score":	8043
		}, {
			"file":	"inflate.c",
			"line":	688,
			"primary_score":	1000000,
			"second_score":	8042
		}, {
			"file":	"inflate.c",
			"line":	689,
			"primary_score":	1000000,
			"second_score":	8041
		}, {
			"file":	"inflate.c",
			"line":	693,
			"primary_score":	1000000,
			"second_score":	8040
		}, {
			"file":	"inflate.c",
			"line":	695,
			"primary_score":	1000000,
			"second_score":	8039
		}, {
			"file":	"inflate.c",
			"line":	697,
			"primary_score":	1000000,
			"second_score":	8038
		}, {
			"file":	"inflate.c",
			"line":	699,
			"primary_score":	1000000,
			"second_score":	8037
		}, {
			"file":	"inflate.c",
			"line":	701,
			"primary_score":	1000000,
			"second_score":	8036
		}, {
			"file":	"inflate.c",
			"line":	702,
			"primary_score":	1000000,
			"second_score":	8035
		}, {
			"file":	"inflate.c",
			"line":	707,
			"primary_score":	1000000,
			"second_score":	1111
		}, {
			"file":	"inflate.c",
			"line":	709,
			"primary_score":	1000000,
			"second_score":	1110
		}, {
			"file":	"inflate.c",
			"line":	710,
			"primary_score":	1000000,
			"second_score":	1109
		}, {
			"file":	"inflate.c",
			"line":	718,
			"primary_score":	1000000,
			"second_score":	539
		}, {
			"file":	"inflate.c",
			"line":	723,
			"primary_score":	1000000,
			"second_score":	490
		}, {
			"file":	"inflate.c",
			"line":	724,
			"primary_score":	1000000,
			"second_score":	170
		}, {
			"file":	"inflate.c",
			"line":	725,
			"primary_score":	1000000,
			"second_score":	162
		}, {
			"file":	"inflate.c",
			"line":	903,
			"primary_score":	999998,
			"second_score":	8073
		}, {
			"file":	"inflate.c",
			"line":	904,
			"primary_score":	999998,
			"second_score":	8072
		}, {
			"file":	"inflate.c",
			"line":	905,
			"primary_score":	999998,
			"second_score":	8071
		}, {
			"file":	"inflate.c",
			"line":	906,
			"primary_score":	999998,
			"second_score":	8070
		}, {
			"file":	"inflate.c",
			"line":	910,
			"primary_score":	999998,
			"second_score":	8069
		}, {
			"file":	"inflate.c",
			"line":	911,
			"primary_score":	999998,
			"second_score":	8068
		}, {
			"file":	"inflate.c",
			"line":	912,
			"primary_score":	999998,
			"second_score":	8067
		}, {
			"file":	"inflate.c",
			"line":	916,
			"primary_score":	999998,
			"second_score":	8066
		}, {
			"file":	"inflate.c",
			"line":	917,
			"primary_score":	999998,
			"second_score":	8062
		}, {
			"file":	"inflate.c",
			"line":	918,
			"primary_score":	999998,
			"second_score":	8061
		}, {
			"file":	"inflate.c",
			"line":	922,
			"primary_score":	999998,
			"second_score":	8058
		}, {
			"file":	"inflate.c",
			"line":	923,
			"primary_score":	999998,
			"second_score":	8056
		}, {
			"file":	"inflate.c",
			"line":	924,
			"primary_score":	999998,
			"second_score":	8055
		}, {
			"file":	"inflate.c",
			"line":	928,
			"primary_score":	999998,
			"second_score":	8052
		}, {
			"file":	"inflate.c",
			"line":	929,
			"primary_score":	999998,
			"second_score":	8051
		}, {
			"file":	"inflate.c",
			"line":	933,
			"primary_score":	999998,
			"second_score":	8050
		}, {
			"file":	"inflate.c",
			"line":	935,
			"primary_score":	1000000,
			"second_score":	8049
		}, {
			"file":	"inflate.c",
			"line":	937,
			"primary_score":	1000000,
			"second_score":	8048
		}, {
			"file":	"inflate.c",
			"line":	938,
			"primary_score":	1000000,
			"second_score":	8047
		}, {
			"file":	"inflate.c",
			"line":	950,
			"primary_score":	999998,
			"second_score":	8083
		}, {
			"file":	"inflate.c",
			"line":	951,
			"primary_score":	999998,
			"second_score":	8082
		}, {
			"file":	"inflate.c",
			"line":	952,
			"primary_score":	999998,
			"second_score":	8081
		}, {
			"file":	"inflate.c",
			"line":	956,
			"primary_score":	999998,
			"second_score":	8080
		}, {
			"file":	"inflate.c",
			"line":	957,
			"primary_score":	999998,
			"second_score":	8079
		}, {
			"file":	"inflate.c",
			"line":	958,
			"primary_score":	999998,
			"second_score":	8078
		}, {
			"file":	"inflate.c",
			"line":	962,
			"primary_score":	999998,
			"second_score":	8077
		}, {
			"file":	"inflate.c",
			"line":	963,
			"primary_score":	999998,
			"second_score":	8076
		}, {
			"file":	"inflate.c",
			"line":	964,
			"primary_score":	999998,
			"second_score":	8075
		}, {
			"file":	"inflate.c",
			"line":	965,
			"primary_score":	999998,
			"second_score":	8074
		}, {
			"file":	"inflate.c",
			"line":	967,
			"primary_score":	999999,
			"second_score":	161
		}, {
			"file":	"inflate.c",
			"line":	968,
			"primary_score":	999999,
			"second_score":	160
		}, {
			"file":	"inflate.c",
			"line":	974,
			"primary_score":	999999,
			"second_score":	159
		}, {
			"file":	"inflate.c",
			"line":	980,
			"primary_score":	999999,
			"second_score":	158
		}, {
			"file":	"inflate.c",
			"line":	984,
			"primary_score":	999999,
			"second_score":	138
		}, {
			"file":	"inflate.c",
			"line":	985,
			"primary_score":	999999,
			"second_score":	137
		}, {
			"file":	"trees.c",
			"line":	345,
			"primary_score":	999999,
			"second_score":	11431
		}, {
			"file":	"trees.c",
			"line":	346,
			"primary_score":	999999,
			"second_score":	11430
		}, {
			"file":	"trees.c",
			"line":	347,
			"primary_score":	999999,
			"second_score":	11429
		}, {
			"file":	"trees.c",
			"line":	348,
			"primary_score":	999999,
			"second_score":	11428
		}, {
			"file":	"trees.c",
			"line":	349,
			"primary_score":	999999,
			"second_score":	11427
		}, {
			"file":	"trees.c",
			"line":	351,
			"primary_score":	999999,
			"second_score":	11426
		}, {
			"file":	"trees.c",
			"line":	352,
			"primary_score":	999999,
			"second_score":	11425
		}, {
			"file":	"trees.c",
			"line":	353,
			"primary_score":	999999,
			"second_score":	11424
		}, {
			"file":	"trees.c",
			"line":	355,
			"primary_score":	999999,
			"second_score":	11423
		}, {
			"file":	"trees.c",
			"line":	358,
			"primary_score":	999999,
			"second_score":	11422
		}, {
			"file":	"trees.c",
			"line":	359,
			"primary_score":	999999,
			"second_score":	11421
		}, {
			"file":	"trees.c",
			"line":	360,
			"primary_score":	999999,
			"second_score":	11142
		}, {
			"file":	"trees.c",
			"line":	361,
			"primary_score":	999999,
			"second_score":	11141
		}, {
			"file":	"trees.c",
			"line":	362,
			"primary_score":	999999,
			"second_score":	11109
		}, {
			"file":	"trees.c",
			"line":	365,
			"primary_score":	999999,
			"second_score":	11108
		}, {
			"file":	"trees.c",
			"line":	370,
			"primary_score":	999999,
			"second_score":	11107
		}, {
			"file":	"trees.c",
			"line":	373,
			"primary_score":	999999,
			"second_score":	11106
		}, {
			"file":	"trees.c",
			"line":	374,
			"primary_score":	999999,
			"second_score":	11105
		}, {
			"file":	"trees.c",
			"line":	375,
			"primary_score":	999999,
			"second_score":	10882
		}, {
			"file":	"trees.c",
			"line":	376,
			"primary_score":	999999,
			"second_score":	10881
		}, {
			"file":	"trees.c",
			"line":	377,
			"primary_score":	999999,
			"second_score":	10817
		}, {
			"file":	"trees.c",
			"line":	380,
			"primary_score":	999999,
			"second_score":	10816
		}, {
			"file":	"trees.c",
			"line":	381,
			"primary_score":	999999,
			"second_score":	10815
		}, {
			"file":	"trees.c",
			"line":	382,
			"primary_score":	999999,
			"second_score":	10814
		}, {
			"file":	"trees.c",
			"line":	383,
			"primary_score":	999999,
			"second_score":	10597
		}, {
			"file":	"trees.c",
			"line":	384,
			"primary_score":	999999,
			"second_score":	10596
		}, {
			"file":	"trees.c",
			"line":	385,
			"primary_score":	999999,
			"second_score":	10532
		}, {
			"file":	"trees.c",
			"line":	388,
			"primary_score":	999999,
			"second_score":	10531
		}, {
			"file":	"trees.c",
			"line":	391,
			"primary_score":	999999,
			"second_score":	10530
		}, {
			"file":	"trees.c",
			"line":	392,
			"primary_score":	999999,
			"second_score":	10529
		}, {
			"file":	"trees.c",
			"line":	393,
			"primary_score":	999999,
			"second_score":	10528
		}, {
			"file":	"trees.c",
			"line":	394,
			"primary_score":	999999,
			"second_score":	10527
		}, {
			"file":	"trees.c",
			"line":	395,
			"primary_score":	999999,
			"second_score":	10526
		}, {
			"file":	"trees.c",
			"line":	396,
			"primary_score":	999999,
			"second_score":	10525
		}, {
			"file":	"trees.c",
			"line":	401,
			"primary_score":	999999,
			"second_score":	10524
		}, {
			"file":	"trees.c",
			"line":	404,
			"primary_score":	999999,
			"second_score":	3700
		}, {
			"file":	"trees.c",
			"line":	405,
			"primary_score":	999999,
			"second_score":	3264
		}, {
			"file":	"trees.c",
			"line":	406,
			"primary_score":	999999,
			"second_score":	3263
		}, {
			"file":	"trees.c",
			"line":	410,
			"primary_score":	999999,
			"second_score":	3249
		}, {
			"file":	"trees.c",
			"line":	418,
			"primary_score":	999999,
			"second_score":	102
		}, {
			"file":	"trees.c",
			"line":	421,
			"primary_score":	999999,
			"second_score":	101
		}, {
			"file":	"trees.c",
			"line":	422,
			"primary_score":	999999,
			"second_score":	100
		}, {
			"file":	"trees.c",
			"line":	423,
			"primary_score":	999999,
			"second_score":	99
		}, {
			"file":	"trees.c",
			"line":	425,
			"primary_score":	999999,
			"second_score":	98
		}, {
			"file":	"trees.c",
			"line":	426,
			"primary_score":	999999,
			"second_score":	97
		}, {
			"file":	"trees.c",
			"line":	427,
			"primary_score":	999999,
			"second_score":	96
		}, {
			"file":	"trees.c",
			"line":	428,
			"primary_score":	999999,
			"second_score":	95
		}, {
			"file":	"trees.c",
			"line":	464,
			"primary_score":	999999,
			"second_score":	296
		}, {
			"file":	"trees.c",
			"line":	465,
			"primary_score":	999999,
			"second_score":	295
		}, {
			"file":	"trees.c",
			"line":	466,
			"primary_score":	999999,
			"second_score":	294
		}, {
			"file":	"trees.c",
			"line":	468,
			"primary_score":	999999,
			"second_score":	320
		}, {
			"file":	"trees.c",
			"line":	471,
			"primary_score":	999999,
			"second_score":	1588
		}, {
			"file":	"trees.c",
			"line":	474,
			"primary_score":	999999,
			"second_score":	318
		}, {
			"file":	"trees.c",
			"line":	477,
			"primary_score":	999999,
			"second_score":	316
		}, {
			"file":	"trees.c",
			"line":	479,
			"primary_score":	999999,
			"second_score":	293
		}, {
			"file":	"trees.c",
			"line":	495,
			"primary_score":	999999,
			"second_score":	290
		}, {
			"file":	"trees.c",
			"line":	496,
			"primary_score":	999999,
			"second_score":	289
		}, {
			"file":	"trees.c",
			"line":	497,
			"primary_score":	999999,
			"second_score":	288
		}, {
			"file":	"trees.c",
			"line":	498,
			"primary_score":	999999,
			"second_score":	287
		}, {
			"file":	"trees.c",
			"line":	499,
			"primary_score":	999999,
			"second_score":	286
		}, {
			"file":	"trees.c",
			"line":	500,
			"primary_score":	999999,
			"second_score":	285
		}, {
			"file":	"trees.c",
			"line":	501,
			"primary_score":	999999,
			"second_score":	284
		}, {
			"file":	"trees.c",
			"line":	502,
			"primary_score":	999999,
			"second_score":	283
		}, {
			"file":	"trees.c",
			"line":	503,
			"primary_score":	999999,
			"second_score":	282
		}, {
			"file":	"trees.c",
			"line":	504,
			"primary_score":	999999,
			"second_score":	281
		}, {
			"file":	"trees.c",
			"line":	505,
			"primary_score":	999999,
			"second_score":	280
		}, {
			"file":	"trees.c",
			"line":	506,
			"primary_score":	999999,
			"second_score":	279
		}, {
			"file":	"trees.c",
			"line":	508,
			"primary_score":	999999,
			"second_score":	278
		}, {
			"file":	"trees.c",
			"line":	513,
			"primary_score":	999999,
			"second_score":	277
		}, {
			"file":	"trees.c",
			"line":	515,
			"primary_score":	999999,
			"second_score":	276
		}, {
			"file":	"trees.c",
			"line":	516,
			"primary_score":	999999,
			"second_score":	263
		}, {
			"file":	"trees.c",
			"line":	517,
			"primary_score":	999999,
			"second_score":	262
		}, {
			"file":	"trees.c",
			"line":	518,
			"primary_score":	999999,
			"second_score":	261
		}, {
			"file":	"trees.c",
			"line":	519,
			"primary_score":	999999,
			"second_score":	260
		}, {
			"file":	"trees.c",
			"line":	522,
			"primary_score":	999999,
			"second_score":	259
		}, {
			"file":	"trees.c",
			"line":	524,
			"primary_score":	999999,
			"second_score":	258
		}, {
			"file":	"trees.c",
			"line":	525,
			"primary_score":	999999,
			"second_score":	257
		}, {
			"file":	"trees.c",
			"line":	526,
			"primary_score":	999999,
			"second_score":	256
		}, {
			"file":	"trees.c",
			"line":	527,
			"primary_score":	999999,
			"second_score":	254
		}, {
			"file":	"trees.c",
			"line":	528,
			"primary_score":	999999,
			"second_score":	253
		}, {
			"file":	"trees.c",
			"line":	529,
			"primary_score":	999999,
			"second_score":	1522
		}, {
			"file":	"trees.c",
			"line":	531,
			"primary_score":	999999,
			"second_score":	251
		}, {
			"file":	"trees.c",
			"line":	581,
			"primary_score":	999999,
			"second_score":	248
		}, {
			"file":	"trees.c",
			"line":	582,
			"primary_score":	999999,
			"second_score":	247
		}, {
			"file":	"trees.c",
			"line":	583,
			"primary_score":	999999,
			"second_score":	246
		}, {
			"file":	"trees.c",
			"line":	584,
			"primary_score":	999999,
			"second_score":	245
		}, {
			"file":	"trees.c",
			"line":	589,
			"primary_score":	999999,
			"second_score":	244
		}, {
			"file":	"trees.c",
			"line":	590,
			"primary_score":	999999,
			"second_score":	229
		}, {
			"file":	"trees.c",
			"line":	596,
			"primary_score":	999999,
			"second_score":	228
		}, {
			"file":	"trees.c",
			"line":	597,
			"primary_score":	999999,
			"second_score":	227
		}, {
			"file":	"trees.c",
			"line":	599,
			"primary_score":	999999,
			"second_score":	226
		}, {
			"file":	"trees.c",
			"line":	600,
			"primary_score":	999999,
			"second_score":	165
		}, {
			"file":	"trees.c",
			"line":	601,
			"primary_score":	999999,
			"second_score":	166
		}, {
			"file":	"trees.c",
			"line":	603,
			"primary_score":	999999,
			"second_score":	163
		}, {
			"file":	"trees.c",
			"line":	606,
			"primary_score":	999999,
			"second_score":	157
		}, {
			"file":	"trees.c",
			"line":	621,
			"primary_score":	999999,
			"second_score":	374
		}, {
			"file":	"trees.c",
			"line":	622,
			"primary_score":	999999,
			"second_score":	373
		}, {
			"file":	"trees.c",
			"line":	623,
			"primary_score":	999999,
			"second_score":	372
		}, {
			"file":	"trees.c",
			"line":	624,
			"primary_score":	999999,
			"second_score":	371
		}, {
			"file":	"trees.c",
			"line":	625,
			"primary_score":	999999,
			"second_score":	370
		}, {
			"file":	"trees.c",
			"line":	626,
			"primary_score":	999999,
			"second_score":	369
		}, {
			"file":	"trees.c",
			"line":	632,
			"primary_score":	999999,
			"second_score":	368
		}, {
			"file":	"trees.c",
			"line":	634,
			"primary_score":	999999,
			"second_score":	367
		}, {
			"file":	"trees.c",
			"line":	635,
			"primary_score":	999999,
			"second_score":	329
		}, {
			"file":	"trees.c",
			"line":	636,
			"primary_score":	999999,
			"second_score":	328
		}, {
			"file":	"trees.c",
			"line":	637,
			"primary_score":	999999,
			"second_score":	327
		}, {
			"file":	"trees.c",
			"line":	639,
			"primary_score":	999999,
			"second_score":	330
		}, {
			"file":	"trees.c",
			"line":	648,
			"primary_score":	999999,
			"second_score":	326
		}, {
			"file":	"trees.c",
			"line":	649,
			"primary_score":	999999,
			"second_score":	1601
		}, {
			"file":	"trees.c",
			"line":	650,
			"primary_score":	999999,
			"second_score":	1600
		}, {
			"file":	"trees.c",
			"line":	651,
			"primary_score":	999999,
			"second_score":	1599
		}, {
			"file":	"trees.c",
			"line":	652,
			"primary_score":	999999,
			"second_score":	1598
		}, {
			"file":	"trees.c",
			"line":	655,
			"primary_score":	999999,
			"second_score":	325
		}, {
			"file":	"trees.c",
			"line":	660,
			"primary_score":	999999,
			"second_score":	324
		}, {
			"file":	"trees.c",
			"line":	665,
			"primary_score":	999999,
			"second_score":	314
		}, {
			"file":	"trees.c",
			"line":	666,
			"primary_score":	999999,
			"second_score":	313
		}, {
			"file":	"trees.c",
			"line":	667,
			"primary_score":	999999,
			"second_score":	304
		}, {
			"file":	"trees.c",
			"line":	669,
			"primary_score":	999999,
			"second_score":	303
		}, {
			"file":	"trees.c",
			"line":	670,
			"primary_score":	999999,
			"second_score":	302
		}, {
			"file":	"trees.c",
			"line":	673,
			"primary_score":	999999,
			"second_score":	301
		}, {
			"file":	"trees.c",
			"line":	674,
			"primary_score":	999999,
			"second_score":	300
		}, {
			"file":	"trees.c",
			"line":	675,
			"primary_score":	999999,
			"second_score":	299
		}, {
			"file":	"trees.c",
			"line":	683,
			"primary_score":	999999,
			"second_score":	298
		}, {
			"file":	"trees.c",
			"line":	684,
			"primary_score":	999999,
			"second_score":	297
		}, {
			"file":	"trees.c",
			"line":	688,
			"primary_score":	999999,
			"second_score":	292
		}, {
			"file":	"trees.c",
			"line":	693,
			"primary_score":	999999,
			"second_score":	291
		}, {
			"file":	"trees.c",
			"line":	696,
			"primary_score":	999999,
			"second_score":	249
		}, {
			"file":	"trees.c",
			"line":	709,
			"primary_score":	999999,
			"second_score":	399
		}, {
			"file":	"trees.c",
			"line":	710,
			"primary_score":	999999,
			"second_score":	398
		}, {
			"file":	"trees.c",
			"line":	711,
			"primary_score":	999999,
			"second_score":	397
		}, {
			"file":	"trees.c",
			"line":	712,
			"primary_score":	999999,
			"second_score":	396
		}, {
			"file":	"trees.c",
			"line":	713,
			"primary_score":	999999,
			"second_score":	395
		}, {
			"file":	"trees.c",
			"line":	714,
			"primary_score":	999999,
			"second_score":	394
		}, {
			"file":	"trees.c",
			"line":	715,
			"primary_score":	999999,
			"second_score":	393
		}, {
			"file":	"trees.c",
			"line":	717,
			"primary_score":	999999,
			"second_score":	1465
		}, {
			"file":	"trees.c",
			"line":	718,
			"primary_score":	999999,
			"second_score":	391
		}, {
			"file":	"trees.c",
			"line":	720,
			"primary_score":	999999,
			"second_score":	390
		}, {
			"file":	"trees.c",
			"line":	721,
			"primary_score":	999999,
			"second_score":	385
		}, {
			"file":	"trees.c",
			"line":	722,
			"primary_score":	999999,
			"second_score":	383
		}, {
			"file":	"trees.c",
			"line":	723,
			"primary_score":	999999,
			"second_score":	386
		}, {
			"file":	"trees.c",
			"line":	724,
			"primary_score":	999999,
			"second_score":	382
		}, {
			"file":	"trees.c",
			"line":	725,
			"primary_score":	999999,
			"second_score":	381
		}, {
			"file":	"trees.c",
			"line":	726,
			"primary_score":	999999,
			"second_score":	418
		}, {
			"file":	"trees.c",
			"line":	729,
			"primary_score":	999999,
			"second_score":	417
		}, {
			"file":	"trees.c",
			"line":	732,
			"primary_score":	999999,
			"second_score":	416
		}, {
			"file":	"trees.c",
			"line":	734,
			"primary_score":	999999,
			"second_score":	380
		}, {
			"file":	"trees.c",
			"line":	735,
			"primary_score":	999999,
			"second_score":	378
		}, {
			"file":	"trees.c",
			"line":	736,
			"primary_score":	999999,
			"second_score":	499
		}, {
			"file":	"trees.c",
			"line":	737,
			"primary_score":	999999,
			"second_score":	377
		}, {
			"file":	"trees.c",
			"line":	740,
			"primary_score":	999999,
			"second_score":	376
		}, {
			"file":	"trees.c",
			"line":	801,
			"primary_score":	999999,
			"second_score":	1475
		}, {
			"file":	"trees.c",
			"line":	804,
			"primary_score":	999999,
			"second_score":	1474
		}, {
			"file":	"trees.c",
			"line":	805,
			"primary_score":	999999,
			"second_score":	400
		}, {
			"file":	"trees.c",
			"line":	808,
			"primary_score":	999999,
			"second_score":	375
		}, {
			"file":	"trees.c",
			"line":	817,
			"primary_score":	999999,
			"second_score":	156
		}, {
			"file":	"trees.c",
			"line":	818,
			"primary_score":	999999,
			"second_score":	154
		}, {
			"file":	"trees.c",
			"line":	821,
			"primary_score":	999999,
			"second_score":	152
		}, {
			"file":	"trees.c",
			"line":	822,
			"primary_score":	999999,
			"second_score":	151
		}, {
			"file":	"trees.c",
			"line":	824,
			"primary_score":	999999,
			"second_score":	150
		}, {
			"file":	"trees.c",
			"line":	864,
			"primary_score":	999999,
			"second_score":	3147
		}, {
			"file":	"trees.c",
			"line":	865,
			"primary_score":	999999,
			"second_score":	3146
		}, {
			"file":	"trees.c",
			"line":	867,
			"primary_score":	999999,
			"second_score":	3145
		}, {
			"file":	"trees.c",
			"line":	870,
			"primary_score":	999999,
			"second_score":	3144
		}, {
			"file":	"trees.c",
			"line":	873,
			"primary_score":	999999,
			"second_score":	3143
		}, {
			"file":	"trees.c",
			"line":	874,
			"primary_score":	999999,
			"second_score":	1678
		}, {
			"file":	"trees.c",
			"line":	876,
			"primary_score":	999999,
			"second_score":	1677
		}, {
			"file":	"trees.c",
			"line":	877,
			"primary_score":	999999,
			"second_score":	1477
		}, {
			"file":	"trees.c",
			"line":	885,
			"primary_score":	999999,
			"second_score":	1476
		}, {
			"file":	"trees.c",
			"line":	888,
			"primary_score":	999999,
			"second_score":	149
		}, {
			"file":	"trees.c",
			"line":	889,
			"primary_score":	999999,
			"second_score":	148
		}, {
			"file":	"trees.c",
			"line":	890,
			"primary_score":	999999,
			"second_score":	147
		}, {
			"file":	"trees.c",
			"line":	894,
			"primary_score":	999999,
			"second_score":	146
		}, {
			"file":	"trees.c",
			"line":	896,
			"primary_score":	1000000,
			"second_score":	144
		}, {
			"file":	"trees.c",
			"line":	905,
			"primary_score":	999999,
			"second_score":	143
		}, {
			"file":	"trees.c",
			"line":	918,
			"primary_score":	999999,
			"second_score":	142
		}, {
			"file":	"trees.c",
			"line":	936,
			"primary_score":	999999,
			"second_score":	141
		}, {
			"file":	"trees.c",
			"line":	938,
			"primary_score":	1000000,
			"second_score":	140
		}, {
			"file":	"trees.c",
			"line":	939,
			"primary_score":	1000000,
			"second_score":	136
		}, {
			"file":	"trees.c",
			"line":	940,
			"primary_score":	1000000,
			"second_score":	105
		}, {
			"file":	"trees.c",
			"line":	947,
			"primary_score":	999999,
			"second_score":	104
		}, {
			"file":	"trees.c",
			"line":	948,
			"primary_score":	999999,
			"second_score":	103
		}, {
			"file":	"trees.c",
			"line":	950,
			"primary_score":	999999,
			"second_score":	93
		}, {
			"file":	"trees.c",
			"line":	951,
			"primary_score":	999999,
			"second_score":	92
		}, {
			"file":	"trees.c",
			"line":	952,
			"primary_score":	999999,
			"second_score":	91
		}, {
			"file":	"trees.c",
			"line":	953,
			"primary_score":	999999,
			"second_score":	82
		}, {
			"file":	"trees.c",
			"line":	956,
			"primary_score":	999999,
			"second_score":	81
		}, {
			"file":	"trees.c",
			"line":	967,
			"primary_score":	999999,
			"second_score":	3155
		}, {
			"file":	"trees.c",
			"line":	968,
			"primary_score":	999999,
			"second_score":	3154
		}, {
			"file":	"trees.c",
			"line":	970,
			"primary_score":	999999,
			"second_score":	3153
		}, {
			"file":	"trees.c",
			"line":	984,
			"primary_score":	999999,
			"second_score":	3152
		}, {
			"file":	"trees.c",
			"line":	987,
			"primary_score":	999999,
			"second_score":	3151
		}, {
			"file":	"trees.c",
			"line":	992,
			"primary_score":	999999,
			"second_score":	3150
		}, {
			"file":	"trees.c",
			"line":	1006,
			"primary_score":	999999,
			"second_score":	3149
		}, {
			"file":	"trees.c",
			"line":	1020,
			"primary_score":	999999,
			"second_score":	135
		}, {
			"file":	"trees.c",
			"line":	1021,
			"primary_score":	999999,
			"second_score":	134
		}, {
			"file":	"trees.c",
			"line":	1022,
			"primary_score":	999999,
			"second_score":	133
		}, {
			"file":	"trees.c",
			"line":	1023,
			"primary_score":	999999,
			"second_score":	132
		}, {
			"file":	"trees.c",
			"line":	1024,
			"primary_score":	999999,
			"second_score":	131
		}, {
			"file":	"trees.c",
			"line":	1025,
			"primary_score":	999999,
			"second_score":	130
		}, {
			"file":	"trees.c",
			"line":	1026,
			"primary_score":	999999,
			"second_score":	129
		}, {
			"file":	"trees.c",
			"line":	1027,
			"primary_score":	999999,
			"second_score":	128
		}, {
			"file":	"trees.c",
			"line":	1029,
			"primary_score":	999999,
			"second_score":	127
		}, {
			"file":	"trees.c",
			"line":	1030,
			"primary_score":	999999,
			"second_score":	125
		}, {
			"file":	"trees.c",
			"line":	1031,
			"primary_score":	999999,
			"second_score":	123
		}, {
			"file":	"trees.c",
			"line":	1032,
			"primary_score":	999999,
			"second_score":	122
		}, {
			"file":	"trees.c",
			"line":	1033,
			"primary_score":	999999,
			"second_score":	121
		}, {
			"file":	"trees.c",
			"line":	1034,
			"primary_score":	999999,
			"second_score":	117
		}, {
			"file":	"trees.c",
			"line":	1056,
			"primary_score":	999999,
			"second_score":	116
		}, {
			"file":	"trees.c",
			"line":	1059,
			"primary_score":	999999,
			"second_score":	115
		}, {
			"file":	"unzip.c",
			"line":	115,
			"primary_score":	999998,
			"second_score":	8100
		}, {
			"file":	"unzip.c",
			"line":	116,
			"primary_score":	999998,
			"second_score":	8099
		}, {
			"file":	"unzip.c",
			"line":	117,
			"primary_score":	999998,
			"second_score":	8098
		}, {
			"file":	"unzip.c",
			"line":	118,
			"primary_score":	999998,
			"second_score":	8097
		}, {
			"file":	"unzip.c",
			"line":	119,
			"primary_score":	999998,
			"second_score":	8096
		}, {
			"file":	"unzip.c",
			"line":	121,
			"primary_score":	999998,
			"second_score":	8095
		}, {
			"file":	"unzip.c",
			"line":	122,
			"primary_score":	999998,
			"second_score":	8094
		}, {
			"file":	"unzip.c",
			"line":	124,
			"primary_score":	999998,
			"second_score":	8093
		}, {
			"file":	"unzip.c",
			"line":	126,
			"primary_score":	999998,
			"second_score":	8086
		}, {
			"file":	"unzip.c",
			"line":	132,
			"primary_score":	999998,
			"second_score":	8085
		}, {
			"file":	"unzip.c",
			"line":	134,
			"primary_score":	999998,
			"second_score":	8084
		}, {
			"file":	"unzip.c",
			"line":	136,
			"primary_score":	999998,
			"second_score":	136
		}, {
			"file":	"unzip.c",
			"line":	138,
			"primary_score":	999998,
			"second_score":	135
		}, {
			"file":	"unzip.c",
			"line":	161,
			"primary_score":	999999,
			"second_score":	134
		}, {
			"file":	"unzip.c",
			"line":	165,
			"primary_score":	999999,
			"second_score":	133
		}, {
			"file":	"unzip.c",
			"line":	166,
			"primary_score":	999999,
			"second_score":	125
		}, {
			"file":	"unzip.c",
			"line":	168,
			"primary_score":	999999,
			"second_score":	124
		}, {
			"file":	"unzip.c",
			"line":	169,
			"primary_score":	999999,
			"second_score":	123
		}, {
			"file":	"unzip.c",
			"line":	185,
			"primary_score":	999999,
			"second_score":	122
		}, {
			"file":	"unzip.c",
			"line":	190,
			"primary_score":	999999,
			"second_score":	114
		}, {
			"file":	"unzip.c",
			"line":	197,
			"primary_score":	999999,
			"second_score":	113
		}, {
			"file":	"unzip.c",
			"line":	210,
			"primary_score":	999999,
			"second_score":	112
		}, {
			"file":	"unzip.c",
			"line":	211,
			"primary_score":	999999,
			"second_score":	111
		}, {
			"file":	"util.c",
			"line":	84,
			"primary_score":	999998,
			"second_score":	3217
		}, {
			"file":	"util.c",
			"line":	86,
			"primary_score":	999998,
			"second_score":	3216
		}, {
			"file":	"util.c",
			"line":	88,
			"primary_score":	999998,
			"second_score":	3215
		}, {
			"file":	"util.c",
			"line":	89,
			"primary_score":	999998,
			"second_score":	11441
		}, {
			"file":	"util.c",
			"line":	91,
			"primary_score":	999999,
			"second_score":	3214
		}, {
			"file":	"util.c",
			"line":	92,
			"primary_score":	999999,
			"second_score":	3213
		}, {
			"file":	"util.c",
			"line":	93,
			"primary_score":	999999,
			"second_score":	3211
		}, {
			"file":	"util.c",
			"line":	96,
			"primary_score":	999998,
			"second_score":	3210
		}, {
			"file":	"util.c",
			"line":	97,
			"primary_score":	999998,
			"second_score":	3209
		}, {
			"file":	"util.c",
			"line":	105,
			"primary_score":	999998,
			"second_score":	11492
		}, {
			"file":	"util.c",
			"line":	106,
			"primary_score":	999998,
			"second_score":	11491
		}, {
			"file":	"util.c",
			"line":	107,
			"primary_score":	999998,
			"second_score":	11490
		}, {
			"file":	"util.c",
			"line":	116,
			"primary_score":	999998,
			"second_score":	61
		}, {
			"file":	"util.c",
			"line":	119,
			"primary_score":	999998,
			"second_score":	60
		}, {
			"file":	"util.c",
			"line":	120,
			"primary_score":	999998,
			"second_score":	59
		}, {
			"file":	"util.c",
			"line":	121,
			"primary_score":	999998,
			"second_score":	58
		}, {
			"file":	"util.c",
			"line":	122,
			"primary_score":	999998,
			"second_score":	8143
		}, {
			"file":	"util.c",
			"line":	123,
			"primary_score":	999998,
			"second_score":	54
		}, {
			"file":	"util.c",
			"line":	124,
			"primary_score":	1000000,
			"second_score":	53
		}, {
			"file":	"util.c",
			"line":	127,
			"primary_score":	999998,
			"second_score":	8148
		}, {
			"file":	"util.c",
			"line":	130,
			"primary_score":	999998,
			"second_score":	8142
		}, {
			"file":	"util.c",
			"line":	136,
			"primary_score":	999998,
			"second_score":	8141
		}, {
			"file":	"util.c",
			"line":	137,
			"primary_score":	999998,
			"second_score":	8140
		}, {
			"file":	"util.c",
			"line":	138,
			"primary_score":	999998,
			"second_score":	8139
		}, {
			"file":	"util.c",
			"line":	150,
			"primary_score":	999998,
			"second_score":	3194
		}, {
			"file":	"util.c",
			"line":	153,
			"primary_score":	999998,
			"second_score":	3193
		}, {
			"file":	"util.c",
			"line":	164,
			"primary_score":	999999,
			"second_score":	142
		}, {
			"file":	"util.c",
			"line":	167,
			"primary_score":	999999,
			"second_score":	141
		}, {
			"file":	"util.c",
			"line":	176,
			"primary_score":	999999,
			"second_score":	54
		}, {
			"file":	"util.c",
			"line":	178,
			"primary_score":	999999,
			"second_score":	53
		}, {
			"file":	"util.c",
			"line":	179,
			"primary_score":	999999,
			"second_score":	48
		}, {
			"file":	"util.c",
			"line":	180,
			"primary_score":	999999,
			"second_score":	47
		}, {
			"file":	"util.c",
			"line":	189,
			"primary_score":	999999,
			"second_score":	157
		}, {
			"file":	"util.c",
			"line":	190,
			"primary_score":	999999,
			"second_score":	156
		}, {
			"file":	"util.c",
			"line":	192,
			"primary_score":	999999,
			"second_score":	146
		}, {
			"file":	"util.c",
			"line":	193,
			"primary_score":	999999,
			"second_score":	145
		}, {
			"file":	"util.c",
			"line":	195,
			"primary_score":	999999,
			"second_score":	140
		}, {
			"file":	"util.c",
			"line":	196,
			"primary_score":	999999,
			"second_score":	139
		}, {
			"file":	"util.c",
			"line":	208,
			"primary_score":	999999,
			"second_score":	144
		}, {
			"file":	"util.c",
			"line":	210,
			"primary_score":	999999,
			"second_score":	143
		}, {
			"file":	"util.c",
			"line":	240,
			"primary_score":	999998,
			"second_score":	11578
		}, {
			"file":	"util.c",
			"line":	242,
			"primary_score":	999998,
			"second_score":	11577
		}, {
			"file":	"util.c",
			"line":	252,
			"primary_score":	999998,
			"second_score":	11576
		}, {
			"file":	"util.c",
			"line":	253,
			"primary_score":	999998,
			"second_score":	11575
		}, {
			"file":	"util.c",
			"line":	365,
			"primary_score":	999998,
			"second_score":	11570
		}, {
			"file":	"util.c",
			"line":	366,
			"primary_score":	999998,
			"second_score":	11569
		}, {
			"file":	"util.c",
			"line":	367,
			"primary_score":	999998,
			"second_score":	11568
		}, {
			"file":	"util.c",
			"line":	368,
			"primary_score":	999998,
			"second_score":	11567
		}, {
			"file":	"util.c",
			"line":	369,
			"primary_score":	999998,
			"second_score":	11566
		}, {
			"file":	"util.c",
			"line":	371,
			"primary_score":	999998,
			"second_score":	11565
		}, {
			"file":	"util.c",
			"line":	372,
			"primary_score":	999998,
			"second_score":	11564
		}, {
			"file":	"util.c",
			"line":	439,
			"primary_score":	1000000,
			"second_score":	52
		}, {
			"file":	"util.c",
			"line":	440,
			"primary_score":	1000000,
			"second_score":	51
		}, {
			"file":	"util.c",
			"line":	441,
			"primary_score":	1000000,
			"second_score":	50
		}, {
			"file":	"util.c",
			"line":	442,
			"primary_score":	1000000,
			"second_score":	49
		}, {
			"file":	"util.c",
			"line":	443,
			"primary_score":	1000000,
			"second_score":	48
		}, {
			"file":	"util.c",
			"line":	447,
			"primary_score":	1000000,
			"second_score":	47
		}, {
			"file":	"zip.c",
			"line":	45,
			"primary_score":	999999,
			"second_score":	11483
		}, {
			"file":	"zip.c",
			"line":	46,
			"primary_score":	999999,
			"second_score":	11482
		}, {
			"file":	"zip.c",
			"line":	47,
			"primary_score":	999999,
			"second_score":	11481
		}, {
			"file":	"zip.c",
			"line":	48,
			"primary_score":	999999,
			"second_score":	11480
		}, {
			"file":	"zip.c",
			"line":	50,
			"primary_score":	999999,
			"second_score":	11479
		}, {
			"file":	"zip.c",
			"line":	51,
			"primary_score":	999999,
			"second_score":	11478
		}, {
			"file":	"zip.c",
			"line":	52,
			"primary_score":	999999,
			"second_score":	11477
		}, {
			"file":	"zip.c",
			"line":	56,
			"primary_score":	999999,
			"second_score":	11476
		}, {
			"file":	"zip.c",
			"line":	57,
			"primary_score":	999999,
			"second_score":	11475
		}, {
			"file":	"zip.c",
			"line":	58,
			"primary_score":	999999,
			"second_score":	11471
		}, {
			"file":	"zip.c",
			"line":	59,
			"primary_score":	999999,
			"second_score":	11467
		}, {
			"file":	"zip.c",
			"line":	61,
			"primary_score":	999999,
			"second_score":	11463
		}, {
			"file":	"zip.c",
			"line":	64,
			"primary_score":	999999,
			"second_score":	11462
		}, {
			"file":	"zip.c",
			"line":	65,
			"primary_score":	999999,
			"second_score":	11458
		}, {
			"file":	"zip.c",
			"line":	68,
			"primary_score":	999999,
			"second_score":	11457
		}, {
			"file":	"zip.c",
			"line":	71,
			"primary_score":	999999,
			"second_score":	11445
		}, {
			"file":	"zip.c",
			"line":	73,
			"primary_score":	999999,
			"second_score":	11438
		}, {
			"file":	"zip.c",
			"line":	74,
			"primary_score":	999999,
			"second_score":	11432
		}, {
			"file":	"zip.c",
			"line":	75,
			"primary_score":	999999,
			"second_score":	3239
		}, {
			"file":	"zip.c",
			"line":	77,
			"primary_score":	999999,
			"second_score":	3186
		}, {
			"file":	"zip.c",
			"line":	78,
			"primary_score":	999999,
			"second_score":	3182
		}, {
			"file":	"zip.c",
			"line":	80,
			"primary_score":	999999,
			"second_score":	3178
		}, {
			"file":	"zip.c",
			"line":	86,
			"primary_score":	999999,
			"second_score":	3177
		}, {
			"file":	"zip.c",
			"line":	88,
			"primary_score":	999999,
			"second_score":	3176
		}, {
			"file":	"zip.c",
			"line":	101,
			"primary_score":	999999,
			"second_score":	80
		}, {
			"file":	"zip.c",
			"line":	102,
			"primary_score":	999999,
			"second_score":	68
		}, {
			"file":	"zip.c",
			"line":	103,
			"primary_score":	999999,
			"second_score":	56
		}, {
			"file":	"zip.c",
			"line":	105,
			"primary_score":	999999,
			"second_score":	55
		}, {
			"file":	"zip.c",
			"line":	106,
			"primary_score":	999999,
			"second_score":	46
		}, {
			"file":	"zip.c",
			"line":	119,
			"primary_score":	999999,
			"second_score":	3197
		}, {
			"file":	"zip.c",
			"line":	121,
			"primary_score":	999999,
			"second_score":	3196
		}, {
			"file":	"zip.c",
			"line":	123,
			"primary_score":	999999,
			"second_score":	3195
		}, {
			"file":	"zip.c",
			"line":	124,
			"primary_score":	999999,
			"second_score":	3192
		}, {
			"file":	"zip.c",
			"line":	125,
			"primary_score":	999999,
			"second_score":	3219
		}, {
			"file":	"zip.c",
			"line":	130,
			"primary_score":	999999,
			"second_score":	3218
		}, {
			"file":	"zip.c",
			"line":	131,
			"primary_score":	999999,
			"second_score":	3208
		}, {
			"file":	"zip.c",
			"line":	132,
			"primary_score":	999999,
			"second_score":	3207
		}],
	"mutation_info":	[{
			"file":	"gzip.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"gzip.c",
			"lines":	[{
					"line":	577,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [325, 326, 327, 328, 329, 330], [], [], [], [], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [], [], []],
							"begin_line":	578,
							"begin_column":	3,
							"end_line":	578,
							"end_column":	3,
							"patch_codes":	["(argv)++", "args = (argv)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "env = add_envopt(&argc, &(argv), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "program_name = gzip_base_name((argv)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(z_suffix), sizeof (z_suffix), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return -1;\n", "if (__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(z_suffix), sizeof (z_suffix), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 0;\n", "if (__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(z_suffix), sizeof (z_suffix), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 13;\n", "if (__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(z_suffix), sizeof (z_suffix), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 1;\n", "if (__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(z_suffix), sizeof (z_suffix), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 30;\n", "if (__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(z_suffix), sizeof (z_suffix), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	2,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	3,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	4,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	5,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	6,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	7,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	8,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	9,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	10,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	11,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	12,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	13,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	14,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	15,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	16,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	17,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	18,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	19,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	20,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	21,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	22,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	23,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	24,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	25,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	26,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	27,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	28,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	29,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	30,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	31,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	32,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	33,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	34,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	35,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	36,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	37,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	38,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	39,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	40,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	41,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	42,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	43,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	44,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	45,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	46,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	47,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	48,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	49,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	50,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	51,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	52,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	53,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	54,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	55,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	56,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	57,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	58,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	59,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	60,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	61,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	62,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	63,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	64,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	65,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	66,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	67,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	68,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	69,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	70,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	71,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	72,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	73,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	74,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	75,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	76,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	77,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	78,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	79,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	80,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	81,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	82,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	83,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	84,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	85,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	86,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	87,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	88,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	89,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	90,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	91,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	92,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	93,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	94,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	95,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	96,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	97,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	98,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	99,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	100,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	101,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	102,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	103,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	104,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	105,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	106,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	107,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	108,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	109,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	110,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	111,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	112,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	113,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	114,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	115,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	116,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	117,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	118,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	119,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	120,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	121,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	122,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	123,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	124,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	125,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	126,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	127,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	128,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	129,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	130,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	131,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	132,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	133,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	134,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	135,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	136,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	137,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	138,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	139,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	140,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	141,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	142,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	143,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	144,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	145,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	146,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	147,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	148,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	149,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	150,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	151,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	152,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	153,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	154,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	155,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	156,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	157,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	158,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	159,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	160,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	161,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	162,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	163,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	164,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	165,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	166,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	167,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	168,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	169,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	170,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	171,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	172,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	173,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	174,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	175,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	176,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	177,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	178,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	179,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	180,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	181,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	182,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	183,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	184,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	185,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	186,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	187,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	188,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	189,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	190,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	191,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	192,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	193,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	194,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	195,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	196,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	197,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	198,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	199,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	200,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	201,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	202,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	203,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	204,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	205,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	206,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	207,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	208,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	209,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	210,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	211,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	212,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	213,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	214,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	215,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	216,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	217,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	218,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	219,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	220,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	221,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	222,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	223,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	224,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	225,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	226,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	227,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	228,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	229,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	230,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	231,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	232,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	233,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	234,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	235,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	236,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	237,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	238,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	239,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	240,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	241,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	242,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	243,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	244,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	245,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	246,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	247,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	248,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	249,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	250,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	251,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	252,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	253,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	254,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	255,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	256,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	257,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	258,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	259,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	260,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	261,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	262,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	263,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	264,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	265,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	266,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	267,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	268,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	269,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	270,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	271,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	272,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	273,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	274,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	275,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	276,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	277,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	278,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	279,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	280,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	281,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	282,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	283,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	284,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	285,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	286,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	287,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	288,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	289,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	290,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	291,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	292,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	293,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	294,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	295,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	296,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	297,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	298,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	299,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	300,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	301,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	302,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	303,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	304,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	305,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	306,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	307,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	308,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	309,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	310,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	311,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	312,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	313,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	314,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	315,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	316,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	317,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	318,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	319,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	320,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	321,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	322,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	323,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	324,
									"scores":	[-5.1241854444793145]
								}, {
									"case":	325,
									"scores":	[-9.1388737436793139, -9.4194230475793148, -9.8023240475793134, -9.4194230475793148, -10.124500089579314, -10.124500089579314, -10.131301784479316, -9.4594967844793132, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -7.527439047579314, -9.8023240475793134, -9.8023240475793134, -9.8917467475793135, -9.8917467475793135, -9.8917467475793135, -9.3462130475793135, -9.8023240475793134, -9.8023240475793134, -9.309369444479314, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8023240475793134, -9.8917467475793135, -9.8917467475793135, -8.8532584444793141]
								}, {
									"case":	326,
									"scores":	[-9.2387819436793137, -9.5193312475793128, -9.9022322475793132, -9.5193312475793128, -10.224408289579314, -10.224408289579314, -10.231209984479314, -9.5594049844793147, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -7.6273472475793138, -9.9022322475793132, -9.9022322475793132, -9.9916549475793133, -9.9916549475793133, -9.9916549475793133, -9.4461212475793133, -9.9022322475793132, -9.9022322475793132, -9.4092776444793138, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9022322475793132, -9.9916549475793133, -9.9916549475793133, -8.9531666444793139]
								}, {
									"case":	327,
									"scores":	[-11.501563743679315, -11.782113047579314, -12.165014047579314, -11.782113047579314, -12.487190089579315, -12.487190089579315, -12.493991784479315, -11.822186784479314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -9.8901290475793147, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -12.254436747579314, -11.708903047579314, -12.165014047579314, -12.165014047579314, -11.672059444479315, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -11.215948444479315]
								}, {
									"case":	328,
									"scores":	[-11.501563743679315, -11.782113047579314, -12.165014047579314, -11.782113047579314, -12.487190089579315, -12.487190089579315, -12.493991784479315, -11.822186784479314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -9.8901290475793147, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -12.254436747579314, -11.708903047579314, -12.165014047579314, -12.165014047579314, -11.672059444479315, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -11.215948444479315]
								}, {
									"case":	329,
									"scores":	[-11.501563743679315, -11.782113047579314, -12.165014047579314, -11.782113047579314, -12.487190089579315, -12.487190089579315, -12.493991784479315, -11.822186784479314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -9.8901290475793147, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -12.254436747579314, -11.708903047579314, -12.165014047579314, -12.165014047579314, -11.672059444479315, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -11.215948444479315]
								}, {
									"case":	330,
									"scores":	[-11.501563743679315, -11.782113047579314, -12.165014047579314, -11.782113047579314, -12.487190089579315, -12.487190089579315, -12.493991784479315, -11.822186784479314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -9.8901290475793147, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -12.254436747579314, -11.708903047579314, -12.165014047579314, -12.165014047579314, -11.672059444479315, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.165014047579314, -12.254436747579314, -12.254436747579314, -11.215948444479315]
								}]
						}, {
							"switch":	1,
							"types":	[[7], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4, 5, 6]],
							"begin_line":	578,
							"begin_column":	5,
							"end_line":	580,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    do_list(-1, -1);\n}\n", "if (((list && !quiet) || __is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) && file_count > 1) {\n    do_list(-1, -1);\n}\n", "if ((list && !quiet && file_count > 1) || __is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    do_list(-1, -1);\n}\n", "if (!quiet && file_count > 1) {\n    do_list(-1, -1);\n}\n", "if (list && !quiet) {\n    do_list(-1, -1);\n}\n", "if (list && file_count > 1) {\n    do_list(-1, -1);\n}\n", "if ((list && !quiet && file_count > 1) && !__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    do_list(-1, -1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.1245421014281458, -4.5804872254281461, -4.7959169254281457, -4.5804872254281461, -3.961743567428146, -3.961743567428146, -5.4350942754281455, -4.0173978434281459, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.0825580724281458, -4.7959169254281457, -4.7959169254281457, -5.2328819254281456, -5.2328819254281456, -5.2328819254281456, -4.5519900554281456, -4.7959169254281457, -4.7959169254281457, -4.314561625428146, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -4.7959169254281457, -5.2328819254281456, -5.2328819254281456, -4.0706347554281459]
								}, {
									"case":	2,
									"scores":	[-3.1838234944281463, -4.6397686184281461, -4.8551983184281458, -4.6397686184281461, -4.0210249604281465, -4.0210249604281465, -5.4943756684281464, -4.0766792364281459, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.1418394654281459, -4.8551983184281458, -4.8551983184281458, -5.2921633184281465, -5.2921633184281465, -5.2921633184281465, -4.6112714484281465, -4.8551983184281458, -4.8551983184281458, -4.373843018428146, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -5.2921633184281465, -5.2921633184281465, -4.1299161484281459]
								}, {
									"case":	3,
									"scores":	[-3.1838234944281463, -4.6397686184281461, -4.8551983184281458, -4.6397686184281461, -4.0210249604281465, -4.0210249604281465, -5.4943756684281464, -4.0766792364281459, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.1418394654281459, -4.8551983184281458, -4.8551983184281458, -5.2921633184281465, -5.2921633184281465, -5.2921633184281465, -4.6112714484281465, -4.8551983184281458, -4.8551983184281458, -4.373843018428146, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -5.2921633184281465, -5.2921633184281465, -4.1299161484281459]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.1838234944281463, -4.6397686184281461, -4.8551983184281458, -4.6397686184281461, -4.0210249604281465, -4.0210249604281465, -5.4943756684281464, -4.0766792364281459, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.1418394654281459, -4.8551983184281458, -4.8551983184281458, -5.2921633184281465, -5.2921633184281465, -5.2921633184281465, -4.6112714484281465, -4.8551983184281458, -4.8551983184281458, -4.373843018428146, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -4.8551983184281458, -5.2921633184281465, -5.2921633184281465, -4.1299161484281459]
								}]
						}, {
							"switch":	2,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	578,
							"begin_column":	5,
							"end_line":	580,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    if (list && !quiet && file_count > 1) {\n        do_list(-1, -1);\n    }\n", "if (!__is_neg(\"\", \"L578\", 35, &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)) && (list && !quiet && file_count > 1)) {\n    do_list(-1, -1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8744652204793146, -6.3304103444793141, -6.5458400444793146, -6.3304103444793141, -5.7116666864793144, -5.7116666864793144, -7.1850173944793143, -5.7673209624793147, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -5.8324811914793138, -6.5458400444793146, -6.5458400444793146, -6.9828050444793144, -6.9828050444793144, -6.9828050444793144, -6.3019131744793144, -6.5458400444793146, -6.5458400444793146, -6.064484744479314, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.5458400444793146, -6.9828050444793144, -6.9828050444793144, -5.8205578744793147]
								}, {
									"case":	2,
									"scores":	[-4.6142054334793148, -6.0701505574793142, -6.2855802574793138, -6.0701505574793142, -5.4514068994793146, -5.4514068994793146, -6.9247576074793145, -5.5070611754793148, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -5.5722214044793148, -6.2855802574793138, -6.2855802574793138, -6.7225452574793145, -6.7225452574793145, -6.7225452574793145, -6.0416533874793146, -6.2855802574793138, -6.2855802574793138, -5.8042249574793141, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.2855802574793138, -6.7225452574793145, -6.7225452574793145, -5.560298087479314]
								}]
						}]
				}, {
					"line":	580,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [325, 326, 327, 328, 329, 330], [], [], [], [], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [], [], []],
							"begin_line":	581,
							"begin_column":	3,
							"end_line":	581,
							"end_column":	3,
							"patch_codes":	["(argv)++", "args = (argv)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "env = add_envopt(&argc, &(argv), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "program_name = gzip_base_name((argv)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L581\", 35, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return -1;\n", "if (__is_neg(\"\", \"L581\", 35, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 0;\n", "if (__is_neg(\"\", \"L581\", 35, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 13;\n", "if (__is_neg(\"\", \"L581\", 35, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 1;\n", "if (__is_neg(\"\", \"L581\", 35, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 30;\n", "if (__is_neg(\"\", \"L581\", 35, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	2,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	3,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	4,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	5,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	6,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	7,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	8,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	9,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	10,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	11,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	12,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	13,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	14,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	15,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	16,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	17,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	18,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	19,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	20,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	21,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	22,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	23,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	24,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	25,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	26,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	27,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	28,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	29,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	30,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	31,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	32,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	33,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	34,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	35,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	36,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	37,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	38,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	39,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	40,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	41,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	42,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	43,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	44,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	45,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	46,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	47,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	48,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	49,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	50,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	51,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	52,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	53,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	54,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	55,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	56,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	57,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	58,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	59,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	60,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	61,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	62,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	63,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	64,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	65,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	66,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	67,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	68,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	69,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	70,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	71,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	72,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	73,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	74,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	75,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	76,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	77,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	78,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	79,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	80,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	81,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	82,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	83,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	84,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	85,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	86,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	87,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	88,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	89,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	90,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	91,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	92,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	93,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	94,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	95,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	96,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	97,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	98,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	99,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	100,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	101,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	102,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	103,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	104,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	105,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	106,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	107,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	108,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	109,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	110,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	111,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	112,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	113,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	114,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	115,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	116,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	117,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	118,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	119,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	120,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	121,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	122,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	123,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	124,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	125,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	126,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	127,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	128,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	129,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	130,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	131,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	132,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	133,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	134,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	135,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	136,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	137,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	138,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	139,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	140,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	141,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	142,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	143,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	144,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	145,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	146,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	147,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	148,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	149,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	150,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	151,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	152,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	153,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	154,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	155,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	156,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	157,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	158,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	159,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	160,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	161,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	162,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	163,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	164,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	165,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	166,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	167,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	168,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	169,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	170,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	171,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	172,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	173,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	174,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	175,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	176,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	177,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	178,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	179,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	180,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	181,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	182,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	183,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	184,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	185,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	186,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	187,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	188,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	189,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	190,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	191,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	192,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	193,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	194,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	195,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	196,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	197,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	198,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	199,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	200,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	201,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	202,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	203,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	204,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	205,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	206,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	207,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	208,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	209,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	210,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	211,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	212,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	213,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	214,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	215,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	216,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	217,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	218,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	219,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	220,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	221,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	222,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	223,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	224,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	225,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	226,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	227,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	228,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	229,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	230,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	231,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	232,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	233,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	234,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	235,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	236,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	237,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	238,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	239,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	240,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	241,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	242,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	243,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	244,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	245,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	246,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	247,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	248,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	249,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	250,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	251,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	252,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	253,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	254,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	255,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	256,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	257,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	258,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	259,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	260,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	261,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	262,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	263,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	264,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	265,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	266,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	267,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	268,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	269,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	270,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	271,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	272,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	273,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	274,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	275,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	276,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	277,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	278,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	279,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	280,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	281,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	282,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	283,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	284,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	285,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	286,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	287,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	288,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	289,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	290,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	291,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	292,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	293,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	294,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	295,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	296,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	297,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	298,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	299,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	300,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	301,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	302,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	303,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	304,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	305,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	306,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	307,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	308,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	309,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	310,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	311,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	312,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	313,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	314,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	315,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	316,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	317,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	318,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	319,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	320,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	321,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	322,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	323,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	324,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	325,
									"scores":	[-7.5632379949442754, -7.5632379949442754, -7.5126360090442752, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.7176874898442751, -8.0458824898442742, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.4781324529442763, -8.4781324529442763, -8.4781324529442763, -7.9325987529442754, -8.3887097529442762, -8.3887097529442762, -7.8957551498442751, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.3887097529442762, -8.4781324529442763, -8.4781324529442763, -7.4396441498442751]
								}, {
									"case":	326,
									"scores":	[-7.6631461949442752, -7.6631461949442752, -7.612544209044275, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.8175956898442749, -8.1457906898442758, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.5780406529442743, -8.5780406529442743, -8.5780406529442743, -8.0325069529442743, -8.4886179529442742, -8.4886179529442742, -7.9956633498442748, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.4886179529442742, -8.5780406529442743, -8.5780406529442743, -7.5395523498442749]
								}, {
									"case":	327,
									"scores":	[-9.925927994944276, -9.925927994944276, -9.8753260090442758, -10.751399752944275, -10.751399752944275, -10.751399752944275, -11.080377489844276, -10.408572489844275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -10.840822452944275, -10.295288752944275, -10.751399752944275, -10.751399752944275, -10.258445149844276, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -9.8023341498442758]
								}, {
									"case":	328,
									"scores":	[-9.925927994944276, -9.925927994944276, -9.8753260090442758, -10.751399752944275, -10.751399752944275, -10.751399752944275, -11.080377489844276, -10.408572489844275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -10.840822452944275, -10.295288752944275, -10.751399752944275, -10.751399752944275, -10.258445149844276, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -9.8023341498442758]
								}, {
									"case":	329,
									"scores":	[-9.925927994944276, -9.925927994944276, -9.8753260090442758, -10.751399752944275, -10.751399752944275, -10.751399752944275, -11.080377489844276, -10.408572489844275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -10.840822452944275, -10.295288752944275, -10.751399752944275, -10.751399752944275, -10.258445149844276, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -9.8023341498442758]
								}, {
									"case":	330,
									"scores":	[-9.925927994944276, -9.925927994944276, -9.8753260090442758, -10.751399752944275, -10.751399752944275, -10.751399752944275, -11.080377489844276, -10.408572489844275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -10.840822452944275, -10.295288752944275, -10.751399752944275, -10.751399752944275, -10.258445149844276, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.751399752944275, -10.840822452944275, -10.840822452944275, -9.8023341498442758]
								}]
						}, {
							"switch":	4,
							"types":	[[], [], [1], [], [], [], [856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916], [], [794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792], [], [], [793]],
							"begin_line":	581,
							"begin_column":	5,
							"end_line":	581,
							"end_column":	22,
							"patch_codes":	["if (!__is_neg(\"\", \"L581\", 35, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(file_count), sizeof (file_count), &(quiet), sizeof (quiet), &(list), sizeof (list), &(quiet), sizeof (quiet), &(argv), sizeof (argv), &(argc), sizeof (argc), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(ascii), sizeof (ascii), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(exiting_signal), sizeof (exiting_signal), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    do_exit(exit_code);\n", "_IO_putc(exit_code, 0)", "__sysv_signal(exit_code, 0)", "__sysv_signal(exit_code, abort_gzip_signal)", "__sysv_signal(exit_code, bi_init)", "__tolower_l(exit_code, 0)", "__toupper_l(exit_code, 0)", "clock_adjtime(exit_code, 0)", "clock_getcpuclockid(exit_code, 0)", "clock_getres(exit_code, 0)", "clock_gettime(exit_code, 0)", "clock_settime(exit_code, 0)", "copy(exit_code, -1)", "copy(exit_code, 0)", "copy(exit_code, 1)", "copy(exit_code, 13)", "copy(exit_code, 30)", "copy(exit_code, 4)", "copy(exit_code, argc)", "copy(exit_code, ascii)", "copy(exit_code, block_mode)", "copy(exit_code, decompress)", "copy(exit_code, decrypt)", "copy(exit_code, do_lzw)", "copy(exit_code, exit_code)", "copy(exit_code, exiting_signal)", "copy(exit_code, file_count)", "copy(exit_code, force)", "copy(exit_code, foreground)", "copy(exit_code, ifd)", "copy(exit_code, last_member)", "copy(exit_code, level)", "copy(exit_code, list)", "copy(exit_code, maxbits)", "copy(exit_code, method)", "copy(exit_code, no_name)", "copy(exit_code, no_time)", "copy(exit_code, ofd)", "copy(exit_code, optc)", "copy(exit_code, part_nb)", "copy(exit_code, quiet)", "copy(exit_code, recursive)", "copy(exit_code, remove_ofname_fd)", "copy(exit_code, save_orig_name)", "copy(exit_code, test)", "copy(exit_code, to_stdout)", "copy(exit_code, verbose)", "ct_tally(exit_code, -1)", "ct_tally(exit_code, 0)", "ct_tally(exit_code, 1)", "ct_tally(exit_code, 13)", "ct_tally(exit_code, 30)", "ct_tally(exit_code, 4)", "ct_tally(exit_code, argc)", "ct_tally(exit_code, ascii)", "ct_tally(exit_code, block_mode)", "ct_tally(exit_code, decompress)", "ct_tally(exit_code, decrypt)", "ct_tally(exit_code, do_lzw)", "ct_tally(exit_code, exit_code)", "ct_tally(exit_code, exiting_signal)", "ct_tally(exit_code, file_count)", "ct_tally(exit_code, force)", "ct_tally(exit_code, foreground)", "ct_tally(exit_code, ifd)", "ct_tally(exit_code, last_member)", "ct_tally(exit_code, level)", "ct_tally(exit_code, list)", "ct_tally(exit_code, maxbits)", "ct_tally(exit_code, method)", "ct_tally(exit_code, no_name)", "ct_tally(exit_code, no_time)", "ct_tally(exit_code, ofd)", "ct_tally(exit_code, optc)", "ct_tally(exit_code, part_nb)", "ct_tally(exit_code, quiet)", "ct_tally(exit_code, recursive)", "ct_tally(exit_code, remove_ofname_fd)", "ct_tally(exit_code, save_orig_name)", "ct_tally(exit_code, test)", "ct_tally(exit_code, to_stdout)", "ct_tally(exit_code, verbose)", "daemon(exit_code, -1)", "daemon(exit_code, 0)", "daemon(exit_code, 1)", "daemon(exit_code, 13)", "daemon(exit_code, 30)", "daemon(exit_code, 4)", "daemon(exit_code, argc)", "daemon(exit_code, ascii)", "daemon(exit_code, block_mode)", "daemon(exit_code, decompress)", "daemon(exit_code, decrypt)", "daemon(exit_code, do_lzw)", "daemon(exit_code, exit_code)", "daemon(exit_code, exiting_signal)", "daemon(exit_code, file_count)", "daemon(exit_code, force)", "daemon(exit_code, foreground)", "daemon(exit_code, ifd)", "daemon(exit_code, last_member)", "daemon(exit_code, level)", "daemon(exit_code, list)", "daemon(exit_code, maxbits)", "daemon(exit_code, method)", "daemon(exit_code, no_name)", "daemon(exit_code, no_time)", "daemon(exit_code, ofd)", "daemon(exit_code, optc)", "daemon(exit_code, part_nb)", "daemon(exit_code, quiet)", "daemon(exit_code, recursive)", "daemon(exit_code, remove_ofname_fd)", "daemon(exit_code, save_orig_name)", "daemon(exit_code, test)", "daemon(exit_code, to_stdout)", "daemon(exit_code, verbose)", "div(exit_code, -1)", "div(exit_code, 0)", "div(exit_code, 1)", "div(exit_code, 13)", "div(exit_code, 30)", "div(exit_code, 4)", "div(exit_code, argc)", "div(exit_code, ascii)", "div(exit_code, block_mode)", "div(exit_code, decompress)", "div(exit_code, decrypt)", "div(exit_code, do_lzw)", "div(exit_code, exit_code)", "div(exit_code, exiting_signal)", "div(exit_code, file_count)", "div(exit_code, force)", "div(exit_code, foreground)", "div(exit_code, ifd)", "div(exit_code, last_member)", "div(exit_code, level)", "div(exit_code, list)", "div(exit_code, maxbits)", "div(exit_code, method)", "div(exit_code, no_name)", "div(exit_code, no_time)", "div(exit_code, ofd)", "div(exit_code, optc)", "div(exit_code, part_nb)", "div(exit_code, quiet)", "div(exit_code, recursive)", "div(exit_code, remove_ofname_fd)", "div(exit_code, save_orig_name)", "div(exit_code, test)", "div(exit_code, to_stdout)", "div(exit_code, verbose)", "do_list(exit_code, -1)", "do_list(exit_code, 0)", "do_list(exit_code, 1)", "do_list(exit_code, 13)", "do_list(exit_code, 30)", "do_list(exit_code, 4)", "do_list(exit_code, argc)", "do_list(exit_code, ascii)", "do_list(exit_code, block_mode)", "do_list(exit_code, decompress)", "do_list(exit_code, decrypt)", "do_list(exit_code, do_lzw)", "do_list(exit_code, exit_code)", "do_list(exit_code, exiting_signal)", "do_list(exit_code, file_count)", "do_list(exit_code, force)", "do_list(exit_code, foreground)", "do_list(exit_code, ifd)", "do_list(exit_code, last_member)", "do_list(exit_code, level)", "do_list(exit_code, list)", "do_list(exit_code, maxbits)", "do_list(exit_code, method)", "do_list(exit_code, no_name)", "do_list(exit_code, no_time)", "do_list(exit_code, ofd)", "do_list(exit_code, optc)", "do_list(exit_code, part_nb)", "do_list(exit_code, quiet)", "do_list(exit_code, recursive)", "do_list(exit_code, remove_ofname_fd)", "do_list(exit_code, save_orig_name)", "do_list(exit_code, test)", "do_list(exit_code, to_stdout)", "do_list(exit_code, verbose)", "dup2(exit_code, -1)", "dup2(exit_code, 0)", "dup2(exit_code, 1)", "dup2(exit_code, 13)", "dup2(exit_code, 30)", "dup2(exit_code, 4)", "dup2(exit_code, argc)", "dup2(exit_code, ascii)", "dup2(exit_code, block_mode)", "dup2(exit_code, decompress)", "dup2(exit_code, decrypt)", "dup2(exit_code, do_lzw)", "dup2(exit_code, exit_code)", "dup2(exit_code, exiting_signal)", "dup2(exit_code, file_count)", "dup2(exit_code, force)", "dup2(exit_code, foreground)", "dup2(exit_code, ifd)", "dup2(exit_code, last_member)", "dup2(exit_code, level)", "dup2(exit_code, list)", "dup2(exit_code, maxbits)", "dup2(exit_code, method)", "dup2(exit_code, no_name)", "dup2(exit_code, no_time)", "dup2(exit_code, ofd)", "dup2(exit_code, optc)", "dup2(exit_code, part_nb)", "dup2(exit_code, quiet)", "dup2(exit_code, recursive)", "dup2(exit_code, remove_ofname_fd)", "dup2(exit_code, save_orig_name)", "dup2(exit_code, test)", "dup2(exit_code, to_stdout)", "dup2(exit_code, verbose)", "fchmod(exit_code, -1)", "fchmod(exit_code, 0)", "fchmod(exit_code, 1)", "fchmod(exit_code, 13)", "fchmod(exit_code, 30)", "fchmod(exit_code, 4)", "fchmod(exit_code, inptr)", "fchmod(exit_code, insize)", "fchmod(exit_code, outcnt)", "fdopen(exit_code, 0)", "fpathconf(exit_code, -1)", "fpathconf(exit_code, 0)", "fpathconf(exit_code, 1)", "fpathconf(exit_code, 13)", "fpathconf(exit_code, 30)", "fpathconf(exit_code, 4)", "fpathconf(exit_code, argc)", "fpathconf(exit_code, ascii)", "fpathconf(exit_code, block_mode)", "fpathconf(exit_code, decompress)", "fpathconf(exit_code, decrypt)", "fpathconf(exit_code, do_lzw)", "fpathconf(exit_code, exit_code)", "fpathconf(exit_code, exiting_signal)", "fpathconf(exit_code, file_count)", "fpathconf(exit_code, force)", "fpathconf(exit_code, foreground)", "fpathconf(exit_code, ifd)", "fpathconf(exit_code, last_member)", "fpathconf(exit_code, level)", "fpathconf(exit_code, list)", "fpathconf(exit_code, maxbits)", "fpathconf(exit_code, method)", "fpathconf(exit_code, no_name)", "fpathconf(exit_code, no_time)", "fpathconf(exit_code, ofd)", "fpathconf(exit_code, optc)", "fpathconf(exit_code, part_nb)", "fpathconf(exit_code, quiet)", "fpathconf(exit_code, recursive)", "fpathconf(exit_code, remove_ofname_fd)", "fpathconf(exit_code, save_orig_name)", "fpathconf(exit_code, test)", "fpathconf(exit_code, to_stdout)", "fpathconf(exit_code, verbose)", "fputc(exit_code, 0)", "fputc_unlocked(exit_code, 0)", "fstat(exit_code, 0)", "fstat64(exit_code, 0)", "ftruncate(exit_code, -1)", "ftruncate(exit_code, 0)", "ftruncate(exit_code, 1)", "ftruncate(exit_code, 13)", "ftruncate(exit_code, 30)", "ftruncate(exit_code, 4)", "ftruncate(exit_code, bytes_in)", "ftruncate(exit_code, bytes_out)", "ftruncate(exit_code, header_bytes)", "ftruncate(exit_code, ifile_size)", "ftruncate(exit_code, total_in)", "ftruncate(exit_code, total_out)", "ftruncate64(exit_code, -1)", "ftruncate64(exit_code, 0)", "ftruncate64(exit_code, 1)", "ftruncate64(exit_code, 13)", "ftruncate64(exit_code, 30)", "ftruncate64(exit_code, 4)", "ftruncate64(exit_code, bytes_in)", "ftruncate64(exit_code, bytes_out)", "ftruncate64(exit_code, header_bytes)", "ftruncate64(exit_code, ifile_size)", "ftruncate64(exit_code, total_in)", "ftruncate64(exit_code, total_out)", "futimens(exit_code, 0)", "getgroups(exit_code, 0)", "isalnum_l(exit_code, 0)", "isalpha_l(exit_code, 0)", "isblank_l(exit_code, 0)", "iscntrl_l(exit_code, 0)", "isctype(exit_code, -1)", "isctype(exit_code, 0)", "isctype(exit_code, 1)", "isctype(exit_code, 13)", "isctype(exit_code, 30)", "isctype(exit_code, 4)", "isctype(exit_code, argc)", "isctype(exit_code, ascii)", "isctype(exit_code, block_mode)", "isctype(exit_code, decompress)", "isctype(exit_code, decrypt)", "isctype(exit_code, do_lzw)", "isctype(exit_code, exit_code)", "isctype(exit_code, exiting_signal)", "isctype(exit_code, file_count)", "isctype(exit_code, force)", "isctype(exit_code, foreground)", "isctype(exit_code, ifd)", "isctype(exit_code, last_member)", "isctype(exit_code, level)", "isctype(exit_code, list)", "isctype(exit_code, maxbits)", "isctype(exit_code, method)", "isctype(exit_code, no_name)", "isctype(exit_code, no_time)", "isctype(exit_code, ofd)", "isctype(exit_code, optc)", "isctype(exit_code, part_nb)", "isctype(exit_code, quiet)", "isctype(exit_code, recursive)", "isctype(exit_code, remove_ofname_fd)", "isctype(exit_code, save_orig_name)", "isctype(exit_code, test)", "isctype(exit_code, to_stdout)", "isctype(exit_code, verbose)", "isdigit_l(exit_code, 0)", "isgraph_l(exit_code, 0)", "islower_l(exit_code, 0)", "isprint_l(exit_code, 0)", "ispunct_l(exit_code, 0)", "isspace_l(exit_code, 0)", "isupper_l(exit_code, 0)", "isxdigit_l(exit_code, 0)", "kill(exit_code, -1)", "kill(exit_code, 0)", "kill(exit_code, 1)", "kill(exit_code, 13)", "kill(exit_code, 30)", "kill(exit_code, 4)", "kill(exit_code, argc)", "kill(exit_code, ascii)", "kill(exit_code, block_mode)", "kill(exit_code, decompress)", "kill(exit_code, decrypt)", "kill(exit_code, do_lzw)", "kill(exit_code, exit_code)", "kill(exit_code, exiting_signal)", "kill(exit_code, file_count)", "kill(exit_code, force)", "kill(exit_code, foreground)", "kill(exit_code, ifd)", "kill(exit_code, last_member)", "kill(exit_code, level)", "kill(exit_code, list)", "kill(exit_code, maxbits)", "kill(exit_code, method)", "kill(exit_code, no_name)", "kill(exit_code, no_time)", "kill(exit_code, ofd)", "kill(exit_code, optc)", "kill(exit_code, part_nb)", "kill(exit_code, quiet)", "kill(exit_code, recursive)", "kill(exit_code, remove_ofname_fd)", "kill(exit_code, save_orig_name)", "kill(exit_code, test)", "kill(exit_code, to_stdout)", "kill(exit_code, verbose)", "killpg(exit_code, -1)", "killpg(exit_code, 0)", "killpg(exit_code, 1)", "killpg(exit_code, 13)", "killpg(exit_code, 30)", "killpg(exit_code, 4)", "killpg(exit_code, argc)", "killpg(exit_code, ascii)", "killpg(exit_code, block_mode)", "killpg(exit_code, decompress)", "killpg(exit_code, decrypt)", "killpg(exit_code, do_lzw)", "killpg(exit_code, exit_code)", "killpg(exit_code, exiting_signal)", "killpg(exit_code, file_count)", "killpg(exit_code, force)", "killpg(exit_code, foreground)", "killpg(exit_code, ifd)", "killpg(exit_code, last_member)", "killpg(exit_code, level)", "killpg(exit_code, list)", "killpg(exit_code, maxbits)", "killpg(exit_code, method)", "killpg(exit_code, no_name)", "killpg(exit_code, no_time)", "killpg(exit_code, ofd)", "killpg(exit_code, optc)", "killpg(exit_code, part_nb)", "killpg(exit_code, quiet)", "killpg(exit_code, recursive)", "killpg(exit_code, remove_ofname_fd)", "killpg(exit_code, save_orig_name)", "killpg(exit_code, test)", "killpg(exit_code, to_stdout)", "killpg(exit_code, verbose)", "lm_init(exit_code, 0)", "lzw(exit_code, -1)", "lzw(exit_code, 0)", "lzw(exit_code, 1)", "lzw(exit_code, 13)", "lzw(exit_code, 30)", "lzw(exit_code, 4)", "lzw(exit_code, argc)", "lzw(exit_code, ascii)", "lzw(exit_code, block_mode)", "lzw(exit_code, decompress)", "lzw(exit_code, decrypt)", "lzw(exit_code, do_lzw)", "lzw(exit_code, exit_code)", "lzw(exit_code, exiting_signal)", "lzw(exit_code, file_count)", "lzw(exit_code, force)", "lzw(exit_code, foreground)", "lzw(exit_code, ifd)", "lzw(exit_code, last_member)", "lzw(exit_code, level)", "lzw(exit_code, list)", "lzw(exit_code, maxbits)", "lzw(exit_code, method)", "lzw(exit_code, no_name)", "lzw(exit_code, no_time)", "lzw(exit_code, ofd)", "lzw(exit_code, optc)", "lzw(exit_code, part_nb)", "lzw(exit_code, quiet)", "lzw(exit_code, recursive)", "lzw(exit_code, remove_ofname_fd)", "lzw(exit_code, save_orig_name)", "lzw(exit_code, test)", "lzw(exit_code, to_stdout)", "lzw(exit_code, verbose)", "main(exit_code, 0)", "main(exit_code, args)", "main(exit_code, argv)", "psignal(exit_code, 0)", "putc(exit_code, 0)", "putc_unlocked(exit_code, 0)", "putw(exit_code, 0)", "send_bits(exit_code, -1)", "send_bits(exit_code, 0)", "send_bits(exit_code, 1)", "send_bits(exit_code, 13)", "send_bits(exit_code, 30)", "send_bits(exit_code, 4)", "send_bits(exit_code, argc)", "send_bits(exit_code, ascii)", "send_bits(exit_code, block_mode)", "send_bits(exit_code, decompress)", "send_bits(exit_code, decrypt)", "send_bits(exit_code, do_lzw)", "send_bits(exit_code, exit_code)", "send_bits(exit_code, exiting_signal)", "send_bits(exit_code, file_count)", "send_bits(exit_code, force)", "send_bits(exit_code, foreground)", "send_bits(exit_code, ifd)", "send_bits(exit_code, last_member)", "send_bits(exit_code, level)", "send_bits(exit_code, list)", "send_bits(exit_code, maxbits)", "send_bits(exit_code, method)", "send_bits(exit_code, no_name)", "send_bits(exit_code, no_time)", "send_bits(exit_code, ofd)", "send_bits(exit_code, optc)", "send_bits(exit_code, part_nb)", "send_bits(exit_code, quiet)", "send_bits(exit_code, recursive)", "send_bits(exit_code, remove_ofname_fd)", "send_bits(exit_code, save_orig_name)", "send_bits(exit_code, test)", "send_bits(exit_code, to_stdout)", "send_bits(exit_code, verbose)", "setpgid(exit_code, -1)", "setpgid(exit_code, 0)", "setpgid(exit_code, 1)", "setpgid(exit_code, 13)", "setpgid(exit_code, 30)", "setpgid(exit_code, 4)", "setpgid(exit_code, argc)", "setpgid(exit_code, ascii)", "setpgid(exit_code, block_mode)", "setpgid(exit_code, decompress)", "setpgid(exit_code, decrypt)", "setpgid(exit_code, do_lzw)", "setpgid(exit_code, exit_code)", "setpgid(exit_code, exiting_signal)", "setpgid(exit_code, file_count)", "setpgid(exit_code, force)", "setpgid(exit_code, foreground)", "setpgid(exit_code, ifd)", "setpgid(exit_code, last_member)", "setpgid(exit_code, level)", "setpgid(exit_code, list)", "setpgid(exit_code, maxbits)", "setpgid(exit_code, method)", "setpgid(exit_code, no_name)", "setpgid(exit_code, no_time)", "setpgid(exit_code, ofd)", "setpgid(exit_code, optc)", "setpgid(exit_code, part_nb)", "setpgid(exit_code, quiet)", "setpgid(exit_code, recursive)", "setpgid(exit_code, remove_ofname_fd)", "setpgid(exit_code, save_orig_name)", "setpgid(exit_code, test)", "setpgid(exit_code, to_stdout)", "setpgid(exit_code, verbose)", "siginterrupt(exit_code, -1)", "siginterrupt(exit_code, 0)", "siginterrupt(exit_code, 1)", "siginterrupt(exit_code, 13)", "siginterrupt(exit_code, 30)", "siginterrupt(exit_code, 4)", "siginterrupt(exit_code, argc)", "siginterrupt(exit_code, ascii)", "siginterrupt(exit_code, block_mode)", "siginterrupt(exit_code, decompress)", "siginterrupt(exit_code, decrypt)", "siginterrupt(exit_code, do_lzw)", "siginterrupt(exit_code, exit_code)", "siginterrupt(exit_code, exiting_signal)", "siginterrupt(exit_code, file_count)", "siginterrupt(exit_code, force)", "siginterrupt(exit_code, foreground)", "siginterrupt(exit_code, ifd)", "siginterrupt(exit_code, last_member)", "siginterrupt(exit_code, level)", "siginterrupt(exit_code, list)", "siginterrupt(exit_code, maxbits)", "siginterrupt(exit_code, method)", "siginterrupt(exit_code, no_name)", "siginterrupt(exit_code, no_time)", "siginterrupt(exit_code, ofd)", "siginterrupt(exit_code, optc)", "siginterrupt(exit_code, part_nb)", "siginterrupt(exit_code, quiet)", "siginterrupt(exit_code, recursive)", "siginterrupt(exit_code, remove_ofname_fd)", "siginterrupt(exit_code, save_orig_name)", "siginterrupt(exit_code, test)", "siginterrupt(exit_code, to_stdout)", "siginterrupt(exit_code, verbose)", "signal(exit_code, 0)", "signal(exit_code, abort_gzip_signal)", "signal(exit_code, bi_init)", "sigset(exit_code, 0)", "sigset(exit_code, abort_gzip_signal)", "sigset(exit_code, bi_init)", "ssignal(exit_code, 0)", "ssignal(exit_code, abort_gzip_signal)", "ssignal(exit_code, bi_init)", "strerror_l(exit_code, 0)", "sysv_signal(exit_code, 0)", "sysv_signal(exit_code, abort_gzip_signal)", "sysv_signal(exit_code, bi_init)", "tcsetpgrp(exit_code, -1)", "tcsetpgrp(exit_code, 0)", "tcsetpgrp(exit_code, 1)", "tcsetpgrp(exit_code, 13)", "tcsetpgrp(exit_code, 30)", "tcsetpgrp(exit_code, 4)", "tcsetpgrp(exit_code, argc)", "tcsetpgrp(exit_code, ascii)", "tcsetpgrp(exit_code, block_mode)", "tcsetpgrp(exit_code, decompress)", "tcsetpgrp(exit_code, decrypt)", "tcsetpgrp(exit_code, do_lzw)", "tcsetpgrp(exit_code, exit_code)", "tcsetpgrp(exit_code, exiting_signal)", "tcsetpgrp(exit_code, file_count)", "tcsetpgrp(exit_code, force)", "tcsetpgrp(exit_code, foreground)", "tcsetpgrp(exit_code, ifd)", "tcsetpgrp(exit_code, last_member)", "tcsetpgrp(exit_code, level)", "tcsetpgrp(exit_code, list)", "tcsetpgrp(exit_code, maxbits)", "tcsetpgrp(exit_code, method)", "tcsetpgrp(exit_code, no_name)", "tcsetpgrp(exit_code, no_time)", "tcsetpgrp(exit_code, ofd)", "tcsetpgrp(exit_code, optc)", "tcsetpgrp(exit_code, part_nb)", "tcsetpgrp(exit_code, quiet)", "tcsetpgrp(exit_code, recursive)", "tcsetpgrp(exit_code, remove_ofname_fd)", "tcsetpgrp(exit_code, save_orig_name)", "tcsetpgrp(exit_code, test)", "tcsetpgrp(exit_code, to_stdout)", "tcsetpgrp(exit_code, verbose)", "tolower_l(exit_code, 0)", "toupper_l(exit_code, 0)", "treat_dir(exit_code, 0)", "treat_dir(exit_code, env)", "treat_dir(exit_code, program_name)", "treat_dir(exit_code, z_suffix)", "ungetc(exit_code, 0)", "unlzh(exit_code, -1)", "unlzh(exit_code, 0)", "unlzh(exit_code, 1)", "unlzh(exit_code, 13)", "unlzh(exit_code, 30)", "unlzh(exit_code, 4)", "unlzh(exit_code, argc)", "unlzh(exit_code, ascii)", "unlzh(exit_code, block_mode)", "unlzh(exit_code, decompress)", "unlzh(exit_code, decrypt)", "unlzh(exit_code, do_lzw)", "unlzh(exit_code, exit_code)", "unlzh(exit_code, exiting_signal)", "unlzh(exit_code, file_count)", "unlzh(exit_code, force)", "unlzh(exit_code, foreground)", "unlzh(exit_code, ifd)", "unlzh(exit_code, last_member)", "unlzh(exit_code, level)", "unlzh(exit_code, list)", "unlzh(exit_code, maxbits)", "unlzh(exit_code, method)", "unlzh(exit_code, no_name)", "unlzh(exit_code, no_time)", "unlzh(exit_code, ofd)", "unlzh(exit_code, optc)", "unlzh(exit_code, part_nb)", "unlzh(exit_code, quiet)", "unlzh(exit_code, recursive)", "unlzh(exit_code, remove_ofname_fd)", "unlzh(exit_code, save_orig_name)", "unlzh(exit_code, test)", "unlzh(exit_code, to_stdout)", "unlzh(exit_code, verbose)", "unlzw(exit_code, -1)", "unlzw(exit_code, 0)", "unlzw(exit_code, 1)", "unlzw(exit_code, 13)", "unlzw(exit_code, 30)", "unlzw(exit_code, 4)", "unlzw(exit_code, argc)", "unlzw(exit_code, ascii)", "unlzw(exit_code, block_mode)", "unlzw(exit_code, decompress)", "unlzw(exit_code, decrypt)", "unlzw(exit_code, do_lzw)", "unlzw(exit_code, exit_code)", "unlzw(exit_code, exiting_signal)", "unlzw(exit_code, file_count)", "unlzw(exit_code, force)", "unlzw(exit_code, foreground)", "unlzw(exit_code, ifd)", "unlzw(exit_code, last_member)", "unlzw(exit_code, level)", "unlzw(exit_code, list)", "unlzw(exit_code, maxbits)", "unlzw(exit_code, method)", "unlzw(exit_code, no_name)", "unlzw(exit_code, no_time)", "unlzw(exit_code, ofd)", "unlzw(exit_code, optc)", "unlzw(exit_code, part_nb)", "unlzw(exit_code, quiet)", "unlzw(exit_code, recursive)", "unlzw(exit_code, remove_ofname_fd)", "unlzw(exit_code, save_orig_name)", "unlzw(exit_code, test)", "unlzw(exit_code, to_stdout)", "unlzw(exit_code, verbose)", "unpack(exit_code, -1)", "unpack(exit_code, 0)", "unpack(exit_code, 1)", "unpack(exit_code, 13)", "unpack(exit_code, 30)", "unpack(exit_code, 4)", "unpack(exit_code, argc)", "unpack(exit_code, ascii)", "unpack(exit_code, block_mode)", "unpack(exit_code, decompress)", "unpack(exit_code, decrypt)", "unpack(exit_code, do_lzw)", "unpack(exit_code, exit_code)", "unpack(exit_code, exiting_signal)", "unpack(exit_code, file_count)", "unpack(exit_code, force)", "unpack(exit_code, foreground)", "unpack(exit_code, ifd)", "unpack(exit_code, last_member)", "unpack(exit_code, level)", "unpack(exit_code, list)", "unpack(exit_code, maxbits)", "unpack(exit_code, method)", "unpack(exit_code, no_name)", "unpack(exit_code, no_time)", "unpack(exit_code, ofd)", "unpack(exit_code, optc)", "unpack(exit_code, part_nb)", "unpack(exit_code, quiet)", "unpack(exit_code, recursive)", "unpack(exit_code, remove_ofname_fd)", "unpack(exit_code, save_orig_name)", "unpack(exit_code, test)", "unpack(exit_code, to_stdout)", "unpack(exit_code, verbose)", "unzip(exit_code, -1)", "unzip(exit_code, 0)", "unzip(exit_code, 1)", "unzip(exit_code, 13)", "unzip(exit_code, 30)", "unzip(exit_code, 4)", "unzip(exit_code, argc)", "unzip(exit_code, ascii)", "unzip(exit_code, block_mode)", "unzip(exit_code, decompress)", "unzip(exit_code, decrypt)", "unzip(exit_code, do_lzw)", "unzip(exit_code, exit_code)", "unzip(exit_code, exiting_signal)", "unzip(exit_code, file_count)", "unzip(exit_code, force)", "unzip(exit_code, foreground)", "unzip(exit_code, ifd)", "unzip(exit_code, last_member)", "unzip(exit_code, level)", "unzip(exit_code, list)", "unzip(exit_code, maxbits)", "unzip(exit_code, method)", "unzip(exit_code, no_name)", "unzip(exit_code, no_time)", "unzip(exit_code, ofd)", "unzip(exit_code, optc)", "unzip(exit_code, part_nb)", "unzip(exit_code, quiet)", "unzip(exit_code, recursive)", "unzip(exit_code, remove_ofname_fd)", "unzip(exit_code, save_orig_name)", "unzip(exit_code, test)", "unzip(exit_code, to_stdout)", "unzip(exit_code, verbose)", "zip(exit_code, -1)", "zip(exit_code, 0)", "zip(exit_code, 1)", "zip(exit_code, 13)", "zip(exit_code, 30)", "zip(exit_code, 4)", "zip(exit_code, argc)", "zip(exit_code, ascii)", "zip(exit_code, block_mode)", "zip(exit_code, decompress)", "zip(exit_code, decrypt)", "zip(exit_code, do_lzw)", "zip(exit_code, exit_code)", "zip(exit_code, exiting_signal)", "zip(exit_code, file_count)", "zip(exit_code, force)", "zip(exit_code, foreground)", "zip(exit_code, ifd)", "zip(exit_code, last_member)", "zip(exit_code, level)", "zip(exit_code, list)", "zip(exit_code, maxbits)", "zip(exit_code, method)", "zip(exit_code, no_name)", "zip(exit_code, no_time)", "zip(exit_code, ofd)", "zip(exit_code, optc)", "zip(exit_code, part_nb)", "zip(exit_code, quiet)", "zip(exit_code, recursive)", "zip(exit_code, remove_ofname_fd)", "zip(exit_code, save_orig_name)", "zip(exit_code, test)", "zip(exit_code, to_stdout)", "zip(exit_code, verbose)", "{\n}\n", "_Exit(exit_code)", "__getpgid(exit_code)", "_exit(exit_code)", "_tolower(exit_code)", "_toupper(exit_code)", "abort_gzip_signal(exit_code)", "abs(exit_code)", "bi_init(exit_code)", "check_zipfile(exit_code)", "close(exit_code)", "do_exit(exit_code)", "dup(exit_code)", "dysize(exit_code)", "exit(exit_code)", "fchdir(exit_code)", "fdatasync(exit_code)", "fdopendir(exit_code)", "ffs(exit_code)", "fill_inbuf(exit_code)", "fsync(exit_code)", "get_method(exit_code)", "getpgid(exit_code)", "getsid(exit_code)", "grantpt(exit_code)", "gsignal(exit_code)", "isalnum(exit_code)", "isalpha(exit_code)", "isascii(exit_code)", "isatty(exit_code)", "isblank(exit_code)", "iscntrl(exit_code)", "isdigit(exit_code)", "isgraph(exit_code)", "islower(exit_code)", "isprint(exit_code)", "ispunct(exit_code)", "isspace(exit_code)", "isupper(exit_code)", "isxdigit(exit_code)", "nice(exit_code)", "posix_openpt(exit_code)", "ptsname(exit_code)", "putchar(exit_code)", "putchar_unlocked(exit_code)", "quick_exit(exit_code)", "raise(exit_code)", "sigblock(exit_code)", "sighold(exit_code)", "sigignore(exit_code)", "sigpause(exit_code)", "sigrelse(exit_code)", "sigsetmask(exit_code)", "strerror(exit_code)", "strsignal(exit_code)", "syncfs(exit_code)", "sysconf(exit_code)", "tcgetpgrp(exit_code)", "toascii(exit_code)", "tolower(exit_code)", "toupper(exit_code)", "ttyname(exit_code)", "unlockpt(exit_code)", "do_exit((0 * argc))", "do_exit((0 * file_count))", "do_exit((0 * optc))", "do_exit((0 * proglen))", "do_exit((argc != 0))", "do_exit((argc != file_count))", "do_exit((argc != optc))", "do_exit((argc != proglen))", "do_exit((argc * file_count))", "do_exit((argc * optc))", "do_exit((argc * proglen))", "do_exit((argc + 0))", "do_exit((argc + file_count))", "do_exit((argc + optc))", "do_exit((argc + proglen))", "do_exit((argc - 0))", "do_exit((argc - file_count))", "do_exit((argc - optc))", "do_exit((argc - proglen))", "do_exit((argc == 0))", "do_exit((argc == file_count))", "do_exit((argc == optc))", "do_exit((argc == proglen))", "do_exit((argc))", "do_exit((argv != 0))", "do_exit((argv == 0))", "do_exit((file_count != 0))", "do_exit((file_count != optc))", "do_exit((file_count != proglen))", "do_exit((file_count * argc))", "do_exit((file_count * optc))", "do_exit((file_count * proglen))", "do_exit((file_count + 0))", "do_exit((file_count + optc))", "do_exit((file_count + proglen))", "do_exit((file_count - 0))", "do_exit((file_count - optc))", "do_exit((file_count - proglen))", "do_exit((file_count == 0))", "do_exit((file_count == optc))", "do_exit((file_count == proglen))", "do_exit((file_count))", "do_exit((optc != 0))", "do_exit((optc * argc))", "do_exit((optc * file_count))", "do_exit((optc * proglen))", "do_exit((optc + 0))", "do_exit((optc - 0))", "do_exit((optc == 0))", "do_exit((optc))", "do_exit((proglen != 0))", "do_exit((proglen != optc))", "do_exit((proglen * argc))", "do_exit((proglen * file_count))", "do_exit((proglen * optc))", "do_exit((proglen + 0))", "do_exit((proglen + optc))", "do_exit((proglen - 0))", "do_exit((proglen - optc))", "do_exit((proglen == 0))", "do_exit((proglen == optc))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9670128188442755, -4.9670128188442755, -4.6493408088442756, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -6.5296209828442748, -5.1119245508442752, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -6.3274086328442749, -6.3274086328442749, -6.3274086328442749, -5.646516762844275, -5.8904436328442751, -5.8904436328442751, -5.4090883328442754, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -5.8904436328442751, -6.3274086328442749, -6.3274086328442749, -5.1651614628442752]
								}, {
									"case":	2,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	3,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	4,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	5,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	6,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	7,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	8,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	9,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	10,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	11,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	12,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	13,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	14,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	15,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	16,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	17,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	18,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	19,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	20,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	21,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	22,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	23,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	24,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	25,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	26,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	27,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	28,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	29,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	30,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	31,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	32,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	33,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	34,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	35,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	36,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	37,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	38,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	39,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	40,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	41,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	42,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	43,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	44,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	45,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	46,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	47,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	48,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	49,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	50,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	51,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	52,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	53,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	54,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	55,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	56,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	57,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	58,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	59,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	60,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	61,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	62,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	63,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	64,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	65,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	66,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	67,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	68,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	69,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	70,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	71,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	72,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	73,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	74,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	75,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	76,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	77,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	78,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	79,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	80,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	81,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	82,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	83,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	84,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	85,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	86,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	87,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	88,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	89,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	90,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	91,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	92,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	93,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	94,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	95,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	96,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	97,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	98,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	99,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	100,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	101,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	102,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	103,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	104,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	105,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	106,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	107,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	108,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	109,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	110,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	111,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	112,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	113,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	114,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	115,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	116,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	117,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	118,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	119,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	120,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	121,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	122,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	123,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	124,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	125,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	126,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	127,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	128,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	129,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	130,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	131,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	132,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	133,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	134,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	135,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	136,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	137,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	138,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	139,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	140,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	141,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	142,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	143,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	144,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	145,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	146,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	147,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	148,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	149,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	150,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	151,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	152,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	153,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	154,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	155,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	156,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	157,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	158,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	159,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	160,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	161,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	162,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	163,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	164,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	165,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	166,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	167,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	168,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	169,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	170,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	171,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	172,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	173,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	174,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	175,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	176,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	177,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	178,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	179,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	180,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	181,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	182,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	183,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	184,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	185,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	186,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	187,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	188,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	189,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	190,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	191,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	192,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	193,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	194,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	195,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	196,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	197,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	198,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	199,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	200,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	201,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	202,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	203,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	204,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	205,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	206,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	207,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	208,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	209,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	210,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	211,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	212,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	213,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	214,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	215,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	216,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	217,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	218,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	219,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	220,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	221,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	222,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	223,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	224,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	225,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	226,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	227,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	228,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	229,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	230,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	231,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	232,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	233,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	234,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	235,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	236,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	237,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	238,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	239,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	240,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	241,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	242,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	243,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	244,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	245,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	246,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	247,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	248,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	249,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	250,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	251,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	252,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	253,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	254,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	255,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	256,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	257,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	258,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	259,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	260,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	261,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	262,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	263,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	264,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	265,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	266,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	267,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	268,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	269,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	270,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	271,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	272,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	273,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	274,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	275,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	276,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	277,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	278,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	279,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	280,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	281,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	282,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	283,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	284,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	285,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	286,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	287,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	288,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	289,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	290,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	291,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	292,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	293,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	294,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	295,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	296,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	297,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	298,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	299,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	300,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	301,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	302,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	303,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	304,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	305,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	306,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	307,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	308,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	309,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	310,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	311,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	312,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	313,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	314,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	315,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	316,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	317,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	318,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	319,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	320,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	321,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	322,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	323,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	324,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	325,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	326,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	327,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	328,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	329,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	330,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	331,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	332,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	333,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	334,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	335,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	336,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	337,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	338,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	339,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	340,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	341,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	342,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	343,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	344,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	345,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	346,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	347,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	348,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	349,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	350,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	351,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	352,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	353,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	354,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	355,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	356,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	357,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	358,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	359,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	360,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	361,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	362,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	363,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	364,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	365,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	366,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	367,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	368,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	369,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	370,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	371,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	372,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	373,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	374,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	375,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	376,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	377,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	378,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	379,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	380,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	381,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	382,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	383,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	384,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	385,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	386,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	387,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	388,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	389,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	390,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	391,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	392,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	393,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	394,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	395,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	396,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	397,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	398,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	399,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	400,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	401,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	402,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	403,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	404,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	405,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	406,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	407,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	408,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	409,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	410,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	411,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	412,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	413,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	414,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	415,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	416,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	417,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	418,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	419,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	420,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	421,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	422,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	423,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	424,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	425,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	426,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	427,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	428,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	429,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	430,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	431,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	432,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	433,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	434,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	435,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	436,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	437,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	438,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	439,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	440,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	441,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	442,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	443,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	444,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	445,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	446,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	447,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	448,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	449,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	450,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	451,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	452,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	453,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	454,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	455,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	456,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	457,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	458,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	459,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	460,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	461,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	462,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	463,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	464,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	465,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	466,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	467,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	468,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	469,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	470,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	471,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	472,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	473,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	474,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	475,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	476,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	477,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	478,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	479,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	480,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	481,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	482,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	483,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	484,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	485,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	486,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	487,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	488,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	489,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	490,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	491,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	492,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	493,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	494,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	495,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	496,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	497,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	498,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	499,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	500,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	501,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	502,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	503,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	504,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	505,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	506,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	507,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	508,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	509,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	510,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	511,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	512,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	513,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	514,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	515,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	516,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	517,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	518,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	519,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	520,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	521,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	522,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	523,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	524,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	525,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	526,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	527,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	528,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	529,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	530,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	531,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	532,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	533,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	534,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	535,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	536,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	537,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	538,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	539,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	540,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	541,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	542,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	543,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	544,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	545,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	546,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	547,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	548,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	549,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	550,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	551,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	552,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	553,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	554,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	555,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	556,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	557,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	558,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	559,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	560,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	561,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	562,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	563,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	564,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	565,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	566,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	567,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	568,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	569,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	570,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	571,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	572,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	573,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	574,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	575,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	576,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	577,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	578,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	579,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	580,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	581,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	582,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	583,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	584,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	585,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	586,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	587,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	588,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	589,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	590,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	591,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	592,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	593,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	594,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	595,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	596,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	597,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	598,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	599,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	600,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	601,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	602,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	603,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	604,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	605,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	606,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	607,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	608,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	609,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	610,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	611,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	612,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	613,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	614,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	615,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	616,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	617,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	618,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	619,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	620,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	621,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	622,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	623,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	624,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	625,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	626,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	627,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	628,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	629,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	630,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	631,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	632,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	633,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	634,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	635,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	636,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	637,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	638,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	639,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	640,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	641,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	642,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	643,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	644,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	645,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	646,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	647,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	648,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	649,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	650,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	651,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	652,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	653,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	654,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	655,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	656,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	657,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	658,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	659,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	660,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	661,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	662,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	663,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	664,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	665,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	666,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	667,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	668,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	669,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	670,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	671,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	672,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	673,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	674,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	675,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	676,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	677,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	678,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	679,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	680,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	681,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	682,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	683,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	684,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	685,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	686,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	687,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	688,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	689,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	690,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	691,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	692,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	693,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	694,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	695,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	696,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	697,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	698,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	699,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	700,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	701,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	702,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	703,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	704,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	705,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	706,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	707,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	708,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	709,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	710,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	711,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	712,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	713,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	714,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	715,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	716,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	717,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	718,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	719,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	720,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	721,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	722,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	723,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	724,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	725,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	726,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	727,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	728,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	729,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	730,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	731,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	732,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	733,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	734,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	735,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	736,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	737,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	738,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	739,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	740,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	741,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	742,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	743,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	744,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	745,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	746,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	747,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	748,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	749,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	750,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	751,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	752,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	753,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	754,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	755,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	756,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	757,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	758,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	759,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	760,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	761,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	762,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	763,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	764,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	765,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	766,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	767,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	768,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	769,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	770,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	771,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	772,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	773,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	774,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	775,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	776,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	777,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	778,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	779,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	780,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	781,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	782,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	783,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	784,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	785,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	786,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	787,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	788,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	789,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	790,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	791,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	792,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	793,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	794,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	795,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	796,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	797,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	798,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	799,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	800,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	801,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	802,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	803,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	804,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	805,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	806,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	807,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	808,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	809,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	810,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	811,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	812,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	813,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	814,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	815,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	816,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	817,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	818,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	819,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	820,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	821,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	822,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	823,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	824,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	825,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	826,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	827,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	828,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	829,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	830,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	831,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	832,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	833,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	834,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	835,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	836,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	837,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	838,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	839,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	840,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	841,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	842,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	843,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	844,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	845,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	846,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	847,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	848,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	849,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	850,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	851,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	852,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	853,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	854,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	855,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	856,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	857,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	858,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	859,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	860,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	861,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	862,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	863,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	864,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	865,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	866,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	867,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	868,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	869,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	870,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	871,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	872,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	873,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	874,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	875,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	876,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	877,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	878,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	879,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	880,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	881,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	882,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	883,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	884,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	885,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	886,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	887,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	888,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	889,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	890,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	891,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	892,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	893,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	894,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	895,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	896,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	897,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	898,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	899,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	900,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	901,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	902,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	903,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	904,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	905,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	906,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	907,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	908,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	909,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	910,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	911,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	912,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	913,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	914,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	915,
									"scores":	[-5.0837800298442755]
								}, {
									"case":	916,
									"scores":	[-5.0837800298442755]
								}]
						}]
				}, {
					"line":	589,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	590,
							"begin_column":	3,
							"end_line":	590,
							"end_column":	3,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L590\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return -1;\n", "if (__is_neg(\"\", \"L590\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 0;\n", "if (__is_neg(\"\", \"L590\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 1;\n", "if (__is_neg(\"\", \"L590\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.24540168838443]
								}, {
									"case":	2,
									"scores":	[-5.24540168838443]
								}, {
									"case":	3,
									"scores":	[-5.24540168838443]
								}, {
									"case":	4,
									"scores":	[-5.24540168838443]
								}, {
									"case":	5,
									"scores":	[-5.24540168838443]
								}, {
									"case":	6,
									"scores":	[-5.24540168838443]
								}, {
									"case":	7,
									"scores":	[-5.24540168838443]
								}, {
									"case":	8,
									"scores":	[-5.24540168838443]
								}, {
									"case":	9,
									"scores":	[-5.24540168838443]
								}, {
									"case":	10,
									"scores":	[-5.24540168838443]
								}, {
									"case":	11,
									"scores":	[-5.24540168838443]
								}, {
									"case":	12,
									"scores":	[-5.24540168838443]
								}, {
									"case":	13,
									"scores":	[-5.24540168838443]
								}, {
									"case":	14,
									"scores":	[-5.24540168838443]
								}, {
									"case":	15,
									"scores":	[-5.24540168838443]
								}, {
									"case":	16,
									"scores":	[-5.24540168838443]
								}, {
									"case":	17,
									"scores":	[-5.24540168838443]
								}, {
									"case":	18,
									"scores":	[-5.24540168838443]
								}, {
									"case":	19,
									"scores":	[-5.24540168838443]
								}, {
									"case":	20,
									"scores":	[-5.24540168838443]
								}, {
									"case":	21,
									"scores":	[-5.24540168838443]
								}, {
									"case":	22,
									"scores":	[-5.24540168838443]
								}, {
									"case":	23,
									"scores":	[-5.24540168838443]
								}, {
									"case":	24,
									"scores":	[-5.24540168838443]
								}, {
									"case":	25,
									"scores":	[-5.24540168838443]
								}, {
									"case":	26,
									"scores":	[-5.24540168838443]
								}, {
									"case":	27,
									"scores":	[-5.24540168838443]
								}, {
									"case":	28,
									"scores":	[-5.24540168838443]
								}, {
									"case":	29,
									"scores":	[-5.24540168838443]
								}, {
									"case":	30,
									"scores":	[-5.24540168838443]
								}, {
									"case":	31,
									"scores":	[-5.24540168838443]
								}, {
									"case":	32,
									"scores":	[-5.24540168838443]
								}, {
									"case":	33,
									"scores":	[-5.24540168838443]
								}, {
									"case":	34,
									"scores":	[-5.24540168838443]
								}, {
									"case":	35,
									"scores":	[-5.24540168838443]
								}, {
									"case":	36,
									"scores":	[-5.24540168838443]
								}, {
									"case":	37,
									"scores":	[-5.24540168838443]
								}, {
									"case":	38,
									"scores":	[-5.24540168838443]
								}, {
									"case":	39,
									"scores":	[-5.24540168838443]
								}, {
									"case":	40,
									"scores":	[-5.24540168838443]
								}, {
									"case":	41,
									"scores":	[-5.24540168838443]
								}, {
									"case":	42,
									"scores":	[-5.24540168838443]
								}, {
									"case":	43,
									"scores":	[-5.24540168838443]
								}, {
									"case":	44,
									"scores":	[-5.24540168838443]
								}, {
									"case":	45,
									"scores":	[-5.24540168838443]
								}, {
									"case":	46,
									"scores":	[-5.24540168838443]
								}, {
									"case":	47,
									"scores":	[-5.24540168838443]
								}, {
									"case":	48,
									"scores":	[-5.24540168838443]
								}, {
									"case":	49,
									"scores":	[-5.24540168838443]
								}, {
									"case":	50,
									"scores":	[-5.24540168838443]
								}, {
									"case":	51,
									"scores":	[-5.24540168838443]
								}, {
									"case":	52,
									"scores":	[-5.24540168838443]
								}, {
									"case":	53,
									"scores":	[-5.24540168838443]
								}, {
									"case":	54,
									"scores":	[-5.24540168838443]
								}, {
									"case":	55,
									"scores":	[-5.24540168838443]
								}, {
									"case":	56,
									"scores":	[-5.24540168838443]
								}, {
									"case":	57,
									"scores":	[-5.24540168838443]
								}, {
									"case":	58,
									"scores":	[-5.24540168838443]
								}, {
									"case":	59,
									"scores":	[-5.24540168838443]
								}, {
									"case":	60,
									"scores":	[-5.24540168838443]
								}, {
									"case":	61,
									"scores":	[-5.24540168838443]
								}, {
									"case":	62,
									"scores":	[-5.24540168838443]
								}, {
									"case":	63,
									"scores":	[-5.24540168838443]
								}, {
									"case":	64,
									"scores":	[-5.24540168838443]
								}, {
									"case":	65,
									"scores":	[-5.24540168838443]
								}, {
									"case":	66,
									"scores":	[-5.24540168838443]
								}, {
									"case":	67,
									"scores":	[-5.24540168838443]
								}, {
									"case":	68,
									"scores":	[-5.24540168838443]
								}, {
									"case":	69,
									"scores":	[-5.24540168838443]
								}, {
									"case":	70,
									"scores":	[-5.24540168838443]
								}, {
									"case":	71,
									"scores":	[-5.24540168838443]
								}, {
									"case":	72,
									"scores":	[-5.24540168838443]
								}, {
									"case":	73,
									"scores":	[-5.24540168838443]
								}, {
									"case":	74,
									"scores":	[-5.24540168838443]
								}, {
									"case":	75,
									"scores":	[-5.24540168838443]
								}, {
									"case":	76,
									"scores":	[-5.24540168838443]
								}, {
									"case":	77,
									"scores":	[-5.24540168838443]
								}, {
									"case":	78,
									"scores":	[-5.24540168838443]
								}, {
									"case":	79,
									"scores":	[-5.24540168838443]
								}, {
									"case":	80,
									"scores":	[-5.24540168838443]
								}, {
									"case":	81,
									"scores":	[-5.24540168838443]
								}, {
									"case":	82,
									"scores":	[-5.24540168838443]
								}, {
									"case":	83,
									"scores":	[-5.24540168838443]
								}, {
									"case":	84,
									"scores":	[-5.24540168838443]
								}, {
									"case":	85,
									"scores":	[-5.24540168838443]
								}, {
									"case":	86,
									"scores":	[-5.24540168838443]
								}, {
									"case":	87,
									"scores":	[-5.24540168838443]
								}, {
									"case":	88,
									"scores":	[-5.24540168838443]
								}, {
									"case":	89,
									"scores":	[-5.24540168838443]
								}, {
									"case":	90,
									"scores":	[-5.24540168838443]
								}, {
									"case":	91,
									"scores":	[-5.24540168838443]
								}, {
									"case":	92,
									"scores":	[-5.24540168838443]
								}, {
									"case":	93,
									"scores":	[-5.24540168838443]
								}, {
									"case":	94,
									"scores":	[-5.24540168838443]
								}, {
									"case":	95,
									"scores":	[-5.24540168838443]
								}, {
									"case":	96,
									"scores":	[-5.24540168838443]
								}, {
									"case":	97,
									"scores":	[-5.24540168838443]
								}, {
									"case":	98,
									"scores":	[-5.24540168838443]
								}, {
									"case":	99,
									"scores":	[-5.24540168838443]
								}, {
									"case":	100,
									"scores":	[-5.24540168838443]
								}, {
									"case":	101,
									"scores":	[-5.24540168838443]
								}, {
									"case":	102,
									"scores":	[-5.24540168838443]
								}, {
									"case":	103,
									"scores":	[-5.24540168838443]
								}, {
									"case":	104,
									"scores":	[-5.24540168838443]
								}, {
									"case":	105,
									"scores":	[-5.24540168838443]
								}, {
									"case":	106,
									"scores":	[-5.24540168838443]
								}, {
									"case":	107,
									"scores":	[-5.24540168838443]
								}, {
									"case":	108,
									"scores":	[-5.24540168838443]
								}, {
									"case":	109,
									"scores":	[-5.24540168838443]
								}, {
									"case":	110,
									"scores":	[-5.24540168838443]
								}, {
									"case":	111,
									"scores":	[-5.24540168838443]
								}, {
									"case":	112,
									"scores":	[-5.24540168838443]
								}, {
									"case":	113,
									"scores":	[-5.24540168838443]
								}, {
									"case":	114,
									"scores":	[-5.24540168838443]
								}, {
									"case":	115,
									"scores":	[-5.24540168838443]
								}, {
									"case":	116,
									"scores":	[-5.24540168838443]
								}, {
									"case":	117,
									"scores":	[-5.24540168838443]
								}, {
									"case":	118,
									"scores":	[-5.24540168838443]
								}, {
									"case":	119,
									"scores":	[-5.24540168838443]
								}, {
									"case":	120,
									"scores":	[-5.24540168838443]
								}, {
									"case":	121,
									"scores":	[-5.24540168838443]
								}, {
									"case":	122,
									"scores":	[-5.24540168838443]
								}, {
									"case":	123,
									"scores":	[-5.24540168838443]
								}, {
									"case":	124,
									"scores":	[-5.24540168838443]
								}, {
									"case":	125,
									"scores":	[-5.24540168838443]
								}, {
									"case":	126,
									"scores":	[-5.24540168838443]
								}, {
									"case":	127,
									"scores":	[-5.24540168838443]
								}, {
									"case":	128,
									"scores":	[-5.24540168838443]
								}, {
									"case":	129,
									"scores":	[-5.24540168838443]
								}, {
									"case":	130,
									"scores":	[-5.24540168838443]
								}, {
									"case":	131,
									"scores":	[-5.24540168838443]
								}, {
									"case":	132,
									"scores":	[-5.24540168838443]
								}, {
									"case":	133,
									"scores":	[-5.24540168838443]
								}, {
									"case":	134,
									"scores":	[-5.24540168838443]
								}, {
									"case":	135,
									"scores":	[-5.24540168838443]
								}, {
									"case":	136,
									"scores":	[-5.24540168838443]
								}, {
									"case":	137,
									"scores":	[-5.24540168838443]
								}, {
									"case":	138,
									"scores":	[-5.24540168838443]
								}, {
									"case":	139,
									"scores":	[-5.24540168838443]
								}, {
									"case":	140,
									"scores":	[-5.24540168838443]
								}, {
									"case":	141,
									"scores":	[-5.24540168838443]
								}, {
									"case":	142,
									"scores":	[-5.24540168838443]
								}, {
									"case":	143,
									"scores":	[-5.24540168838443]
								}, {
									"case":	144,
									"scores":	[-5.24540168838443]
								}, {
									"case":	145,
									"scores":	[-5.24540168838443]
								}, {
									"case":	146,
									"scores":	[-5.24540168838443]
								}, {
									"case":	147,
									"scores":	[-5.24540168838443]
								}, {
									"case":	148,
									"scores":	[-5.24540168838443]
								}, {
									"case":	149,
									"scores":	[-5.24540168838443]
								}, {
									"case":	150,
									"scores":	[-5.24540168838443]
								}, {
									"case":	151,
									"scores":	[-5.24540168838443]
								}, {
									"case":	152,
									"scores":	[-5.24540168838443]
								}, {
									"case":	153,
									"scores":	[-5.24540168838443]
								}, {
									"case":	154,
									"scores":	[-5.24540168838443]
								}, {
									"case":	155,
									"scores":	[-5.24540168838443]
								}, {
									"case":	156,
									"scores":	[-5.24540168838443]
								}, {
									"case":	157,
									"scores":	[-5.24540168838443]
								}, {
									"case":	158,
									"scores":	[-5.24540168838443]
								}, {
									"case":	159,
									"scores":	[-5.24540168838443]
								}, {
									"case":	160,
									"scores":	[-5.24540168838443]
								}, {
									"case":	161,
									"scores":	[-5.24540168838443]
								}, {
									"case":	162,
									"scores":	[-5.24540168838443]
								}, {
									"case":	163,
									"scores":	[-5.24540168838443]
								}, {
									"case":	164,
									"scores":	[-5.24540168838443]
								}, {
									"case":	165,
									"scores":	[-5.24540168838443]
								}, {
									"case":	166,
									"scores":	[-5.24540168838443]
								}, {
									"case":	167,
									"scores":	[-5.24540168838443]
								}, {
									"case":	168,
									"scores":	[-5.24540168838443]
								}, {
									"case":	169,
									"scores":	[-5.24540168838443]
								}, {
									"case":	170,
									"scores":	[-5.24540168838443]
								}, {
									"case":	171,
									"scores":	[-5.24540168838443]
								}, {
									"case":	172,
									"scores":	[-5.24540168838443]
								}, {
									"case":	173,
									"scores":	[-5.24540168838443]
								}, {
									"case":	174,
									"scores":	[-5.24540168838443]
								}, {
									"case":	175,
									"scores":	[-5.24540168838443]
								}, {
									"case":	176,
									"scores":	[-5.24540168838443]
								}, {
									"case":	177,
									"scores":	[-5.24540168838443]
								}, {
									"case":	178,
									"scores":	[-5.24540168838443]
								}, {
									"case":	179,
									"scores":	[-5.24540168838443]
								}, {
									"case":	180,
									"scores":	[-5.24540168838443]
								}, {
									"case":	181,
									"scores":	[-5.24540168838443]
								}, {
									"case":	182,
									"scores":	[-5.24540168838443]
								}, {
									"case":	183,
									"scores":	[-5.24540168838443]
								}, {
									"case":	184,
									"scores":	[-5.24540168838443]
								}, {
									"case":	185,
									"scores":	[-5.24540168838443]
								}, {
									"case":	186,
									"scores":	[-5.24540168838443]
								}, {
									"case":	187,
									"scores":	[-5.24540168838443]
								}, {
									"case":	188,
									"scores":	[-5.24540168838443]
								}, {
									"case":	189,
									"scores":	[-5.24540168838443]
								}, {
									"case":	190,
									"scores":	[-5.24540168838443]
								}, {
									"case":	191,
									"scores":	[-5.24540168838443]
								}, {
									"case":	192,
									"scores":	[-5.24540168838443]
								}, {
									"case":	193,
									"scores":	[-5.24540168838443]
								}, {
									"case":	194,
									"scores":	[-5.24540168838443]
								}, {
									"case":	195,
									"scores":	[-5.24540168838443]
								}, {
									"case":	196,
									"scores":	[-5.24540168838443]
								}, {
									"case":	197,
									"scores":	[-5.24540168838443]
								}, {
									"case":	198,
									"scores":	[-5.24540168838443]
								}, {
									"case":	199,
									"scores":	[-5.24540168838443]
								}, {
									"case":	200,
									"scores":	[-6.72013600048443, -6.72013600048443, -6.72013600048443, -6.72013600048443, -6.72013600048443, -6.72013600048443]
								}, {
									"case":	201,
									"scores":	[-6.82004420048443, -6.82004420048443, -6.82004420048443, -6.82004420048443, -6.82004420048443, -6.82004420048443]
								}, {
									"case":	202,
									"scores":	[-9.08282600048443, -9.08282600048443, -9.08282600048443, -9.08282600048443, -9.08282600048443, -9.08282600048443]
								}, {
									"case":	203,
									"scores":	[-9.08282600048443, -9.08282600048443, -9.08282600048443, -9.08282600048443, -9.08282600048443, -9.08282600048443]
								}]
						}, {
							"switch":	8,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	590,
							"begin_column":	5,
							"end_line":	590,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L590\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.12258429138443, -6.12258429138443, -6.12258429138443, -6.12258429138443, -6.12258429138443, -6.12258429138443]
								}]
						}]
				}, {
					"line":	588,
					"switches":	[{
							"switch":	5,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	589,
							"begin_column":	1,
							"end_line":	589,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return -1;\n", "if (__is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 0;\n", "if (__is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 1;\n", "if (__is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-9.47396202321808, -9.47396202321808, -10.360537023218079, -10.760052188018079, -10.360537023218079, -10.760052188018079]
								}, {
									"case":	201,
									"scores":	[-9.57387022321808, -9.57387022321808, -10.460445223218079, -10.859960388018077, -10.460445223218079, -10.859960388018077]
								}, {
									"case":	202,
									"scores":	[-11.836652023218079, -11.836652023218079, -12.72322702321808, -13.12274218801808, -12.72322702321808, -13.12274218801808]
								}, {
									"case":	203,
									"scores":	[-11.836652023218079, -11.836652023218079, -12.72322702321808, -13.12274218801808, -12.72322702321808, -13.12274218801808]
								}]
						}, {
							"switch":	6,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	589,
							"begin_column":	3,
							"end_line":	590,
							"end_column":	12,
							"patch_codes":	["if (__is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 1;\n", "if ((!decompress || last_member) || __is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 1;\n", "if (!decompress)\n    return 1;\n", "if ((!decompress || last_member) && !__is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1303607054281457, -4.1303607054281457, -2.9227507054281459, -3.9042154124281465, -2.9227507054281459, -3.9042154124281465]
								}, {
									"case":	2,
									"scores":	[-4.1303607054281457, -4.1303607054281457, -2.9227507054281459, -3.9042154124281465, -2.9227507054281459, -3.9042154124281465]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-4.1303607054281457, -4.1303607054281457, -2.9227507054281459, -3.9042154124281465, -2.9227507054281459, -3.9042154124281465]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	589,
							"begin_column":	3,
							"end_line":	590,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L589\", 6, &(decompress), sizeof (decompress), &(last_member), sizeof (last_member), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr)))\n    if (!decompress || last_member)\n        return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.74132820011808, -7.74132820011808, -6.53371820011808, -7.51518290711808, -6.53371820011808, -7.51518290711808]
								}]
						}]
				}, {
					"line":	594,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	595,
							"begin_column":	0,
							"end_line":	595,
							"end_column":	0,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L595\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L595\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L595\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L595\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.316145176212963]
								}, {
									"case":	2,
									"scores":	[-6.316145176212963]
								}, {
									"case":	3,
									"scores":	[-6.316145176212963]
								}, {
									"case":	4,
									"scores":	[-6.316145176212963]
								}, {
									"case":	5,
									"scores":	[-6.316145176212963]
								}, {
									"case":	6,
									"scores":	[-6.316145176212963]
								}, {
									"case":	7,
									"scores":	[-6.316145176212963]
								}, {
									"case":	8,
									"scores":	[-6.316145176212963]
								}, {
									"case":	9,
									"scores":	[-6.316145176212963]
								}, {
									"case":	10,
									"scores":	[-6.316145176212963]
								}, {
									"case":	11,
									"scores":	[-6.316145176212963]
								}, {
									"case":	12,
									"scores":	[-6.316145176212963]
								}, {
									"case":	13,
									"scores":	[-6.316145176212963]
								}, {
									"case":	14,
									"scores":	[-6.316145176212963]
								}, {
									"case":	15,
									"scores":	[-6.316145176212963]
								}, {
									"case":	16,
									"scores":	[-6.316145176212963]
								}, {
									"case":	17,
									"scores":	[-6.316145176212963]
								}, {
									"case":	18,
									"scores":	[-6.316145176212963]
								}, {
									"case":	19,
									"scores":	[-6.316145176212963]
								}, {
									"case":	20,
									"scores":	[-6.316145176212963]
								}, {
									"case":	21,
									"scores":	[-6.316145176212963]
								}, {
									"case":	22,
									"scores":	[-6.316145176212963]
								}, {
									"case":	23,
									"scores":	[-6.316145176212963]
								}, {
									"case":	24,
									"scores":	[-6.316145176212963]
								}, {
									"case":	25,
									"scores":	[-6.316145176212963]
								}, {
									"case":	26,
									"scores":	[-6.316145176212963]
								}, {
									"case":	27,
									"scores":	[-6.316145176212963]
								}, {
									"case":	28,
									"scores":	[-6.316145176212963]
								}, {
									"case":	29,
									"scores":	[-6.316145176212963]
								}, {
									"case":	30,
									"scores":	[-6.316145176212963]
								}, {
									"case":	31,
									"scores":	[-6.316145176212963]
								}, {
									"case":	32,
									"scores":	[-6.316145176212963]
								}, {
									"case":	33,
									"scores":	[-6.316145176212963]
								}, {
									"case":	34,
									"scores":	[-6.316145176212963]
								}, {
									"case":	35,
									"scores":	[-6.316145176212963]
								}, {
									"case":	36,
									"scores":	[-6.316145176212963]
								}, {
									"case":	37,
									"scores":	[-6.316145176212963]
								}, {
									"case":	38,
									"scores":	[-6.316145176212963]
								}, {
									"case":	39,
									"scores":	[-6.316145176212963]
								}, {
									"case":	40,
									"scores":	[-6.316145176212963]
								}, {
									"case":	41,
									"scores":	[-6.316145176212963]
								}, {
									"case":	42,
									"scores":	[-6.316145176212963]
								}, {
									"case":	43,
									"scores":	[-6.316145176212963]
								}, {
									"case":	44,
									"scores":	[-6.316145176212963]
								}, {
									"case":	45,
									"scores":	[-6.316145176212963]
								}, {
									"case":	46,
									"scores":	[-6.316145176212963]
								}, {
									"case":	47,
									"scores":	[-6.316145176212963]
								}, {
									"case":	48,
									"scores":	[-6.316145176212963]
								}, {
									"case":	49,
									"scores":	[-6.316145176212963]
								}, {
									"case":	50,
									"scores":	[-6.316145176212963]
								}, {
									"case":	51,
									"scores":	[-6.316145176212963]
								}, {
									"case":	52,
									"scores":	[-6.316145176212963]
								}, {
									"case":	53,
									"scores":	[-6.316145176212963]
								}, {
									"case":	54,
									"scores":	[-6.316145176212963]
								}, {
									"case":	55,
									"scores":	[-6.316145176212963]
								}, {
									"case":	56,
									"scores":	[-6.316145176212963]
								}, {
									"case":	57,
									"scores":	[-6.316145176212963]
								}, {
									"case":	58,
									"scores":	[-6.316145176212963]
								}, {
									"case":	59,
									"scores":	[-6.316145176212963]
								}, {
									"case":	60,
									"scores":	[-6.316145176212963]
								}, {
									"case":	61,
									"scores":	[-6.316145176212963]
								}, {
									"case":	62,
									"scores":	[-6.316145176212963]
								}, {
									"case":	63,
									"scores":	[-6.316145176212963]
								}, {
									"case":	64,
									"scores":	[-6.316145176212963]
								}, {
									"case":	65,
									"scores":	[-6.316145176212963]
								}, {
									"case":	66,
									"scores":	[-6.316145176212963]
								}, {
									"case":	67,
									"scores":	[-6.316145176212963]
								}, {
									"case":	68,
									"scores":	[-6.316145176212963]
								}, {
									"case":	69,
									"scores":	[-6.316145176212963]
								}, {
									"case":	70,
									"scores":	[-6.316145176212963]
								}, {
									"case":	71,
									"scores":	[-6.316145176212963]
								}, {
									"case":	72,
									"scores":	[-6.316145176212963]
								}, {
									"case":	73,
									"scores":	[-6.316145176212963]
								}, {
									"case":	74,
									"scores":	[-6.316145176212963]
								}, {
									"case":	75,
									"scores":	[-6.316145176212963]
								}, {
									"case":	76,
									"scores":	[-6.316145176212963]
								}, {
									"case":	77,
									"scores":	[-6.316145176212963]
								}, {
									"case":	78,
									"scores":	[-6.316145176212963]
								}, {
									"case":	79,
									"scores":	[-6.316145176212963]
								}, {
									"case":	80,
									"scores":	[-6.316145176212963]
								}, {
									"case":	81,
									"scores":	[-6.316145176212963]
								}, {
									"case":	82,
									"scores":	[-6.316145176212963]
								}, {
									"case":	83,
									"scores":	[-6.316145176212963]
								}, {
									"case":	84,
									"scores":	[-6.316145176212963]
								}, {
									"case":	85,
									"scores":	[-6.316145176212963]
								}, {
									"case":	86,
									"scores":	[-6.316145176212963]
								}, {
									"case":	87,
									"scores":	[-6.316145176212963]
								}, {
									"case":	88,
									"scores":	[-6.316145176212963]
								}, {
									"case":	89,
									"scores":	[-6.316145176212963]
								}, {
									"case":	90,
									"scores":	[-6.316145176212963]
								}, {
									"case":	91,
									"scores":	[-6.316145176212963]
								}, {
									"case":	92,
									"scores":	[-6.316145176212963]
								}, {
									"case":	93,
									"scores":	[-6.316145176212963]
								}, {
									"case":	94,
									"scores":	[-6.316145176212963]
								}, {
									"case":	95,
									"scores":	[-6.316145176212963]
								}, {
									"case":	96,
									"scores":	[-6.316145176212963]
								}, {
									"case":	97,
									"scores":	[-6.316145176212963]
								}, {
									"case":	98,
									"scores":	[-6.316145176212963]
								}, {
									"case":	99,
									"scores":	[-6.316145176212963]
								}, {
									"case":	100,
									"scores":	[-6.316145176212963]
								}, {
									"case":	101,
									"scores":	[-6.316145176212963]
								}, {
									"case":	102,
									"scores":	[-6.316145176212963]
								}, {
									"case":	103,
									"scores":	[-6.316145176212963]
								}, {
									"case":	104,
									"scores":	[-6.316145176212963]
								}, {
									"case":	105,
									"scores":	[-6.316145176212963]
								}, {
									"case":	106,
									"scores":	[-6.316145176212963]
								}, {
									"case":	107,
									"scores":	[-6.316145176212963]
								}, {
									"case":	108,
									"scores":	[-6.316145176212963]
								}, {
									"case":	109,
									"scores":	[-6.316145176212963]
								}, {
									"case":	110,
									"scores":	[-6.316145176212963]
								}, {
									"case":	111,
									"scores":	[-6.316145176212963]
								}, {
									"case":	112,
									"scores":	[-6.316145176212963]
								}, {
									"case":	113,
									"scores":	[-6.316145176212963]
								}, {
									"case":	114,
									"scores":	[-6.316145176212963]
								}, {
									"case":	115,
									"scores":	[-6.316145176212963]
								}, {
									"case":	116,
									"scores":	[-6.316145176212963]
								}, {
									"case":	117,
									"scores":	[-6.316145176212963]
								}, {
									"case":	118,
									"scores":	[-6.316145176212963]
								}, {
									"case":	119,
									"scores":	[-6.316145176212963]
								}, {
									"case":	120,
									"scores":	[-6.316145176212963]
								}, {
									"case":	121,
									"scores":	[-6.316145176212963]
								}, {
									"case":	122,
									"scores":	[-6.316145176212963]
								}, {
									"case":	123,
									"scores":	[-6.316145176212963]
								}, {
									"case":	124,
									"scores":	[-6.316145176212963]
								}, {
									"case":	125,
									"scores":	[-6.316145176212963]
								}, {
									"case":	126,
									"scores":	[-6.316145176212963]
								}, {
									"case":	127,
									"scores":	[-6.316145176212963]
								}, {
									"case":	128,
									"scores":	[-6.316145176212963]
								}, {
									"case":	129,
									"scores":	[-6.316145176212963]
								}, {
									"case":	130,
									"scores":	[-6.316145176212963]
								}, {
									"case":	131,
									"scores":	[-6.316145176212963]
								}, {
									"case":	132,
									"scores":	[-6.316145176212963]
								}, {
									"case":	133,
									"scores":	[-6.316145176212963]
								}, {
									"case":	134,
									"scores":	[-6.316145176212963]
								}, {
									"case":	135,
									"scores":	[-6.316145176212963]
								}, {
									"case":	136,
									"scores":	[-6.316145176212963]
								}, {
									"case":	137,
									"scores":	[-6.316145176212963]
								}, {
									"case":	138,
									"scores":	[-6.316145176212963]
								}, {
									"case":	139,
									"scores":	[-6.316145176212963]
								}, {
									"case":	140,
									"scores":	[-6.316145176212963]
								}, {
									"case":	141,
									"scores":	[-6.316145176212963]
								}, {
									"case":	142,
									"scores":	[-6.316145176212963]
								}, {
									"case":	143,
									"scores":	[-6.316145176212963]
								}, {
									"case":	144,
									"scores":	[-6.316145176212963]
								}, {
									"case":	145,
									"scores":	[-6.316145176212963]
								}, {
									"case":	146,
									"scores":	[-6.316145176212963]
								}, {
									"case":	147,
									"scores":	[-6.316145176212963]
								}, {
									"case":	148,
									"scores":	[-6.316145176212963]
								}, {
									"case":	149,
									"scores":	[-6.316145176212963]
								}, {
									"case":	150,
									"scores":	[-6.316145176212963]
								}, {
									"case":	151,
									"scores":	[-6.316145176212963]
								}, {
									"case":	152,
									"scores":	[-6.316145176212963]
								}, {
									"case":	153,
									"scores":	[-6.316145176212963]
								}, {
									"case":	154,
									"scores":	[-6.316145176212963]
								}, {
									"case":	155,
									"scores":	[-6.316145176212963]
								}, {
									"case":	156,
									"scores":	[-6.316145176212963]
								}, {
									"case":	157,
									"scores":	[-6.316145176212963]
								}, {
									"case":	158,
									"scores":	[-6.316145176212963]
								}, {
									"case":	159,
									"scores":	[-6.316145176212963]
								}, {
									"case":	160,
									"scores":	[-6.316145176212963]
								}, {
									"case":	161,
									"scores":	[-6.316145176212963]
								}, {
									"case":	162,
									"scores":	[-6.316145176212963]
								}, {
									"case":	163,
									"scores":	[-6.316145176212963]
								}, {
									"case":	164,
									"scores":	[-6.316145176212963]
								}, {
									"case":	165,
									"scores":	[-6.316145176212963]
								}, {
									"case":	166,
									"scores":	[-6.316145176212963]
								}, {
									"case":	167,
									"scores":	[-6.316145176212963]
								}, {
									"case":	168,
									"scores":	[-6.316145176212963]
								}, {
									"case":	169,
									"scores":	[-6.316145176212963]
								}, {
									"case":	170,
									"scores":	[-6.316145176212963]
								}, {
									"case":	171,
									"scores":	[-6.316145176212963]
								}, {
									"case":	172,
									"scores":	[-6.316145176212963]
								}, {
									"case":	173,
									"scores":	[-6.316145176212963]
								}, {
									"case":	174,
									"scores":	[-6.316145176212963]
								}, {
									"case":	175,
									"scores":	[-6.316145176212963]
								}, {
									"case":	176,
									"scores":	[-6.316145176212963]
								}, {
									"case":	177,
									"scores":	[-6.316145176212963]
								}, {
									"case":	178,
									"scores":	[-6.316145176212963]
								}, {
									"case":	179,
									"scores":	[-6.316145176212963]
								}, {
									"case":	180,
									"scores":	[-6.316145176212963]
								}, {
									"case":	181,
									"scores":	[-6.316145176212963]
								}, {
									"case":	182,
									"scores":	[-6.316145176212963]
								}, {
									"case":	183,
									"scores":	[-6.316145176212963]
								}, {
									"case":	184,
									"scores":	[-6.316145176212963]
								}, {
									"case":	185,
									"scores":	[-6.316145176212963]
								}, {
									"case":	186,
									"scores":	[-6.316145176212963]
								}, {
									"case":	187,
									"scores":	[-6.316145176212963]
								}, {
									"case":	188,
									"scores":	[-6.316145176212963]
								}, {
									"case":	189,
									"scores":	[-6.316145176212963]
								}, {
									"case":	190,
									"scores":	[-6.316145176212963]
								}, {
									"case":	191,
									"scores":	[-6.316145176212963]
								}, {
									"case":	192,
									"scores":	[-6.316145176212963]
								}, {
									"case":	193,
									"scores":	[-6.316145176212963]
								}, {
									"case":	194,
									"scores":	[-6.316145176212963]
								}, {
									"case":	195,
									"scores":	[-6.316145176212963]
								}, {
									"case":	196,
									"scores":	[-6.316145176212963]
								}, {
									"case":	197,
									"scores":	[-6.316145176212963]
								}, {
									"case":	198,
									"scores":	[-6.316145176212963]
								}, {
									"case":	199,
									"scores":	[-6.316145176212963]
								}, {
									"case":	200,
									"scores":	[-7.7908794883129628, -7.7908794883129628, -7.7908794883129628, -7.7908794883129628, -7.7908794883129628, -7.7908794883129628]
								}, {
									"case":	201,
									"scores":	[-7.8907876883129635, -7.8907876883129635, -7.8907876883129635, -7.8907876883129635, -7.8907876883129635, -7.8907876883129635]
								}, {
									"case":	202,
									"scores":	[-10.153569488312964, -10.153569488312964, -10.153569488312964, -10.153569488312964, -10.153569488312964, -10.153569488312964]
								}, {
									"case":	203,
									"scores":	[-10.153569488312964, -10.153569488312964, -10.153569488312964, -10.153569488312964, -10.153569488312964, -10.153569488312964]
								}]
						}, {
							"switch":	15,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	595,
							"begin_column":	2,
							"end_line":	595,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L595\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1933277792129626, -7.1933277792129626, -7.1933277792129626, -7.1933277792129626, -7.1933277792129626, -7.1933277792129626]
								}]
						}]
				}, {
					"line":	593,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	594,
							"begin_column":	5,
							"end_line":	594,
							"end_column":	5,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.356550590848]
								}, {
									"case":	2,
									"scores":	[-6.356550590848]
								}, {
									"case":	3,
									"scores":	[-6.356550590848]
								}, {
									"case":	4,
									"scores":	[-6.356550590848]
								}, {
									"case":	5,
									"scores":	[-6.356550590848]
								}, {
									"case":	6,
									"scores":	[-6.356550590848]
								}, {
									"case":	7,
									"scores":	[-6.356550590848]
								}, {
									"case":	8,
									"scores":	[-6.356550590848]
								}, {
									"case":	9,
									"scores":	[-6.356550590848]
								}, {
									"case":	10,
									"scores":	[-6.356550590848]
								}, {
									"case":	11,
									"scores":	[-6.356550590848]
								}, {
									"case":	12,
									"scores":	[-6.356550590848]
								}, {
									"case":	13,
									"scores":	[-6.356550590848]
								}, {
									"case":	14,
									"scores":	[-6.356550590848]
								}, {
									"case":	15,
									"scores":	[-6.356550590848]
								}, {
									"case":	16,
									"scores":	[-6.356550590848]
								}, {
									"case":	17,
									"scores":	[-6.356550590848]
								}, {
									"case":	18,
									"scores":	[-6.356550590848]
								}, {
									"case":	19,
									"scores":	[-6.356550590848]
								}, {
									"case":	20,
									"scores":	[-6.356550590848]
								}, {
									"case":	21,
									"scores":	[-6.356550590848]
								}, {
									"case":	22,
									"scores":	[-6.356550590848]
								}, {
									"case":	23,
									"scores":	[-6.356550590848]
								}, {
									"case":	24,
									"scores":	[-6.356550590848]
								}, {
									"case":	25,
									"scores":	[-6.356550590848]
								}, {
									"case":	26,
									"scores":	[-6.356550590848]
								}, {
									"case":	27,
									"scores":	[-6.356550590848]
								}, {
									"case":	28,
									"scores":	[-6.356550590848]
								}, {
									"case":	29,
									"scores":	[-6.356550590848]
								}, {
									"case":	30,
									"scores":	[-6.356550590848]
								}, {
									"case":	31,
									"scores":	[-6.356550590848]
								}, {
									"case":	32,
									"scores":	[-6.356550590848]
								}, {
									"case":	33,
									"scores":	[-6.356550590848]
								}, {
									"case":	34,
									"scores":	[-6.356550590848]
								}, {
									"case":	35,
									"scores":	[-6.356550590848]
								}, {
									"case":	36,
									"scores":	[-6.356550590848]
								}, {
									"case":	37,
									"scores":	[-6.356550590848]
								}, {
									"case":	38,
									"scores":	[-6.356550590848]
								}, {
									"case":	39,
									"scores":	[-6.356550590848]
								}, {
									"case":	40,
									"scores":	[-6.356550590848]
								}, {
									"case":	41,
									"scores":	[-6.356550590848]
								}, {
									"case":	42,
									"scores":	[-6.356550590848]
								}, {
									"case":	43,
									"scores":	[-6.356550590848]
								}, {
									"case":	44,
									"scores":	[-6.356550590848]
								}, {
									"case":	45,
									"scores":	[-6.356550590848]
								}, {
									"case":	46,
									"scores":	[-6.356550590848]
								}, {
									"case":	47,
									"scores":	[-6.356550590848]
								}, {
									"case":	48,
									"scores":	[-6.356550590848]
								}, {
									"case":	49,
									"scores":	[-6.356550590848]
								}, {
									"case":	50,
									"scores":	[-6.356550590848]
								}, {
									"case":	51,
									"scores":	[-6.356550590848]
								}, {
									"case":	52,
									"scores":	[-6.356550590848]
								}, {
									"case":	53,
									"scores":	[-6.356550590848]
								}, {
									"case":	54,
									"scores":	[-6.356550590848]
								}, {
									"case":	55,
									"scores":	[-6.356550590848]
								}, {
									"case":	56,
									"scores":	[-6.356550590848]
								}, {
									"case":	57,
									"scores":	[-6.356550590848]
								}, {
									"case":	58,
									"scores":	[-6.356550590848]
								}, {
									"case":	59,
									"scores":	[-6.356550590848]
								}, {
									"case":	60,
									"scores":	[-6.356550590848]
								}, {
									"case":	61,
									"scores":	[-6.356550590848]
								}, {
									"case":	62,
									"scores":	[-6.356550590848]
								}, {
									"case":	63,
									"scores":	[-6.356550590848]
								}, {
									"case":	64,
									"scores":	[-6.356550590848]
								}, {
									"case":	65,
									"scores":	[-6.356550590848]
								}, {
									"case":	66,
									"scores":	[-6.356550590848]
								}, {
									"case":	67,
									"scores":	[-6.356550590848]
								}, {
									"case":	68,
									"scores":	[-6.356550590848]
								}, {
									"case":	69,
									"scores":	[-6.356550590848]
								}, {
									"case":	70,
									"scores":	[-6.356550590848]
								}, {
									"case":	71,
									"scores":	[-6.356550590848]
								}, {
									"case":	72,
									"scores":	[-6.356550590848]
								}, {
									"case":	73,
									"scores":	[-6.356550590848]
								}, {
									"case":	74,
									"scores":	[-6.356550590848]
								}, {
									"case":	75,
									"scores":	[-6.356550590848]
								}, {
									"case":	76,
									"scores":	[-6.356550590848]
								}, {
									"case":	77,
									"scores":	[-6.356550590848]
								}, {
									"case":	78,
									"scores":	[-6.356550590848]
								}, {
									"case":	79,
									"scores":	[-6.356550590848]
								}, {
									"case":	80,
									"scores":	[-6.356550590848]
								}, {
									"case":	81,
									"scores":	[-6.356550590848]
								}, {
									"case":	82,
									"scores":	[-6.356550590848]
								}, {
									"case":	83,
									"scores":	[-6.356550590848]
								}, {
									"case":	84,
									"scores":	[-6.356550590848]
								}, {
									"case":	85,
									"scores":	[-6.356550590848]
								}, {
									"case":	86,
									"scores":	[-6.356550590848]
								}, {
									"case":	87,
									"scores":	[-6.356550590848]
								}, {
									"case":	88,
									"scores":	[-6.356550590848]
								}, {
									"case":	89,
									"scores":	[-6.356550590848]
								}, {
									"case":	90,
									"scores":	[-6.356550590848]
								}, {
									"case":	91,
									"scores":	[-6.356550590848]
								}, {
									"case":	92,
									"scores":	[-6.356550590848]
								}, {
									"case":	93,
									"scores":	[-6.356550590848]
								}, {
									"case":	94,
									"scores":	[-6.356550590848]
								}, {
									"case":	95,
									"scores":	[-6.356550590848]
								}, {
									"case":	96,
									"scores":	[-6.356550590848]
								}, {
									"case":	97,
									"scores":	[-6.356550590848]
								}, {
									"case":	98,
									"scores":	[-6.356550590848]
								}, {
									"case":	99,
									"scores":	[-6.356550590848]
								}, {
									"case":	100,
									"scores":	[-6.356550590848]
								}, {
									"case":	101,
									"scores":	[-6.356550590848]
								}, {
									"case":	102,
									"scores":	[-6.356550590848]
								}, {
									"case":	103,
									"scores":	[-6.356550590848]
								}, {
									"case":	104,
									"scores":	[-6.356550590848]
								}, {
									"case":	105,
									"scores":	[-6.356550590848]
								}, {
									"case":	106,
									"scores":	[-6.356550590848]
								}, {
									"case":	107,
									"scores":	[-6.356550590848]
								}, {
									"case":	108,
									"scores":	[-6.356550590848]
								}, {
									"case":	109,
									"scores":	[-6.356550590848]
								}, {
									"case":	110,
									"scores":	[-6.356550590848]
								}, {
									"case":	111,
									"scores":	[-6.356550590848]
								}, {
									"case":	112,
									"scores":	[-6.356550590848]
								}, {
									"case":	113,
									"scores":	[-6.356550590848]
								}, {
									"case":	114,
									"scores":	[-6.356550590848]
								}, {
									"case":	115,
									"scores":	[-6.356550590848]
								}, {
									"case":	116,
									"scores":	[-6.356550590848]
								}, {
									"case":	117,
									"scores":	[-6.356550590848]
								}, {
									"case":	118,
									"scores":	[-6.356550590848]
								}, {
									"case":	119,
									"scores":	[-6.356550590848]
								}, {
									"case":	120,
									"scores":	[-6.356550590848]
								}, {
									"case":	121,
									"scores":	[-6.356550590848]
								}, {
									"case":	122,
									"scores":	[-6.356550590848]
								}, {
									"case":	123,
									"scores":	[-6.356550590848]
								}, {
									"case":	124,
									"scores":	[-6.356550590848]
								}, {
									"case":	125,
									"scores":	[-6.356550590848]
								}, {
									"case":	126,
									"scores":	[-6.356550590848]
								}, {
									"case":	127,
									"scores":	[-6.356550590848]
								}, {
									"case":	128,
									"scores":	[-6.356550590848]
								}, {
									"case":	129,
									"scores":	[-6.356550590848]
								}, {
									"case":	130,
									"scores":	[-6.356550590848]
								}, {
									"case":	131,
									"scores":	[-6.356550590848]
								}, {
									"case":	132,
									"scores":	[-6.356550590848]
								}, {
									"case":	133,
									"scores":	[-6.356550590848]
								}, {
									"case":	134,
									"scores":	[-6.356550590848]
								}, {
									"case":	135,
									"scores":	[-6.356550590848]
								}, {
									"case":	136,
									"scores":	[-6.356550590848]
								}, {
									"case":	137,
									"scores":	[-6.356550590848]
								}, {
									"case":	138,
									"scores":	[-6.356550590848]
								}, {
									"case":	139,
									"scores":	[-6.356550590848]
								}, {
									"case":	140,
									"scores":	[-6.356550590848]
								}, {
									"case":	141,
									"scores":	[-6.356550590848]
								}, {
									"case":	142,
									"scores":	[-6.356550590848]
								}, {
									"case":	143,
									"scores":	[-6.356550590848]
								}, {
									"case":	144,
									"scores":	[-6.356550590848]
								}, {
									"case":	145,
									"scores":	[-6.356550590848]
								}, {
									"case":	146,
									"scores":	[-6.356550590848]
								}, {
									"case":	147,
									"scores":	[-6.356550590848]
								}, {
									"case":	148,
									"scores":	[-6.356550590848]
								}, {
									"case":	149,
									"scores":	[-6.356550590848]
								}, {
									"case":	150,
									"scores":	[-6.356550590848]
								}, {
									"case":	151,
									"scores":	[-6.356550590848]
								}, {
									"case":	152,
									"scores":	[-6.356550590848]
								}, {
									"case":	153,
									"scores":	[-6.356550590848]
								}, {
									"case":	154,
									"scores":	[-6.356550590848]
								}, {
									"case":	155,
									"scores":	[-6.356550590848]
								}, {
									"case":	156,
									"scores":	[-6.356550590848]
								}, {
									"case":	157,
									"scores":	[-6.356550590848]
								}, {
									"case":	158,
									"scores":	[-6.356550590848]
								}, {
									"case":	159,
									"scores":	[-6.356550590848]
								}, {
									"case":	160,
									"scores":	[-6.356550590848]
								}, {
									"case":	161,
									"scores":	[-6.356550590848]
								}, {
									"case":	162,
									"scores":	[-6.356550590848]
								}, {
									"case":	163,
									"scores":	[-6.356550590848]
								}, {
									"case":	164,
									"scores":	[-6.356550590848]
								}, {
									"case":	165,
									"scores":	[-6.356550590848]
								}, {
									"case":	166,
									"scores":	[-6.356550590848]
								}, {
									"case":	167,
									"scores":	[-6.356550590848]
								}, {
									"case":	168,
									"scores":	[-6.356550590848]
								}, {
									"case":	169,
									"scores":	[-6.356550590848]
								}, {
									"case":	170,
									"scores":	[-6.356550590848]
								}, {
									"case":	171,
									"scores":	[-6.356550590848]
								}, {
									"case":	172,
									"scores":	[-6.356550590848]
								}, {
									"case":	173,
									"scores":	[-6.356550590848]
								}, {
									"case":	174,
									"scores":	[-6.356550590848]
								}, {
									"case":	175,
									"scores":	[-6.356550590848]
								}, {
									"case":	176,
									"scores":	[-6.356550590848]
								}, {
									"case":	177,
									"scores":	[-6.356550590848]
								}, {
									"case":	178,
									"scores":	[-6.356550590848]
								}, {
									"case":	179,
									"scores":	[-6.356550590848]
								}, {
									"case":	180,
									"scores":	[-6.356550590848]
								}, {
									"case":	181,
									"scores":	[-6.356550590848]
								}, {
									"case":	182,
									"scores":	[-6.356550590848]
								}, {
									"case":	183,
									"scores":	[-6.356550590848]
								}, {
									"case":	184,
									"scores":	[-6.356550590848]
								}, {
									"case":	185,
									"scores":	[-6.356550590848]
								}, {
									"case":	186,
									"scores":	[-6.356550590848]
								}, {
									"case":	187,
									"scores":	[-6.356550590848]
								}, {
									"case":	188,
									"scores":	[-6.356550590848]
								}, {
									"case":	189,
									"scores":	[-6.356550590848]
								}, {
									"case":	190,
									"scores":	[-6.356550590848]
								}, {
									"case":	191,
									"scores":	[-6.356550590848]
								}, {
									"case":	192,
									"scores":	[-6.356550590848]
								}, {
									"case":	193,
									"scores":	[-6.356550590848]
								}, {
									"case":	194,
									"scores":	[-6.356550590848]
								}, {
									"case":	195,
									"scores":	[-6.356550590848]
								}, {
									"case":	196,
									"scores":	[-6.356550590848]
								}, {
									"case":	197,
									"scores":	[-6.356550590848]
								}, {
									"case":	198,
									"scores":	[-6.356550590848]
								}, {
									"case":	199,
									"scores":	[-6.356550590848]
								}, {
									"case":	200,
									"scores":	[-9.258628193948, -9.258628193948, -9.655439358748, -9.655439358748, -9.255924193948, -9.255924193948]
								}, {
									"case":	201,
									"scores":	[-9.358536393948, -9.358536393948, -9.755347558748, -9.755347558748, -9.355832393948, -9.355832393948]
								}, {
									"case":	202,
									"scores":	[-11.621318193948, -11.621318193948, -12.018129358748, -12.018129358748, -11.618614193948, -11.618614193948]
								}, {
									"case":	203,
									"scores":	[-11.621318193948, -11.621318193948, -12.018129358748, -12.018129358748, -11.618614193948, -11.618614193948]
								}]
						}, {
							"switch":	13,
							"types":	[[52], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [3]],
							"begin_line":	594,
							"begin_column":	7,
							"end_line":	595,
							"end_column":	9,
							"patch_codes":	["if (__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if ((insize != 32768 || fill_inbuf(1) == (-1)) || __is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (insize != 32768)\n    return 1;\n", "if (insize != 32768 || __getpgid(1) == (-1))\n    return 1;\n", "if (insize != 32768 || _tolower(1) == (-1))\n    return 1;\n", "if (insize != 32768 || _toupper(1) == (-1))\n    return 1;\n", "if (insize != 32768 || abs(1) == (-1))\n    return 1;\n", "if (insize != 32768 || check_zipfile(1) == (-1))\n    return 1;\n", "if (insize != 32768 || close(1) == (-1))\n    return 1;\n", "if (insize != 32768 || dup(1) == (-1))\n    return 1;\n", "if (insize != 32768 || dysize(1) == (-1))\n    return 1;\n", "if (insize != 32768 || fchdir(1) == (-1))\n    return 1;\n", "if (insize != 32768 || fdatasync(1) == (-1))\n    return 1;\n", "if (insize != 32768 || ffs(1) == (-1))\n    return 1;\n", "if (insize != 32768 || fsync(1) == (-1))\n    return 1;\n", "if (insize != 32768 || get_method(1) == (-1))\n    return 1;\n", "if (insize != 32768 || getpgid(1) == (-1))\n    return 1;\n", "if (insize != 32768 || getsid(1) == (-1))\n    return 1;\n", "if (insize != 32768 || grantpt(1) == (-1))\n    return 1;\n", "if (insize != 32768 || gsignal(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isalnum(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isalpha(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isascii(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isatty(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isblank(1) == (-1))\n    return 1;\n", "if (insize != 32768 || iscntrl(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isdigit(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isgraph(1) == (-1))\n    return 1;\n", "if (insize != 32768 || islower(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isprint(1) == (-1))\n    return 1;\n", "if (insize != 32768 || ispunct(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isspace(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isupper(1) == (-1))\n    return 1;\n", "if (insize != 32768 || isxdigit(1) == (-1))\n    return 1;\n", "if (insize != 32768 || nice(1) == (-1))\n    return 1;\n", "if (insize != 32768 || posix_openpt(1) == (-1))\n    return 1;\n", "if (insize != 32768 || putchar(1) == (-1))\n    return 1;\n", "if (insize != 32768 || putchar_unlocked(1) == (-1))\n    return 1;\n", "if (insize != 32768 || raise(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigblock(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sighold(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigignore(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigpause(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigrelse(1) == (-1))\n    return 1;\n", "if (insize != 32768 || sigsetmask(1) == (-1))\n    return 1;\n", "if (insize != 32768 || syncfs(1) == (-1))\n    return 1;\n", "if (insize != 32768 || tcgetpgrp(1) == (-1))\n    return 1;\n", "if (insize != 32768 || toascii(1) == (-1))\n    return 1;\n", "if (insize != 32768 || tolower(1) == (-1))\n    return 1;\n", "if (insize != 32768 || toupper(1) == (-1))\n    return 1;\n", "if (insize != 32768 || unlockpt(1) == (-1))\n    return 1;\n", "if ((insize != 32768 || fill_inbuf(1) == (-1)) && !__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.5942885054281457, -1.5942885054281457, -4.7929542124281461, -4.7929542124281461, -3.8114895054281459, -3.8114895054281459]
								}, {
									"case":	2,
									"scores":	[-0.2348989094281464, -0.2348989094281464, -3.4335646164281455, -3.4335646164281455, -2.4520999094281457, -2.4520999094281457]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-0.2348989094281464, -0.2348989094281464, -3.4335646164281455, -3.4335646164281455, -2.4520999094281457, -2.4520999094281457]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	594,
							"begin_column":	7,
							"end_line":	595,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n", "if (!__is_neg(\"\", \"L594\", 6, &(insize), sizeof (insize), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)) && (insize != 32768 || fill_inbuf(1) == (-1)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3199978908480015, -5.3199978908480015, -8.518663597848, -8.518663597848, -7.537198890848, -7.537198890848]
								}, {
									"case":	2,
									"scores":	[-3.9614775978480008, -3.9614775978480008, -7.160143304848, -7.160143304848, -6.178678597848, -6.178678597848]
								}]
						}]
				}, {
					"line":	591,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [200, 201, 202, 203], [], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	592,
							"begin_column":	1,
							"end_line":	592,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return -1;\n", "if (__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 0;\n", "if (__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 1;\n", "if (__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    return 32768;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.39695600548304]
								}, {
									"case":	2,
									"scores":	[-6.39695600548304]
								}, {
									"case":	3,
									"scores":	[-6.39695600548304]
								}, {
									"case":	4,
									"scores":	[-6.39695600548304]
								}, {
									"case":	5,
									"scores":	[-6.39695600548304]
								}, {
									"case":	6,
									"scores":	[-6.39695600548304]
								}, {
									"case":	7,
									"scores":	[-6.39695600548304]
								}, {
									"case":	8,
									"scores":	[-6.39695600548304]
								}, {
									"case":	9,
									"scores":	[-6.39695600548304]
								}, {
									"case":	10,
									"scores":	[-6.39695600548304]
								}, {
									"case":	11,
									"scores":	[-6.39695600548304]
								}, {
									"case":	12,
									"scores":	[-6.39695600548304]
								}, {
									"case":	13,
									"scores":	[-6.39695600548304]
								}, {
									"case":	14,
									"scores":	[-6.39695600548304]
								}, {
									"case":	15,
									"scores":	[-6.39695600548304]
								}, {
									"case":	16,
									"scores":	[-6.39695600548304]
								}, {
									"case":	17,
									"scores":	[-6.39695600548304]
								}, {
									"case":	18,
									"scores":	[-6.39695600548304]
								}, {
									"case":	19,
									"scores":	[-6.39695600548304]
								}, {
									"case":	20,
									"scores":	[-6.39695600548304]
								}, {
									"case":	21,
									"scores":	[-6.39695600548304]
								}, {
									"case":	22,
									"scores":	[-6.39695600548304]
								}, {
									"case":	23,
									"scores":	[-6.39695600548304]
								}, {
									"case":	24,
									"scores":	[-6.39695600548304]
								}, {
									"case":	25,
									"scores":	[-6.39695600548304]
								}, {
									"case":	26,
									"scores":	[-6.39695600548304]
								}, {
									"case":	27,
									"scores":	[-6.39695600548304]
								}, {
									"case":	28,
									"scores":	[-6.39695600548304]
								}, {
									"case":	29,
									"scores":	[-6.39695600548304]
								}, {
									"case":	30,
									"scores":	[-6.39695600548304]
								}, {
									"case":	31,
									"scores":	[-6.39695600548304]
								}, {
									"case":	32,
									"scores":	[-6.39695600548304]
								}, {
									"case":	33,
									"scores":	[-6.39695600548304]
								}, {
									"case":	34,
									"scores":	[-6.39695600548304]
								}, {
									"case":	35,
									"scores":	[-6.39695600548304]
								}, {
									"case":	36,
									"scores":	[-6.39695600548304]
								}, {
									"case":	37,
									"scores":	[-6.39695600548304]
								}, {
									"case":	38,
									"scores":	[-6.39695600548304]
								}, {
									"case":	39,
									"scores":	[-6.39695600548304]
								}, {
									"case":	40,
									"scores":	[-6.39695600548304]
								}, {
									"case":	41,
									"scores":	[-6.39695600548304]
								}, {
									"case":	42,
									"scores":	[-6.39695600548304]
								}, {
									"case":	43,
									"scores":	[-6.39695600548304]
								}, {
									"case":	44,
									"scores":	[-6.39695600548304]
								}, {
									"case":	45,
									"scores":	[-6.39695600548304]
								}, {
									"case":	46,
									"scores":	[-6.39695600548304]
								}, {
									"case":	47,
									"scores":	[-6.39695600548304]
								}, {
									"case":	48,
									"scores":	[-6.39695600548304]
								}, {
									"case":	49,
									"scores":	[-6.39695600548304]
								}, {
									"case":	50,
									"scores":	[-6.39695600548304]
								}, {
									"case":	51,
									"scores":	[-6.39695600548304]
								}, {
									"case":	52,
									"scores":	[-6.39695600548304]
								}, {
									"case":	53,
									"scores":	[-6.39695600548304]
								}, {
									"case":	54,
									"scores":	[-6.39695600548304]
								}, {
									"case":	55,
									"scores":	[-6.39695600548304]
								}, {
									"case":	56,
									"scores":	[-6.39695600548304]
								}, {
									"case":	57,
									"scores":	[-6.39695600548304]
								}, {
									"case":	58,
									"scores":	[-6.39695600548304]
								}, {
									"case":	59,
									"scores":	[-6.39695600548304]
								}, {
									"case":	60,
									"scores":	[-6.39695600548304]
								}, {
									"case":	61,
									"scores":	[-6.39695600548304]
								}, {
									"case":	62,
									"scores":	[-6.39695600548304]
								}, {
									"case":	63,
									"scores":	[-6.39695600548304]
								}, {
									"case":	64,
									"scores":	[-6.39695600548304]
								}, {
									"case":	65,
									"scores":	[-6.39695600548304]
								}, {
									"case":	66,
									"scores":	[-6.39695600548304]
								}, {
									"case":	67,
									"scores":	[-6.39695600548304]
								}, {
									"case":	68,
									"scores":	[-6.39695600548304]
								}, {
									"case":	69,
									"scores":	[-6.39695600548304]
								}, {
									"case":	70,
									"scores":	[-6.39695600548304]
								}, {
									"case":	71,
									"scores":	[-6.39695600548304]
								}, {
									"case":	72,
									"scores":	[-6.39695600548304]
								}, {
									"case":	73,
									"scores":	[-6.39695600548304]
								}, {
									"case":	74,
									"scores":	[-6.39695600548304]
								}, {
									"case":	75,
									"scores":	[-6.39695600548304]
								}, {
									"case":	76,
									"scores":	[-6.39695600548304]
								}, {
									"case":	77,
									"scores":	[-6.39695600548304]
								}, {
									"case":	78,
									"scores":	[-6.39695600548304]
								}, {
									"case":	79,
									"scores":	[-6.39695600548304]
								}, {
									"case":	80,
									"scores":	[-6.39695600548304]
								}, {
									"case":	81,
									"scores":	[-6.39695600548304]
								}, {
									"case":	82,
									"scores":	[-6.39695600548304]
								}, {
									"case":	83,
									"scores":	[-6.39695600548304]
								}, {
									"case":	84,
									"scores":	[-6.39695600548304]
								}, {
									"case":	85,
									"scores":	[-6.39695600548304]
								}, {
									"case":	86,
									"scores":	[-6.39695600548304]
								}, {
									"case":	87,
									"scores":	[-6.39695600548304]
								}, {
									"case":	88,
									"scores":	[-6.39695600548304]
								}, {
									"case":	89,
									"scores":	[-6.39695600548304]
								}, {
									"case":	90,
									"scores":	[-6.39695600548304]
								}, {
									"case":	91,
									"scores":	[-6.39695600548304]
								}, {
									"case":	92,
									"scores":	[-6.39695600548304]
								}, {
									"case":	93,
									"scores":	[-6.39695600548304]
								}, {
									"case":	94,
									"scores":	[-6.39695600548304]
								}, {
									"case":	95,
									"scores":	[-6.39695600548304]
								}, {
									"case":	96,
									"scores":	[-6.39695600548304]
								}, {
									"case":	97,
									"scores":	[-6.39695600548304]
								}, {
									"case":	98,
									"scores":	[-6.39695600548304]
								}, {
									"case":	99,
									"scores":	[-6.39695600548304]
								}, {
									"case":	100,
									"scores":	[-6.39695600548304]
								}, {
									"case":	101,
									"scores":	[-6.39695600548304]
								}, {
									"case":	102,
									"scores":	[-6.39695600548304]
								}, {
									"case":	103,
									"scores":	[-6.39695600548304]
								}, {
									"case":	104,
									"scores":	[-6.39695600548304]
								}, {
									"case":	105,
									"scores":	[-6.39695600548304]
								}, {
									"case":	106,
									"scores":	[-6.39695600548304]
								}, {
									"case":	107,
									"scores":	[-6.39695600548304]
								}, {
									"case":	108,
									"scores":	[-6.39695600548304]
								}, {
									"case":	109,
									"scores":	[-6.39695600548304]
								}, {
									"case":	110,
									"scores":	[-6.39695600548304]
								}, {
									"case":	111,
									"scores":	[-6.39695600548304]
								}, {
									"case":	112,
									"scores":	[-6.39695600548304]
								}, {
									"case":	113,
									"scores":	[-6.39695600548304]
								}, {
									"case":	114,
									"scores":	[-6.39695600548304]
								}, {
									"case":	115,
									"scores":	[-6.39695600548304]
								}, {
									"case":	116,
									"scores":	[-6.39695600548304]
								}, {
									"case":	117,
									"scores":	[-6.39695600548304]
								}, {
									"case":	118,
									"scores":	[-6.39695600548304]
								}, {
									"case":	119,
									"scores":	[-6.39695600548304]
								}, {
									"case":	120,
									"scores":	[-6.39695600548304]
								}, {
									"case":	121,
									"scores":	[-6.39695600548304]
								}, {
									"case":	122,
									"scores":	[-6.39695600548304]
								}, {
									"case":	123,
									"scores":	[-6.39695600548304]
								}, {
									"case":	124,
									"scores":	[-6.39695600548304]
								}, {
									"case":	125,
									"scores":	[-6.39695600548304]
								}, {
									"case":	126,
									"scores":	[-6.39695600548304]
								}, {
									"case":	127,
									"scores":	[-6.39695600548304]
								}, {
									"case":	128,
									"scores":	[-6.39695600548304]
								}, {
									"case":	129,
									"scores":	[-6.39695600548304]
								}, {
									"case":	130,
									"scores":	[-6.39695600548304]
								}, {
									"case":	131,
									"scores":	[-6.39695600548304]
								}, {
									"case":	132,
									"scores":	[-6.39695600548304]
								}, {
									"case":	133,
									"scores":	[-6.39695600548304]
								}, {
									"case":	134,
									"scores":	[-6.39695600548304]
								}, {
									"case":	135,
									"scores":	[-6.39695600548304]
								}, {
									"case":	136,
									"scores":	[-6.39695600548304]
								}, {
									"case":	137,
									"scores":	[-6.39695600548304]
								}, {
									"case":	138,
									"scores":	[-6.39695600548304]
								}, {
									"case":	139,
									"scores":	[-6.39695600548304]
								}, {
									"case":	140,
									"scores":	[-6.39695600548304]
								}, {
									"case":	141,
									"scores":	[-6.39695600548304]
								}, {
									"case":	142,
									"scores":	[-6.39695600548304]
								}, {
									"case":	143,
									"scores":	[-6.39695600548304]
								}, {
									"case":	144,
									"scores":	[-6.39695600548304]
								}, {
									"case":	145,
									"scores":	[-6.39695600548304]
								}, {
									"case":	146,
									"scores":	[-6.39695600548304]
								}, {
									"case":	147,
									"scores":	[-6.39695600548304]
								}, {
									"case":	148,
									"scores":	[-6.39695600548304]
								}, {
									"case":	149,
									"scores":	[-6.39695600548304]
								}, {
									"case":	150,
									"scores":	[-6.39695600548304]
								}, {
									"case":	151,
									"scores":	[-6.39695600548304]
								}, {
									"case":	152,
									"scores":	[-6.39695600548304]
								}, {
									"case":	153,
									"scores":	[-6.39695600548304]
								}, {
									"case":	154,
									"scores":	[-6.39695600548304]
								}, {
									"case":	155,
									"scores":	[-6.39695600548304]
								}, {
									"case":	156,
									"scores":	[-6.39695600548304]
								}, {
									"case":	157,
									"scores":	[-6.39695600548304]
								}, {
									"case":	158,
									"scores":	[-6.39695600548304]
								}, {
									"case":	159,
									"scores":	[-6.39695600548304]
								}, {
									"case":	160,
									"scores":	[-6.39695600548304]
								}, {
									"case":	161,
									"scores":	[-6.39695600548304]
								}, {
									"case":	162,
									"scores":	[-6.39695600548304]
								}, {
									"case":	163,
									"scores":	[-6.39695600548304]
								}, {
									"case":	164,
									"scores":	[-6.39695600548304]
								}, {
									"case":	165,
									"scores":	[-6.39695600548304]
								}, {
									"case":	166,
									"scores":	[-6.39695600548304]
								}, {
									"case":	167,
									"scores":	[-6.39695600548304]
								}, {
									"case":	168,
									"scores":	[-6.39695600548304]
								}, {
									"case":	169,
									"scores":	[-6.39695600548304]
								}, {
									"case":	170,
									"scores":	[-6.39695600548304]
								}, {
									"case":	171,
									"scores":	[-6.39695600548304]
								}, {
									"case":	172,
									"scores":	[-6.39695600548304]
								}, {
									"case":	173,
									"scores":	[-6.39695600548304]
								}, {
									"case":	174,
									"scores":	[-6.39695600548304]
								}, {
									"case":	175,
									"scores":	[-6.39695600548304]
								}, {
									"case":	176,
									"scores":	[-6.39695600548304]
								}, {
									"case":	177,
									"scores":	[-6.39695600548304]
								}, {
									"case":	178,
									"scores":	[-6.39695600548304]
								}, {
									"case":	179,
									"scores":	[-6.39695600548304]
								}, {
									"case":	180,
									"scores":	[-6.39695600548304]
								}, {
									"case":	181,
									"scores":	[-6.39695600548304]
								}, {
									"case":	182,
									"scores":	[-6.39695600548304]
								}, {
									"case":	183,
									"scores":	[-6.39695600548304]
								}, {
									"case":	184,
									"scores":	[-6.39695600548304]
								}, {
									"case":	185,
									"scores":	[-6.39695600548304]
								}, {
									"case":	186,
									"scores":	[-6.39695600548304]
								}, {
									"case":	187,
									"scores":	[-6.39695600548304]
								}, {
									"case":	188,
									"scores":	[-6.39695600548304]
								}, {
									"case":	189,
									"scores":	[-6.39695600548304]
								}, {
									"case":	190,
									"scores":	[-6.39695600548304]
								}, {
									"case":	191,
									"scores":	[-6.39695600548304]
								}, {
									"case":	192,
									"scores":	[-6.39695600548304]
								}, {
									"case":	193,
									"scores":	[-6.39695600548304]
								}, {
									"case":	194,
									"scores":	[-6.39695600548304]
								}, {
									"case":	195,
									"scores":	[-6.39695600548304]
								}, {
									"case":	196,
									"scores":	[-6.39695600548304]
								}, {
									"case":	197,
									"scores":	[-6.39695600548304]
								}, {
									"case":	198,
									"scores":	[-6.39695600548304]
								}, {
									"case":	199,
									"scores":	[-6.39695600548304]
								}, {
									"case":	200,
									"scores":	[-10.119495608583041, -10.42791814128304, -10.119495608583041, -10.42791814128304, -10.116791608583039, -10.116791608583039]
								}, {
									"case":	201,
									"scores":	[-10.21940380858304, -10.52782634128304, -10.21940380858304, -10.52782634128304, -10.216699808583041, -10.216699808583041]
								}, {
									"case":	202,
									"scores":	[-12.482185608583041, -12.790608141283041, -12.482185608583041, -12.790608141283041, -12.47948160858304, -12.47948160858304]
								}, {
									"case":	203,
									"scores":	[-12.482185608583041, -12.790608141283041, -12.482185608583041, -12.790608141283041, -12.47948160858304, -12.47948160858304]
								}]
						}, {
							"switch":	11,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	592,
							"begin_column":	3,
							"end_line":	599,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member))) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n", "if ((inptr == insize) || __is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member))) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n", "if ((inptr == insize) && !__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member))) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.2998944931281455, -3.2081229661281458, -2.2998944931281455, -3.2081229661281458, -4.5170954931281457, -4.5170954931281457]
								}, {
									"case":	2,
									"scores":	[-1.7063931721281462, -2.6146216451281461, -1.7063931721281462, -2.6146216451281461, -3.923594172128146, -3.923594172128146]
								}, {
									"case":	3,
									"scores":	[-1.7063931721281462, -2.6146216451281461, -1.7063931721281462, -2.6146216451281461, -3.923594172128146, -3.923594172128146]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	592,
							"begin_column":	3,
							"end_line":	599,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)))\n    if (inptr == insize) {\n        if (insize != 32768 || fill_inbuf(1) == (-1))\n            return 1;\n        inptr = 0;\n    }\n", "if (!__is_neg(\"\", \"L592\", 6, &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(insize), sizeof (insize), &(inptr), sizeof (inptr), &(decompress), sizeof (decompress), &(last_member), sizeof (last_member)) && (inptr == insize)) {\n    if (insize != 32768 || fill_inbuf(1) == (-1))\n        return 1;\n    inptr = 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.79761260848304, -6.70584108148304, -5.79761260848304, -6.70584108148304, -8.01481360848304, -8.01481360848304]
								}, {
									"case":	2,
									"scores":	[-5.40945807518304, -6.31768654818304, -5.40945807518304, -6.31768654818304, -7.62665907518304, -7.62665907518304]
								}]
						}]
				}, {
					"line":	655,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	656,
							"begin_column":	0,
							"end_line":	656,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L656\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.053441956650782]
								}, {
									"case":	2,
									"scores":	[-4.053441956650782]
								}, {
									"case":	3,
									"scores":	[-4.053441956650782]
								}, {
									"case":	4,
									"scores":	[-4.053441956650782]
								}, {
									"case":	5,
									"scores":	[-4.053441956650782]
								}, {
									"case":	6,
									"scores":	[-4.053441956650782]
								}, {
									"case":	7,
									"scores":	[-4.053441956650782]
								}, {
									"case":	8,
									"scores":	[-4.053441956650782]
								}, {
									"case":	9,
									"scores":	[-4.053441956650782]
								}, {
									"case":	10,
									"scores":	[-4.053441956650782]
								}, {
									"case":	11,
									"scores":	[-4.053441956650782]
								}, {
									"case":	12,
									"scores":	[-4.053441956650782]
								}, {
									"case":	13,
									"scores":	[-4.053441956650782]
								}, {
									"case":	14,
									"scores":	[-4.053441956650782]
								}, {
									"case":	15,
									"scores":	[-4.053441956650782]
								}, {
									"case":	16,
									"scores":	[-4.053441956650782]
								}, {
									"case":	17,
									"scores":	[-4.053441956650782]
								}, {
									"case":	18,
									"scores":	[-4.053441956650782]
								}, {
									"case":	19,
									"scores":	[-4.053441956650782]
								}, {
									"case":	20,
									"scores":	[-4.053441956650782]
								}, {
									"case":	21,
									"scores":	[-4.053441956650782]
								}, {
									"case":	22,
									"scores":	[-4.053441956650782]
								}, {
									"case":	23,
									"scores":	[-4.053441956650782]
								}, {
									"case":	24,
									"scores":	[-4.053441956650782]
								}, {
									"case":	25,
									"scores":	[-4.053441956650782]
								}, {
									"case":	26,
									"scores":	[-4.053441956650782]
								}, {
									"case":	27,
									"scores":	[-4.053441956650782]
								}, {
									"case":	28,
									"scores":	[-4.053441956650782]
								}, {
									"case":	29,
									"scores":	[-4.053441956650782]
								}, {
									"case":	30,
									"scores":	[-4.053441956650782]
								}, {
									"case":	31,
									"scores":	[-4.053441956650782]
								}, {
									"case":	32,
									"scores":	[-4.053441956650782]
								}, {
									"case":	33,
									"scores":	[-4.053441956650782]
								}, {
									"case":	34,
									"scores":	[-4.053441956650782]
								}, {
									"case":	35,
									"scores":	[-4.053441956650782]
								}, {
									"case":	36,
									"scores":	[-4.053441956650782]
								}, {
									"case":	37,
									"scores":	[-4.053441956650782]
								}, {
									"case":	38,
									"scores":	[-4.053441956650782]
								}, {
									"case":	39,
									"scores":	[-4.053441956650782]
								}, {
									"case":	40,
									"scores":	[-4.053441956650782]
								}, {
									"case":	41,
									"scores":	[-4.053441956650782]
								}, {
									"case":	42,
									"scores":	[-4.053441956650782]
								}, {
									"case":	43,
									"scores":	[-4.053441956650782]
								}, {
									"case":	44,
									"scores":	[-4.053441956650782]
								}, {
									"case":	45,
									"scores":	[-4.053441956650782]
								}, {
									"case":	46,
									"scores":	[-4.053441956650782]
								}, {
									"case":	47,
									"scores":	[-4.053441956650782]
								}, {
									"case":	48,
									"scores":	[-4.053441956650782]
								}, {
									"case":	49,
									"scores":	[-4.053441956650782]
								}, {
									"case":	50,
									"scores":	[-4.053441956650782]
								}, {
									"case":	51,
									"scores":	[-4.053441956650782]
								}, {
									"case":	52,
									"scores":	[-4.053441956650782]
								}, {
									"case":	53,
									"scores":	[-4.053441956650782]
								}, {
									"case":	54,
									"scores":	[-4.053441956650782]
								}, {
									"case":	55,
									"scores":	[-4.053441956650782]
								}, {
									"case":	56,
									"scores":	[-4.053441956650782]
								}, {
									"case":	57,
									"scores":	[-4.053441956650782]
								}, {
									"case":	58,
									"scores":	[-4.053441956650782]
								}, {
									"case":	59,
									"scores":	[-4.053441956650782]
								}, {
									"case":	60,
									"scores":	[-4.053441956650782]
								}, {
									"case":	61,
									"scores":	[-4.053441956650782]
								}, {
									"case":	62,
									"scores":	[-4.053441956650782]
								}, {
									"case":	63,
									"scores":	[-4.053441956650782]
								}, {
									"case":	64,
									"scores":	[-4.053441956650782]
								}, {
									"case":	65,
									"scores":	[-4.053441956650782]
								}, {
									"case":	66,
									"scores":	[-4.053441956650782]
								}, {
									"case":	67,
									"scores":	[-4.053441956650782]
								}, {
									"case":	68,
									"scores":	[-4.053441956650782]
								}, {
									"case":	69,
									"scores":	[-4.053441956650782]
								}, {
									"case":	70,
									"scores":	[-4.053441956650782]
								}, {
									"case":	71,
									"scores":	[-4.053441956650782]
								}, {
									"case":	72,
									"scores":	[-4.053441956650782]
								}, {
									"case":	73,
									"scores":	[-4.053441956650782]
								}, {
									"case":	74,
									"scores":	[-4.053441956650782]
								}, {
									"case":	75,
									"scores":	[-4.053441956650782]
								}, {
									"case":	76,
									"scores":	[-4.053441956650782]
								}, {
									"case":	77,
									"scores":	[-4.053441956650782]
								}, {
									"case":	78,
									"scores":	[-4.053441956650782]
								}, {
									"case":	79,
									"scores":	[-4.053441956650782]
								}, {
									"case":	80,
									"scores":	[-4.053441956650782]
								}, {
									"case":	81,
									"scores":	[-4.053441956650782]
								}, {
									"case":	82,
									"scores":	[-4.053441956650782]
								}, {
									"case":	83,
									"scores":	[-4.053441956650782]
								}, {
									"case":	84,
									"scores":	[-4.053441956650782]
								}, {
									"case":	85,
									"scores":	[-4.053441956650782]
								}, {
									"case":	86,
									"scores":	[-4.053441956650782]
								}, {
									"case":	87,
									"scores":	[-4.053441956650782]
								}, {
									"case":	88,
									"scores":	[-4.053441956650782]
								}, {
									"case":	89,
									"scores":	[-4.053441956650782]
								}, {
									"case":	90,
									"scores":	[-4.053441956650782]
								}, {
									"case":	91,
									"scores":	[-4.053441956650782]
								}, {
									"case":	92,
									"scores":	[-4.053441956650782]
								}, {
									"case":	93,
									"scores":	[-4.053441956650782]
								}, {
									"case":	94,
									"scores":	[-4.053441956650782]
								}, {
									"case":	95,
									"scores":	[-4.053441956650782]
								}, {
									"case":	96,
									"scores":	[-4.053441956650782]
								}, {
									"case":	97,
									"scores":	[-4.053441956650782]
								}, {
									"case":	98,
									"scores":	[-4.053441956650782]
								}, {
									"case":	99,
									"scores":	[-4.053441956650782]
								}, {
									"case":	100,
									"scores":	[-4.053441956650782]
								}, {
									"case":	101,
									"scores":	[-4.053441956650782]
								}, {
									"case":	102,
									"scores":	[-4.053441956650782]
								}, {
									"case":	103,
									"scores":	[-4.053441956650782]
								}, {
									"case":	104,
									"scores":	[-4.053441956650782]
								}, {
									"case":	105,
									"scores":	[-4.053441956650782]
								}, {
									"case":	106,
									"scores":	[-4.053441956650782]
								}, {
									"case":	107,
									"scores":	[-4.053441956650782]
								}, {
									"case":	108,
									"scores":	[-4.053441956650782]
								}, {
									"case":	109,
									"scores":	[-4.053441956650782]
								}, {
									"case":	110,
									"scores":	[-4.053441956650782]
								}, {
									"case":	111,
									"scores":	[-4.053441956650782]
								}, {
									"case":	112,
									"scores":	[-4.053441956650782]
								}, {
									"case":	113,
									"scores":	[-4.053441956650782]
								}, {
									"case":	114,
									"scores":	[-4.053441956650782]
								}, {
									"case":	115,
									"scores":	[-4.053441956650782]
								}, {
									"case":	116,
									"scores":	[-4.053441956650782]
								}, {
									"case":	117,
									"scores":	[-4.053441956650782]
								}, {
									"case":	118,
									"scores":	[-4.053441956650782]
								}, {
									"case":	119,
									"scores":	[-4.053441956650782]
								}, {
									"case":	120,
									"scores":	[-4.053441956650782]
								}, {
									"case":	121,
									"scores":	[-4.053441956650782]
								}, {
									"case":	122,
									"scores":	[-4.053441956650782]
								}, {
									"case":	123,
									"scores":	[-4.053441956650782]
								}, {
									"case":	124,
									"scores":	[-4.053441956650782]
								}, {
									"case":	125,
									"scores":	[-4.053441956650782]
								}, {
									"case":	126,
									"scores":	[-4.053441956650782]
								}, {
									"case":	127,
									"scores":	[-4.053441956650782]
								}, {
									"case":	128,
									"scores":	[-4.053441956650782]
								}, {
									"case":	129,
									"scores":	[-4.053441956650782]
								}, {
									"case":	130,
									"scores":	[-4.053441956650782]
								}, {
									"case":	131,
									"scores":	[-4.053441956650782]
								}, {
									"case":	132,
									"scores":	[-4.053441956650782]
								}, {
									"case":	133,
									"scores":	[-4.053441956650782]
								}, {
									"case":	134,
									"scores":	[-4.053441956650782]
								}, {
									"case":	135,
									"scores":	[-4.053441956650782]
								}, {
									"case":	136,
									"scores":	[-4.053441956650782]
								}, {
									"case":	137,
									"scores":	[-4.053441956650782]
								}, {
									"case":	138,
									"scores":	[-4.053441956650782]
								}, {
									"case":	139,
									"scores":	[-4.053441956650782]
								}, {
									"case":	140,
									"scores":	[-4.053441956650782]
								}, {
									"case":	141,
									"scores":	[-4.053441956650782]
								}, {
									"case":	142,
									"scores":	[-4.053441956650782]
								}, {
									"case":	143,
									"scores":	[-4.053441956650782]
								}, {
									"case":	144,
									"scores":	[-4.053441956650782]
								}, {
									"case":	145,
									"scores":	[-4.053441956650782]
								}, {
									"case":	146,
									"scores":	[-4.053441956650782]
								}, {
									"case":	147,
									"scores":	[-4.053441956650782]
								}, {
									"case":	148,
									"scores":	[-4.053441956650782]
								}, {
									"case":	149,
									"scores":	[-4.053441956650782]
								}, {
									"case":	150,
									"scores":	[-4.053441956650782]
								}, {
									"case":	151,
									"scores":	[-4.053441956650782]
								}, {
									"case":	152,
									"scores":	[-4.053441956650782]
								}, {
									"case":	153,
									"scores":	[-4.053441956650782]
								}, {
									"case":	154,
									"scores":	[-4.053441956650782]
								}, {
									"case":	155,
									"scores":	[-4.053441956650782]
								}, {
									"case":	156,
									"scores":	[-4.053441956650782]
								}, {
									"case":	157,
									"scores":	[-4.053441956650782]
								}, {
									"case":	158,
									"scores":	[-4.053441956650782]
								}, {
									"case":	159,
									"scores":	[-4.053441956650782]
								}, {
									"case":	160,
									"scores":	[-4.053441956650782]
								}, {
									"case":	161,
									"scores":	[-4.053441956650782]
								}, {
									"case":	162,
									"scores":	[-4.053441956650782]
								}, {
									"case":	163,
									"scores":	[-4.053441956650782]
								}, {
									"case":	164,
									"scores":	[-4.053441956650782]
								}, {
									"case":	165,
									"scores":	[-4.053441956650782]
								}, {
									"case":	166,
									"scores":	[-4.053441956650782]
								}, {
									"case":	167,
									"scores":	[-4.053441956650782]
								}, {
									"case":	168,
									"scores":	[-4.053441956650782]
								}, {
									"case":	169,
									"scores":	[-4.053441956650782]
								}, {
									"case":	170,
									"scores":	[-4.053441956650782]
								}, {
									"case":	171,
									"scores":	[-4.053441956650782]
								}, {
									"case":	172,
									"scores":	[-4.053441956650782]
								}, {
									"case":	173,
									"scores":	[-4.053441956650782]
								}, {
									"case":	174,
									"scores":	[-4.053441956650782]
								}, {
									"case":	175,
									"scores":	[-4.053441956650782]
								}, {
									"case":	176,
									"scores":	[-4.053441956650782]
								}, {
									"case":	177,
									"scores":	[-4.053441956650782]
								}, {
									"case":	178,
									"scores":	[-4.053441956650782]
								}, {
									"case":	179,
									"scores":	[-4.053441956650782]
								}, {
									"case":	180,
									"scores":	[-4.053441956650782]
								}, {
									"case":	181,
									"scores":	[-4.053441956650782]
								}, {
									"case":	182,
									"scores":	[-4.053441956650782]
								}, {
									"case":	183,
									"scores":	[-4.053441956650782]
								}, {
									"case":	184,
									"scores":	[-4.053441956650782]
								}, {
									"case":	185,
									"scores":	[-4.053441956650782]
								}, {
									"case":	186,
									"scores":	[-4.053441956650782]
								}, {
									"case":	187,
									"scores":	[-4.053441956650782]
								}, {
									"case":	188,
									"scores":	[-4.053441956650782]
								}, {
									"case":	189,
									"scores":	[-4.053441956650782]
								}, {
									"case":	190,
									"scores":	[-4.053441956650782]
								}, {
									"case":	191,
									"scores":	[-4.053441956650782]
								}, {
									"case":	192,
									"scores":	[-4.053441956650782]
								}, {
									"case":	193,
									"scores":	[-4.053441956650782]
								}, {
									"case":	194,
									"scores":	[-4.053441956650782]
								}, {
									"case":	195,
									"scores":	[-4.053441956650782]
								}, {
									"case":	196,
									"scores":	[-4.053441956650782]
								}, {
									"case":	197,
									"scores":	[-4.053441956650782]
								}, {
									"case":	198,
									"scores":	[-4.053441956650782]
								}, {
									"case":	199,
									"scores":	[-4.053441956650782]
								}, {
									"case":	200,
									"scores":	[-4.053441956650782]
								}, {
									"case":	201,
									"scores":	[-4.053441956650782]
								}, {
									"case":	202,
									"scores":	[-4.053441956650782]
								}, {
									"case":	203,
									"scores":	[-4.053441956650782]
								}, {
									"case":	204,
									"scores":	[-4.053441956650782]
								}, {
									"case":	205,
									"scores":	[-4.053441956650782]
								}, {
									"case":	206,
									"scores":	[-4.053441956650782]
								}, {
									"case":	207,
									"scores":	[-4.053441956650782]
								}, {
									"case":	208,
									"scores":	[-4.053441956650782]
								}, {
									"case":	209,
									"scores":	[-4.053441956650782]
								}, {
									"case":	210,
									"scores":	[-4.053441956650782]
								}, {
									"case":	211,
									"scores":	[-4.053441956650782]
								}, {
									"case":	212,
									"scores":	[-4.053441956650782]
								}, {
									"case":	213,
									"scores":	[-4.053441956650782]
								}, {
									"case":	214,
									"scores":	[-4.053441956650782]
								}, {
									"case":	215,
									"scores":	[-4.053441956650782]
								}, {
									"case":	216,
									"scores":	[-4.053441956650782]
								}, {
									"case":	217,
									"scores":	[-4.053441956650782]
								}, {
									"case":	218,
									"scores":	[-4.053441956650782]
								}, {
									"case":	219,
									"scores":	[-4.053441956650782]
								}, {
									"case":	220,
									"scores":	[-4.053441956650782]
								}, {
									"case":	221,
									"scores":	[-4.053441956650782]
								}, {
									"case":	222,
									"scores":	[-4.053441956650782]
								}, {
									"case":	223,
									"scores":	[-4.053441956650782]
								}, {
									"case":	224,
									"scores":	[-4.053441956650782]
								}, {
									"case":	225,
									"scores":	[-4.053441956650782]
								}, {
									"case":	226,
									"scores":	[-4.053441956650782]
								}, {
									"case":	227,
									"scores":	[-4.053441956650782]
								}, {
									"case":	228,
									"scores":	[-4.053441956650782]
								}, {
									"case":	229,
									"scores":	[-4.053441956650782]
								}, {
									"case":	230,
									"scores":	[-4.053441956650782]
								}, {
									"case":	231,
									"scores":	[-4.053441956650782]
								}, {
									"case":	232,
									"scores":	[-4.053441956650782]
								}, {
									"case":	233,
									"scores":	[-4.053441956650782]
								}, {
									"case":	234,
									"scores":	[-4.053441956650782]
								}, {
									"case":	235,
									"scores":	[-4.053441956650782]
								}, {
									"case":	236,
									"scores":	[-4.053441956650782]
								}, {
									"case":	237,
									"scores":	[-4.053441956650782]
								}, {
									"case":	238,
									"scores":	[-4.053441956650782]
								}, {
									"case":	239,
									"scores":	[-4.053441956650782]
								}, {
									"case":	240,
									"scores":	[-4.053441956650782]
								}, {
									"case":	241,
									"scores":	[-4.053441956650782]
								}, {
									"case":	242,
									"scores":	[-4.053441956650782]
								}, {
									"case":	243,
									"scores":	[-6.1243484969507822, -4.5645332697507817, -6.1243484969507822, -4.5645332697507817, -6.4289406597507819, -6.5775116597507814, -6.5775116597507814, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.4289406597507819, -6.518363359750782, -6.518363359750782, -6.4289406597507819]
								}]
						}, {
							"switch":	20,
							"types":	[[], [], [1], [], [], [], [612, 613, 614, 615, 616], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], [], [], [562]],
							"begin_line":	656,
							"begin_column":	2,
							"end_line":	656,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L656\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(decompress), sizeof (decompress), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(test), sizeof (test), &(ascii), sizeof (ascii), &(test), sizeof (test), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    method = get_method(ifd);\n", "_IO_putc(ifd, 0)", "__tolower_l(ifd, 0)", "__toupper_l(ifd, 0)", "clock_adjtime(ifd, 0)", "clock_getcpuclockid(ifd, 0)", "clock_getres(ifd, 0)", "clock_gettime(ifd, 0)", "clock_settime(ifd, 0)", "copy(ifd, -1)", "copy(ifd, 0)", "copy(ifd, 1)", "copy(ifd, 32768)", "copy(ifd, 61440)", "copy(ifd, ascii)", "copy(ifd, block_mode)", "copy(ifd, decompress)", "copy(ifd, decrypt)", "copy(ifd, do_lzw)", "copy(ifd, exit_code)", "copy(ifd, exiting_signal)", "copy(ifd, force)", "copy(ifd, foreground)", "copy(ifd, ifd)", "copy(ifd, last_member)", "copy(ifd, level)", "copy(ifd, list)", "copy(ifd, maxbits)", "copy(ifd, method)", "copy(ifd, no_name)", "copy(ifd, no_time)", "copy(ifd, ofd)", "copy(ifd, part_nb)", "copy(ifd, quiet)", "copy(ifd, recursive)", "copy(ifd, remove_ofname_fd)", "copy(ifd, save_orig_name)", "copy(ifd, test)", "copy(ifd, to_stdout)", "copy(ifd, verbose)", "ct_tally(ifd, -1)", "ct_tally(ifd, 0)", "ct_tally(ifd, 1)", "ct_tally(ifd, 32768)", "ct_tally(ifd, 61440)", "ct_tally(ifd, ascii)", "ct_tally(ifd, block_mode)", "ct_tally(ifd, decompress)", "ct_tally(ifd, decrypt)", "ct_tally(ifd, do_lzw)", "ct_tally(ifd, exit_code)", "ct_tally(ifd, exiting_signal)", "ct_tally(ifd, force)", "ct_tally(ifd, foreground)", "ct_tally(ifd, ifd)", "ct_tally(ifd, last_member)", "ct_tally(ifd, level)", "ct_tally(ifd, list)", "ct_tally(ifd, maxbits)", "ct_tally(ifd, method)", "ct_tally(ifd, no_name)", "ct_tally(ifd, no_time)", "ct_tally(ifd, ofd)", "ct_tally(ifd, part_nb)", "ct_tally(ifd, quiet)", "ct_tally(ifd, recursive)", "ct_tally(ifd, remove_ofname_fd)", "ct_tally(ifd, save_orig_name)", "ct_tally(ifd, test)", "ct_tally(ifd, to_stdout)", "ct_tally(ifd, verbose)", "daemon(ifd, -1)", "daemon(ifd, 0)", "daemon(ifd, 1)", "daemon(ifd, 32768)", "daemon(ifd, 61440)", "daemon(ifd, ascii)", "daemon(ifd, block_mode)", "daemon(ifd, decompress)", "daemon(ifd, decrypt)", "daemon(ifd, do_lzw)", "daemon(ifd, exit_code)", "daemon(ifd, exiting_signal)", "daemon(ifd, force)", "daemon(ifd, foreground)", "daemon(ifd, ifd)", "daemon(ifd, last_member)", "daemon(ifd, level)", "daemon(ifd, list)", "daemon(ifd, maxbits)", "daemon(ifd, method)", "daemon(ifd, no_name)", "daemon(ifd, no_time)", "daemon(ifd, ofd)", "daemon(ifd, part_nb)", "daemon(ifd, quiet)", "daemon(ifd, recursive)", "daemon(ifd, remove_ofname_fd)", "daemon(ifd, save_orig_name)", "daemon(ifd, test)", "daemon(ifd, to_stdout)", "daemon(ifd, verbose)", "dup2(ifd, -1)", "dup2(ifd, 0)", "dup2(ifd, 1)", "dup2(ifd, 32768)", "dup2(ifd, 61440)", "dup2(ifd, ascii)", "dup2(ifd, block_mode)", "dup2(ifd, decompress)", "dup2(ifd, decrypt)", "dup2(ifd, do_lzw)", "dup2(ifd, exit_code)", "dup2(ifd, exiting_signal)", "dup2(ifd, force)", "dup2(ifd, foreground)", "dup2(ifd, ifd)", "dup2(ifd, last_member)", "dup2(ifd, level)", "dup2(ifd, list)", "dup2(ifd, maxbits)", "dup2(ifd, method)", "dup2(ifd, no_name)", "dup2(ifd, no_time)", "dup2(ifd, ofd)", "dup2(ifd, part_nb)", "dup2(ifd, quiet)", "dup2(ifd, recursive)", "dup2(ifd, remove_ofname_fd)", "dup2(ifd, save_orig_name)", "dup2(ifd, test)", "dup2(ifd, to_stdout)", "dup2(ifd, verbose)", "fchmod(ifd, -1)", "fchmod(ifd, 0)", "fchmod(ifd, 1)", "fchmod(ifd, 32768)", "fchmod(ifd, 61440)", "fchmod(ifd, inptr)", "fchmod(ifd, insize)", "fchmod(ifd, outcnt)", "fputc(ifd, 0)", "fputc_unlocked(ifd, 0)", "fstat(ifd, 0)", "fstat64(ifd, 0)", "ftruncate(ifd, -1)", "ftruncate(ifd, 0)", "ftruncate(ifd, 1)", "ftruncate(ifd, 32768)", "ftruncate(ifd, 61440)", "ftruncate(ifd, bytes_in)", "ftruncate(ifd, bytes_out)", "ftruncate(ifd, header_bytes)", "ftruncate(ifd, ifile_size)", "ftruncate(ifd, total_in)", "ftruncate(ifd, total_out)", "ftruncate64(ifd, -1)", "ftruncate64(ifd, 0)", "ftruncate64(ifd, 1)", "ftruncate64(ifd, 32768)", "ftruncate64(ifd, 61440)", "ftruncate64(ifd, bytes_in)", "ftruncate64(ifd, bytes_out)", "ftruncate64(ifd, header_bytes)", "ftruncate64(ifd, ifile_size)", "ftruncate64(ifd, total_in)", "ftruncate64(ifd, total_out)", "futimens(ifd, 0)", "getgroups(ifd, 0)", "isalnum_l(ifd, 0)", "isalpha_l(ifd, 0)", "isblank_l(ifd, 0)", "iscntrl_l(ifd, 0)", "isctype(ifd, -1)", "isctype(ifd, 0)", "isctype(ifd, 1)", "isctype(ifd, 32768)", "isctype(ifd, 61440)", "isctype(ifd, ascii)", "isctype(ifd, block_mode)", "isctype(ifd, decompress)", "isctype(ifd, decrypt)", "isctype(ifd, do_lzw)", "isctype(ifd, exit_code)", "isctype(ifd, exiting_signal)", "isctype(ifd, force)", "isctype(ifd, foreground)", "isctype(ifd, ifd)", "isctype(ifd, last_member)", "isctype(ifd, level)", "isctype(ifd, list)", "isctype(ifd, maxbits)", "isctype(ifd, method)", "isctype(ifd, no_name)", "isctype(ifd, no_time)", "isctype(ifd, ofd)", "isctype(ifd, part_nb)", "isctype(ifd, quiet)", "isctype(ifd, recursive)", "isctype(ifd, remove_ofname_fd)", "isctype(ifd, save_orig_name)", "isctype(ifd, test)", "isctype(ifd, to_stdout)", "isctype(ifd, verbose)", "isdigit_l(ifd, 0)", "isgraph_l(ifd, 0)", "islower_l(ifd, 0)", "isprint_l(ifd, 0)", "ispunct_l(ifd, 0)", "isspace_l(ifd, 0)", "isupper_l(ifd, 0)", "isxdigit_l(ifd, 0)", "kill(ifd, -1)", "kill(ifd, 0)", "kill(ifd, 1)", "kill(ifd, 32768)", "kill(ifd, 61440)", "kill(ifd, ascii)", "kill(ifd, block_mode)", "kill(ifd, decompress)", "kill(ifd, decrypt)", "kill(ifd, do_lzw)", "kill(ifd, exit_code)", "kill(ifd, exiting_signal)", "kill(ifd, force)", "kill(ifd, foreground)", "kill(ifd, ifd)", "kill(ifd, last_member)", "kill(ifd, level)", "kill(ifd, list)", "kill(ifd, maxbits)", "kill(ifd, method)", "kill(ifd, no_name)", "kill(ifd, no_time)", "kill(ifd, ofd)", "kill(ifd, part_nb)", "kill(ifd, quiet)", "kill(ifd, recursive)", "kill(ifd, remove_ofname_fd)", "kill(ifd, save_orig_name)", "kill(ifd, test)", "kill(ifd, to_stdout)", "kill(ifd, verbose)", "killpg(ifd, -1)", "killpg(ifd, 0)", "killpg(ifd, 1)", "killpg(ifd, 32768)", "killpg(ifd, 61440)", "killpg(ifd, ascii)", "killpg(ifd, block_mode)", "killpg(ifd, decompress)", "killpg(ifd, decrypt)", "killpg(ifd, do_lzw)", "killpg(ifd, exit_code)", "killpg(ifd, exiting_signal)", "killpg(ifd, force)", "killpg(ifd, foreground)", "killpg(ifd, ifd)", "killpg(ifd, last_member)", "killpg(ifd, level)", "killpg(ifd, list)", "killpg(ifd, maxbits)", "killpg(ifd, method)", "killpg(ifd, no_name)", "killpg(ifd, no_time)", "killpg(ifd, ofd)", "killpg(ifd, part_nb)", "killpg(ifd, quiet)", "killpg(ifd, recursive)", "killpg(ifd, remove_ofname_fd)", "killpg(ifd, save_orig_name)", "killpg(ifd, test)", "killpg(ifd, to_stdout)", "killpg(ifd, verbose)", "lzw(ifd, -1)", "lzw(ifd, 0)", "lzw(ifd, 1)", "lzw(ifd, 32768)", "lzw(ifd, 61440)", "lzw(ifd, ascii)", "lzw(ifd, block_mode)", "lzw(ifd, decompress)", "lzw(ifd, decrypt)", "lzw(ifd, do_lzw)", "lzw(ifd, exit_code)", "lzw(ifd, exiting_signal)", "lzw(ifd, force)", "lzw(ifd, foreground)", "lzw(ifd, ifd)", "lzw(ifd, last_member)", "lzw(ifd, level)", "lzw(ifd, list)", "lzw(ifd, maxbits)", "lzw(ifd, method)", "lzw(ifd, no_name)", "lzw(ifd, no_time)", "lzw(ifd, ofd)", "lzw(ifd, part_nb)", "lzw(ifd, quiet)", "lzw(ifd, recursive)", "lzw(ifd, remove_ofname_fd)", "lzw(ifd, save_orig_name)", "lzw(ifd, test)", "lzw(ifd, to_stdout)", "lzw(ifd, verbose)", "main(ifd, 0)", "main(ifd, args)", "putc(ifd, 0)", "putc_unlocked(ifd, 0)", "putw(ifd, 0)", "setpgid(ifd, -1)", "setpgid(ifd, 0)", "setpgid(ifd, 1)", "setpgid(ifd, 32768)", "setpgid(ifd, 61440)", "setpgid(ifd, ascii)", "setpgid(ifd, block_mode)", "setpgid(ifd, decompress)", "setpgid(ifd, decrypt)", "setpgid(ifd, do_lzw)", "setpgid(ifd, exit_code)", "setpgid(ifd, exiting_signal)", "setpgid(ifd, force)", "setpgid(ifd, foreground)", "setpgid(ifd, ifd)", "setpgid(ifd, last_member)", "setpgid(ifd, level)", "setpgid(ifd, list)", "setpgid(ifd, maxbits)", "setpgid(ifd, method)", "setpgid(ifd, no_name)", "setpgid(ifd, no_time)", "setpgid(ifd, ofd)", "setpgid(ifd, part_nb)", "setpgid(ifd, quiet)", "setpgid(ifd, recursive)", "setpgid(ifd, remove_ofname_fd)", "setpgid(ifd, save_orig_name)", "setpgid(ifd, test)", "setpgid(ifd, to_stdout)", "setpgid(ifd, verbose)", "siginterrupt(ifd, -1)", "siginterrupt(ifd, 0)", "siginterrupt(ifd, 1)", "siginterrupt(ifd, 32768)", "siginterrupt(ifd, 61440)", "siginterrupt(ifd, ascii)", "siginterrupt(ifd, block_mode)", "siginterrupt(ifd, decompress)", "siginterrupt(ifd, decrypt)", "siginterrupt(ifd, do_lzw)", "siginterrupt(ifd, exit_code)", "siginterrupt(ifd, exiting_signal)", "siginterrupt(ifd, force)", "siginterrupt(ifd, foreground)", "siginterrupt(ifd, ifd)", "siginterrupt(ifd, last_member)", "siginterrupt(ifd, level)", "siginterrupt(ifd, list)", "siginterrupt(ifd, maxbits)", "siginterrupt(ifd, method)", "siginterrupt(ifd, no_name)", "siginterrupt(ifd, no_time)", "siginterrupt(ifd, ofd)", "siginterrupt(ifd, part_nb)", "siginterrupt(ifd, quiet)", "siginterrupt(ifd, recursive)", "siginterrupt(ifd, remove_ofname_fd)", "siginterrupt(ifd, save_orig_name)", "siginterrupt(ifd, test)", "siginterrupt(ifd, to_stdout)", "siginterrupt(ifd, verbose)", "tcsetpgrp(ifd, -1)", "tcsetpgrp(ifd, 0)", "tcsetpgrp(ifd, 1)", "tcsetpgrp(ifd, 32768)", "tcsetpgrp(ifd, 61440)", "tcsetpgrp(ifd, ascii)", "tcsetpgrp(ifd, block_mode)", "tcsetpgrp(ifd, decompress)", "tcsetpgrp(ifd, decrypt)", "tcsetpgrp(ifd, do_lzw)", "tcsetpgrp(ifd, exit_code)", "tcsetpgrp(ifd, exiting_signal)", "tcsetpgrp(ifd, force)", "tcsetpgrp(ifd, foreground)", "tcsetpgrp(ifd, ifd)", "tcsetpgrp(ifd, last_member)", "tcsetpgrp(ifd, level)", "tcsetpgrp(ifd, list)", "tcsetpgrp(ifd, maxbits)", "tcsetpgrp(ifd, method)", "tcsetpgrp(ifd, no_name)", "tcsetpgrp(ifd, no_time)", "tcsetpgrp(ifd, ofd)", "tcsetpgrp(ifd, part_nb)", "tcsetpgrp(ifd, quiet)", "tcsetpgrp(ifd, recursive)", "tcsetpgrp(ifd, remove_ofname_fd)", "tcsetpgrp(ifd, save_orig_name)", "tcsetpgrp(ifd, test)", "tcsetpgrp(ifd, to_stdout)", "tcsetpgrp(ifd, verbose)", "tolower_l(ifd, 0)", "toupper_l(ifd, 0)", "ungetc(ifd, 0)", "unlzh(ifd, -1)", "unlzh(ifd, 0)", "unlzh(ifd, 1)", "unlzh(ifd, 32768)", "unlzh(ifd, 61440)", "unlzh(ifd, ascii)", "unlzh(ifd, block_mode)", "unlzh(ifd, decompress)", "unlzh(ifd, decrypt)", "unlzh(ifd, do_lzw)", "unlzh(ifd, exit_code)", "unlzh(ifd, exiting_signal)", "unlzh(ifd, force)", "unlzh(ifd, foreground)", "unlzh(ifd, ifd)", "unlzh(ifd, last_member)", "unlzh(ifd, level)", "unlzh(ifd, list)", "unlzh(ifd, maxbits)", "unlzh(ifd, method)", "unlzh(ifd, no_name)", "unlzh(ifd, no_time)", "unlzh(ifd, ofd)", "unlzh(ifd, part_nb)", "unlzh(ifd, quiet)", "unlzh(ifd, recursive)", "unlzh(ifd, remove_ofname_fd)", "unlzh(ifd, save_orig_name)", "unlzh(ifd, test)", "unlzh(ifd, to_stdout)", "unlzh(ifd, verbose)", "unlzw(ifd, -1)", "unlzw(ifd, 0)", "unlzw(ifd, 1)", "unlzw(ifd, 32768)", "unlzw(ifd, 61440)", "unlzw(ifd, ascii)", "unlzw(ifd, block_mode)", "unlzw(ifd, decompress)", "unlzw(ifd, decrypt)", "unlzw(ifd, do_lzw)", "unlzw(ifd, exit_code)", "unlzw(ifd, exiting_signal)", "unlzw(ifd, force)", "unlzw(ifd, foreground)", "unlzw(ifd, ifd)", "unlzw(ifd, last_member)", "unlzw(ifd, level)", "unlzw(ifd, list)", "unlzw(ifd, maxbits)", "unlzw(ifd, method)", "unlzw(ifd, no_name)", "unlzw(ifd, no_time)", "unlzw(ifd, ofd)", "unlzw(ifd, part_nb)", "unlzw(ifd, quiet)", "unlzw(ifd, recursive)", "unlzw(ifd, remove_ofname_fd)", "unlzw(ifd, save_orig_name)", "unlzw(ifd, test)", "unlzw(ifd, to_stdout)", "unlzw(ifd, verbose)", "unpack(ifd, -1)", "unpack(ifd, 0)", "unpack(ifd, 1)", "unpack(ifd, 32768)", "unpack(ifd, 61440)", "unpack(ifd, ascii)", "unpack(ifd, block_mode)", "unpack(ifd, decompress)", "unpack(ifd, decrypt)", "unpack(ifd, do_lzw)", "unpack(ifd, exit_code)", "unpack(ifd, exiting_signal)", "unpack(ifd, force)", "unpack(ifd, foreground)", "unpack(ifd, ifd)", "unpack(ifd, last_member)", "unpack(ifd, level)", "unpack(ifd, list)", "unpack(ifd, maxbits)", "unpack(ifd, method)", "unpack(ifd, no_name)", "unpack(ifd, no_time)", "unpack(ifd, ofd)", "unpack(ifd, part_nb)", "unpack(ifd, quiet)", "unpack(ifd, recursive)", "unpack(ifd, remove_ofname_fd)", "unpack(ifd, save_orig_name)", "unpack(ifd, test)", "unpack(ifd, to_stdout)", "unpack(ifd, verbose)", "unzip(ifd, -1)", "unzip(ifd, 0)", "unzip(ifd, 1)", "unzip(ifd, 32768)", "unzip(ifd, 61440)", "unzip(ifd, ascii)", "unzip(ifd, block_mode)", "unzip(ifd, decompress)", "unzip(ifd, decrypt)", "unzip(ifd, do_lzw)", "unzip(ifd, exit_code)", "unzip(ifd, exiting_signal)", "unzip(ifd, force)", "unzip(ifd, foreground)", "unzip(ifd, ifd)", "unzip(ifd, last_member)", "unzip(ifd, level)", "unzip(ifd, list)", "unzip(ifd, maxbits)", "unzip(ifd, method)", "unzip(ifd, no_name)", "unzip(ifd, no_time)", "unzip(ifd, ofd)", "unzip(ifd, part_nb)", "unzip(ifd, quiet)", "unzip(ifd, recursive)", "unzip(ifd, remove_ofname_fd)", "unzip(ifd, save_orig_name)", "unzip(ifd, test)", "unzip(ifd, to_stdout)", "unzip(ifd, verbose)", "zip(ifd, -1)", "zip(ifd, 0)", "zip(ifd, 1)", "zip(ifd, 32768)", "zip(ifd, 61440)", "zip(ifd, ascii)", "zip(ifd, block_mode)", "zip(ifd, decompress)", "zip(ifd, decrypt)", "zip(ifd, do_lzw)", "zip(ifd, exit_code)", "zip(ifd, exiting_signal)", "zip(ifd, force)", "zip(ifd, foreground)", "zip(ifd, ifd)", "zip(ifd, last_member)", "zip(ifd, level)", "zip(ifd, list)", "zip(ifd, maxbits)", "zip(ifd, method)", "zip(ifd, no_name)", "zip(ifd, no_time)", "zip(ifd, ofd)", "zip(ifd, part_nb)", "zip(ifd, quiet)", "zip(ifd, recursive)", "zip(ifd, remove_ofname_fd)", "zip(ifd, save_orig_name)", "zip(ifd, test)", "zip(ifd, to_stdout)", "zip(ifd, verbose)", "{\n}\n", "method = __getpgid(ifd)", "method = _tolower(ifd)", "method = _toupper(ifd)", "method = abs(ifd)", "method = check_zipfile(ifd)", "method = close(ifd)", "method = dup(ifd)", "method = dysize(ifd)", "method = fchdir(ifd)", "method = fdatasync(ifd)", "method = ffs(ifd)", "method = fill_inbuf(ifd)", "method = fsync(ifd)", "method = get_method(ifd)", "method = getpgid(ifd)", "method = getsid(ifd)", "method = grantpt(ifd)", "method = gsignal(ifd)", "method = isalnum(ifd)", "method = isalpha(ifd)", "method = isascii(ifd)", "method = isatty(ifd)", "method = isblank(ifd)", "method = iscntrl(ifd)", "method = isdigit(ifd)", "method = isgraph(ifd)", "method = islower(ifd)", "method = isprint(ifd)", "method = ispunct(ifd)", "method = isspace(ifd)", "method = isupper(ifd)", "method = isxdigit(ifd)", "method = nice(ifd)", "method = posix_openpt(ifd)", "method = putchar(ifd)", "method = putchar_unlocked(ifd)", "method = raise(ifd)", "method = sigblock(ifd)", "method = sighold(ifd)", "method = sigignore(ifd)", "method = sigpause(ifd)", "method = sigrelse(ifd)", "method = sigsetmask(ifd)", "method = syncfs(ifd)", "method = tcgetpgrp(ifd)", "method = toascii(ifd)", "method = tolower(ifd)", "method = toupper(ifd)", "method = unlockpt(ifd)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5444463686507817, -4.4934031096507816, -4.5444463686507817, -4.4934031096507816, -5.6112847366507816, -5.0368393366507815, -5.0368393366507815, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -5.6112847366507816, -6.0482497366507815, -6.0482497366507815, -5.6112847366507816]
								}, {
									"case":	2,
									"scores":	[-4.053441956650782]
								}, {
									"case":	3,
									"scores":	[-4.053441956650782]
								}, {
									"case":	4,
									"scores":	[-4.053441956650782]
								}, {
									"case":	5,
									"scores":	[-4.053441956650782]
								}, {
									"case":	6,
									"scores":	[-4.053441956650782]
								}, {
									"case":	7,
									"scores":	[-4.053441956650782]
								}, {
									"case":	8,
									"scores":	[-4.053441956650782]
								}, {
									"case":	9,
									"scores":	[-4.053441956650782]
								}, {
									"case":	10,
									"scores":	[-4.053441956650782]
								}, {
									"case":	11,
									"scores":	[-4.053441956650782]
								}, {
									"case":	12,
									"scores":	[-4.053441956650782]
								}, {
									"case":	13,
									"scores":	[-4.053441956650782]
								}, {
									"case":	14,
									"scores":	[-4.053441956650782]
								}, {
									"case":	15,
									"scores":	[-4.053441956650782]
								}, {
									"case":	16,
									"scores":	[-4.053441956650782]
								}, {
									"case":	17,
									"scores":	[-4.053441956650782]
								}, {
									"case":	18,
									"scores":	[-4.053441956650782]
								}, {
									"case":	19,
									"scores":	[-4.053441956650782]
								}, {
									"case":	20,
									"scores":	[-4.053441956650782]
								}, {
									"case":	21,
									"scores":	[-4.053441956650782]
								}, {
									"case":	22,
									"scores":	[-4.053441956650782]
								}, {
									"case":	23,
									"scores":	[-4.053441956650782]
								}, {
									"case":	24,
									"scores":	[-4.053441956650782]
								}, {
									"case":	25,
									"scores":	[-4.053441956650782]
								}, {
									"case":	26,
									"scores":	[-4.053441956650782]
								}, {
									"case":	27,
									"scores":	[-4.053441956650782]
								}, {
									"case":	28,
									"scores":	[-4.053441956650782]
								}, {
									"case":	29,
									"scores":	[-4.053441956650782]
								}, {
									"case":	30,
									"scores":	[-4.053441956650782]
								}, {
									"case":	31,
									"scores":	[-4.053441956650782]
								}, {
									"case":	32,
									"scores":	[-4.053441956650782]
								}, {
									"case":	33,
									"scores":	[-4.053441956650782]
								}, {
									"case":	34,
									"scores":	[-4.053441956650782]
								}, {
									"case":	35,
									"scores":	[-4.053441956650782]
								}, {
									"case":	36,
									"scores":	[-4.053441956650782]
								}, {
									"case":	37,
									"scores":	[-4.053441956650782]
								}, {
									"case":	38,
									"scores":	[-4.053441956650782]
								}, {
									"case":	39,
									"scores":	[-4.053441956650782]
								}, {
									"case":	40,
									"scores":	[-4.053441956650782]
								}, {
									"case":	41,
									"scores":	[-4.053441956650782]
								}, {
									"case":	42,
									"scores":	[-4.053441956650782]
								}, {
									"case":	43,
									"scores":	[-4.053441956650782]
								}, {
									"case":	44,
									"scores":	[-4.053441956650782]
								}, {
									"case":	45,
									"scores":	[-4.053441956650782]
								}, {
									"case":	46,
									"scores":	[-4.053441956650782]
								}, {
									"case":	47,
									"scores":	[-4.053441956650782]
								}, {
									"case":	48,
									"scores":	[-4.053441956650782]
								}, {
									"case":	49,
									"scores":	[-4.053441956650782]
								}, {
									"case":	50,
									"scores":	[-4.053441956650782]
								}, {
									"case":	51,
									"scores":	[-4.053441956650782]
								}, {
									"case":	52,
									"scores":	[-4.053441956650782]
								}, {
									"case":	53,
									"scores":	[-4.053441956650782]
								}, {
									"case":	54,
									"scores":	[-4.053441956650782]
								}, {
									"case":	55,
									"scores":	[-4.053441956650782]
								}, {
									"case":	56,
									"scores":	[-4.053441956650782]
								}, {
									"case":	57,
									"scores":	[-4.053441956650782]
								}, {
									"case":	58,
									"scores":	[-4.053441956650782]
								}, {
									"case":	59,
									"scores":	[-4.053441956650782]
								}, {
									"case":	60,
									"scores":	[-4.053441956650782]
								}, {
									"case":	61,
									"scores":	[-4.053441956650782]
								}, {
									"case":	62,
									"scores":	[-4.053441956650782]
								}, {
									"case":	63,
									"scores":	[-4.053441956650782]
								}, {
									"case":	64,
									"scores":	[-4.053441956650782]
								}, {
									"case":	65,
									"scores":	[-4.053441956650782]
								}, {
									"case":	66,
									"scores":	[-4.053441956650782]
								}, {
									"case":	67,
									"scores":	[-4.053441956650782]
								}, {
									"case":	68,
									"scores":	[-4.053441956650782]
								}, {
									"case":	69,
									"scores":	[-4.053441956650782]
								}, {
									"case":	70,
									"scores":	[-4.053441956650782]
								}, {
									"case":	71,
									"scores":	[-4.053441956650782]
								}, {
									"case":	72,
									"scores":	[-4.053441956650782]
								}, {
									"case":	73,
									"scores":	[-4.053441956650782]
								}, {
									"case":	74,
									"scores":	[-4.053441956650782]
								}, {
									"case":	75,
									"scores":	[-4.053441956650782]
								}, {
									"case":	76,
									"scores":	[-4.053441956650782]
								}, {
									"case":	77,
									"scores":	[-4.053441956650782]
								}, {
									"case":	78,
									"scores":	[-4.053441956650782]
								}, {
									"case":	79,
									"scores":	[-4.053441956650782]
								}, {
									"case":	80,
									"scores":	[-4.053441956650782]
								}, {
									"case":	81,
									"scores":	[-4.053441956650782]
								}, {
									"case":	82,
									"scores":	[-4.053441956650782]
								}, {
									"case":	83,
									"scores":	[-4.053441956650782]
								}, {
									"case":	84,
									"scores":	[-4.053441956650782]
								}, {
									"case":	85,
									"scores":	[-4.053441956650782]
								}, {
									"case":	86,
									"scores":	[-4.053441956650782]
								}, {
									"case":	87,
									"scores":	[-4.053441956650782]
								}, {
									"case":	88,
									"scores":	[-4.053441956650782]
								}, {
									"case":	89,
									"scores":	[-4.053441956650782]
								}, {
									"case":	90,
									"scores":	[-4.053441956650782]
								}, {
									"case":	91,
									"scores":	[-4.053441956650782]
								}, {
									"case":	92,
									"scores":	[-4.053441956650782]
								}, {
									"case":	93,
									"scores":	[-4.053441956650782]
								}, {
									"case":	94,
									"scores":	[-4.053441956650782]
								}, {
									"case":	95,
									"scores":	[-4.053441956650782]
								}, {
									"case":	96,
									"scores":	[-4.053441956650782]
								}, {
									"case":	97,
									"scores":	[-4.053441956650782]
								}, {
									"case":	98,
									"scores":	[-4.053441956650782]
								}, {
									"case":	99,
									"scores":	[-4.053441956650782]
								}, {
									"case":	100,
									"scores":	[-4.053441956650782]
								}, {
									"case":	101,
									"scores":	[-4.053441956650782]
								}, {
									"case":	102,
									"scores":	[-4.053441956650782]
								}, {
									"case":	103,
									"scores":	[-4.053441956650782]
								}, {
									"case":	104,
									"scores":	[-4.053441956650782]
								}, {
									"case":	105,
									"scores":	[-4.053441956650782]
								}, {
									"case":	106,
									"scores":	[-4.053441956650782]
								}, {
									"case":	107,
									"scores":	[-4.053441956650782]
								}, {
									"case":	108,
									"scores":	[-4.053441956650782]
								}, {
									"case":	109,
									"scores":	[-4.053441956650782]
								}, {
									"case":	110,
									"scores":	[-4.053441956650782]
								}, {
									"case":	111,
									"scores":	[-4.053441956650782]
								}, {
									"case":	112,
									"scores":	[-4.053441956650782]
								}, {
									"case":	113,
									"scores":	[-4.053441956650782]
								}, {
									"case":	114,
									"scores":	[-4.053441956650782]
								}, {
									"case":	115,
									"scores":	[-4.053441956650782]
								}, {
									"case":	116,
									"scores":	[-4.053441956650782]
								}, {
									"case":	117,
									"scores":	[-4.053441956650782]
								}, {
									"case":	118,
									"scores":	[-4.053441956650782]
								}, {
									"case":	119,
									"scores":	[-4.053441956650782]
								}, {
									"case":	120,
									"scores":	[-4.053441956650782]
								}, {
									"case":	121,
									"scores":	[-4.053441956650782]
								}, {
									"case":	122,
									"scores":	[-4.053441956650782]
								}, {
									"case":	123,
									"scores":	[-4.053441956650782]
								}, {
									"case":	124,
									"scores":	[-4.053441956650782]
								}, {
									"case":	125,
									"scores":	[-4.053441956650782]
								}, {
									"case":	126,
									"scores":	[-4.053441956650782]
								}, {
									"case":	127,
									"scores":	[-4.053441956650782]
								}, {
									"case":	128,
									"scores":	[-4.053441956650782]
								}, {
									"case":	129,
									"scores":	[-4.053441956650782]
								}, {
									"case":	130,
									"scores":	[-4.053441956650782]
								}, {
									"case":	131,
									"scores":	[-4.053441956650782]
								}, {
									"case":	132,
									"scores":	[-4.053441956650782]
								}, {
									"case":	133,
									"scores":	[-4.053441956650782]
								}, {
									"case":	134,
									"scores":	[-4.053441956650782]
								}, {
									"case":	135,
									"scores":	[-4.053441956650782]
								}, {
									"case":	136,
									"scores":	[-4.053441956650782]
								}, {
									"case":	137,
									"scores":	[-4.053441956650782]
								}, {
									"case":	138,
									"scores":	[-4.053441956650782]
								}, {
									"case":	139,
									"scores":	[-4.053441956650782]
								}, {
									"case":	140,
									"scores":	[-4.053441956650782]
								}, {
									"case":	141,
									"scores":	[-4.053441956650782]
								}, {
									"case":	142,
									"scores":	[-4.053441956650782]
								}, {
									"case":	143,
									"scores":	[-4.053441956650782]
								}, {
									"case":	144,
									"scores":	[-4.053441956650782]
								}, {
									"case":	145,
									"scores":	[-4.053441956650782]
								}, {
									"case":	146,
									"scores":	[-4.053441956650782]
								}, {
									"case":	147,
									"scores":	[-4.053441956650782]
								}, {
									"case":	148,
									"scores":	[-4.053441956650782]
								}, {
									"case":	149,
									"scores":	[-4.053441956650782]
								}, {
									"case":	150,
									"scores":	[-4.053441956650782]
								}, {
									"case":	151,
									"scores":	[-4.053441956650782]
								}, {
									"case":	152,
									"scores":	[-4.053441956650782]
								}, {
									"case":	153,
									"scores":	[-4.053441956650782]
								}, {
									"case":	154,
									"scores":	[-4.053441956650782]
								}, {
									"case":	155,
									"scores":	[-4.053441956650782]
								}, {
									"case":	156,
									"scores":	[-4.053441956650782]
								}, {
									"case":	157,
									"scores":	[-4.053441956650782]
								}, {
									"case":	158,
									"scores":	[-4.053441956650782]
								}, {
									"case":	159,
									"scores":	[-4.053441956650782]
								}, {
									"case":	160,
									"scores":	[-4.053441956650782]
								}, {
									"case":	161,
									"scores":	[-4.053441956650782]
								}, {
									"case":	162,
									"scores":	[-4.053441956650782]
								}, {
									"case":	163,
									"scores":	[-4.053441956650782]
								}, {
									"case":	164,
									"scores":	[-4.053441956650782]
								}, {
									"case":	165,
									"scores":	[-4.053441956650782]
								}, {
									"case":	166,
									"scores":	[-4.053441956650782]
								}, {
									"case":	167,
									"scores":	[-4.053441956650782]
								}, {
									"case":	168,
									"scores":	[-4.053441956650782]
								}, {
									"case":	169,
									"scores":	[-4.053441956650782]
								}, {
									"case":	170,
									"scores":	[-4.053441956650782]
								}, {
									"case":	171,
									"scores":	[-4.053441956650782]
								}, {
									"case":	172,
									"scores":	[-4.053441956650782]
								}, {
									"case":	173,
									"scores":	[-4.053441956650782]
								}, {
									"case":	174,
									"scores":	[-4.053441956650782]
								}, {
									"case":	175,
									"scores":	[-4.053441956650782]
								}, {
									"case":	176,
									"scores":	[-4.053441956650782]
								}, {
									"case":	177,
									"scores":	[-4.053441956650782]
								}, {
									"case":	178,
									"scores":	[-4.053441956650782]
								}, {
									"case":	179,
									"scores":	[-4.053441956650782]
								}, {
									"case":	180,
									"scores":	[-4.053441956650782]
								}, {
									"case":	181,
									"scores":	[-4.053441956650782]
								}, {
									"case":	182,
									"scores":	[-4.053441956650782]
								}, {
									"case":	183,
									"scores":	[-4.053441956650782]
								}, {
									"case":	184,
									"scores":	[-4.053441956650782]
								}, {
									"case":	185,
									"scores":	[-4.053441956650782]
								}, {
									"case":	186,
									"scores":	[-4.053441956650782]
								}, {
									"case":	187,
									"scores":	[-4.053441956650782]
								}, {
									"case":	188,
									"scores":	[-4.053441956650782]
								}, {
									"case":	189,
									"scores":	[-4.053441956650782]
								}, {
									"case":	190,
									"scores":	[-4.053441956650782]
								}, {
									"case":	191,
									"scores":	[-4.053441956650782]
								}, {
									"case":	192,
									"scores":	[-4.053441956650782]
								}, {
									"case":	193,
									"scores":	[-4.053441956650782]
								}, {
									"case":	194,
									"scores":	[-4.053441956650782]
								}, {
									"case":	195,
									"scores":	[-4.053441956650782]
								}, {
									"case":	196,
									"scores":	[-4.053441956650782]
								}, {
									"case":	197,
									"scores":	[-4.053441956650782]
								}, {
									"case":	198,
									"scores":	[-4.053441956650782]
								}, {
									"case":	199,
									"scores":	[-4.053441956650782]
								}, {
									"case":	200,
									"scores":	[-4.053441956650782]
								}, {
									"case":	201,
									"scores":	[-4.053441956650782]
								}, {
									"case":	202,
									"scores":	[-4.053441956650782]
								}, {
									"case":	203,
									"scores":	[-4.053441956650782]
								}, {
									"case":	204,
									"scores":	[-4.053441956650782]
								}, {
									"case":	205,
									"scores":	[-4.053441956650782]
								}, {
									"case":	206,
									"scores":	[-4.053441956650782]
								}, {
									"case":	207,
									"scores":	[-4.053441956650782]
								}, {
									"case":	208,
									"scores":	[-4.053441956650782]
								}, {
									"case":	209,
									"scores":	[-4.053441956650782]
								}, {
									"case":	210,
									"scores":	[-4.053441956650782]
								}, {
									"case":	211,
									"scores":	[-4.053441956650782]
								}, {
									"case":	212,
									"scores":	[-4.053441956650782]
								}, {
									"case":	213,
									"scores":	[-4.053441956650782]
								}, {
									"case":	214,
									"scores":	[-4.053441956650782]
								}, {
									"case":	215,
									"scores":	[-4.053441956650782]
								}, {
									"case":	216,
									"scores":	[-4.053441956650782]
								}, {
									"case":	217,
									"scores":	[-4.053441956650782]
								}, {
									"case":	218,
									"scores":	[-4.053441956650782]
								}, {
									"case":	219,
									"scores":	[-4.053441956650782]
								}, {
									"case":	220,
									"scores":	[-4.053441956650782]
								}, {
									"case":	221,
									"scores":	[-4.053441956650782]
								}, {
									"case":	222,
									"scores":	[-4.053441956650782]
								}, {
									"case":	223,
									"scores":	[-4.053441956650782]
								}, {
									"case":	224,
									"scores":	[-4.053441956650782]
								}, {
									"case":	225,
									"scores":	[-4.053441956650782]
								}, {
									"case":	226,
									"scores":	[-4.053441956650782]
								}, {
									"case":	227,
									"scores":	[-4.053441956650782]
								}, {
									"case":	228,
									"scores":	[-4.053441956650782]
								}, {
									"case":	229,
									"scores":	[-4.053441956650782]
								}, {
									"case":	230,
									"scores":	[-4.053441956650782]
								}, {
									"case":	231,
									"scores":	[-4.053441956650782]
								}, {
									"case":	232,
									"scores":	[-4.053441956650782]
								}, {
									"case":	233,
									"scores":	[-4.053441956650782]
								}, {
									"case":	234,
									"scores":	[-4.053441956650782]
								}, {
									"case":	235,
									"scores":	[-4.053441956650782]
								}, {
									"case":	236,
									"scores":	[-4.053441956650782]
								}, {
									"case":	237,
									"scores":	[-4.053441956650782]
								}, {
									"case":	238,
									"scores":	[-4.053441956650782]
								}, {
									"case":	239,
									"scores":	[-4.053441956650782]
								}, {
									"case":	240,
									"scores":	[-4.053441956650782]
								}, {
									"case":	241,
									"scores":	[-4.053441956650782]
								}, {
									"case":	242,
									"scores":	[-4.053441956650782]
								}, {
									"case":	243,
									"scores":	[-4.053441956650782]
								}, {
									"case":	244,
									"scores":	[-4.053441956650782]
								}, {
									"case":	245,
									"scores":	[-4.053441956650782]
								}, {
									"case":	246,
									"scores":	[-4.053441956650782]
								}, {
									"case":	247,
									"scores":	[-4.053441956650782]
								}, {
									"case":	248,
									"scores":	[-4.053441956650782]
								}, {
									"case":	249,
									"scores":	[-4.053441956650782]
								}, {
									"case":	250,
									"scores":	[-4.053441956650782]
								}, {
									"case":	251,
									"scores":	[-4.053441956650782]
								}, {
									"case":	252,
									"scores":	[-4.053441956650782]
								}, {
									"case":	253,
									"scores":	[-4.053441956650782]
								}, {
									"case":	254,
									"scores":	[-4.053441956650782]
								}, {
									"case":	255,
									"scores":	[-4.053441956650782]
								}, {
									"case":	256,
									"scores":	[-4.053441956650782]
								}, {
									"case":	257,
									"scores":	[-4.053441956650782]
								}, {
									"case":	258,
									"scores":	[-4.053441956650782]
								}, {
									"case":	259,
									"scores":	[-4.053441956650782]
								}, {
									"case":	260,
									"scores":	[-4.053441956650782]
								}, {
									"case":	261,
									"scores":	[-4.053441956650782]
								}, {
									"case":	262,
									"scores":	[-4.053441956650782]
								}, {
									"case":	263,
									"scores":	[-4.053441956650782]
								}, {
									"case":	264,
									"scores":	[-4.053441956650782]
								}, {
									"case":	265,
									"scores":	[-4.053441956650782]
								}, {
									"case":	266,
									"scores":	[-4.053441956650782]
								}, {
									"case":	267,
									"scores":	[-4.053441956650782]
								}, {
									"case":	268,
									"scores":	[-4.053441956650782]
								}, {
									"case":	269,
									"scores":	[-4.053441956650782]
								}, {
									"case":	270,
									"scores":	[-4.053441956650782]
								}, {
									"case":	271,
									"scores":	[-4.053441956650782]
								}, {
									"case":	272,
									"scores":	[-4.053441956650782]
								}, {
									"case":	273,
									"scores":	[-4.053441956650782]
								}, {
									"case":	274,
									"scores":	[-4.053441956650782]
								}, {
									"case":	275,
									"scores":	[-4.053441956650782]
								}, {
									"case":	276,
									"scores":	[-4.053441956650782]
								}, {
									"case":	277,
									"scores":	[-4.053441956650782]
								}, {
									"case":	278,
									"scores":	[-4.053441956650782]
								}, {
									"case":	279,
									"scores":	[-4.053441956650782]
								}, {
									"case":	280,
									"scores":	[-4.053441956650782]
								}, {
									"case":	281,
									"scores":	[-4.053441956650782]
								}, {
									"case":	282,
									"scores":	[-4.053441956650782]
								}, {
									"case":	283,
									"scores":	[-4.053441956650782]
								}, {
									"case":	284,
									"scores":	[-4.053441956650782]
								}, {
									"case":	285,
									"scores":	[-4.053441956650782]
								}, {
									"case":	286,
									"scores":	[-4.053441956650782]
								}, {
									"case":	287,
									"scores":	[-4.053441956650782]
								}, {
									"case":	288,
									"scores":	[-4.053441956650782]
								}, {
									"case":	289,
									"scores":	[-4.053441956650782]
								}, {
									"case":	290,
									"scores":	[-4.053441956650782]
								}, {
									"case":	291,
									"scores":	[-4.053441956650782]
								}, {
									"case":	292,
									"scores":	[-4.053441956650782]
								}, {
									"case":	293,
									"scores":	[-4.053441956650782]
								}, {
									"case":	294,
									"scores":	[-4.053441956650782]
								}, {
									"case":	295,
									"scores":	[-4.053441956650782]
								}, {
									"case":	296,
									"scores":	[-4.053441956650782]
								}, {
									"case":	297,
									"scores":	[-4.053441956650782]
								}, {
									"case":	298,
									"scores":	[-4.053441956650782]
								}, {
									"case":	299,
									"scores":	[-4.053441956650782]
								}, {
									"case":	300,
									"scores":	[-4.053441956650782]
								}, {
									"case":	301,
									"scores":	[-4.053441956650782]
								}, {
									"case":	302,
									"scores":	[-4.053441956650782]
								}, {
									"case":	303,
									"scores":	[-4.053441956650782]
								}, {
									"case":	304,
									"scores":	[-4.053441956650782]
								}, {
									"case":	305,
									"scores":	[-4.053441956650782]
								}, {
									"case":	306,
									"scores":	[-4.053441956650782]
								}, {
									"case":	307,
									"scores":	[-4.053441956650782]
								}, {
									"case":	308,
									"scores":	[-4.053441956650782]
								}, {
									"case":	309,
									"scores":	[-4.053441956650782]
								}, {
									"case":	310,
									"scores":	[-4.053441956650782]
								}, {
									"case":	311,
									"scores":	[-4.053441956650782]
								}, {
									"case":	312,
									"scores":	[-4.053441956650782]
								}, {
									"case":	313,
									"scores":	[-4.053441956650782]
								}, {
									"case":	314,
									"scores":	[-4.053441956650782]
								}, {
									"case":	315,
									"scores":	[-4.053441956650782]
								}, {
									"case":	316,
									"scores":	[-4.053441956650782]
								}, {
									"case":	317,
									"scores":	[-4.053441956650782]
								}, {
									"case":	318,
									"scores":	[-4.053441956650782]
								}, {
									"case":	319,
									"scores":	[-4.053441956650782]
								}, {
									"case":	320,
									"scores":	[-4.053441956650782]
								}, {
									"case":	321,
									"scores":	[-4.053441956650782]
								}, {
									"case":	322,
									"scores":	[-4.053441956650782]
								}, {
									"case":	323,
									"scores":	[-4.053441956650782]
								}, {
									"case":	324,
									"scores":	[-4.053441956650782]
								}, {
									"case":	325,
									"scores":	[-4.053441956650782]
								}, {
									"case":	326,
									"scores":	[-4.053441956650782]
								}, {
									"case":	327,
									"scores":	[-4.053441956650782]
								}, {
									"case":	328,
									"scores":	[-4.053441956650782]
								}, {
									"case":	329,
									"scores":	[-4.053441956650782]
								}, {
									"case":	330,
									"scores":	[-4.053441956650782]
								}, {
									"case":	331,
									"scores":	[-4.053441956650782]
								}, {
									"case":	332,
									"scores":	[-4.053441956650782]
								}, {
									"case":	333,
									"scores":	[-4.053441956650782]
								}, {
									"case":	334,
									"scores":	[-4.053441956650782]
								}, {
									"case":	335,
									"scores":	[-4.053441956650782]
								}, {
									"case":	336,
									"scores":	[-4.053441956650782]
								}, {
									"case":	337,
									"scores":	[-4.053441956650782]
								}, {
									"case":	338,
									"scores":	[-4.053441956650782]
								}, {
									"case":	339,
									"scores":	[-4.053441956650782]
								}, {
									"case":	340,
									"scores":	[-4.053441956650782]
								}, {
									"case":	341,
									"scores":	[-4.053441956650782]
								}, {
									"case":	342,
									"scores":	[-4.053441956650782]
								}, {
									"case":	343,
									"scores":	[-4.053441956650782]
								}, {
									"case":	344,
									"scores":	[-4.053441956650782]
								}, {
									"case":	345,
									"scores":	[-4.053441956650782]
								}, {
									"case":	346,
									"scores":	[-4.053441956650782]
								}, {
									"case":	347,
									"scores":	[-4.053441956650782]
								}, {
									"case":	348,
									"scores":	[-4.053441956650782]
								}, {
									"case":	349,
									"scores":	[-4.053441956650782]
								}, {
									"case":	350,
									"scores":	[-4.053441956650782]
								}, {
									"case":	351,
									"scores":	[-4.053441956650782]
								}, {
									"case":	352,
									"scores":	[-4.053441956650782]
								}, {
									"case":	353,
									"scores":	[-4.053441956650782]
								}, {
									"case":	354,
									"scores":	[-4.053441956650782]
								}, {
									"case":	355,
									"scores":	[-4.053441956650782]
								}, {
									"case":	356,
									"scores":	[-4.053441956650782]
								}, {
									"case":	357,
									"scores":	[-4.053441956650782]
								}, {
									"case":	358,
									"scores":	[-4.053441956650782]
								}, {
									"case":	359,
									"scores":	[-4.053441956650782]
								}, {
									"case":	360,
									"scores":	[-4.053441956650782]
								}, {
									"case":	361,
									"scores":	[-4.053441956650782]
								}, {
									"case":	362,
									"scores":	[-4.053441956650782]
								}, {
									"case":	363,
									"scores":	[-4.053441956650782]
								}, {
									"case":	364,
									"scores":	[-4.053441956650782]
								}, {
									"case":	365,
									"scores":	[-4.053441956650782]
								}, {
									"case":	366,
									"scores":	[-4.053441956650782]
								}, {
									"case":	367,
									"scores":	[-4.053441956650782]
								}, {
									"case":	368,
									"scores":	[-4.053441956650782]
								}, {
									"case":	369,
									"scores":	[-4.053441956650782]
								}, {
									"case":	370,
									"scores":	[-4.053441956650782]
								}, {
									"case":	371,
									"scores":	[-4.053441956650782]
								}, {
									"case":	372,
									"scores":	[-4.053441956650782]
								}, {
									"case":	373,
									"scores":	[-4.053441956650782]
								}, {
									"case":	374,
									"scores":	[-4.053441956650782]
								}, {
									"case":	375,
									"scores":	[-4.053441956650782]
								}, {
									"case":	376,
									"scores":	[-4.053441956650782]
								}, {
									"case":	377,
									"scores":	[-4.053441956650782]
								}, {
									"case":	378,
									"scores":	[-4.053441956650782]
								}, {
									"case":	379,
									"scores":	[-4.053441956650782]
								}, {
									"case":	380,
									"scores":	[-4.053441956650782]
								}, {
									"case":	381,
									"scores":	[-4.053441956650782]
								}, {
									"case":	382,
									"scores":	[-4.053441956650782]
								}, {
									"case":	383,
									"scores":	[-4.053441956650782]
								}, {
									"case":	384,
									"scores":	[-4.053441956650782]
								}, {
									"case":	385,
									"scores":	[-4.053441956650782]
								}, {
									"case":	386,
									"scores":	[-4.053441956650782]
								}, {
									"case":	387,
									"scores":	[-4.053441956650782]
								}, {
									"case":	388,
									"scores":	[-4.053441956650782]
								}, {
									"case":	389,
									"scores":	[-4.053441956650782]
								}, {
									"case":	390,
									"scores":	[-4.053441956650782]
								}, {
									"case":	391,
									"scores":	[-4.053441956650782]
								}, {
									"case":	392,
									"scores":	[-4.053441956650782]
								}, {
									"case":	393,
									"scores":	[-4.053441956650782]
								}, {
									"case":	394,
									"scores":	[-4.053441956650782]
								}, {
									"case":	395,
									"scores":	[-4.053441956650782]
								}, {
									"case":	396,
									"scores":	[-4.053441956650782]
								}, {
									"case":	397,
									"scores":	[-4.053441956650782]
								}, {
									"case":	398,
									"scores":	[-4.053441956650782]
								}, {
									"case":	399,
									"scores":	[-4.053441956650782]
								}, {
									"case":	400,
									"scores":	[-4.053441956650782]
								}, {
									"case":	401,
									"scores":	[-4.053441956650782]
								}, {
									"case":	402,
									"scores":	[-4.053441956650782]
								}, {
									"case":	403,
									"scores":	[-4.053441956650782]
								}, {
									"case":	404,
									"scores":	[-4.053441956650782]
								}, {
									"case":	405,
									"scores":	[-4.053441956650782]
								}, {
									"case":	406,
									"scores":	[-4.053441956650782]
								}, {
									"case":	407,
									"scores":	[-4.053441956650782]
								}, {
									"case":	408,
									"scores":	[-4.053441956650782]
								}, {
									"case":	409,
									"scores":	[-4.053441956650782]
								}, {
									"case":	410,
									"scores":	[-4.053441956650782]
								}, {
									"case":	411,
									"scores":	[-4.053441956650782]
								}, {
									"case":	412,
									"scores":	[-4.053441956650782]
								}, {
									"case":	413,
									"scores":	[-4.053441956650782]
								}, {
									"case":	414,
									"scores":	[-4.053441956650782]
								}, {
									"case":	415,
									"scores":	[-4.053441956650782]
								}, {
									"case":	416,
									"scores":	[-4.053441956650782]
								}, {
									"case":	417,
									"scores":	[-4.053441956650782]
								}, {
									"case":	418,
									"scores":	[-4.053441956650782]
								}, {
									"case":	419,
									"scores":	[-4.053441956650782]
								}, {
									"case":	420,
									"scores":	[-4.053441956650782]
								}, {
									"case":	421,
									"scores":	[-4.053441956650782]
								}, {
									"case":	422,
									"scores":	[-4.053441956650782]
								}, {
									"case":	423,
									"scores":	[-4.053441956650782]
								}, {
									"case":	424,
									"scores":	[-4.053441956650782]
								}, {
									"case":	425,
									"scores":	[-4.053441956650782]
								}, {
									"case":	426,
									"scores":	[-4.053441956650782]
								}, {
									"case":	427,
									"scores":	[-4.053441956650782]
								}, {
									"case":	428,
									"scores":	[-4.053441956650782]
								}, {
									"case":	429,
									"scores":	[-4.053441956650782]
								}, {
									"case":	430,
									"scores":	[-4.053441956650782]
								}, {
									"case":	431,
									"scores":	[-4.053441956650782]
								}, {
									"case":	432,
									"scores":	[-4.053441956650782]
								}, {
									"case":	433,
									"scores":	[-4.053441956650782]
								}, {
									"case":	434,
									"scores":	[-4.053441956650782]
								}, {
									"case":	435,
									"scores":	[-4.053441956650782]
								}, {
									"case":	436,
									"scores":	[-4.053441956650782]
								}, {
									"case":	437,
									"scores":	[-4.053441956650782]
								}, {
									"case":	438,
									"scores":	[-4.053441956650782]
								}, {
									"case":	439,
									"scores":	[-4.053441956650782]
								}, {
									"case":	440,
									"scores":	[-4.053441956650782]
								}, {
									"case":	441,
									"scores":	[-4.053441956650782]
								}, {
									"case":	442,
									"scores":	[-4.053441956650782]
								}, {
									"case":	443,
									"scores":	[-4.053441956650782]
								}, {
									"case":	444,
									"scores":	[-4.053441956650782]
								}, {
									"case":	445,
									"scores":	[-4.053441956650782]
								}, {
									"case":	446,
									"scores":	[-4.053441956650782]
								}, {
									"case":	447,
									"scores":	[-4.053441956650782]
								}, {
									"case":	448,
									"scores":	[-4.053441956650782]
								}, {
									"case":	449,
									"scores":	[-4.053441956650782]
								}, {
									"case":	450,
									"scores":	[-4.053441956650782]
								}, {
									"case":	451,
									"scores":	[-4.053441956650782]
								}, {
									"case":	452,
									"scores":	[-4.053441956650782]
								}, {
									"case":	453,
									"scores":	[-4.053441956650782]
								}, {
									"case":	454,
									"scores":	[-4.053441956650782]
								}, {
									"case":	455,
									"scores":	[-4.053441956650782]
								}, {
									"case":	456,
									"scores":	[-4.053441956650782]
								}, {
									"case":	457,
									"scores":	[-4.053441956650782]
								}, {
									"case":	458,
									"scores":	[-4.053441956650782]
								}, {
									"case":	459,
									"scores":	[-4.053441956650782]
								}, {
									"case":	460,
									"scores":	[-4.053441956650782]
								}, {
									"case":	461,
									"scores":	[-4.053441956650782]
								}, {
									"case":	462,
									"scores":	[-4.053441956650782]
								}, {
									"case":	463,
									"scores":	[-4.053441956650782]
								}, {
									"case":	464,
									"scores":	[-4.053441956650782]
								}, {
									"case":	465,
									"scores":	[-4.053441956650782]
								}, {
									"case":	466,
									"scores":	[-4.053441956650782]
								}, {
									"case":	467,
									"scores":	[-4.053441956650782]
								}, {
									"case":	468,
									"scores":	[-4.053441956650782]
								}, {
									"case":	469,
									"scores":	[-4.053441956650782]
								}, {
									"case":	470,
									"scores":	[-4.053441956650782]
								}, {
									"case":	471,
									"scores":	[-4.053441956650782]
								}, {
									"case":	472,
									"scores":	[-4.053441956650782]
								}, {
									"case":	473,
									"scores":	[-4.053441956650782]
								}, {
									"case":	474,
									"scores":	[-4.053441956650782]
								}, {
									"case":	475,
									"scores":	[-4.053441956650782]
								}, {
									"case":	476,
									"scores":	[-4.053441956650782]
								}, {
									"case":	477,
									"scores":	[-4.053441956650782]
								}, {
									"case":	478,
									"scores":	[-4.053441956650782]
								}, {
									"case":	479,
									"scores":	[-4.053441956650782]
								}, {
									"case":	480,
									"scores":	[-4.053441956650782]
								}, {
									"case":	481,
									"scores":	[-4.053441956650782]
								}, {
									"case":	482,
									"scores":	[-4.053441956650782]
								}, {
									"case":	483,
									"scores":	[-4.053441956650782]
								}, {
									"case":	484,
									"scores":	[-4.053441956650782]
								}, {
									"case":	485,
									"scores":	[-4.053441956650782]
								}, {
									"case":	486,
									"scores":	[-4.053441956650782]
								}, {
									"case":	487,
									"scores":	[-4.053441956650782]
								}, {
									"case":	488,
									"scores":	[-4.053441956650782]
								}, {
									"case":	489,
									"scores":	[-4.053441956650782]
								}, {
									"case":	490,
									"scores":	[-4.053441956650782]
								}, {
									"case":	491,
									"scores":	[-4.053441956650782]
								}, {
									"case":	492,
									"scores":	[-4.053441956650782]
								}, {
									"case":	493,
									"scores":	[-4.053441956650782]
								}, {
									"case":	494,
									"scores":	[-4.053441956650782]
								}, {
									"case":	495,
									"scores":	[-4.053441956650782]
								}, {
									"case":	496,
									"scores":	[-4.053441956650782]
								}, {
									"case":	497,
									"scores":	[-4.053441956650782]
								}, {
									"case":	498,
									"scores":	[-4.053441956650782]
								}, {
									"case":	499,
									"scores":	[-4.053441956650782]
								}, {
									"case":	500,
									"scores":	[-4.053441956650782]
								}, {
									"case":	501,
									"scores":	[-4.053441956650782]
								}, {
									"case":	502,
									"scores":	[-4.053441956650782]
								}, {
									"case":	503,
									"scores":	[-4.053441956650782]
								}, {
									"case":	504,
									"scores":	[-4.053441956650782]
								}, {
									"case":	505,
									"scores":	[-4.053441956650782]
								}, {
									"case":	506,
									"scores":	[-4.053441956650782]
								}, {
									"case":	507,
									"scores":	[-4.053441956650782]
								}, {
									"case":	508,
									"scores":	[-4.053441956650782]
								}, {
									"case":	509,
									"scores":	[-4.053441956650782]
								}, {
									"case":	510,
									"scores":	[-4.053441956650782]
								}, {
									"case":	511,
									"scores":	[-4.053441956650782]
								}, {
									"case":	512,
									"scores":	[-4.053441956650782]
								}, {
									"case":	513,
									"scores":	[-4.053441956650782]
								}, {
									"case":	514,
									"scores":	[-4.053441956650782]
								}, {
									"case":	515,
									"scores":	[-4.053441956650782]
								}, {
									"case":	516,
									"scores":	[-4.053441956650782]
								}, {
									"case":	517,
									"scores":	[-4.053441956650782]
								}, {
									"case":	518,
									"scores":	[-4.053441956650782]
								}, {
									"case":	519,
									"scores":	[-4.053441956650782]
								}, {
									"case":	520,
									"scores":	[-4.053441956650782]
								}, {
									"case":	521,
									"scores":	[-4.053441956650782]
								}, {
									"case":	522,
									"scores":	[-4.053441956650782]
								}, {
									"case":	523,
									"scores":	[-4.053441956650782]
								}, {
									"case":	524,
									"scores":	[-4.053441956650782]
								}, {
									"case":	525,
									"scores":	[-4.053441956650782]
								}, {
									"case":	526,
									"scores":	[-4.053441956650782]
								}, {
									"case":	527,
									"scores":	[-4.053441956650782]
								}, {
									"case":	528,
									"scores":	[-4.053441956650782]
								}, {
									"case":	529,
									"scores":	[-4.053441956650782]
								}, {
									"case":	530,
									"scores":	[-4.053441956650782]
								}, {
									"case":	531,
									"scores":	[-4.053441956650782]
								}, {
									"case":	532,
									"scores":	[-4.053441956650782]
								}, {
									"case":	533,
									"scores":	[-4.053441956650782]
								}, {
									"case":	534,
									"scores":	[-4.053441956650782]
								}, {
									"case":	535,
									"scores":	[-4.053441956650782]
								}, {
									"case":	536,
									"scores":	[-4.053441956650782]
								}, {
									"case":	537,
									"scores":	[-4.053441956650782]
								}, {
									"case":	538,
									"scores":	[-4.053441956650782]
								}, {
									"case":	539,
									"scores":	[-4.053441956650782]
								}, {
									"case":	540,
									"scores":	[-4.053441956650782]
								}, {
									"case":	541,
									"scores":	[-4.053441956650782]
								}, {
									"case":	542,
									"scores":	[-4.053441956650782]
								}, {
									"case":	543,
									"scores":	[-4.053441956650782]
								}, {
									"case":	544,
									"scores":	[-4.053441956650782]
								}, {
									"case":	545,
									"scores":	[-4.053441956650782]
								}, {
									"case":	546,
									"scores":	[-4.053441956650782]
								}, {
									"case":	547,
									"scores":	[-4.053441956650782]
								}, {
									"case":	548,
									"scores":	[-4.053441956650782]
								}, {
									"case":	549,
									"scores":	[-4.053441956650782]
								}, {
									"case":	550,
									"scores":	[-4.053441956650782]
								}, {
									"case":	551,
									"scores":	[-4.053441956650782]
								}, {
									"case":	552,
									"scores":	[-4.053441956650782]
								}, {
									"case":	553,
									"scores":	[-4.053441956650782]
								}, {
									"case":	554,
									"scores":	[-4.053441956650782]
								}, {
									"case":	555,
									"scores":	[-4.053441956650782]
								}, {
									"case":	556,
									"scores":	[-4.053441956650782]
								}, {
									"case":	557,
									"scores":	[-4.053441956650782]
								}, {
									"case":	558,
									"scores":	[-4.053441956650782]
								}, {
									"case":	559,
									"scores":	[-4.053441956650782]
								}, {
									"case":	560,
									"scores":	[-4.053441956650782]
								}, {
									"case":	561,
									"scores":	[-4.053441956650782]
								}, {
									"case":	562,
									"scores":	[-4.053441956650782]
								}, {
									"case":	563,
									"scores":	[-4.053441956650782]
								}, {
									"case":	564,
									"scores":	[-4.053441956650782]
								}, {
									"case":	565,
									"scores":	[-4.053441956650782]
								}, {
									"case":	566,
									"scores":	[-4.053441956650782]
								}, {
									"case":	567,
									"scores":	[-4.053441956650782]
								}, {
									"case":	568,
									"scores":	[-4.053441956650782]
								}, {
									"case":	569,
									"scores":	[-4.053441956650782]
								}, {
									"case":	570,
									"scores":	[-4.053441956650782]
								}, {
									"case":	571,
									"scores":	[-4.053441956650782]
								}, {
									"case":	572,
									"scores":	[-4.053441956650782]
								}, {
									"case":	573,
									"scores":	[-4.053441956650782]
								}, {
									"case":	574,
									"scores":	[-4.053441956650782]
								}, {
									"case":	575,
									"scores":	[-4.053441956650782]
								}, {
									"case":	576,
									"scores":	[-4.053441956650782]
								}, {
									"case":	577,
									"scores":	[-4.053441956650782]
								}, {
									"case":	578,
									"scores":	[-4.053441956650782]
								}, {
									"case":	579,
									"scores":	[-4.053441956650782]
								}, {
									"case":	580,
									"scores":	[-4.053441956650782]
								}, {
									"case":	581,
									"scores":	[-4.053441956650782]
								}, {
									"case":	582,
									"scores":	[-4.053441956650782]
								}, {
									"case":	583,
									"scores":	[-4.053441956650782]
								}, {
									"case":	584,
									"scores":	[-4.053441956650782]
								}, {
									"case":	585,
									"scores":	[-4.053441956650782]
								}, {
									"case":	586,
									"scores":	[-4.053441956650782]
								}, {
									"case":	587,
									"scores":	[-4.053441956650782]
								}, {
									"case":	588,
									"scores":	[-4.053441956650782]
								}, {
									"case":	589,
									"scores":	[-4.053441956650782]
								}, {
									"case":	590,
									"scores":	[-4.053441956650782]
								}, {
									"case":	591,
									"scores":	[-4.053441956650782]
								}, {
									"case":	592,
									"scores":	[-4.053441956650782]
								}, {
									"case":	593,
									"scores":	[-4.053441956650782]
								}, {
									"case":	594,
									"scores":	[-4.053441956650782]
								}, {
									"case":	595,
									"scores":	[-4.053441956650782]
								}, {
									"case":	596,
									"scores":	[-4.053441956650782]
								}, {
									"case":	597,
									"scores":	[-4.053441956650782]
								}, {
									"case":	598,
									"scores":	[-4.053441956650782]
								}, {
									"case":	599,
									"scores":	[-4.053441956650782]
								}, {
									"case":	600,
									"scores":	[-4.053441956650782]
								}, {
									"case":	601,
									"scores":	[-4.053441956650782]
								}, {
									"case":	602,
									"scores":	[-4.053441956650782]
								}, {
									"case":	603,
									"scores":	[-4.053441956650782]
								}, {
									"case":	604,
									"scores":	[-4.053441956650782]
								}, {
									"case":	605,
									"scores":	[-4.053441956650782]
								}, {
									"case":	606,
									"scores":	[-4.053441956650782]
								}, {
									"case":	607,
									"scores":	[-4.053441956650782]
								}, {
									"case":	608,
									"scores":	[-4.053441956650782]
								}, {
									"case":	609,
									"scores":	[-4.053441956650782]
								}, {
									"case":	610,
									"scores":	[-4.053441956650782]
								}, {
									"case":	611,
									"scores":	[-4.053441956650782]
								}, {
									"case":	612,
									"scores":	[-4.053441956650782]
								}, {
									"case":	613,
									"scores":	[-4.053441956650782]
								}, {
									"case":	614,
									"scores":	[-4.053441956650782]
								}, {
									"case":	615,
									"scores":	[-4.053441956650782]
								}, {
									"case":	616,
									"scores":	[-4.053441956650782]
								}]
						}]
				}, {
					"line":	654,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [], [], [], [], [], [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], [], [], [], [], [], []],
							"begin_line":	655,
							"begin_column":	3,
							"end_line":	655,
							"end_column":	3,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\""],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.053441956650782]
								}, {
									"case":	2,
									"scores":	[-4.053441956650782]
								}, {
									"case":	3,
									"scores":	[-4.053441956650782]
								}, {
									"case":	4,
									"scores":	[-4.053441956650782]
								}, {
									"case":	5,
									"scores":	[-4.053441956650782]
								}, {
									"case":	6,
									"scores":	[-4.053441956650782]
								}, {
									"case":	7,
									"scores":	[-4.053441956650782]
								}, {
									"case":	8,
									"scores":	[-4.053441956650782]
								}, {
									"case":	9,
									"scores":	[-4.053441956650782]
								}, {
									"case":	10,
									"scores":	[-4.053441956650782]
								}, {
									"case":	11,
									"scores":	[-4.053441956650782]
								}, {
									"case":	12,
									"scores":	[-4.053441956650782]
								}, {
									"case":	13,
									"scores":	[-4.053441956650782]
								}, {
									"case":	14,
									"scores":	[-4.053441956650782]
								}, {
									"case":	15,
									"scores":	[-4.053441956650782]
								}, {
									"case":	16,
									"scores":	[-4.053441956650782]
								}, {
									"case":	17,
									"scores":	[-4.053441956650782]
								}, {
									"case":	18,
									"scores":	[-4.053441956650782]
								}, {
									"case":	19,
									"scores":	[-4.053441956650782]
								}, {
									"case":	20,
									"scores":	[-4.053441956650782]
								}, {
									"case":	21,
									"scores":	[-4.053441956650782]
								}, {
									"case":	22,
									"scores":	[-4.053441956650782]
								}, {
									"case":	23,
									"scores":	[-4.053441956650782]
								}, {
									"case":	24,
									"scores":	[-4.053441956650782]
								}, {
									"case":	25,
									"scores":	[-4.053441956650782]
								}, {
									"case":	26,
									"scores":	[-4.053441956650782]
								}, {
									"case":	27,
									"scores":	[-4.053441956650782]
								}, {
									"case":	28,
									"scores":	[-4.053441956650782]
								}, {
									"case":	29,
									"scores":	[-4.053441956650782]
								}, {
									"case":	30,
									"scores":	[-4.053441956650782]
								}, {
									"case":	31,
									"scores":	[-4.053441956650782]
								}, {
									"case":	32,
									"scores":	[-4.053441956650782]
								}, {
									"case":	33,
									"scores":	[-4.053441956650782]
								}, {
									"case":	34,
									"scores":	[-4.053441956650782]
								}, {
									"case":	35,
									"scores":	[-4.053441956650782]
								}, {
									"case":	36,
									"scores":	[-4.053441956650782]
								}, {
									"case":	37,
									"scores":	[-4.053441956650782]
								}, {
									"case":	38,
									"scores":	[-4.053441956650782]
								}, {
									"case":	39,
									"scores":	[-4.053441956650782]
								}, {
									"case":	40,
									"scores":	[-4.053441956650782]
								}, {
									"case":	41,
									"scores":	[-4.053441956650782]
								}, {
									"case":	42,
									"scores":	[-4.053441956650782]
								}, {
									"case":	43,
									"scores":	[-4.053441956650782]
								}, {
									"case":	44,
									"scores":	[-4.053441956650782]
								}, {
									"case":	45,
									"scores":	[-4.053441956650782]
								}, {
									"case":	46,
									"scores":	[-4.053441956650782]
								}, {
									"case":	47,
									"scores":	[-4.053441956650782]
								}, {
									"case":	48,
									"scores":	[-4.053441956650782]
								}, {
									"case":	49,
									"scores":	[-4.053441956650782]
								}, {
									"case":	50,
									"scores":	[-4.053441956650782]
								}, {
									"case":	51,
									"scores":	[-4.053441956650782]
								}, {
									"case":	52,
									"scores":	[-4.053441956650782]
								}, {
									"case":	53,
									"scores":	[-4.053441956650782]
								}, {
									"case":	54,
									"scores":	[-4.053441956650782]
								}, {
									"case":	55,
									"scores":	[-4.053441956650782]
								}, {
									"case":	56,
									"scores":	[-4.053441956650782]
								}, {
									"case":	57,
									"scores":	[-4.053441956650782]
								}, {
									"case":	58,
									"scores":	[-4.053441956650782]
								}, {
									"case":	59,
									"scores":	[-4.053441956650782]
								}, {
									"case":	60,
									"scores":	[-4.053441956650782]
								}, {
									"case":	61,
									"scores":	[-4.053441956650782]
								}, {
									"case":	62,
									"scores":	[-4.053441956650782]
								}, {
									"case":	63,
									"scores":	[-4.053441956650782]
								}, {
									"case":	64,
									"scores":	[-4.053441956650782]
								}, {
									"case":	65,
									"scores":	[-4.053441956650782]
								}, {
									"case":	66,
									"scores":	[-4.053441956650782]
								}, {
									"case":	67,
									"scores":	[-4.053441956650782]
								}, {
									"case":	68,
									"scores":	[-4.053441956650782]
								}, {
									"case":	69,
									"scores":	[-4.053441956650782]
								}, {
									"case":	70,
									"scores":	[-4.053441956650782]
								}, {
									"case":	71,
									"scores":	[-4.053441956650782]
								}, {
									"case":	72,
									"scores":	[-4.053441956650782]
								}, {
									"case":	73,
									"scores":	[-4.053441956650782]
								}, {
									"case":	74,
									"scores":	[-4.053441956650782]
								}, {
									"case":	75,
									"scores":	[-4.053441956650782]
								}, {
									"case":	76,
									"scores":	[-4.053441956650782]
								}, {
									"case":	77,
									"scores":	[-4.053441956650782]
								}, {
									"case":	78,
									"scores":	[-4.053441956650782]
								}, {
									"case":	79,
									"scores":	[-4.053441956650782]
								}, {
									"case":	80,
									"scores":	[-4.053441956650782]
								}, {
									"case":	81,
									"scores":	[-4.053441956650782]
								}, {
									"case":	82,
									"scores":	[-4.053441956650782]
								}, {
									"case":	83,
									"scores":	[-4.053441956650782]
								}, {
									"case":	84,
									"scores":	[-4.053441956650782]
								}, {
									"case":	85,
									"scores":	[-4.053441956650782]
								}, {
									"case":	86,
									"scores":	[-4.053441956650782]
								}, {
									"case":	87,
									"scores":	[-4.053441956650782]
								}, {
									"case":	88,
									"scores":	[-4.053441956650782]
								}, {
									"case":	89,
									"scores":	[-4.053441956650782]
								}, {
									"case":	90,
									"scores":	[-4.053441956650782]
								}, {
									"case":	91,
									"scores":	[-4.053441956650782]
								}, {
									"case":	92,
									"scores":	[-4.053441956650782]
								}, {
									"case":	93,
									"scores":	[-4.053441956650782]
								}, {
									"case":	94,
									"scores":	[-4.053441956650782]
								}, {
									"case":	95,
									"scores":	[-4.053441956650782]
								}, {
									"case":	96,
									"scores":	[-4.053441956650782]
								}, {
									"case":	97,
									"scores":	[-4.053441956650782]
								}, {
									"case":	98,
									"scores":	[-4.053441956650782]
								}, {
									"case":	99,
									"scores":	[-4.053441956650782]
								}, {
									"case":	100,
									"scores":	[-4.053441956650782]
								}, {
									"case":	101,
									"scores":	[-4.053441956650782]
								}, {
									"case":	102,
									"scores":	[-4.053441956650782]
								}, {
									"case":	103,
									"scores":	[-4.053441956650782]
								}, {
									"case":	104,
									"scores":	[-4.053441956650782]
								}, {
									"case":	105,
									"scores":	[-4.053441956650782]
								}, {
									"case":	106,
									"scores":	[-4.053441956650782]
								}, {
									"case":	107,
									"scores":	[-4.053441956650782]
								}, {
									"case":	108,
									"scores":	[-4.053441956650782]
								}, {
									"case":	109,
									"scores":	[-4.053441956650782]
								}, {
									"case":	110,
									"scores":	[-4.053441956650782]
								}, {
									"case":	111,
									"scores":	[-4.053441956650782]
								}, {
									"case":	112,
									"scores":	[-4.053441956650782]
								}, {
									"case":	113,
									"scores":	[-4.053441956650782]
								}, {
									"case":	114,
									"scores":	[-4.053441956650782]
								}, {
									"case":	115,
									"scores":	[-4.053441956650782]
								}, {
									"case":	116,
									"scores":	[-4.053441956650782]
								}, {
									"case":	117,
									"scores":	[-4.053441956650782]
								}, {
									"case":	118,
									"scores":	[-4.053441956650782]
								}, {
									"case":	119,
									"scores":	[-4.053441956650782]
								}, {
									"case":	120,
									"scores":	[-4.053441956650782]
								}, {
									"case":	121,
									"scores":	[-4.053441956650782]
								}, {
									"case":	122,
									"scores":	[-4.053441956650782]
								}, {
									"case":	123,
									"scores":	[-4.053441956650782]
								}, {
									"case":	124,
									"scores":	[-4.053441956650782]
								}, {
									"case":	125,
									"scores":	[-4.053441956650782]
								}, {
									"case":	126,
									"scores":	[-4.053441956650782]
								}, {
									"case":	127,
									"scores":	[-4.053441956650782]
								}, {
									"case":	128,
									"scores":	[-4.053441956650782]
								}, {
									"case":	129,
									"scores":	[-4.053441956650782]
								}, {
									"case":	130,
									"scores":	[-4.053441956650782]
								}, {
									"case":	131,
									"scores":	[-4.053441956650782]
								}, {
									"case":	132,
									"scores":	[-4.053441956650782]
								}, {
									"case":	133,
									"scores":	[-4.053441956650782]
								}, {
									"case":	134,
									"scores":	[-4.053441956650782]
								}, {
									"case":	135,
									"scores":	[-4.053441956650782]
								}, {
									"case":	136,
									"scores":	[-4.053441956650782]
								}, {
									"case":	137,
									"scores":	[-4.053441956650782]
								}, {
									"case":	138,
									"scores":	[-4.053441956650782]
								}, {
									"case":	139,
									"scores":	[-4.053441956650782]
								}, {
									"case":	140,
									"scores":	[-4.053441956650782]
								}, {
									"case":	141,
									"scores":	[-4.053441956650782]
								}, {
									"case":	142,
									"scores":	[-4.053441956650782]
								}, {
									"case":	143,
									"scores":	[-4.053441956650782]
								}, {
									"case":	144,
									"scores":	[-4.053441956650782]
								}, {
									"case":	145,
									"scores":	[-4.053441956650782]
								}, {
									"case":	146,
									"scores":	[-4.053441956650782]
								}, {
									"case":	147,
									"scores":	[-4.053441956650782]
								}, {
									"case":	148,
									"scores":	[-4.053441956650782]
								}, {
									"case":	149,
									"scores":	[-4.053441956650782]
								}, {
									"case":	150,
									"scores":	[-4.053441956650782]
								}, {
									"case":	151,
									"scores":	[-4.053441956650782]
								}, {
									"case":	152,
									"scores":	[-4.053441956650782]
								}, {
									"case":	153,
									"scores":	[-4.053441956650782]
								}, {
									"case":	154,
									"scores":	[-4.053441956650782]
								}, {
									"case":	155,
									"scores":	[-4.053441956650782]
								}, {
									"case":	156,
									"scores":	[-4.053441956650782]
								}, {
									"case":	157,
									"scores":	[-4.053441956650782]
								}, {
									"case":	158,
									"scores":	[-4.053441956650782]
								}, {
									"case":	159,
									"scores":	[-4.053441956650782]
								}, {
									"case":	160,
									"scores":	[-4.053441956650782]
								}, {
									"case":	161,
									"scores":	[-4.053441956650782]
								}, {
									"case":	162,
									"scores":	[-4.053441956650782]
								}, {
									"case":	163,
									"scores":	[-4.053441956650782]
								}, {
									"case":	164,
									"scores":	[-4.053441956650782]
								}, {
									"case":	165,
									"scores":	[-4.053441956650782]
								}, {
									"case":	166,
									"scores":	[-4.053441956650782]
								}, {
									"case":	167,
									"scores":	[-4.053441956650782]
								}, {
									"case":	168,
									"scores":	[-4.053441956650782]
								}, {
									"case":	169,
									"scores":	[-4.053441956650782]
								}, {
									"case":	170,
									"scores":	[-4.053441956650782]
								}, {
									"case":	171,
									"scores":	[-4.053441956650782]
								}, {
									"case":	172,
									"scores":	[-4.053441956650782]
								}, {
									"case":	173,
									"scores":	[-4.053441956650782]
								}, {
									"case":	174,
									"scores":	[-4.053441956650782]
								}, {
									"case":	175,
									"scores":	[-4.053441956650782]
								}, {
									"case":	176,
									"scores":	[-4.053441956650782]
								}, {
									"case":	177,
									"scores":	[-4.053441956650782]
								}, {
									"case":	178,
									"scores":	[-4.053441956650782]
								}, {
									"case":	179,
									"scores":	[-4.053441956650782]
								}, {
									"case":	180,
									"scores":	[-4.053441956650782]
								}, {
									"case":	181,
									"scores":	[-4.053441956650782]
								}, {
									"case":	182,
									"scores":	[-4.053441956650782]
								}, {
									"case":	183,
									"scores":	[-4.053441956650782]
								}, {
									"case":	184,
									"scores":	[-4.053441956650782]
								}, {
									"case":	185,
									"scores":	[-4.053441956650782]
								}, {
									"case":	186,
									"scores":	[-4.053441956650782]
								}, {
									"case":	187,
									"scores":	[-4.053441956650782]
								}, {
									"case":	188,
									"scores":	[-4.053441956650782]
								}, {
									"case":	189,
									"scores":	[-4.053441956650782]
								}, {
									"case":	190,
									"scores":	[-4.053441956650782]
								}, {
									"case":	191,
									"scores":	[-4.053441956650782]
								}, {
									"case":	192,
									"scores":	[-4.053441956650782]
								}, {
									"case":	193,
									"scores":	[-4.053441956650782]
								}, {
									"case":	194,
									"scores":	[-4.053441956650782]
								}, {
									"case":	195,
									"scores":	[-4.053441956650782]
								}, {
									"case":	196,
									"scores":	[-4.053441956650782]
								}, {
									"case":	197,
									"scores":	[-4.053441956650782]
								}, {
									"case":	198,
									"scores":	[-4.053441956650782]
								}, {
									"case":	199,
									"scores":	[-4.053441956650782]
								}, {
									"case":	200,
									"scores":	[-4.053441956650782]
								}, {
									"case":	201,
									"scores":	[-4.053441956650782]
								}, {
									"case":	202,
									"scores":	[-4.053441956650782]
								}, {
									"case":	203,
									"scores":	[-4.053441956650782]
								}, {
									"case":	204,
									"scores":	[-4.053441956650782]
								}, {
									"case":	205,
									"scores":	[-4.053441956650782]
								}, {
									"case":	206,
									"scores":	[-4.053441956650782]
								}, {
									"case":	207,
									"scores":	[-4.053441956650782]
								}, {
									"case":	208,
									"scores":	[-4.053441956650782]
								}, {
									"case":	209,
									"scores":	[-4.053441956650782]
								}, {
									"case":	210,
									"scores":	[-4.053441956650782]
								}, {
									"case":	211,
									"scores":	[-4.053441956650782]
								}, {
									"case":	212,
									"scores":	[-4.053441956650782]
								}, {
									"case":	213,
									"scores":	[-4.053441956650782]
								}, {
									"case":	214,
									"scores":	[-4.053441956650782]
								}, {
									"case":	215,
									"scores":	[-4.053441956650782]
								}, {
									"case":	216,
									"scores":	[-4.053441956650782]
								}, {
									"case":	217,
									"scores":	[-4.053441956650782]
								}, {
									"case":	218,
									"scores":	[-4.053441956650782]
								}, {
									"case":	219,
									"scores":	[-4.053441956650782]
								}, {
									"case":	220,
									"scores":	[-4.053441956650782]
								}, {
									"case":	221,
									"scores":	[-4.053441956650782]
								}, {
									"case":	222,
									"scores":	[-4.053441956650782]
								}, {
									"case":	223,
									"scores":	[-4.053441956650782]
								}, {
									"case":	224,
									"scores":	[-4.053441956650782]
								}, {
									"case":	225,
									"scores":	[-4.053441956650782]
								}]
						}]
				}, {
					"line":	671,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	672,
							"begin_column":	2,
							"end_line":	672,
							"end_column":	2,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L672\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L672\", 28, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(list), sizeof (list), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	2,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	3,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	4,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	5,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	6,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	7,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	8,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	9,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	10,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	11,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	12,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	13,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	14,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	15,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	16,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	17,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	18,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	19,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	20,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	21,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	22,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	23,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	24,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	25,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	26,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	27,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	28,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	29,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	30,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	31,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	32,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	33,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	34,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	35,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	36,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	37,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	38,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	39,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	40,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	41,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	42,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	43,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	44,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	45,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	46,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	47,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	48,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	49,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	50,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	51,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	52,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	53,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	54,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	55,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	56,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	57,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	58,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	59,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	60,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	61,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	62,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	63,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	64,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	65,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	66,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	67,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	68,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	69,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	70,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	71,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	72,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	73,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	74,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	75,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	76,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	77,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	78,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	79,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	80,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	81,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	82,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	83,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	84,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	85,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	86,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	87,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	88,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	89,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	90,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	91,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	92,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	93,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	94,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	95,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	96,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	97,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	98,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	99,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	100,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	101,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	102,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	103,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	104,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	105,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	106,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	107,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	108,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	109,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	110,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	111,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	112,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	113,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	114,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	115,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	116,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	117,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	118,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	119,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	120,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	121,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	122,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	123,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	124,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	125,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	126,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	127,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	128,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	129,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	130,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	131,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	132,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	133,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	134,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	135,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	136,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	137,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	138,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	139,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	140,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	141,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	142,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	143,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	144,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	145,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	146,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	147,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	148,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	149,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	150,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	151,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	152,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	153,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	154,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	155,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	156,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	157,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	158,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	159,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	160,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	161,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	162,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	163,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	164,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	165,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	166,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	167,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	168,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	169,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	170,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	171,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	172,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	173,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	174,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	175,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	176,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	177,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	178,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	179,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	180,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	181,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	182,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	183,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	184,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	185,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	186,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	187,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	188,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	189,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	190,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	191,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	192,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	193,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	194,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	195,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	196,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	197,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	198,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	199,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	200,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	201,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	202,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	203,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	204,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	205,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	206,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	207,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	208,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	209,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	210,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	211,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	212,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	213,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	214,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	215,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	216,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	217,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	218,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	219,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	220,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	221,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	222,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	223,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	224,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	225,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	226,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	227,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	228,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	229,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	230,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	231,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	232,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	233,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	234,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	235,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	236,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	237,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	238,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	239,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	240,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	241,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	242,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	243,
									"scores":	[-6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.7691532858493915, -6.7691532858493915, -6.6797305858493914]
								}, {
									"case":	244,
									"scores":	[-6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.6797305858493914, -6.7691532858493915, -6.7691532858493915, -6.6797305858493914]
								}]
						}]
				}, {
					"line":	670,
					"switches":	[{
							"switch":	21,
							"types":	[[], [], [], [], [243, 244], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	671,
							"begin_column":	0,
							"end_line":	671,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L671\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if (__is_neg(\"\", \"L671\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.30600981033699]
								}, {
									"case":	2,
									"scores":	[-5.30600981033699]
								}, {
									"case":	3,
									"scores":	[-5.30600981033699]
								}, {
									"case":	4,
									"scores":	[-5.30600981033699]
								}, {
									"case":	5,
									"scores":	[-5.30600981033699]
								}, {
									"case":	6,
									"scores":	[-5.30600981033699]
								}, {
									"case":	7,
									"scores":	[-5.30600981033699]
								}, {
									"case":	8,
									"scores":	[-5.30600981033699]
								}, {
									"case":	9,
									"scores":	[-5.30600981033699]
								}, {
									"case":	10,
									"scores":	[-5.30600981033699]
								}, {
									"case":	11,
									"scores":	[-5.30600981033699]
								}, {
									"case":	12,
									"scores":	[-5.30600981033699]
								}, {
									"case":	13,
									"scores":	[-5.30600981033699]
								}, {
									"case":	14,
									"scores":	[-5.30600981033699]
								}, {
									"case":	15,
									"scores":	[-5.30600981033699]
								}, {
									"case":	16,
									"scores":	[-5.30600981033699]
								}, {
									"case":	17,
									"scores":	[-5.30600981033699]
								}, {
									"case":	18,
									"scores":	[-5.30600981033699]
								}, {
									"case":	19,
									"scores":	[-5.30600981033699]
								}, {
									"case":	20,
									"scores":	[-5.30600981033699]
								}, {
									"case":	21,
									"scores":	[-5.30600981033699]
								}, {
									"case":	22,
									"scores":	[-5.30600981033699]
								}, {
									"case":	23,
									"scores":	[-5.30600981033699]
								}, {
									"case":	24,
									"scores":	[-5.30600981033699]
								}, {
									"case":	25,
									"scores":	[-5.30600981033699]
								}, {
									"case":	26,
									"scores":	[-5.30600981033699]
								}, {
									"case":	27,
									"scores":	[-5.30600981033699]
								}, {
									"case":	28,
									"scores":	[-5.30600981033699]
								}, {
									"case":	29,
									"scores":	[-5.30600981033699]
								}, {
									"case":	30,
									"scores":	[-5.30600981033699]
								}, {
									"case":	31,
									"scores":	[-5.30600981033699]
								}, {
									"case":	32,
									"scores":	[-5.30600981033699]
								}, {
									"case":	33,
									"scores":	[-5.30600981033699]
								}, {
									"case":	34,
									"scores":	[-5.30600981033699]
								}, {
									"case":	35,
									"scores":	[-5.30600981033699]
								}, {
									"case":	36,
									"scores":	[-5.30600981033699]
								}, {
									"case":	37,
									"scores":	[-5.30600981033699]
								}, {
									"case":	38,
									"scores":	[-5.30600981033699]
								}, {
									"case":	39,
									"scores":	[-5.30600981033699]
								}, {
									"case":	40,
									"scores":	[-5.30600981033699]
								}, {
									"case":	41,
									"scores":	[-5.30600981033699]
								}, {
									"case":	42,
									"scores":	[-5.30600981033699]
								}, {
									"case":	43,
									"scores":	[-5.30600981033699]
								}, {
									"case":	44,
									"scores":	[-5.30600981033699]
								}, {
									"case":	45,
									"scores":	[-5.30600981033699]
								}, {
									"case":	46,
									"scores":	[-5.30600981033699]
								}, {
									"case":	47,
									"scores":	[-5.30600981033699]
								}, {
									"case":	48,
									"scores":	[-5.30600981033699]
								}, {
									"case":	49,
									"scores":	[-5.30600981033699]
								}, {
									"case":	50,
									"scores":	[-5.30600981033699]
								}, {
									"case":	51,
									"scores":	[-5.30600981033699]
								}, {
									"case":	52,
									"scores":	[-5.30600981033699]
								}, {
									"case":	53,
									"scores":	[-5.30600981033699]
								}, {
									"case":	54,
									"scores":	[-5.30600981033699]
								}, {
									"case":	55,
									"scores":	[-5.30600981033699]
								}, {
									"case":	56,
									"scores":	[-5.30600981033699]
								}, {
									"case":	57,
									"scores":	[-5.30600981033699]
								}, {
									"case":	58,
									"scores":	[-5.30600981033699]
								}, {
									"case":	59,
									"scores":	[-5.30600981033699]
								}, {
									"case":	60,
									"scores":	[-5.30600981033699]
								}, {
									"case":	61,
									"scores":	[-5.30600981033699]
								}, {
									"case":	62,
									"scores":	[-5.30600981033699]
								}, {
									"case":	63,
									"scores":	[-5.30600981033699]
								}, {
									"case":	64,
									"scores":	[-5.30600981033699]
								}, {
									"case":	65,
									"scores":	[-5.30600981033699]
								}, {
									"case":	66,
									"scores":	[-5.30600981033699]
								}, {
									"case":	67,
									"scores":	[-5.30600981033699]
								}, {
									"case":	68,
									"scores":	[-5.30600981033699]
								}, {
									"case":	69,
									"scores":	[-5.30600981033699]
								}, {
									"case":	70,
									"scores":	[-5.30600981033699]
								}, {
									"case":	71,
									"scores":	[-5.30600981033699]
								}, {
									"case":	72,
									"scores":	[-5.30600981033699]
								}, {
									"case":	73,
									"scores":	[-5.30600981033699]
								}, {
									"case":	74,
									"scores":	[-5.30600981033699]
								}, {
									"case":	75,
									"scores":	[-5.30600981033699]
								}, {
									"case":	76,
									"scores":	[-5.30600981033699]
								}, {
									"case":	77,
									"scores":	[-5.30600981033699]
								}, {
									"case":	78,
									"scores":	[-5.30600981033699]
								}, {
									"case":	79,
									"scores":	[-5.30600981033699]
								}, {
									"case":	80,
									"scores":	[-5.30600981033699]
								}, {
									"case":	81,
									"scores":	[-5.30600981033699]
								}, {
									"case":	82,
									"scores":	[-5.30600981033699]
								}, {
									"case":	83,
									"scores":	[-5.30600981033699]
								}, {
									"case":	84,
									"scores":	[-5.30600981033699]
								}, {
									"case":	85,
									"scores":	[-5.30600981033699]
								}, {
									"case":	86,
									"scores":	[-5.30600981033699]
								}, {
									"case":	87,
									"scores":	[-5.30600981033699]
								}, {
									"case":	88,
									"scores":	[-5.30600981033699]
								}, {
									"case":	89,
									"scores":	[-5.30600981033699]
								}, {
									"case":	90,
									"scores":	[-5.30600981033699]
								}, {
									"case":	91,
									"scores":	[-5.30600981033699]
								}, {
									"case":	92,
									"scores":	[-5.30600981033699]
								}, {
									"case":	93,
									"scores":	[-5.30600981033699]
								}, {
									"case":	94,
									"scores":	[-5.30600981033699]
								}, {
									"case":	95,
									"scores":	[-5.30600981033699]
								}, {
									"case":	96,
									"scores":	[-5.30600981033699]
								}, {
									"case":	97,
									"scores":	[-5.30600981033699]
								}, {
									"case":	98,
									"scores":	[-5.30600981033699]
								}, {
									"case":	99,
									"scores":	[-5.30600981033699]
								}, {
									"case":	100,
									"scores":	[-5.30600981033699]
								}, {
									"case":	101,
									"scores":	[-5.30600981033699]
								}, {
									"case":	102,
									"scores":	[-5.30600981033699]
								}, {
									"case":	103,
									"scores":	[-5.30600981033699]
								}, {
									"case":	104,
									"scores":	[-5.30600981033699]
								}, {
									"case":	105,
									"scores":	[-5.30600981033699]
								}, {
									"case":	106,
									"scores":	[-5.30600981033699]
								}, {
									"case":	107,
									"scores":	[-5.30600981033699]
								}, {
									"case":	108,
									"scores":	[-5.30600981033699]
								}, {
									"case":	109,
									"scores":	[-5.30600981033699]
								}, {
									"case":	110,
									"scores":	[-5.30600981033699]
								}, {
									"case":	111,
									"scores":	[-5.30600981033699]
								}, {
									"case":	112,
									"scores":	[-5.30600981033699]
								}, {
									"case":	113,
									"scores":	[-5.30600981033699]
								}, {
									"case":	114,
									"scores":	[-5.30600981033699]
								}, {
									"case":	115,
									"scores":	[-5.30600981033699]
								}, {
									"case":	116,
									"scores":	[-5.30600981033699]
								}, {
									"case":	117,
									"scores":	[-5.30600981033699]
								}, {
									"case":	118,
									"scores":	[-5.30600981033699]
								}, {
									"case":	119,
									"scores":	[-5.30600981033699]
								}, {
									"case":	120,
									"scores":	[-5.30600981033699]
								}, {
									"case":	121,
									"scores":	[-5.30600981033699]
								}, {
									"case":	122,
									"scores":	[-5.30600981033699]
								}, {
									"case":	123,
									"scores":	[-5.30600981033699]
								}, {
									"case":	124,
									"scores":	[-5.30600981033699]
								}, {
									"case":	125,
									"scores":	[-5.30600981033699]
								}, {
									"case":	126,
									"scores":	[-5.30600981033699]
								}, {
									"case":	127,
									"scores":	[-5.30600981033699]
								}, {
									"case":	128,
									"scores":	[-5.30600981033699]
								}, {
									"case":	129,
									"scores":	[-5.30600981033699]
								}, {
									"case":	130,
									"scores":	[-5.30600981033699]
								}, {
									"case":	131,
									"scores":	[-5.30600981033699]
								}, {
									"case":	132,
									"scores":	[-5.30600981033699]
								}, {
									"case":	133,
									"scores":	[-5.30600981033699]
								}, {
									"case":	134,
									"scores":	[-5.30600981033699]
								}, {
									"case":	135,
									"scores":	[-5.30600981033699]
								}, {
									"case":	136,
									"scores":	[-5.30600981033699]
								}, {
									"case":	137,
									"scores":	[-5.30600981033699]
								}, {
									"case":	138,
									"scores":	[-5.30600981033699]
								}, {
									"case":	139,
									"scores":	[-5.30600981033699]
								}, {
									"case":	140,
									"scores":	[-5.30600981033699]
								}, {
									"case":	141,
									"scores":	[-5.30600981033699]
								}, {
									"case":	142,
									"scores":	[-5.30600981033699]
								}, {
									"case":	143,
									"scores":	[-5.30600981033699]
								}, {
									"case":	144,
									"scores":	[-5.30600981033699]
								}, {
									"case":	145,
									"scores":	[-5.30600981033699]
								}, {
									"case":	146,
									"scores":	[-5.30600981033699]
								}, {
									"case":	147,
									"scores":	[-5.30600981033699]
								}, {
									"case":	148,
									"scores":	[-5.30600981033699]
								}, {
									"case":	149,
									"scores":	[-5.30600981033699]
								}, {
									"case":	150,
									"scores":	[-5.30600981033699]
								}, {
									"case":	151,
									"scores":	[-5.30600981033699]
								}, {
									"case":	152,
									"scores":	[-5.30600981033699]
								}, {
									"case":	153,
									"scores":	[-5.30600981033699]
								}, {
									"case":	154,
									"scores":	[-5.30600981033699]
								}, {
									"case":	155,
									"scores":	[-5.30600981033699]
								}, {
									"case":	156,
									"scores":	[-5.30600981033699]
								}, {
									"case":	157,
									"scores":	[-5.30600981033699]
								}, {
									"case":	158,
									"scores":	[-5.30600981033699]
								}, {
									"case":	159,
									"scores":	[-5.30600981033699]
								}, {
									"case":	160,
									"scores":	[-5.30600981033699]
								}, {
									"case":	161,
									"scores":	[-5.30600981033699]
								}, {
									"case":	162,
									"scores":	[-5.30600981033699]
								}, {
									"case":	163,
									"scores":	[-5.30600981033699]
								}, {
									"case":	164,
									"scores":	[-5.30600981033699]
								}, {
									"case":	165,
									"scores":	[-5.30600981033699]
								}, {
									"case":	166,
									"scores":	[-5.30600981033699]
								}, {
									"case":	167,
									"scores":	[-5.30600981033699]
								}, {
									"case":	168,
									"scores":	[-5.30600981033699]
								}, {
									"case":	169,
									"scores":	[-5.30600981033699]
								}, {
									"case":	170,
									"scores":	[-5.30600981033699]
								}, {
									"case":	171,
									"scores":	[-5.30600981033699]
								}, {
									"case":	172,
									"scores":	[-5.30600981033699]
								}, {
									"case":	173,
									"scores":	[-5.30600981033699]
								}, {
									"case":	174,
									"scores":	[-5.30600981033699]
								}, {
									"case":	175,
									"scores":	[-5.30600981033699]
								}, {
									"case":	176,
									"scores":	[-5.30600981033699]
								}, {
									"case":	177,
									"scores":	[-5.30600981033699]
								}, {
									"case":	178,
									"scores":	[-5.30600981033699]
								}, {
									"case":	179,
									"scores":	[-5.30600981033699]
								}, {
									"case":	180,
									"scores":	[-5.30600981033699]
								}, {
									"case":	181,
									"scores":	[-5.30600981033699]
								}, {
									"case":	182,
									"scores":	[-5.30600981033699]
								}, {
									"case":	183,
									"scores":	[-5.30600981033699]
								}, {
									"case":	184,
									"scores":	[-5.30600981033699]
								}, {
									"case":	185,
									"scores":	[-5.30600981033699]
								}, {
									"case":	186,
									"scores":	[-5.30600981033699]
								}, {
									"case":	187,
									"scores":	[-5.30600981033699]
								}, {
									"case":	188,
									"scores":	[-5.30600981033699]
								}, {
									"case":	189,
									"scores":	[-5.30600981033699]
								}, {
									"case":	190,
									"scores":	[-5.30600981033699]
								}, {
									"case":	191,
									"scores":	[-5.30600981033699]
								}, {
									"case":	192,
									"scores":	[-5.30600981033699]
								}, {
									"case":	193,
									"scores":	[-5.30600981033699]
								}, {
									"case":	194,
									"scores":	[-5.30600981033699]
								}, {
									"case":	195,
									"scores":	[-5.30600981033699]
								}, {
									"case":	196,
									"scores":	[-5.30600981033699]
								}, {
									"case":	197,
									"scores":	[-5.30600981033699]
								}, {
									"case":	198,
									"scores":	[-5.30600981033699]
								}, {
									"case":	199,
									"scores":	[-5.30600981033699]
								}, {
									"case":	200,
									"scores":	[-5.30600981033699]
								}, {
									"case":	201,
									"scores":	[-5.30600981033699]
								}, {
									"case":	202,
									"scores":	[-5.30600981033699]
								}, {
									"case":	203,
									"scores":	[-5.30600981033699]
								}, {
									"case":	204,
									"scores":	[-5.30600981033699]
								}, {
									"case":	205,
									"scores":	[-5.30600981033699]
								}, {
									"case":	206,
									"scores":	[-5.30600981033699]
								}, {
									"case":	207,
									"scores":	[-5.30600981033699]
								}, {
									"case":	208,
									"scores":	[-5.30600981033699]
								}, {
									"case":	209,
									"scores":	[-5.30600981033699]
								}, {
									"case":	210,
									"scores":	[-5.30600981033699]
								}, {
									"case":	211,
									"scores":	[-5.30600981033699]
								}, {
									"case":	212,
									"scores":	[-5.30600981033699]
								}, {
									"case":	213,
									"scores":	[-5.30600981033699]
								}, {
									"case":	214,
									"scores":	[-5.30600981033699]
								}, {
									"case":	215,
									"scores":	[-5.30600981033699]
								}, {
									"case":	216,
									"scores":	[-5.30600981033699]
								}, {
									"case":	217,
									"scores":	[-5.30600981033699]
								}, {
									"case":	218,
									"scores":	[-5.30600981033699]
								}, {
									"case":	219,
									"scores":	[-5.30600981033699]
								}, {
									"case":	220,
									"scores":	[-5.30600981033699]
								}, {
									"case":	221,
									"scores":	[-5.30600981033699]
								}, {
									"case":	222,
									"scores":	[-5.30600981033699]
								}, {
									"case":	223,
									"scores":	[-5.30600981033699]
								}, {
									"case":	224,
									"scores":	[-5.30600981033699]
								}, {
									"case":	225,
									"scores":	[-5.30600981033699]
								}, {
									"case":	226,
									"scores":	[-5.30600981033699]
								}, {
									"case":	227,
									"scores":	[-5.30600981033699]
								}, {
									"case":	228,
									"scores":	[-5.30600981033699]
								}, {
									"case":	229,
									"scores":	[-5.30600981033699]
								}, {
									"case":	230,
									"scores":	[-5.30600981033699]
								}, {
									"case":	231,
									"scores":	[-5.30600981033699]
								}, {
									"case":	232,
									"scores":	[-5.30600981033699]
								}, {
									"case":	233,
									"scores":	[-5.30600981033699]
								}, {
									"case":	234,
									"scores":	[-5.30600981033699]
								}, {
									"case":	235,
									"scores":	[-5.30600981033699]
								}, {
									"case":	236,
									"scores":	[-5.30600981033699]
								}, {
									"case":	237,
									"scores":	[-5.30600981033699]
								}, {
									"case":	238,
									"scores":	[-5.30600981033699]
								}, {
									"case":	239,
									"scores":	[-5.30600981033699]
								}, {
									"case":	240,
									"scores":	[-5.30600981033699]
								}, {
									"case":	241,
									"scores":	[-5.30600981033699]
								}, {
									"case":	242,
									"scores":	[-5.30600981033699]
								}, {
									"case":	243,
									"scores":	[-9.44386521343699, -9.15641254343699, -8.94967582343699, -9.15641254343699, -8.94967582343699, -9.28813357823699, -9.28813357823699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.97804111343699, -8.97804111343699, -8.88861841343699]
								}, {
									"case":	244,
									"scores":	[-9.44386521343699, -9.15641254343699, -8.94967582343699, -9.15641254343699, -8.94967582343699, -9.28813357823699, -9.28813357823699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.88861841343699, -8.97804111343699, -8.97804111343699, -8.88861841343699]
								}]
						}, {
							"switch":	22,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	671,
							"begin_column":	2,
							"end_line":	672,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L671\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if ((input_eof()) || __is_neg(\"\", \"L671\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n", "if ((input_eof()) && !__is_neg(\"\", \"L671\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7225486554281462, -4.3426428554281458, -3.1228542784281466, -4.3426428554281458, -3.1228542784281466, -4.3769987394281458, -4.3769987394281458, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.7407275054281461, -4.7407275054281461, -4.3037625054281463]
								}, {
									"case":	2,
									"scores":	[-4.4687642454281455, -4.088858445428146, -2.8690698684281468, -4.088858445428146, -2.8690698684281468, -4.123214329428146, -4.123214329428146, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.4869430954281455, -4.4869430954281455, -4.0499780954281457]
								}, {
									"case":	3,
									"scores":	[-4.4687642454281455, -4.088858445428146, -2.8690698684281468, -4.088858445428146, -2.8690698684281468, -4.123214329428146, -4.123214329428146, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.4869430954281455, -4.4869430954281455, -4.0499780954281457]
								}]
						}, {
							"switch":	24,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	671,
							"begin_column":	2,
							"end_line":	672,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L671\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (input_eof())\n        break;\n", "if (!__is_neg(\"\", \"L671\", 28, &(work), sizeof (work), &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(list), sizeof (list), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (input_eof()))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.22652074033699, -6.8466149403369885, -5.62682636333699, -6.8466149403369885, -5.62682636333699, -6.8809708243369885, -6.8809708243369885, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -6.80773459033699, -7.24469959033699, -7.24469959033699, -6.80773459033699]
								}, {
									"case":	2,
									"scores":	[-6.97360563333699, -6.59369983333699, -5.3739112563369886, -6.59369983333699, -5.3739112563369886, -6.62805571733699, -6.62805571733699, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.5548194833369884, -6.99178448333699, -6.99178448333699, -6.5548194833369884]
								}]
						}]
				}, {
					"line":	678,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [243], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [], [], [], [], [], []],
							"begin_line":	679,
							"begin_column":	3,
							"end_line":	679,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (32768)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (32768)", "bytes_out = (61440)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (32768)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (32768)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (32768)", "foreground = (61440)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (32768)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (32768)", "ifd = (61440)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (32768)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (32768)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (32768)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (32768)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (32768)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (32768)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (32768)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (32768)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (32768)", "part_nb = (61440)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (32768)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (32768)", "save_orig_name = (61440)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (32768)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (32768)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (32768)", "total_out = (61440)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (32768)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (32768)", "z_len = (61440)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L679\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	2,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	3,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	4,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	5,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	6,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	7,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	8,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	9,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	10,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	11,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	12,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	13,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	14,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	15,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	16,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	17,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	18,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	19,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	20,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	21,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	22,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	23,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	24,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	25,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	26,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	27,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	28,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	29,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	30,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	31,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	32,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	33,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	34,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	35,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	36,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	37,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	38,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	39,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	40,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	41,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	42,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	43,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	44,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	45,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	46,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	47,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	48,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	49,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	50,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	51,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	52,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	53,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	54,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	55,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	56,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	57,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	58,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	59,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	60,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	61,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	62,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	63,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	64,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	65,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	66,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	67,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	68,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	69,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	70,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	71,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	72,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	73,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	74,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	75,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	76,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	77,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	78,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	79,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	80,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	81,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	82,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	83,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	84,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	85,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	86,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	87,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	88,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	89,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	90,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	91,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	92,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	93,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	94,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	95,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	96,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	97,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	98,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	99,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	100,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	101,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	102,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	103,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	104,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	105,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	106,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	107,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	108,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	109,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	110,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	111,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	112,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	113,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	114,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	115,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	116,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	117,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	118,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	119,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	120,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	121,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	122,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	123,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	124,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	125,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	126,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	127,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	128,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	129,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	130,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	131,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	132,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	133,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	134,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	135,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	136,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	137,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	138,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	139,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	140,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	141,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	142,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	143,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	144,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	145,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	146,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	147,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	148,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	149,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	150,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	151,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	152,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	153,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	154,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	155,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	156,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	157,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	158,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	159,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	160,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	161,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	162,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	163,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	164,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	165,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	166,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	167,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	168,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	169,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	170,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	171,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	172,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	173,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	174,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	175,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	176,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	177,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	178,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	179,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	180,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	181,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	182,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	183,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	184,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	185,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	186,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	187,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	188,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	189,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	190,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	191,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	192,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	193,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	194,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	195,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	196,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	197,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	198,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	199,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	200,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	201,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	202,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	203,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	204,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	205,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	206,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	207,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	208,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	209,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	210,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	211,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	212,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	213,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	214,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	215,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	216,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	217,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	218,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	219,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	220,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	221,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	222,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	223,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	224,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	225,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	226,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	227,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	228,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	229,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	230,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	231,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	232,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	233,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	234,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	235,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	236,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	237,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	238,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	239,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	240,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	241,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	242,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	243,
									"scores":	[-8.7094904622143527, -8.7094904622143527, -8.7094904622143527, -8.7094904622143527, -6.8906808262143535, -6.8906808262143535, -6.4557305319143534, -8.7094904622143527, -6.4557305319143534, -7.3069147382143527, -8.2900643382143535, -8.51715243191435, -7.3069147382143527, -8.51715243191435, -9.2647372622143536, -8.7094904622143527, -8.9000534319143529, -8.9000534319143529, -8.7094904622143527, -8.7094904622143527, -8.7094904622143527, -8.7094904622143527, -8.7094904622143527, -8.7094904622143527, -8.7094904622143527, -8.7989131622143528, -8.7989131622143528, -8.7094904622143527]
								}]
						}, {
							"switch":	26,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	679,
							"begin_column":	5,
							"end_line":	692,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L679\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    if (test) {\n        fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        fprintf(stderr, \"\\n\");\n    }\n}\n", "if ((verbose) || __is_neg(\"\", \"L679\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    if (test) {\n        fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        fprintf(stderr, \"\\n\");\n    }\n}\n", "if ((verbose) && !__is_neg(\"\", \"L679\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    if (test) {\n        fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        fprintf(stderr, \"\\n\");\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.1261120634281454, -5.1261120634281454, -4.1871772831281469, -5.5901118164281458, -4.1871772831281469, -4.7108255164281463, -4.5072381164281463, -5.362609436128146, -4.7108255164281463, -5.362609436128146, -6.0088979664281457, -5.5901118164281458, -5.5780391361281456, -5.5780391361281456, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -5.5901118164281458, -6.0270768164281456, -6.0270768164281456, -5.5901118164281458]
								}, {
									"case":	2,
									"scores":	[-4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -3.6591638524281462, -3.6591638524281462, -2.7202290721281459, -4.1231636054281458, -2.7202290721281459, -3.2438773054281462, -3.0402899054281463, -3.8956612251281459, -3.2438773054281462, -3.8956612251281459, -4.5419497554281456, -4.1231636054281458, -4.1110909251281456, -4.1110909251281456, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.5601286054281456, -4.5601286054281456, -4.1231636054281458]
								}, {
									"case":	3,
									"scores":	[-4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -3.6591638524281462, -3.6591638524281462, -2.7202290721281459, -4.1231636054281458, -2.7202290721281459, -3.2438773054281462, -3.0402899054281463, -3.8956612251281459, -3.2438773054281462, -3.8956612251281459, -4.5419497554281456, -4.1231636054281458, -4.1110909251281456, -4.1110909251281456, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.1231636054281458, -4.5601286054281456, -4.5601286054281456, -4.1231636054281458]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	679,
							"begin_column":	5,
							"end_line":	692,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L679\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (verbose) {\n        if (test) {\n            fprintf(stderr, \" OK\\n\");\n        } else if (!decompress) {\n            display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n            fprintf(stderr, \"\\n\");\n        }\n    }\n", "if (!__is_neg(\"\", \"L679\", 28, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(decompress), sizeof (decompress), &(method), sizeof (method), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(ifd), sizeof (ifd), &(bytes_in), sizeof (bytes_in), &(ifd), sizeof (ifd), &(work), sizeof (work), &(list), sizeof (list), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(part_nb), sizeof (part_nb), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(ascii), sizeof (ascii), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (verbose)) {\n    if (test) {\n        fprintf(stderr, \" OK\\n\");\n    } else if (!decompress) {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        fprintf(stderr, \"\\n\");\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -6.6063059061143523, -6.6063059061143523, -5.6673711258143529, -7.0703056591143527, -5.6673711258143529, -6.1910193591143523, -5.9874319591143523, -6.842803278814352, -6.1910193591143523, -6.842803278814352, -7.4890918091143526, -7.0703056591143527, -7.0582329788143525, -7.0582329788143525, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.5072706591143525, -7.5072706591143525, -7.0703056591143527]
								}, {
									"case":	2,
									"scores":	[-7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -6.6063059061143523, -6.6063059061143523, -5.6673711258143529, -7.0703056591143527, -5.6673711258143529, -6.1910193591143523, -5.9874319591143523, -6.842803278814352, -6.1910193591143523, -6.842803278814352, -7.4890918091143526, -7.0703056591143527, -7.0582329788143525, -7.0582329788143525, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.0703056591143527, -7.5072706591143525, -7.5072706591143525, -7.0703056591143527]
								}]
						}]
				}, {
					"line":	702,
					"switches":	[]
				}, {
					"line":	703,
					"switches":	[{
							"switch":	30,
							"types":	[[], [], [], [], [412], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313], [], [], [], [], [], []],
							"begin_line":	704,
							"begin_column":	0,
							"end_line":	704,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exit_code = (cflag)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "exiting_signal = (cflag)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "foreground = (cflag)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = (cflag)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "last_member = (cflag)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "list = (cflag)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "method = (cflag)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_name = (cflag)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "no_time = (cflag)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "ofd = (cflag)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "part_nb = (cflag)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "quiet = (cflag)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "remove_ofname_fd = (cflag)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "save_orig_name = (cflag)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "to_stdout = (cflag)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "verbose = (cflag)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "to_stdout = cflag", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L704\", 38, &(cflag), sizeof (cflag), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(iname), sizeof (iname), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.15445549323838]
								}, {
									"case":	2,
									"scores":	[-4.15445549323838]
								}, {
									"case":	3,
									"scores":	[-4.15445549323838]
								}, {
									"case":	4,
									"scores":	[-4.15445549323838]
								}, {
									"case":	5,
									"scores":	[-4.15445549323838]
								}, {
									"case":	6,
									"scores":	[-4.15445549323838]
								}, {
									"case":	7,
									"scores":	[-4.15445549323838]
								}, {
									"case":	8,
									"scores":	[-4.15445549323838]
								}, {
									"case":	9,
									"scores":	[-4.15445549323838]
								}, {
									"case":	10,
									"scores":	[-4.15445549323838]
								}, {
									"case":	11,
									"scores":	[-4.15445549323838]
								}, {
									"case":	12,
									"scores":	[-4.15445549323838]
								}, {
									"case":	13,
									"scores":	[-4.15445549323838]
								}, {
									"case":	14,
									"scores":	[-4.15445549323838]
								}, {
									"case":	15,
									"scores":	[-4.15445549323838]
								}, {
									"case":	16,
									"scores":	[-4.15445549323838]
								}, {
									"case":	17,
									"scores":	[-4.15445549323838]
								}, {
									"case":	18,
									"scores":	[-4.15445549323838]
								}, {
									"case":	19,
									"scores":	[-4.15445549323838]
								}, {
									"case":	20,
									"scores":	[-4.15445549323838]
								}, {
									"case":	21,
									"scores":	[-4.15445549323838]
								}, {
									"case":	22,
									"scores":	[-4.15445549323838]
								}, {
									"case":	23,
									"scores":	[-4.15445549323838]
								}, {
									"case":	24,
									"scores":	[-4.15445549323838]
								}, {
									"case":	25,
									"scores":	[-4.15445549323838]
								}, {
									"case":	26,
									"scores":	[-4.15445549323838]
								}, {
									"case":	27,
									"scores":	[-4.15445549323838]
								}, {
									"case":	28,
									"scores":	[-4.15445549323838]
								}, {
									"case":	29,
									"scores":	[-4.15445549323838]
								}, {
									"case":	30,
									"scores":	[-4.15445549323838]
								}, {
									"case":	31,
									"scores":	[-4.15445549323838]
								}, {
									"case":	32,
									"scores":	[-4.15445549323838]
								}, {
									"case":	33,
									"scores":	[-4.15445549323838]
								}, {
									"case":	34,
									"scores":	[-4.15445549323838]
								}, {
									"case":	35,
									"scores":	[-4.15445549323838]
								}, {
									"case":	36,
									"scores":	[-4.15445549323838]
								}, {
									"case":	37,
									"scores":	[-4.15445549323838]
								}, {
									"case":	38,
									"scores":	[-4.15445549323838]
								}, {
									"case":	39,
									"scores":	[-4.15445549323838]
								}, {
									"case":	40,
									"scores":	[-4.15445549323838]
								}, {
									"case":	41,
									"scores":	[-4.15445549323838]
								}, {
									"case":	42,
									"scores":	[-4.15445549323838]
								}, {
									"case":	43,
									"scores":	[-4.15445549323838]
								}, {
									"case":	44,
									"scores":	[-4.15445549323838]
								}, {
									"case":	45,
									"scores":	[-4.15445549323838]
								}, {
									"case":	46,
									"scores":	[-4.15445549323838]
								}, {
									"case":	47,
									"scores":	[-4.15445549323838]
								}, {
									"case":	48,
									"scores":	[-4.15445549323838]
								}, {
									"case":	49,
									"scores":	[-4.15445549323838]
								}, {
									"case":	50,
									"scores":	[-4.15445549323838]
								}, {
									"case":	51,
									"scores":	[-4.15445549323838]
								}, {
									"case":	52,
									"scores":	[-4.15445549323838]
								}, {
									"case":	53,
									"scores":	[-4.15445549323838]
								}, {
									"case":	54,
									"scores":	[-4.15445549323838]
								}, {
									"case":	55,
									"scores":	[-4.15445549323838]
								}, {
									"case":	56,
									"scores":	[-4.15445549323838]
								}, {
									"case":	57,
									"scores":	[-4.15445549323838]
								}, {
									"case":	58,
									"scores":	[-4.15445549323838]
								}, {
									"case":	59,
									"scores":	[-4.15445549323838]
								}, {
									"case":	60,
									"scores":	[-4.15445549323838]
								}, {
									"case":	61,
									"scores":	[-4.15445549323838]
								}, {
									"case":	62,
									"scores":	[-4.15445549323838]
								}, {
									"case":	63,
									"scores":	[-4.15445549323838]
								}, {
									"case":	64,
									"scores":	[-4.15445549323838]
								}, {
									"case":	65,
									"scores":	[-4.15445549323838]
								}, {
									"case":	66,
									"scores":	[-4.15445549323838]
								}, {
									"case":	67,
									"scores":	[-4.15445549323838]
								}, {
									"case":	68,
									"scores":	[-4.15445549323838]
								}, {
									"case":	69,
									"scores":	[-4.15445549323838]
								}, {
									"case":	70,
									"scores":	[-4.15445549323838]
								}, {
									"case":	71,
									"scores":	[-4.15445549323838]
								}, {
									"case":	72,
									"scores":	[-4.15445549323838]
								}, {
									"case":	73,
									"scores":	[-4.15445549323838]
								}, {
									"case":	74,
									"scores":	[-4.15445549323838]
								}, {
									"case":	75,
									"scores":	[-4.15445549323838]
								}, {
									"case":	76,
									"scores":	[-4.15445549323838]
								}, {
									"case":	77,
									"scores":	[-4.15445549323838]
								}, {
									"case":	78,
									"scores":	[-4.15445549323838]
								}, {
									"case":	79,
									"scores":	[-4.15445549323838]
								}, {
									"case":	80,
									"scores":	[-4.15445549323838]
								}, {
									"case":	81,
									"scores":	[-4.15445549323838]
								}, {
									"case":	82,
									"scores":	[-4.15445549323838]
								}, {
									"case":	83,
									"scores":	[-4.15445549323838]
								}, {
									"case":	84,
									"scores":	[-4.15445549323838]
								}, {
									"case":	85,
									"scores":	[-4.15445549323838]
								}, {
									"case":	86,
									"scores":	[-4.15445549323838]
								}, {
									"case":	87,
									"scores":	[-4.15445549323838]
								}, {
									"case":	88,
									"scores":	[-4.15445549323838]
								}, {
									"case":	89,
									"scores":	[-4.15445549323838]
								}, {
									"case":	90,
									"scores":	[-4.15445549323838]
								}, {
									"case":	91,
									"scores":	[-4.15445549323838]
								}, {
									"case":	92,
									"scores":	[-4.15445549323838]
								}, {
									"case":	93,
									"scores":	[-4.15445549323838]
								}, {
									"case":	94,
									"scores":	[-4.15445549323838]
								}, {
									"case":	95,
									"scores":	[-4.15445549323838]
								}, {
									"case":	96,
									"scores":	[-4.15445549323838]
								}, {
									"case":	97,
									"scores":	[-4.15445549323838]
								}, {
									"case":	98,
									"scores":	[-4.15445549323838]
								}, {
									"case":	99,
									"scores":	[-4.15445549323838]
								}, {
									"case":	100,
									"scores":	[-4.15445549323838]
								}, {
									"case":	101,
									"scores":	[-4.15445549323838]
								}, {
									"case":	102,
									"scores":	[-4.15445549323838]
								}, {
									"case":	103,
									"scores":	[-4.15445549323838]
								}, {
									"case":	104,
									"scores":	[-4.15445549323838]
								}, {
									"case":	105,
									"scores":	[-4.15445549323838]
								}, {
									"case":	106,
									"scores":	[-4.15445549323838]
								}, {
									"case":	107,
									"scores":	[-4.15445549323838]
								}, {
									"case":	108,
									"scores":	[-4.15445549323838]
								}, {
									"case":	109,
									"scores":	[-4.15445549323838]
								}, {
									"case":	110,
									"scores":	[-4.15445549323838]
								}, {
									"case":	111,
									"scores":	[-4.15445549323838]
								}, {
									"case":	112,
									"scores":	[-4.15445549323838]
								}, {
									"case":	113,
									"scores":	[-4.15445549323838]
								}, {
									"case":	114,
									"scores":	[-4.15445549323838]
								}, {
									"case":	115,
									"scores":	[-4.15445549323838]
								}, {
									"case":	116,
									"scores":	[-4.15445549323838]
								}, {
									"case":	117,
									"scores":	[-4.15445549323838]
								}, {
									"case":	118,
									"scores":	[-4.15445549323838]
								}, {
									"case":	119,
									"scores":	[-4.15445549323838]
								}, {
									"case":	120,
									"scores":	[-4.15445549323838]
								}, {
									"case":	121,
									"scores":	[-4.15445549323838]
								}, {
									"case":	122,
									"scores":	[-4.15445549323838]
								}, {
									"case":	123,
									"scores":	[-4.15445549323838]
								}, {
									"case":	124,
									"scores":	[-4.15445549323838]
								}, {
									"case":	125,
									"scores":	[-4.15445549323838]
								}, {
									"case":	126,
									"scores":	[-4.15445549323838]
								}, {
									"case":	127,
									"scores":	[-4.15445549323838]
								}, {
									"case":	128,
									"scores":	[-4.15445549323838]
								}, {
									"case":	129,
									"scores":	[-4.15445549323838]
								}, {
									"case":	130,
									"scores":	[-4.15445549323838]
								}, {
									"case":	131,
									"scores":	[-4.15445549323838]
								}, {
									"case":	132,
									"scores":	[-4.15445549323838]
								}, {
									"case":	133,
									"scores":	[-4.15445549323838]
								}, {
									"case":	134,
									"scores":	[-4.15445549323838]
								}, {
									"case":	135,
									"scores":	[-4.15445549323838]
								}, {
									"case":	136,
									"scores":	[-4.15445549323838]
								}, {
									"case":	137,
									"scores":	[-4.15445549323838]
								}, {
									"case":	138,
									"scores":	[-4.15445549323838]
								}, {
									"case":	139,
									"scores":	[-4.15445549323838]
								}, {
									"case":	140,
									"scores":	[-4.15445549323838]
								}, {
									"case":	141,
									"scores":	[-4.15445549323838]
								}, {
									"case":	142,
									"scores":	[-4.15445549323838]
								}, {
									"case":	143,
									"scores":	[-4.15445549323838]
								}, {
									"case":	144,
									"scores":	[-4.15445549323838]
								}, {
									"case":	145,
									"scores":	[-4.15445549323838]
								}, {
									"case":	146,
									"scores":	[-4.15445549323838]
								}, {
									"case":	147,
									"scores":	[-4.15445549323838]
								}, {
									"case":	148,
									"scores":	[-4.15445549323838]
								}, {
									"case":	149,
									"scores":	[-4.15445549323838]
								}, {
									"case":	150,
									"scores":	[-4.15445549323838]
								}, {
									"case":	151,
									"scores":	[-4.15445549323838]
								}, {
									"case":	152,
									"scores":	[-4.15445549323838]
								}, {
									"case":	153,
									"scores":	[-4.15445549323838]
								}, {
									"case":	154,
									"scores":	[-4.15445549323838]
								}, {
									"case":	155,
									"scores":	[-4.15445549323838]
								}, {
									"case":	156,
									"scores":	[-4.15445549323838]
								}, {
									"case":	157,
									"scores":	[-4.15445549323838]
								}, {
									"case":	158,
									"scores":	[-4.15445549323838]
								}, {
									"case":	159,
									"scores":	[-4.15445549323838]
								}, {
									"case":	160,
									"scores":	[-4.15445549323838]
								}, {
									"case":	161,
									"scores":	[-4.15445549323838]
								}, {
									"case":	162,
									"scores":	[-4.15445549323838]
								}, {
									"case":	163,
									"scores":	[-4.15445549323838]
								}, {
									"case":	164,
									"scores":	[-4.15445549323838]
								}, {
									"case":	165,
									"scores":	[-4.15445549323838]
								}, {
									"case":	166,
									"scores":	[-4.15445549323838]
								}, {
									"case":	167,
									"scores":	[-4.15445549323838]
								}, {
									"case":	168,
									"scores":	[-4.15445549323838]
								}, {
									"case":	169,
									"scores":	[-4.15445549323838]
								}, {
									"case":	170,
									"scores":	[-4.15445549323838]
								}, {
									"case":	171,
									"scores":	[-4.15445549323838]
								}, {
									"case":	172,
									"scores":	[-4.15445549323838]
								}, {
									"case":	173,
									"scores":	[-4.15445549323838]
								}, {
									"case":	174,
									"scores":	[-4.15445549323838]
								}, {
									"case":	175,
									"scores":	[-4.15445549323838]
								}, {
									"case":	176,
									"scores":	[-4.15445549323838]
								}, {
									"case":	177,
									"scores":	[-4.15445549323838]
								}, {
									"case":	178,
									"scores":	[-4.15445549323838]
								}, {
									"case":	179,
									"scores":	[-4.15445549323838]
								}, {
									"case":	180,
									"scores":	[-4.15445549323838]
								}, {
									"case":	181,
									"scores":	[-4.15445549323838]
								}, {
									"case":	182,
									"scores":	[-4.15445549323838]
								}, {
									"case":	183,
									"scores":	[-4.15445549323838]
								}, {
									"case":	184,
									"scores":	[-4.15445549323838]
								}, {
									"case":	185,
									"scores":	[-4.15445549323838]
								}, {
									"case":	186,
									"scores":	[-4.15445549323838]
								}, {
									"case":	187,
									"scores":	[-4.15445549323838]
								}, {
									"case":	188,
									"scores":	[-4.15445549323838]
								}, {
									"case":	189,
									"scores":	[-4.15445549323838]
								}, {
									"case":	190,
									"scores":	[-4.15445549323838]
								}, {
									"case":	191,
									"scores":	[-4.15445549323838]
								}, {
									"case":	192,
									"scores":	[-4.15445549323838]
								}, {
									"case":	193,
									"scores":	[-4.15445549323838]
								}, {
									"case":	194,
									"scores":	[-4.15445549323838]
								}, {
									"case":	195,
									"scores":	[-4.15445549323838]
								}, {
									"case":	196,
									"scores":	[-4.15445549323838]
								}, {
									"case":	197,
									"scores":	[-4.15445549323838]
								}, {
									"case":	198,
									"scores":	[-4.15445549323838]
								}, {
									"case":	199,
									"scores":	[-4.15445549323838]
								}, {
									"case":	200,
									"scores":	[-4.15445549323838]
								}, {
									"case":	201,
									"scores":	[-4.15445549323838]
								}, {
									"case":	202,
									"scores":	[-4.15445549323838]
								}, {
									"case":	203,
									"scores":	[-4.15445549323838]
								}, {
									"case":	204,
									"scores":	[-4.15445549323838]
								}, {
									"case":	205,
									"scores":	[-4.15445549323838]
								}, {
									"case":	206,
									"scores":	[-4.15445549323838]
								}, {
									"case":	207,
									"scores":	[-4.15445549323838]
								}, {
									"case":	208,
									"scores":	[-4.15445549323838]
								}, {
									"case":	209,
									"scores":	[-4.15445549323838]
								}, {
									"case":	210,
									"scores":	[-4.15445549323838]
								}, {
									"case":	211,
									"scores":	[-4.15445549323838]
								}, {
									"case":	212,
									"scores":	[-4.15445549323838]
								}, {
									"case":	213,
									"scores":	[-4.15445549323838]
								}, {
									"case":	214,
									"scores":	[-4.15445549323838]
								}, {
									"case":	215,
									"scores":	[-4.15445549323838]
								}, {
									"case":	216,
									"scores":	[-4.15445549323838]
								}, {
									"case":	217,
									"scores":	[-4.15445549323838]
								}, {
									"case":	218,
									"scores":	[-4.15445549323838]
								}, {
									"case":	219,
									"scores":	[-4.15445549323838]
								}, {
									"case":	220,
									"scores":	[-4.15445549323838]
								}, {
									"case":	221,
									"scores":	[-4.15445549323838]
								}, {
									"case":	222,
									"scores":	[-4.15445549323838]
								}, {
									"case":	223,
									"scores":	[-4.15445549323838]
								}, {
									"case":	224,
									"scores":	[-4.15445549323838]
								}, {
									"case":	225,
									"scores":	[-4.15445549323838]
								}, {
									"case":	226,
									"scores":	[-4.15445549323838]
								}, {
									"case":	227,
									"scores":	[-4.15445549323838]
								}, {
									"case":	228,
									"scores":	[-4.15445549323838]
								}, {
									"case":	229,
									"scores":	[-4.15445549323838]
								}, {
									"case":	230,
									"scores":	[-4.15445549323838]
								}, {
									"case":	231,
									"scores":	[-4.15445549323838]
								}, {
									"case":	232,
									"scores":	[-4.15445549323838]
								}, {
									"case":	233,
									"scores":	[-4.15445549323838]
								}, {
									"case":	234,
									"scores":	[-4.15445549323838]
								}, {
									"case":	235,
									"scores":	[-4.15445549323838]
								}, {
									"case":	236,
									"scores":	[-4.15445549323838]
								}, {
									"case":	237,
									"scores":	[-4.15445549323838]
								}, {
									"case":	238,
									"scores":	[-4.15445549323838]
								}, {
									"case":	239,
									"scores":	[-4.15445549323838]
								}, {
									"case":	240,
									"scores":	[-4.15445549323838]
								}, {
									"case":	241,
									"scores":	[-4.15445549323838]
								}, {
									"case":	242,
									"scores":	[-4.15445549323838]
								}, {
									"case":	243,
									"scores":	[-4.15445549323838]
								}, {
									"case":	244,
									"scores":	[-4.15445549323838]
								}, {
									"case":	245,
									"scores":	[-4.15445549323838]
								}, {
									"case":	246,
									"scores":	[-4.15445549323838]
								}, {
									"case":	247,
									"scores":	[-4.15445549323838]
								}, {
									"case":	248,
									"scores":	[-4.15445549323838]
								}, {
									"case":	249,
									"scores":	[-4.15445549323838]
								}, {
									"case":	250,
									"scores":	[-4.15445549323838]
								}, {
									"case":	251,
									"scores":	[-4.15445549323838]
								}, {
									"case":	252,
									"scores":	[-4.15445549323838]
								}, {
									"case":	253,
									"scores":	[-4.15445549323838]
								}, {
									"case":	254,
									"scores":	[-4.15445549323838]
								}, {
									"case":	255,
									"scores":	[-4.15445549323838]
								}, {
									"case":	256,
									"scores":	[-4.15445549323838]
								}, {
									"case":	257,
									"scores":	[-4.15445549323838]
								}, {
									"case":	258,
									"scores":	[-4.15445549323838]
								}, {
									"case":	259,
									"scores":	[-4.15445549323838]
								}, {
									"case":	260,
									"scores":	[-4.15445549323838]
								}, {
									"case":	261,
									"scores":	[-4.15445549323838]
								}, {
									"case":	262,
									"scores":	[-4.15445549323838]
								}, {
									"case":	263,
									"scores":	[-4.15445549323838]
								}, {
									"case":	264,
									"scores":	[-4.15445549323838]
								}, {
									"case":	265,
									"scores":	[-4.15445549323838]
								}, {
									"case":	266,
									"scores":	[-4.15445549323838]
								}, {
									"case":	267,
									"scores":	[-4.15445549323838]
								}, {
									"case":	268,
									"scores":	[-4.15445549323838]
								}, {
									"case":	269,
									"scores":	[-4.15445549323838]
								}, {
									"case":	270,
									"scores":	[-4.15445549323838]
								}, {
									"case":	271,
									"scores":	[-4.15445549323838]
								}, {
									"case":	272,
									"scores":	[-4.15445549323838]
								}, {
									"case":	273,
									"scores":	[-4.15445549323838]
								}, {
									"case":	274,
									"scores":	[-4.15445549323838]
								}, {
									"case":	275,
									"scores":	[-4.15445549323838]
								}, {
									"case":	276,
									"scores":	[-4.15445549323838]
								}, {
									"case":	277,
									"scores":	[-4.15445549323838]
								}, {
									"case":	278,
									"scores":	[-4.15445549323838]
								}, {
									"case":	279,
									"scores":	[-4.15445549323838]
								}, {
									"case":	280,
									"scores":	[-4.15445549323838]
								}, {
									"case":	281,
									"scores":	[-4.15445549323838]
								}, {
									"case":	282,
									"scores":	[-4.15445549323838]
								}, {
									"case":	283,
									"scores":	[-4.15445549323838]
								}, {
									"case":	284,
									"scores":	[-4.15445549323838]
								}, {
									"case":	285,
									"scores":	[-4.15445549323838]
								}, {
									"case":	286,
									"scores":	[-4.15445549323838]
								}, {
									"case":	287,
									"scores":	[-4.15445549323838]
								}, {
									"case":	288,
									"scores":	[-4.15445549323838]
								}, {
									"case":	289,
									"scores":	[-4.15445549323838]
								}, {
									"case":	290,
									"scores":	[-4.15445549323838]
								}, {
									"case":	291,
									"scores":	[-4.15445549323838]
								}, {
									"case":	292,
									"scores":	[-4.15445549323838]
								}, {
									"case":	293,
									"scores":	[-4.15445549323838]
								}, {
									"case":	294,
									"scores":	[-4.15445549323838]
								}, {
									"case":	295,
									"scores":	[-4.15445549323838]
								}, {
									"case":	296,
									"scores":	[-4.15445549323838]
								}, {
									"case":	297,
									"scores":	[-4.15445549323838]
								}, {
									"case":	298,
									"scores":	[-4.15445549323838]
								}, {
									"case":	299,
									"scores":	[-4.15445549323838]
								}, {
									"case":	300,
									"scores":	[-4.15445549323838]
								}, {
									"case":	301,
									"scores":	[-4.15445549323838]
								}, {
									"case":	302,
									"scores":	[-4.15445549323838]
								}, {
									"case":	303,
									"scores":	[-4.15445549323838]
								}, {
									"case":	304,
									"scores":	[-4.15445549323838]
								}, {
									"case":	305,
									"scores":	[-4.15445549323838]
								}, {
									"case":	306,
									"scores":	[-4.15445549323838]
								}, {
									"case":	307,
									"scores":	[-4.15445549323838]
								}, {
									"case":	308,
									"scores":	[-4.15445549323838]
								}, {
									"case":	309,
									"scores":	[-4.15445549323838]
								}, {
									"case":	310,
									"scores":	[-4.15445549323838]
								}, {
									"case":	311,
									"scores":	[-4.15445549323838]
								}, {
									"case":	312,
									"scores":	[-4.15445549323838]
								}, {
									"case":	313,
									"scores":	[-4.15445549323838]
								}, {
									"case":	314,
									"scores":	[-4.15445549323838]
								}, {
									"case":	315,
									"scores":	[-4.15445549323838]
								}, {
									"case":	316,
									"scores":	[-4.15445549323838]
								}, {
									"case":	317,
									"scores":	[-4.15445549323838]
								}, {
									"case":	318,
									"scores":	[-4.15445549323838]
								}, {
									"case":	319,
									"scores":	[-4.15445549323838]
								}, {
									"case":	320,
									"scores":	[-4.15445549323838]
								}, {
									"case":	321,
									"scores":	[-4.15445549323838]
								}, {
									"case":	322,
									"scores":	[-4.15445549323838]
								}, {
									"case":	323,
									"scores":	[-4.15445549323838]
								}, {
									"case":	324,
									"scores":	[-4.15445549323838]
								}, {
									"case":	325,
									"scores":	[-4.15445549323838]
								}, {
									"case":	326,
									"scores":	[-4.15445549323838]
								}, {
									"case":	327,
									"scores":	[-4.15445549323838]
								}, {
									"case":	328,
									"scores":	[-4.15445549323838]
								}, {
									"case":	329,
									"scores":	[-4.15445549323838]
								}, {
									"case":	330,
									"scores":	[-4.15445549323838]
								}, {
									"case":	331,
									"scores":	[-4.15445549323838]
								}, {
									"case":	332,
									"scores":	[-4.15445549323838]
								}, {
									"case":	333,
									"scores":	[-4.15445549323838]
								}, {
									"case":	334,
									"scores":	[-4.15445549323838]
								}, {
									"case":	335,
									"scores":	[-4.15445549323838]
								}, {
									"case":	336,
									"scores":	[-4.15445549323838]
								}, {
									"case":	337,
									"scores":	[-4.15445549323838]
								}, {
									"case":	338,
									"scores":	[-4.15445549323838]
								}, {
									"case":	339,
									"scores":	[-4.15445549323838]
								}, {
									"case":	340,
									"scores":	[-4.15445549323838]
								}, {
									"case":	341,
									"scores":	[-4.15445549323838]
								}, {
									"case":	342,
									"scores":	[-4.15445549323838]
								}, {
									"case":	343,
									"scores":	[-4.15445549323838]
								}, {
									"case":	344,
									"scores":	[-4.15445549323838]
								}, {
									"case":	345,
									"scores":	[-4.15445549323838]
								}, {
									"case":	346,
									"scores":	[-4.15445549323838]
								}, {
									"case":	347,
									"scores":	[-4.15445549323838]
								}, {
									"case":	348,
									"scores":	[-4.15445549323838]
								}, {
									"case":	349,
									"scores":	[-4.15445549323838]
								}, {
									"case":	350,
									"scores":	[-4.15445549323838]
								}, {
									"case":	351,
									"scores":	[-4.15445549323838]
								}, {
									"case":	352,
									"scores":	[-4.15445549323838]
								}, {
									"case":	353,
									"scores":	[-4.15445549323838]
								}, {
									"case":	354,
									"scores":	[-4.15445549323838]
								}, {
									"case":	355,
									"scores":	[-4.15445549323838]
								}, {
									"case":	356,
									"scores":	[-4.15445549323838]
								}, {
									"case":	357,
									"scores":	[-4.15445549323838]
								}, {
									"case":	358,
									"scores":	[-4.15445549323838]
								}, {
									"case":	359,
									"scores":	[-4.15445549323838]
								}, {
									"case":	360,
									"scores":	[-4.15445549323838]
								}, {
									"case":	361,
									"scores":	[-4.15445549323838]
								}, {
									"case":	362,
									"scores":	[-4.15445549323838]
								}, {
									"case":	363,
									"scores":	[-4.15445549323838]
								}, {
									"case":	364,
									"scores":	[-4.15445549323838]
								}, {
									"case":	365,
									"scores":	[-4.15445549323838]
								}, {
									"case":	366,
									"scores":	[-4.15445549323838]
								}, {
									"case":	367,
									"scores":	[-4.15445549323838]
								}, {
									"case":	368,
									"scores":	[-4.15445549323838]
								}, {
									"case":	369,
									"scores":	[-4.15445549323838]
								}, {
									"case":	370,
									"scores":	[-4.15445549323838]
								}, {
									"case":	371,
									"scores":	[-4.15445549323838]
								}, {
									"case":	372,
									"scores":	[-4.15445549323838]
								}, {
									"case":	373,
									"scores":	[-4.15445549323838]
								}, {
									"case":	374,
									"scores":	[-4.15445549323838]
								}, {
									"case":	375,
									"scores":	[-4.15445549323838]
								}, {
									"case":	376,
									"scores":	[-4.15445549323838]
								}, {
									"case":	377,
									"scores":	[-4.15445549323838]
								}, {
									"case":	378,
									"scores":	[-4.15445549323838]
								}, {
									"case":	379,
									"scores":	[-4.15445549323838]
								}, {
									"case":	380,
									"scores":	[-4.15445549323838]
								}, {
									"case":	381,
									"scores":	[-4.15445549323838]
								}, {
									"case":	382,
									"scores":	[-4.15445549323838]
								}, {
									"case":	383,
									"scores":	[-4.15445549323838]
								}, {
									"case":	384,
									"scores":	[-4.15445549323838]
								}, {
									"case":	385,
									"scores":	[-4.15445549323838]
								}, {
									"case":	386,
									"scores":	[-4.15445549323838]
								}, {
									"case":	387,
									"scores":	[-4.15445549323838]
								}, {
									"case":	388,
									"scores":	[-4.15445549323838]
								}, {
									"case":	389,
									"scores":	[-4.15445549323838]
								}, {
									"case":	390,
									"scores":	[-4.15445549323838]
								}, {
									"case":	391,
									"scores":	[-4.15445549323838]
								}, {
									"case":	392,
									"scores":	[-4.15445549323838]
								}, {
									"case":	393,
									"scores":	[-4.15445549323838]
								}, {
									"case":	394,
									"scores":	[-4.15445549323838]
								}, {
									"case":	395,
									"scores":	[-4.15445549323838]
								}, {
									"case":	396,
									"scores":	[-4.15445549323838]
								}, {
									"case":	397,
									"scores":	[-4.15445549323838]
								}, {
									"case":	398,
									"scores":	[-4.15445549323838]
								}, {
									"case":	399,
									"scores":	[-4.15445549323838]
								}, {
									"case":	400,
									"scores":	[-4.15445549323838]
								}, {
									"case":	401,
									"scores":	[-4.15445549323838]
								}, {
									"case":	402,
									"scores":	[-4.15445549323838]
								}, {
									"case":	403,
									"scores":	[-4.15445549323838]
								}, {
									"case":	404,
									"scores":	[-4.15445549323838]
								}, {
									"case":	405,
									"scores":	[-4.15445549323838]
								}, {
									"case":	406,
									"scores":	[-4.15445549323838]
								}, {
									"case":	407,
									"scores":	[-4.15445549323838]
								}, {
									"case":	408,
									"scores":	[-4.15445549323838]
								}, {
									"case":	409,
									"scores":	[-4.15445549323838]
								}, {
									"case":	410,
									"scores":	[-4.15445549323838]
								}, {
									"case":	411,
									"scores":	[-4.15445549323838]
								}, {
									"case":	412,
									"scores":	[-5.59373602323838, -6.46831923633838, -6.46831923633838, -5.94793515323838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.26362691633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.26362691633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838, -6.17420421633838]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	704,
							"begin_column":	2,
							"end_line":	704,
							"end_column":	14,
							"patch_codes":	["if (!__is_neg(\"\", \"L704\", 38, &(cflag), sizeof (cflag), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(iname), sizeof (iname), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    treat_stdin();\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.015145166238379, -4.14040768423838, -4.14040768423838, -4.32335449323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.53992829323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.53992829323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838, -4.10296329323838]
								}, {
									"case":	2,
									"scores":	[-4.15445549323838]
								}]
						}]
				}, {
					"line":	701,
					"switches":	[{
							"switch":	28,
							"types":	[[], [], [], [], [395], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	702,
							"begin_column":	3,
							"end_line":	702,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L702\", 37, &(iname), sizeof (iname), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	2,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	3,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	4,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	5,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	6,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	7,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	8,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	9,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	10,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	11,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	12,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	13,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	14,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	15,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	16,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	17,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	286,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	287,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	288,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	289,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	290,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	291,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	292,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	293,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	294,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	295,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	296,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	297,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	298,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	299,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	300,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	301,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	302,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	303,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	304,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	305,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	306,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	307,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	308,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	309,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	310,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	311,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	312,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	313,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	314,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	315,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	316,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	317,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	318,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	319,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	320,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	321,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	322,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	323,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	324,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	325,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	326,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	327,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	328,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	329,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	330,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	331,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	332,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	333,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	334,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	335,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	336,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	337,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	338,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	339,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	340,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	341,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	342,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	343,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	344,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	345,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	346,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	347,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	348,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	349,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	350,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	351,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	352,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	353,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	354,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	355,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	356,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	357,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	358,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	359,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	360,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	361,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	362,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	363,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	364,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	365,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	366,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	367,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	368,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	369,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	370,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	371,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	372,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	373,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	374,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	375,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	376,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	377,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	378,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	379,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	380,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	381,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	382,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	383,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	384,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	385,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	386,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	387,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	388,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	389,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	390,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	391,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	392,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	393,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	394,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	395,
									"scores":	[-5.8217804725084576, -6.8563686528084578, -6.8563686528084578, -7.5510050556084565, -7.5510050556084565, -7.1346399256084574, -7.3726336256084579, -8.3862319394084572, -7.1346399256084574, -7.1346399256084574, -7.3726336256084579, -8.3862319394084572, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574, -7.1346399256084574]
								}]
						}, {
							"switch":	29,
							"types":	[[30], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], []],
							"begin_line":	702,
							"begin_column":	5,
							"end_line":	707,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L702\", 37, &(iname), sizeof (iname), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if (((strcmp((iname), (\"-\")) == 0)) || __is_neg(\"\", \"L702\", 37, &(iname), sizeof (iname), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((__asprintf((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((asprintf((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((execl((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((execle((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((execlp((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((execv((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((execvp((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((fprintf((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((fputs((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((fputs_unlocked((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((getdate_r((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((link((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((lstat((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((lstat64((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((obstack_printf((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((printf((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((rename((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((sprintf((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((stat((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((stat64((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((strcasecmp((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((strcmp((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((strcoll((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((strverscmp((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((symlink((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((utimens((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if ((vprintf((iname), (\"-\")) == 0)) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n", "if (((strcmp((iname), (\"-\")) == 0)) && !__is_neg(\"\", \"L702\", 37, &(iname), sizeof (iname), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in))) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3496008374281461, -5.3810105374281463, -5.3810105374281463, -5.4392964144281457, -5.4392964144281457, -5.3101178644281459, -5.8373810644281452, -6.3568069684281454, -5.3101178644281459, -5.3101178644281459, -5.8373810644281452, -6.3568069684281454, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459, -5.3101178644281459]
								}, {
									"case":	2,
									"scores":	[-2.955937039428147, -3.9873467394281459, -3.9873467394281459, -4.0456326164281453, -4.0456326164281453, -3.9164540664281455, -4.4437172664281457, -4.963143170428145, -3.9164540664281455, -3.9164540664281455, -4.4437172664281457, -4.963143170428145, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-2.955937039428147, -3.9873467394281459, -3.9873467394281459, -4.0456326164281453, -4.0456326164281453, -3.9164540664281455, -4.4437172664281457, -4.963143170428145, -3.9164540664281455, -3.9164540664281455, -4.4437172664281457, -4.963143170428145, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455, -3.9164540664281455]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	702,
							"begin_column":	5,
							"end_line":	707,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L702\", 37, &(iname), sizeof (iname), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)))\n    if ((strcmp((iname), (\"-\")) == 0)) {\n        int cflag = to_stdout;\n        treat_stdin();\n        to_stdout = cflag;\n        return;\n    }\n", "if (!__is_neg(\"\", \"L702\", 37, &(iname), sizeof (iname), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(no_time), sizeof (no_time), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(decompress), sizeof (decompress), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(work), sizeof (work), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in)) && ((strcmp((iname), (\"-\")) == 0))) {\n    int cflag = to_stdout;\n    treat_stdin();\n    to_stdout = cflag;\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4594250755084577, -5.490834775508457, -5.490834775508457, -5.5491206525084573, -5.5491206525084573, -5.4199421025084575, -5.9472053025084577, -6.4666312065084579, -5.4199421025084575, -5.4199421025084575, -5.9472053025084577, -6.4666312065084579, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575, -5.4199421025084575]
								}, {
									"case":	2,
									"scores":	[-3.982468439508458, -5.0138781395084573, -5.0138781395084573, -5.0721640165084576, -5.0721640165084576, -4.9429854665084569, -5.4702486665084571, -5.9896745705084573, -4.9429854665084569, -4.9429854665084569, -5.4702486665084571, -5.9896745705084573, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569, -4.9429854665084569]
								}]
						}]
				}, {
					"line":	839,
					"switches":	[{
							"switch":	35,
							"types":	[[], [], [], [], [395, 396], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	840,
							"begin_column":	2,
							"end_line":	840,
							"end_column":	2,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L840\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if (__is_neg(\"\", \"L840\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.275739761577924]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}, {
									"case":	34,
									"scores":	[-6.275739761577924]
								}, {
									"case":	35,
									"scores":	[-6.275739761577924]
								}, {
									"case":	36,
									"scores":	[-6.275739761577924]
								}, {
									"case":	37,
									"scores":	[-6.275739761577924]
								}, {
									"case":	38,
									"scores":	[-6.275739761577924]
								}, {
									"case":	39,
									"scores":	[-6.275739761577924]
								}, {
									"case":	40,
									"scores":	[-6.275739761577924]
								}, {
									"case":	41,
									"scores":	[-6.275739761577924]
								}, {
									"case":	42,
									"scores":	[-6.275739761577924]
								}, {
									"case":	43,
									"scores":	[-6.275739761577924]
								}, {
									"case":	44,
									"scores":	[-6.275739761577924]
								}, {
									"case":	45,
									"scores":	[-6.275739761577924]
								}, {
									"case":	46,
									"scores":	[-6.275739761577924]
								}, {
									"case":	47,
									"scores":	[-6.275739761577924]
								}, {
									"case":	48,
									"scores":	[-6.275739761577924]
								}, {
									"case":	49,
									"scores":	[-6.275739761577924]
								}, {
									"case":	50,
									"scores":	[-6.275739761577924]
								}, {
									"case":	51,
									"scores":	[-6.275739761577924]
								}, {
									"case":	52,
									"scores":	[-6.275739761577924]
								}, {
									"case":	53,
									"scores":	[-6.275739761577924]
								}, {
									"case":	54,
									"scores":	[-6.275739761577924]
								}, {
									"case":	55,
									"scores":	[-6.275739761577924]
								}, {
									"case":	56,
									"scores":	[-6.275739761577924]
								}, {
									"case":	57,
									"scores":	[-6.275739761577924]
								}, {
									"case":	58,
									"scores":	[-6.275739761577924]
								}, {
									"case":	59,
									"scores":	[-6.275739761577924]
								}, {
									"case":	60,
									"scores":	[-6.275739761577924]
								}, {
									"case":	61,
									"scores":	[-6.275739761577924]
								}, {
									"case":	62,
									"scores":	[-6.275739761577924]
								}, {
									"case":	63,
									"scores":	[-6.275739761577924]
								}, {
									"case":	64,
									"scores":	[-6.275739761577924]
								}, {
									"case":	65,
									"scores":	[-6.275739761577924]
								}, {
									"case":	66,
									"scores":	[-6.275739761577924]
								}, {
									"case":	67,
									"scores":	[-6.275739761577924]
								}, {
									"case":	68,
									"scores":	[-6.275739761577924]
								}, {
									"case":	69,
									"scores":	[-6.275739761577924]
								}, {
									"case":	70,
									"scores":	[-6.275739761577924]
								}, {
									"case":	71,
									"scores":	[-6.275739761577924]
								}, {
									"case":	72,
									"scores":	[-6.275739761577924]
								}, {
									"case":	73,
									"scores":	[-6.275739761577924]
								}, {
									"case":	74,
									"scores":	[-6.275739761577924]
								}, {
									"case":	75,
									"scores":	[-6.275739761577924]
								}, {
									"case":	76,
									"scores":	[-6.275739761577924]
								}, {
									"case":	77,
									"scores":	[-6.275739761577924]
								}, {
									"case":	78,
									"scores":	[-6.275739761577924]
								}, {
									"case":	79,
									"scores":	[-6.275739761577924]
								}, {
									"case":	80,
									"scores":	[-6.275739761577924]
								}, {
									"case":	81,
									"scores":	[-6.275739761577924]
								}, {
									"case":	82,
									"scores":	[-6.275739761577924]
								}, {
									"case":	83,
									"scores":	[-6.275739761577924]
								}, {
									"case":	84,
									"scores":	[-6.275739761577924]
								}, {
									"case":	85,
									"scores":	[-6.275739761577924]
								}, {
									"case":	86,
									"scores":	[-6.275739761577924]
								}, {
									"case":	87,
									"scores":	[-6.275739761577924]
								}, {
									"case":	88,
									"scores":	[-6.275739761577924]
								}, {
									"case":	89,
									"scores":	[-6.275739761577924]
								}, {
									"case":	90,
									"scores":	[-6.275739761577924]
								}, {
									"case":	91,
									"scores":	[-6.275739761577924]
								}, {
									"case":	92,
									"scores":	[-6.275739761577924]
								}, {
									"case":	93,
									"scores":	[-6.275739761577924]
								}, {
									"case":	94,
									"scores":	[-6.275739761577924]
								}, {
									"case":	95,
									"scores":	[-6.275739761577924]
								}, {
									"case":	96,
									"scores":	[-6.275739761577924]
								}, {
									"case":	97,
									"scores":	[-6.275739761577924]
								}, {
									"case":	98,
									"scores":	[-6.275739761577924]
								}, {
									"case":	99,
									"scores":	[-6.275739761577924]
								}, {
									"case":	100,
									"scores":	[-6.275739761577924]
								}, {
									"case":	101,
									"scores":	[-6.275739761577924]
								}, {
									"case":	102,
									"scores":	[-6.275739761577924]
								}, {
									"case":	103,
									"scores":	[-6.275739761577924]
								}, {
									"case":	104,
									"scores":	[-6.275739761577924]
								}, {
									"case":	105,
									"scores":	[-6.275739761577924]
								}, {
									"case":	106,
									"scores":	[-6.275739761577924]
								}, {
									"case":	107,
									"scores":	[-6.275739761577924]
								}, {
									"case":	108,
									"scores":	[-6.275739761577924]
								}, {
									"case":	109,
									"scores":	[-6.275739761577924]
								}, {
									"case":	110,
									"scores":	[-6.275739761577924]
								}, {
									"case":	111,
									"scores":	[-6.275739761577924]
								}, {
									"case":	112,
									"scores":	[-6.275739761577924]
								}, {
									"case":	113,
									"scores":	[-6.275739761577924]
								}, {
									"case":	114,
									"scores":	[-6.275739761577924]
								}, {
									"case":	115,
									"scores":	[-6.275739761577924]
								}, {
									"case":	116,
									"scores":	[-6.275739761577924]
								}, {
									"case":	117,
									"scores":	[-6.275739761577924]
								}, {
									"case":	118,
									"scores":	[-6.275739761577924]
								}, {
									"case":	119,
									"scores":	[-6.275739761577924]
								}, {
									"case":	120,
									"scores":	[-6.275739761577924]
								}, {
									"case":	121,
									"scores":	[-6.275739761577924]
								}, {
									"case":	122,
									"scores":	[-6.275739761577924]
								}, {
									"case":	123,
									"scores":	[-6.275739761577924]
								}, {
									"case":	124,
									"scores":	[-6.275739761577924]
								}, {
									"case":	125,
									"scores":	[-6.275739761577924]
								}, {
									"case":	126,
									"scores":	[-6.275739761577924]
								}, {
									"case":	127,
									"scores":	[-6.275739761577924]
								}, {
									"case":	128,
									"scores":	[-6.275739761577924]
								}, {
									"case":	129,
									"scores":	[-6.275739761577924]
								}, {
									"case":	130,
									"scores":	[-6.275739761577924]
								}, {
									"case":	131,
									"scores":	[-6.275739761577924]
								}, {
									"case":	132,
									"scores":	[-6.275739761577924]
								}, {
									"case":	133,
									"scores":	[-6.275739761577924]
								}, {
									"case":	134,
									"scores":	[-6.275739761577924]
								}, {
									"case":	135,
									"scores":	[-6.275739761577924]
								}, {
									"case":	136,
									"scores":	[-6.275739761577924]
								}, {
									"case":	137,
									"scores":	[-6.275739761577924]
								}, {
									"case":	138,
									"scores":	[-6.275739761577924]
								}, {
									"case":	139,
									"scores":	[-6.275739761577924]
								}, {
									"case":	140,
									"scores":	[-6.275739761577924]
								}, {
									"case":	141,
									"scores":	[-6.275739761577924]
								}, {
									"case":	142,
									"scores":	[-6.275739761577924]
								}, {
									"case":	143,
									"scores":	[-6.275739761577924]
								}, {
									"case":	144,
									"scores":	[-6.275739761577924]
								}, {
									"case":	145,
									"scores":	[-6.275739761577924]
								}, {
									"case":	146,
									"scores":	[-6.275739761577924]
								}, {
									"case":	147,
									"scores":	[-6.275739761577924]
								}, {
									"case":	148,
									"scores":	[-6.275739761577924]
								}, {
									"case":	149,
									"scores":	[-6.275739761577924]
								}, {
									"case":	150,
									"scores":	[-6.275739761577924]
								}, {
									"case":	151,
									"scores":	[-6.275739761577924]
								}, {
									"case":	152,
									"scores":	[-6.275739761577924]
								}, {
									"case":	153,
									"scores":	[-6.275739761577924]
								}, {
									"case":	154,
									"scores":	[-6.275739761577924]
								}, {
									"case":	155,
									"scores":	[-6.275739761577924]
								}, {
									"case":	156,
									"scores":	[-6.275739761577924]
								}, {
									"case":	157,
									"scores":	[-6.275739761577924]
								}, {
									"case":	158,
									"scores":	[-6.275739761577924]
								}, {
									"case":	159,
									"scores":	[-6.275739761577924]
								}, {
									"case":	160,
									"scores":	[-6.275739761577924]
								}, {
									"case":	161,
									"scores":	[-6.275739761577924]
								}, {
									"case":	162,
									"scores":	[-6.275739761577924]
								}, {
									"case":	163,
									"scores":	[-6.275739761577924]
								}, {
									"case":	164,
									"scores":	[-6.275739761577924]
								}, {
									"case":	165,
									"scores":	[-6.275739761577924]
								}, {
									"case":	166,
									"scores":	[-6.275739761577924]
								}, {
									"case":	167,
									"scores":	[-6.275739761577924]
								}, {
									"case":	168,
									"scores":	[-6.275739761577924]
								}, {
									"case":	169,
									"scores":	[-6.275739761577924]
								}, {
									"case":	170,
									"scores":	[-6.275739761577924]
								}, {
									"case":	171,
									"scores":	[-6.275739761577924]
								}, {
									"case":	172,
									"scores":	[-6.275739761577924]
								}, {
									"case":	173,
									"scores":	[-6.275739761577924]
								}, {
									"case":	174,
									"scores":	[-6.275739761577924]
								}, {
									"case":	175,
									"scores":	[-6.275739761577924]
								}, {
									"case":	176,
									"scores":	[-6.275739761577924]
								}, {
									"case":	177,
									"scores":	[-6.275739761577924]
								}, {
									"case":	178,
									"scores":	[-6.275739761577924]
								}, {
									"case":	179,
									"scores":	[-6.275739761577924]
								}, {
									"case":	180,
									"scores":	[-6.275739761577924]
								}, {
									"case":	181,
									"scores":	[-6.275739761577924]
								}, {
									"case":	182,
									"scores":	[-6.275739761577924]
								}, {
									"case":	183,
									"scores":	[-6.275739761577924]
								}, {
									"case":	184,
									"scores":	[-6.275739761577924]
								}, {
									"case":	185,
									"scores":	[-6.275739761577924]
								}, {
									"case":	186,
									"scores":	[-6.275739761577924]
								}, {
									"case":	187,
									"scores":	[-6.275739761577924]
								}, {
									"case":	188,
									"scores":	[-6.275739761577924]
								}, {
									"case":	189,
									"scores":	[-6.275739761577924]
								}, {
									"case":	190,
									"scores":	[-6.275739761577924]
								}, {
									"case":	191,
									"scores":	[-6.275739761577924]
								}, {
									"case":	192,
									"scores":	[-6.275739761577924]
								}, {
									"case":	193,
									"scores":	[-6.275739761577924]
								}, {
									"case":	194,
									"scores":	[-6.275739761577924]
								}, {
									"case":	195,
									"scores":	[-6.275739761577924]
								}, {
									"case":	196,
									"scores":	[-6.275739761577924]
								}, {
									"case":	197,
									"scores":	[-6.275739761577924]
								}, {
									"case":	198,
									"scores":	[-6.275739761577924]
								}, {
									"case":	199,
									"scores":	[-6.275739761577924]
								}, {
									"case":	200,
									"scores":	[-6.275739761577924]
								}, {
									"case":	201,
									"scores":	[-6.275739761577924]
								}, {
									"case":	202,
									"scores":	[-6.275739761577924]
								}, {
									"case":	203,
									"scores":	[-6.275739761577924]
								}, {
									"case":	204,
									"scores":	[-6.275739761577924]
								}, {
									"case":	205,
									"scores":	[-6.275739761577924]
								}, {
									"case":	206,
									"scores":	[-6.275739761577924]
								}, {
									"case":	207,
									"scores":	[-6.275739761577924]
								}, {
									"case":	208,
									"scores":	[-6.275739761577924]
								}, {
									"case":	209,
									"scores":	[-6.275739761577924]
								}, {
									"case":	210,
									"scores":	[-6.275739761577924]
								}, {
									"case":	211,
									"scores":	[-6.275739761577924]
								}, {
									"case":	212,
									"scores":	[-6.275739761577924]
								}, {
									"case":	213,
									"scores":	[-6.275739761577924]
								}, {
									"case":	214,
									"scores":	[-6.275739761577924]
								}, {
									"case":	215,
									"scores":	[-6.275739761577924]
								}, {
									"case":	216,
									"scores":	[-6.275739761577924]
								}, {
									"case":	217,
									"scores":	[-6.275739761577924]
								}, {
									"case":	218,
									"scores":	[-6.275739761577924]
								}, {
									"case":	219,
									"scores":	[-6.275739761577924]
								}, {
									"case":	220,
									"scores":	[-6.275739761577924]
								}, {
									"case":	221,
									"scores":	[-6.275739761577924]
								}, {
									"case":	222,
									"scores":	[-6.275739761577924]
								}, {
									"case":	223,
									"scores":	[-6.275739761577924]
								}, {
									"case":	224,
									"scores":	[-6.275739761577924]
								}, {
									"case":	225,
									"scores":	[-6.275739761577924]
								}, {
									"case":	226,
									"scores":	[-6.275739761577924]
								}, {
									"case":	227,
									"scores":	[-6.275739761577924]
								}, {
									"case":	228,
									"scores":	[-6.275739761577924]
								}, {
									"case":	229,
									"scores":	[-6.275739761577924]
								}, {
									"case":	230,
									"scores":	[-6.275739761577924]
								}, {
									"case":	231,
									"scores":	[-6.275739761577924]
								}, {
									"case":	232,
									"scores":	[-6.275739761577924]
								}, {
									"case":	233,
									"scores":	[-6.275739761577924]
								}, {
									"case":	234,
									"scores":	[-6.275739761577924]
								}, {
									"case":	235,
									"scores":	[-6.275739761577924]
								}, {
									"case":	236,
									"scores":	[-6.275739761577924]
								}, {
									"case":	237,
									"scores":	[-6.275739761577924]
								}, {
									"case":	238,
									"scores":	[-6.275739761577924]
								}, {
									"case":	239,
									"scores":	[-6.275739761577924]
								}, {
									"case":	240,
									"scores":	[-6.275739761577924]
								}, {
									"case":	241,
									"scores":	[-6.275739761577924]
								}, {
									"case":	242,
									"scores":	[-6.275739761577924]
								}, {
									"case":	243,
									"scores":	[-6.275739761577924]
								}, {
									"case":	244,
									"scores":	[-6.275739761577924]
								}, {
									"case":	245,
									"scores":	[-6.275739761577924]
								}, {
									"case":	246,
									"scores":	[-6.275739761577924]
								}, {
									"case":	247,
									"scores":	[-6.275739761577924]
								}, {
									"case":	248,
									"scores":	[-6.275739761577924]
								}, {
									"case":	249,
									"scores":	[-6.275739761577924]
								}, {
									"case":	250,
									"scores":	[-6.275739761577924]
								}, {
									"case":	251,
									"scores":	[-6.275739761577924]
								}, {
									"case":	252,
									"scores":	[-6.275739761577924]
								}, {
									"case":	253,
									"scores":	[-6.275739761577924]
								}, {
									"case":	254,
									"scores":	[-6.275739761577924]
								}, {
									"case":	255,
									"scores":	[-6.275739761577924]
								}, {
									"case":	256,
									"scores":	[-6.275739761577924]
								}, {
									"case":	257,
									"scores":	[-6.275739761577924]
								}, {
									"case":	258,
									"scores":	[-6.275739761577924]
								}, {
									"case":	259,
									"scores":	[-6.275739761577924]
								}, {
									"case":	260,
									"scores":	[-6.275739761577924]
								}, {
									"case":	261,
									"scores":	[-6.275739761577924]
								}, {
									"case":	262,
									"scores":	[-6.275739761577924]
								}, {
									"case":	263,
									"scores":	[-6.275739761577924]
								}, {
									"case":	264,
									"scores":	[-6.275739761577924]
								}, {
									"case":	265,
									"scores":	[-6.275739761577924]
								}, {
									"case":	266,
									"scores":	[-6.275739761577924]
								}, {
									"case":	267,
									"scores":	[-6.275739761577924]
								}, {
									"case":	268,
									"scores":	[-6.275739761577924]
								}, {
									"case":	269,
									"scores":	[-6.275739761577924]
								}, {
									"case":	270,
									"scores":	[-6.275739761577924]
								}, {
									"case":	271,
									"scores":	[-6.275739761577924]
								}, {
									"case":	272,
									"scores":	[-6.275739761577924]
								}, {
									"case":	273,
									"scores":	[-6.275739761577924]
								}, {
									"case":	274,
									"scores":	[-6.275739761577924]
								}, {
									"case":	275,
									"scores":	[-6.275739761577924]
								}, {
									"case":	276,
									"scores":	[-6.275739761577924]
								}, {
									"case":	277,
									"scores":	[-6.275739761577924]
								}, {
									"case":	278,
									"scores":	[-6.275739761577924]
								}, {
									"case":	279,
									"scores":	[-6.275739761577924]
								}, {
									"case":	280,
									"scores":	[-6.275739761577924]
								}, {
									"case":	281,
									"scores":	[-6.275739761577924]
								}, {
									"case":	282,
									"scores":	[-6.275739761577924]
								}, {
									"case":	283,
									"scores":	[-6.275739761577924]
								}, {
									"case":	284,
									"scores":	[-6.275739761577924]
								}, {
									"case":	285,
									"scores":	[-6.275739761577924]
								}, {
									"case":	286,
									"scores":	[-6.275739761577924]
								}, {
									"case":	287,
									"scores":	[-6.275739761577924]
								}, {
									"case":	288,
									"scores":	[-6.275739761577924]
								}, {
									"case":	289,
									"scores":	[-6.275739761577924]
								}, {
									"case":	290,
									"scores":	[-6.275739761577924]
								}, {
									"case":	291,
									"scores":	[-6.275739761577924]
								}, {
									"case":	292,
									"scores":	[-6.275739761577924]
								}, {
									"case":	293,
									"scores":	[-6.275739761577924]
								}, {
									"case":	294,
									"scores":	[-6.275739761577924]
								}, {
									"case":	295,
									"scores":	[-6.275739761577924]
								}, {
									"case":	296,
									"scores":	[-6.275739761577924]
								}, {
									"case":	297,
									"scores":	[-6.275739761577924]
								}, {
									"case":	298,
									"scores":	[-6.275739761577924]
								}, {
									"case":	299,
									"scores":	[-6.275739761577924]
								}, {
									"case":	300,
									"scores":	[-6.275739761577924]
								}, {
									"case":	301,
									"scores":	[-6.275739761577924]
								}, {
									"case":	302,
									"scores":	[-6.275739761577924]
								}, {
									"case":	303,
									"scores":	[-6.275739761577924]
								}, {
									"case":	304,
									"scores":	[-6.275739761577924]
								}, {
									"case":	305,
									"scores":	[-6.275739761577924]
								}, {
									"case":	306,
									"scores":	[-6.275739761577924]
								}, {
									"case":	307,
									"scores":	[-6.275739761577924]
								}, {
									"case":	308,
									"scores":	[-6.275739761577924]
								}, {
									"case":	309,
									"scores":	[-6.275739761577924]
								}, {
									"case":	310,
									"scores":	[-6.275739761577924]
								}, {
									"case":	311,
									"scores":	[-6.275739761577924]
								}, {
									"case":	312,
									"scores":	[-6.275739761577924]
								}, {
									"case":	313,
									"scores":	[-6.275739761577924]
								}, {
									"case":	314,
									"scores":	[-6.275739761577924]
								}, {
									"case":	315,
									"scores":	[-6.275739761577924]
								}, {
									"case":	316,
									"scores":	[-6.275739761577924]
								}, {
									"case":	317,
									"scores":	[-6.275739761577924]
								}, {
									"case":	318,
									"scores":	[-6.275739761577924]
								}, {
									"case":	319,
									"scores":	[-6.275739761577924]
								}, {
									"case":	320,
									"scores":	[-6.275739761577924]
								}, {
									"case":	321,
									"scores":	[-6.275739761577924]
								}, {
									"case":	322,
									"scores":	[-6.275739761577924]
								}, {
									"case":	323,
									"scores":	[-6.275739761577924]
								}, {
									"case":	324,
									"scores":	[-6.275739761577924]
								}, {
									"case":	325,
									"scores":	[-6.275739761577924]
								}, {
									"case":	326,
									"scores":	[-6.275739761577924]
								}, {
									"case":	327,
									"scores":	[-6.275739761577924]
								}, {
									"case":	328,
									"scores":	[-6.275739761577924]
								}, {
									"case":	329,
									"scores":	[-6.275739761577924]
								}, {
									"case":	330,
									"scores":	[-6.275739761577924]
								}, {
									"case":	331,
									"scores":	[-6.275739761577924]
								}, {
									"case":	332,
									"scores":	[-6.275739761577924]
								}, {
									"case":	333,
									"scores":	[-6.275739761577924]
								}, {
									"case":	334,
									"scores":	[-6.275739761577924]
								}, {
									"case":	335,
									"scores":	[-6.275739761577924]
								}, {
									"case":	336,
									"scores":	[-6.275739761577924]
								}, {
									"case":	337,
									"scores":	[-6.275739761577924]
								}, {
									"case":	338,
									"scores":	[-6.275739761577924]
								}, {
									"case":	339,
									"scores":	[-6.275739761577924]
								}, {
									"case":	340,
									"scores":	[-6.275739761577924]
								}, {
									"case":	341,
									"scores":	[-6.275739761577924]
								}, {
									"case":	342,
									"scores":	[-6.275739761577924]
								}, {
									"case":	343,
									"scores":	[-6.275739761577924]
								}, {
									"case":	344,
									"scores":	[-6.275739761577924]
								}, {
									"case":	345,
									"scores":	[-6.275739761577924]
								}, {
									"case":	346,
									"scores":	[-6.275739761577924]
								}, {
									"case":	347,
									"scores":	[-6.275739761577924]
								}, {
									"case":	348,
									"scores":	[-6.275739761577924]
								}, {
									"case":	349,
									"scores":	[-6.275739761577924]
								}, {
									"case":	350,
									"scores":	[-6.275739761577924]
								}, {
									"case":	351,
									"scores":	[-6.275739761577924]
								}, {
									"case":	352,
									"scores":	[-6.275739761577924]
								}, {
									"case":	353,
									"scores":	[-6.275739761577924]
								}, {
									"case":	354,
									"scores":	[-6.275739761577924]
								}, {
									"case":	355,
									"scores":	[-6.275739761577924]
								}, {
									"case":	356,
									"scores":	[-6.275739761577924]
								}, {
									"case":	357,
									"scores":	[-6.275739761577924]
								}, {
									"case":	358,
									"scores":	[-6.275739761577924]
								}, {
									"case":	359,
									"scores":	[-6.275739761577924]
								}, {
									"case":	360,
									"scores":	[-6.275739761577924]
								}, {
									"case":	361,
									"scores":	[-6.275739761577924]
								}, {
									"case":	362,
									"scores":	[-6.275739761577924]
								}, {
									"case":	363,
									"scores":	[-6.275739761577924]
								}, {
									"case":	364,
									"scores":	[-6.275739761577924]
								}, {
									"case":	365,
									"scores":	[-6.275739761577924]
								}, {
									"case":	366,
									"scores":	[-6.275739761577924]
								}, {
									"case":	367,
									"scores":	[-6.275739761577924]
								}, {
									"case":	368,
									"scores":	[-6.275739761577924]
								}, {
									"case":	369,
									"scores":	[-6.275739761577924]
								}, {
									"case":	370,
									"scores":	[-6.275739761577924]
								}, {
									"case":	371,
									"scores":	[-6.275739761577924]
								}, {
									"case":	372,
									"scores":	[-6.275739761577924]
								}, {
									"case":	373,
									"scores":	[-6.275739761577924]
								}, {
									"case":	374,
									"scores":	[-6.275739761577924]
								}, {
									"case":	375,
									"scores":	[-6.275739761577924]
								}, {
									"case":	376,
									"scores":	[-6.275739761577924]
								}, {
									"case":	377,
									"scores":	[-6.275739761577924]
								}, {
									"case":	378,
									"scores":	[-6.275739761577924]
								}, {
									"case":	379,
									"scores":	[-6.275739761577924]
								}, {
									"case":	380,
									"scores":	[-6.275739761577924]
								}, {
									"case":	381,
									"scores":	[-6.275739761577924]
								}, {
									"case":	382,
									"scores":	[-6.275739761577924]
								}, {
									"case":	383,
									"scores":	[-6.275739761577924]
								}, {
									"case":	384,
									"scores":	[-6.275739761577924]
								}, {
									"case":	385,
									"scores":	[-6.275739761577924]
								}, {
									"case":	386,
									"scores":	[-6.275739761577924]
								}, {
									"case":	387,
									"scores":	[-6.275739761577924]
								}, {
									"case":	388,
									"scores":	[-6.275739761577924]
								}, {
									"case":	389,
									"scores":	[-6.275739761577924]
								}, {
									"case":	390,
									"scores":	[-6.275739761577924]
								}, {
									"case":	391,
									"scores":	[-6.275739761577924]
								}, {
									"case":	392,
									"scores":	[-6.275739761577924]
								}, {
									"case":	393,
									"scores":	[-6.275739761577924]
								}, {
									"case":	394,
									"scores":	[-6.275739761577924]
								}, {
									"case":	395,
									"scores":	[-7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.8398967736779239, -7.8398967736779239, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.5242050105779237, -7.7504740736779238]
								}, {
									"case":	396,
									"scores":	[-7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.8398967736779239, -7.8398967736779239, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.7504740736779238, -7.5242050105779237, -7.7504740736779238]
								}]
						}]
				}, {
					"line":	838,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [395, 396], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	839,
							"begin_column":	0,
							"end_line":	839,
							"end_column":	0,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L839\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if (__is_neg(\"\", \"L839\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	28,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	29,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	30,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	31,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	32,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	33,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	34,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	35,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	36,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	37,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	38,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	39,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	40,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	41,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	42,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	43,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	44,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	45,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	46,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	47,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	48,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	49,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	50,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	51,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	52,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	53,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	54,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	55,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	56,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	57,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	58,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	59,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	60,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	61,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	62,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	63,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	64,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	65,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	66,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	67,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	68,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	69,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	70,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	71,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	72,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	73,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	74,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	75,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	76,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	77,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	78,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	79,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	80,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	81,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	82,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	83,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	84,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	85,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	86,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	87,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	88,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	89,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	90,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	91,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	92,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	93,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	94,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	95,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	96,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	97,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	98,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	99,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	100,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	101,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	102,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	103,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	104,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	105,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	106,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	107,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	108,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	109,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	110,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	111,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	112,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	113,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	114,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	115,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	116,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	117,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	118,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	119,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	120,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	121,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	122,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	123,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	124,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	125,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	126,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	127,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	128,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	129,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	130,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	131,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	132,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	133,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	134,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	135,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	136,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	137,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	138,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	139,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	140,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	141,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	142,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	143,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	144,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	145,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	146,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	147,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	148,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	149,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	150,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	151,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	152,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	153,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	154,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	155,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	156,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	157,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	158,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	159,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	160,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	161,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	162,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	163,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	164,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	165,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	166,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	167,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	168,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	169,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	170,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	171,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	172,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	173,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	174,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	175,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	176,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	177,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	178,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	179,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	180,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	181,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	182,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	183,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	184,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	185,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	186,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	187,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	188,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	189,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	190,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	191,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	192,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	193,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	194,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	195,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	196,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	197,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	198,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	199,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	200,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	201,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	202,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	203,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	204,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	205,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	206,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	207,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	208,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	209,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	210,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	211,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	212,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	213,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	214,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	215,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	216,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	217,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	218,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	219,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	220,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	221,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	222,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	223,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	224,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	225,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	226,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	227,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	228,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	229,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	230,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	231,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	232,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	233,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	234,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	235,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	236,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	237,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	238,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	239,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	240,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	241,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	242,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	243,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	244,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	245,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	246,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	247,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	248,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	249,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	250,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	251,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	252,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	253,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	254,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	255,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	256,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	257,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	258,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	259,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	260,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	261,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	262,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	263,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	264,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	265,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	266,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	267,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	268,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	269,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	270,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	271,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	272,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	273,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	274,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	275,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	276,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	277,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	278,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	279,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	280,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	281,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	282,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	283,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	284,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	285,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	286,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	287,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	288,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	289,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	290,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	291,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	292,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	293,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	294,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	295,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	296,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	297,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	298,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	299,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	300,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	301,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	302,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	303,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	304,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	305,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	306,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	307,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	308,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	309,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	310,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	311,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	312,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	313,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	314,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	315,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	316,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	317,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	318,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	319,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	320,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	321,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	322,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	323,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	324,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	325,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	326,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	327,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	328,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	329,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	330,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	331,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	332,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	333,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	334,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	335,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	336,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	337,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	338,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	339,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	340,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	341,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	342,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	343,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	344,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	345,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	346,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	347,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	348,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	349,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	350,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	351,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	352,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	353,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	354,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	355,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	356,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	357,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	358,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	359,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	360,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	361,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	362,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	363,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	364,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	365,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	366,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	367,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	368,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	369,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	370,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	371,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	372,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	373,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	374,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	375,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	376,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	377,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	378,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	379,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	380,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	381,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	382,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	383,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	384,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	385,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	386,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	387,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	388,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	389,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	390,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	391,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	392,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	393,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	394,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	395,
									"scores":	[-8.78939136785312, -10.311995817553118, -8.78939136785312, -10.311995817553118, -10.459890602653118, -10.250938407553118, -10.459890602653118, -10.250938407553118, -10.615622237853117, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.149798137853118, -10.149798137853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -9.83410637475312, -10.060375437853118]
								}, {
									"case":	396,
									"scores":	[-8.78939136785312, -10.311995817553118, -8.78939136785312, -10.311995817553118, -10.459890602653118, -10.250938407553118, -10.459890602653118, -10.250938407553118, -10.615622237853117, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.149798137853118, -10.149798137853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -10.060375437853118, -9.83410637475312, -10.060375437853118]
								}]
						}, {
							"switch":	34,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	839,
							"begin_column":	2,
							"end_line":	840,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L839\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if ((input_eof()) || __is_neg(\"\", \"L839\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n", "if ((input_eof()) && !__is_neg(\"\", \"L839\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7632910024281454, -3.1107815981281464, -4.7632910024281454, -3.1107815981281464, -4.3769987394281458, -4.2916898251281461, -4.3769987394281458, -4.2916898251281461, -4.7225486554281462, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.7407275054281461, -4.7407275054281461, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.3037625054281463, -4.5241537054281462, -4.3037625054281463]
								}, {
									"case":	2,
									"scores":	[-4.5095065924281457, -2.8569971881281466, -4.5095065924281457, -2.8569971881281466, -4.123214329428146, -4.0379054151281455, -4.123214329428146, -4.0379054151281455, -4.4687642454281455, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.4869430954281455, -4.4869430954281455, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.2703692954281456, -4.0499780954281457]
								}, {
									"case":	3,
									"scores":	[-4.5095065924281457, -2.8569971881281466, -4.5095065924281457, -2.8569971881281466, -4.123214329428146, -4.0379054151281455, -4.123214329428146, -4.0379054151281455, -4.4687642454281455, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.4869430954281455, -4.4869430954281455, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.0499780954281457, -4.2703692954281456, -4.0499780954281457]
								}]
						}, {
							"switch":	36,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	839,
							"begin_column":	2,
							"end_line":	840,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L839\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    if (input_eof())\n        break;\n", "if (!__is_neg(\"\", \"L839\", 37, &(method), sizeof (method), &(ifd), sizeof (ifd), &(method), sizeof (method), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(work), sizeof (work), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(quiet), sizeof (quiet), &(decompress), sizeof (decompress), &(quiet), sizeof (quiet), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(list), sizeof (list), &(test), sizeof (test), &(test), sizeof (test), &(part_nb), sizeof (part_nb), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)) && (input_eof()))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.43902011175312, -6.7865107074531181, -8.43902011175312, -6.7865107074531181, -8.05272784875312, -7.9674189344531179, -8.05272784875312, -7.9674189344531179, -8.39827776475312, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -8.41645661475312, -8.41645661475312, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -7.9794916147531181, -8.1998828147531171, -7.9794916147531181]
								}, {
									"case":	2,
									"scores":	[-8.18610500475312, -6.5335956004531175, -8.18610500475312, -6.5335956004531175, -7.7998127417531178, -7.7145038274531181, -7.7998127417531178, -7.7145038274531181, -8.14536265775312, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -8.16354150775312, -8.16354150775312, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.7265765077531174, -7.9469677077531173, -7.7265765077531174]
								}]
						}]
				}, {
					"line":	846,
					"switches":	[{
							"switch":	37,
							"types":	[[], [], [], [], [395], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	847,
							"begin_column":	3,
							"end_line":	847,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L847\", 37, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(work), sizeof (work), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.235334346942885]
								}, {
									"case":	2,
									"scores":	[-6.235334346942885]
								}, {
									"case":	3,
									"scores":	[-6.235334346942885]
								}, {
									"case":	4,
									"scores":	[-6.235334346942885]
								}, {
									"case":	5,
									"scores":	[-6.235334346942885]
								}, {
									"case":	6,
									"scores":	[-6.235334346942885]
								}, {
									"case":	7,
									"scores":	[-6.235334346942885]
								}, {
									"case":	8,
									"scores":	[-6.235334346942885]
								}, {
									"case":	9,
									"scores":	[-6.235334346942885]
								}, {
									"case":	10,
									"scores":	[-6.235334346942885]
								}, {
									"case":	11,
									"scores":	[-6.235334346942885]
								}, {
									"case":	12,
									"scores":	[-6.235334346942885]
								}, {
									"case":	13,
									"scores":	[-6.235334346942885]
								}, {
									"case":	14,
									"scores":	[-6.235334346942885]
								}, {
									"case":	15,
									"scores":	[-6.235334346942885]
								}, {
									"case":	16,
									"scores":	[-6.235334346942885]
								}, {
									"case":	17,
									"scores":	[-6.235334346942885]
								}, {
									"case":	18,
									"scores":	[-6.235334346942885]
								}, {
									"case":	19,
									"scores":	[-6.235334346942885]
								}, {
									"case":	20,
									"scores":	[-6.235334346942885]
								}, {
									"case":	21,
									"scores":	[-6.235334346942885]
								}, {
									"case":	22,
									"scores":	[-6.235334346942885]
								}, {
									"case":	23,
									"scores":	[-6.235334346942885]
								}, {
									"case":	24,
									"scores":	[-6.235334346942885]
								}, {
									"case":	25,
									"scores":	[-6.235334346942885]
								}, {
									"case":	26,
									"scores":	[-6.235334346942885]
								}, {
									"case":	27,
									"scores":	[-6.235334346942885]
								}, {
									"case":	28,
									"scores":	[-6.235334346942885]
								}, {
									"case":	29,
									"scores":	[-6.235334346942885]
								}, {
									"case":	30,
									"scores":	[-6.235334346942885]
								}, {
									"case":	31,
									"scores":	[-6.235334346942885]
								}, {
									"case":	32,
									"scores":	[-6.235334346942885]
								}, {
									"case":	33,
									"scores":	[-6.235334346942885]
								}, {
									"case":	34,
									"scores":	[-6.235334346942885]
								}, {
									"case":	35,
									"scores":	[-6.235334346942885]
								}, {
									"case":	36,
									"scores":	[-6.235334346942885]
								}, {
									"case":	37,
									"scores":	[-6.235334346942885]
								}, {
									"case":	38,
									"scores":	[-6.235334346942885]
								}, {
									"case":	39,
									"scores":	[-6.235334346942885]
								}, {
									"case":	40,
									"scores":	[-6.235334346942885]
								}, {
									"case":	41,
									"scores":	[-6.235334346942885]
								}, {
									"case":	42,
									"scores":	[-6.235334346942885]
								}, {
									"case":	43,
									"scores":	[-6.235334346942885]
								}, {
									"case":	44,
									"scores":	[-6.235334346942885]
								}, {
									"case":	45,
									"scores":	[-6.235334346942885]
								}, {
									"case":	46,
									"scores":	[-6.235334346942885]
								}, {
									"case":	47,
									"scores":	[-6.235334346942885]
								}, {
									"case":	48,
									"scores":	[-6.235334346942885]
								}, {
									"case":	49,
									"scores":	[-6.235334346942885]
								}, {
									"case":	50,
									"scores":	[-6.235334346942885]
								}, {
									"case":	51,
									"scores":	[-6.235334346942885]
								}, {
									"case":	52,
									"scores":	[-6.235334346942885]
								}, {
									"case":	53,
									"scores":	[-6.235334346942885]
								}, {
									"case":	54,
									"scores":	[-6.235334346942885]
								}, {
									"case":	55,
									"scores":	[-6.235334346942885]
								}, {
									"case":	56,
									"scores":	[-6.235334346942885]
								}, {
									"case":	57,
									"scores":	[-6.235334346942885]
								}, {
									"case":	58,
									"scores":	[-6.235334346942885]
								}, {
									"case":	59,
									"scores":	[-6.235334346942885]
								}, {
									"case":	60,
									"scores":	[-6.235334346942885]
								}, {
									"case":	61,
									"scores":	[-6.235334346942885]
								}, {
									"case":	62,
									"scores":	[-6.235334346942885]
								}, {
									"case":	63,
									"scores":	[-6.235334346942885]
								}, {
									"case":	64,
									"scores":	[-6.235334346942885]
								}, {
									"case":	65,
									"scores":	[-6.235334346942885]
								}, {
									"case":	66,
									"scores":	[-6.235334346942885]
								}, {
									"case":	67,
									"scores":	[-6.235334346942885]
								}, {
									"case":	68,
									"scores":	[-6.235334346942885]
								}, {
									"case":	69,
									"scores":	[-6.235334346942885]
								}, {
									"case":	70,
									"scores":	[-6.235334346942885]
								}, {
									"case":	71,
									"scores":	[-6.235334346942885]
								}, {
									"case":	72,
									"scores":	[-6.235334346942885]
								}, {
									"case":	73,
									"scores":	[-6.235334346942885]
								}, {
									"case":	74,
									"scores":	[-6.235334346942885]
								}, {
									"case":	75,
									"scores":	[-6.235334346942885]
								}, {
									"case":	76,
									"scores":	[-6.235334346942885]
								}, {
									"case":	77,
									"scores":	[-6.235334346942885]
								}, {
									"case":	78,
									"scores":	[-6.235334346942885]
								}, {
									"case":	79,
									"scores":	[-6.235334346942885]
								}, {
									"case":	80,
									"scores":	[-6.235334346942885]
								}, {
									"case":	81,
									"scores":	[-6.235334346942885]
								}, {
									"case":	82,
									"scores":	[-6.235334346942885]
								}, {
									"case":	83,
									"scores":	[-6.235334346942885]
								}, {
									"case":	84,
									"scores":	[-6.235334346942885]
								}, {
									"case":	85,
									"scores":	[-6.235334346942885]
								}, {
									"case":	86,
									"scores":	[-6.235334346942885]
								}, {
									"case":	87,
									"scores":	[-6.235334346942885]
								}, {
									"case":	88,
									"scores":	[-6.235334346942885]
								}, {
									"case":	89,
									"scores":	[-6.235334346942885]
								}, {
									"case":	90,
									"scores":	[-6.235334346942885]
								}, {
									"case":	91,
									"scores":	[-6.235334346942885]
								}, {
									"case":	92,
									"scores":	[-6.235334346942885]
								}, {
									"case":	93,
									"scores":	[-6.235334346942885]
								}, {
									"case":	94,
									"scores":	[-6.235334346942885]
								}, {
									"case":	95,
									"scores":	[-6.235334346942885]
								}, {
									"case":	96,
									"scores":	[-6.235334346942885]
								}, {
									"case":	97,
									"scores":	[-6.235334346942885]
								}, {
									"case":	98,
									"scores":	[-6.235334346942885]
								}, {
									"case":	99,
									"scores":	[-6.235334346942885]
								}, {
									"case":	100,
									"scores":	[-6.235334346942885]
								}, {
									"case":	101,
									"scores":	[-6.235334346942885]
								}, {
									"case":	102,
									"scores":	[-6.235334346942885]
								}, {
									"case":	103,
									"scores":	[-6.235334346942885]
								}, {
									"case":	104,
									"scores":	[-6.235334346942885]
								}, {
									"case":	105,
									"scores":	[-6.235334346942885]
								}, {
									"case":	106,
									"scores":	[-6.235334346942885]
								}, {
									"case":	107,
									"scores":	[-6.235334346942885]
								}, {
									"case":	108,
									"scores":	[-6.235334346942885]
								}, {
									"case":	109,
									"scores":	[-6.235334346942885]
								}, {
									"case":	110,
									"scores":	[-6.235334346942885]
								}, {
									"case":	111,
									"scores":	[-6.235334346942885]
								}, {
									"case":	112,
									"scores":	[-6.235334346942885]
								}, {
									"case":	113,
									"scores":	[-6.235334346942885]
								}, {
									"case":	114,
									"scores":	[-6.235334346942885]
								}, {
									"case":	115,
									"scores":	[-6.235334346942885]
								}, {
									"case":	116,
									"scores":	[-6.235334346942885]
								}, {
									"case":	117,
									"scores":	[-6.235334346942885]
								}, {
									"case":	118,
									"scores":	[-6.235334346942885]
								}, {
									"case":	119,
									"scores":	[-6.235334346942885]
								}, {
									"case":	120,
									"scores":	[-6.235334346942885]
								}, {
									"case":	121,
									"scores":	[-6.235334346942885]
								}, {
									"case":	122,
									"scores":	[-6.235334346942885]
								}, {
									"case":	123,
									"scores":	[-6.235334346942885]
								}, {
									"case":	124,
									"scores":	[-6.235334346942885]
								}, {
									"case":	125,
									"scores":	[-6.235334346942885]
								}, {
									"case":	126,
									"scores":	[-6.235334346942885]
								}, {
									"case":	127,
									"scores":	[-6.235334346942885]
								}, {
									"case":	128,
									"scores":	[-6.235334346942885]
								}, {
									"case":	129,
									"scores":	[-6.235334346942885]
								}, {
									"case":	130,
									"scores":	[-6.235334346942885]
								}, {
									"case":	131,
									"scores":	[-6.235334346942885]
								}, {
									"case":	132,
									"scores":	[-6.235334346942885]
								}, {
									"case":	133,
									"scores":	[-6.235334346942885]
								}, {
									"case":	134,
									"scores":	[-6.235334346942885]
								}, {
									"case":	135,
									"scores":	[-6.235334346942885]
								}, {
									"case":	136,
									"scores":	[-6.235334346942885]
								}, {
									"case":	137,
									"scores":	[-6.235334346942885]
								}, {
									"case":	138,
									"scores":	[-6.235334346942885]
								}, {
									"case":	139,
									"scores":	[-6.235334346942885]
								}, {
									"case":	140,
									"scores":	[-6.235334346942885]
								}, {
									"case":	141,
									"scores":	[-6.235334346942885]
								}, {
									"case":	142,
									"scores":	[-6.235334346942885]
								}, {
									"case":	143,
									"scores":	[-6.235334346942885]
								}, {
									"case":	144,
									"scores":	[-6.235334346942885]
								}, {
									"case":	145,
									"scores":	[-6.235334346942885]
								}, {
									"case":	146,
									"scores":	[-6.235334346942885]
								}, {
									"case":	147,
									"scores":	[-6.235334346942885]
								}, {
									"case":	148,
									"scores":	[-6.235334346942885]
								}, {
									"case":	149,
									"scores":	[-6.235334346942885]
								}, {
									"case":	150,
									"scores":	[-6.235334346942885]
								}, {
									"case":	151,
									"scores":	[-6.235334346942885]
								}, {
									"case":	152,
									"scores":	[-6.235334346942885]
								}, {
									"case":	153,
									"scores":	[-6.235334346942885]
								}, {
									"case":	154,
									"scores":	[-6.235334346942885]
								}, {
									"case":	155,
									"scores":	[-6.235334346942885]
								}, {
									"case":	156,
									"scores":	[-6.235334346942885]
								}, {
									"case":	157,
									"scores":	[-6.235334346942885]
								}, {
									"case":	158,
									"scores":	[-6.235334346942885]
								}, {
									"case":	159,
									"scores":	[-6.235334346942885]
								}, {
									"case":	160,
									"scores":	[-6.235334346942885]
								}, {
									"case":	161,
									"scores":	[-6.235334346942885]
								}, {
									"case":	162,
									"scores":	[-6.235334346942885]
								}, {
									"case":	163,
									"scores":	[-6.235334346942885]
								}, {
									"case":	164,
									"scores":	[-6.235334346942885]
								}, {
									"case":	165,
									"scores":	[-6.235334346942885]
								}, {
									"case":	166,
									"scores":	[-6.235334346942885]
								}, {
									"case":	167,
									"scores":	[-6.235334346942885]
								}, {
									"case":	168,
									"scores":	[-6.235334346942885]
								}, {
									"case":	169,
									"scores":	[-6.235334346942885]
								}, {
									"case":	170,
									"scores":	[-6.235334346942885]
								}, {
									"case":	171,
									"scores":	[-6.235334346942885]
								}, {
									"case":	172,
									"scores":	[-6.235334346942885]
								}, {
									"case":	173,
									"scores":	[-6.235334346942885]
								}, {
									"case":	174,
									"scores":	[-6.235334346942885]
								}, {
									"case":	175,
									"scores":	[-6.235334346942885]
								}, {
									"case":	176,
									"scores":	[-6.235334346942885]
								}, {
									"case":	177,
									"scores":	[-6.235334346942885]
								}, {
									"case":	178,
									"scores":	[-6.235334346942885]
								}, {
									"case":	179,
									"scores":	[-6.235334346942885]
								}, {
									"case":	180,
									"scores":	[-6.235334346942885]
								}, {
									"case":	181,
									"scores":	[-6.235334346942885]
								}, {
									"case":	182,
									"scores":	[-6.235334346942885]
								}, {
									"case":	183,
									"scores":	[-6.235334346942885]
								}, {
									"case":	184,
									"scores":	[-6.235334346942885]
								}, {
									"case":	185,
									"scores":	[-6.235334346942885]
								}, {
									"case":	186,
									"scores":	[-6.235334346942885]
								}, {
									"case":	187,
									"scores":	[-6.235334346942885]
								}, {
									"case":	188,
									"scores":	[-6.235334346942885]
								}, {
									"case":	189,
									"scores":	[-6.235334346942885]
								}, {
									"case":	190,
									"scores":	[-6.235334346942885]
								}, {
									"case":	191,
									"scores":	[-6.235334346942885]
								}, {
									"case":	192,
									"scores":	[-6.235334346942885]
								}, {
									"case":	193,
									"scores":	[-6.235334346942885]
								}, {
									"case":	194,
									"scores":	[-6.235334346942885]
								}, {
									"case":	195,
									"scores":	[-6.235334346942885]
								}, {
									"case":	196,
									"scores":	[-6.235334346942885]
								}, {
									"case":	197,
									"scores":	[-6.235334346942885]
								}, {
									"case":	198,
									"scores":	[-6.235334346942885]
								}, {
									"case":	199,
									"scores":	[-6.235334346942885]
								}, {
									"case":	200,
									"scores":	[-6.235334346942885]
								}, {
									"case":	201,
									"scores":	[-6.235334346942885]
								}, {
									"case":	202,
									"scores":	[-6.235334346942885]
								}, {
									"case":	203,
									"scores":	[-6.235334346942885]
								}, {
									"case":	204,
									"scores":	[-6.235334346942885]
								}, {
									"case":	205,
									"scores":	[-6.235334346942885]
								}, {
									"case":	206,
									"scores":	[-6.235334346942885]
								}, {
									"case":	207,
									"scores":	[-6.235334346942885]
								}, {
									"case":	208,
									"scores":	[-6.235334346942885]
								}, {
									"case":	209,
									"scores":	[-6.235334346942885]
								}, {
									"case":	210,
									"scores":	[-6.235334346942885]
								}, {
									"case":	211,
									"scores":	[-6.235334346942885]
								}, {
									"case":	212,
									"scores":	[-6.235334346942885]
								}, {
									"case":	213,
									"scores":	[-6.235334346942885]
								}, {
									"case":	214,
									"scores":	[-6.235334346942885]
								}, {
									"case":	215,
									"scores":	[-6.235334346942885]
								}, {
									"case":	216,
									"scores":	[-6.235334346942885]
								}, {
									"case":	217,
									"scores":	[-6.235334346942885]
								}, {
									"case":	218,
									"scores":	[-6.235334346942885]
								}, {
									"case":	219,
									"scores":	[-6.235334346942885]
								}, {
									"case":	220,
									"scores":	[-6.235334346942885]
								}, {
									"case":	221,
									"scores":	[-6.235334346942885]
								}, {
									"case":	222,
									"scores":	[-6.235334346942885]
								}, {
									"case":	223,
									"scores":	[-6.235334346942885]
								}, {
									"case":	224,
									"scores":	[-6.235334346942885]
								}, {
									"case":	225,
									"scores":	[-6.235334346942885]
								}, {
									"case":	226,
									"scores":	[-6.235334346942885]
								}, {
									"case":	227,
									"scores":	[-6.235334346942885]
								}, {
									"case":	228,
									"scores":	[-6.235334346942885]
								}, {
									"case":	229,
									"scores":	[-6.235334346942885]
								}, {
									"case":	230,
									"scores":	[-6.235334346942885]
								}, {
									"case":	231,
									"scores":	[-6.235334346942885]
								}, {
									"case":	232,
									"scores":	[-6.235334346942885]
								}, {
									"case":	233,
									"scores":	[-6.235334346942885]
								}, {
									"case":	234,
									"scores":	[-6.235334346942885]
								}, {
									"case":	235,
									"scores":	[-6.235334346942885]
								}, {
									"case":	236,
									"scores":	[-6.235334346942885]
								}, {
									"case":	237,
									"scores":	[-6.235334346942885]
								}, {
									"case":	238,
									"scores":	[-6.235334346942885]
								}, {
									"case":	239,
									"scores":	[-6.235334346942885]
								}, {
									"case":	240,
									"scores":	[-6.235334346942885]
								}, {
									"case":	241,
									"scores":	[-6.235334346942885]
								}, {
									"case":	242,
									"scores":	[-6.235334346942885]
								}, {
									"case":	243,
									"scores":	[-6.235334346942885]
								}, {
									"case":	244,
									"scores":	[-6.235334346942885]
								}, {
									"case":	245,
									"scores":	[-6.235334346942885]
								}, {
									"case":	246,
									"scores":	[-6.235334346942885]
								}, {
									"case":	247,
									"scores":	[-6.235334346942885]
								}, {
									"case":	248,
									"scores":	[-6.235334346942885]
								}, {
									"case":	249,
									"scores":	[-6.235334346942885]
								}, {
									"case":	250,
									"scores":	[-6.235334346942885]
								}, {
									"case":	251,
									"scores":	[-6.235334346942885]
								}, {
									"case":	252,
									"scores":	[-6.235334346942885]
								}, {
									"case":	253,
									"scores":	[-6.235334346942885]
								}, {
									"case":	254,
									"scores":	[-6.235334346942885]
								}, {
									"case":	255,
									"scores":	[-6.235334346942885]
								}, {
									"case":	256,
									"scores":	[-6.235334346942885]
								}, {
									"case":	257,
									"scores":	[-6.235334346942885]
								}, {
									"case":	258,
									"scores":	[-6.235334346942885]
								}, {
									"case":	259,
									"scores":	[-6.235334346942885]
								}, {
									"case":	260,
									"scores":	[-6.235334346942885]
								}, {
									"case":	261,
									"scores":	[-6.235334346942885]
								}, {
									"case":	262,
									"scores":	[-6.235334346942885]
								}, {
									"case":	263,
									"scores":	[-6.235334346942885]
								}, {
									"case":	264,
									"scores":	[-6.235334346942885]
								}, {
									"case":	265,
									"scores":	[-6.235334346942885]
								}, {
									"case":	266,
									"scores":	[-6.235334346942885]
								}, {
									"case":	267,
									"scores":	[-6.235334346942885]
								}, {
									"case":	268,
									"scores":	[-6.235334346942885]
								}, {
									"case":	269,
									"scores":	[-6.235334346942885]
								}, {
									"case":	270,
									"scores":	[-6.235334346942885]
								}, {
									"case":	271,
									"scores":	[-6.235334346942885]
								}, {
									"case":	272,
									"scores":	[-6.235334346942885]
								}, {
									"case":	273,
									"scores":	[-6.235334346942885]
								}, {
									"case":	274,
									"scores":	[-6.235334346942885]
								}, {
									"case":	275,
									"scores":	[-6.235334346942885]
								}, {
									"case":	276,
									"scores":	[-6.235334346942885]
								}, {
									"case":	277,
									"scores":	[-6.235334346942885]
								}, {
									"case":	278,
									"scores":	[-6.235334346942885]
								}, {
									"case":	279,
									"scores":	[-6.235334346942885]
								}, {
									"case":	280,
									"scores":	[-6.235334346942885]
								}, {
									"case":	281,
									"scores":	[-6.235334346942885]
								}, {
									"case":	282,
									"scores":	[-6.235334346942885]
								}, {
									"case":	283,
									"scores":	[-6.235334346942885]
								}, {
									"case":	284,
									"scores":	[-6.235334346942885]
								}, {
									"case":	285,
									"scores":	[-6.235334346942885]
								}, {
									"case":	286,
									"scores":	[-6.235334346942885]
								}, {
									"case":	287,
									"scores":	[-6.235334346942885]
								}, {
									"case":	288,
									"scores":	[-6.235334346942885]
								}, {
									"case":	289,
									"scores":	[-6.235334346942885]
								}, {
									"case":	290,
									"scores":	[-6.235334346942885]
								}, {
									"case":	291,
									"scores":	[-6.235334346942885]
								}, {
									"case":	292,
									"scores":	[-6.235334346942885]
								}, {
									"case":	293,
									"scores":	[-6.235334346942885]
								}, {
									"case":	294,
									"scores":	[-6.235334346942885]
								}, {
									"case":	295,
									"scores":	[-6.235334346942885]
								}, {
									"case":	296,
									"scores":	[-6.235334346942885]
								}, {
									"case":	297,
									"scores":	[-6.235334346942885]
								}, {
									"case":	298,
									"scores":	[-6.235334346942885]
								}, {
									"case":	299,
									"scores":	[-6.235334346942885]
								}, {
									"case":	300,
									"scores":	[-6.235334346942885]
								}, {
									"case":	301,
									"scores":	[-6.235334346942885]
								}, {
									"case":	302,
									"scores":	[-6.235334346942885]
								}, {
									"case":	303,
									"scores":	[-6.235334346942885]
								}, {
									"case":	304,
									"scores":	[-6.235334346942885]
								}, {
									"case":	305,
									"scores":	[-6.235334346942885]
								}, {
									"case":	306,
									"scores":	[-6.235334346942885]
								}, {
									"case":	307,
									"scores":	[-6.235334346942885]
								}, {
									"case":	308,
									"scores":	[-6.235334346942885]
								}, {
									"case":	309,
									"scores":	[-6.235334346942885]
								}, {
									"case":	310,
									"scores":	[-6.235334346942885]
								}, {
									"case":	311,
									"scores":	[-6.235334346942885]
								}, {
									"case":	312,
									"scores":	[-6.235334346942885]
								}, {
									"case":	313,
									"scores":	[-6.235334346942885]
								}, {
									"case":	314,
									"scores":	[-6.235334346942885]
								}, {
									"case":	315,
									"scores":	[-6.235334346942885]
								}, {
									"case":	316,
									"scores":	[-6.235334346942885]
								}, {
									"case":	317,
									"scores":	[-6.235334346942885]
								}, {
									"case":	318,
									"scores":	[-6.235334346942885]
								}, {
									"case":	319,
									"scores":	[-6.235334346942885]
								}, {
									"case":	320,
									"scores":	[-6.235334346942885]
								}, {
									"case":	321,
									"scores":	[-6.235334346942885]
								}, {
									"case":	322,
									"scores":	[-6.235334346942885]
								}, {
									"case":	323,
									"scores":	[-6.235334346942885]
								}, {
									"case":	324,
									"scores":	[-6.235334346942885]
								}, {
									"case":	325,
									"scores":	[-6.235334346942885]
								}, {
									"case":	326,
									"scores":	[-6.235334346942885]
								}, {
									"case":	327,
									"scores":	[-6.235334346942885]
								}, {
									"case":	328,
									"scores":	[-6.235334346942885]
								}, {
									"case":	329,
									"scores":	[-6.235334346942885]
								}, {
									"case":	330,
									"scores":	[-6.235334346942885]
								}, {
									"case":	331,
									"scores":	[-6.235334346942885]
								}, {
									"case":	332,
									"scores":	[-6.235334346942885]
								}, {
									"case":	333,
									"scores":	[-6.235334346942885]
								}, {
									"case":	334,
									"scores":	[-6.235334346942885]
								}, {
									"case":	335,
									"scores":	[-6.235334346942885]
								}, {
									"case":	336,
									"scores":	[-6.235334346942885]
								}, {
									"case":	337,
									"scores":	[-6.235334346942885]
								}, {
									"case":	338,
									"scores":	[-6.235334346942885]
								}, {
									"case":	339,
									"scores":	[-6.235334346942885]
								}, {
									"case":	340,
									"scores":	[-6.235334346942885]
								}, {
									"case":	341,
									"scores":	[-6.235334346942885]
								}, {
									"case":	342,
									"scores":	[-6.235334346942885]
								}, {
									"case":	343,
									"scores":	[-6.235334346942885]
								}, {
									"case":	344,
									"scores":	[-6.235334346942885]
								}, {
									"case":	345,
									"scores":	[-6.235334346942885]
								}, {
									"case":	346,
									"scores":	[-6.235334346942885]
								}, {
									"case":	347,
									"scores":	[-6.235334346942885]
								}, {
									"case":	348,
									"scores":	[-6.235334346942885]
								}, {
									"case":	349,
									"scores":	[-6.235334346942885]
								}, {
									"case":	350,
									"scores":	[-6.235334346942885]
								}, {
									"case":	351,
									"scores":	[-6.235334346942885]
								}, {
									"case":	352,
									"scores":	[-6.235334346942885]
								}, {
									"case":	353,
									"scores":	[-6.235334346942885]
								}, {
									"case":	354,
									"scores":	[-6.235334346942885]
								}, {
									"case":	355,
									"scores":	[-6.235334346942885]
								}, {
									"case":	356,
									"scores":	[-6.235334346942885]
								}, {
									"case":	357,
									"scores":	[-6.235334346942885]
								}, {
									"case":	358,
									"scores":	[-6.235334346942885]
								}, {
									"case":	359,
									"scores":	[-6.235334346942885]
								}, {
									"case":	360,
									"scores":	[-6.235334346942885]
								}, {
									"case":	361,
									"scores":	[-6.235334346942885]
								}, {
									"case":	362,
									"scores":	[-6.235334346942885]
								}, {
									"case":	363,
									"scores":	[-6.235334346942885]
								}, {
									"case":	364,
									"scores":	[-6.235334346942885]
								}, {
									"case":	365,
									"scores":	[-6.235334346942885]
								}, {
									"case":	366,
									"scores":	[-6.235334346942885]
								}, {
									"case":	367,
									"scores":	[-6.235334346942885]
								}, {
									"case":	368,
									"scores":	[-6.235334346942885]
								}, {
									"case":	369,
									"scores":	[-6.235334346942885]
								}, {
									"case":	370,
									"scores":	[-6.235334346942885]
								}, {
									"case":	371,
									"scores":	[-6.235334346942885]
								}, {
									"case":	372,
									"scores":	[-6.235334346942885]
								}, {
									"case":	373,
									"scores":	[-6.235334346942885]
								}, {
									"case":	374,
									"scores":	[-6.235334346942885]
								}, {
									"case":	375,
									"scores":	[-6.235334346942885]
								}, {
									"case":	376,
									"scores":	[-6.235334346942885]
								}, {
									"case":	377,
									"scores":	[-6.235334346942885]
								}, {
									"case":	378,
									"scores":	[-6.235334346942885]
								}, {
									"case":	379,
									"scores":	[-6.235334346942885]
								}, {
									"case":	380,
									"scores":	[-6.235334346942885]
								}, {
									"case":	381,
									"scores":	[-6.235334346942885]
								}, {
									"case":	382,
									"scores":	[-6.235334346942885]
								}, {
									"case":	383,
									"scores":	[-6.235334346942885]
								}, {
									"case":	384,
									"scores":	[-6.235334346942885]
								}, {
									"case":	385,
									"scores":	[-6.235334346942885]
								}, {
									"case":	386,
									"scores":	[-6.235334346942885]
								}, {
									"case":	387,
									"scores":	[-6.235334346942885]
								}, {
									"case":	388,
									"scores":	[-6.235334346942885]
								}, {
									"case":	389,
									"scores":	[-6.235334346942885]
								}, {
									"case":	390,
									"scores":	[-6.235334346942885]
								}, {
									"case":	391,
									"scores":	[-6.235334346942885]
								}, {
									"case":	392,
									"scores":	[-6.235334346942885]
								}, {
									"case":	393,
									"scores":	[-6.235334346942885]
								}, {
									"case":	394,
									"scores":	[-6.235334346942885]
								}, {
									"case":	395,
									"scores":	[-8.5888191197428849, -8.5888191197428849, -8.2226076380428861, -9.7802339500428843, -9.7802339500428843, -8.2226076380428861, -8.9585928500428853, -8.9585928500428853, -10.119367919742885, -10.119367919742885, -10.145250963842885, -10.335480750042885, -10.018227650042885, -11.031825963842884, -9.7802339500428843, -9.7802339500428843, -10.018227650042885, -11.031825963842884, -9.7802339500428843, -9.7802339500428843, -7.5053489500428849, -9.3973329500428857, -7.5053489500428849, -9.7802339500428843, -9.7802339500428843, -9.7802339500428843, -9.6219911500428843, -10.024498150042884, -9.6219911500428843, -9.7802339500428843, -9.7802339500428843, -9.7802339500428843, -9.7802339500428843, -9.7802339500428843, -9.7802339500428843, -9.5539648869428859, -9.7802339500428843]
								}]
						}, {
							"switch":	38,
							"types":	[[51], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], []],
							"begin_line":	847,
							"begin_column":	5,
							"end_line":	848,
							"end_column":	19,
							"patch_codes":	["if (__is_neg(\"\", \"L847\", 37, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(work), sizeof (work), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    read_error();\n", "if ((close(ifd) != 0) || __is_neg(\"\", \"L847\", 37, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(work), sizeof (work), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    read_error();\n", "if (__getpgid(ifd) != 0)\n    read_error();\n", "if (_tolower(ifd) != 0)\n    read_error();\n", "if (_toupper(ifd) != 0)\n    read_error();\n", "if (abs(ifd) != 0)\n    read_error();\n", "if (check_zipfile(ifd) != 0)\n    read_error();\n", "if (dup(ifd) != 0)\n    read_error();\n", "if (dysize(ifd) != 0)\n    read_error();\n", "if (fchdir(ifd) != 0)\n    read_error();\n", "if (fdatasync(ifd) != 0)\n    read_error();\n", "if (ffs(ifd) != 0)\n    read_error();\n", "if (fill_inbuf(ifd) != 0)\n    read_error();\n", "if (fsync(ifd) != 0)\n    read_error();\n", "if (get_method(ifd) != 0)\n    read_error();\n", "if (getpgid(ifd) != 0)\n    read_error();\n", "if (getsid(ifd) != 0)\n    read_error();\n", "if (grantpt(ifd) != 0)\n    read_error();\n", "if (gsignal(ifd) != 0)\n    read_error();\n", "if (isalnum(ifd) != 0)\n    read_error();\n", "if (isalpha(ifd) != 0)\n    read_error();\n", "if (isascii(ifd) != 0)\n    read_error();\n", "if (isatty(ifd) != 0)\n    read_error();\n", "if (isblank(ifd) != 0)\n    read_error();\n", "if (iscntrl(ifd) != 0)\n    read_error();\n", "if (isdigit(ifd) != 0)\n    read_error();\n", "if (isgraph(ifd) != 0)\n    read_error();\n", "if (islower(ifd) != 0)\n    read_error();\n", "if (isprint(ifd) != 0)\n    read_error();\n", "if (ispunct(ifd) != 0)\n    read_error();\n", "if (isspace(ifd) != 0)\n    read_error();\n", "if (isupper(ifd) != 0)\n    read_error();\n", "if (isxdigit(ifd) != 0)\n    read_error();\n", "if (nice(ifd) != 0)\n    read_error();\n", "if (posix_openpt(ifd) != 0)\n    read_error();\n", "if (putchar(ifd) != 0)\n    read_error();\n", "if (putchar_unlocked(ifd) != 0)\n    read_error();\n", "if (raise(ifd) != 0)\n    read_error();\n", "if (sigblock(ifd) != 0)\n    read_error();\n", "if (sighold(ifd) != 0)\n    read_error();\n", "if (sigignore(ifd) != 0)\n    read_error();\n", "if (sigpause(ifd) != 0)\n    read_error();\n", "if (sigrelse(ifd) != 0)\n    read_error();\n", "if (sigsetmask(ifd) != 0)\n    read_error();\n", "if (syncfs(ifd) != 0)\n    read_error();\n", "if (tcgetpgrp(ifd) != 0)\n    read_error();\n", "if (toascii(ifd) != 0)\n    read_error();\n", "if (tolower(ifd) != 0)\n    read_error();\n", "if (toupper(ifd) != 0)\n    read_error();\n", "if (unlockpt(ifd) != 0)\n    read_error();\n", "if ((close(ifd) != 0) && !__is_neg(\"\", \"L847\", 37, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(work), sizeof (work), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    read_error();\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.480239215128146, -3.480239215128146, -5.0710807424281459, -4.3724851954281458, -4.3724851954281458, -5.0710807424281459, -5.1252213424281461, -5.1252213424281461, -3.785967115128146, -3.785967115128146, -5.1297389724281457, -4.7912713454281457, -4.2350047954281465, -3.9221289724281458, -4.3724851954281458, -4.3724851954281458, -4.2350047954281465, -3.9221289724281458, -4.3724851954281458, -4.3724851954281458, -3.6591263424281459, -4.1570554954281462, -3.6591263424281459, -4.3724851954281458, -4.3724851954281458, -4.3724851954281458, -4.4522067954281459, -4.8056650954281457, -4.4522067954281459, -4.3724851954281458, -4.3724851954281458, -4.3724851954281458, -4.3724851954281458, -4.3724851954281458, -4.3724851954281458, -4.5928763954281457, -4.3724851954281458]
								}, {
									"case":	2,
									"scores":	[-4.1235164681281455, -4.1235164681281455, -5.7143579954281458, -5.0157624484281458, -5.0157624484281458, -5.7143579954281458, -5.768498595428146, -5.768498595428146, -4.4292443681281455, -4.4292443681281455, -5.7730162254281456, -5.4345485984281456, -4.8782820484281455, -4.5654062254281467, -5.0157624484281458, -5.0157624484281458, -4.8782820484281455, -4.5654062254281467, -5.0157624484281458, -5.0157624484281458, -4.3024035954281459, -4.8003327484281462, -4.3024035954281459, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0954840484281458, -5.4489423484281456, -5.0954840484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.2361536484281457, -5.0157624484281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-4.1235164681281455, -4.1235164681281455, -5.7143579954281458, -5.0157624484281458, -5.0157624484281458, -5.7143579954281458, -5.768498595428146, -5.768498595428146, -4.4292443681281455, -4.4292443681281455, -5.7730162254281456, -5.4345485984281456, -4.8782820484281455, -4.5654062254281467, -5.0157624484281458, -5.0157624484281458, -4.8782820484281455, -4.5654062254281467, -5.0157624484281458, -5.0157624484281458, -4.3024035954281459, -4.8003327484281462, -4.3024035954281459, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0954840484281458, -5.4489423484281456, -5.0954840484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.0157624484281458, -5.2361536484281457, -5.0157624484281458]
								}]
						}, {
							"switch":	39,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	847,
							"begin_column":	5,
							"end_line":	848,
							"end_column":	19,
							"patch_codes":	["if (!__is_neg(\"\", \"L847\", 37, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(work), sizeof (work), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    if (close(ifd) != 0)\n        read_error();\n", "if (!__is_neg(\"\", \"L847\", 37, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(bytes_out), sizeof (bytes_out), &(method), sizeof (method), &(method), sizeof (method), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(work), sizeof (work), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)) && (close(ifd) != 0))\n    read_error();\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2528306466428845, -7.2528306466428845, -8.8436721739428847, -8.1450766269428847, -8.1450766269428847, -8.8436721739428847, -8.8978127739428849, -8.8978127739428849, -7.5585585466428844, -7.5585585466428844, -8.9023304039428854, -8.5638627769428854, -8.0075962269428853, -7.6947204039428847, -8.1450766269428847, -8.1450766269428847, -8.0075962269428853, -7.6947204039428847, -8.1450766269428847, -8.1450766269428847, -7.4317177739428848, -7.9296469269428851, -7.4317177739428848, -8.1450766269428847, -8.1450766269428847, -8.1450766269428847, -8.2247982269428856, -8.5782565269428854, -8.2247982269428856, -8.1450766269428847, -8.1450766269428847, -8.1450766269428847, -8.1450766269428847, -8.1450766269428847, -8.1450766269428847, -8.3654678269428846, -8.1450766269428847]
								}, {
									"case":	2,
									"scores":	[-7.5626389896428847, -7.5626389896428847, -9.153480516942885, -8.454884969942885, -8.454884969942885, -9.153480516942885, -9.2076211169428852, -9.2076211169428852, -7.8683668896428847, -7.8683668896428847, -9.2121387469428839, -8.8736711199428839, -8.3174045699428838, -8.004528746942885, -8.454884969942885, -8.454884969942885, -8.3174045699428838, -8.004528746942885, -8.454884969942885, -8.454884969942885, -7.7415261169428851, -8.2394552699428854, -7.7415261169428851, -8.454884969942885, -8.454884969942885, -8.454884969942885, -8.5346065699428841, -8.8880648699428839, -8.5346065699428841, -8.454884969942885, -8.454884969942885, -8.454884969942885, -8.454884969942885, -8.454884969942885, -8.454884969942885, -8.6752761699428849, -8.454884969942885]
								}]
						}]
				}, {
					"line":	849,
					"switches":	[{
							"switch":	40,
							"types":	[[], [], [], [], [396], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [], [], [], [], [], []],
							"begin_line":	850,
							"begin_column":	3,
							"end_line":	850,
							"end_column":	3,
							"patch_codes":	["memset(&istat, 0, sizeof (*(&istat)))", "memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L850\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.194928932307846]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-6.194928932307846]
								}, {
									"case":	6,
									"scores":	[-6.194928932307846]
								}, {
									"case":	7,
									"scores":	[-6.194928932307846]
								}, {
									"case":	8,
									"scores":	[-6.194928932307846]
								}, {
									"case":	9,
									"scores":	[-6.194928932307846]
								}, {
									"case":	10,
									"scores":	[-6.194928932307846]
								}, {
									"case":	11,
									"scores":	[-6.194928932307846]
								}, {
									"case":	12,
									"scores":	[-6.194928932307846]
								}, {
									"case":	13,
									"scores":	[-6.194928932307846]
								}, {
									"case":	14,
									"scores":	[-6.194928932307846]
								}, {
									"case":	15,
									"scores":	[-6.194928932307846]
								}, {
									"case":	16,
									"scores":	[-6.194928932307846]
								}, {
									"case":	17,
									"scores":	[-6.194928932307846]
								}, {
									"case":	18,
									"scores":	[-6.194928932307846]
								}, {
									"case":	19,
									"scores":	[-6.194928932307846]
								}, {
									"case":	20,
									"scores":	[-6.194928932307846]
								}, {
									"case":	21,
									"scores":	[-6.194928932307846]
								}, {
									"case":	22,
									"scores":	[-6.194928932307846]
								}, {
									"case":	23,
									"scores":	[-6.194928932307846]
								}, {
									"case":	24,
									"scores":	[-6.194928932307846]
								}, {
									"case":	25,
									"scores":	[-6.194928932307846]
								}, {
									"case":	26,
									"scores":	[-6.194928932307846]
								}, {
									"case":	27,
									"scores":	[-6.194928932307846]
								}, {
									"case":	28,
									"scores":	[-6.194928932307846]
								}, {
									"case":	29,
									"scores":	[-6.194928932307846]
								}, {
									"case":	30,
									"scores":	[-6.194928932307846]
								}, {
									"case":	31,
									"scores":	[-6.194928932307846]
								}, {
									"case":	32,
									"scores":	[-6.194928932307846]
								}, {
									"case":	33,
									"scores":	[-6.194928932307846]
								}, {
									"case":	34,
									"scores":	[-6.194928932307846]
								}, {
									"case":	35,
									"scores":	[-6.194928932307846]
								}, {
									"case":	36,
									"scores":	[-6.194928932307846]
								}, {
									"case":	37,
									"scores":	[-6.194928932307846]
								}, {
									"case":	38,
									"scores":	[-6.194928932307846]
								}, {
									"case":	39,
									"scores":	[-6.194928932307846]
								}, {
									"case":	40,
									"scores":	[-6.194928932307846]
								}, {
									"case":	41,
									"scores":	[-6.194928932307846]
								}, {
									"case":	42,
									"scores":	[-6.194928932307846]
								}, {
									"case":	43,
									"scores":	[-6.194928932307846]
								}, {
									"case":	44,
									"scores":	[-6.194928932307846]
								}, {
									"case":	45,
									"scores":	[-6.194928932307846]
								}, {
									"case":	46,
									"scores":	[-6.194928932307846]
								}, {
									"case":	47,
									"scores":	[-6.194928932307846]
								}, {
									"case":	48,
									"scores":	[-6.194928932307846]
								}, {
									"case":	49,
									"scores":	[-6.194928932307846]
								}, {
									"case":	50,
									"scores":	[-6.194928932307846]
								}, {
									"case":	51,
									"scores":	[-6.194928932307846]
								}, {
									"case":	52,
									"scores":	[-6.194928932307846]
								}, {
									"case":	53,
									"scores":	[-6.194928932307846]
								}, {
									"case":	54,
									"scores":	[-6.194928932307846]
								}, {
									"case":	55,
									"scores":	[-6.194928932307846]
								}, {
									"case":	56,
									"scores":	[-6.194928932307846]
								}, {
									"case":	57,
									"scores":	[-6.194928932307846]
								}, {
									"case":	58,
									"scores":	[-6.194928932307846]
								}, {
									"case":	59,
									"scores":	[-6.194928932307846]
								}, {
									"case":	60,
									"scores":	[-6.194928932307846]
								}, {
									"case":	61,
									"scores":	[-6.194928932307846]
								}, {
									"case":	62,
									"scores":	[-6.194928932307846]
								}, {
									"case":	63,
									"scores":	[-6.194928932307846]
								}, {
									"case":	64,
									"scores":	[-6.194928932307846]
								}, {
									"case":	65,
									"scores":	[-6.194928932307846]
								}, {
									"case":	66,
									"scores":	[-6.194928932307846]
								}, {
									"case":	67,
									"scores":	[-6.194928932307846]
								}, {
									"case":	68,
									"scores":	[-6.194928932307846]
								}, {
									"case":	69,
									"scores":	[-6.194928932307846]
								}, {
									"case":	70,
									"scores":	[-6.194928932307846]
								}, {
									"case":	71,
									"scores":	[-6.194928932307846]
								}, {
									"case":	72,
									"scores":	[-6.194928932307846]
								}, {
									"case":	73,
									"scores":	[-6.194928932307846]
								}, {
									"case":	74,
									"scores":	[-6.194928932307846]
								}, {
									"case":	75,
									"scores":	[-6.194928932307846]
								}, {
									"case":	76,
									"scores":	[-6.194928932307846]
								}, {
									"case":	77,
									"scores":	[-6.194928932307846]
								}, {
									"case":	78,
									"scores":	[-6.194928932307846]
								}, {
									"case":	79,
									"scores":	[-6.194928932307846]
								}, {
									"case":	80,
									"scores":	[-6.194928932307846]
								}, {
									"case":	81,
									"scores":	[-6.194928932307846]
								}, {
									"case":	82,
									"scores":	[-6.194928932307846]
								}, {
									"case":	83,
									"scores":	[-6.194928932307846]
								}, {
									"case":	84,
									"scores":	[-6.194928932307846]
								}, {
									"case":	85,
									"scores":	[-6.194928932307846]
								}, {
									"case":	86,
									"scores":	[-6.194928932307846]
								}, {
									"case":	87,
									"scores":	[-6.194928932307846]
								}, {
									"case":	88,
									"scores":	[-6.194928932307846]
								}, {
									"case":	89,
									"scores":	[-6.194928932307846]
								}, {
									"case":	90,
									"scores":	[-6.194928932307846]
								}, {
									"case":	91,
									"scores":	[-6.194928932307846]
								}, {
									"case":	92,
									"scores":	[-6.194928932307846]
								}, {
									"case":	93,
									"scores":	[-6.194928932307846]
								}, {
									"case":	94,
									"scores":	[-6.194928932307846]
								}, {
									"case":	95,
									"scores":	[-6.194928932307846]
								}, {
									"case":	96,
									"scores":	[-6.194928932307846]
								}, {
									"case":	97,
									"scores":	[-6.194928932307846]
								}, {
									"case":	98,
									"scores":	[-6.194928932307846]
								}, {
									"case":	99,
									"scores":	[-6.194928932307846]
								}, {
									"case":	100,
									"scores":	[-6.194928932307846]
								}, {
									"case":	101,
									"scores":	[-6.194928932307846]
								}, {
									"case":	102,
									"scores":	[-6.194928932307846]
								}, {
									"case":	103,
									"scores":	[-6.194928932307846]
								}, {
									"case":	104,
									"scores":	[-6.194928932307846]
								}, {
									"case":	105,
									"scores":	[-6.194928932307846]
								}, {
									"case":	106,
									"scores":	[-6.194928932307846]
								}, {
									"case":	107,
									"scores":	[-6.194928932307846]
								}, {
									"case":	108,
									"scores":	[-6.194928932307846]
								}, {
									"case":	109,
									"scores":	[-6.194928932307846]
								}, {
									"case":	110,
									"scores":	[-6.194928932307846]
								}, {
									"case":	111,
									"scores":	[-6.194928932307846]
								}, {
									"case":	112,
									"scores":	[-6.194928932307846]
								}, {
									"case":	113,
									"scores":	[-6.194928932307846]
								}, {
									"case":	114,
									"scores":	[-6.194928932307846]
								}, {
									"case":	115,
									"scores":	[-6.194928932307846]
								}, {
									"case":	116,
									"scores":	[-6.194928932307846]
								}, {
									"case":	117,
									"scores":	[-6.194928932307846]
								}, {
									"case":	118,
									"scores":	[-6.194928932307846]
								}, {
									"case":	119,
									"scores":	[-6.194928932307846]
								}, {
									"case":	120,
									"scores":	[-6.194928932307846]
								}, {
									"case":	121,
									"scores":	[-6.194928932307846]
								}, {
									"case":	122,
									"scores":	[-6.194928932307846]
								}, {
									"case":	123,
									"scores":	[-6.194928932307846]
								}, {
									"case":	124,
									"scores":	[-6.194928932307846]
								}, {
									"case":	125,
									"scores":	[-6.194928932307846]
								}, {
									"case":	126,
									"scores":	[-6.194928932307846]
								}, {
									"case":	127,
									"scores":	[-6.194928932307846]
								}, {
									"case":	128,
									"scores":	[-6.194928932307846]
								}, {
									"case":	129,
									"scores":	[-6.194928932307846]
								}, {
									"case":	130,
									"scores":	[-6.194928932307846]
								}, {
									"case":	131,
									"scores":	[-6.194928932307846]
								}, {
									"case":	132,
									"scores":	[-6.194928932307846]
								}, {
									"case":	133,
									"scores":	[-6.194928932307846]
								}, {
									"case":	134,
									"scores":	[-6.194928932307846]
								}, {
									"case":	135,
									"scores":	[-6.194928932307846]
								}, {
									"case":	136,
									"scores":	[-6.194928932307846]
								}, {
									"case":	137,
									"scores":	[-6.194928932307846]
								}, {
									"case":	138,
									"scores":	[-6.194928932307846]
								}, {
									"case":	139,
									"scores":	[-6.194928932307846]
								}, {
									"case":	140,
									"scores":	[-6.194928932307846]
								}, {
									"case":	141,
									"scores":	[-6.194928932307846]
								}, {
									"case":	142,
									"scores":	[-6.194928932307846]
								}, {
									"case":	143,
									"scores":	[-6.194928932307846]
								}, {
									"case":	144,
									"scores":	[-6.194928932307846]
								}, {
									"case":	145,
									"scores":	[-6.194928932307846]
								}, {
									"case":	146,
									"scores":	[-6.194928932307846]
								}, {
									"case":	147,
									"scores":	[-6.194928932307846]
								}, {
									"case":	148,
									"scores":	[-6.194928932307846]
								}, {
									"case":	149,
									"scores":	[-6.194928932307846]
								}, {
									"case":	150,
									"scores":	[-6.194928932307846]
								}, {
									"case":	151,
									"scores":	[-6.194928932307846]
								}, {
									"case":	152,
									"scores":	[-6.194928932307846]
								}, {
									"case":	153,
									"scores":	[-6.194928932307846]
								}, {
									"case":	154,
									"scores":	[-6.194928932307846]
								}, {
									"case":	155,
									"scores":	[-6.194928932307846]
								}, {
									"case":	156,
									"scores":	[-6.194928932307846]
								}, {
									"case":	157,
									"scores":	[-6.194928932307846]
								}, {
									"case":	158,
									"scores":	[-6.194928932307846]
								}, {
									"case":	159,
									"scores":	[-6.194928932307846]
								}, {
									"case":	160,
									"scores":	[-6.194928932307846]
								}, {
									"case":	161,
									"scores":	[-6.194928932307846]
								}, {
									"case":	162,
									"scores":	[-6.194928932307846]
								}, {
									"case":	163,
									"scores":	[-6.194928932307846]
								}, {
									"case":	164,
									"scores":	[-6.194928932307846]
								}, {
									"case":	165,
									"scores":	[-6.194928932307846]
								}, {
									"case":	166,
									"scores":	[-6.194928932307846]
								}, {
									"case":	167,
									"scores":	[-6.194928932307846]
								}, {
									"case":	168,
									"scores":	[-6.194928932307846]
								}, {
									"case":	169,
									"scores":	[-6.194928932307846]
								}, {
									"case":	170,
									"scores":	[-6.194928932307846]
								}, {
									"case":	171,
									"scores":	[-6.194928932307846]
								}, {
									"case":	172,
									"scores":	[-6.194928932307846]
								}, {
									"case":	173,
									"scores":	[-6.194928932307846]
								}, {
									"case":	174,
									"scores":	[-6.194928932307846]
								}, {
									"case":	175,
									"scores":	[-6.194928932307846]
								}, {
									"case":	176,
									"scores":	[-6.194928932307846]
								}, {
									"case":	177,
									"scores":	[-6.194928932307846]
								}, {
									"case":	178,
									"scores":	[-6.194928932307846]
								}, {
									"case":	179,
									"scores":	[-6.194928932307846]
								}, {
									"case":	180,
									"scores":	[-6.194928932307846]
								}, {
									"case":	181,
									"scores":	[-6.194928932307846]
								}, {
									"case":	182,
									"scores":	[-6.194928932307846]
								}, {
									"case":	183,
									"scores":	[-6.194928932307846]
								}, {
									"case":	184,
									"scores":	[-6.194928932307846]
								}, {
									"case":	185,
									"scores":	[-6.194928932307846]
								}, {
									"case":	186,
									"scores":	[-6.194928932307846]
								}, {
									"case":	187,
									"scores":	[-6.194928932307846]
								}, {
									"case":	188,
									"scores":	[-6.194928932307846]
								}, {
									"case":	189,
									"scores":	[-6.194928932307846]
								}, {
									"case":	190,
									"scores":	[-6.194928932307846]
								}, {
									"case":	191,
									"scores":	[-6.194928932307846]
								}, {
									"case":	192,
									"scores":	[-6.194928932307846]
								}, {
									"case":	193,
									"scores":	[-6.194928932307846]
								}, {
									"case":	194,
									"scores":	[-6.194928932307846]
								}, {
									"case":	195,
									"scores":	[-6.194928932307846]
								}, {
									"case":	196,
									"scores":	[-6.194928932307846]
								}, {
									"case":	197,
									"scores":	[-6.194928932307846]
								}, {
									"case":	198,
									"scores":	[-6.194928932307846]
								}, {
									"case":	199,
									"scores":	[-6.194928932307846]
								}, {
									"case":	200,
									"scores":	[-6.194928932307846]
								}, {
									"case":	201,
									"scores":	[-6.194928932307846]
								}, {
									"case":	202,
									"scores":	[-6.194928932307846]
								}, {
									"case":	203,
									"scores":	[-6.194928932307846]
								}, {
									"case":	204,
									"scores":	[-6.194928932307846]
								}, {
									"case":	205,
									"scores":	[-6.194928932307846]
								}, {
									"case":	206,
									"scores":	[-6.194928932307846]
								}, {
									"case":	207,
									"scores":	[-6.194928932307846]
								}, {
									"case":	208,
									"scores":	[-6.194928932307846]
								}, {
									"case":	209,
									"scores":	[-6.194928932307846]
								}, {
									"case":	210,
									"scores":	[-6.194928932307846]
								}, {
									"case":	211,
									"scores":	[-6.194928932307846]
								}, {
									"case":	212,
									"scores":	[-6.194928932307846]
								}, {
									"case":	213,
									"scores":	[-6.194928932307846]
								}, {
									"case":	214,
									"scores":	[-6.194928932307846]
								}, {
									"case":	215,
									"scores":	[-6.194928932307846]
								}, {
									"case":	216,
									"scores":	[-6.194928932307846]
								}, {
									"case":	217,
									"scores":	[-6.194928932307846]
								}, {
									"case":	218,
									"scores":	[-6.194928932307846]
								}, {
									"case":	219,
									"scores":	[-6.194928932307846]
								}, {
									"case":	220,
									"scores":	[-6.194928932307846]
								}, {
									"case":	221,
									"scores":	[-6.194928932307846]
								}, {
									"case":	222,
									"scores":	[-6.194928932307846]
								}, {
									"case":	223,
									"scores":	[-6.194928932307846]
								}, {
									"case":	224,
									"scores":	[-6.194928932307846]
								}, {
									"case":	225,
									"scores":	[-6.194928932307846]
								}, {
									"case":	226,
									"scores":	[-6.194928932307846]
								}, {
									"case":	227,
									"scores":	[-6.194928932307846]
								}, {
									"case":	228,
									"scores":	[-6.194928932307846]
								}, {
									"case":	229,
									"scores":	[-6.194928932307846]
								}, {
									"case":	230,
									"scores":	[-6.194928932307846]
								}, {
									"case":	231,
									"scores":	[-6.194928932307846]
								}, {
									"case":	232,
									"scores":	[-6.194928932307846]
								}, {
									"case":	233,
									"scores":	[-6.194928932307846]
								}, {
									"case":	234,
									"scores":	[-6.194928932307846]
								}, {
									"case":	235,
									"scores":	[-6.194928932307846]
								}, {
									"case":	236,
									"scores":	[-6.194928932307846]
								}, {
									"case":	237,
									"scores":	[-6.194928932307846]
								}, {
									"case":	238,
									"scores":	[-6.194928932307846]
								}, {
									"case":	239,
									"scores":	[-6.194928932307846]
								}, {
									"case":	240,
									"scores":	[-6.194928932307846]
								}, {
									"case":	241,
									"scores":	[-6.194928932307846]
								}, {
									"case":	242,
									"scores":	[-6.194928932307846]
								}, {
									"case":	243,
									"scores":	[-6.194928932307846]
								}, {
									"case":	244,
									"scores":	[-6.194928932307846]
								}, {
									"case":	245,
									"scores":	[-6.194928932307846]
								}, {
									"case":	246,
									"scores":	[-6.194928932307846]
								}, {
									"case":	247,
									"scores":	[-6.194928932307846]
								}, {
									"case":	248,
									"scores":	[-6.194928932307846]
								}, {
									"case":	249,
									"scores":	[-6.194928932307846]
								}, {
									"case":	250,
									"scores":	[-6.194928932307846]
								}, {
									"case":	251,
									"scores":	[-6.194928932307846]
								}, {
									"case":	252,
									"scores":	[-6.194928932307846]
								}, {
									"case":	253,
									"scores":	[-6.194928932307846]
								}, {
									"case":	254,
									"scores":	[-6.194928932307846]
								}, {
									"case":	255,
									"scores":	[-6.194928932307846]
								}, {
									"case":	256,
									"scores":	[-6.194928932307846]
								}, {
									"case":	257,
									"scores":	[-6.194928932307846]
								}, {
									"case":	258,
									"scores":	[-6.194928932307846]
								}, {
									"case":	259,
									"scores":	[-6.194928932307846]
								}, {
									"case":	260,
									"scores":	[-6.194928932307846]
								}, {
									"case":	261,
									"scores":	[-6.194928932307846]
								}, {
									"case":	262,
									"scores":	[-6.194928932307846]
								}, {
									"case":	263,
									"scores":	[-6.194928932307846]
								}, {
									"case":	264,
									"scores":	[-6.194928932307846]
								}, {
									"case":	265,
									"scores":	[-6.194928932307846]
								}, {
									"case":	266,
									"scores":	[-6.194928932307846]
								}, {
									"case":	267,
									"scores":	[-6.194928932307846]
								}, {
									"case":	268,
									"scores":	[-6.194928932307846]
								}, {
									"case":	269,
									"scores":	[-6.194928932307846]
								}, {
									"case":	270,
									"scores":	[-6.194928932307846]
								}, {
									"case":	271,
									"scores":	[-6.194928932307846]
								}, {
									"case":	272,
									"scores":	[-6.194928932307846]
								}, {
									"case":	273,
									"scores":	[-6.194928932307846]
								}, {
									"case":	274,
									"scores":	[-6.194928932307846]
								}, {
									"case":	275,
									"scores":	[-6.194928932307846]
								}, {
									"case":	276,
									"scores":	[-6.194928932307846]
								}, {
									"case":	277,
									"scores":	[-6.194928932307846]
								}, {
									"case":	278,
									"scores":	[-6.194928932307846]
								}, {
									"case":	279,
									"scores":	[-6.194928932307846]
								}, {
									"case":	280,
									"scores":	[-6.194928932307846]
								}, {
									"case":	281,
									"scores":	[-6.194928932307846]
								}, {
									"case":	282,
									"scores":	[-6.194928932307846]
								}, {
									"case":	283,
									"scores":	[-6.194928932307846]
								}, {
									"case":	284,
									"scores":	[-6.194928932307846]
								}, {
									"case":	285,
									"scores":	[-6.194928932307846]
								}, {
									"case":	286,
									"scores":	[-6.194928932307846]
								}, {
									"case":	287,
									"scores":	[-6.194928932307846]
								}, {
									"case":	288,
									"scores":	[-6.194928932307846]
								}, {
									"case":	289,
									"scores":	[-6.194928932307846]
								}, {
									"case":	290,
									"scores":	[-6.194928932307846]
								}, {
									"case":	291,
									"scores":	[-6.194928932307846]
								}, {
									"case":	292,
									"scores":	[-6.194928932307846]
								}, {
									"case":	293,
									"scores":	[-6.194928932307846]
								}, {
									"case":	294,
									"scores":	[-6.194928932307846]
								}, {
									"case":	295,
									"scores":	[-6.194928932307846]
								}, {
									"case":	296,
									"scores":	[-6.194928932307846]
								}, {
									"case":	297,
									"scores":	[-6.194928932307846]
								}, {
									"case":	298,
									"scores":	[-6.194928932307846]
								}, {
									"case":	299,
									"scores":	[-6.194928932307846]
								}, {
									"case":	300,
									"scores":	[-6.194928932307846]
								}, {
									"case":	301,
									"scores":	[-6.194928932307846]
								}, {
									"case":	302,
									"scores":	[-6.194928932307846]
								}, {
									"case":	303,
									"scores":	[-6.194928932307846]
								}, {
									"case":	304,
									"scores":	[-6.194928932307846]
								}, {
									"case":	305,
									"scores":	[-6.194928932307846]
								}, {
									"case":	306,
									"scores":	[-6.194928932307846]
								}, {
									"case":	307,
									"scores":	[-6.194928932307846]
								}, {
									"case":	308,
									"scores":	[-6.194928932307846]
								}, {
									"case":	309,
									"scores":	[-6.194928932307846]
								}, {
									"case":	310,
									"scores":	[-6.194928932307846]
								}, {
									"case":	311,
									"scores":	[-6.194928932307846]
								}, {
									"case":	312,
									"scores":	[-6.194928932307846]
								}, {
									"case":	313,
									"scores":	[-6.194928932307846]
								}, {
									"case":	314,
									"scores":	[-6.194928932307846]
								}, {
									"case":	315,
									"scores":	[-6.194928932307846]
								}, {
									"case":	316,
									"scores":	[-6.194928932307846]
								}, {
									"case":	317,
									"scores":	[-6.194928932307846]
								}, {
									"case":	318,
									"scores":	[-6.194928932307846]
								}, {
									"case":	319,
									"scores":	[-6.194928932307846]
								}, {
									"case":	320,
									"scores":	[-6.194928932307846]
								}, {
									"case":	321,
									"scores":	[-6.194928932307846]
								}, {
									"case":	322,
									"scores":	[-6.194928932307846]
								}, {
									"case":	323,
									"scores":	[-6.194928932307846]
								}, {
									"case":	324,
									"scores":	[-6.194928932307846]
								}, {
									"case":	325,
									"scores":	[-6.194928932307846]
								}, {
									"case":	326,
									"scores":	[-6.194928932307846]
								}, {
									"case":	327,
									"scores":	[-6.194928932307846]
								}, {
									"case":	328,
									"scores":	[-6.194928932307846]
								}, {
									"case":	329,
									"scores":	[-6.194928932307846]
								}, {
									"case":	330,
									"scores":	[-6.194928932307846]
								}, {
									"case":	331,
									"scores":	[-6.194928932307846]
								}, {
									"case":	332,
									"scores":	[-6.194928932307846]
								}, {
									"case":	333,
									"scores":	[-6.194928932307846]
								}, {
									"case":	334,
									"scores":	[-6.194928932307846]
								}, {
									"case":	335,
									"scores":	[-6.194928932307846]
								}, {
									"case":	336,
									"scores":	[-6.194928932307846]
								}, {
									"case":	337,
									"scores":	[-6.194928932307846]
								}, {
									"case":	338,
									"scores":	[-6.194928932307846]
								}, {
									"case":	339,
									"scores":	[-6.194928932307846]
								}, {
									"case":	340,
									"scores":	[-6.194928932307846]
								}, {
									"case":	341,
									"scores":	[-6.194928932307846]
								}, {
									"case":	342,
									"scores":	[-6.194928932307846]
								}, {
									"case":	343,
									"scores":	[-6.194928932307846]
								}, {
									"case":	344,
									"scores":	[-6.194928932307846]
								}, {
									"case":	345,
									"scores":	[-6.194928932307846]
								}, {
									"case":	346,
									"scores":	[-6.194928932307846]
								}, {
									"case":	347,
									"scores":	[-6.194928932307846]
								}, {
									"case":	348,
									"scores":	[-6.194928932307846]
								}, {
									"case":	349,
									"scores":	[-6.194928932307846]
								}, {
									"case":	350,
									"scores":	[-6.194928932307846]
								}, {
									"case":	351,
									"scores":	[-6.194928932307846]
								}, {
									"case":	352,
									"scores":	[-6.194928932307846]
								}, {
									"case":	353,
									"scores":	[-6.194928932307846]
								}, {
									"case":	354,
									"scores":	[-6.194928932307846]
								}, {
									"case":	355,
									"scores":	[-6.194928932307846]
								}, {
									"case":	356,
									"scores":	[-6.194928932307846]
								}, {
									"case":	357,
									"scores":	[-6.194928932307846]
								}, {
									"case":	358,
									"scores":	[-6.194928932307846]
								}, {
									"case":	359,
									"scores":	[-6.194928932307846]
								}, {
									"case":	360,
									"scores":	[-6.194928932307846]
								}, {
									"case":	361,
									"scores":	[-6.194928932307846]
								}, {
									"case":	362,
									"scores":	[-6.194928932307846]
								}, {
									"case":	363,
									"scores":	[-6.194928932307846]
								}, {
									"case":	364,
									"scores":	[-6.194928932307846]
								}, {
									"case":	365,
									"scores":	[-6.194928932307846]
								}, {
									"case":	366,
									"scores":	[-6.194928932307846]
								}, {
									"case":	367,
									"scores":	[-6.194928932307846]
								}, {
									"case":	368,
									"scores":	[-6.194928932307846]
								}, {
									"case":	369,
									"scores":	[-6.194928932307846]
								}, {
									"case":	370,
									"scores":	[-6.194928932307846]
								}, {
									"case":	371,
									"scores":	[-6.194928932307846]
								}, {
									"case":	372,
									"scores":	[-6.194928932307846]
								}, {
									"case":	373,
									"scores":	[-6.194928932307846]
								}, {
									"case":	374,
									"scores":	[-6.194928932307846]
								}, {
									"case":	375,
									"scores":	[-6.194928932307846]
								}, {
									"case":	376,
									"scores":	[-6.194928932307846]
								}, {
									"case":	377,
									"scores":	[-6.194928932307846]
								}, {
									"case":	378,
									"scores":	[-6.194928932307846]
								}, {
									"case":	379,
									"scores":	[-6.194928932307846]
								}, {
									"case":	380,
									"scores":	[-6.194928932307846]
								}, {
									"case":	381,
									"scores":	[-6.194928932307846]
								}, {
									"case":	382,
									"scores":	[-6.194928932307846]
								}, {
									"case":	383,
									"scores":	[-6.194928932307846]
								}, {
									"case":	384,
									"scores":	[-6.194928932307846]
								}, {
									"case":	385,
									"scores":	[-6.194928932307846]
								}, {
									"case":	386,
									"scores":	[-6.194928932307846]
								}, {
									"case":	387,
									"scores":	[-6.194928932307846]
								}, {
									"case":	388,
									"scores":	[-6.194928932307846]
								}, {
									"case":	389,
									"scores":	[-6.194928932307846]
								}, {
									"case":	390,
									"scores":	[-6.194928932307846]
								}, {
									"case":	391,
									"scores":	[-6.194928932307846]
								}, {
									"case":	392,
									"scores":	[-6.194928932307846]
								}, {
									"case":	393,
									"scores":	[-6.194928932307846]
								}, {
									"case":	394,
									"scores":	[-6.194928932307846]
								}, {
									"case":	395,
									"scores":	[-6.194928932307846]
								}, {
									"case":	396,
									"scores":	[-9.7398285354078453, -9.7398285354078453, -9.5474905051078451, -9.5474905051078451, -8.1822022234078471, -8.9313147051078463, -8.1822022234078471, -8.9313147051078463, -8.9181874354078463, -8.9181874354078463, -9.8945924201078466, -8.8301744354078462, -9.8972964201078462, -9.7398285354078453, -9.7398285354078453, -8.8301744354078462, -9.8972964201078462, -10.295075335407846, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.5815857354078453, -9.9840927354078453, -9.5815857354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.7398285354078453, -9.5135594723078469, -9.7398285354078453]
								}]
						}, {
							"switch":	41,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	850,
							"begin_column":	5,
							"end_line":	873,
							"end_column":	7,
							"patch_codes":	["if (__is_neg(\"\", \"L850\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    sigset_t oldset;\n    int unlink_errno;\n    copy_stat(&istat);\n    if (close(ofd) != 0)\n        write_error();\n    sigprocmask(0, &caught_signals, &oldset);\n    remove_ofname_fd = -1;\n    unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n    sigprocmask(2, &oldset, ((void *)0));\n    if (unlink_errno) {\n        {\n            if (!quiet)\n                fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = unlink_errno;\n            perror(ifname);\n        }\n    }\n}\n", "if ((!to_stdout) || __is_neg(\"\", \"L850\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    sigset_t oldset;\n    int unlink_errno;\n    copy_stat(&istat);\n    if (close(ofd) != 0)\n        write_error();\n    sigprocmask(0, &caught_signals, &oldset);\n    remove_ofname_fd = -1;\n    unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n    sigprocmask(2, &oldset, ((void *)0));\n    if (unlink_errno) {\n        {\n            if (!quiet)\n                fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = unlink_errno;\n            perror(ifname);\n        }\n    }\n}\n", "if ((!to_stdout) && !__is_neg(\"\", \"L850\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    sigset_t oldset;\n    int unlink_errno;\n    copy_stat(&istat);\n    if (close(ofd) != 0)\n        write_error();\n    sigprocmask(0, &caught_signals, &oldset);\n    remove_ofname_fd = -1;\n    unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n    sigprocmask(2, &oldset, ((void *)0));\n    if (unlink_errno) {\n        {\n            if (!quiet)\n                fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = unlink_errno;\n            perror(ifname);\n        }\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.302405829128146, -7.302405829128146, -7.074903448828147, -7.074903448828147, -8.001001376128146, -6.6255895488281453, -8.001001376128146, -6.6255895488281453, -5.837940976128146, -5.837940976128146, -8.0225615021281449, -7.0746272291281453, -5.8053605021281465, -7.302405829128146, -7.302405829128146, -7.0746272291281453, -5.8053605021281465, -7.7211919791281449, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.3821274291281451, -7.7355857291281449, -7.3821274291281451, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.302405829128146, -7.5227970291281459, -7.302405829128146]
								}, {
									"case":	2,
									"scores":	[-4.7615736054281461, -4.7615736054281461, -4.5340712251281463, -4.5340712251281463, -5.4601691524281462, -4.0847573251281464, -5.4601691524281462, -4.0847573251281464, -3.2971087524281462, -3.2971087524281462, -5.4817292784281459, -4.5337950054281464, -3.2645282784281462, -4.7615736054281461, -4.7615736054281461, -4.5337950054281464, -3.2645282784281462, -5.180359755428146, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.8412952054281462, -5.194753505428146, -4.8412952054281462, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.981964805428146, -4.7615736054281461]
								}, {
									"case":	3,
									"scores":	[-4.7615736054281461, -4.7615736054281461, -4.5340712251281463, -4.5340712251281463, -5.4601691524281462, -4.0847573251281464, -5.4601691524281462, -4.0847573251281464, -3.2971087524281462, -3.2971087524281462, -5.4817292784281459, -4.5337950054281464, -3.2645282784281462, -4.7615736054281461, -4.7615736054281461, -4.5337950054281464, -3.2645282784281462, -5.180359755428146, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.8412952054281462, -5.194753505428146, -4.8412952054281462, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.7615736054281461, -4.981964805428146, -4.7615736054281461]
								}]
						}, {
							"switch":	42,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	850,
							"begin_column":	5,
							"end_line":	873,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L850\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    if (!to_stdout) {\n        sigset_t oldset;\n        int unlink_errno;\n        copy_stat(&istat);\n        if (close(ofd) != 0)\n            write_error();\n        sigprocmask(0, &caught_signals, &oldset);\n        remove_ofname_fd = -1;\n        unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n        sigprocmask(2, &oldset, ((void *)0));\n        if (unlink_errno) {\n            {\n                if (!quiet)\n                    fprintf(stderr, \"%s: \", program_name);\n                if (exit_code == 0)\n                    exit_code = 2;\n            }\n            ;\n            if (!quiet) {\n                (*__errno_location()) = unlink_errno;\n                perror(ifname);\n            }\n        }\n    }\n", "if (!__is_neg(\"\", \"L850\", 37, &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(bytes_out), sizeof (bytes_out), &(ofd), sizeof (ofd), &(method), sizeof (method), &(method), sizeof (method), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(work), sizeof (work), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(decompress), sizeof (decompress), &(test), sizeof (test), &(test), sizeof (test), &(bytes_in), sizeof (bytes_in), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)) && (!to_stdout)) {\n    sigset_t oldset;\n    int unlink_errno;\n    copy_stat(&istat);\n    if (close(ofd) != 0)\n        write_error();\n    sigprocmask(0, &caught_signals, &oldset);\n    remove_ofname_fd = -1;\n    unlink_errno = xunlink(ifname) == 0 ? 0 : (*__errno_location());\n    sigprocmask(2, &oldset, ((void *)0));\n    if (unlink_errno) {\n        {\n            if (!quiet)\n                fprintf(stderr, \"%s: \", program_name);\n            if (exit_code == 0)\n                exit_code = 2;\n        }\n        ;\n        if (!quiet) {\n            (*__errno_location()) = unlink_errno;\n            perror(ifname);\n        }\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1046712123078457, -8.1046712123078457, -7.8771688320078459, -7.8771688320078459, -8.8032667593078457, -7.427854932007846, -8.8032667593078457, -7.427854932007846, -6.6402063593078458, -6.6402063593078458, -8.8248268853078464, -7.8768926123078451, -6.6076258853078462, -8.1046712123078457, -8.1046712123078457, -7.8768926123078451, -6.6076258853078462, -8.5234573623078465, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1843928123078467, -8.5378511123078464, -8.1843928123078467, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.1046712123078457, -8.3250624123078456, -8.1046712123078457]
								}, {
									"case":	2,
									"scores":	[-7.9144477123078456, -7.9144477123078456, -7.6869453320078458, -7.6869453320078458, -8.6130432593078456, -7.2376314320078459, -8.6130432593078456, -7.2376314320078459, -6.4499828593078457, -6.4499828593078457, -8.6346033853078463, -7.686669112307845, -6.4174023853078461, -7.9144477123078456, -7.9144477123078456, -7.686669112307845, -6.4174023853078461, -8.3332338623078464, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9941693123078457, -8.3476276123078463, -7.9941693123078457, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -7.9144477123078456, -8.1348389123078455, -7.9144477123078456]
								}]
						}]
				}, {
					"line":	874,
					"switches":	[{
							"switch":	43,
							"types":	[[], [], [], [], [395], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	875,
							"begin_column":	3,
							"end_line":	875,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L875\", 37, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(test), sizeof (test), &(quiet), sizeof (quiet), &(test), sizeof (test), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.154523517672807]
								}, {
									"case":	2,
									"scores":	[-6.154523517672807]
								}, {
									"case":	3,
									"scores":	[-6.154523517672807]
								}, {
									"case":	4,
									"scores":	[-6.154523517672807]
								}, {
									"case":	5,
									"scores":	[-6.154523517672807]
								}, {
									"case":	6,
									"scores":	[-6.154523517672807]
								}, {
									"case":	7,
									"scores":	[-6.154523517672807]
								}, {
									"case":	8,
									"scores":	[-6.154523517672807]
								}, {
									"case":	9,
									"scores":	[-6.154523517672807]
								}, {
									"case":	10,
									"scores":	[-6.154523517672807]
								}, {
									"case":	11,
									"scores":	[-6.154523517672807]
								}, {
									"case":	12,
									"scores":	[-6.154523517672807]
								}, {
									"case":	13,
									"scores":	[-6.154523517672807]
								}, {
									"case":	14,
									"scores":	[-6.154523517672807]
								}, {
									"case":	15,
									"scores":	[-6.154523517672807]
								}, {
									"case":	16,
									"scores":	[-6.154523517672807]
								}, {
									"case":	17,
									"scores":	[-6.154523517672807]
								}, {
									"case":	18,
									"scores":	[-6.154523517672807]
								}, {
									"case":	19,
									"scores":	[-6.154523517672807]
								}, {
									"case":	20,
									"scores":	[-6.154523517672807]
								}, {
									"case":	21,
									"scores":	[-6.154523517672807]
								}, {
									"case":	22,
									"scores":	[-6.154523517672807]
								}, {
									"case":	23,
									"scores":	[-6.154523517672807]
								}, {
									"case":	24,
									"scores":	[-6.154523517672807]
								}, {
									"case":	25,
									"scores":	[-6.154523517672807]
								}, {
									"case":	26,
									"scores":	[-6.154523517672807]
								}, {
									"case":	27,
									"scores":	[-6.154523517672807]
								}, {
									"case":	28,
									"scores":	[-6.154523517672807]
								}, {
									"case":	29,
									"scores":	[-6.154523517672807]
								}, {
									"case":	30,
									"scores":	[-6.154523517672807]
								}, {
									"case":	31,
									"scores":	[-6.154523517672807]
								}, {
									"case":	32,
									"scores":	[-6.154523517672807]
								}, {
									"case":	33,
									"scores":	[-6.154523517672807]
								}, {
									"case":	34,
									"scores":	[-6.154523517672807]
								}, {
									"case":	35,
									"scores":	[-6.154523517672807]
								}, {
									"case":	36,
									"scores":	[-6.154523517672807]
								}, {
									"case":	37,
									"scores":	[-6.154523517672807]
								}, {
									"case":	38,
									"scores":	[-6.154523517672807]
								}, {
									"case":	39,
									"scores":	[-6.154523517672807]
								}, {
									"case":	40,
									"scores":	[-6.154523517672807]
								}, {
									"case":	41,
									"scores":	[-6.154523517672807]
								}, {
									"case":	42,
									"scores":	[-6.154523517672807]
								}, {
									"case":	43,
									"scores":	[-6.154523517672807]
								}, {
									"case":	44,
									"scores":	[-6.154523517672807]
								}, {
									"case":	45,
									"scores":	[-6.154523517672807]
								}, {
									"case":	46,
									"scores":	[-6.154523517672807]
								}, {
									"case":	47,
									"scores":	[-6.154523517672807]
								}, {
									"case":	48,
									"scores":	[-6.154523517672807]
								}, {
									"case":	49,
									"scores":	[-6.154523517672807]
								}, {
									"case":	50,
									"scores":	[-6.154523517672807]
								}, {
									"case":	51,
									"scores":	[-6.154523517672807]
								}, {
									"case":	52,
									"scores":	[-6.154523517672807]
								}, {
									"case":	53,
									"scores":	[-6.154523517672807]
								}, {
									"case":	54,
									"scores":	[-6.154523517672807]
								}, {
									"case":	55,
									"scores":	[-6.154523517672807]
								}, {
									"case":	56,
									"scores":	[-6.154523517672807]
								}, {
									"case":	57,
									"scores":	[-6.154523517672807]
								}, {
									"case":	58,
									"scores":	[-6.154523517672807]
								}, {
									"case":	59,
									"scores":	[-6.154523517672807]
								}, {
									"case":	60,
									"scores":	[-6.154523517672807]
								}, {
									"case":	61,
									"scores":	[-6.154523517672807]
								}, {
									"case":	62,
									"scores":	[-6.154523517672807]
								}, {
									"case":	63,
									"scores":	[-6.154523517672807]
								}, {
									"case":	64,
									"scores":	[-6.154523517672807]
								}, {
									"case":	65,
									"scores":	[-6.154523517672807]
								}, {
									"case":	66,
									"scores":	[-6.154523517672807]
								}, {
									"case":	67,
									"scores":	[-6.154523517672807]
								}, {
									"case":	68,
									"scores":	[-6.154523517672807]
								}, {
									"case":	69,
									"scores":	[-6.154523517672807]
								}, {
									"case":	70,
									"scores":	[-6.154523517672807]
								}, {
									"case":	71,
									"scores":	[-6.154523517672807]
								}, {
									"case":	72,
									"scores":	[-6.154523517672807]
								}, {
									"case":	73,
									"scores":	[-6.154523517672807]
								}, {
									"case":	74,
									"scores":	[-6.154523517672807]
								}, {
									"case":	75,
									"scores":	[-6.154523517672807]
								}, {
									"case":	76,
									"scores":	[-6.154523517672807]
								}, {
									"case":	77,
									"scores":	[-6.154523517672807]
								}, {
									"case":	78,
									"scores":	[-6.154523517672807]
								}, {
									"case":	79,
									"scores":	[-6.154523517672807]
								}, {
									"case":	80,
									"scores":	[-6.154523517672807]
								}, {
									"case":	81,
									"scores":	[-6.154523517672807]
								}, {
									"case":	82,
									"scores":	[-6.154523517672807]
								}, {
									"case":	83,
									"scores":	[-6.154523517672807]
								}, {
									"case":	84,
									"scores":	[-6.154523517672807]
								}, {
									"case":	85,
									"scores":	[-6.154523517672807]
								}, {
									"case":	86,
									"scores":	[-6.154523517672807]
								}, {
									"case":	87,
									"scores":	[-6.154523517672807]
								}, {
									"case":	88,
									"scores":	[-6.154523517672807]
								}, {
									"case":	89,
									"scores":	[-6.154523517672807]
								}, {
									"case":	90,
									"scores":	[-6.154523517672807]
								}, {
									"case":	91,
									"scores":	[-6.154523517672807]
								}, {
									"case":	92,
									"scores":	[-6.154523517672807]
								}, {
									"case":	93,
									"scores":	[-6.154523517672807]
								}, {
									"case":	94,
									"scores":	[-6.154523517672807]
								}, {
									"case":	95,
									"scores":	[-6.154523517672807]
								}, {
									"case":	96,
									"scores":	[-6.154523517672807]
								}, {
									"case":	97,
									"scores":	[-6.154523517672807]
								}, {
									"case":	98,
									"scores":	[-6.154523517672807]
								}, {
									"case":	99,
									"scores":	[-6.154523517672807]
								}, {
									"case":	100,
									"scores":	[-6.154523517672807]
								}, {
									"case":	101,
									"scores":	[-6.154523517672807]
								}, {
									"case":	102,
									"scores":	[-6.154523517672807]
								}, {
									"case":	103,
									"scores":	[-6.154523517672807]
								}, {
									"case":	104,
									"scores":	[-6.154523517672807]
								}, {
									"case":	105,
									"scores":	[-6.154523517672807]
								}, {
									"case":	106,
									"scores":	[-6.154523517672807]
								}, {
									"case":	107,
									"scores":	[-6.154523517672807]
								}, {
									"case":	108,
									"scores":	[-6.154523517672807]
								}, {
									"case":	109,
									"scores":	[-6.154523517672807]
								}, {
									"case":	110,
									"scores":	[-6.154523517672807]
								}, {
									"case":	111,
									"scores":	[-6.154523517672807]
								}, {
									"case":	112,
									"scores":	[-6.154523517672807]
								}, {
									"case":	113,
									"scores":	[-6.154523517672807]
								}, {
									"case":	114,
									"scores":	[-6.154523517672807]
								}, {
									"case":	115,
									"scores":	[-6.154523517672807]
								}, {
									"case":	116,
									"scores":	[-6.154523517672807]
								}, {
									"case":	117,
									"scores":	[-6.154523517672807]
								}, {
									"case":	118,
									"scores":	[-6.154523517672807]
								}, {
									"case":	119,
									"scores":	[-6.154523517672807]
								}, {
									"case":	120,
									"scores":	[-6.154523517672807]
								}, {
									"case":	121,
									"scores":	[-6.154523517672807]
								}, {
									"case":	122,
									"scores":	[-6.154523517672807]
								}, {
									"case":	123,
									"scores":	[-6.154523517672807]
								}, {
									"case":	124,
									"scores":	[-6.154523517672807]
								}, {
									"case":	125,
									"scores":	[-6.154523517672807]
								}, {
									"case":	126,
									"scores":	[-6.154523517672807]
								}, {
									"case":	127,
									"scores":	[-6.154523517672807]
								}, {
									"case":	128,
									"scores":	[-6.154523517672807]
								}, {
									"case":	129,
									"scores":	[-6.154523517672807]
								}, {
									"case":	130,
									"scores":	[-6.154523517672807]
								}, {
									"case":	131,
									"scores":	[-6.154523517672807]
								}, {
									"case":	132,
									"scores":	[-6.154523517672807]
								}, {
									"case":	133,
									"scores":	[-6.154523517672807]
								}, {
									"case":	134,
									"scores":	[-6.154523517672807]
								}, {
									"case":	135,
									"scores":	[-6.154523517672807]
								}, {
									"case":	136,
									"scores":	[-6.154523517672807]
								}, {
									"case":	137,
									"scores":	[-6.154523517672807]
								}, {
									"case":	138,
									"scores":	[-6.154523517672807]
								}, {
									"case":	139,
									"scores":	[-6.154523517672807]
								}, {
									"case":	140,
									"scores":	[-6.154523517672807]
								}, {
									"case":	141,
									"scores":	[-6.154523517672807]
								}, {
									"case":	142,
									"scores":	[-6.154523517672807]
								}, {
									"case":	143,
									"scores":	[-6.154523517672807]
								}, {
									"case":	144,
									"scores":	[-6.154523517672807]
								}, {
									"case":	145,
									"scores":	[-6.154523517672807]
								}, {
									"case":	146,
									"scores":	[-6.154523517672807]
								}, {
									"case":	147,
									"scores":	[-6.154523517672807]
								}, {
									"case":	148,
									"scores":	[-6.154523517672807]
								}, {
									"case":	149,
									"scores":	[-6.154523517672807]
								}, {
									"case":	150,
									"scores":	[-6.154523517672807]
								}, {
									"case":	151,
									"scores":	[-6.154523517672807]
								}, {
									"case":	152,
									"scores":	[-6.154523517672807]
								}, {
									"case":	153,
									"scores":	[-6.154523517672807]
								}, {
									"case":	154,
									"scores":	[-6.154523517672807]
								}, {
									"case":	155,
									"scores":	[-6.154523517672807]
								}, {
									"case":	156,
									"scores":	[-6.154523517672807]
								}, {
									"case":	157,
									"scores":	[-6.154523517672807]
								}, {
									"case":	158,
									"scores":	[-6.154523517672807]
								}, {
									"case":	159,
									"scores":	[-6.154523517672807]
								}, {
									"case":	160,
									"scores":	[-6.154523517672807]
								}, {
									"case":	161,
									"scores":	[-6.154523517672807]
								}, {
									"case":	162,
									"scores":	[-6.154523517672807]
								}, {
									"case":	163,
									"scores":	[-6.154523517672807]
								}, {
									"case":	164,
									"scores":	[-6.154523517672807]
								}, {
									"case":	165,
									"scores":	[-6.154523517672807]
								}, {
									"case":	166,
									"scores":	[-6.154523517672807]
								}, {
									"case":	167,
									"scores":	[-6.154523517672807]
								}, {
									"case":	168,
									"scores":	[-6.154523517672807]
								}, {
									"case":	169,
									"scores":	[-6.154523517672807]
								}, {
									"case":	170,
									"scores":	[-6.154523517672807]
								}, {
									"case":	171,
									"scores":	[-6.154523517672807]
								}, {
									"case":	172,
									"scores":	[-6.154523517672807]
								}, {
									"case":	173,
									"scores":	[-6.154523517672807]
								}, {
									"case":	174,
									"scores":	[-6.154523517672807]
								}, {
									"case":	175,
									"scores":	[-6.154523517672807]
								}, {
									"case":	176,
									"scores":	[-6.154523517672807]
								}, {
									"case":	177,
									"scores":	[-6.154523517672807]
								}, {
									"case":	178,
									"scores":	[-6.154523517672807]
								}, {
									"case":	179,
									"scores":	[-6.154523517672807]
								}, {
									"case":	180,
									"scores":	[-6.154523517672807]
								}, {
									"case":	181,
									"scores":	[-6.154523517672807]
								}, {
									"case":	182,
									"scores":	[-6.154523517672807]
								}, {
									"case":	183,
									"scores":	[-6.154523517672807]
								}, {
									"case":	184,
									"scores":	[-6.154523517672807]
								}, {
									"case":	185,
									"scores":	[-6.154523517672807]
								}, {
									"case":	186,
									"scores":	[-6.154523517672807]
								}, {
									"case":	187,
									"scores":	[-6.154523517672807]
								}, {
									"case":	188,
									"scores":	[-6.154523517672807]
								}, {
									"case":	189,
									"scores":	[-6.154523517672807]
								}, {
									"case":	190,
									"scores":	[-6.154523517672807]
								}, {
									"case":	191,
									"scores":	[-6.154523517672807]
								}, {
									"case":	192,
									"scores":	[-6.154523517672807]
								}, {
									"case":	193,
									"scores":	[-6.154523517672807]
								}, {
									"case":	194,
									"scores":	[-6.154523517672807]
								}, {
									"case":	195,
									"scores":	[-6.154523517672807]
								}, {
									"case":	196,
									"scores":	[-6.154523517672807]
								}, {
									"case":	197,
									"scores":	[-6.154523517672807]
								}, {
									"case":	198,
									"scores":	[-6.154523517672807]
								}, {
									"case":	199,
									"scores":	[-6.154523517672807]
								}, {
									"case":	200,
									"scores":	[-6.154523517672807]
								}, {
									"case":	201,
									"scores":	[-6.154523517672807]
								}, {
									"case":	202,
									"scores":	[-6.154523517672807]
								}, {
									"case":	203,
									"scores":	[-6.154523517672807]
								}, {
									"case":	204,
									"scores":	[-6.154523517672807]
								}, {
									"case":	205,
									"scores":	[-6.154523517672807]
								}, {
									"case":	206,
									"scores":	[-6.154523517672807]
								}, {
									"case":	207,
									"scores":	[-6.154523517672807]
								}, {
									"case":	208,
									"scores":	[-6.154523517672807]
								}, {
									"case":	209,
									"scores":	[-6.154523517672807]
								}, {
									"case":	210,
									"scores":	[-6.154523517672807]
								}, {
									"case":	211,
									"scores":	[-6.154523517672807]
								}, {
									"case":	212,
									"scores":	[-6.154523517672807]
								}, {
									"case":	213,
									"scores":	[-6.154523517672807]
								}, {
									"case":	214,
									"scores":	[-6.154523517672807]
								}, {
									"case":	215,
									"scores":	[-6.154523517672807]
								}, {
									"case":	216,
									"scores":	[-6.154523517672807]
								}, {
									"case":	217,
									"scores":	[-6.154523517672807]
								}, {
									"case":	218,
									"scores":	[-6.154523517672807]
								}, {
									"case":	219,
									"scores":	[-6.154523517672807]
								}, {
									"case":	220,
									"scores":	[-6.154523517672807]
								}, {
									"case":	221,
									"scores":	[-6.154523517672807]
								}, {
									"case":	222,
									"scores":	[-6.154523517672807]
								}, {
									"case":	223,
									"scores":	[-6.154523517672807]
								}, {
									"case":	224,
									"scores":	[-6.154523517672807]
								}, {
									"case":	225,
									"scores":	[-6.154523517672807]
								}, {
									"case":	226,
									"scores":	[-6.154523517672807]
								}, {
									"case":	227,
									"scores":	[-6.154523517672807]
								}, {
									"case":	228,
									"scores":	[-6.154523517672807]
								}, {
									"case":	229,
									"scores":	[-6.154523517672807]
								}, {
									"case":	230,
									"scores":	[-6.154523517672807]
								}, {
									"case":	231,
									"scores":	[-6.154523517672807]
								}, {
									"case":	232,
									"scores":	[-6.154523517672807]
								}, {
									"case":	233,
									"scores":	[-6.154523517672807]
								}, {
									"case":	234,
									"scores":	[-6.154523517672807]
								}, {
									"case":	235,
									"scores":	[-6.154523517672807]
								}, {
									"case":	236,
									"scores":	[-6.154523517672807]
								}, {
									"case":	237,
									"scores":	[-6.154523517672807]
								}, {
									"case":	238,
									"scores":	[-6.154523517672807]
								}, {
									"case":	239,
									"scores":	[-6.154523517672807]
								}, {
									"case":	240,
									"scores":	[-6.154523517672807]
								}, {
									"case":	241,
									"scores":	[-6.154523517672807]
								}, {
									"case":	242,
									"scores":	[-6.154523517672807]
								}, {
									"case":	243,
									"scores":	[-6.154523517672807]
								}, {
									"case":	244,
									"scores":	[-6.154523517672807]
								}, {
									"case":	245,
									"scores":	[-6.154523517672807]
								}, {
									"case":	246,
									"scores":	[-6.154523517672807]
								}, {
									"case":	247,
									"scores":	[-6.154523517672807]
								}, {
									"case":	248,
									"scores":	[-6.154523517672807]
								}, {
									"case":	249,
									"scores":	[-6.154523517672807]
								}, {
									"case":	250,
									"scores":	[-6.154523517672807]
								}, {
									"case":	251,
									"scores":	[-6.154523517672807]
								}, {
									"case":	252,
									"scores":	[-6.154523517672807]
								}, {
									"case":	253,
									"scores":	[-6.154523517672807]
								}, {
									"case":	254,
									"scores":	[-6.154523517672807]
								}, {
									"case":	255,
									"scores":	[-6.154523517672807]
								}, {
									"case":	256,
									"scores":	[-6.154523517672807]
								}, {
									"case":	257,
									"scores":	[-6.154523517672807]
								}, {
									"case":	258,
									"scores":	[-6.154523517672807]
								}, {
									"case":	259,
									"scores":	[-6.154523517672807]
								}, {
									"case":	260,
									"scores":	[-6.154523517672807]
								}, {
									"case":	261,
									"scores":	[-6.154523517672807]
								}, {
									"case":	262,
									"scores":	[-6.154523517672807]
								}, {
									"case":	263,
									"scores":	[-6.154523517672807]
								}, {
									"case":	264,
									"scores":	[-6.154523517672807]
								}, {
									"case":	265,
									"scores":	[-6.154523517672807]
								}, {
									"case":	266,
									"scores":	[-6.154523517672807]
								}, {
									"case":	267,
									"scores":	[-6.154523517672807]
								}, {
									"case":	268,
									"scores":	[-6.154523517672807]
								}, {
									"case":	269,
									"scores":	[-6.154523517672807]
								}, {
									"case":	270,
									"scores":	[-6.154523517672807]
								}, {
									"case":	271,
									"scores":	[-6.154523517672807]
								}, {
									"case":	272,
									"scores":	[-6.154523517672807]
								}, {
									"case":	273,
									"scores":	[-6.154523517672807]
								}, {
									"case":	274,
									"scores":	[-6.154523517672807]
								}, {
									"case":	275,
									"scores":	[-6.154523517672807]
								}, {
									"case":	276,
									"scores":	[-6.154523517672807]
								}, {
									"case":	277,
									"scores":	[-6.154523517672807]
								}, {
									"case":	278,
									"scores":	[-6.154523517672807]
								}, {
									"case":	279,
									"scores":	[-6.154523517672807]
								}, {
									"case":	280,
									"scores":	[-6.154523517672807]
								}, {
									"case":	281,
									"scores":	[-6.154523517672807]
								}, {
									"case":	282,
									"scores":	[-6.154523517672807]
								}, {
									"case":	283,
									"scores":	[-6.154523517672807]
								}, {
									"case":	284,
									"scores":	[-6.154523517672807]
								}, {
									"case":	285,
									"scores":	[-6.154523517672807]
								}, {
									"case":	286,
									"scores":	[-6.154523517672807]
								}, {
									"case":	287,
									"scores":	[-6.154523517672807]
								}, {
									"case":	288,
									"scores":	[-6.154523517672807]
								}, {
									"case":	289,
									"scores":	[-6.154523517672807]
								}, {
									"case":	290,
									"scores":	[-6.154523517672807]
								}, {
									"case":	291,
									"scores":	[-6.154523517672807]
								}, {
									"case":	292,
									"scores":	[-6.154523517672807]
								}, {
									"case":	293,
									"scores":	[-6.154523517672807]
								}, {
									"case":	294,
									"scores":	[-6.154523517672807]
								}, {
									"case":	295,
									"scores":	[-6.154523517672807]
								}, {
									"case":	296,
									"scores":	[-6.154523517672807]
								}, {
									"case":	297,
									"scores":	[-6.154523517672807]
								}, {
									"case":	298,
									"scores":	[-6.154523517672807]
								}, {
									"case":	299,
									"scores":	[-6.154523517672807]
								}, {
									"case":	300,
									"scores":	[-6.154523517672807]
								}, {
									"case":	301,
									"scores":	[-6.154523517672807]
								}, {
									"case":	302,
									"scores":	[-6.154523517672807]
								}, {
									"case":	303,
									"scores":	[-6.154523517672807]
								}, {
									"case":	304,
									"scores":	[-6.154523517672807]
								}, {
									"case":	305,
									"scores":	[-6.154523517672807]
								}, {
									"case":	306,
									"scores":	[-6.154523517672807]
								}, {
									"case":	307,
									"scores":	[-6.154523517672807]
								}, {
									"case":	308,
									"scores":	[-6.154523517672807]
								}, {
									"case":	309,
									"scores":	[-6.154523517672807]
								}, {
									"case":	310,
									"scores":	[-6.154523517672807]
								}, {
									"case":	311,
									"scores":	[-6.154523517672807]
								}, {
									"case":	312,
									"scores":	[-6.154523517672807]
								}, {
									"case":	313,
									"scores":	[-6.154523517672807]
								}, {
									"case":	314,
									"scores":	[-6.154523517672807]
								}, {
									"case":	315,
									"scores":	[-6.154523517672807]
								}, {
									"case":	316,
									"scores":	[-6.154523517672807]
								}, {
									"case":	317,
									"scores":	[-6.154523517672807]
								}, {
									"case":	318,
									"scores":	[-6.154523517672807]
								}, {
									"case":	319,
									"scores":	[-6.154523517672807]
								}, {
									"case":	320,
									"scores":	[-6.154523517672807]
								}, {
									"case":	321,
									"scores":	[-6.154523517672807]
								}, {
									"case":	322,
									"scores":	[-6.154523517672807]
								}, {
									"case":	323,
									"scores":	[-6.154523517672807]
								}, {
									"case":	324,
									"scores":	[-6.154523517672807]
								}, {
									"case":	325,
									"scores":	[-6.154523517672807]
								}, {
									"case":	326,
									"scores":	[-6.154523517672807]
								}, {
									"case":	327,
									"scores":	[-6.154523517672807]
								}, {
									"case":	328,
									"scores":	[-6.154523517672807]
								}, {
									"case":	329,
									"scores":	[-6.154523517672807]
								}, {
									"case":	330,
									"scores":	[-6.154523517672807]
								}, {
									"case":	331,
									"scores":	[-6.154523517672807]
								}, {
									"case":	332,
									"scores":	[-6.154523517672807]
								}, {
									"case":	333,
									"scores":	[-6.154523517672807]
								}, {
									"case":	334,
									"scores":	[-6.154523517672807]
								}, {
									"case":	335,
									"scores":	[-6.154523517672807]
								}, {
									"case":	336,
									"scores":	[-6.154523517672807]
								}, {
									"case":	337,
									"scores":	[-6.154523517672807]
								}, {
									"case":	338,
									"scores":	[-6.154523517672807]
								}, {
									"case":	339,
									"scores":	[-6.154523517672807]
								}, {
									"case":	340,
									"scores":	[-6.154523517672807]
								}, {
									"case":	341,
									"scores":	[-6.154523517672807]
								}, {
									"case":	342,
									"scores":	[-6.154523517672807]
								}, {
									"case":	343,
									"scores":	[-6.154523517672807]
								}, {
									"case":	344,
									"scores":	[-6.154523517672807]
								}, {
									"case":	345,
									"scores":	[-6.154523517672807]
								}, {
									"case":	346,
									"scores":	[-6.154523517672807]
								}, {
									"case":	347,
									"scores":	[-6.154523517672807]
								}, {
									"case":	348,
									"scores":	[-6.154523517672807]
								}, {
									"case":	349,
									"scores":	[-6.154523517672807]
								}, {
									"case":	350,
									"scores":	[-6.154523517672807]
								}, {
									"case":	351,
									"scores":	[-6.154523517672807]
								}, {
									"case":	352,
									"scores":	[-6.154523517672807]
								}, {
									"case":	353,
									"scores":	[-6.154523517672807]
								}, {
									"case":	354,
									"scores":	[-6.154523517672807]
								}, {
									"case":	355,
									"scores":	[-6.154523517672807]
								}, {
									"case":	356,
									"scores":	[-6.154523517672807]
								}, {
									"case":	357,
									"scores":	[-6.154523517672807]
								}, {
									"case":	358,
									"scores":	[-6.154523517672807]
								}, {
									"case":	359,
									"scores":	[-6.154523517672807]
								}, {
									"case":	360,
									"scores":	[-6.154523517672807]
								}, {
									"case":	361,
									"scores":	[-6.154523517672807]
								}, {
									"case":	362,
									"scores":	[-6.154523517672807]
								}, {
									"case":	363,
									"scores":	[-6.154523517672807]
								}, {
									"case":	364,
									"scores":	[-6.154523517672807]
								}, {
									"case":	365,
									"scores":	[-6.154523517672807]
								}, {
									"case":	366,
									"scores":	[-6.154523517672807]
								}, {
									"case":	367,
									"scores":	[-6.154523517672807]
								}, {
									"case":	368,
									"scores":	[-6.154523517672807]
								}, {
									"case":	369,
									"scores":	[-6.154523517672807]
								}, {
									"case":	370,
									"scores":	[-6.154523517672807]
								}, {
									"case":	371,
									"scores":	[-6.154523517672807]
								}, {
									"case":	372,
									"scores":	[-6.154523517672807]
								}, {
									"case":	373,
									"scores":	[-6.154523517672807]
								}, {
									"case":	374,
									"scores":	[-6.154523517672807]
								}, {
									"case":	375,
									"scores":	[-6.154523517672807]
								}, {
									"case":	376,
									"scores":	[-6.154523517672807]
								}, {
									"case":	377,
									"scores":	[-6.154523517672807]
								}, {
									"case":	378,
									"scores":	[-6.154523517672807]
								}, {
									"case":	379,
									"scores":	[-6.154523517672807]
								}, {
									"case":	380,
									"scores":	[-6.154523517672807]
								}, {
									"case":	381,
									"scores":	[-6.154523517672807]
								}, {
									"case":	382,
									"scores":	[-6.154523517672807]
								}, {
									"case":	383,
									"scores":	[-6.154523517672807]
								}, {
									"case":	384,
									"scores":	[-6.154523517672807]
								}, {
									"case":	385,
									"scores":	[-6.154523517672807]
								}, {
									"case":	386,
									"scores":	[-6.154523517672807]
								}, {
									"case":	387,
									"scores":	[-6.154523517672807]
								}, {
									"case":	388,
									"scores":	[-6.154523517672807]
								}, {
									"case":	389,
									"scores":	[-6.154523517672807]
								}, {
									"case":	390,
									"scores":	[-6.154523517672807]
								}, {
									"case":	391,
									"scores":	[-6.154523517672807]
								}, {
									"case":	392,
									"scores":	[-6.154523517672807]
								}, {
									"case":	393,
									"scores":	[-6.154523517672807]
								}, {
									"case":	394,
									"scores":	[-6.154523517672807]
								}, {
									"case":	395,
									"scores":	[-7.9939110207728064, -7.9939110207728064, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.9794087904728066, -8.16124219897281, -9.9794087904728066, -8.16124219897281, -9.6994231207728063, -9.5411803207728063, -8.14179680877281, -9.9436873207728063, -9.5411803207728063, -8.14179680877281, -8.1606449207728069, -9.8899860904728065, -9.8899860904728065, -9.5070850904728061, -9.5070850904728061, -10.254669920772807, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.6994231207728063, -9.47315405767281, -9.6994231207728063]
								}]
						}, {
							"switch":	44,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	875,
							"begin_column":	5,
							"end_line":	879,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L875\", 37, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(test), sizeof (test), &(quiet), sizeof (quiet), &(test), sizeof (test), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    if (!to_stdout)\n        remove_output_file();\n    return;\n}\n", "if ((method == -1) || __is_neg(\"\", \"L875\", 37, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(test), sizeof (test), &(quiet), sizeof (quiet), &(test), sizeof (test), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    if (!to_stdout)\n        remove_output_file();\n    return;\n}\n", "if ((method == -1) && !__is_neg(\"\", \"L875\", 37, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(test), sizeof (test), &(quiet), sizeof (quiet), &(test), sizeof (test), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    if (!to_stdout)\n        remove_output_file();\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.5760925424281456, -1.5760925424281456, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.4750407151281459, -4.4719240184281466, -4.4750407151281459, -4.4719240184281466, -4.0501483954281463, -3.2505836954281464, -3.8694576424281459, -3.4004545954281458, -3.2505836954281464, -3.8694576424281459, -4.4707965424281459, -4.0380757151281461, -4.0380757151281461, -3.8226460151281461, -3.8226460151281461, -4.4689345454281462, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.0501483954281463, -4.2705395954281462, -4.0501483954281463]
								}, {
									"case":	2,
									"scores":	[-0.89327392962814534, -0.89327392962814534, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.7922221023281457, -3.7891054056281459, -3.7922221023281457, -3.7891054056281459, -3.3673297826281461, -2.5677650826281457, -3.1866390296281457, -2.7176359826281447, -2.5677650826281457, -3.1866390296281457, -3.7879779296281457, -3.3552571023281459, -3.3552571023281459, -3.1398274023281458, -3.1398274023281458, -3.7861159326281459, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.587720982628146, -3.3673297826281461]
								}, {
									"case":	3,
									"scores":	[-0.89327392962814534, -0.89327392962814534, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.7922221023281457, -3.7891054056281459, -3.7922221023281457, -3.7891054056281459, -3.3673297826281461, -2.5677650826281457, -3.1866390296281457, -2.7176359826281447, -2.5677650826281457, -3.1866390296281457, -3.7879779296281457, -3.3552571023281459, -3.3552571023281459, -3.1398274023281458, -3.1398274023281458, -3.7861159326281459, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.3673297826281461, -3.587720982628146, -3.3673297826281461]
								}]
						}, {
							"switch":	45,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	875,
							"begin_column":	5,
							"end_line":	879,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L875\", 37, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(test), sizeof (test), &(quiet), sizeof (quiet), &(test), sizeof (test), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    if (method == -1) {\n        if (!to_stdout)\n            remove_output_file();\n        return;\n    }\n", "if (!__is_neg(\"\", \"L875\", 37, &(method), sizeof (method), &(method), sizeof (method), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(test), sizeof (test), &(quiet), sizeof (quiet), &(test), sizeof (test), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)) && (method == -1)) {\n    if (!to_stdout)\n        remove_output_file();\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5902099446728073, -5.5902099446728073, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.4891581173728063, -8.486041420672807, -8.4891581173728063, -8.486041420672807, -8.0642657976728067, -7.2647010976728073, -7.8835750446728072, -7.4145719976728071, -7.2647010976728073, -7.8835750446728072, -8.4849139446728064, -8.05219311737281, -8.05219311737281, -7.8367634173728069, -7.8367634173728069, -8.48305194767281, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.0642657976728067, -8.2846569976728066, -8.0642657976728067]
								}, {
									"case":	2,
									"scores":	[-4.6544762248728064, -4.6544762248728064, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.5534243975728064, -7.550307700872807, -7.5534243975728064, -7.550307700872807, -7.1285320778728067, -6.3289673778728073, -6.9478413248728073, -6.4788382778728071, -6.3289673778728073, -6.9478413248728073, -7.5491802248728064, -7.1164593975728065, -7.1164593975728065, -6.9010296975728069, -6.9010296975728069, -7.5473182278728066, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.1285320778728067, -7.3489232778728066, -7.1285320778728067]
								}]
						}]
				}, {
					"line":	881,
					"switches":	[{
							"switch":	46,
							"types":	[[], [], [], [], [395], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [], [], []],
							"begin_line":	882,
							"begin_column":	3,
							"end_line":	882,
							"end_column":	3,
							"patch_codes":	["memset(&istat.__glibc_reserved, 0, sizeof (*(&istat.__glibc_reserved)))", "memset(&istat.__pad0, 0, sizeof (*(&istat.__pad0)))", "memset(&istat.st_atim, 0, sizeof (*(&istat.st_atim)))", "memset(&istat.st_blksize, 0, sizeof (*(&istat.st_blksize)))", "memset(&istat.st_blocks, 0, sizeof (*(&istat.st_blocks)))", "memset(&istat.st_ctim, 0, sizeof (*(&istat.st_ctim)))", "memset(&istat.st_dev, 0, sizeof (*(&istat.st_dev)))", "memset(&istat.st_gid, 0, sizeof (*(&istat.st_gid)))", "memset(&istat.st_ino, 0, sizeof (*(&istat.st_ino)))", "memset(&istat.st_mode, 0, sizeof (*(&istat.st_mode)))", "memset(&istat.st_mtim, 0, sizeof (*(&istat.st_mtim)))", "memset(&istat.st_nlink, 0, sizeof (*(&istat.st_nlink)))", "memset(&istat.st_rdev, 0, sizeof (*(&istat.st_rdev)))", "memset(&istat.st_size, 0, sizeof (*(&istat.st_size)))", "memset(&istat.st_uid, 0, sizeof (*(&istat.st_uid)))", "memset(&time_stamp.tv_nsec, 0, sizeof (*(&time_stamp.tv_nsec)))", "memset(&time_stamp.tv_sec, 0, sizeof (*(&time_stamp.tv_sec)))", "(iname)++", "(iname)--", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (1024)", "bytes_in = (16384)", "bytes_in = (2)", "bytes_in = (2048)", "bytes_in = (32768)", "bytes_in = (512)", "bytes_in = (61440)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (1024)", "bytes_out = (16384)", "bytes_out = (2)", "bytes_out = (2048)", "bytes_out = (32768)", "bytes_out = (512)", "bytes_out = (61440)", "env = (iname)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (1024)", "exit_code = (16384)", "exit_code = (2)", "exit_code = (2048)", "exit_code = (32768)", "exit_code = (512)", "exit_code = (61440)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (1024)", "exiting_signal = (16384)", "exiting_signal = (2)", "exiting_signal = (2048)", "exiting_signal = (32768)", "exiting_signal = (512)", "exiting_signal = (61440)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (1024)", "foreground = (16384)", "foreground = (2)", "foreground = (2048)", "foreground = (32768)", "foreground = (512)", "foreground = (61440)", "free((iname))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (1024)", "header_bytes = (16384)", "header_bytes = (2)", "header_bytes = (2048)", "header_bytes = (32768)", "header_bytes = (512)", "header_bytes = (61440)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (1024)", "ifd = (16384)", "ifd = (2)", "ifd = (2048)", "ifd = (32768)", "ifd = (512)", "ifd = (61440)", "ifd = open_input_file((iname), &istat)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (1024)", "ifile_size = (16384)", "ifile_size = (2)", "ifile_size = (2048)", "ifile_size = (32768)", "ifile_size = (512)", "ifile_size = (61440)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (1024)", "inptr = (16384)", "inptr = (2)", "inptr = (2048)", "inptr = (32768)", "inptr = (512)", "inptr = (61440)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (1024)", "last_member = (16384)", "last_member = (2)", "last_member = (2048)", "last_member = (32768)", "last_member = (512)", "last_member = (61440)", "list = (-1)", "list = (0)", "list = (1)", "list = (1024)", "list = (16384)", "list = (2)", "list = (2048)", "list = (32768)", "list = (512)", "list = (61440)", "method = (-1)", "method = (0)", "method = (1)", "method = (1024)", "method = (16384)", "method = (2)", "method = (2048)", "method = (32768)", "method = (512)", "method = (61440)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (1024)", "no_name = (16384)", "no_name = (2)", "no_name = (2048)", "no_name = (32768)", "no_name = (512)", "no_name = (61440)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (1024)", "no_time = (16384)", "no_time = (2)", "no_time = (2048)", "no_time = (32768)", "no_time = (512)", "no_time = (61440)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (1024)", "ofd = (16384)", "ofd = (2)", "ofd = (2048)", "ofd = (32768)", "ofd = (512)", "ofd = (61440)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (1024)", "part_nb = (16384)", "part_nb = (2)", "part_nb = (2048)", "part_nb = (32768)", "part_nb = (512)", "part_nb = (61440)", "perror((iname))", "printf(\"%s %s\\n\", (iname), \"1.0\")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", (iname))", "progerror((iname))", "program_name = (iname)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (1024)", "quiet = (16384)", "quiet = (2)", "quiet = (2048)", "quiet = (32768)", "quiet = (512)", "quiet = (61440)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (1024)", "remove_ofname_fd = (16384)", "remove_ofname_fd = (2)", "remove_ofname_fd = (2048)", "remove_ofname_fd = (32768)", "remove_ofname_fd = (512)", "remove_ofname_fd = (61440)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (1024)", "save_orig_name = (16384)", "save_orig_name = (2)", "save_orig_name = (2048)", "save_orig_name = (32768)", "save_orig_name = (512)", "save_orig_name = (61440)", "strcat(ifname, (iname))", "strcat(ofname, (iname))", "strcpy((iname) - 4, \".tgz\")", "strcpy((iname), \".tar\")", "strcpy((iname), z_suffix)", "strcpy(ifname, (iname))", "strlwr((iname))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (1024)", "time_stamp.tv_nsec = (16384)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (2048)", "time_stamp.tv_nsec = (32768)", "time_stamp.tv_nsec = (512)", "time_stamp.tv_nsec = (61440)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (1024)", "time_stamp.tv_sec = (16384)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (2048)", "time_stamp.tv_sec = (32768)", "time_stamp.tv_sec = (512)", "time_stamp.tv_sec = (61440)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (1024)", "to_stdout = (16384)", "to_stdout = (2)", "to_stdout = (2048)", "to_stdout = (32768)", "to_stdout = (512)", "to_stdout = (61440)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (1024)", "total_in = (16384)", "total_in = (2)", "total_in = (2048)", "total_in = (32768)", "total_in = (512)", "total_in = (61440)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (1024)", "total_out = (16384)", "total_out = (2)", "total_out = (2048)", "total_out = (32768)", "total_out = (512)", "total_out = (61440)", "treat_dir(ifd, (iname))", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (1024)", "verbose = (16384)", "verbose = (2)", "verbose = (2048)", "verbose = (32768)", "verbose = (512)", "verbose = (61440)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (1024)", "z_len = (16384)", "z_len = (2)", "z_len = (2048)", "z_len = (32768)", "z_len = (512)", "z_len = (61440)", "z_len = strlen((iname))", "z_suffix = (iname)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifd = open_input_file(iname, &istat)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_dir(ifd, iname)", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L882\", 37, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.114118103037768]
								}, {
									"case":	2,
									"scores":	[-6.114118103037768]
								}, {
									"case":	3,
									"scores":	[-6.114118103037768]
								}, {
									"case":	4,
									"scores":	[-6.114118103037768]
								}, {
									"case":	5,
									"scores":	[-6.114118103037768]
								}, {
									"case":	6,
									"scores":	[-6.114118103037768]
								}, {
									"case":	7,
									"scores":	[-6.114118103037768]
								}, {
									"case":	8,
									"scores":	[-6.114118103037768]
								}, {
									"case":	9,
									"scores":	[-6.114118103037768]
								}, {
									"case":	10,
									"scores":	[-6.114118103037768]
								}, {
									"case":	11,
									"scores":	[-6.114118103037768]
								}, {
									"case":	12,
									"scores":	[-6.114118103037768]
								}, {
									"case":	13,
									"scores":	[-6.114118103037768]
								}, {
									"case":	14,
									"scores":	[-6.114118103037768]
								}, {
									"case":	15,
									"scores":	[-6.114118103037768]
								}, {
									"case":	16,
									"scores":	[-6.114118103037768]
								}, {
									"case":	17,
									"scores":	[-6.114118103037768]
								}, {
									"case":	18,
									"scores":	[-6.114118103037768]
								}, {
									"case":	19,
									"scores":	[-6.114118103037768]
								}, {
									"case":	20,
									"scores":	[-6.114118103037768]
								}, {
									"case":	21,
									"scores":	[-6.114118103037768]
								}, {
									"case":	22,
									"scores":	[-6.114118103037768]
								}, {
									"case":	23,
									"scores":	[-6.114118103037768]
								}, {
									"case":	24,
									"scores":	[-6.114118103037768]
								}, {
									"case":	25,
									"scores":	[-6.114118103037768]
								}, {
									"case":	26,
									"scores":	[-6.114118103037768]
								}, {
									"case":	27,
									"scores":	[-6.114118103037768]
								}, {
									"case":	28,
									"scores":	[-6.114118103037768]
								}, {
									"case":	29,
									"scores":	[-6.114118103037768]
								}, {
									"case":	30,
									"scores":	[-6.114118103037768]
								}, {
									"case":	31,
									"scores":	[-6.114118103037768]
								}, {
									"case":	32,
									"scores":	[-6.114118103037768]
								}, {
									"case":	33,
									"scores":	[-6.114118103037768]
								}, {
									"case":	34,
									"scores":	[-6.114118103037768]
								}, {
									"case":	35,
									"scores":	[-6.114118103037768]
								}, {
									"case":	36,
									"scores":	[-6.114118103037768]
								}, {
									"case":	37,
									"scores":	[-6.114118103037768]
								}, {
									"case":	38,
									"scores":	[-6.114118103037768]
								}, {
									"case":	39,
									"scores":	[-6.114118103037768]
								}, {
									"case":	40,
									"scores":	[-6.114118103037768]
								}, {
									"case":	41,
									"scores":	[-6.114118103037768]
								}, {
									"case":	42,
									"scores":	[-6.114118103037768]
								}, {
									"case":	43,
									"scores":	[-6.114118103037768]
								}, {
									"case":	44,
									"scores":	[-6.114118103037768]
								}, {
									"case":	45,
									"scores":	[-6.114118103037768]
								}, {
									"case":	46,
									"scores":	[-6.114118103037768]
								}, {
									"case":	47,
									"scores":	[-6.114118103037768]
								}, {
									"case":	48,
									"scores":	[-6.114118103037768]
								}, {
									"case":	49,
									"scores":	[-6.114118103037768]
								}, {
									"case":	50,
									"scores":	[-6.114118103037768]
								}, {
									"case":	51,
									"scores":	[-6.114118103037768]
								}, {
									"case":	52,
									"scores":	[-6.114118103037768]
								}, {
									"case":	53,
									"scores":	[-6.114118103037768]
								}, {
									"case":	54,
									"scores":	[-6.114118103037768]
								}, {
									"case":	55,
									"scores":	[-6.114118103037768]
								}, {
									"case":	56,
									"scores":	[-6.114118103037768]
								}, {
									"case":	57,
									"scores":	[-6.114118103037768]
								}, {
									"case":	58,
									"scores":	[-6.114118103037768]
								}, {
									"case":	59,
									"scores":	[-6.114118103037768]
								}, {
									"case":	60,
									"scores":	[-6.114118103037768]
								}, {
									"case":	61,
									"scores":	[-6.114118103037768]
								}, {
									"case":	62,
									"scores":	[-6.114118103037768]
								}, {
									"case":	63,
									"scores":	[-6.114118103037768]
								}, {
									"case":	64,
									"scores":	[-6.114118103037768]
								}, {
									"case":	65,
									"scores":	[-6.114118103037768]
								}, {
									"case":	66,
									"scores":	[-6.114118103037768]
								}, {
									"case":	67,
									"scores":	[-6.114118103037768]
								}, {
									"case":	68,
									"scores":	[-6.114118103037768]
								}, {
									"case":	69,
									"scores":	[-6.114118103037768]
								}, {
									"case":	70,
									"scores":	[-6.114118103037768]
								}, {
									"case":	71,
									"scores":	[-6.114118103037768]
								}, {
									"case":	72,
									"scores":	[-6.114118103037768]
								}, {
									"case":	73,
									"scores":	[-6.114118103037768]
								}, {
									"case":	74,
									"scores":	[-6.114118103037768]
								}, {
									"case":	75,
									"scores":	[-6.114118103037768]
								}, {
									"case":	76,
									"scores":	[-6.114118103037768]
								}, {
									"case":	77,
									"scores":	[-6.114118103037768]
								}, {
									"case":	78,
									"scores":	[-6.114118103037768]
								}, {
									"case":	79,
									"scores":	[-6.114118103037768]
								}, {
									"case":	80,
									"scores":	[-6.114118103037768]
								}, {
									"case":	81,
									"scores":	[-6.114118103037768]
								}, {
									"case":	82,
									"scores":	[-6.114118103037768]
								}, {
									"case":	83,
									"scores":	[-6.114118103037768]
								}, {
									"case":	84,
									"scores":	[-6.114118103037768]
								}, {
									"case":	85,
									"scores":	[-6.114118103037768]
								}, {
									"case":	86,
									"scores":	[-6.114118103037768]
								}, {
									"case":	87,
									"scores":	[-6.114118103037768]
								}, {
									"case":	88,
									"scores":	[-6.114118103037768]
								}, {
									"case":	89,
									"scores":	[-6.114118103037768]
								}, {
									"case":	90,
									"scores":	[-6.114118103037768]
								}, {
									"case":	91,
									"scores":	[-6.114118103037768]
								}, {
									"case":	92,
									"scores":	[-6.114118103037768]
								}, {
									"case":	93,
									"scores":	[-6.114118103037768]
								}, {
									"case":	94,
									"scores":	[-6.114118103037768]
								}, {
									"case":	95,
									"scores":	[-6.114118103037768]
								}, {
									"case":	96,
									"scores":	[-6.114118103037768]
								}, {
									"case":	97,
									"scores":	[-6.114118103037768]
								}, {
									"case":	98,
									"scores":	[-6.114118103037768]
								}, {
									"case":	99,
									"scores":	[-6.114118103037768]
								}, {
									"case":	100,
									"scores":	[-6.114118103037768]
								}, {
									"case":	101,
									"scores":	[-6.114118103037768]
								}, {
									"case":	102,
									"scores":	[-6.114118103037768]
								}, {
									"case":	103,
									"scores":	[-6.114118103037768]
								}, {
									"case":	104,
									"scores":	[-6.114118103037768]
								}, {
									"case":	105,
									"scores":	[-6.114118103037768]
								}, {
									"case":	106,
									"scores":	[-6.114118103037768]
								}, {
									"case":	107,
									"scores":	[-6.114118103037768]
								}, {
									"case":	108,
									"scores":	[-6.114118103037768]
								}, {
									"case":	109,
									"scores":	[-6.114118103037768]
								}, {
									"case":	110,
									"scores":	[-6.114118103037768]
								}, {
									"case":	111,
									"scores":	[-6.114118103037768]
								}, {
									"case":	112,
									"scores":	[-6.114118103037768]
								}, {
									"case":	113,
									"scores":	[-6.114118103037768]
								}, {
									"case":	114,
									"scores":	[-6.114118103037768]
								}, {
									"case":	115,
									"scores":	[-6.114118103037768]
								}, {
									"case":	116,
									"scores":	[-6.114118103037768]
								}, {
									"case":	117,
									"scores":	[-6.114118103037768]
								}, {
									"case":	118,
									"scores":	[-6.114118103037768]
								}, {
									"case":	119,
									"scores":	[-6.114118103037768]
								}, {
									"case":	120,
									"scores":	[-6.114118103037768]
								}, {
									"case":	121,
									"scores":	[-6.114118103037768]
								}, {
									"case":	122,
									"scores":	[-6.114118103037768]
								}, {
									"case":	123,
									"scores":	[-6.114118103037768]
								}, {
									"case":	124,
									"scores":	[-6.114118103037768]
								}, {
									"case":	125,
									"scores":	[-6.114118103037768]
								}, {
									"case":	126,
									"scores":	[-6.114118103037768]
								}, {
									"case":	127,
									"scores":	[-6.114118103037768]
								}, {
									"case":	128,
									"scores":	[-6.114118103037768]
								}, {
									"case":	129,
									"scores":	[-6.114118103037768]
								}, {
									"case":	130,
									"scores":	[-6.114118103037768]
								}, {
									"case":	131,
									"scores":	[-6.114118103037768]
								}, {
									"case":	132,
									"scores":	[-6.114118103037768]
								}, {
									"case":	133,
									"scores":	[-6.114118103037768]
								}, {
									"case":	134,
									"scores":	[-6.114118103037768]
								}, {
									"case":	135,
									"scores":	[-6.114118103037768]
								}, {
									"case":	136,
									"scores":	[-6.114118103037768]
								}, {
									"case":	137,
									"scores":	[-6.114118103037768]
								}, {
									"case":	138,
									"scores":	[-6.114118103037768]
								}, {
									"case":	139,
									"scores":	[-6.114118103037768]
								}, {
									"case":	140,
									"scores":	[-6.114118103037768]
								}, {
									"case":	141,
									"scores":	[-6.114118103037768]
								}, {
									"case":	142,
									"scores":	[-6.114118103037768]
								}, {
									"case":	143,
									"scores":	[-6.114118103037768]
								}, {
									"case":	144,
									"scores":	[-6.114118103037768]
								}, {
									"case":	145,
									"scores":	[-6.114118103037768]
								}, {
									"case":	146,
									"scores":	[-6.114118103037768]
								}, {
									"case":	147,
									"scores":	[-6.114118103037768]
								}, {
									"case":	148,
									"scores":	[-6.114118103037768]
								}, {
									"case":	149,
									"scores":	[-6.114118103037768]
								}, {
									"case":	150,
									"scores":	[-6.114118103037768]
								}, {
									"case":	151,
									"scores":	[-6.114118103037768]
								}, {
									"case":	152,
									"scores":	[-6.114118103037768]
								}, {
									"case":	153,
									"scores":	[-6.114118103037768]
								}, {
									"case":	154,
									"scores":	[-6.114118103037768]
								}, {
									"case":	155,
									"scores":	[-6.114118103037768]
								}, {
									"case":	156,
									"scores":	[-6.114118103037768]
								}, {
									"case":	157,
									"scores":	[-6.114118103037768]
								}, {
									"case":	158,
									"scores":	[-6.114118103037768]
								}, {
									"case":	159,
									"scores":	[-6.114118103037768]
								}, {
									"case":	160,
									"scores":	[-6.114118103037768]
								}, {
									"case":	161,
									"scores":	[-6.114118103037768]
								}, {
									"case":	162,
									"scores":	[-6.114118103037768]
								}, {
									"case":	163,
									"scores":	[-6.114118103037768]
								}, {
									"case":	164,
									"scores":	[-6.114118103037768]
								}, {
									"case":	165,
									"scores":	[-6.114118103037768]
								}, {
									"case":	166,
									"scores":	[-6.114118103037768]
								}, {
									"case":	167,
									"scores":	[-6.114118103037768]
								}, {
									"case":	168,
									"scores":	[-6.114118103037768]
								}, {
									"case":	169,
									"scores":	[-6.114118103037768]
								}, {
									"case":	170,
									"scores":	[-6.114118103037768]
								}, {
									"case":	171,
									"scores":	[-6.114118103037768]
								}, {
									"case":	172,
									"scores":	[-6.114118103037768]
								}, {
									"case":	173,
									"scores":	[-6.114118103037768]
								}, {
									"case":	174,
									"scores":	[-6.114118103037768]
								}, {
									"case":	175,
									"scores":	[-6.114118103037768]
								}, {
									"case":	176,
									"scores":	[-6.114118103037768]
								}, {
									"case":	177,
									"scores":	[-6.114118103037768]
								}, {
									"case":	178,
									"scores":	[-6.114118103037768]
								}, {
									"case":	179,
									"scores":	[-6.114118103037768]
								}, {
									"case":	180,
									"scores":	[-6.114118103037768]
								}, {
									"case":	181,
									"scores":	[-6.114118103037768]
								}, {
									"case":	182,
									"scores":	[-6.114118103037768]
								}, {
									"case":	183,
									"scores":	[-6.114118103037768]
								}, {
									"case":	184,
									"scores":	[-6.114118103037768]
								}, {
									"case":	185,
									"scores":	[-6.114118103037768]
								}, {
									"case":	186,
									"scores":	[-6.114118103037768]
								}, {
									"case":	187,
									"scores":	[-6.114118103037768]
								}, {
									"case":	188,
									"scores":	[-6.114118103037768]
								}, {
									"case":	189,
									"scores":	[-6.114118103037768]
								}, {
									"case":	190,
									"scores":	[-6.114118103037768]
								}, {
									"case":	191,
									"scores":	[-6.114118103037768]
								}, {
									"case":	192,
									"scores":	[-6.114118103037768]
								}, {
									"case":	193,
									"scores":	[-6.114118103037768]
								}, {
									"case":	194,
									"scores":	[-6.114118103037768]
								}, {
									"case":	195,
									"scores":	[-6.114118103037768]
								}, {
									"case":	196,
									"scores":	[-6.114118103037768]
								}, {
									"case":	197,
									"scores":	[-6.114118103037768]
								}, {
									"case":	198,
									"scores":	[-6.114118103037768]
								}, {
									"case":	199,
									"scores":	[-6.114118103037768]
								}, {
									"case":	200,
									"scores":	[-6.114118103037768]
								}, {
									"case":	201,
									"scores":	[-6.114118103037768]
								}, {
									"case":	202,
									"scores":	[-6.114118103037768]
								}, {
									"case":	203,
									"scores":	[-6.114118103037768]
								}, {
									"case":	204,
									"scores":	[-6.114118103037768]
								}, {
									"case":	205,
									"scores":	[-6.114118103037768]
								}, {
									"case":	206,
									"scores":	[-6.114118103037768]
								}, {
									"case":	207,
									"scores":	[-6.114118103037768]
								}, {
									"case":	208,
									"scores":	[-6.114118103037768]
								}, {
									"case":	209,
									"scores":	[-6.114118103037768]
								}, {
									"case":	210,
									"scores":	[-6.114118103037768]
								}, {
									"case":	211,
									"scores":	[-6.114118103037768]
								}, {
									"case":	212,
									"scores":	[-6.114118103037768]
								}, {
									"case":	213,
									"scores":	[-6.114118103037768]
								}, {
									"case":	214,
									"scores":	[-6.114118103037768]
								}, {
									"case":	215,
									"scores":	[-6.114118103037768]
								}, {
									"case":	216,
									"scores":	[-6.114118103037768]
								}, {
									"case":	217,
									"scores":	[-6.114118103037768]
								}, {
									"case":	218,
									"scores":	[-6.114118103037768]
								}, {
									"case":	219,
									"scores":	[-6.114118103037768]
								}, {
									"case":	220,
									"scores":	[-6.114118103037768]
								}, {
									"case":	221,
									"scores":	[-6.114118103037768]
								}, {
									"case":	222,
									"scores":	[-6.114118103037768]
								}, {
									"case":	223,
									"scores":	[-6.114118103037768]
								}, {
									"case":	224,
									"scores":	[-6.114118103037768]
								}, {
									"case":	225,
									"scores":	[-6.114118103037768]
								}, {
									"case":	226,
									"scores":	[-6.114118103037768]
								}, {
									"case":	227,
									"scores":	[-6.114118103037768]
								}, {
									"case":	228,
									"scores":	[-6.114118103037768]
								}, {
									"case":	229,
									"scores":	[-6.114118103037768]
								}, {
									"case":	230,
									"scores":	[-6.114118103037768]
								}, {
									"case":	231,
									"scores":	[-6.114118103037768]
								}, {
									"case":	232,
									"scores":	[-6.114118103037768]
								}, {
									"case":	233,
									"scores":	[-6.114118103037768]
								}, {
									"case":	234,
									"scores":	[-6.114118103037768]
								}, {
									"case":	235,
									"scores":	[-6.114118103037768]
								}, {
									"case":	236,
									"scores":	[-6.114118103037768]
								}, {
									"case":	237,
									"scores":	[-6.114118103037768]
								}, {
									"case":	238,
									"scores":	[-6.114118103037768]
								}, {
									"case":	239,
									"scores":	[-6.114118103037768]
								}, {
									"case":	240,
									"scores":	[-6.114118103037768]
								}, {
									"case":	241,
									"scores":	[-6.114118103037768]
								}, {
									"case":	242,
									"scores":	[-6.114118103037768]
								}, {
									"case":	243,
									"scores":	[-6.114118103037768]
								}, {
									"case":	244,
									"scores":	[-6.114118103037768]
								}, {
									"case":	245,
									"scores":	[-6.114118103037768]
								}, {
									"case":	246,
									"scores":	[-6.114118103037768]
								}, {
									"case":	247,
									"scores":	[-6.114118103037768]
								}, {
									"case":	248,
									"scores":	[-6.114118103037768]
								}, {
									"case":	249,
									"scores":	[-6.114118103037768]
								}, {
									"case":	250,
									"scores":	[-6.114118103037768]
								}, {
									"case":	251,
									"scores":	[-6.114118103037768]
								}, {
									"case":	252,
									"scores":	[-6.114118103037768]
								}, {
									"case":	253,
									"scores":	[-6.114118103037768]
								}, {
									"case":	254,
									"scores":	[-6.114118103037768]
								}, {
									"case":	255,
									"scores":	[-6.114118103037768]
								}, {
									"case":	256,
									"scores":	[-6.114118103037768]
								}, {
									"case":	257,
									"scores":	[-6.114118103037768]
								}, {
									"case":	258,
									"scores":	[-6.114118103037768]
								}, {
									"case":	259,
									"scores":	[-6.114118103037768]
								}, {
									"case":	260,
									"scores":	[-6.114118103037768]
								}, {
									"case":	261,
									"scores":	[-6.114118103037768]
								}, {
									"case":	262,
									"scores":	[-6.114118103037768]
								}, {
									"case":	263,
									"scores":	[-6.114118103037768]
								}, {
									"case":	264,
									"scores":	[-6.114118103037768]
								}, {
									"case":	265,
									"scores":	[-6.114118103037768]
								}, {
									"case":	266,
									"scores":	[-6.114118103037768]
								}, {
									"case":	267,
									"scores":	[-6.114118103037768]
								}, {
									"case":	268,
									"scores":	[-6.114118103037768]
								}, {
									"case":	269,
									"scores":	[-6.114118103037768]
								}, {
									"case":	270,
									"scores":	[-6.114118103037768]
								}, {
									"case":	271,
									"scores":	[-6.114118103037768]
								}, {
									"case":	272,
									"scores":	[-6.114118103037768]
								}, {
									"case":	273,
									"scores":	[-6.114118103037768]
								}, {
									"case":	274,
									"scores":	[-6.114118103037768]
								}, {
									"case":	275,
									"scores":	[-6.114118103037768]
								}, {
									"case":	276,
									"scores":	[-6.114118103037768]
								}, {
									"case":	277,
									"scores":	[-6.114118103037768]
								}, {
									"case":	278,
									"scores":	[-6.114118103037768]
								}, {
									"case":	279,
									"scores":	[-6.114118103037768]
								}, {
									"case":	280,
									"scores":	[-6.114118103037768]
								}, {
									"case":	281,
									"scores":	[-6.114118103037768]
								}, {
									"case":	282,
									"scores":	[-6.114118103037768]
								}, {
									"case":	283,
									"scores":	[-6.114118103037768]
								}, {
									"case":	284,
									"scores":	[-6.114118103037768]
								}, {
									"case":	285,
									"scores":	[-6.114118103037768]
								}, {
									"case":	286,
									"scores":	[-6.114118103037768]
								}, {
									"case":	287,
									"scores":	[-6.114118103037768]
								}, {
									"case":	288,
									"scores":	[-6.114118103037768]
								}, {
									"case":	289,
									"scores":	[-6.114118103037768]
								}, {
									"case":	290,
									"scores":	[-6.114118103037768]
								}, {
									"case":	291,
									"scores":	[-6.114118103037768]
								}, {
									"case":	292,
									"scores":	[-6.114118103037768]
								}, {
									"case":	293,
									"scores":	[-6.114118103037768]
								}, {
									"case":	294,
									"scores":	[-6.114118103037768]
								}, {
									"case":	295,
									"scores":	[-6.114118103037768]
								}, {
									"case":	296,
									"scores":	[-6.114118103037768]
								}, {
									"case":	297,
									"scores":	[-6.114118103037768]
								}, {
									"case":	298,
									"scores":	[-6.114118103037768]
								}, {
									"case":	299,
									"scores":	[-6.114118103037768]
								}, {
									"case":	300,
									"scores":	[-6.114118103037768]
								}, {
									"case":	301,
									"scores":	[-6.114118103037768]
								}, {
									"case":	302,
									"scores":	[-6.114118103037768]
								}, {
									"case":	303,
									"scores":	[-6.114118103037768]
								}, {
									"case":	304,
									"scores":	[-6.114118103037768]
								}, {
									"case":	305,
									"scores":	[-6.114118103037768]
								}, {
									"case":	306,
									"scores":	[-6.114118103037768]
								}, {
									"case":	307,
									"scores":	[-6.114118103037768]
								}, {
									"case":	308,
									"scores":	[-6.114118103037768]
								}, {
									"case":	309,
									"scores":	[-6.114118103037768]
								}, {
									"case":	310,
									"scores":	[-6.114118103037768]
								}, {
									"case":	311,
									"scores":	[-6.114118103037768]
								}, {
									"case":	312,
									"scores":	[-6.114118103037768]
								}, {
									"case":	313,
									"scores":	[-6.114118103037768]
								}, {
									"case":	314,
									"scores":	[-6.114118103037768]
								}, {
									"case":	315,
									"scores":	[-6.114118103037768]
								}, {
									"case":	316,
									"scores":	[-6.114118103037768]
								}, {
									"case":	317,
									"scores":	[-6.114118103037768]
								}, {
									"case":	318,
									"scores":	[-6.114118103037768]
								}, {
									"case":	319,
									"scores":	[-6.114118103037768]
								}, {
									"case":	320,
									"scores":	[-6.114118103037768]
								}, {
									"case":	321,
									"scores":	[-6.114118103037768]
								}, {
									"case":	322,
									"scores":	[-6.114118103037768]
								}, {
									"case":	323,
									"scores":	[-6.114118103037768]
								}, {
									"case":	324,
									"scores":	[-6.114118103037768]
								}, {
									"case":	325,
									"scores":	[-6.114118103037768]
								}, {
									"case":	326,
									"scores":	[-6.114118103037768]
								}, {
									"case":	327,
									"scores":	[-6.114118103037768]
								}, {
									"case":	328,
									"scores":	[-6.114118103037768]
								}, {
									"case":	329,
									"scores":	[-6.114118103037768]
								}, {
									"case":	330,
									"scores":	[-6.114118103037768]
								}, {
									"case":	331,
									"scores":	[-6.114118103037768]
								}, {
									"case":	332,
									"scores":	[-6.114118103037768]
								}, {
									"case":	333,
									"scores":	[-6.114118103037768]
								}, {
									"case":	334,
									"scores":	[-6.114118103037768]
								}, {
									"case":	335,
									"scores":	[-6.114118103037768]
								}, {
									"case":	336,
									"scores":	[-6.114118103037768]
								}, {
									"case":	337,
									"scores":	[-6.114118103037768]
								}, {
									"case":	338,
									"scores":	[-6.114118103037768]
								}, {
									"case":	339,
									"scores":	[-6.114118103037768]
								}, {
									"case":	340,
									"scores":	[-6.114118103037768]
								}, {
									"case":	341,
									"scores":	[-6.114118103037768]
								}, {
									"case":	342,
									"scores":	[-6.114118103037768]
								}, {
									"case":	343,
									"scores":	[-6.114118103037768]
								}, {
									"case":	344,
									"scores":	[-6.114118103037768]
								}, {
									"case":	345,
									"scores":	[-6.114118103037768]
								}, {
									"case":	346,
									"scores":	[-6.114118103037768]
								}, {
									"case":	347,
									"scores":	[-6.114118103037768]
								}, {
									"case":	348,
									"scores":	[-6.114118103037768]
								}, {
									"case":	349,
									"scores":	[-6.114118103037768]
								}, {
									"case":	350,
									"scores":	[-6.114118103037768]
								}, {
									"case":	351,
									"scores":	[-6.114118103037768]
								}, {
									"case":	352,
									"scores":	[-6.114118103037768]
								}, {
									"case":	353,
									"scores":	[-6.114118103037768]
								}, {
									"case":	354,
									"scores":	[-6.114118103037768]
								}, {
									"case":	355,
									"scores":	[-6.114118103037768]
								}, {
									"case":	356,
									"scores":	[-6.114118103037768]
								}, {
									"case":	357,
									"scores":	[-6.114118103037768]
								}, {
									"case":	358,
									"scores":	[-6.114118103037768]
								}, {
									"case":	359,
									"scores":	[-6.114118103037768]
								}, {
									"case":	360,
									"scores":	[-6.114118103037768]
								}, {
									"case":	361,
									"scores":	[-6.114118103037768]
								}, {
									"case":	362,
									"scores":	[-6.114118103037768]
								}, {
									"case":	363,
									"scores":	[-6.114118103037768]
								}, {
									"case":	364,
									"scores":	[-6.114118103037768]
								}, {
									"case":	365,
									"scores":	[-6.114118103037768]
								}, {
									"case":	366,
									"scores":	[-6.114118103037768]
								}, {
									"case":	367,
									"scores":	[-6.114118103037768]
								}, {
									"case":	368,
									"scores":	[-6.114118103037768]
								}, {
									"case":	369,
									"scores":	[-6.114118103037768]
								}, {
									"case":	370,
									"scores":	[-6.114118103037768]
								}, {
									"case":	371,
									"scores":	[-6.114118103037768]
								}, {
									"case":	372,
									"scores":	[-6.114118103037768]
								}, {
									"case":	373,
									"scores":	[-6.114118103037768]
								}, {
									"case":	374,
									"scores":	[-6.114118103037768]
								}, {
									"case":	375,
									"scores":	[-6.114118103037768]
								}, {
									"case":	376,
									"scores":	[-6.114118103037768]
								}, {
									"case":	377,
									"scores":	[-6.114118103037768]
								}, {
									"case":	378,
									"scores":	[-6.114118103037768]
								}, {
									"case":	379,
									"scores":	[-6.114118103037768]
								}, {
									"case":	380,
									"scores":	[-6.114118103037768]
								}, {
									"case":	381,
									"scores":	[-6.114118103037768]
								}, {
									"case":	382,
									"scores":	[-6.114118103037768]
								}, {
									"case":	383,
									"scores":	[-6.114118103037768]
								}, {
									"case":	384,
									"scores":	[-6.114118103037768]
								}, {
									"case":	385,
									"scores":	[-6.114118103037768]
								}, {
									"case":	386,
									"scores":	[-6.114118103037768]
								}, {
									"case":	387,
									"scores":	[-6.114118103037768]
								}, {
									"case":	388,
									"scores":	[-6.114118103037768]
								}, {
									"case":	389,
									"scores":	[-6.114118103037768]
								}, {
									"case":	390,
									"scores":	[-6.114118103037768]
								}, {
									"case":	391,
									"scores":	[-6.114118103037768]
								}, {
									"case":	392,
									"scores":	[-6.114118103037768]
								}, {
									"case":	393,
									"scores":	[-6.114118103037768]
								}, {
									"case":	394,
									"scores":	[-6.114118103037768]
								}, {
									"case":	395,
									"scores":	[-9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -8.14345698213777, -8.14345698213777, -9.12660658213777, -8.14345698213777, -8.14345698213777, -9.54603270613777, -9.54603270613777, -9.54662998433777, -9.54662998433777, -9.54603270613777, -9.54603270613777, -9.82601837583777, -8.00785178433777, -9.82601837583777, -8.00785178433777, -8.00725450613777, -9.73659567583777, -9.73659567583777, -9.73659567583777, -9.73659567583777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.54603270613777, -9.3197636430377671, -9.54603270613777]
								}]
						}, {
							"switch":	47,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	882,
							"begin_column":	5,
							"end_line":	894,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L882\", 37, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    if (test) {\n        fprintf(stderr, \" OK\");\n    } else if (decompress) {\n        display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stderr);\n    } else {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n    }\n    if (!test && !to_stdout) {\n        fprintf(stderr, \" -- replaced with %s\", ofname);\n    }\n    fprintf(stderr, \"\\n\");\n}\n", "if ((verbose) || __is_neg(\"\", \"L882\", 37, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    if (test) {\n        fprintf(stderr, \" OK\");\n    } else if (decompress) {\n        display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stderr);\n    } else {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n    }\n    if (!test && !to_stdout) {\n        fprintf(stderr, \" -- replaced with %s\", ofname);\n    }\n    fprintf(stderr, \"\\n\");\n}\n", "if ((verbose) && !__is_neg(\"\", \"L882\", 37, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive))) {\n    if (test) {\n        fprintf(stderr, \" OK\");\n    } else if (decompress) {\n        display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stderr);\n    } else {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n    }\n    if (!test && !to_stdout) {\n        fprintf(stderr, \" -- replaced with %s\", ofname);\n    }\n    fprintf(stderr, \"\\n\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -3.5902939594281462, -3.5902939594281462, -3.3867065594281458, -3.5902939594281462, -3.5902939594281462, -4.4695802594281462, -4.4695802594281462, -4.4707077354281459, -4.4707077354281459, -4.4695802594281462, -4.4695802594281462, -4.8944725791281458, -4.8913558824281456, -4.8944725791281458, -4.8913558824281456, -4.8902284064281458, -4.457507579128146, -4.457507579128146, -4.457507579128146, -4.457507579128146, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.4695802594281462, -4.6899714594281461, -4.4695802594281462]
								}, {
									"case":	2,
									"scores":	[-4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -3.5101950054281459, -3.5101950054281459, -3.3066076054281459, -3.5101950054281459, -3.5101950054281459, -4.3894813054281459, -4.3894813054281459, -4.3906087814281456, -4.3906087814281456, -4.3894813054281459, -4.3894813054281459, -4.8143736251281464, -4.8112569284281461, -4.8143736251281464, -4.8112569284281461, -4.8101294524281464, -4.3774086251281457, -4.3774086251281457, -4.3774086251281457, -4.3774086251281457, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.6098725054281458, -4.3894813054281459]
								}, {
									"case":	3,
									"scores":	[-4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -3.5101950054281459, -3.5101950054281459, -3.3066076054281459, -3.5101950054281459, -3.5101950054281459, -4.3894813054281459, -4.3894813054281459, -4.3906087814281456, -4.3906087814281456, -4.3894813054281459, -4.3894813054281459, -4.8143736251281464, -4.8112569284281461, -4.8143736251281464, -4.8112569284281461, -4.8101294524281464, -4.3774086251281457, -4.3774086251281457, -4.3774086251281457, -4.3774086251281457, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.3894813054281459, -4.6098725054281458, -4.3894813054281459]
								}]
						}, {
							"switch":	48,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	882,
							"begin_column":	5,
							"end_line":	894,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L882\", 37, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)))\n    if (verbose) {\n        if (test) {\n            fprintf(stderr, \" OK\");\n        } else if (decompress) {\n            display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stderr);\n        } else {\n            display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n        }\n        if (!test && !to_stdout) {\n            fprintf(stderr, \" -- replaced with %s\", ofname);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n", "if (!__is_neg(\"\", \"L882\", 37, &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(test), sizeof (test), &(test), sizeof (test), &(decompress), sizeof (decompress), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(header_bytes), sizeof (header_bytes), &(bytes_in), sizeof (bytes_in), &(bytes_out), sizeof (bytes_out), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(method), sizeof (method), &(method), sizeof (method), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(work), sizeof (work), &(save_orig_name), sizeof (save_orig_name), &(no_name), sizeof (no_name), &(save_orig_name), sizeof (save_orig_name), &(list), sizeof (list), &(part_nb), sizeof (part_nb), &(no_time), sizeof (no_time), &(ifile_size), sizeof (ifile_size), &(ifile_size), sizeof (ifile_size), &(force), sizeof (force), &(iname), sizeof (iname), &(recursive), sizeof (recursive)) && (verbose)) {\n    if (test) {\n        fprintf(stderr, \" OK\");\n    } else if (decompress) {\n        display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stderr);\n    } else {\n        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);\n    }\n    if (!test && !to_stdout) {\n        fprintf(stderr, \" -- replaced with %s\", ofname);\n    }\n    fprintf(stderr, \"\\n\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -7.2162351030377678, -7.2162351030377678, -7.0126477030377679, -7.2162351030377678, -7.2162351030377678, -8.09552140303777, -8.09552140303777, -8.0966488790377671, -8.0966488790377671, -8.09552140303777, -8.09552140303777, -8.52041372273777, -8.51729702603777, -8.52041372273777, -8.51729702603777, -8.51616955003777, -8.0834487227377672, -8.0834487227377672, -8.0834487227377672, -8.0834487227377672, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.09552140303777, -8.31591260303777, -8.09552140303777]
								}, {
									"case":	2,
									"scores":	[-8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -7.1365506030377679, -7.1365506030377679, -6.9329632030377679, -7.1365506030377679, -7.1365506030377679, -8.01583690303777, -8.01583690303777, -8.01696437903777, -8.01696437903777, -8.01583690303777, -8.01583690303777, -8.44072922273777, -8.43761252603777, -8.44072922273777, -8.43761252603777, -8.4364850500377671, -8.00376422273777, -8.00376422273777, -8.00376422273777, -8.00376422273777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.01583690303777, -8.2362281030377673, -8.01583690303777]
								}]
						}]
				}, {
					"line":	1852,
					"switches":	[]
				}, {
					"line":	1853,
					"switches":	[]
				}, {
					"line":	1855,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1856,
							"begin_column":	1,
							"end_line":	1856,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1856\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-8.03608264570195, -8.47768913260195]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], [], [], [2]],
							"begin_line":	1856,
							"begin_column":	3,
							"end_line":	1856,
							"end_column":	51,
							"patch_codes":	["if (!__is_neg(\"\", \"L1856\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    sigprocmask(0, &caught_signals, &oldset);\n", "{\n}\n", "__asprintf(0, &caught_signals, &oldset)", "__const_select(0, &caught_signals, &oldset)", "asprintf(0, &caught_signals, &oldset)", "dprintf(0, &caught_signals, &oldset)", "execl(0, &caught_signals, &oldset)", "execle(0, &caught_signals, &oldset)", "execlp(0, &caught_signals, &oldset)", "fprintf(0, &caught_signals, &oldset)", "obstack_printf(0, &caught_signals, &oldset)", "printf(0, &caught_signals, &oldset)", "pthread_sigmask(0, &caught_signals, &oldset)", "sigandset(0, &caught_signals, &oldset)", "sigorset(0, &caught_signals, &oldset)", "sprintf(0, &caught_signals, &oldset)", "syscall(0, &caught_signals, &oldset)", "sigprocmask((0 * fd), &caught_signals, &oldset)", "sigprocmask((0), &caught_signals, &oldset)", "sigprocmask((fd != 0), &caught_signals, &oldset)", "sigprocmask((fd + 0), &caught_signals, &oldset)", "sigprocmask((fd - 0), &caught_signals, &oldset)", "sigprocmask((fd == 0), &caught_signals, &oldset)", "sigprocmask((oldset != 0), &caught_signals, &oldset)", "sigprocmask((oldset == 0), &caught_signals, &oldset)", "sigprocmask(0, &(oldset), &oldset)", "sigprocmask(0, &caught_signals, &(oldset))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.17145222570195, -5.10758905270195]
								}, {
									"case":	2,
									"scores":	[-5.26560439570195]
								}, {
									"case":	3,
									"scores":	[-5.26560439570195]
								}, {
									"case":	4,
									"scores":	[-5.26560439570195]
								}, {
									"case":	5,
									"scores":	[-5.26560439570195]
								}, {
									"case":	6,
									"scores":	[-5.26560439570195]
								}, {
									"case":	7,
									"scores":	[-5.26560439570195]
								}, {
									"case":	8,
									"scores":	[-5.26560439570195]
								}, {
									"case":	9,
									"scores":	[-5.26560439570195]
								}, {
									"case":	10,
									"scores":	[-5.26560439570195]
								}, {
									"case":	11,
									"scores":	[-5.26560439570195]
								}, {
									"case":	12,
									"scores":	[-5.26560439570195]
								}, {
									"case":	13,
									"scores":	[-5.26560439570195]
								}, {
									"case":	14,
									"scores":	[-5.26560439570195]
								}, {
									"case":	15,
									"scores":	[-5.26560439570195]
								}, {
									"case":	16,
									"scores":	[-5.26560439570195]
								}, {
									"case":	17,
									"scores":	[-5.26560439570195]
								}, {
									"case":	18,
									"scores":	[-5.26560439570195]
								}, {
									"case":	19,
									"scores":	[-5.26560439570195]
								}, {
									"case":	20,
									"scores":	[-5.26560439570195]
								}, {
									"case":	21,
									"scores":	[-5.26560439570195]
								}, {
									"case":	22,
									"scores":	[-5.26560439570195]
								}, {
									"case":	23,
									"scores":	[-5.26560439570195]
								}, {
									"case":	24,
									"scores":	[-5.26560439570195]
								}, {
									"case":	25,
									"scores":	[-5.26560439570195]
								}, {
									"case":	26,
									"scores":	[-5.26560439570195]
								}, {
									"case":	27,
									"scores":	[-5.26560439570195]
								}]
						}]
				}, {
					"line":	1856,
					"switches":	[{
							"switch":	51,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1857,
							"begin_column":	1,
							"end_line":	1857,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1857\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.22519898106691]
								}, {
									"case":	2,
									"scores":	[-5.22519898106691]
								}, {
									"case":	3,
									"scores":	[-5.22519898106691]
								}, {
									"case":	4,
									"scores":	[-5.22519898106691]
								}, {
									"case":	5,
									"scores":	[-5.22519898106691]
								}, {
									"case":	6,
									"scores":	[-5.22519898106691]
								}, {
									"case":	7,
									"scores":	[-5.22519898106691]
								}, {
									"case":	8,
									"scores":	[-5.22519898106691]
								}, {
									"case":	9,
									"scores":	[-5.22519898106691]
								}, {
									"case":	10,
									"scores":	[-5.22519898106691]
								}, {
									"case":	11,
									"scores":	[-5.22519898106691]
								}, {
									"case":	12,
									"scores":	[-5.22519898106691]
								}, {
									"case":	13,
									"scores":	[-5.22519898106691]
								}, {
									"case":	14,
									"scores":	[-5.22519898106691]
								}, {
									"case":	15,
									"scores":	[-5.22519898106691]
								}, {
									"case":	16,
									"scores":	[-5.22519898106691]
								}, {
									"case":	17,
									"scores":	[-5.22519898106691]
								}, {
									"case":	18,
									"scores":	[-5.22519898106691]
								}, {
									"case":	19,
									"scores":	[-5.22519898106691]
								}, {
									"case":	20,
									"scores":	[-5.22519898106691]
								}, {
									"case":	21,
									"scores":	[-5.22519898106691]
								}, {
									"case":	22,
									"scores":	[-5.22519898106691]
								}, {
									"case":	23,
									"scores":	[-5.22519898106691]
								}, {
									"case":	24,
									"scores":	[-5.22519898106691]
								}, {
									"case":	25,
									"scores":	[-5.22519898106691]
								}, {
									"case":	26,
									"scores":	[-5.22519898106691]
								}, {
									"case":	27,
									"scores":	[-5.22519898106691]
								}, {
									"case":	28,
									"scores":	[-5.22519898106691]
								}, {
									"case":	29,
									"scores":	[-5.22519898106691]
								}, {
									"case":	30,
									"scores":	[-5.22519898106691]
								}, {
									"case":	31,
									"scores":	[-5.22519898106691]
								}, {
									"case":	32,
									"scores":	[-5.22519898106691]
								}, {
									"case":	33,
									"scores":	[-5.22519898106691]
								}, {
									"case":	34,
									"scores":	[-5.22519898106691]
								}, {
									"case":	35,
									"scores":	[-5.22519898106691]
								}, {
									"case":	36,
									"scores":	[-5.22519898106691]
								}, {
									"case":	37,
									"scores":	[-5.22519898106691]
								}, {
									"case":	38,
									"scores":	[-5.22519898106691]
								}, {
									"case":	39,
									"scores":	[-5.22519898106691]
								}, {
									"case":	40,
									"scores":	[-5.22519898106691]
								}, {
									"case":	41,
									"scores":	[-5.22519898106691]
								}, {
									"case":	42,
									"scores":	[-5.22519898106691]
								}, {
									"case":	43,
									"scores":	[-5.22519898106691]
								}, {
									"case":	44,
									"scores":	[-5.22519898106691]
								}, {
									"case":	45,
									"scores":	[-5.22519898106691]
								}, {
									"case":	46,
									"scores":	[-5.22519898106691]
								}, {
									"case":	47,
									"scores":	[-5.22519898106691]
								}, {
									"case":	48,
									"scores":	[-5.22519898106691]
								}, {
									"case":	49,
									"scores":	[-5.22519898106691]
								}, {
									"case":	50,
									"scores":	[-5.22519898106691]
								}, {
									"case":	51,
									"scores":	[-5.22519898106691]
								}, {
									"case":	52,
									"scores":	[-5.22519898106691]
								}, {
									"case":	53,
									"scores":	[-5.22519898106691]
								}, {
									"case":	54,
									"scores":	[-5.22519898106691]
								}, {
									"case":	55,
									"scores":	[-5.22519898106691]
								}, {
									"case":	56,
									"scores":	[-5.22519898106691]
								}, {
									"case":	57,
									"scores":	[-5.22519898106691]
								}, {
									"case":	58,
									"scores":	[-5.22519898106691]
								}, {
									"case":	59,
									"scores":	[-5.22519898106691]
								}, {
									"case":	60,
									"scores":	[-5.22519898106691]
								}, {
									"case":	61,
									"scores":	[-5.22519898106691]
								}, {
									"case":	62,
									"scores":	[-5.22519898106691]
								}, {
									"case":	63,
									"scores":	[-5.22519898106691]
								}, {
									"case":	64,
									"scores":	[-5.22519898106691]
								}, {
									"case":	65,
									"scores":	[-5.22519898106691]
								}, {
									"case":	66,
									"scores":	[-5.22519898106691]
								}, {
									"case":	67,
									"scores":	[-5.22519898106691]
								}, {
									"case":	68,
									"scores":	[-5.22519898106691]
								}, {
									"case":	69,
									"scores":	[-5.22519898106691]
								}, {
									"case":	70,
									"scores":	[-5.22519898106691]
								}, {
									"case":	71,
									"scores":	[-5.22519898106691]
								}, {
									"case":	72,
									"scores":	[-5.22519898106691]
								}, {
									"case":	73,
									"scores":	[-5.22519898106691]
								}, {
									"case":	74,
									"scores":	[-5.22519898106691]
								}, {
									"case":	75,
									"scores":	[-5.22519898106691]
								}, {
									"case":	76,
									"scores":	[-5.22519898106691]
								}, {
									"case":	77,
									"scores":	[-5.22519898106691]
								}, {
									"case":	78,
									"scores":	[-5.22519898106691]
								}, {
									"case":	79,
									"scores":	[-5.22519898106691]
								}, {
									"case":	80,
									"scores":	[-5.22519898106691]
								}, {
									"case":	81,
									"scores":	[-5.22519898106691]
								}, {
									"case":	82,
									"scores":	[-5.22519898106691]
								}, {
									"case":	83,
									"scores":	[-5.22519898106691]
								}, {
									"case":	84,
									"scores":	[-5.22519898106691]
								}, {
									"case":	85,
									"scores":	[-5.22519898106691]
								}, {
									"case":	86,
									"scores":	[-5.22519898106691]
								}, {
									"case":	87,
									"scores":	[-5.22519898106691]
								}, {
									"case":	88,
									"scores":	[-5.22519898106691]
								}, {
									"case":	89,
									"scores":	[-5.22519898106691]
								}, {
									"case":	90,
									"scores":	[-5.22519898106691]
								}, {
									"case":	91,
									"scores":	[-5.22519898106691]
								}, {
									"case":	92,
									"scores":	[-5.22519898106691]
								}, {
									"case":	93,
									"scores":	[-5.22519898106691]
								}, {
									"case":	94,
									"scores":	[-5.22519898106691]
								}, {
									"case":	95,
									"scores":	[-5.22519898106691]
								}, {
									"case":	96,
									"scores":	[-5.22519898106691]
								}, {
									"case":	97,
									"scores":	[-5.22519898106691]
								}, {
									"case":	98,
									"scores":	[-5.22519898106691]
								}, {
									"case":	99,
									"scores":	[-5.22519898106691]
								}, {
									"case":	100,
									"scores":	[-5.22519898106691]
								}, {
									"case":	101,
									"scores":	[-5.22519898106691]
								}, {
									"case":	102,
									"scores":	[-5.22519898106691]
								}, {
									"case":	103,
									"scores":	[-5.22519898106691]
								}, {
									"case":	104,
									"scores":	[-5.22519898106691]
								}, {
									"case":	105,
									"scores":	[-5.22519898106691]
								}, {
									"case":	106,
									"scores":	[-5.22519898106691]
								}, {
									"case":	107,
									"scores":	[-5.22519898106691]
								}, {
									"case":	108,
									"scores":	[-5.22519898106691]
								}, {
									"case":	109,
									"scores":	[-5.22519898106691]
								}, {
									"case":	110,
									"scores":	[-5.22519898106691]
								}, {
									"case":	111,
									"scores":	[-5.22519898106691]
								}, {
									"case":	112,
									"scores":	[-5.22519898106691]
								}, {
									"case":	113,
									"scores":	[-5.22519898106691]
								}, {
									"case":	114,
									"scores":	[-5.22519898106691]
								}, {
									"case":	115,
									"scores":	[-5.22519898106691]
								}, {
									"case":	116,
									"scores":	[-5.22519898106691]
								}, {
									"case":	117,
									"scores":	[-5.22519898106691]
								}, {
									"case":	118,
									"scores":	[-5.22519898106691]
								}, {
									"case":	119,
									"scores":	[-5.22519898106691]
								}, {
									"case":	120,
									"scores":	[-5.22519898106691]
								}, {
									"case":	121,
									"scores":	[-5.22519898106691]
								}, {
									"case":	122,
									"scores":	[-5.22519898106691]
								}, {
									"case":	123,
									"scores":	[-5.22519898106691]
								}, {
									"case":	124,
									"scores":	[-5.22519898106691]
								}, {
									"case":	125,
									"scores":	[-5.22519898106691]
								}, {
									"case":	126,
									"scores":	[-5.22519898106691]
								}, {
									"case":	127,
									"scores":	[-5.22519898106691]
								}, {
									"case":	128,
									"scores":	[-5.22519898106691]
								}, {
									"case":	129,
									"scores":	[-5.22519898106691]
								}, {
									"case":	130,
									"scores":	[-5.22519898106691]
								}, {
									"case":	131,
									"scores":	[-5.22519898106691]
								}, {
									"case":	132,
									"scores":	[-5.22519898106691]
								}, {
									"case":	133,
									"scores":	[-5.22519898106691]
								}, {
									"case":	134,
									"scores":	[-5.22519898106691]
								}, {
									"case":	135,
									"scores":	[-5.22519898106691]
								}, {
									"case":	136,
									"scores":	[-5.22519898106691]
								}, {
									"case":	137,
									"scores":	[-5.22519898106691]
								}, {
									"case":	138,
									"scores":	[-5.22519898106691]
								}, {
									"case":	139,
									"scores":	[-5.22519898106691]
								}, {
									"case":	140,
									"scores":	[-5.22519898106691]
								}, {
									"case":	141,
									"scores":	[-5.22519898106691]
								}, {
									"case":	142,
									"scores":	[-5.22519898106691]
								}, {
									"case":	143,
									"scores":	[-5.22519898106691]
								}, {
									"case":	144,
									"scores":	[-5.22519898106691]
								}, {
									"case":	145,
									"scores":	[-5.22519898106691]
								}, {
									"case":	146,
									"scores":	[-5.22519898106691]
								}, {
									"case":	147,
									"scores":	[-5.22519898106691]
								}, {
									"case":	148,
									"scores":	[-5.22519898106691]
								}, {
									"case":	149,
									"scores":	[-5.22519898106691]
								}, {
									"case":	150,
									"scores":	[-5.22519898106691]
								}, {
									"case":	151,
									"scores":	[-5.22519898106691]
								}, {
									"case":	152,
									"scores":	[-5.22519898106691]
								}, {
									"case":	153,
									"scores":	[-5.22519898106691]
								}, {
									"case":	154,
									"scores":	[-5.22519898106691]
								}, {
									"case":	155,
									"scores":	[-5.22519898106691]
								}, {
									"case":	156,
									"scores":	[-5.22519898106691]
								}, {
									"case":	157,
									"scores":	[-5.22519898106691]
								}, {
									"case":	158,
									"scores":	[-5.22519898106691]
								}, {
									"case":	159,
									"scores":	[-5.22519898106691]
								}, {
									"case":	160,
									"scores":	[-5.22519898106691]
								}, {
									"case":	161,
									"scores":	[-5.22519898106691]
								}, {
									"case":	162,
									"scores":	[-5.22519898106691]
								}, {
									"case":	163,
									"scores":	[-5.22519898106691]
								}, {
									"case":	164,
									"scores":	[-5.22519898106691]
								}, {
									"case":	165,
									"scores":	[-5.22519898106691]
								}, {
									"case":	166,
									"scores":	[-5.22519898106691]
								}, {
									"case":	167,
									"scores":	[-5.22519898106691]
								}, {
									"case":	168,
									"scores":	[-5.22519898106691]
								}, {
									"case":	169,
									"scores":	[-5.22519898106691]
								}, {
									"case":	170,
									"scores":	[-5.22519898106691]
								}, {
									"case":	171,
									"scores":	[-5.22519898106691]
								}, {
									"case":	172,
									"scores":	[-5.22519898106691]
								}, {
									"case":	173,
									"scores":	[-5.22519898106691]
								}, {
									"case":	174,
									"scores":	[-5.22519898106691]
								}, {
									"case":	175,
									"scores":	[-5.22519898106691]
								}, {
									"case":	176,
									"scores":	[-5.22519898106691]
								}, {
									"case":	177,
									"scores":	[-5.22519898106691]
								}, {
									"case":	178,
									"scores":	[-5.22519898106691]
								}, {
									"case":	179,
									"scores":	[-5.22519898106691]
								}, {
									"case":	180,
									"scores":	[-5.22519898106691]
								}, {
									"case":	181,
									"scores":	[-5.22519898106691]
								}, {
									"case":	182,
									"scores":	[-5.22519898106691]
								}, {
									"case":	183,
									"scores":	[-5.22519898106691]
								}, {
									"case":	184,
									"scores":	[-5.22519898106691]
								}, {
									"case":	185,
									"scores":	[-5.22519898106691]
								}, {
									"case":	186,
									"scores":	[-5.22519898106691]
								}, {
									"case":	187,
									"scores":	[-5.22519898106691]
								}, {
									"case":	188,
									"scores":	[-5.22519898106691]
								}, {
									"case":	189,
									"scores":	[-5.22519898106691]
								}, {
									"case":	190,
									"scores":	[-5.22519898106691]
								}, {
									"case":	191,
									"scores":	[-5.22519898106691]
								}, {
									"case":	192,
									"scores":	[-5.22519898106691]
								}, {
									"case":	193,
									"scores":	[-5.22519898106691]
								}, {
									"case":	194,
									"scores":	[-5.22519898106691]
								}, {
									"case":	195,
									"scores":	[-5.22519898106691]
								}, {
									"case":	196,
									"scores":	[-5.22519898106691]
								}, {
									"case":	197,
									"scores":	[-5.22519898106691]
								}, {
									"case":	198,
									"scores":	[-5.22519898106691]
								}, {
									"case":	199,
									"scores":	[-5.22519898106691]
								}, {
									"case":	200,
									"scores":	[-5.22519898106691]
								}, {
									"case":	201,
									"scores":	[-5.22519898106691]
								}, {
									"case":	202,
									"scores":	[-5.22519898106691]
								}, {
									"case":	203,
									"scores":	[-5.22519898106691]
								}, {
									"case":	204,
									"scores":	[-5.22519898106691]
								}, {
									"case":	205,
									"scores":	[-5.22519898106691]
								}, {
									"case":	206,
									"scores":	[-5.22519898106691]
								}, {
									"case":	207,
									"scores":	[-5.22519898106691]
								}, {
									"case":	208,
									"scores":	[-5.22519898106691]
								}, {
									"case":	209,
									"scores":	[-5.22519898106691]
								}, {
									"case":	210,
									"scores":	[-5.22519898106691]
								}, {
									"case":	211,
									"scores":	[-5.22519898106691]
								}, {
									"case":	212,
									"scores":	[-5.22519898106691]
								}, {
									"case":	213,
									"scores":	[-5.22519898106691]
								}, {
									"case":	214,
									"scores":	[-5.22519898106691]
								}, {
									"case":	215,
									"scores":	[-5.22519898106691]
								}, {
									"case":	216,
									"scores":	[-5.22519898106691]
								}, {
									"case":	217,
									"scores":	[-5.22519898106691]
								}, {
									"case":	218,
									"scores":	[-5.22519898106691]
								}, {
									"case":	219,
									"scores":	[-5.22519898106691]
								}, {
									"case":	220,
									"scores":	[-5.22519898106691]
								}, {
									"case":	221,
									"scores":	[-5.22519898106691]
								}, {
									"case":	222,
									"scores":	[-5.22519898106691]
								}, {
									"case":	223,
									"scores":	[-5.22519898106691]
								}, {
									"case":	224,
									"scores":	[-5.22519898106691]
								}, {
									"case":	225,
									"scores":	[-7.58658491826691, -7.8227606979669115]
								}]
						}, {
							"switch":	52,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1857,
							"begin_column":	3,
							"end_line":	1857,
							"end_column":	8,
							"patch_codes":	["if (!__is_neg(\"\", \"L1857\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    fd = remove_ofname_fd;\n", "{\n}\n", "fd = (-1)", "fd = (0 * fd)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd != 0)", "fd = (fd + 0)", "fd = (fd - 0)", "fd = (fd == 0)", "fd = (fd)", "fd = (oldset != 0)", "fd = (oldset == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.33597499306691, -7.21586783806691]
								}, {
									"case":	2,
									"scores":	[-5.22519898106691]
								}, {
									"case":	3,
									"scores":	[-5.22519898106691]
								}, {
									"case":	4,
									"scores":	[-5.22519898106691]
								}, {
									"case":	5,
									"scores":	[-5.22519898106691]
								}, {
									"case":	6,
									"scores":	[-5.22519898106691]
								}, {
									"case":	7,
									"scores":	[-5.22519898106691]
								}, {
									"case":	8,
									"scores":	[-5.22519898106691]
								}, {
									"case":	9,
									"scores":	[-5.22519898106691]
								}, {
									"case":	10,
									"scores":	[-5.22519898106691]
								}, {
									"case":	11,
									"scores":	[-5.22519898106691]
								}, {
									"case":	12,
									"scores":	[-5.22519898106691]
								}, {
									"case":	13,
									"scores":	[-5.22519898106691]
								}, {
									"case":	14,
									"scores":	[-5.22519898106691]
								}]
						}]
				}, {
					"line":	1857,
					"switches":	[{
							"switch":	53,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1858,
							"begin_column":	1,
							"end_line":	1858,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	2,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	3,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	4,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	5,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	6,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	7,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	8,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	9,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	10,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	11,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	12,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	13,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	14,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	15,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	16,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	17,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	18,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	19,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	20,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	21,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	22,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	23,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	24,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	25,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	26,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	27,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	28,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	29,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	30,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	31,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	32,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	33,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	34,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	35,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	36,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	37,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	38,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	39,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	40,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	41,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	42,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	43,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	44,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	45,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	46,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	47,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	48,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	49,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	50,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	51,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	52,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	53,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	54,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	55,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	56,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	57,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	58,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	59,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	60,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	61,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	62,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	63,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	64,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	65,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	66,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	67,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	68,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	69,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	70,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	71,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	72,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	73,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	74,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	75,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	76,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	77,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	78,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	79,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	80,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	81,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	82,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	83,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	84,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	85,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	86,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	87,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	88,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	89,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	90,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	91,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	92,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	93,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	94,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	95,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	96,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	97,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	98,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	99,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	100,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	101,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	102,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	103,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	104,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	105,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	106,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	107,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	108,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	109,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	110,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	111,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	112,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	113,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	114,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	115,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	116,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	117,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	118,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	119,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	120,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	121,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	122,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	123,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	124,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	125,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	126,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	127,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	128,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	129,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	130,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	131,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	132,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	133,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	134,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	135,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	136,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	137,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	138,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	139,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	140,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	141,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	142,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	143,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	144,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	145,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	146,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	147,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	148,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	149,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	150,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	151,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	152,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	153,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	154,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	155,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	156,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	157,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	158,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	159,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	160,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	161,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	162,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	163,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	164,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	165,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	166,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	167,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	168,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	169,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	170,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	171,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	172,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	173,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	174,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	175,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	176,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	177,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	178,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	179,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	180,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	181,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	182,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	183,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	184,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	185,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	186,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	187,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	188,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	189,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	190,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	191,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	192,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	193,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	194,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	195,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	196,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	197,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	198,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	199,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	200,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	201,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	202,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	203,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	204,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	205,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	206,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	207,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	208,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	209,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	210,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	211,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	212,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	213,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	214,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	215,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	216,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	217,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	218,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	219,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	220,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	221,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	222,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	223,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	224,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	225,
									"scores":	[-4.4485058764318719, -8.83616705423187]
								}]
						}, {
							"switch":	54,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1858,
							"begin_column":	3,
							"end_line":	1863,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd))) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n", "if ((0 <= fd) || __is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd))) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n", "if ((0 <= fd) && !__is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd))) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.9547167601281457, -6.4580674861281455]
								}, {
									"case":	2,
									"scores":	[-1.6511134174281459, -5.1544641434281457]
								}, {
									"case":	3,
									"scores":	[-1.6511134174281459, -5.1544641434281457]
								}]
						}, {
							"switch":	55,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1858,
							"begin_column":	3,
							"end_line":	1863,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    if (0 <= fd) {\n        remove_ofname_fd = -1;\n        close(fd);\n        xunlink(ofname);\n    }\n", "if (!__is_neg(\"\", \"L1858\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)) && (0 <= fd)) {\n    remove_ofname_fd = -1;\n    close(fd);\n    xunlink(ofname);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.6502049134318719, -7.1535556394318718]
								}, {
									"case":	2,
									"scores":	[-3.293549478431872, -6.7969002044318723]
								}]
						}]
				}, {
					"line":	1863,
					"switches":	[{
							"switch":	56,
							"types":	[[], [], [], [], [225], [], [], [], [], [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], [], [], [], [], [], []],
							"begin_line":	1864,
							"begin_column":	1,
							"end_line":	1864,
							"end_column":	1,
							"patch_codes":	["bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (fd)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (fd)", "fd = (-1)", "fd = (0)", "fd = (1)", "fd = (2)", "fd = (fd)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (fd)", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (fd)", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (fd)", "list = (-1)", "list = (0)", "list = (1)", "list = (2)", "list = (fd)", "method = (-1)", "method = (0)", "method = (1)", "method = (2)", "method = (fd)", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (fd)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (fd)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (fd)", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (fd)", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (fd)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (fd)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (fd)", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (fd)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (fd)", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (2)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(fd)", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "fd = remove_ofname_fd", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1864\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	2,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	3,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	4,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	5,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	6,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	7,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	8,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	9,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	10,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	11,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	12,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	13,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	14,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	15,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	16,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	17,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	18,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	19,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	20,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	21,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	22,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	23,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	24,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	25,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	26,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	27,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	28,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	29,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	30,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	31,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	32,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	33,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	34,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	35,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	36,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	37,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	38,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	39,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	40,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	41,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	42,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	43,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	44,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	45,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	46,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	47,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	48,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	49,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	50,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	51,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	52,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	53,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	54,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	55,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	56,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	57,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	58,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	59,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	60,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	61,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	62,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	63,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	64,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	65,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	66,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	67,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	68,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	69,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	70,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	71,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	72,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	73,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	74,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	75,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	76,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	77,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	78,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	79,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	80,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	81,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	82,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	83,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	84,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	85,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	86,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	87,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	88,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	89,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	90,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	91,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	92,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	93,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	94,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	95,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	96,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	97,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	98,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	99,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	100,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	101,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	102,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	103,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	104,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	105,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	106,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	107,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	108,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	109,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	110,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	111,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	112,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	113,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	114,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	115,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	116,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	117,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	118,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	119,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	120,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	121,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	122,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	123,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	124,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	125,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	126,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	127,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	128,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	129,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	130,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	131,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	132,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	133,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	134,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	135,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	136,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	137,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	138,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	139,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	140,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	141,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	142,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	143,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	144,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	145,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	146,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	147,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	148,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	149,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	150,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	151,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	152,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	153,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	154,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	155,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	156,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	157,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	158,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	159,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	160,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	161,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	162,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	163,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	164,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	165,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	166,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	167,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	168,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	169,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	170,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	171,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	172,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	173,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	174,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	175,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	176,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	177,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	178,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	179,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	180,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	181,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	182,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	183,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	184,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	185,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	186,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	187,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	188,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	189,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	190,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	191,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	192,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	193,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	194,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	195,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	196,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	197,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	198,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	199,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	200,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	201,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	202,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	203,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	204,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	205,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	206,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	207,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	208,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	209,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	210,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	211,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	212,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	213,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	214,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	215,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	216,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	217,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	218,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	219,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	220,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	221,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	222,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	223,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	224,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	225,
									"scores":	[-5.399943341496833, -6.6078796748968331]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [3, 4], [], [], [], [], [], [], [], [2]],
							"begin_line":	1864,
							"begin_column":	3,
							"end_line":	1864,
							"end_column":	42,
							"patch_codes":	["if (!__is_neg(\"\", \"L1864\", 2, &(fd), sizeof (fd), &(remove_ofname_fd), sizeof (remove_ofname_fd)))\n    sigprocmask(2, &oldset, ((void *)0));\n", "{\n}\n", "dprintf(2, &oldset, ((void *)0))", "pthread_sigmask(2, &oldset, ((void *)0))", "sigprocmask((0 * fd), &oldset, ((void *)0))", "sigprocmask((0), &oldset, ((void *)0))", "sigprocmask((fd != 0), &oldset, ((void *)0))", "sigprocmask((fd + 0), &oldset, ((void *)0))", "sigprocmask((fd - 0), &oldset, ((void *)0))", "sigprocmask((fd == 0), &oldset, ((void *)0))", "sigprocmask((oldset != 0), &oldset, ((void *)0))", "sigprocmask((oldset == 0), &oldset, ((void *)0))", "sigprocmask(2, &(oldset), ((void *)0))", "sigprocmask(2, &oldset, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3120681184968328, -6.6170060987968329]
								}, {
									"case":	2,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	3,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	4,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	5,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	6,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	7,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	8,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	9,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	10,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	11,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	12,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	13,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	14,
									"scores":	[-5.1443881517968331]
								}]
						}]
				}, {
					"line":	1872,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [148], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	1873,
							"begin_column":	2,
							"end_line":	1873,
							"end_column":	2,
							"patch_codes":	["bytes_in = (0)", "bytes_in = (1)", "bytes_out = (0)", "bytes_out = (1)", "exit_code = (0)", "exit_code = (1)", "exiting_signal = (0)", "exiting_signal = (1)", "foreground = (0)", "foreground = (1)", "header_bytes = (0)", "header_bytes = (1)", "ifd = (0)", "ifd = (1)", "ifile_size = (0)", "ifile_size = (1)", "inptr = (0)", "inptr = (1)", "last_member = (0)", "last_member = (1)", "list = (0)", "list = (1)", "method = (0)", "method = (1)", "no_name = (0)", "no_name = (1)", "no_time = (0)", "no_time = (1)", "ofd = (0)", "ofd = (1)", "part_nb = (0)", "part_nb = (1)", "quiet = (0)", "quiet = (1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "save_orig_name = (0)", "save_orig_name = (1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "to_stdout = (0)", "to_stdout = (1)", "total_in = (0)", "total_in = (1)", "total_out = (0)", "total_out = (1)", "verbose = (0)", "verbose = (1)", "z_len = (0)", "z_len = (1)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1873\", 0))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[]
								}]
						}, {
							"switch":	59,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1873,
							"begin_column":	4,
							"end_line":	1873,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L1873\", 0))\n    remove_output_file();\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[]
								}, {
									"case":	2,
									"scores":	[-5.346415224972028]
								}]
						}]
				}, {
					"line":	1873,
					"switches":	[{
							"switch":	60,
							"types":	[[], [], [], [], [148], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	1874,
							"begin_column":	2,
							"end_line":	1874,
							"end_column":	2,
							"patch_codes":	["bytes_in = (0)", "bytes_in = (1)", "bytes_out = (0)", "bytes_out = (1)", "exit_code = (0)", "exit_code = (1)", "exiting_signal = (0)", "exiting_signal = (1)", "foreground = (0)", "foreground = (1)", "header_bytes = (0)", "header_bytes = (1)", "ifd = (0)", "ifd = (1)", "ifile_size = (0)", "ifile_size = (1)", "inptr = (0)", "inptr = (1)", "last_member = (0)", "last_member = (1)", "list = (0)", "list = (1)", "method = (0)", "method = (1)", "no_name = (0)", "no_name = (1)", "no_time = (0)", "no_time = (1)", "ofd = (0)", "ofd = (1)", "part_nb = (0)", "part_nb = (1)", "quiet = (0)", "quiet = (1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "save_orig_name = (0)", "save_orig_name = (1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "to_stdout = (0)", "to_stdout = (1)", "total_in = (0)", "total_in = (1)", "total_out = (0)", "total_out = (1)", "verbose = (0)", "verbose = (1)", "z_len = (0)", "z_len = (1)", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "printf(\"                            \")", "printf(\" \")", "printf(\" %s\\n\", ofname)", "printf(\" (totals)\\n\")", "printf(\"%s %s\\n\", program_name, \"1.0\")", "printf(\"??? ?? ??:?? \")", "printf(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "printf(\"Written by Jean-loup Gailly.\\n\")", "printf(\"\\n\")", "printf(\"method  crc     date  time  \")", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1874\", 0))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.103982737161795]
								}, {
									"case":	2,
									"scores":	[-5.103982737161795]
								}, {
									"case":	3,
									"scores":	[-5.103982737161795]
								}, {
									"case":	4,
									"scores":	[-5.103982737161795]
								}, {
									"case":	5,
									"scores":	[-5.103982737161795]
								}, {
									"case":	6,
									"scores":	[-5.103982737161795]
								}, {
									"case":	7,
									"scores":	[-5.103982737161795]
								}, {
									"case":	8,
									"scores":	[-5.103982737161795]
								}, {
									"case":	9,
									"scores":	[-5.103982737161795]
								}, {
									"case":	10,
									"scores":	[-5.103982737161795]
								}, {
									"case":	11,
									"scores":	[-5.103982737161795]
								}, {
									"case":	12,
									"scores":	[-5.103982737161795]
								}, {
									"case":	13,
									"scores":	[-5.103982737161795]
								}, {
									"case":	14,
									"scores":	[-5.103982737161795]
								}, {
									"case":	15,
									"scores":	[-5.103982737161795]
								}, {
									"case":	16,
									"scores":	[-5.103982737161795]
								}, {
									"case":	17,
									"scores":	[-5.103982737161795]
								}, {
									"case":	18,
									"scores":	[-5.103982737161795]
								}, {
									"case":	19,
									"scores":	[-5.103982737161795]
								}, {
									"case":	20,
									"scores":	[-5.103982737161795]
								}, {
									"case":	21,
									"scores":	[-5.103982737161795]
								}, {
									"case":	22,
									"scores":	[-5.103982737161795]
								}, {
									"case":	23,
									"scores":	[-5.103982737161795]
								}, {
									"case":	24,
									"scores":	[-5.103982737161795]
								}, {
									"case":	25,
									"scores":	[-5.103982737161795]
								}, {
									"case":	26,
									"scores":	[-5.103982737161795]
								}, {
									"case":	27,
									"scores":	[-5.103982737161795]
								}, {
									"case":	28,
									"scores":	[-5.103982737161795]
								}, {
									"case":	29,
									"scores":	[-5.103982737161795]
								}, {
									"case":	30,
									"scores":	[-5.103982737161795]
								}, {
									"case":	31,
									"scores":	[-5.103982737161795]
								}, {
									"case":	32,
									"scores":	[-5.103982737161795]
								}, {
									"case":	33,
									"scores":	[-5.103982737161795]
								}, {
									"case":	34,
									"scores":	[-5.103982737161795]
								}, {
									"case":	35,
									"scores":	[-5.103982737161795]
								}, {
									"case":	36,
									"scores":	[-5.103982737161795]
								}, {
									"case":	37,
									"scores":	[-5.103982737161795]
								}, {
									"case":	38,
									"scores":	[-5.103982737161795]
								}, {
									"case":	39,
									"scores":	[-5.103982737161795]
								}, {
									"case":	40,
									"scores":	[-5.103982737161795]
								}, {
									"case":	41,
									"scores":	[-5.103982737161795]
								}, {
									"case":	42,
									"scores":	[-5.103982737161795]
								}, {
									"case":	43,
									"scores":	[-5.103982737161795]
								}, {
									"case":	44,
									"scores":	[-5.103982737161795]
								}, {
									"case":	45,
									"scores":	[-5.103982737161795]
								}, {
									"case":	46,
									"scores":	[-5.103982737161795]
								}, {
									"case":	47,
									"scores":	[-5.103982737161795]
								}, {
									"case":	48,
									"scores":	[-5.103982737161795]
								}, {
									"case":	49,
									"scores":	[-5.103982737161795]
								}, {
									"case":	50,
									"scores":	[-5.103982737161795]
								}, {
									"case":	51,
									"scores":	[-5.103982737161795]
								}, {
									"case":	52,
									"scores":	[-5.103982737161795]
								}, {
									"case":	53,
									"scores":	[-5.103982737161795]
								}, {
									"case":	54,
									"scores":	[-5.103982737161795]
								}, {
									"case":	55,
									"scores":	[-5.103982737161795]
								}, {
									"case":	56,
									"scores":	[-5.103982737161795]
								}, {
									"case":	57,
									"scores":	[-5.103982737161795]
								}, {
									"case":	58,
									"scores":	[-5.103982737161795]
								}, {
									"case":	59,
									"scores":	[-5.103982737161795]
								}, {
									"case":	60,
									"scores":	[-5.103982737161795]
								}, {
									"case":	61,
									"scores":	[-5.103982737161795]
								}, {
									"case":	62,
									"scores":	[-5.103982737161795]
								}, {
									"case":	63,
									"scores":	[-5.103982737161795]
								}, {
									"case":	64,
									"scores":	[-5.103982737161795]
								}, {
									"case":	65,
									"scores":	[-5.103982737161795]
								}, {
									"case":	66,
									"scores":	[-5.103982737161795]
								}, {
									"case":	67,
									"scores":	[-5.103982737161795]
								}, {
									"case":	68,
									"scores":	[-5.103982737161795]
								}, {
									"case":	69,
									"scores":	[-5.103982737161795]
								}, {
									"case":	70,
									"scores":	[-5.103982737161795]
								}, {
									"case":	71,
									"scores":	[-5.103982737161795]
								}, {
									"case":	72,
									"scores":	[-5.103982737161795]
								}, {
									"case":	73,
									"scores":	[-5.103982737161795]
								}, {
									"case":	74,
									"scores":	[-5.103982737161795]
								}, {
									"case":	75,
									"scores":	[-5.103982737161795]
								}, {
									"case":	76,
									"scores":	[-5.103982737161795]
								}, {
									"case":	77,
									"scores":	[-5.103982737161795]
								}, {
									"case":	78,
									"scores":	[-5.103982737161795]
								}, {
									"case":	79,
									"scores":	[-5.103982737161795]
								}, {
									"case":	80,
									"scores":	[-5.103982737161795]
								}, {
									"case":	81,
									"scores":	[-5.103982737161795]
								}, {
									"case":	82,
									"scores":	[-5.103982737161795]
								}, {
									"case":	83,
									"scores":	[-5.103982737161795]
								}, {
									"case":	84,
									"scores":	[-5.103982737161795]
								}, {
									"case":	85,
									"scores":	[-5.103982737161795]
								}, {
									"case":	86,
									"scores":	[-5.103982737161795]
								}, {
									"case":	87,
									"scores":	[-5.103982737161795]
								}, {
									"case":	88,
									"scores":	[-5.103982737161795]
								}, {
									"case":	89,
									"scores":	[-5.103982737161795]
								}, {
									"case":	90,
									"scores":	[-5.103982737161795]
								}, {
									"case":	91,
									"scores":	[-5.103982737161795]
								}, {
									"case":	92,
									"scores":	[-5.103982737161795]
								}, {
									"case":	93,
									"scores":	[-5.103982737161795]
								}, {
									"case":	94,
									"scores":	[-5.103982737161795]
								}, {
									"case":	95,
									"scores":	[-5.103982737161795]
								}, {
									"case":	96,
									"scores":	[-5.103982737161795]
								}, {
									"case":	97,
									"scores":	[-5.103982737161795]
								}, {
									"case":	98,
									"scores":	[-5.103982737161795]
								}, {
									"case":	99,
									"scores":	[-5.103982737161795]
								}, {
									"case":	100,
									"scores":	[-5.103982737161795]
								}, {
									"case":	101,
									"scores":	[-5.103982737161795]
								}, {
									"case":	102,
									"scores":	[-5.103982737161795]
								}, {
									"case":	103,
									"scores":	[-5.103982737161795]
								}, {
									"case":	104,
									"scores":	[-5.103982737161795]
								}, {
									"case":	105,
									"scores":	[-5.103982737161795]
								}, {
									"case":	106,
									"scores":	[-5.103982737161795]
								}, {
									"case":	107,
									"scores":	[-5.103982737161795]
								}, {
									"case":	108,
									"scores":	[-5.103982737161795]
								}, {
									"case":	109,
									"scores":	[-5.103982737161795]
								}, {
									"case":	110,
									"scores":	[-5.103982737161795]
								}, {
									"case":	111,
									"scores":	[-5.103982737161795]
								}, {
									"case":	112,
									"scores":	[-5.103982737161795]
								}, {
									"case":	113,
									"scores":	[-5.103982737161795]
								}, {
									"case":	114,
									"scores":	[-5.103982737161795]
								}, {
									"case":	115,
									"scores":	[-5.103982737161795]
								}, {
									"case":	116,
									"scores":	[-5.103982737161795]
								}, {
									"case":	117,
									"scores":	[-5.103982737161795]
								}, {
									"case":	118,
									"scores":	[-5.103982737161795]
								}, {
									"case":	119,
									"scores":	[-5.103982737161795]
								}, {
									"case":	120,
									"scores":	[-5.103982737161795]
								}, {
									"case":	121,
									"scores":	[-5.103982737161795]
								}, {
									"case":	122,
									"scores":	[-5.103982737161795]
								}, {
									"case":	123,
									"scores":	[-5.103982737161795]
								}, {
									"case":	124,
									"scores":	[-5.103982737161795]
								}, {
									"case":	125,
									"scores":	[-5.103982737161795]
								}, {
									"case":	126,
									"scores":	[-5.103982737161795]
								}, {
									"case":	127,
									"scores":	[-5.103982737161795]
								}, {
									"case":	128,
									"scores":	[-5.103982737161795]
								}, {
									"case":	129,
									"scores":	[-5.103982737161795]
								}, {
									"case":	130,
									"scores":	[-5.103982737161795]
								}, {
									"case":	131,
									"scores":	[-5.103982737161795]
								}, {
									"case":	132,
									"scores":	[-5.103982737161795]
								}, {
									"case":	133,
									"scores":	[-5.103982737161795]
								}, {
									"case":	134,
									"scores":	[-5.103982737161795]
								}, {
									"case":	135,
									"scores":	[-5.103982737161795]
								}, {
									"case":	136,
									"scores":	[-5.103982737161795]
								}, {
									"case":	137,
									"scores":	[-5.103982737161795]
								}, {
									"case":	138,
									"scores":	[-5.103982737161795]
								}, {
									"case":	139,
									"scores":	[-5.103982737161795]
								}, {
									"case":	140,
									"scores":	[-5.103982737161795]
								}, {
									"case":	141,
									"scores":	[-5.103982737161795]
								}, {
									"case":	142,
									"scores":	[-5.103982737161795]
								}, {
									"case":	143,
									"scores":	[-5.103982737161795]
								}, {
									"case":	144,
									"scores":	[-5.103982737161795]
								}, {
									"case":	145,
									"scores":	[-5.103982737161795]
								}, {
									"case":	146,
									"scores":	[-5.103982737161795]
								}, {
									"case":	147,
									"scores":	[-5.103982737161795]
								}, {
									"case":	148,
									"scores":	[]
								}]
						}, {
							"switch":	61,
							"types":	[[], [], [1], [], [], [], [703], [], [641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639], [], [], [640]],
							"begin_line":	1874,
							"begin_column":	4,
							"end_line":	1874,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L1874\", 0))\n    do_exit(1);\n", "_IO_putc(1, 0)", "__sysv_signal(1, 0)", "__sysv_signal(1, abort_gzip_signal)", "__sysv_signal(1, bi_init)", "__tolower_l(1, 0)", "__toupper_l(1, 0)", "clock_adjtime(1, 0)", "clock_getcpuclockid(1, 0)", "clock_getres(1, 0)", "clock_gettime(1, 0)", "clock_settime(1, 0)", "copy(1, 0)", "copy(1, 1)", "copy(1, ascii)", "copy(1, block_mode)", "copy(1, decompress)", "copy(1, decrypt)", "copy(1, do_lzw)", "copy(1, exit_code)", "copy(1, exiting_signal)", "copy(1, force)", "copy(1, foreground)", "copy(1, ifd)", "copy(1, last_member)", "copy(1, level)", "copy(1, list)", "copy(1, maxbits)", "copy(1, method)", "copy(1, no_name)", "copy(1, no_time)", "copy(1, ofd)", "copy(1, part_nb)", "copy(1, quiet)", "copy(1, recursive)", "copy(1, remove_ofname_fd)", "copy(1, save_orig_name)", "copy(1, test)", "copy(1, to_stdout)", "copy(1, verbose)", "ct_tally(1, 0)", "ct_tally(1, 1)", "ct_tally(1, ascii)", "ct_tally(1, block_mode)", "ct_tally(1, decompress)", "ct_tally(1, decrypt)", "ct_tally(1, do_lzw)", "ct_tally(1, exit_code)", "ct_tally(1, exiting_signal)", "ct_tally(1, force)", "ct_tally(1, foreground)", "ct_tally(1, ifd)", "ct_tally(1, last_member)", "ct_tally(1, level)", "ct_tally(1, list)", "ct_tally(1, maxbits)", "ct_tally(1, method)", "ct_tally(1, no_name)", "ct_tally(1, no_time)", "ct_tally(1, ofd)", "ct_tally(1, part_nb)", "ct_tally(1, quiet)", "ct_tally(1, recursive)", "ct_tally(1, remove_ofname_fd)", "ct_tally(1, save_orig_name)", "ct_tally(1, test)", "ct_tally(1, to_stdout)", "ct_tally(1, verbose)", "daemon(1, 0)", "daemon(1, 1)", "daemon(1, ascii)", "daemon(1, block_mode)", "daemon(1, decompress)", "daemon(1, decrypt)", "daemon(1, do_lzw)", "daemon(1, exit_code)", "daemon(1, exiting_signal)", "daemon(1, force)", "daemon(1, foreground)", "daemon(1, ifd)", "daemon(1, last_member)", "daemon(1, level)", "daemon(1, list)", "daemon(1, maxbits)", "daemon(1, method)", "daemon(1, no_name)", "daemon(1, no_time)", "daemon(1, ofd)", "daemon(1, part_nb)", "daemon(1, quiet)", "daemon(1, recursive)", "daemon(1, remove_ofname_fd)", "daemon(1, save_orig_name)", "daemon(1, test)", "daemon(1, to_stdout)", "daemon(1, verbose)", "div(1, 0)", "div(1, 1)", "div(1, ascii)", "div(1, block_mode)", "div(1, decompress)", "div(1, decrypt)", "div(1, do_lzw)", "div(1, exit_code)", "div(1, exiting_signal)", "div(1, force)", "div(1, foreground)", "div(1, ifd)", "div(1, last_member)", "div(1, level)", "div(1, list)", "div(1, maxbits)", "div(1, method)", "div(1, no_name)", "div(1, no_time)", "div(1, ofd)", "div(1, part_nb)", "div(1, quiet)", "div(1, recursive)", "div(1, remove_ofname_fd)", "div(1, save_orig_name)", "div(1, test)", "div(1, to_stdout)", "div(1, verbose)", "do_list(1, 0)", "do_list(1, 1)", "do_list(1, ascii)", "do_list(1, block_mode)", "do_list(1, decompress)", "do_list(1, decrypt)", "do_list(1, do_lzw)", "do_list(1, exit_code)", "do_list(1, exiting_signal)", "do_list(1, force)", "do_list(1, foreground)", "do_list(1, ifd)", "do_list(1, last_member)", "do_list(1, level)", "do_list(1, list)", "do_list(1, maxbits)", "do_list(1, method)", "do_list(1, no_name)", "do_list(1, no_time)", "do_list(1, ofd)", "do_list(1, part_nb)", "do_list(1, quiet)", "do_list(1, recursive)", "do_list(1, remove_ofname_fd)", "do_list(1, save_orig_name)", "do_list(1, test)", "do_list(1, to_stdout)", "do_list(1, verbose)", "dup2(1, 0)", "dup2(1, 1)", "dup2(1, ascii)", "dup2(1, block_mode)", "dup2(1, decompress)", "dup2(1, decrypt)", "dup2(1, do_lzw)", "dup2(1, exit_code)", "dup2(1, exiting_signal)", "dup2(1, force)", "dup2(1, foreground)", "dup2(1, ifd)", "dup2(1, last_member)", "dup2(1, level)", "dup2(1, list)", "dup2(1, maxbits)", "dup2(1, method)", "dup2(1, no_name)", "dup2(1, no_time)", "dup2(1, ofd)", "dup2(1, part_nb)", "dup2(1, quiet)", "dup2(1, recursive)", "dup2(1, remove_ofname_fd)", "dup2(1, save_orig_name)", "dup2(1, test)", "dup2(1, to_stdout)", "dup2(1, verbose)", "fchmod(1, 0)", "fchmod(1, 1)", "fchmod(1, inptr)", "fchmod(1, insize)", "fchmod(1, outcnt)", "fdopen(1, 0)", "fpathconf(1, 0)", "fpathconf(1, 1)", "fpathconf(1, ascii)", "fpathconf(1, block_mode)", "fpathconf(1, decompress)", "fpathconf(1, decrypt)", "fpathconf(1, do_lzw)", "fpathconf(1, exit_code)", "fpathconf(1, exiting_signal)", "fpathconf(1, force)", "fpathconf(1, foreground)", "fpathconf(1, ifd)", "fpathconf(1, last_member)", "fpathconf(1, level)", "fpathconf(1, list)", "fpathconf(1, maxbits)", "fpathconf(1, method)", "fpathconf(1, no_name)", "fpathconf(1, no_time)", "fpathconf(1, ofd)", "fpathconf(1, part_nb)", "fpathconf(1, quiet)", "fpathconf(1, recursive)", "fpathconf(1, remove_ofname_fd)", "fpathconf(1, save_orig_name)", "fpathconf(1, test)", "fpathconf(1, to_stdout)", "fpathconf(1, verbose)", "fputc(1, 0)", "fputc_unlocked(1, 0)", "fstat(1, 0)", "fstat64(1, 0)", "ftruncate(1, 0)", "ftruncate(1, 1)", "ftruncate(1, bytes_in)", "ftruncate(1, bytes_out)", "ftruncate(1, header_bytes)", "ftruncate(1, ifile_size)", "ftruncate(1, total_in)", "ftruncate(1, total_out)", "ftruncate64(1, 0)", "ftruncate64(1, 1)", "ftruncate64(1, bytes_in)", "ftruncate64(1, bytes_out)", "ftruncate64(1, header_bytes)", "ftruncate64(1, ifile_size)", "ftruncate64(1, total_in)", "ftruncate64(1, total_out)", "futimens(1, 0)", "getgroups(1, 0)", "isalnum_l(1, 0)", "isalpha_l(1, 0)", "isblank_l(1, 0)", "iscntrl_l(1, 0)", "isctype(1, 0)", "isctype(1, 1)", "isctype(1, ascii)", "isctype(1, block_mode)", "isctype(1, decompress)", "isctype(1, decrypt)", "isctype(1, do_lzw)", "isctype(1, exit_code)", "isctype(1, exiting_signal)", "isctype(1, force)", "isctype(1, foreground)", "isctype(1, ifd)", "isctype(1, last_member)", "isctype(1, level)", "isctype(1, list)", "isctype(1, maxbits)", "isctype(1, method)", "isctype(1, no_name)", "isctype(1, no_time)", "isctype(1, ofd)", "isctype(1, part_nb)", "isctype(1, quiet)", "isctype(1, recursive)", "isctype(1, remove_ofname_fd)", "isctype(1, save_orig_name)", "isctype(1, test)", "isctype(1, to_stdout)", "isctype(1, verbose)", "isdigit_l(1, 0)", "isgraph_l(1, 0)", "islower_l(1, 0)", "isprint_l(1, 0)", "ispunct_l(1, 0)", "isspace_l(1, 0)", "isupper_l(1, 0)", "isxdigit_l(1, 0)", "kill(1, 0)", "kill(1, 1)", "kill(1, ascii)", "kill(1, block_mode)", "kill(1, decompress)", "kill(1, decrypt)", "kill(1, do_lzw)", "kill(1, exit_code)", "kill(1, exiting_signal)", "kill(1, force)", "kill(1, foreground)", "kill(1, ifd)", "kill(1, last_member)", "kill(1, level)", "kill(1, list)", "kill(1, maxbits)", "kill(1, method)", "kill(1, no_name)", "kill(1, no_time)", "kill(1, ofd)", "kill(1, part_nb)", "kill(1, quiet)", "kill(1, recursive)", "kill(1, remove_ofname_fd)", "kill(1, save_orig_name)", "kill(1, test)", "kill(1, to_stdout)", "kill(1, verbose)", "killpg(1, 0)", "killpg(1, 1)", "killpg(1, ascii)", "killpg(1, block_mode)", "killpg(1, decompress)", "killpg(1, decrypt)", "killpg(1, do_lzw)", "killpg(1, exit_code)", "killpg(1, exiting_signal)", "killpg(1, force)", "killpg(1, foreground)", "killpg(1, ifd)", "killpg(1, last_member)", "killpg(1, level)", "killpg(1, list)", "killpg(1, maxbits)", "killpg(1, method)", "killpg(1, no_name)", "killpg(1, no_time)", "killpg(1, ofd)", "killpg(1, part_nb)", "killpg(1, quiet)", "killpg(1, recursive)", "killpg(1, remove_ofname_fd)", "killpg(1, save_orig_name)", "killpg(1, test)", "killpg(1, to_stdout)", "killpg(1, verbose)", "lm_init(1, 0)", "lzw(1, 0)", "lzw(1, 1)", "lzw(1, ascii)", "lzw(1, block_mode)", "lzw(1, decompress)", "lzw(1, decrypt)", "lzw(1, do_lzw)", "lzw(1, exit_code)", "lzw(1, exiting_signal)", "lzw(1, force)", "lzw(1, foreground)", "lzw(1, ifd)", "lzw(1, last_member)", "lzw(1, level)", "lzw(1, list)", "lzw(1, maxbits)", "lzw(1, method)", "lzw(1, no_name)", "lzw(1, no_time)", "lzw(1, ofd)", "lzw(1, part_nb)", "lzw(1, quiet)", "lzw(1, recursive)", "lzw(1, remove_ofname_fd)", "lzw(1, save_orig_name)", "lzw(1, test)", "lzw(1, to_stdout)", "lzw(1, verbose)", "main(1, 0)", "main(1, args)", "psignal(1, 0)", "putc(1, 0)", "putc_unlocked(1, 0)", "putw(1, 0)", "send_bits(1, 0)", "send_bits(1, 1)", "send_bits(1, ascii)", "send_bits(1, block_mode)", "send_bits(1, decompress)", "send_bits(1, decrypt)", "send_bits(1, do_lzw)", "send_bits(1, exit_code)", "send_bits(1, exiting_signal)", "send_bits(1, force)", "send_bits(1, foreground)", "send_bits(1, ifd)", "send_bits(1, last_member)", "send_bits(1, level)", "send_bits(1, list)", "send_bits(1, maxbits)", "send_bits(1, method)", "send_bits(1, no_name)", "send_bits(1, no_time)", "send_bits(1, ofd)", "send_bits(1, part_nb)", "send_bits(1, quiet)", "send_bits(1, recursive)", "send_bits(1, remove_ofname_fd)", "send_bits(1, save_orig_name)", "send_bits(1, test)", "send_bits(1, to_stdout)", "send_bits(1, verbose)", "setpgid(1, 0)", "setpgid(1, 1)", "setpgid(1, ascii)", "setpgid(1, block_mode)", "setpgid(1, decompress)", "setpgid(1, decrypt)", "setpgid(1, do_lzw)", "setpgid(1, exit_code)", "setpgid(1, exiting_signal)", "setpgid(1, force)", "setpgid(1, foreground)", "setpgid(1, ifd)", "setpgid(1, last_member)", "setpgid(1, level)", "setpgid(1, list)", "setpgid(1, maxbits)", "setpgid(1, method)", "setpgid(1, no_name)", "setpgid(1, no_time)", "setpgid(1, ofd)", "setpgid(1, part_nb)", "setpgid(1, quiet)", "setpgid(1, recursive)", "setpgid(1, remove_ofname_fd)", "setpgid(1, save_orig_name)", "setpgid(1, test)", "setpgid(1, to_stdout)", "setpgid(1, verbose)", "siginterrupt(1, 0)", "siginterrupt(1, 1)", "siginterrupt(1, ascii)", "siginterrupt(1, block_mode)", "siginterrupt(1, decompress)", "siginterrupt(1, decrypt)", "siginterrupt(1, do_lzw)", "siginterrupt(1, exit_code)", "siginterrupt(1, exiting_signal)", "siginterrupt(1, force)", "siginterrupt(1, foreground)", "siginterrupt(1, ifd)", "siginterrupt(1, last_member)", "siginterrupt(1, level)", "siginterrupt(1, list)", "siginterrupt(1, maxbits)", "siginterrupt(1, method)", "siginterrupt(1, no_name)", "siginterrupt(1, no_time)", "siginterrupt(1, ofd)", "siginterrupt(1, part_nb)", "siginterrupt(1, quiet)", "siginterrupt(1, recursive)", "siginterrupt(1, remove_ofname_fd)", "siginterrupt(1, save_orig_name)", "siginterrupt(1, test)", "siginterrupt(1, to_stdout)", "siginterrupt(1, verbose)", "signal(1, 0)", "signal(1, abort_gzip_signal)", "signal(1, bi_init)", "sigset(1, 0)", "sigset(1, abort_gzip_signal)", "sigset(1, bi_init)", "ssignal(1, 0)", "ssignal(1, abort_gzip_signal)", "ssignal(1, bi_init)", "strerror_l(1, 0)", "sysv_signal(1, 0)", "sysv_signal(1, abort_gzip_signal)", "sysv_signal(1, bi_init)", "tcsetpgrp(1, 0)", "tcsetpgrp(1, 1)", "tcsetpgrp(1, ascii)", "tcsetpgrp(1, block_mode)", "tcsetpgrp(1, decompress)", "tcsetpgrp(1, decrypt)", "tcsetpgrp(1, do_lzw)", "tcsetpgrp(1, exit_code)", "tcsetpgrp(1, exiting_signal)", "tcsetpgrp(1, force)", "tcsetpgrp(1, foreground)", "tcsetpgrp(1, ifd)", "tcsetpgrp(1, last_member)", "tcsetpgrp(1, level)", "tcsetpgrp(1, list)", "tcsetpgrp(1, maxbits)", "tcsetpgrp(1, method)", "tcsetpgrp(1, no_name)", "tcsetpgrp(1, no_time)", "tcsetpgrp(1, ofd)", "tcsetpgrp(1, part_nb)", "tcsetpgrp(1, quiet)", "tcsetpgrp(1, recursive)", "tcsetpgrp(1, remove_ofname_fd)", "tcsetpgrp(1, save_orig_name)", "tcsetpgrp(1, test)", "tcsetpgrp(1, to_stdout)", "tcsetpgrp(1, verbose)", "tolower_l(1, 0)", "toupper_l(1, 0)", "treat_dir(1, 0)", "treat_dir(1, env)", "treat_dir(1, program_name)", "treat_dir(1, z_suffix)", "ungetc(1, 0)", "unlzh(1, 0)", "unlzh(1, 1)", "unlzh(1, ascii)", "unlzh(1, block_mode)", "unlzh(1, decompress)", "unlzh(1, decrypt)", "unlzh(1, do_lzw)", "unlzh(1, exit_code)", "unlzh(1, exiting_signal)", "unlzh(1, force)", "unlzh(1, foreground)", "unlzh(1, ifd)", "unlzh(1, last_member)", "unlzh(1, level)", "unlzh(1, list)", "unlzh(1, maxbits)", "unlzh(1, method)", "unlzh(1, no_name)", "unlzh(1, no_time)", "unlzh(1, ofd)", "unlzh(1, part_nb)", "unlzh(1, quiet)", "unlzh(1, recursive)", "unlzh(1, remove_ofname_fd)", "unlzh(1, save_orig_name)", "unlzh(1, test)", "unlzh(1, to_stdout)", "unlzh(1, verbose)", "unlzw(1, 0)", "unlzw(1, 1)", "unlzw(1, ascii)", "unlzw(1, block_mode)", "unlzw(1, decompress)", "unlzw(1, decrypt)", "unlzw(1, do_lzw)", "unlzw(1, exit_code)", "unlzw(1, exiting_signal)", "unlzw(1, force)", "unlzw(1, foreground)", "unlzw(1, ifd)", "unlzw(1, last_member)", "unlzw(1, level)", "unlzw(1, list)", "unlzw(1, maxbits)", "unlzw(1, method)", "unlzw(1, no_name)", "unlzw(1, no_time)", "unlzw(1, ofd)", "unlzw(1, part_nb)", "unlzw(1, quiet)", "unlzw(1, recursive)", "unlzw(1, remove_ofname_fd)", "unlzw(1, save_orig_name)", "unlzw(1, test)", "unlzw(1, to_stdout)", "unlzw(1, verbose)", "unpack(1, 0)", "unpack(1, 1)", "unpack(1, ascii)", "unpack(1, block_mode)", "unpack(1, decompress)", "unpack(1, decrypt)", "unpack(1, do_lzw)", "unpack(1, exit_code)", "unpack(1, exiting_signal)", "unpack(1, force)", "unpack(1, foreground)", "unpack(1, ifd)", "unpack(1, last_member)", "unpack(1, level)", "unpack(1, list)", "unpack(1, maxbits)", "unpack(1, method)", "unpack(1, no_name)", "unpack(1, no_time)", "unpack(1, ofd)", "unpack(1, part_nb)", "unpack(1, quiet)", "unpack(1, recursive)", "unpack(1, remove_ofname_fd)", "unpack(1, save_orig_name)", "unpack(1, test)", "unpack(1, to_stdout)", "unpack(1, verbose)", "unzip(1, 0)", "unzip(1, 1)", "unzip(1, ascii)", "unzip(1, block_mode)", "unzip(1, decompress)", "unzip(1, decrypt)", "unzip(1, do_lzw)", "unzip(1, exit_code)", "unzip(1, exiting_signal)", "unzip(1, force)", "unzip(1, foreground)", "unzip(1, ifd)", "unzip(1, last_member)", "unzip(1, level)", "unzip(1, list)", "unzip(1, maxbits)", "unzip(1, method)", "unzip(1, no_name)", "unzip(1, no_time)", "unzip(1, ofd)", "unzip(1, part_nb)", "unzip(1, quiet)", "unzip(1, recursive)", "unzip(1, remove_ofname_fd)", "unzip(1, save_orig_name)", "unzip(1, test)", "unzip(1, to_stdout)", "unzip(1, verbose)", "zip(1, 0)", "zip(1, 1)", "zip(1, ascii)", "zip(1, block_mode)", "zip(1, decompress)", "zip(1, decrypt)", "zip(1, do_lzw)", "zip(1, exit_code)", "zip(1, exiting_signal)", "zip(1, force)", "zip(1, foreground)", "zip(1, ifd)", "zip(1, last_member)", "zip(1, level)", "zip(1, list)", "zip(1, maxbits)", "zip(1, method)", "zip(1, no_name)", "zip(1, no_time)", "zip(1, ofd)", "zip(1, part_nb)", "zip(1, quiet)", "zip(1, recursive)", "zip(1, remove_ofname_fd)", "zip(1, save_orig_name)", "zip(1, test)", "zip(1, to_stdout)", "zip(1, verbose)", "{\n}\n", "_Exit(1)", "__getpgid(1)", "_exit(1)", "_tolower(1)", "_toupper(1)", "abort_gzip_signal(1)", "abs(1)", "bi_init(1)", "check_zipfile(1)", "close(1)", "do_exit(1)", "dup(1)", "dysize(1)", "exit(1)", "fchdir(1)", "fdatasync(1)", "fdopendir(1)", "ffs(1)", "fill_inbuf(1)", "fsync(1)", "get_method(1)", "getpgid(1)", "getsid(1)", "grantpt(1)", "gsignal(1)", "isalnum(1)", "isalpha(1)", "isascii(1)", "isatty(1)", "isblank(1)", "iscntrl(1)", "isdigit(1)", "isgraph(1)", "islower(1)", "isprint(1)", "ispunct(1)", "isspace(1)", "isupper(1)", "isxdigit(1)", "nice(1)", "posix_openpt(1)", "ptsname(1)", "putchar(1)", "putchar_unlocked(1)", "quick_exit(1)", "raise(1)", "sigblock(1)", "sighold(1)", "sigignore(1)", "sigpause(1)", "sigrelse(1)", "sigsetmask(1)", "strerror(1)", "strsignal(1)", "syncfs(1)", "sysconf(1)", "tcgetpgrp(1)", "toascii(1)", "tolower(1)", "toupper(1)", "ttyname(1)", "unlockpt(1)", "do_exit((0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[]
								}, {
									"case":	2,
									"scores":	[-5.103982737161795]
								}, {
									"case":	3,
									"scores":	[-5.103982737161795]
								}, {
									"case":	4,
									"scores":	[-5.103982737161795]
								}, {
									"case":	5,
									"scores":	[-5.103982737161795]
								}, {
									"case":	6,
									"scores":	[-5.103982737161795]
								}, {
									"case":	7,
									"scores":	[-5.103982737161795]
								}, {
									"case":	8,
									"scores":	[-5.103982737161795]
								}, {
									"case":	9,
									"scores":	[-5.103982737161795]
								}, {
									"case":	10,
									"scores":	[-5.103982737161795]
								}, {
									"case":	11,
									"scores":	[-5.103982737161795]
								}, {
									"case":	12,
									"scores":	[-5.103982737161795]
								}, {
									"case":	13,
									"scores":	[-5.103982737161795]
								}, {
									"case":	14,
									"scores":	[-5.103982737161795]
								}, {
									"case":	15,
									"scores":	[-5.103982737161795]
								}, {
									"case":	16,
									"scores":	[-5.103982737161795]
								}, {
									"case":	17,
									"scores":	[-5.103982737161795]
								}, {
									"case":	18,
									"scores":	[-5.103982737161795]
								}, {
									"case":	19,
									"scores":	[-5.103982737161795]
								}, {
									"case":	20,
									"scores":	[-5.103982737161795]
								}, {
									"case":	21,
									"scores":	[-5.103982737161795]
								}, {
									"case":	22,
									"scores":	[-5.103982737161795]
								}, {
									"case":	23,
									"scores":	[-5.103982737161795]
								}, {
									"case":	24,
									"scores":	[-5.103982737161795]
								}, {
									"case":	25,
									"scores":	[-5.103982737161795]
								}, {
									"case":	26,
									"scores":	[-5.103982737161795]
								}, {
									"case":	27,
									"scores":	[-5.103982737161795]
								}, {
									"case":	28,
									"scores":	[-5.103982737161795]
								}, {
									"case":	29,
									"scores":	[-5.103982737161795]
								}, {
									"case":	30,
									"scores":	[-5.103982737161795]
								}, {
									"case":	31,
									"scores":	[-5.103982737161795]
								}, {
									"case":	32,
									"scores":	[-5.103982737161795]
								}, {
									"case":	33,
									"scores":	[-5.103982737161795]
								}, {
									"case":	34,
									"scores":	[-5.103982737161795]
								}, {
									"case":	35,
									"scores":	[-5.103982737161795]
								}, {
									"case":	36,
									"scores":	[-5.103982737161795]
								}, {
									"case":	37,
									"scores":	[-5.103982737161795]
								}, {
									"case":	38,
									"scores":	[-5.103982737161795]
								}, {
									"case":	39,
									"scores":	[-5.103982737161795]
								}, {
									"case":	40,
									"scores":	[-5.103982737161795]
								}, {
									"case":	41,
									"scores":	[-5.103982737161795]
								}, {
									"case":	42,
									"scores":	[-5.103982737161795]
								}, {
									"case":	43,
									"scores":	[-5.103982737161795]
								}, {
									"case":	44,
									"scores":	[-5.103982737161795]
								}, {
									"case":	45,
									"scores":	[-5.103982737161795]
								}, {
									"case":	46,
									"scores":	[-5.103982737161795]
								}, {
									"case":	47,
									"scores":	[-5.103982737161795]
								}, {
									"case":	48,
									"scores":	[-5.103982737161795]
								}, {
									"case":	49,
									"scores":	[-5.103982737161795]
								}, {
									"case":	50,
									"scores":	[-5.103982737161795]
								}, {
									"case":	51,
									"scores":	[-5.103982737161795]
								}, {
									"case":	52,
									"scores":	[-5.103982737161795]
								}, {
									"case":	53,
									"scores":	[-5.103982737161795]
								}, {
									"case":	54,
									"scores":	[-5.103982737161795]
								}, {
									"case":	55,
									"scores":	[-5.103982737161795]
								}, {
									"case":	56,
									"scores":	[-5.103982737161795]
								}, {
									"case":	57,
									"scores":	[-5.103982737161795]
								}, {
									"case":	58,
									"scores":	[-5.103982737161795]
								}, {
									"case":	59,
									"scores":	[-5.103982737161795]
								}, {
									"case":	60,
									"scores":	[-5.103982737161795]
								}, {
									"case":	61,
									"scores":	[-5.103982737161795]
								}, {
									"case":	62,
									"scores":	[-5.103982737161795]
								}, {
									"case":	63,
									"scores":	[-5.103982737161795]
								}, {
									"case":	64,
									"scores":	[-5.103982737161795]
								}, {
									"case":	65,
									"scores":	[-5.103982737161795]
								}, {
									"case":	66,
									"scores":	[-5.103982737161795]
								}, {
									"case":	67,
									"scores":	[-5.103982737161795]
								}, {
									"case":	68,
									"scores":	[-5.103982737161795]
								}, {
									"case":	69,
									"scores":	[-5.103982737161795]
								}, {
									"case":	70,
									"scores":	[-5.103982737161795]
								}, {
									"case":	71,
									"scores":	[-5.103982737161795]
								}, {
									"case":	72,
									"scores":	[-5.103982737161795]
								}, {
									"case":	73,
									"scores":	[-5.103982737161795]
								}, {
									"case":	74,
									"scores":	[-5.103982737161795]
								}, {
									"case":	75,
									"scores":	[-5.103982737161795]
								}, {
									"case":	76,
									"scores":	[-5.103982737161795]
								}, {
									"case":	77,
									"scores":	[-5.103982737161795]
								}, {
									"case":	78,
									"scores":	[-5.103982737161795]
								}, {
									"case":	79,
									"scores":	[-5.103982737161795]
								}, {
									"case":	80,
									"scores":	[-5.103982737161795]
								}, {
									"case":	81,
									"scores":	[-5.103982737161795]
								}, {
									"case":	82,
									"scores":	[-5.103982737161795]
								}, {
									"case":	83,
									"scores":	[-5.103982737161795]
								}, {
									"case":	84,
									"scores":	[-5.103982737161795]
								}, {
									"case":	85,
									"scores":	[-5.103982737161795]
								}, {
									"case":	86,
									"scores":	[-5.103982737161795]
								}, {
									"case":	87,
									"scores":	[-5.103982737161795]
								}, {
									"case":	88,
									"scores":	[-5.103982737161795]
								}, {
									"case":	89,
									"scores":	[-5.103982737161795]
								}, {
									"case":	90,
									"scores":	[-5.103982737161795]
								}, {
									"case":	91,
									"scores":	[-5.103982737161795]
								}, {
									"case":	92,
									"scores":	[-5.103982737161795]
								}, {
									"case":	93,
									"scores":	[-5.103982737161795]
								}, {
									"case":	94,
									"scores":	[-5.103982737161795]
								}, {
									"case":	95,
									"scores":	[-5.103982737161795]
								}, {
									"case":	96,
									"scores":	[-5.103982737161795]
								}, {
									"case":	97,
									"scores":	[-5.103982737161795]
								}, {
									"case":	98,
									"scores":	[-5.103982737161795]
								}, {
									"case":	99,
									"scores":	[-5.103982737161795]
								}, {
									"case":	100,
									"scores":	[-5.103982737161795]
								}, {
									"case":	101,
									"scores":	[-5.103982737161795]
								}, {
									"case":	102,
									"scores":	[-5.103982737161795]
								}, {
									"case":	103,
									"scores":	[-5.103982737161795]
								}, {
									"case":	104,
									"scores":	[-5.103982737161795]
								}, {
									"case":	105,
									"scores":	[-5.103982737161795]
								}, {
									"case":	106,
									"scores":	[-5.103982737161795]
								}, {
									"case":	107,
									"scores":	[-5.103982737161795]
								}, {
									"case":	108,
									"scores":	[-5.103982737161795]
								}, {
									"case":	109,
									"scores":	[-5.103982737161795]
								}, {
									"case":	110,
									"scores":	[-5.103982737161795]
								}, {
									"case":	111,
									"scores":	[-5.103982737161795]
								}, {
									"case":	112,
									"scores":	[-5.103982737161795]
								}, {
									"case":	113,
									"scores":	[-5.103982737161795]
								}, {
									"case":	114,
									"scores":	[-5.103982737161795]
								}, {
									"case":	115,
									"scores":	[-5.103982737161795]
								}, {
									"case":	116,
									"scores":	[-5.103982737161795]
								}, {
									"case":	117,
									"scores":	[-5.103982737161795]
								}, {
									"case":	118,
									"scores":	[-5.103982737161795]
								}, {
									"case":	119,
									"scores":	[-5.103982737161795]
								}, {
									"case":	120,
									"scores":	[-5.103982737161795]
								}, {
									"case":	121,
									"scores":	[-5.103982737161795]
								}, {
									"case":	122,
									"scores":	[-5.103982737161795]
								}, {
									"case":	123,
									"scores":	[-5.103982737161795]
								}, {
									"case":	124,
									"scores":	[-5.103982737161795]
								}, {
									"case":	125,
									"scores":	[-5.103982737161795]
								}, {
									"case":	126,
									"scores":	[-5.103982737161795]
								}, {
									"case":	127,
									"scores":	[-5.103982737161795]
								}, {
									"case":	128,
									"scores":	[-5.103982737161795]
								}, {
									"case":	129,
									"scores":	[-5.103982737161795]
								}, {
									"case":	130,
									"scores":	[-5.103982737161795]
								}, {
									"case":	131,
									"scores":	[-5.103982737161795]
								}, {
									"case":	132,
									"scores":	[-5.103982737161795]
								}, {
									"case":	133,
									"scores":	[-5.103982737161795]
								}, {
									"case":	134,
									"scores":	[-5.103982737161795]
								}, {
									"case":	135,
									"scores":	[-5.103982737161795]
								}, {
									"case":	136,
									"scores":	[-5.103982737161795]
								}, {
									"case":	137,
									"scores":	[-5.103982737161795]
								}, {
									"case":	138,
									"scores":	[-5.103982737161795]
								}, {
									"case":	139,
									"scores":	[-5.103982737161795]
								}, {
									"case":	140,
									"scores":	[-5.103982737161795]
								}, {
									"case":	141,
									"scores":	[-5.103982737161795]
								}, {
									"case":	142,
									"scores":	[-5.103982737161795]
								}, {
									"case":	143,
									"scores":	[-5.103982737161795]
								}, {
									"case":	144,
									"scores":	[-5.103982737161795]
								}, {
									"case":	145,
									"scores":	[-5.103982737161795]
								}, {
									"case":	146,
									"scores":	[-5.103982737161795]
								}, {
									"case":	147,
									"scores":	[-5.103982737161795]
								}, {
									"case":	148,
									"scores":	[-5.103982737161795]
								}, {
									"case":	149,
									"scores":	[-5.103982737161795]
								}, {
									"case":	150,
									"scores":	[-5.103982737161795]
								}, {
									"case":	151,
									"scores":	[-5.103982737161795]
								}, {
									"case":	152,
									"scores":	[-5.103982737161795]
								}, {
									"case":	153,
									"scores":	[-5.103982737161795]
								}, {
									"case":	154,
									"scores":	[-5.103982737161795]
								}, {
									"case":	155,
									"scores":	[-5.103982737161795]
								}, {
									"case":	156,
									"scores":	[-5.103982737161795]
								}, {
									"case":	157,
									"scores":	[-5.103982737161795]
								}, {
									"case":	158,
									"scores":	[-5.103982737161795]
								}, {
									"case":	159,
									"scores":	[-5.103982737161795]
								}, {
									"case":	160,
									"scores":	[-5.103982737161795]
								}, {
									"case":	161,
									"scores":	[-5.103982737161795]
								}, {
									"case":	162,
									"scores":	[-5.103982737161795]
								}, {
									"case":	163,
									"scores":	[-5.103982737161795]
								}, {
									"case":	164,
									"scores":	[-5.103982737161795]
								}, {
									"case":	165,
									"scores":	[-5.103982737161795]
								}, {
									"case":	166,
									"scores":	[-5.103982737161795]
								}, {
									"case":	167,
									"scores":	[-5.103982737161795]
								}, {
									"case":	168,
									"scores":	[-5.103982737161795]
								}, {
									"case":	169,
									"scores":	[-5.103982737161795]
								}, {
									"case":	170,
									"scores":	[-5.103982737161795]
								}, {
									"case":	171,
									"scores":	[-5.103982737161795]
								}, {
									"case":	172,
									"scores":	[-5.103982737161795]
								}, {
									"case":	173,
									"scores":	[-5.103982737161795]
								}, {
									"case":	174,
									"scores":	[-5.103982737161795]
								}, {
									"case":	175,
									"scores":	[-5.103982737161795]
								}, {
									"case":	176,
									"scores":	[-5.103982737161795]
								}, {
									"case":	177,
									"scores":	[-5.103982737161795]
								}, {
									"case":	178,
									"scores":	[-5.103982737161795]
								}, {
									"case":	179,
									"scores":	[-5.103982737161795]
								}, {
									"case":	180,
									"scores":	[-5.103982737161795]
								}, {
									"case":	181,
									"scores":	[-5.103982737161795]
								}, {
									"case":	182,
									"scores":	[-5.103982737161795]
								}, {
									"case":	183,
									"scores":	[-5.103982737161795]
								}, {
									"case":	184,
									"scores":	[-5.103982737161795]
								}, {
									"case":	185,
									"scores":	[-5.103982737161795]
								}, {
									"case":	186,
									"scores":	[-5.103982737161795]
								}, {
									"case":	187,
									"scores":	[-5.103982737161795]
								}, {
									"case":	188,
									"scores":	[-5.103982737161795]
								}, {
									"case":	189,
									"scores":	[-5.103982737161795]
								}, {
									"case":	190,
									"scores":	[-5.103982737161795]
								}, {
									"case":	191,
									"scores":	[-5.103982737161795]
								}, {
									"case":	192,
									"scores":	[-5.103982737161795]
								}, {
									"case":	193,
									"scores":	[-5.103982737161795]
								}, {
									"case":	194,
									"scores":	[-5.103982737161795]
								}, {
									"case":	195,
									"scores":	[-5.103982737161795]
								}, {
									"case":	196,
									"scores":	[-5.103982737161795]
								}, {
									"case":	197,
									"scores":	[-5.103982737161795]
								}, {
									"case":	198,
									"scores":	[-5.103982737161795]
								}, {
									"case":	199,
									"scores":	[-5.103982737161795]
								}, {
									"case":	200,
									"scores":	[-5.103982737161795]
								}, {
									"case":	201,
									"scores":	[-5.103982737161795]
								}, {
									"case":	202,
									"scores":	[-5.103982737161795]
								}, {
									"case":	203,
									"scores":	[-5.103982737161795]
								}, {
									"case":	204,
									"scores":	[-5.103982737161795]
								}, {
									"case":	205,
									"scores":	[-5.103982737161795]
								}, {
									"case":	206,
									"scores":	[-5.103982737161795]
								}, {
									"case":	207,
									"scores":	[-5.103982737161795]
								}, {
									"case":	208,
									"scores":	[-5.103982737161795]
								}, {
									"case":	209,
									"scores":	[-5.103982737161795]
								}, {
									"case":	210,
									"scores":	[-5.103982737161795]
								}, {
									"case":	211,
									"scores":	[-5.103982737161795]
								}, {
									"case":	212,
									"scores":	[-5.103982737161795]
								}, {
									"case":	213,
									"scores":	[-5.103982737161795]
								}, {
									"case":	214,
									"scores":	[-5.103982737161795]
								}, {
									"case":	215,
									"scores":	[-5.103982737161795]
								}, {
									"case":	216,
									"scores":	[-5.103982737161795]
								}, {
									"case":	217,
									"scores":	[-5.103982737161795]
								}, {
									"case":	218,
									"scores":	[-5.103982737161795]
								}, {
									"case":	219,
									"scores":	[-5.103982737161795]
								}, {
									"case":	220,
									"scores":	[-5.103982737161795]
								}, {
									"case":	221,
									"scores":	[-5.103982737161795]
								}, {
									"case":	222,
									"scores":	[-5.103982737161795]
								}, {
									"case":	223,
									"scores":	[-5.103982737161795]
								}, {
									"case":	224,
									"scores":	[-5.103982737161795]
								}, {
									"case":	225,
									"scores":	[-5.103982737161795]
								}, {
									"case":	226,
									"scores":	[-5.103982737161795]
								}, {
									"case":	227,
									"scores":	[-5.103982737161795]
								}, {
									"case":	228,
									"scores":	[-5.103982737161795]
								}, {
									"case":	229,
									"scores":	[-5.103982737161795]
								}, {
									"case":	230,
									"scores":	[-5.103982737161795]
								}, {
									"case":	231,
									"scores":	[-5.103982737161795]
								}, {
									"case":	232,
									"scores":	[-5.103982737161795]
								}, {
									"case":	233,
									"scores":	[-5.103982737161795]
								}, {
									"case":	234,
									"scores":	[-5.103982737161795]
								}, {
									"case":	235,
									"scores":	[-5.103982737161795]
								}, {
									"case":	236,
									"scores":	[-5.103982737161795]
								}, {
									"case":	237,
									"scores":	[-5.103982737161795]
								}, {
									"case":	238,
									"scores":	[-5.103982737161795]
								}, {
									"case":	239,
									"scores":	[-5.103982737161795]
								}, {
									"case":	240,
									"scores":	[-5.103982737161795]
								}, {
									"case":	241,
									"scores":	[-5.103982737161795]
								}, {
									"case":	242,
									"scores":	[-5.103982737161795]
								}, {
									"case":	243,
									"scores":	[-5.103982737161795]
								}, {
									"case":	244,
									"scores":	[-5.103982737161795]
								}, {
									"case":	245,
									"scores":	[-5.103982737161795]
								}, {
									"case":	246,
									"scores":	[-5.103982737161795]
								}, {
									"case":	247,
									"scores":	[-5.103982737161795]
								}, {
									"case":	248,
									"scores":	[-5.103982737161795]
								}, {
									"case":	249,
									"scores":	[-5.103982737161795]
								}, {
									"case":	250,
									"scores":	[-5.103982737161795]
								}, {
									"case":	251,
									"scores":	[-5.103982737161795]
								}, {
									"case":	252,
									"scores":	[-5.103982737161795]
								}, {
									"case":	253,
									"scores":	[-5.103982737161795]
								}, {
									"case":	254,
									"scores":	[-5.103982737161795]
								}, {
									"case":	255,
									"scores":	[-5.103982737161795]
								}, {
									"case":	256,
									"scores":	[-5.103982737161795]
								}, {
									"case":	257,
									"scores":	[-5.103982737161795]
								}, {
									"case":	258,
									"scores":	[-5.103982737161795]
								}, {
									"case":	259,
									"scores":	[-5.103982737161795]
								}, {
									"case":	260,
									"scores":	[-5.103982737161795]
								}, {
									"case":	261,
									"scores":	[-5.103982737161795]
								}, {
									"case":	262,
									"scores":	[-5.103982737161795]
								}, {
									"case":	263,
									"scores":	[-5.103982737161795]
								}, {
									"case":	264,
									"scores":	[-5.103982737161795]
								}, {
									"case":	265,
									"scores":	[-5.103982737161795]
								}, {
									"case":	266,
									"scores":	[-5.103982737161795]
								}, {
									"case":	267,
									"scores":	[-5.103982737161795]
								}, {
									"case":	268,
									"scores":	[-5.103982737161795]
								}, {
									"case":	269,
									"scores":	[-5.103982737161795]
								}, {
									"case":	270,
									"scores":	[-5.103982737161795]
								}, {
									"case":	271,
									"scores":	[-5.103982737161795]
								}, {
									"case":	272,
									"scores":	[-5.103982737161795]
								}, {
									"case":	273,
									"scores":	[-5.103982737161795]
								}, {
									"case":	274,
									"scores":	[-5.103982737161795]
								}, {
									"case":	275,
									"scores":	[-5.103982737161795]
								}, {
									"case":	276,
									"scores":	[-5.103982737161795]
								}, {
									"case":	277,
									"scores":	[-5.103982737161795]
								}, {
									"case":	278,
									"scores":	[-5.103982737161795]
								}, {
									"case":	279,
									"scores":	[-5.103982737161795]
								}, {
									"case":	280,
									"scores":	[-5.103982737161795]
								}, {
									"case":	281,
									"scores":	[-5.103982737161795]
								}, {
									"case":	282,
									"scores":	[-5.103982737161795]
								}, {
									"case":	283,
									"scores":	[-5.103982737161795]
								}, {
									"case":	284,
									"scores":	[-5.103982737161795]
								}, {
									"case":	285,
									"scores":	[-5.103982737161795]
								}, {
									"case":	286,
									"scores":	[-5.103982737161795]
								}, {
									"case":	287,
									"scores":	[-5.103982737161795]
								}, {
									"case":	288,
									"scores":	[-5.103982737161795]
								}, {
									"case":	289,
									"scores":	[-5.103982737161795]
								}, {
									"case":	290,
									"scores":	[-5.103982737161795]
								}, {
									"case":	291,
									"scores":	[-5.103982737161795]
								}, {
									"case":	292,
									"scores":	[-5.103982737161795]
								}, {
									"case":	293,
									"scores":	[-5.103982737161795]
								}, {
									"case":	294,
									"scores":	[-5.103982737161795]
								}, {
									"case":	295,
									"scores":	[-5.103982737161795]
								}, {
									"case":	296,
									"scores":	[-5.103982737161795]
								}, {
									"case":	297,
									"scores":	[-5.103982737161795]
								}, {
									"case":	298,
									"scores":	[-5.103982737161795]
								}, {
									"case":	299,
									"scores":	[-5.103982737161795]
								}, {
									"case":	300,
									"scores":	[-5.103982737161795]
								}, {
									"case":	301,
									"scores":	[-5.103982737161795]
								}, {
									"case":	302,
									"scores":	[-5.103982737161795]
								}, {
									"case":	303,
									"scores":	[-5.103982737161795]
								}, {
									"case":	304,
									"scores":	[-5.103982737161795]
								}, {
									"case":	305,
									"scores":	[-5.103982737161795]
								}, {
									"case":	306,
									"scores":	[-5.103982737161795]
								}, {
									"case":	307,
									"scores":	[-5.103982737161795]
								}, {
									"case":	308,
									"scores":	[-5.103982737161795]
								}, {
									"case":	309,
									"scores":	[-5.103982737161795]
								}, {
									"case":	310,
									"scores":	[-5.103982737161795]
								}, {
									"case":	311,
									"scores":	[-5.103982737161795]
								}, {
									"case":	312,
									"scores":	[-5.103982737161795]
								}, {
									"case":	313,
									"scores":	[-5.103982737161795]
								}, {
									"case":	314,
									"scores":	[-5.103982737161795]
								}, {
									"case":	315,
									"scores":	[-5.103982737161795]
								}, {
									"case":	316,
									"scores":	[-5.103982737161795]
								}, {
									"case":	317,
									"scores":	[-5.103982737161795]
								}, {
									"case":	318,
									"scores":	[-5.103982737161795]
								}, {
									"case":	319,
									"scores":	[-5.103982737161795]
								}, {
									"case":	320,
									"scores":	[-5.103982737161795]
								}, {
									"case":	321,
									"scores":	[-5.103982737161795]
								}, {
									"case":	322,
									"scores":	[-5.103982737161795]
								}, {
									"case":	323,
									"scores":	[-5.103982737161795]
								}, {
									"case":	324,
									"scores":	[-5.103982737161795]
								}, {
									"case":	325,
									"scores":	[-5.103982737161795]
								}, {
									"case":	326,
									"scores":	[-5.103982737161795]
								}, {
									"case":	327,
									"scores":	[-5.103982737161795]
								}, {
									"case":	328,
									"scores":	[-5.103982737161795]
								}, {
									"case":	329,
									"scores":	[-5.103982737161795]
								}, {
									"case":	330,
									"scores":	[-5.103982737161795]
								}, {
									"case":	331,
									"scores":	[-5.103982737161795]
								}, {
									"case":	332,
									"scores":	[-5.103982737161795]
								}, {
									"case":	333,
									"scores":	[-5.103982737161795]
								}, {
									"case":	334,
									"scores":	[-5.103982737161795]
								}, {
									"case":	335,
									"scores":	[-5.103982737161795]
								}, {
									"case":	336,
									"scores":	[-5.103982737161795]
								}, {
									"case":	337,
									"scores":	[-5.103982737161795]
								}, {
									"case":	338,
									"scores":	[-5.103982737161795]
								}, {
									"case":	339,
									"scores":	[-5.103982737161795]
								}, {
									"case":	340,
									"scores":	[-5.103982737161795]
								}, {
									"case":	341,
									"scores":	[-5.103982737161795]
								}, {
									"case":	342,
									"scores":	[-5.103982737161795]
								}, {
									"case":	343,
									"scores":	[-5.103982737161795]
								}, {
									"case":	344,
									"scores":	[-5.103982737161795]
								}, {
									"case":	345,
									"scores":	[-5.103982737161795]
								}, {
									"case":	346,
									"scores":	[-5.103982737161795]
								}, {
									"case":	347,
									"scores":	[-5.103982737161795]
								}, {
									"case":	348,
									"scores":	[-5.103982737161795]
								}, {
									"case":	349,
									"scores":	[-5.103982737161795]
								}, {
									"case":	350,
									"scores":	[-5.103982737161795]
								}, {
									"case":	351,
									"scores":	[-5.103982737161795]
								}, {
									"case":	352,
									"scores":	[-5.103982737161795]
								}, {
									"case":	353,
									"scores":	[-5.103982737161795]
								}, {
									"case":	354,
									"scores":	[-5.103982737161795]
								}, {
									"case":	355,
									"scores":	[-5.103982737161795]
								}, {
									"case":	356,
									"scores":	[-5.103982737161795]
								}, {
									"case":	357,
									"scores":	[-5.103982737161795]
								}, {
									"case":	358,
									"scores":	[-5.103982737161795]
								}, {
									"case":	359,
									"scores":	[-5.103982737161795]
								}, {
									"case":	360,
									"scores":	[-5.103982737161795]
								}, {
									"case":	361,
									"scores":	[-5.103982737161795]
								}, {
									"case":	362,
									"scores":	[-5.103982737161795]
								}, {
									"case":	363,
									"scores":	[-5.103982737161795]
								}, {
									"case":	364,
									"scores":	[-5.103982737161795]
								}, {
									"case":	365,
									"scores":	[-5.103982737161795]
								}, {
									"case":	366,
									"scores":	[-5.103982737161795]
								}, {
									"case":	367,
									"scores":	[-5.103982737161795]
								}, {
									"case":	368,
									"scores":	[-5.103982737161795]
								}, {
									"case":	369,
									"scores":	[-5.103982737161795]
								}, {
									"case":	370,
									"scores":	[-5.103982737161795]
								}, {
									"case":	371,
									"scores":	[-5.103982737161795]
								}, {
									"case":	372,
									"scores":	[-5.103982737161795]
								}, {
									"case":	373,
									"scores":	[-5.103982737161795]
								}, {
									"case":	374,
									"scores":	[-5.103982737161795]
								}, {
									"case":	375,
									"scores":	[-5.103982737161795]
								}, {
									"case":	376,
									"scores":	[-5.103982737161795]
								}, {
									"case":	377,
									"scores":	[-5.103982737161795]
								}, {
									"case":	378,
									"scores":	[-5.103982737161795]
								}, {
									"case":	379,
									"scores":	[-5.103982737161795]
								}, {
									"case":	380,
									"scores":	[-5.103982737161795]
								}, {
									"case":	381,
									"scores":	[-5.103982737161795]
								}, {
									"case":	382,
									"scores":	[-5.103982737161795]
								}, {
									"case":	383,
									"scores":	[-5.103982737161795]
								}, {
									"case":	384,
									"scores":	[-5.103982737161795]
								}, {
									"case":	385,
									"scores":	[-5.103982737161795]
								}, {
									"case":	386,
									"scores":	[-5.103982737161795]
								}, {
									"case":	387,
									"scores":	[-5.103982737161795]
								}, {
									"case":	388,
									"scores":	[-5.103982737161795]
								}, {
									"case":	389,
									"scores":	[-5.103982737161795]
								}, {
									"case":	390,
									"scores":	[-5.103982737161795]
								}, {
									"case":	391,
									"scores":	[-5.103982737161795]
								}, {
									"case":	392,
									"scores":	[-5.103982737161795]
								}, {
									"case":	393,
									"scores":	[-5.103982737161795]
								}, {
									"case":	394,
									"scores":	[-5.103982737161795]
								}, {
									"case":	395,
									"scores":	[-5.103982737161795]
								}, {
									"case":	396,
									"scores":	[-5.103982737161795]
								}, {
									"case":	397,
									"scores":	[-5.103982737161795]
								}, {
									"case":	398,
									"scores":	[-5.103982737161795]
								}, {
									"case":	399,
									"scores":	[-5.103982737161795]
								}, {
									"case":	400,
									"scores":	[-5.103982737161795]
								}, {
									"case":	401,
									"scores":	[-5.103982737161795]
								}, {
									"case":	402,
									"scores":	[-5.103982737161795]
								}, {
									"case":	403,
									"scores":	[-5.103982737161795]
								}, {
									"case":	404,
									"scores":	[-5.103982737161795]
								}, {
									"case":	405,
									"scores":	[-5.103982737161795]
								}, {
									"case":	406,
									"scores":	[-5.103982737161795]
								}, {
									"case":	407,
									"scores":	[-5.103982737161795]
								}, {
									"case":	408,
									"scores":	[-5.103982737161795]
								}, {
									"case":	409,
									"scores":	[-5.103982737161795]
								}, {
									"case":	410,
									"scores":	[-5.103982737161795]
								}, {
									"case":	411,
									"scores":	[-5.103982737161795]
								}, {
									"case":	412,
									"scores":	[-5.103982737161795]
								}, {
									"case":	413,
									"scores":	[-5.103982737161795]
								}, {
									"case":	414,
									"scores":	[-5.103982737161795]
								}, {
									"case":	415,
									"scores":	[-5.103982737161795]
								}, {
									"case":	416,
									"scores":	[-5.103982737161795]
								}, {
									"case":	417,
									"scores":	[-5.103982737161795]
								}, {
									"case":	418,
									"scores":	[-5.103982737161795]
								}, {
									"case":	419,
									"scores":	[-5.103982737161795]
								}, {
									"case":	420,
									"scores":	[-5.103982737161795]
								}, {
									"case":	421,
									"scores":	[-5.103982737161795]
								}, {
									"case":	422,
									"scores":	[-5.103982737161795]
								}, {
									"case":	423,
									"scores":	[-5.103982737161795]
								}, {
									"case":	424,
									"scores":	[-5.103982737161795]
								}, {
									"case":	425,
									"scores":	[-5.103982737161795]
								}, {
									"case":	426,
									"scores":	[-5.103982737161795]
								}, {
									"case":	427,
									"scores":	[-5.103982737161795]
								}, {
									"case":	428,
									"scores":	[-5.103982737161795]
								}, {
									"case":	429,
									"scores":	[-5.103982737161795]
								}, {
									"case":	430,
									"scores":	[-5.103982737161795]
								}, {
									"case":	431,
									"scores":	[-5.103982737161795]
								}, {
									"case":	432,
									"scores":	[-5.103982737161795]
								}, {
									"case":	433,
									"scores":	[-5.103982737161795]
								}, {
									"case":	434,
									"scores":	[-5.103982737161795]
								}, {
									"case":	435,
									"scores":	[-5.103982737161795]
								}, {
									"case":	436,
									"scores":	[-5.103982737161795]
								}, {
									"case":	437,
									"scores":	[-5.103982737161795]
								}, {
									"case":	438,
									"scores":	[-5.103982737161795]
								}, {
									"case":	439,
									"scores":	[-5.103982737161795]
								}, {
									"case":	440,
									"scores":	[-5.103982737161795]
								}, {
									"case":	441,
									"scores":	[-5.103982737161795]
								}, {
									"case":	442,
									"scores":	[-5.103982737161795]
								}, {
									"case":	443,
									"scores":	[-5.103982737161795]
								}, {
									"case":	444,
									"scores":	[-5.103982737161795]
								}, {
									"case":	445,
									"scores":	[-5.103982737161795]
								}, {
									"case":	446,
									"scores":	[-5.103982737161795]
								}, {
									"case":	447,
									"scores":	[-5.103982737161795]
								}, {
									"case":	448,
									"scores":	[-5.103982737161795]
								}, {
									"case":	449,
									"scores":	[-5.103982737161795]
								}, {
									"case":	450,
									"scores":	[-5.103982737161795]
								}, {
									"case":	451,
									"scores":	[-5.103982737161795]
								}, {
									"case":	452,
									"scores":	[-5.103982737161795]
								}, {
									"case":	453,
									"scores":	[-5.103982737161795]
								}, {
									"case":	454,
									"scores":	[-5.103982737161795]
								}, {
									"case":	455,
									"scores":	[-5.103982737161795]
								}, {
									"case":	456,
									"scores":	[-5.103982737161795]
								}, {
									"case":	457,
									"scores":	[-5.103982737161795]
								}, {
									"case":	458,
									"scores":	[-5.103982737161795]
								}, {
									"case":	459,
									"scores":	[-5.103982737161795]
								}, {
									"case":	460,
									"scores":	[-5.103982737161795]
								}, {
									"case":	461,
									"scores":	[-5.103982737161795]
								}, {
									"case":	462,
									"scores":	[-5.103982737161795]
								}, {
									"case":	463,
									"scores":	[-5.103982737161795]
								}, {
									"case":	464,
									"scores":	[-5.103982737161795]
								}, {
									"case":	465,
									"scores":	[-5.103982737161795]
								}, {
									"case":	466,
									"scores":	[-5.103982737161795]
								}, {
									"case":	467,
									"scores":	[-5.103982737161795]
								}, {
									"case":	468,
									"scores":	[-5.103982737161795]
								}, {
									"case":	469,
									"scores":	[-5.103982737161795]
								}, {
									"case":	470,
									"scores":	[-5.103982737161795]
								}, {
									"case":	471,
									"scores":	[-5.103982737161795]
								}, {
									"case":	472,
									"scores":	[-5.103982737161795]
								}, {
									"case":	473,
									"scores":	[-5.103982737161795]
								}, {
									"case":	474,
									"scores":	[-5.103982737161795]
								}, {
									"case":	475,
									"scores":	[-5.103982737161795]
								}, {
									"case":	476,
									"scores":	[-5.103982737161795]
								}, {
									"case":	477,
									"scores":	[-5.103982737161795]
								}, {
									"case":	478,
									"scores":	[-5.103982737161795]
								}, {
									"case":	479,
									"scores":	[-5.103982737161795]
								}, {
									"case":	480,
									"scores":	[-5.103982737161795]
								}, {
									"case":	481,
									"scores":	[-5.103982737161795]
								}, {
									"case":	482,
									"scores":	[-5.103982737161795]
								}, {
									"case":	483,
									"scores":	[-5.103982737161795]
								}, {
									"case":	484,
									"scores":	[-5.103982737161795]
								}, {
									"case":	485,
									"scores":	[-5.103982737161795]
								}, {
									"case":	486,
									"scores":	[-5.103982737161795]
								}, {
									"case":	487,
									"scores":	[-5.103982737161795]
								}, {
									"case":	488,
									"scores":	[-5.103982737161795]
								}, {
									"case":	489,
									"scores":	[-5.103982737161795]
								}, {
									"case":	490,
									"scores":	[-5.103982737161795]
								}, {
									"case":	491,
									"scores":	[-5.103982737161795]
								}, {
									"case":	492,
									"scores":	[-5.103982737161795]
								}, {
									"case":	493,
									"scores":	[-5.103982737161795]
								}, {
									"case":	494,
									"scores":	[-5.103982737161795]
								}, {
									"case":	495,
									"scores":	[-5.103982737161795]
								}, {
									"case":	496,
									"scores":	[-5.103982737161795]
								}, {
									"case":	497,
									"scores":	[-5.103982737161795]
								}, {
									"case":	498,
									"scores":	[-5.103982737161795]
								}, {
									"case":	499,
									"scores":	[-5.103982737161795]
								}, {
									"case":	500,
									"scores":	[-5.103982737161795]
								}, {
									"case":	501,
									"scores":	[-5.103982737161795]
								}, {
									"case":	502,
									"scores":	[-5.103982737161795]
								}, {
									"case":	503,
									"scores":	[-5.103982737161795]
								}, {
									"case":	504,
									"scores":	[-5.103982737161795]
								}, {
									"case":	505,
									"scores":	[-5.103982737161795]
								}, {
									"case":	506,
									"scores":	[-5.103982737161795]
								}, {
									"case":	507,
									"scores":	[-5.103982737161795]
								}, {
									"case":	508,
									"scores":	[-5.103982737161795]
								}, {
									"case":	509,
									"scores":	[-5.103982737161795]
								}, {
									"case":	510,
									"scores":	[-5.103982737161795]
								}, {
									"case":	511,
									"scores":	[-5.103982737161795]
								}, {
									"case":	512,
									"scores":	[-5.103982737161795]
								}, {
									"case":	513,
									"scores":	[-5.103982737161795]
								}, {
									"case":	514,
									"scores":	[-5.103982737161795]
								}, {
									"case":	515,
									"scores":	[-5.103982737161795]
								}, {
									"case":	516,
									"scores":	[-5.103982737161795]
								}, {
									"case":	517,
									"scores":	[-5.103982737161795]
								}, {
									"case":	518,
									"scores":	[-5.103982737161795]
								}, {
									"case":	519,
									"scores":	[-5.103982737161795]
								}, {
									"case":	520,
									"scores":	[-5.103982737161795]
								}, {
									"case":	521,
									"scores":	[-5.103982737161795]
								}, {
									"case":	522,
									"scores":	[-5.103982737161795]
								}, {
									"case":	523,
									"scores":	[-5.103982737161795]
								}, {
									"case":	524,
									"scores":	[-5.103982737161795]
								}, {
									"case":	525,
									"scores":	[-5.103982737161795]
								}, {
									"case":	526,
									"scores":	[-5.103982737161795]
								}, {
									"case":	527,
									"scores":	[-5.103982737161795]
								}, {
									"case":	528,
									"scores":	[-5.103982737161795]
								}, {
									"case":	529,
									"scores":	[-5.103982737161795]
								}, {
									"case":	530,
									"scores":	[-5.103982737161795]
								}, {
									"case":	531,
									"scores":	[-5.103982737161795]
								}, {
									"case":	532,
									"scores":	[-5.103982737161795]
								}, {
									"case":	533,
									"scores":	[-5.103982737161795]
								}, {
									"case":	534,
									"scores":	[-5.103982737161795]
								}, {
									"case":	535,
									"scores":	[-5.103982737161795]
								}, {
									"case":	536,
									"scores":	[-5.103982737161795]
								}, {
									"case":	537,
									"scores":	[-5.103982737161795]
								}, {
									"case":	538,
									"scores":	[-5.103982737161795]
								}, {
									"case":	539,
									"scores":	[-5.103982737161795]
								}, {
									"case":	540,
									"scores":	[-5.103982737161795]
								}, {
									"case":	541,
									"scores":	[-5.103982737161795]
								}, {
									"case":	542,
									"scores":	[-5.103982737161795]
								}, {
									"case":	543,
									"scores":	[-5.103982737161795]
								}, {
									"case":	544,
									"scores":	[-5.103982737161795]
								}, {
									"case":	545,
									"scores":	[-5.103982737161795]
								}, {
									"case":	546,
									"scores":	[-5.103982737161795]
								}, {
									"case":	547,
									"scores":	[-5.103982737161795]
								}, {
									"case":	548,
									"scores":	[-5.103982737161795]
								}, {
									"case":	549,
									"scores":	[-5.103982737161795]
								}, {
									"case":	550,
									"scores":	[-5.103982737161795]
								}, {
									"case":	551,
									"scores":	[-5.103982737161795]
								}, {
									"case":	552,
									"scores":	[-5.103982737161795]
								}, {
									"case":	553,
									"scores":	[-5.103982737161795]
								}, {
									"case":	554,
									"scores":	[-5.103982737161795]
								}, {
									"case":	555,
									"scores":	[-5.103982737161795]
								}, {
									"case":	556,
									"scores":	[-5.103982737161795]
								}, {
									"case":	557,
									"scores":	[-5.103982737161795]
								}, {
									"case":	558,
									"scores":	[-5.103982737161795]
								}, {
									"case":	559,
									"scores":	[-5.103982737161795]
								}, {
									"case":	560,
									"scores":	[-5.103982737161795]
								}, {
									"case":	561,
									"scores":	[-5.103982737161795]
								}, {
									"case":	562,
									"scores":	[-5.103982737161795]
								}, {
									"case":	563,
									"scores":	[-5.103982737161795]
								}, {
									"case":	564,
									"scores":	[-5.103982737161795]
								}, {
									"case":	565,
									"scores":	[-5.103982737161795]
								}, {
									"case":	566,
									"scores":	[-5.103982737161795]
								}, {
									"case":	567,
									"scores":	[-5.103982737161795]
								}, {
									"case":	568,
									"scores":	[-5.103982737161795]
								}, {
									"case":	569,
									"scores":	[-5.103982737161795]
								}, {
									"case":	570,
									"scores":	[-5.103982737161795]
								}, {
									"case":	571,
									"scores":	[-5.103982737161795]
								}, {
									"case":	572,
									"scores":	[-5.103982737161795]
								}, {
									"case":	573,
									"scores":	[-5.103982737161795]
								}, {
									"case":	574,
									"scores":	[-5.103982737161795]
								}, {
									"case":	575,
									"scores":	[-5.103982737161795]
								}, {
									"case":	576,
									"scores":	[-5.103982737161795]
								}, {
									"case":	577,
									"scores":	[-5.103982737161795]
								}, {
									"case":	578,
									"scores":	[-5.103982737161795]
								}, {
									"case":	579,
									"scores":	[-5.103982737161795]
								}, {
									"case":	580,
									"scores":	[-5.103982737161795]
								}, {
									"case":	581,
									"scores":	[-5.103982737161795]
								}, {
									"case":	582,
									"scores":	[-5.103982737161795]
								}, {
									"case":	583,
									"scores":	[-5.103982737161795]
								}, {
									"case":	584,
									"scores":	[-5.103982737161795]
								}, {
									"case":	585,
									"scores":	[-5.103982737161795]
								}, {
									"case":	586,
									"scores":	[-5.103982737161795]
								}, {
									"case":	587,
									"scores":	[-5.103982737161795]
								}, {
									"case":	588,
									"scores":	[-5.103982737161795]
								}, {
									"case":	589,
									"scores":	[-5.103982737161795]
								}, {
									"case":	590,
									"scores":	[-5.103982737161795]
								}, {
									"case":	591,
									"scores":	[-5.103982737161795]
								}, {
									"case":	592,
									"scores":	[-5.103982737161795]
								}, {
									"case":	593,
									"scores":	[-5.103982737161795]
								}, {
									"case":	594,
									"scores":	[-5.103982737161795]
								}, {
									"case":	595,
									"scores":	[-5.103982737161795]
								}, {
									"case":	596,
									"scores":	[-5.103982737161795]
								}, {
									"case":	597,
									"scores":	[-5.103982737161795]
								}, {
									"case":	598,
									"scores":	[-5.103982737161795]
								}, {
									"case":	599,
									"scores":	[-5.103982737161795]
								}, {
									"case":	600,
									"scores":	[-5.103982737161795]
								}, {
									"case":	601,
									"scores":	[-5.103982737161795]
								}, {
									"case":	602,
									"scores":	[-5.103982737161795]
								}, {
									"case":	603,
									"scores":	[-5.103982737161795]
								}, {
									"case":	604,
									"scores":	[-5.103982737161795]
								}, {
									"case":	605,
									"scores":	[-5.103982737161795]
								}, {
									"case":	606,
									"scores":	[-5.103982737161795]
								}, {
									"case":	607,
									"scores":	[-5.103982737161795]
								}, {
									"case":	608,
									"scores":	[-5.103982737161795]
								}, {
									"case":	609,
									"scores":	[-5.103982737161795]
								}, {
									"case":	610,
									"scores":	[-5.103982737161795]
								}, {
									"case":	611,
									"scores":	[-5.103982737161795]
								}, {
									"case":	612,
									"scores":	[-5.103982737161795]
								}, {
									"case":	613,
									"scores":	[-5.103982737161795]
								}, {
									"case":	614,
									"scores":	[-5.103982737161795]
								}, {
									"case":	615,
									"scores":	[-5.103982737161795]
								}, {
									"case":	616,
									"scores":	[-5.103982737161795]
								}, {
									"case":	617,
									"scores":	[-5.103982737161795]
								}, {
									"case":	618,
									"scores":	[-5.103982737161795]
								}, {
									"case":	619,
									"scores":	[-5.103982737161795]
								}, {
									"case":	620,
									"scores":	[-5.103982737161795]
								}, {
									"case":	621,
									"scores":	[-5.103982737161795]
								}, {
									"case":	622,
									"scores":	[-5.103982737161795]
								}, {
									"case":	623,
									"scores":	[-5.103982737161795]
								}, {
									"case":	624,
									"scores":	[-5.103982737161795]
								}, {
									"case":	625,
									"scores":	[-5.103982737161795]
								}, {
									"case":	626,
									"scores":	[-5.103982737161795]
								}, {
									"case":	627,
									"scores":	[-5.103982737161795]
								}, {
									"case":	628,
									"scores":	[-5.103982737161795]
								}, {
									"case":	629,
									"scores":	[-5.103982737161795]
								}, {
									"case":	630,
									"scores":	[-5.103982737161795]
								}, {
									"case":	631,
									"scores":	[-5.103982737161795]
								}, {
									"case":	632,
									"scores":	[-5.103982737161795]
								}, {
									"case":	633,
									"scores":	[-5.103982737161795]
								}, {
									"case":	634,
									"scores":	[-5.103982737161795]
								}, {
									"case":	635,
									"scores":	[-5.103982737161795]
								}, {
									"case":	636,
									"scores":	[-5.103982737161795]
								}, {
									"case":	637,
									"scores":	[-5.103982737161795]
								}, {
									"case":	638,
									"scores":	[-5.103982737161795]
								}, {
									"case":	639,
									"scores":	[-5.103982737161795]
								}, {
									"case":	640,
									"scores":	[-5.103982737161795]
								}, {
									"case":	641,
									"scores":	[-5.103982737161795]
								}, {
									"case":	642,
									"scores":	[-5.103982737161795]
								}, {
									"case":	643,
									"scores":	[-5.103982737161795]
								}, {
									"case":	644,
									"scores":	[-5.103982737161795]
								}, {
									"case":	645,
									"scores":	[-5.103982737161795]
								}, {
									"case":	646,
									"scores":	[-5.103982737161795]
								}, {
									"case":	647,
									"scores":	[-5.103982737161795]
								}, {
									"case":	648,
									"scores":	[-5.103982737161795]
								}, {
									"case":	649,
									"scores":	[-5.103982737161795]
								}, {
									"case":	650,
									"scores":	[-5.103982737161795]
								}, {
									"case":	651,
									"scores":	[-5.103982737161795]
								}, {
									"case":	652,
									"scores":	[-5.103982737161795]
								}, {
									"case":	653,
									"scores":	[-5.103982737161795]
								}, {
									"case":	654,
									"scores":	[-5.103982737161795]
								}, {
									"case":	655,
									"scores":	[-5.103982737161795]
								}, {
									"case":	656,
									"scores":	[-5.103982737161795]
								}, {
									"case":	657,
									"scores":	[-5.103982737161795]
								}, {
									"case":	658,
									"scores":	[-5.103982737161795]
								}, {
									"case":	659,
									"scores":	[-5.103982737161795]
								}, {
									"case":	660,
									"scores":	[-5.103982737161795]
								}, {
									"case":	661,
									"scores":	[-5.103982737161795]
								}, {
									"case":	662,
									"scores":	[-5.103982737161795]
								}, {
									"case":	663,
									"scores":	[-5.103982737161795]
								}, {
									"case":	664,
									"scores":	[-5.103982737161795]
								}, {
									"case":	665,
									"scores":	[-5.103982737161795]
								}, {
									"case":	666,
									"scores":	[-5.103982737161795]
								}, {
									"case":	667,
									"scores":	[-5.103982737161795]
								}, {
									"case":	668,
									"scores":	[-5.103982737161795]
								}, {
									"case":	669,
									"scores":	[-5.103982737161795]
								}, {
									"case":	670,
									"scores":	[-5.103982737161795]
								}, {
									"case":	671,
									"scores":	[-5.103982737161795]
								}, {
									"case":	672,
									"scores":	[-5.103982737161795]
								}, {
									"case":	673,
									"scores":	[-5.103982737161795]
								}, {
									"case":	674,
									"scores":	[-5.103982737161795]
								}, {
									"case":	675,
									"scores":	[-5.103982737161795]
								}, {
									"case":	676,
									"scores":	[-5.103982737161795]
								}, {
									"case":	677,
									"scores":	[-5.103982737161795]
								}, {
									"case":	678,
									"scores":	[-5.103982737161795]
								}, {
									"case":	679,
									"scores":	[-5.103982737161795]
								}, {
									"case":	680,
									"scores":	[-5.103982737161795]
								}, {
									"case":	681,
									"scores":	[-5.103982737161795]
								}, {
									"case":	682,
									"scores":	[-5.103982737161795]
								}, {
									"case":	683,
									"scores":	[-5.103982737161795]
								}, {
									"case":	684,
									"scores":	[-5.103982737161795]
								}, {
									"case":	685,
									"scores":	[-5.103982737161795]
								}, {
									"case":	686,
									"scores":	[-5.103982737161795]
								}, {
									"case":	687,
									"scores":	[-5.103982737161795]
								}, {
									"case":	688,
									"scores":	[-5.103982737161795]
								}, {
									"case":	689,
									"scores":	[-5.103982737161795]
								}, {
									"case":	690,
									"scores":	[-5.103982737161795]
								}, {
									"case":	691,
									"scores":	[-5.103982737161795]
								}, {
									"case":	692,
									"scores":	[-5.103982737161795]
								}, {
									"case":	693,
									"scores":	[-5.103982737161795]
								}, {
									"case":	694,
									"scores":	[-5.103982737161795]
								}, {
									"case":	695,
									"scores":	[-5.103982737161795]
								}, {
									"case":	696,
									"scores":	[-5.103982737161795]
								}, {
									"case":	697,
									"scores":	[-5.103982737161795]
								}, {
									"case":	698,
									"scores":	[-5.103982737161795]
								}, {
									"case":	699,
									"scores":	[-5.103982737161795]
								}, {
									"case":	700,
									"scores":	[-5.103982737161795]
								}, {
									"case":	701,
									"scores":	[-5.103982737161795]
								}, {
									"case":	702,
									"scores":	[-5.103982737161795]
								}, {
									"case":	703,
									"scores":	[-5.103982737161795]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	325,
			"size":	35
		}, {
			"switch":	0,
			"case":	326,
			"size":	35
		}, {
			"switch":	0,
			"case":	327,
			"size":	35
		}, {
			"switch":	0,
			"case":	328,
			"size":	35
		}, {
			"switch":	0,
			"case":	329,
			"size":	35
		}, {
			"switch":	0,
			"case":	330,
			"size":	35
		}, {
			"switch":	1,
			"case":	1,
			"size":	35
		}, {
			"switch":	1,
			"case":	2,
			"size":	35
		}, {
			"switch":	1,
			"case":	3,
			"size":	35
		}, {
			"switch":	1,
			"case":	7,
			"size":	35
		}, {
			"switch":	2,
			"case":	1,
			"size":	35
		}, {
			"switch":	2,
			"case":	2,
			"size":	35
		}, {
			"switch":	3,
			"case":	325,
			"size":	35
		}, {
			"switch":	3,
			"case":	326,
			"size":	35
		}, {
			"switch":	3,
			"case":	327,
			"size":	35
		}, {
			"switch":	3,
			"case":	328,
			"size":	35
		}, {
			"switch":	3,
			"case":	329,
			"size":	35
		}, {
			"switch":	3,
			"case":	330,
			"size":	35
		}, {
			"switch":	4,
			"case":	1,
			"size":	35
		}, {
			"switch":	5,
			"case":	200,
			"size":	6
		}, {
			"switch":	5,
			"case":	201,
			"size":	6
		}, {
			"switch":	5,
			"case":	202,
			"size":	6
		}, {
			"switch":	5,
			"case":	203,
			"size":	6
		}, {
			"switch":	6,
			"case":	1,
			"size":	6
		}, {
			"switch":	6,
			"case":	2,
			"size":	6
		}, {
			"switch":	6,
			"case":	4,
			"size":	6
		}, {
			"switch":	7,
			"case":	200,
			"size":	6
		}, {
			"switch":	7,
			"case":	201,
			"size":	6
		}, {
			"switch":	7,
			"case":	202,
			"size":	6
		}, {
			"switch":	7,
			"case":	203,
			"size":	6
		}, {
			"switch":	8,
			"case":	1,
			"size":	6
		}, {
			"switch":	9,
			"case":	1,
			"size":	6
		}, {
			"switch":	10,
			"case":	200,
			"size":	6
		}, {
			"switch":	10,
			"case":	201,
			"size":	6
		}, {
			"switch":	10,
			"case":	202,
			"size":	6
		}, {
			"switch":	10,
			"case":	203,
			"size":	6
		}, {
			"switch":	11,
			"case":	1,
			"size":	6
		}, {
			"switch":	11,
			"case":	2,
			"size":	6
		}, {
			"switch":	11,
			"case":	3,
			"size":	6
		}, {
			"switch":	12,
			"case":	200,
			"size":	6
		}, {
			"switch":	12,
			"case":	201,
			"size":	6
		}, {
			"switch":	12,
			"case":	202,
			"size":	6
		}, {
			"switch":	12,
			"case":	203,
			"size":	6
		}, {
			"switch":	13,
			"case":	1,
			"size":	6
		}, {
			"switch":	13,
			"case":	2,
			"size":	6
		}, {
			"switch":	13,
			"case":	52,
			"size":	6
		}, {
			"switch":	14,
			"case":	200,
			"size":	6
		}, {
			"switch":	14,
			"case":	201,
			"size":	6
		}, {
			"switch":	14,
			"case":	202,
			"size":	6
		}, {
			"switch":	14,
			"case":	203,
			"size":	6
		}, {
			"switch":	15,
			"case":	1,
			"size":	6
		}, {
			"switch":	16,
			"case":	1,
			"size":	6
		}, {
			"switch":	16,
			"case":	2,
			"size":	6
		}, {
			"switch":	17,
			"case":	1,
			"size":	6
		}, {
			"switch":	17,
			"case":	2,
			"size":	6
		}, {
			"switch":	19,
			"case":	243,
			"size":	28
		}, {
			"switch":	20,
			"case":	1,
			"size":	28
		}, {
			"switch":	21,
			"case":	243,
			"size":	28
		}, {
			"switch":	21,
			"case":	244,
			"size":	28
		}, {
			"switch":	22,
			"case":	1,
			"size":	28
		}, {
			"switch":	22,
			"case":	2,
			"size":	28
		}, {
			"switch":	22,
			"case":	3,
			"size":	28
		}, {
			"switch":	23,
			"case":	243,
			"size":	28
		}, {
			"switch":	23,
			"case":	244,
			"size":	28
		}, {
			"switch":	24,
			"case":	1,
			"size":	28
		}, {
			"switch":	24,
			"case":	2,
			"size":	28
		}, {
			"switch":	25,
			"case":	243,
			"size":	28
		}, {
			"switch":	26,
			"case":	1,
			"size":	28
		}, {
			"switch":	26,
			"case":	2,
			"size":	28
		}, {
			"switch":	26,
			"case":	3,
			"size":	28
		}, {
			"switch":	27,
			"case":	1,
			"size":	28
		}, {
			"switch":	27,
			"case":	2,
			"size":	28
		}, {
			"switch":	28,
			"case":	395,
			"size":	37
		}, {
			"switch":	29,
			"case":	1,
			"size":	37
		}, {
			"switch":	29,
			"case":	2,
			"size":	37
		}, {
			"switch":	29,
			"case":	30,
			"size":	37
		}, {
			"switch":	30,
			"case":	412,
			"size":	38
		}, {
			"switch":	31,
			"case":	1,
			"size":	38
		}, {
			"switch":	32,
			"case":	1,
			"size":	37
		}, {
			"switch":	32,
			"case":	2,
			"size":	37
		}, {
			"switch":	33,
			"case":	395,
			"size":	37
		}, {
			"switch":	33,
			"case":	396,
			"size":	37
		}, {
			"switch":	34,
			"case":	1,
			"size":	37
		}, {
			"switch":	34,
			"case":	2,
			"size":	37
		}, {
			"switch":	34,
			"case":	3,
			"size":	37
		}, {
			"switch":	35,
			"case":	395,
			"size":	37
		}, {
			"switch":	35,
			"case":	396,
			"size":	37
		}, {
			"switch":	36,
			"case":	1,
			"size":	37
		}, {
			"switch":	36,
			"case":	2,
			"size":	37
		}, {
			"switch":	37,
			"case":	395,
			"size":	37
		}, {
			"switch":	38,
			"case":	1,
			"size":	37
		}, {
			"switch":	38,
			"case":	2,
			"size":	37
		}, {
			"switch":	38,
			"case":	51,
			"size":	37
		}, {
			"switch":	39,
			"case":	1,
			"size":	37
		}, {
			"switch":	39,
			"case":	2,
			"size":	37
		}, {
			"switch":	40,
			"case":	396,
			"size":	37
		}, {
			"switch":	41,
			"case":	1,
			"size":	37
		}, {
			"switch":	41,
			"case":	2,
			"size":	37
		}, {
			"switch":	41,
			"case":	3,
			"size":	37
		}, {
			"switch":	42,
			"case":	1,
			"size":	37
		}, {
			"switch":	42,
			"case":	2,
			"size":	37
		}, {
			"switch":	43,
			"case":	395,
			"size":	37
		}, {
			"switch":	44,
			"case":	1,
			"size":	37
		}, {
			"switch":	44,
			"case":	2,
			"size":	37
		}, {
			"switch":	44,
			"case":	3,
			"size":	37
		}, {
			"switch":	45,
			"case":	1,
			"size":	37
		}, {
			"switch":	45,
			"case":	2,
			"size":	37
		}, {
			"switch":	46,
			"case":	395,
			"size":	37
		}, {
			"switch":	47,
			"case":	1,
			"size":	37
		}, {
			"switch":	47,
			"case":	2,
			"size":	37
		}, {
			"switch":	47,
			"case":	3,
			"size":	37
		}, {
			"switch":	48,
			"case":	1,
			"size":	37
		}, {
			"switch":	48,
			"case":	2,
			"size":	37
		}, {
			"switch":	49,
			"case":	225,
			"size":	2
		}, {
			"switch":	50,
			"case":	1,
			"size":	2
		}, {
			"switch":	51,
			"case":	225,
			"size":	2
		}, {
			"switch":	52,
			"case":	1,
			"size":	2
		}, {
			"switch":	53,
			"case":	225,
			"size":	2
		}, {
			"switch":	54,
			"case":	1,
			"size":	2
		}, {
			"switch":	54,
			"case":	2,
			"size":	2
		}, {
			"switch":	54,
			"case":	3,
			"size":	2
		}, {
			"switch":	55,
			"case":	1,
			"size":	2
		}, {
			"switch":	55,
			"case":	2,
			"size":	2
		}, {
			"switch":	56,
			"case":	225,
			"size":	2
		}, {
			"switch":	57,
			"case":	1,
			"size":	2
		}, {
			"switch":	58,
			"case":	148,
			"size":	0
		}, {
			"switch":	59,
			"case":	1,
			"size":	0
		}, {
			"switch":	60,
			"case":	148,
			"size":	0
		}, {
			"switch":	61,
			"case":	1,
			"size":	0
		}],
	"func_locations":	[{
			"file":	"gzip.c",
			"functions":	[{
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"abort_gzip",
					"begin":	1870,
					"end":	1875
				}, {
					"function":	"abort_gzip_signal",
					"begin":	1880,
					"end":	1891
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"check_ofname",
					"begin":	1615,
					"end":	1637
				}, {
					"function":	"copy_stat",
					"begin":	1644,
					"end":	1699
				}, {
					"function":	"create_outfile",
					"begin":	906,
					"end":	957
				}, {
					"function":	"do_exit",
					"begin":	1823,
					"end":	1845
				}, {
					"function":	"do_list",
					"begin":	1443,
					"end":	1545
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstat64",
					"begin":	511,
					"end":	515
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"fstatat64",
					"begin":	518,
					"end":	523
				}, {
					"function":	"get_method",
					"begin":	1251,
					"end":	1436
				}, {
					"function":	"get_stat_atime",
					"begin":	103,
					"end":	114
				}, {
					"function":	"get_stat_atime_ns",
					"begin":	49,
					"end":	59
				}, {
					"function":	"get_stat_birthtime",
					"begin":	146,
					"end":	185
				}, {
					"function":	"get_stat_birthtime_ns",
					"begin":	88,
					"end":	100
				}, {
					"function":	"get_stat_ctime",
					"begin":	117,
					"end":	128
				}, {
					"function":	"get_stat_ctime_ns",
					"begin":	62,
					"end":	72
				}, {
					"function":	"get_stat_mtime",
					"begin":	131,
					"end":	142
				}, {
					"function":	"get_stat_mtime_ns",
					"begin":	75,
					"end":	85
				}, {
					"function":	"get_suffix",
					"begin":	971,
					"end":	1011
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"getline",
					"begin":	114,
					"end":	118
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"help",
					"begin":	329,
					"end":	376
				}, {
					"function":	"input_eof",
					"begin":	586,
					"end":	602
				}, {
					"function":	"install_signal_handlers",
					"begin":	1780,
					"end":	1818
				}, {
					"function":	"license",
					"begin":	379,
					"end":	385
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"lstat64",
					"begin":	504,
					"end":	508
				}, {
					"function":	"main",
					"begin":	406,
					"end":	583
				}, {
					"function":	"make_ofname",
					"begin":	1162,
					"end":	1237
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"open_and_stat",
					"begin":	1017,
					"end":	1050
				}, {
					"function":	"open_input_file",
					"begin":	1060,
					"end":	1156
				}, {
					"function":	"progerror",
					"begin":	395,
					"end":	403
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"remove_output_file",
					"begin":	1850,
					"end":	1865
				}, {
					"function":	"shorten_name",
					"begin":	1556,
					"end":	1609
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"stat64",
					"begin":	497,
					"end":	501
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"treat_dir",
					"begin":	1706,
					"end":	1775
				}, {
					"function":	"treat_file",
					"begin":	698,
					"end":	895
				}, {
					"function":	"treat_stdin",
					"begin":	607,
					"end":	693
				}, {
					"function":	"try_help",
					"begin":	320,
					"end":	326
				}, {
					"function":	"version",
					"begin":	388,
					"end":	393
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}]
		}]
}
